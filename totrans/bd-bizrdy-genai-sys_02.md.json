["```py\n!curl -L https://raw.githubusercontent.com/Denis2054/Building-Business-Ready-Generative-AI-Systems/master/commons/grequests.py --output grequests.py\nfrom grequests import download\ndownload(\"commons\",\"requirements01.py\")\ndownload(\"commons\",\"openai_setup.py\")\ndownload(\"commons\",\"openai_api.py\") \n```", "```py\n# Start the conversational agent\ndef run_conversational_agent(\n    uinput, mrole, mcontent, user_role, user_name\n):\n    conversational_agent(uinput, mrole, mcontent, user_role, user_name) \n```", "```py\nmessages_obj = [{\"role\": mrole, \"content\": mcontent}] \n```", "```py\nprint(\"Welcome to the conversational agent! Type 'q' or 'quit' to end the conversation.\") \n```", "```py\nif initial_user_input:\n    print(f\"{user_name}: {initial_user_input}\")\n    messages_obj.append(\n        {\"role\": user_role, \"content\": initial_user_input}\n    ) \n```", "```py\nconversation_string = cleanse_conversation_log(messages_obj) \n```", "```py\ndef cleanse_conversation_log(messages_obj):\n  conversation_str = \" \".join(\n        [f\"{entry['role']}: {entry['content']}\" for entry in messages_obj]\n    )\n    # Remove problematic punctuations\n    return re.sub(r\"[^\\w\\s,.?!:]\", \"\", conversation_str) \n```", "```py\nagent_response = make_openai_api_call(\n    input=conversation_string,\n    mrole=mrole,\n    mcontent=mcontent,\n    user_role=user_role\n) \n```", "```py\nmessages_obj.append({\"role\": \"assistant\", \"content\": agent_response}) \n```", "```py\nprint(f\"Agent: {agent_response}\") \n```", "```py\nwhile True:\n    user_input = input(f\"{user_name}: \")\n    if user_input.lower() in [\"q\", \"quit\"]:\n        print(\"Exiting the conversation. Goodbye!\")\n        break \n```", "```py\nuser_input = input(f\"{user_name}: \") \n```", "```py\nif user_input.lower() in [\"q\", \"quit\"]:\n    print(\"Exiting the conversation. Goodbye!\")\n    break \n```", "```py\nmessages_obj.append({\"role\": user_role, \"content\": user_input}) \n```", "```py\nconversation_string = cleanse_conversation_log(messages_obj) \n```", "```py\nagent_response = make_openai_api_call(\n    input=conversation_string,\n    mrole=mrole,\n    mcontent=mcontent,\n    user_role=user_role\n) \n```", "```py\nmessages_obj.append({\"role\": \"assistant\", \"content\": agent_response}) \n```", "```py\nprint(f\"Agent: {agent_response}\") \n```", "```py\nwith open(\"conversation_log.txt\", \"w\") as log_file:\n    log_file.write(\"\\n\".join([f\"{(user_name if entry['role'] == 'user' else entry['role'])}: {entry['content']}\" for entry in messages_obj])) \n```", "```py\nprint(\"Conversation saved to 'conversation_log.txt'.\") \n```", "```py\nuinput = \"Hawai is on a geological volcano system. Explain:\"\nmrole = \"system\"\nmcontent = \"You are an expert in geology.\"\nuser_role = \"user\" \n```", "```py\nuser_name = \"John\" \n```", "```py\nfrom openai_api import make_openai_api_call \n```", "```py\nfrom conversational_agent import run_conversational_agent\nrun_conversational_agent(uinput, mrole, mcontent, user_role,user_name) \n```", "```py\nWelcome to the conversational agent! Type 'q' or 'quit' to end the conversation. \n```", "```py\nJohn: Hawai is on a geological volcano system. Explain: \n```", "```py\nAgent: Hawaii is part of a geological volcanic system known as a \"hotspot\"… \n```", "```py\nJohn: Can we surf there? \n```", "```py\nAgent: Yes, you can definitely surf in Hawaii! The Hawaiian Islands are renowned … \n```", "```py\nJohn: Where are the best places to stay? \n```", "```py\nAgent: Hawaii offers a wide range of accommodations … \n```", "```py\nJohn: quit \n```", "```py\nAgent:Exiting the conversation. Goodbye!\nConversation saved to 'conversation_log.txt'. \n```", "```py\nfrom processing_conversations import load_and_display_conversation_log\nconversation_log = load_and_display_conversation_log() \n```", "```py\nfrom IPython.core.display import display, HTML\nimport re\n# Step 1: Load and Display Conversation Log\ndef load_and_display_conversation_log():\n    try:\n        with open(\"conversation_log.txt\", \"r\") as log_file:\n            conversation_log = log_file.readlines()\n        # Prepare HTML for display\n        html_content = \"<h3>Loaded Conversation Log</h3><table border='1'>\"\n        for line in conversation_log:\n            html_content += f\"<tr><td>{line.strip()}</td></tr>\"\n        html_content += \"</table>\"\n        # Display the HTML\n        display(HTML(html_content))\n        return conversation_log\n    except FileNotFoundError:\n        print(\"Error: conversation_log.txt not found. Ensure it exists in the current directory.\")\n        return [] \n```", "```py\nsystem: You are an expert in geology.\nJohn: Hawai is on a geological volcano system. Explain:\nassistant: Hawaii is part of a geological volcanic system… \n```", "```py\nfrom processing_conversations import cleanse_conversation_log\nfrom processing_conversations import initialize_uinput \n```", "```py\ncleansed_log = cleanse_conversation_log(conversation_log)\nnuinput = initialize_uinput(cleansed_log) \n```", "```py\n# Step 2: Clean the conversation log by removing punctuations and special characters\ndef cleanse_conversation_log(conversation_log):\n    cleansed_log = []\n    for line in conversation_log:\n        # Remove problematic punctuations and special characters\n        cleansed_line = re.sub(r\"[^\\w\\s,.?!:]\", \"\", line)\n        cleansed_log.append(cleansed_line.strip())\n    return \" \".join(cleansed_log)  # Combine all lines into a single string \n```", "```py\n# Step 3: Initialize `uinput` with the cleansed conversation log to continue the conversation\ndef initialize_uinput(cleansed_log):\n    if cleansed_log:\n        print(\"\\nCleansed conversation log for continuation:\")\n        print(cleansed_log)\n        return cleansed_log  # Use the cleansed log as the new input\n    else:\n        print(\"Error: No data available to initialize `uinput`.\")\n        return \"\" \n```", "```py\nCleansed conversation log for continuation:\nsystem: You are an expert in geology… \n```", "```py\n# `nuinput` now contains the cleansed version of the conversation log and can be used\nprint(\"\\nInitialized `nuinput` for continuation:\", nuinput) \n```", "```py\nninput = nuinput+ \"What about surfing in Long Beach\"\nmrole = \"system\"\nmcontent = \"You are an expert in geology.\"\nuser_role = \"user\"\nuser_name = \"Myriam\" \n```", "```py\nMyriam: What about surfing in Long Beach \n```", "```py\nAgent:Long Beach, California, offers a different surfing experience compared to Hawai… \n```", "```py\nMyriam: quit \n```", "```py\nAgent:Exiting the conversation. Goodbye!\nConversation saved to 'conversation_log.txt'. \n```", "```py\n# Run the process\nconversation_log = load_and_display_conversation_log() \n```", "```py\nsystem: You are an expert in geology.\nMyriam: system: You are an expert … \n```", "```py\nuinput =nuinput+ \"Read the whole dialog then choose the best for geology research\"\nmrole = \"system\"\nmcontent = \"You are an expert in geology.\"\nuser_role = \"user\"\nuser_name = \"Bob\" \n```", "```py\nBob:\"Read the whole dialog then choose the best for geology research\" \n```", "```py\nAgent: For geology research, the most relevant part of the dialogue is the explanation of Hawaii's geological volcanic system. This section provides detailed insights into the Hawaiian hotspot, mantle plumes, volcanic activity,… \n```", "```py\nBob: quit \n```", "```py\nAgent:Exiting the conversation. Goodbye!\nConversation saved to 'conversation_log.txt'. \n```", "```py\ndownload(\"commons\",\"requirements01.py\")\ndownload(\"commons\",\"openai_setup.py\")\ndownload(\"commons\",\"openai_api.py\") \n```", "```py\ninput=\"This aint the right way to talk.\" \n```", "```py\nmrole = \"system\"\nuser_role = \"user\"\nmcontent = \"Follow the instructions in the input\" \n```", "```py\n# API function call\ntask_response = openai_api.make_openai_api_call(\n    input,mrole,mcontent,user_role\n)\nprint(task_response) \n```", "```py\nI apologize if my previous response didn't meet your expectations. Please let me know how I can assist you better! \n```", "```py\ninput=\"Is the following sentence gramatically correct:This aint the right way to talk.\"\nmrole = \"system\"\nuser_role = \"user\"\nmcontent = \"Follow the instructions in the input\"\n# API function call\ntask_response = openai_api.make_openai_api_call(\n    input,mrole,mcontent,user_role\n)\nprint(task_response) \n```", "```py\nThe sentence \"This aint the right way to talk.\" is not grammatically correct. The response corrects the sentence:\n\"This isn't the right way to talk.\"\nAlternatively, if you want to maintain the informal tone, you could write:\n\"This ain't the right way to talk.\"\nNote that \"ain't\" is considered informal and nonstandard in formal writing. \n```", "```py\ninput=”Translate this sentence into French: Paris is quite a city to visit.”\nmrole = “system”\nuser_role = “user”\nmcontent = “Follow the instructions in the input”\n# API function call\ntask_response = openai_api.make_openai_api_call(\n    input,mrole,mcontent,user_role\n)\nprint(task_response) \n```", "```py\nParis est vraiment une ville à visiter. \n```", "```py\ninput=”stsb:Sentence 1: This is a big dog. Sentence 2: This dog is very big.”\nmrole = “system”\nuser_role = “user”\nmcontent = “Follow the instructions in the input”\n# API function call\ntask_response = openai_api.make_openai_api_call(\n    input,mrole,mcontent,user_role)\nprint(task_response) \n```", "```py\nThe sentences \"This is a big dog.\" and \"This dog is very big.\" are semantically similar. Both sentences convey the idea that the dog in question is large in size. The difference in wording does not significantly alter the meaning, as both sentences describe the same characteristic of the dog. \n```", "```py\ninput=\"Summarize this text in 10 words maximum: The group walked in the forest on a nice sunny day. The birds were singing and everyone was happy.\"\nmrole = \"system\"\nuser_role = \"user\"\nmcontent = \"Follow the instructions in the input\"\n# API function call\ntask_response = openai_api.make_openai_api_call(\n    input,mrole,mcontent,user_role)\nprint(task_response) \n```", "```py\nGroup enjoyed a sunny forest walk with singing birds. \n```", "```py\ndownload(\"commons\",\"requirements01.py\")\ndownload(\"commons\",\"openai_setup.py\")\ndownload(\"commons\",\"openai_api.py\") \n```", "```py\n    if prompt==1:\n        input = \"Gladiator II is a great movie although I didn't like some of the scenes. I liked the actors though. Overall I really enjoyed the experience.\" \n    ```", "```py\n    if prompt==2:\n        input = \"Generative AI models such as GPT-4o can be built into Generative AI Systems. Provide more information.\" \n    ```", "```py\nscenarios = [\n    {\n**\"scenario_number\"****:** **1****,**\n        \"description\": \"Market Semantic analysis.You will be provided with a market survey on a give range of products.The term market must be in the user or system input. Your task is provide an analysis.\"\n    },\n    {\n**\"scenario_number\"****:** **2****,**\n        \"description\": \" Sentiment analysis  Read the content and classify the content as an opinion  If it is not opinion, stop there  If it is an opinion then your task is to perform a sentiment analysis on these statements and provide a score with the label: Analysis score: followed by a numerical value between 0 and 1  with no + or - sign.Add an explanation.\"\n    },\n    {\n**\"scenario_number\"****:** **3****,**\n        \"description\": \"Semantic analysis.This is not an analysis but a semantic search. Provide more information on the topic.\"\n    }\n] \n```", "```py\n# Original list of dictionaries\nscenario_instructions = [\n    {\n        **\"Market Semantic analysis.You will be provided with a market survey on a give range of products.The term market must be in the user or system input. Your task is provide an analysis.\"**\n    },\n    {\n        **\"Sentiment analysis  Read the content return a sentiment analysis on this text and provide a score with the label named : Sentiment analysis score followed by a numerical value between 0 and 1  with no + or - sign and  add an explanation to justify the score.\"**\n    },\n    {\n        **\"Semantic analysis.This is not an analysis but a semantic search. Provide more information on the topic.\"**\n    }\n] \n```", "```py\n# Extract the strings from each dictionary\ninstructions_as_strings = [\n    list(entry)[0] for entry in scenario_instructions\n] \n```", "```py\n**# Define the parameters for the function call**\nmrole = \"system\"\nmcontent = \"You are an assistant that matches user inputs to predefined scenarios. Select the scenario that best matches the input. Respond with the scenario_number only.\"\nuser_role = \"user\" \n```", "```py\n# Adjust `input` to combine user input with scenarios\nselection_input = f\"User input: {input}\\nScenarios: {scenarios}\"\nprint(selection_input) \n```", "```py\n# Call the function using your standard API call\nresponse = openai_api.make_openai_api_call(\n    selection_input, mrole, mcontent, user_role\n) \n```", "```py\nUser input: Gladiator II is a great movie \n```", "```py\n# Print the response\nprint(\"Scenario:\",response ) \n```", "```py\nscenario_number=int(response)\ninstructions=scenario_instructions[scenario_number-1]\nprint(instructions) \n```", "```py\n{'Sentiment analysis  Read the content return a sentiment analysis on this text and provide a score with the label named : Sentiment analysis score followed by a numerical value between 0 and 1  with no + or - sign and  add an explanation to justify the score.'} \n```", "```py\nprint(input) \n```", "```py\n# Accessing by line number (1-based index)\nline_number = scenario_number\ninstruction = instructions_as_strings[line_number - 1]  # Adjusting for 0-based indexing\nprint(f\"Instruction on line {line_number}:\\n{instruction}\")\nmrole = \"system\"\nuser_role = \"user\"\nmcontent = instruction \n```", "```py\nInstruction on line 2:\nSentiment analysis  Read the content return a sentiment analysis nalysis on this text and provide a score with the label named : Sentiment analysis score followed by a numerical value between 0 and 1  with no + or - sign and  add an explanation to justify the score. \n```", "```py\n# API function call\nsc_input=instruction +\" \"+ input\nprint(sc_input)\ntask_response = openai_api.make_openai_api_call(\n    sc_input,mrole,mcontent,user_role\n)\nprint(task_response) \n```", "```py\nSentiment analysis score 0.75\nThe text expresses a generally positive sentiment towards the movie \"Gladiator II.\" The use of words like \"great movie,\" \"liked the actors,\" and \"really enjoyed the experience\" indicates a favorable opinion. However, the mention of not liking some of the scenes introduces a slight negative element. Despite this, the overall enjoyment and positive remarks about the actors and the movie as a whole outweigh the negative aspect, resulting in a sentiment score leaning towards the positive side. \n```", "```py\nprompt=2\n…\nif prompt==2:\n    input = \"Generative AI models such as GPT-4o can be built into Generative AI Systems. Provide more information.\" \n```", "```py\n# Accessing by line number (1-based index)\nline_number = scenario_number\ninstruction = instructions_as_strings[line_number - 1]  # Adjusting for 0-based indexing\nprint(f\"Instruction on line {line_number}:\\n{instruction}\")\nmrole = \"system\"\nuser_role = \"user\"\nmcontent = instruction \n```", "```py\nInstruction on line 3:\nSemantic analysis.This is not an analysis but a semantic search. Provide more information on the topic. \n```", "```py\nprint(task_response) \n```", "```py\nGenerative AI models, like GPT-4, are advanced machine learning models designed to generate human-like text based on the input they receive…. \n```"]