- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the book you will want to have by your side when you cross the door
    of a new consulting gig or take on a new Natural Language Processing (NLP) problem.
    This book starts as a private repository of LingPipe recipes that Baldwin continually
    referred to when facing repeated but twitchy NLP problems with system building.
    We are an open source company but the code never merited sharing. Now they are
    shared.
  prefs: []
  type: TYPE_NORMAL
- en: Honestly, the LingPipe API is an intimidating and opaque edifice to code against
    like any rich and complex Java API. Add in the "black arts" quality needed to
    get NLP systems working and we have the perfect conditions to satisfy the need
    for a recipe book that minimizes theory and maximizes the practicality of getting
    the job done with best practices sprinkled in from 20 years in the business.
  prefs: []
  type: TYPE_NORMAL
- en: This book is about getting the job done; damn the theory! Take this book and
    build the next generation of NLP systems and send us a note about what you did.
  prefs: []
  type: TYPE_NORMAL
- en: LingPipe is the best tool on the planet to build NLP systems with; this book
    is the way to use it.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0014_split_000.html#page "Chapter 1. Simple Classifiers"),
    *Simple Classifiers*, explains that a huge percentage of NLP problems are actually
    classification problems. This chapter covers very simple but powerful classifiers
    based on character sequences and then brings in evaluation techniques such as
    cross-validation and metrics such as precision, recall, and the always-BS-resisting
    confusion matrix. You get to train yourself on your own and download data from
    Twitter. The chapter ends with a simple sentiment example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0027_split_000.html#page "Chapter 2. Finding and Working with
    Words"), *Finding and Working with Words*, is exactly as boring as it sounds but
    there are some high points. The last recipe will show you how to tokenize Chinese/Japanese/Vietnamese
    languages, which doesn''t have whitespaces, to help define words. We will show
    you how to wrap Lucene tokenizers, which cover all kinds of fun languages such
    as Arabic. Almost everything later in the book relies on tokenization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0036_split_000.html#page "Chapter 3. Advanced Classifiers"),
    *Advanced Classifiers*, introduces the star of modern NLP systems—logistic regression
    classifiers. 20 years of hard-won experience lurks in this chapter. We will address
    the life cycle around building classifiers and how to create training data, cheat
    when creating training data with active learning, and how to tune and make the
    classifiers work faster.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0051_split_000.html#page "Chapter 4. Tagging Words and Tokens"),
    *Tagging Words and Tokens*, explains that language is about words. This chapter
    focuses on ways of applying categories to tokens, which in turn drives many of
    the high-end uses of LingPipe such as entity detection (people/places/orgs in
    text), part-of-speech tagging, and more. It starts with tag clouds, which have
    been described as "mullet of the Internet" and ends with a foundational recipe
    for conditional random fields (CRF), which can provide state-of-the-art performance
    for entity-detection tasks. In between, we will address confidence-tagged words,
    which is likely to be a very important dimension of more sophisticated systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0061_split_000.html#page "Chapter 5. Finding Spans in Text
    – Chunking"), *Finding Spans in Text – Chunking*, shows that text is not words
    alone. It is collections of words, usually in spans. This chapter will advance
    from word tagging to span tagging, which brings in capabilities such as finding
    sentences, named entities, and basal NPs and VPs. The full power of CRFs are addressed
    with discussions on feature extraction and tuning. Dictionary approaches are discussed
    as they are ways of combining chunkings.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0075_split_000.html#page "Chapter 6. String Comparison and
    Clustering"), *String Comparison and Clustering*, focuses on comparing text with
    each other, independent of a trained classifier. The technologies range from the
    hugely practical spellchecking to the hopeful but often frustrating Latent Dirichelet
    Allocation (LDA) clustering approach. Less presumptive technologies such as single-link
    and complete-link clustering have driven major commercial successes for us. Don''t
    ignore this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0085_split_000.html#page "Chapter 7. Finding Coreference Between
    Concepts/People"), *Finding Coreference Between Concepts/People*, lays the future
    but unfortunately, you won''t get the ultimate recipe, just our best efforts so
    far. This is one of the bleeding edges of industrial and academic NLP efforts
    that has tremendous potential. Potential is why we include our efforts to help
    grease the way to see this technology in use.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need some NLP problems and a solid foundation in Java, a computer, and a
    developer-savvy approach.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have NLP problems or you want to educate yourself in comment NLP issues,
    this book is for you. With some creativity, you can train yourself into being
    a solid NLP developer, a beast so rare that they are seen about as often as unicorns,
    with the result of more interesting job prospects in hot technology areas such
    as Silicon Valley or New York City.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: Java is a pretty awful language to put into a recipe book with a 66-character
    limit on lines for code. The overriding convention is that the code is ugly and
    we apologize.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Once
    the string is read in from the console, then `classifier.classify(input)` is called,
    which returns `Classification`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Click on **Create a new application**."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Send hate/love/neutral e-mails to `<[cookbook@lingpipe.com](mailto:cookbook@lingpipe.com)>`.
    We do care, we won't do your homework for you or prototype your startup for free,
    but do talk to us.
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: We do offer consulting services and even have a pro-bono (free) program as well
    as a start up support program. NLP is hard, this book is most of what we know
    but perhaps we can help more.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: All the source for the book is available at [http://alias-i.com/book.html](http://alias-i.com/book.html).
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **errata** **submission** **form** link,
    and entering the details of your errata. Once your errata are verified, your submission
    will be accepted and the errata will be uploaded on our website, or added to any
    list of existing errata, under the Errata section of that title. Any existing
    errata can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
- en: Hit [http://lingpipe.com](http://lingpipe.com) and go to our forum for the best
    place to get questions answered and see if you have a solution already.
  prefs: []
  type: TYPE_NORMAL
