["```py\npublic class Neuron {\n  protected ArrayList<Double> weight;\n  private ArrayList<Double> input;\n  private Double output;\n  private Double outputBeforeActivation;\n  private int numberOfInputs = 0;\n  protected Double bias = 1.0;\n  private IActivationFunction activationFunction;\n  …\n}\n```", "```py\npublic Neuron(int numberofinputs,IActivationFunction iaf){\n    numberOfInputs=numberofinputs;\n    weight=new ArrayList<>(numberofinputs+1);\n    input=new ArrayList<>(numberofinputs);\n    activationFunction=iaf;\n}\n```", "```py\npublic void init(){\n  for(int i=0;i<=numberOfInputs;i++){\n    double newWeight = RandomNumberGenerator.GenerateNext();\n    try{\n      this.weight.set(i, newWeight);\n    }\n    catch(IndexOutOfBoundsException iobe){\n      this.weight.add(newWeight);\n    }\n  }\n}\n```", "```py\npublic void calc(){\n  outputBeforeActivation=0.0;\n  if(numberOfInputs>0){\n    if(input!=null && weight!=null){\n      for(int i=0;i<=numberOfInputs;i++){\n        outputBeforeActivation+=(i==numberOfInputs?bias:input.get(i))*weight.get(i);\n      }\n    }\n  }\n  output=activationFunction.calc(outputBeforeActivation);\n}\n```", "```py\npublic abstract class NeuralLayer {\n  protected int numberOfNeuronsInLayer;\n  private ArrayList<Neuron> neuron;\n  protected IActivationFunction activationFnc;\n  protected NeuralLayer previousLayer;\n  protected NeuralLayer nextLayer;\n  protected ArrayList<Double> input;\n  protected ArrayList<Double> output;\n  protected int numberOfInputs;\n…\n}\n```", "```py\npublic InputLayer(int numberofinputs);\npublic HiddenLayer(int numberofneurons,IActivationFunction iaf,\nint numberofinputs);\npublic OutputLayer(int numberofneurons,IActivationFunction iaf,\nint numberofinputs);\n```", "```py\nprotected void init(){\n  for(int i=0;i<numberOfNeuronsInLayer;i++){\n    try{\n      neuron.get(i).setActivationFunction(activationFnc);\n      neuron.get(i).init();\n    }\n    catch(IndexOutOfBoundsException iobe){\n      neuron.add(new Neuron(numberOfInputs,activationFnc));\n      neuron.get(i).init();\n    }\n  }\n}\nprotected void calc(){\n  for(int i=0;i<numberOfNeuronsInLayer;i++){\n    neuron.get(i).setInputs(this.input);\n    neuron.get(i).calc();\n    try{\n      output.set(i,neuron.get(i).getOutput());\n     }\n     catch(IndexOutOfBoundsException iobe){\n       output.add(neuron.get(i).getOutput());\n     }\n   }\n  }\n```", "```py\npublic interface IActivationFunction {\n  double calc(double x);\n  public enum ActivationFunctionENUM {\n    STEP, LINEAR, SIGMOID, HYPERTAN\n  }\n}\n```", "```py\npublic class Sigmoid implements IActivationFunction {\n    private double a=1.0;\npublic Sigmoid(double _a){this.a=_a;}\n@Override\n    public double calc(double x){\n        return 1.0/(1.0+Math.exp(-a*x));\n    }\n}\n```", "```py\npublic class NeuralNet {\n    private InputLayer inputLayer;\n    private ArrayList<HiddenLayer> hiddenLayer;\n    private OutputLayer outputLayer;\n    private int numberOfHiddenLayers;\n    private int numberOfInputs;\n    private int numberOfOutputs;\n    private ArrayList<Double> input;\n    private ArrayList<Double> output;\n…\n}\n```", "```py\npublic NeuralNet(int numberofinputs,int numberofoutputs,\n            int [] numberofhiddenneurons,IActivationFunction[] hiddenAcFnc,\n            IActivationFunction outputAcFnc)\n```", "```py\ninput=new ArrayList<>(numberofinputs);\ninputLayer=new InputLayer(numberofinputs);\n```", "```py\nhiddenLayer.set(i,new HiddenLayer(numberofhiddenneurons[i], hiddenAcFnc[i],\n           inputLayer.getNumberOfNeuronsInLayer()));\n    inputLayer.setNextLayer(hiddenLayer.get(i));\n```", "```py\nhiddenLayer.set(i, new HiddenLayer(numberofhiddenneurons[i],             hiddenAcFnc[i],hiddenLayer.get(i-1).getNumberOfNeuronsInLayer()));\nhiddenLayer.get(i-1).setNextLayer(hiddenLayer.get(i));\n```", "```py\nif(numberOfHiddenLayers>0){\n  outputLayer=new OutputLayer(numberofoutputs,outputAcFnc,\n    hiddenLayer.get(numberOfHiddenLayers-1).getNumberOfNeuronsInLayer() );\n    hiddenLayer.get(numberOfHiddenLayers-1).setNextLayer(outputLayer);\n}else{\n    outputLayer=new OutputLayer(numberofinputs, outputAcFnc, numberofoutputs);\n    inputLayer.setNextLayer(outputLayer);\n}\n```", "```py\npublic void calc(){\n  inputLayer.setInputs(input);\n  inputLayer.calc();\n  for(int i=0;i<numberOfHiddenLayers;i++){\n    HiddenLayer hl = hiddenLayer.get(i);\n    hl.setInputs(hl.getPreviousLayer().getOutputs());\n    hl.calc();\n  }\n  outputLayer.setInputs(outputLayer.getPreviousLayer().getOutputs());\n  outputLayer.calc();\n  this.output=outputLayer.getOutputs();\n}\n```", "```py\npublic class NeuralNetConsoleTest {\n  public static void main(String[] args) {\n    RandomNumberGenerator.seed=0;\n\n    int numberOfInputs=2;\n    int numberOfOutputs=1;\n    int[] numberOfHiddenNeurons= { 3 };\n    IActivationFunction[] hiddenAcFnc = { new Sigmoid(1.0) } ;\n    Linear outputAcFnc = new Linear(1.0);\n    System.out.println(\"Creating Neural Network...\");\n    NeuralNet nn = new NeuralNet(numberOfInputs,numberOfOutputs,\n          numberOfHiddenNeurons,hiddenAcFnc,outputAcFnc);\n    System.out.println(\"Neural Network created!\");\n    nn.print();\n    …\n}\n```", "```py\n  double [] neuralInput = { 1.5 , 0.5 };\n  double [] neuralOutput;\n  System.out.println(\"Feeding the values [\"+String.valueOf(neuralInput[0])+\" ; \"+\n                String.valueOf(neuralInput[1])+\"] to the neural network\");\n  nn.setInputs(neuralInput);\n  nn.calc();\n  neuralOutput=nn.getOutputs();\n\n  neuralInput[0] = 1.0;\n  neuralInput[1] = 2.1;\n  ...\n  nn.setInputs(neuralInput);\n  nn.calc();\n  neuralOutput=nn.getOutputs();\n```"]