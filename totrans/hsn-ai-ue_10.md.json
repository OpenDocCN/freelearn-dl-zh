["```py\nprotected:\n  UPROPERTY(EditAnywhere, Category = Blackboard)\n  FBlackboardKeySelector BoolVariableToCheck;\n```", "```py\npublic:\n  virtual bool CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const override;\n```", "```py\n#include \"BehaviorTree/BlackboardComponent.h\"\n```", "```py\n  //Get BlackboardComponent\n  const UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n  if (BlackboardComp == NULL)\n  {\n    return false;\n  }\n```", "```py\n  //Perform Boolean Variable Check\n  return BlackboardComp->GetValueAsBool(BoolVariableToCheck.SelectedKeyName);\n```", "```py\n#include \"BTDecorator_CheckBoolVariable.h\"\n#include \"BehaviorTree/BlackboardComponent.h\"\n\nbool UBTDecorator_CheckBoolVariable::CalculateRawConditionValue(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory) const\n{\n  //Get BlackboardComponent\n  const UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n  if (BlackboardComp == NULL)\n  {\n    return false;\n  }\n\n  //Perform Boolean Variable Check\n  return BlackboardComp->GetValueAsBool(BoolVariableToCheck.SelectedKeyName);\n}\n```", "```py\n virtual FString GetStaticDescription() const override;\n```", "```py\nFString UBTDecorator_CheckBoolVariable::GetStaticDescription() const\n{\n  return FString::Printf(TEXT(\"%s: '%s'\"), TEXT(\"Bool Variable to Check\"), BoolVariableToCheck.IsSet() ? *BoolVariableToCheck.SelectedKeyName.ToString() : TEXT(\"\"));\n}\n```", "```py\nUPROPERTY(EditAnywhere, Category = Blackboard)\n    FBlackboardKeySelector DestinationVector;\n\nUPROPERTY(EditAnywhere, Category = Parameters)\n    float Radius = 300.f;\n```", "```py\n virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) override;\n```", "```py\n#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"BehaviorTree/BTTaskNode.h\"\n#include \"BTTaskNode_FindRandomLocation.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass BEHAVIORTREEDESIGN_API UBTTaskNode_FindRandomLocation : public UBTTaskNode\n{\n  GENERATED_BODY()\n\n  UPROPERTY(EditAnywhere, Category = Blackboard)\n  FBlackboardKeySelector DestinationVector;\n\n  UPROPERTY(EditAnywhere, Category = Parameters)\n  float Radius = 300.f;\n\n  virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) override;\n};\n```", "```py\n#include \"BTTaskNode_FindRandomLocation.h\"\n#include \"BehaviorTree/BlackboardComponent.h\"\n#include \"NavigationSystem.h\"\n#include \"AIController.h\"\n```", "```py\nEBTNodeResult::Type UBTTaskNode_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n *//[REST OF THE CODE]*\n}\n```", "```py\nEBTNodeResult::Type UBTTaskNode_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n //Get Blackboard Component\n UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n if (BlackboardComp == NULL)\n {\n return EBTNodeResult::Failed;\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nEBTNodeResult::Type UBTTaskNode_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n *//[PREVIOUS CODE]*\n\n //Get Controlled Pawn\n APawn* ControlledPawn = OwnerComp.GetAIOwner()->GetPawn();\n if (!ControlledPawn) {\n return EBTNodeResult::Failed;\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nEBTNodeResult::Type UBTTaskNode_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n *//[PREVIOUS CODE]*\n\n //Get Navigation System\n UNavigationSystemV1* NavSys = UNavigationSystemV1::GetCurrent(GetWorld());\n if (!NavSys)\n {\n return EBTNodeResult::Failed;\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nEBTNodeResult::Type UBTTaskNode_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n *//[PREVIOUS CODE]*\n\n //Prepare variables for Query\n FNavLocation Result;\n FVector Origin = ControlledPawn->GetActorLocation();\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nEBTNodeResult::Type UBTTaskNode_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n *//[PREVIOUS CODE]*\n\n //Perform Query\n bool bSuccess = NavSys->GetRandomReachablePointInRadius(Origin, Radius, Result);\n if (!bSuccess) {\n return EBTNodeResult::Failed;\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nEBTNodeResult::Type UBTTaskNode_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n *//[PREVIOUS CODE]*\n\n //Save Result and return success\n BlackboardComp->SetValueAsVector(DestinationVector.SelectedKeyName, Result.Location);\n return EBTNodeResult::Succeeded;\n}\n```", "```py\n PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"HeadMountedDisplay\", \"GameplayTasks\", \"AIModule\", \"NavigationSystem\" });\n```", "```py\n virtual FString GetStaticDescription() const override;\n```", "```py\nFString UBTTaskNode_FindRandomLocation::GetStaticDescription() const\n{\n\n  return FString::Printf(TEXT(\"%s: '%s'\"), TEXT(\"DestinationKey\"), DestinationVector.IsSet() ? *DestinationVector.SelectedKeyName.ToString() : TEXT(\"\"))\n      .Append(FString::Printf(TEXT(\"\\n%s: '%s'\"), TEXT(\"Radius\"), *FString::SanitizeFloat(Radius)));\n}\n```", "```py\n#include \"Perception/AIPerceptionComponent.h\"\n#include \"Perception/AISense_Sight.h\"\n#include \"Perception/AISenseConfig_Sight.h\"\n```", "```py\n  GENERATED_BODY()\n\n AChasingAIController();\n```", "```py\n  UPROPERTY(VisibleDefaultsOnly, Category = AI)\n  UAIPerceptionComponent* PerceptionComponent;\n```", "```py\nUAISenseConfig_Sight* SightConfig;\n```", "```py\npublic:\n  FVector LastKnownPlayerPosition;\n  bool bCanSeePlayer;\n```", "```py\nprotected:\n  UFUNCTION()\n  void OnTargetPerceptionUpdate(AActor* Actor, FAIStimulus Stimulus);\n```", "```py\nAChasingAIController::AChasingAIController() {\n\n //Creating the AI Perception Component\n PerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT(\"SightPerceptionComponent\"));\n\n  //*[REST OF THE CODE]*\n\n}\n```", "```py\nAChasingAIController::AChasingAIController() {\n\n *//[PREVIOUS CODE]*\n\n //Create the Sight Sense and Configure it\n SightConfig = CreateDefaultSubobject<UAISenseConfig_Sight>(FName(\"Sight Config\"));\n SightConfig->DetectionByAffiliation.bDetectEnemies = true;\n SightConfig->DetectionByAffiliation.bDetectNeutrals = true;\n SightConfig->DetectionByAffiliation.bDetectFriendlies = true;\n\n  //*[REST OF THE CODE]*\n\n}\n```", "```py\nAChasingAIController::AChasingAIController() {\n\n *//[PREVIOUS CODE]*\n\n //Assigning the Sight Sense to the AI Perception Component\n PerceptionComponent->ConfigureSense(*SightConfig);\n PerceptionComponent->SetDominantSense(SightConfig->GetSenseImplementation());\n\n  //*[REST OF THE CODE]*\n\n}\n```", "```py\nAChasingAIController::AChasingAIController() {\n\n *//[PREVIOUS CODE]*\n\n //Binding the OnTargetPerceptionUpdate function\n PerceptionComponent->OnTargetPerceptionUpdated.AddDynamic(this, &AChasingAIController::OnTargetPerceptionUpdate);\n\n}\n```", "```py\n#include \"BehaviorTreeDesignCharacter.h\"\n```", "```py\nvoid AChasingAIController::OnTargetPerceptionUpdate(AActor * Actor, FAIStimulus Stimulus)\n{\n if(Cast<ABehaviorTreeDesignCharacter>(Actor)){\n\n }\n}\n```", "```py\nvoid AChasingAIController::OnTargetPerceptionUpdate(AActor * Actor, FAIStimulus Stimulus)\n{\n  if(Cast<ABehaviorTreeDesignCharacter>(Actor)){\n LastKnownPlayerPosition = Stimulus.StimulusLocation;\n bCanSeePlayer = Stimulus.WasSuccessfullySensed();\n  }\n}\n```"]