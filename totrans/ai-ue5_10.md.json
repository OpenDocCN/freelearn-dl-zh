["```py\nclass UAIPerceptionComponent;\n```", "```py\nUCLASS(Blueprintable)\n```", "```py\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=\"Security Cam\",   meta=(AllowPrivateAccess=\"true\"))\n   UStaticMeshComponent* SupportMeshComponent;\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=\"Security Cam\",   meta=(AllowPrivateAccess=\"true\"))\nUStaticMeshComponent* CamMeshComponent;\n```", "```py\nPrimaryActorTick.bCanEverTick = true;\n```", "```py\nPrimaryActorTick.bCanEverTick = false;\n```", "```py\nSupportMeshComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"Support Mesh\"));\nRootComponent = SupportMeshComponent;\nstatic ConstructorHelpers::FObjectFinder<UStaticMesh> SupportStaticMeshAsset(\n    TEXT(\"/Game/_GENERATED/MarcoSecchi/SM_SecurityCam_Base.SM_SecurityCam_Base\"));\nif (SupportStaticMeshAsset.Succeeded())\n{\n    SupportMeshComponent->SetStaticMesh(SupportStaticMeshAsset.Object);\n}\nCamMeshComponent = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"Cam Mesh\"));\nCamMeshComponent->SetRelativeLocation(FVector(61.f, 0.f, -13.f));\nCamMeshComponent->SetupAttachment(RootComponent);\nstatic ConstructorHelpers::FObjectFinder<UStaticMesh>   CamStaticMeshAsset(\n    TEXT(\"/Game/_GENERATED/MarcoSecchi/SM_SecurityCam.SM_SecurityCam\"));\nif (CamStaticMeshAsset.Succeeded())\n{\n    CamMeshComponent->SetStaticMesh(CamStaticMeshAsset.Object);\n}\n```", "```py\nstruct FAIStimulus;\nstruct FActorPerceptionUpdateInfo;\nclass UBehaviorTree;\n```", "```py\nUCLASS(Blueprintable)\n```", "```py\nprotected:\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Dummy AI Controller\")\n    TObjectPtr<UBehaviorTree> BehaviorTree;\n   virtual void OnPossess(APawn* InPawn) override;\n    UFUNCTION()\n    void OnTargetPerceptionUpdate(AActor* Actor, FAIStimulus       Stimulus);\n```", "```py\n#include \"Perception/AIPerceptionComponent.h\"\n#include \"Perception/AISenseConfig_Sight.h\"\n```", "```py\nconst auto SenseConfig_Sight = CreateDefaultSubobject<UAISenseConfig_  Sight>(\"SenseConfig_Sight\");\nSenseConfig_Sight->SightRadius = 1600.f;\nSenseConfig_Sight->LoseSightRadius = 3000.f;\nSenseConfig_Sight->PeripheralVisionAngleDegrees = 45.0f;\nSenseConfig_Sight->DetectionByAffiliation.bDetectEnemies = true;\nSenseConfig_Sight->DetectionByAffiliation.bDetectNeutrals = true;\nSenseConfig_Sight->DetectionByAffiliation.bDetectFriendlies = true;\n```", "```py\nPerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT(\"Perception\"));\nPerceptionComponent->ConfigureSense(*SenseConfig_Sight);\nPerceptionComponent->SetDominantSense(SenseConfig_Sight-  >GetSenseImplementation());\nPerceptionComponent->OnTargetPerceptionUpdated.AddDynamic(this,   &ABaseSecurityCamAIController::OnTargetPerceptionUpdate);\n```", "```py\nvoid ABaseSecurityCamAIController::OnPossess(APawn* InPawn)\n{\n    Super::OnPossess(InPawn);\n    if (ensureMsgf(BehaviorTree, TEXT(\"Behavior Tree is nullptr! Please assign BehaviorTree in your AI Controller.\")))\n    {\n       RunBehaviorTree(BehaviorTree);\n    }\n}\n```", "```py\nvoid ABaseSecurityCamAIController::OnTargetPerceptionUpdate(AActor* Actor, FAIStimulus Stimulus)\n{\n    if (Actor->Tags.Num() > 0) return;\n    const auto SightID = UAISense::GetSenseID<UAISense_Sight>();\n    if (Stimulus.Type == SightID && Stimulus.WasSuccessfullySensed())\n    {\n       Actor->Tags.Init({}, 1);\n       Actor->Tags[0] = \"ShootingTarget\";\n    }\n}\n```", "```py\nUFUNCTION()\nvoid OnPawnDamaged(AActor* DamagedActor, float Damage, const   UDamageType* DamageType, AController* InstigatedBy, AActor*     DamageCauser);\n```", "```py\nGetPawn()->OnTakeAnyDamage.AddDynamic(this, &ABaseDummyAIController::OnPawnDamaged);\n```", "```py\nvoid ABaseDummyAIController::OnPawnDamaged(AActor* DamagedActor, float Damage, const UDamageType* DamageType,\n    AController* InstigatedBy, AActor* DamageCauser)\n{\n    const auto BlackboardComp = GetBlackboardComponent();\n    BlackboardComp->SetValueAsBool(\"IsHit\", true);\n    if (DamagedActor->Tags.Num() > 0)\n    {\n       DamagedActor->Tags[0] = \"Untagged\";\n    }\n}\n```"]