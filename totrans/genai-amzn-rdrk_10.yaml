- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing Intelligent Agents with Amazon Bedrock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, readers will explore the concept of agents in **generative
    artificial intelligence** (**GenAI**), diving into their importance, benefits,
    and the various tools and types available.
  prefs: []
  type: TYPE_NORMAL
- en: Readers will learn to build knowledge bases and develop agents specifically
    designed for Amazon Bedrock, gaining insights into configurations, testing, and
    deployment strategies. Additionally, the chapter will showcase real-world industrial
    use cases, highlighting the practical applications of Agents in conjunction with
    Amazon Bedrock.
  prefs: []
  type: TYPE_NORMAL
- en: Through hands-on examples, readers will acquire the skills to describe the role
    of agents, integrate LangChain Agents with Amazon Bedrock, understand Agents’
    configurations for Amazon Bedrock, and build, test, and deploy agents tailored
    to this service. Furthermore, they will explore diverse industrial use cases,
    demonstrating the versatility and potential of Agents in enhancing the capabilities
    of Amazon Bedrock.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, readers will gain a clear understanding of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What are Agents?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GenAI agent personas, roles, and use-case scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Bedrock integration with LangChain Agents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agents for Amazon Bedrock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an Agent for Amazon Bedrock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to have access to an AWS account. If you don’t have
    one already, you can go to [https://aws.amazon.com/getting-started/](https://aws.amazon.com/getting-started/)
    and create an AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, you will need to install and configure AWS CLI ([https://aws.amazon.com/cli/](https://aws.amazon.com/cli/))
    after you create an account, which will be needed to access Amazon Bedrock FMs
    from your local machine. Since the majority chunk of code cells we will be executing
    is based in Python, setting up an AWS Python SDK (Boto3) ([https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html](https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html))
    would be beneficial at this point. You can carry out the Python setup in the following
    manner: install it on your local machine, or use AWS Cloud9, or utilize AWS Lambda,
    or leverage Amazon SageMaker.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There will be a charge associated with the invocation and customization of Amazon
    Bedrock FMs. Please refer to [https://aws.amazon.com/bedrock/pricing/](https://aws.amazon.com/bedrock/pricing/)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: What are Agents?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the dynamic landscape of AI, a new category of sophisticated systems has
    emerged, poised to significantly impact our relationship with technology. These
    entities, known as **GenAI agents**, represent a formidable advancement characterized
    by their autonomy, adaptability, and cognitive abilities.
  prefs: []
  type: TYPE_NORMAL
- en: GenAI agents are software constructs engineered to comprehend and execute complex
    tasks with minimal human oversight. They demonstrate a remarkable capacity to
    assess objectives, devise strategic plans, and execute actions to achieve goals,
    all while continuously learning and refining their approaches based on feedback.
  prefs: []
  type: TYPE_NORMAL
- en: What distinguishes GenAI agents from previous iterations is their multifaceted
    nature, combining reactivity, proactivity, learning capabilities, and social adeptness.
    This unique amalgamation enables them to promptly respond to changing environments,
    anticipate future needs, evolve through ongoing learning processes, and seamlessly
    collaborate with humans and fellow agents.
  prefs: []
  type: TYPE_NORMAL
- en: Features of agents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some of the key features of Agents:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prompt response agility**: GenAI Agents excel in swift response to prompts,
    ensuring agility in adapting to dynamic circumstances. For instance, in manufacturing
    settings, these agents can efficiently recalibrate processes and reallocate resources
    to maintain operational efficiency amid fluctuating demand or unexpected disruptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chain-of-thought (CoT)/Reasoning and Acting (ReAct)-style action**: GenAI
    Agents take action based on CoT/ReAct-style prompts, ensuring prompt and effective
    responses to stimuli. If you recall, ReAct prompting is a method designed to prompt
    LLMs, aiming to enhance the accuracy of their responses compared to other methods
    such as CoT. For instance, in customer service, these agents can generate responses
    to inquiries based on predefined conversational cues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prediction utility**: Though GenAI Agents do not autonomously anticipate
    or predict future events, they act based on predefined parameters and inputs.
    In financial forecasting, these agents utilize historical data and predefined
    algorithms to generate predictions rather than autonomously forecasting future
    trends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous learning**: GenAI Agents possess the capability for continuous
    learning and self-improvement. Similar to human counterparts, these agents refine
    their strategies and decision-making processes based on outcomes, continuously
    evolving and optimizing performance. For instance, in online recommendation systems,
    these agents continuously learn from user interactions to improve personalized
    recommendations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration**: GenAI Agents demonstrate adeptness in seamless collaboration
    with humans and other agents. Through effective communication and coordination,
    they enhance productivity and efficiency in interconnected environments. In autonomous
    vehicle systems, these agents collaborate with other vehicles and infrastructure
    to ensure safe and efficient navigation on roads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical applications of Agents – unleashing the potential
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GenAI Agents offer a wide array of applications across various industries, showcasing
    their versatility and potential impact. In finance, these agents are being experimented
    with to explore the potential to analyze market trends, detect investment opportunities,
    and execute trades, enhancing decision-making processes and optimizing investment
    strategies. For instance, they can utilize historical data and predictive algorithms
    to identify patterns and forecast market movements, aiding financial professionals
    in making informed investment decisions.
  prefs: []
  type: TYPE_NORMAL
- en: In logistics and **supply chain management** (**SCM**), GenAI Agents can play
    a crucial role in optimizing resource allocation, streamlining distribution networks,
    and minimizing operational costs. By leveraging real-time data and predictive
    analytics, these agents can optimize inventory management, route planning, and
    warehouse operations, improving efficiency and reducing lead times. For example,
    they can dynamically adjust shipping routes based on traffic conditions and demand
    fluctuations to ensure timely delivery of goods.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, GenAI Agents have the potential to transform education by personalizing
    learning experiences for students. They can adapt curricula and teaching methods
    to individual student needs and learning styles, facilitating personalized learning
    pathways and improving student outcomes. For instance, these agents can analyze
    student performance data, identify areas for improvement, and recommend tailored
    learning resources and activities to address specific learning needs.
  prefs: []
  type: TYPE_NORMAL
- en: While GenAI Agents hold significant promise and potential across various industries,
    it’s essential to acknowledge that the widespread adoption and scaling of these
    technologies may still be in its early stages. While there are certainly organizations
    and research initiatives actively exploring and implementing GenAI solutions,
    achieving widespread adoption and scalability often requires overcoming various
    technical, regulatory, and ethical challenges.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, the practical implementation of GenAI Agents may involve pilot
    projects, **proofs of concept** (**POCs**), or targeted deployments rather than
    large-scale implementations across entire industries. Additionally, the effectiveness
    and impact of these technologies may vary depending on factors such as data quality,
    model performance, and the specific use case in question.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it’s crucial to approach discussions about the applications of GenAI
    Agents with a critical lens, considering the current state of technology, existing
    limitations, and potential challenges associated with widespread adoption.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us take a step further into exploring diverse use case scenarios relevant
    to GenAI agents.
  prefs: []
  type: TYPE_NORMAL
- en: GenAI agent personas, roles, and use-case scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GenAI agents are heavily leveraged in enterprises as orchestrators. In the context
    of GenAI, **orchestration** refers to the coordinated management and deployment
    of these agents in various roles and use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a variety of roles that GenAI agents can play as part of this orchestration.
    Some potential use cases of GenAI agents and the roles they could play include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual** **assistant roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Personal assistant*: Agents can act as personal assistants, helping individuals
    manage their schedules, set reminders, and handle tasks such as booking appointments,
    making reservations, or tracking deliveries.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Information lookup*: They can also serve as information lookup tools, providing
    quick access to knowledge across various domains, such as current events, sports,
    entertainment, or general reference queries.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Personalized recommenders*: By learning individual preferences and patterns,
    these agents can offer personalized recommendations and suggestions tailored to
    each user’s needs and interests.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer service** **chatbot roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customer support agent*: Agents can handle customer inquiries and support
    requests 24/7, providing instant assistance and reducing wait times for human
    agents.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Product advisor*: They can guide customers through troubleshooting processes,
    provide product information, and offer personalized recommendations based on customer
    preferences and purchase history.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chatbots can also handle routine tasks such as order tracking, refund requests,
    and account management, freeing up human agents for more complex issues, such
    as troubleshooting technical issues, providing personalized recommendations, resolving
    disputes, and offering specialized expertise.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tutoring and** **education roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tutors*: GenAI agents can serve as virtual tutors, providing personalized
    learning experiences adapted to each student’s pace, level, and learning style.
    They can explain complex concepts in engaging ways, provide practice exercises,
    and offer feedback and guidance to reinforce learning.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Domain experts*: Agents can also act as domain experts, offering in-depth
    knowledge and insights across various academic subjects or professional fields.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content** **creation roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Writer*: Agents can assist writers, journalists, and content creators by generating
    initial drafts, outlines, or summaries based on provided prompts or ideas.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Storyteller*: They can help with ideation, story development, and creative
    writing tasks, offering suggestions and expanding on concepts.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Content generator*: Agents can also generate marketing copy, product descriptions,
    or social media content, helping businesses and creators save time and effort.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creative** **design roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Designer*: Agents can serve as creative collaborators, generating design ideas,
    artwork, logos, and visual concepts based on provided prompts or specifications.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Artist*: They can offer inspiration and fresh perspectives, helping designers
    explore new directions and overcome creative blocks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creative collaborator*: Agents can also assist in the iterative design process,
    generating variations and refinements based on feedback and direction from human
    designers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gaming and** **entertainment roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Game character*: In gaming, agents can play the role of **non-player characters**
    (**NPCs**), providing engaging interactions, dialogue, and storylines that adapt
    to player actions and choices.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Interactive companion*: As interactive companions, agents can engage in conversations,
    tell stories, provide entertainment, and even offer emotional support or companionship
    in virtual environments.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Healthcare roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Medical assistant*: Agents can act as medical assistants, providing patients
    with information about conditions, treatments, and healthy lifestyle recommendations.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Patient educator*: They can assist in patient education, explaining complex
    medical concepts in easy-to-understand language and addressing common concerns
    or questions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Agents can also support healthcare professionals by summarizing patient records,
    generating medical reports, or assisting in research and data analysis tasks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software** **development roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Code assistant*: GenAI agents can serve as code assistants, helping developers
    write and optimize code by generating code snippets, suggesting improvements,
    or explaining programming concepts.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Documentation generator*: They can assist in generating documentation, automatically
    creating descriptions and explanations for code segments, making it easier to
    maintain and collaborate on projects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Agents can also help with code refactoring, identifying areas for optimization,
    and suggesting more efficient or secure coding practices.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Research and** **analysis roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Research assistant*: Agents can act as research assistants, gathering and
    synthesizing information from various sources, generating summaries, and identifying
    key insights or trends.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data analyst/data engineer*: They can assist in data analysis tasks, such
    as exploring datasets, identifying patterns, and generating visualizations or
    reports.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ML engineer/data scientist*: Agents can also support researchers by generating
    hypotheses, suggesting experimental designs, or offering ideas for further exploration
    based on existing knowledge and data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language** **learning roles**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conversational partner*: GenAI agents can serve as conversational partners,
    allowing language learners to practice speaking and comprehension in a safe and
    encouraging environment.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Language tutors*: As language tutors, agents can provide feedback on pronunciation,
    grammar, and vocabulary, tailoring lessons and exercises to individual learners’
    needs and progress.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: They can also generate engaging language learning materials, such as dialogues,
    stories, or exercises, adapting the content and difficulty level based on the
    learner’s proficiency.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In all these cases, the agent’s role is to augment human capabilities, provide
    personalized assistance, and enhance efficiency and productivity in various domains.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us take a step further to explore Agents and their utility functionality
    in the context of Amazon Bedrock.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Bedrock integration with LangChain Agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LangChain, a powerful framework for developing applications with LLMs, provides
    a robust and flexible agent system that enables developers to build sophisticated
    agents capable of tackling a wide range of challenges.
  prefs: []
  type: TYPE_NORMAL
- en: An agent in LangChain is a high-level abstraction that combines an LLM, a set
    of tools, and other components in order to coordinate the execution of actions.
    The agent leverages the LLM’s **natural language understanding** (**NLU**) capabilities
    to interpret user inputs, determine the appropriate actions to take, and orchestrate
    the utilization of available tools to accomplish the desired task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core components of a LangChain agent include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WebSearchTool`: Performs web searches using a search engine such as Google.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WikipediaSearchTool`: Searches and retrieves information from *Wikipedia*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PythonCallbackTool`: Executes Python functions as tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CSVTool`: Interacts with CSV files, allowing operations such as reading, writing,
    and querying data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LLM**: The LLM serves as the reasoning engine behind the agent. It is responsible
    for understanding the user’s intent, determining the appropriate actions to take,
    and interpreting the results of tool executions.*   `SQLDatabaseToolkit` contains
    tools for interacting with SQL databases, including querying, creating tables,
    and inserting data.*   `ConversationBufferMemory` stores the conversation history,
    allowing the agent to refer to previous inputs and outputs during the conversation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LangChain provides a diverse set of built-in tools and agent classes to cater
    to various use cases. Some of the available tools include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`serpapi`: A search engine tool for querying web search results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google-search`: A wrapper around Google Search for conducting web searches'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`llm-math`: A tool for answering math-related questions using an LLM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`open-meteo-api`: A tool for retrieving weather information from the Open-Meteo
    API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`news-api`: A tool for fetching information about current news headlines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmdb-api`: A tool for querying information from **The Movie** **Database**
    (**TMDB**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wolfram-alpha`: A tool for querying the Wolfram|Alpha computational knowledge
    engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requests`: A tool for fetching content from specific URLs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`terminal`: A tool for executing terminal commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pal-math`: A language model specialized in solving complex word math problems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pal-colored-objects`: A language model for reasoning about positions and color
    attributes of objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As for agent classes, LangChain provides several options, each with its own
    strategy for action selection and problem-solving. Some examples include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`zero-shot-react-description`: An agent that relies on the LLM’s zero-shot
    capabilities to select actions based on the tool descriptions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`conversational-react-description`: An agent that engages in a conversational
    approach, asking for clarification when needed, and selecting actions based on
    the tool descriptions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-docstore`: An agent that leverages a document store to retrieve relevant
    information and select actions based on the tool descriptions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Details on each of the aforementioned tools and agent classes are highlighted
    here: [https://api.python.langchain.com/en/latest/_modules/langchain/agents/agent_types.html](https://api.python.langchain.com/en/latest/_modules/langchain/agents/agent_types.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of LangChain Agents, let us dive into the
    integration of LangChain Agents with Amazon Bedrock, exemplified through a practical
    use case. We will import Bedrock via the LangChain package and leverage two LangChain
    tools, namely `YoutubeSearchTool` and `WikipediaTool`, enabling the LangChain
    Agent to leverage their capabilities. Additionally, we will be utilizing the Anthropic
    Claude model through Bedrock in this straightforward application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure you have the correct permissions to invoke Amazon Bedrock, as explained
    in the earlier chapters. Further, please ensure that the latest version of LangChain
    packages and libraries are installed as per the code. In case the packages are
    not installed, run the following command in your Jupyter notebook (note that `!
    Or %` will not be needed if you’re running Python code from a Python terminal):'
  prefs: []
  type: TYPE_NORMAL
- en: '`%pip` `install <library_name>`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output may look like what’s shown in *Figure 10**.1* and *Figure 10**.2*.
    You will notice the agent performing reasoning using question, thought, action,
    and chaining:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 10.1 – \uFEFFAgentExecutor chain output](img/B22045_10_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – AgentExecutor chain output
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Generated chain using LangChain agents with Bedrock](img/B22045_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Generated chain using LangChain agents with Bedrock
  prefs: []
  type: TYPE_NORMAL
- en: As shown in this section, when we are exploring technical topics such as memristors
    without any other context, the *Wikipedia* tool agent is invoked, providing comprehensive
    and detailed information, followed by the YouTube tool to provide additional information
    on the subject matter. In case the user writes `Elon Musk video on Neuralink`
    in the preceding conversation with the agent, the YouTube tool gets invoked and
    links are showcased to said user. Users are encouraged to try out different questions
    and test the agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample output response for `response = agent_executor.invoke({"input":
    "Elon Musk video` `on Neuralink"})`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As demonstrated, utilizing these tools enables us to access in-depth knowledge
    on the subject matter. It’s worth noting that LangChain offers the capability
    to create custom tools as well, further expanding the capabilities of agents.
    This flexibility is highlighted in the documentation at [https://python.langchain.com/docs/modules/agents/tools/custom_tools](https://python.langchain.com/docs/modules/agents/tools/custom_tools),
    where you can find guidance on crafting tailored tools to suit your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown earlier, since we are searching for a technical topic for memristors,
    we get detailed information using the *Wikipedia* tool agent. You can create custom
    tools as well with agents, as shown here: [https://python.langchain.com/docs/modules/agents/tools/custom_tools](https://python.langchain.com/docs/modules/agents/tools/custom_tools).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out how to build GenAI agents with Amazon Bedrock and LangChain,
    coupled with Amazon Kendra, Amazon DynamoDB, and Amazon Lex, on the following
    blog: [https://aws.amazon.com/blogs/machine-learning/build-generative-ai-agents-with-amazon-bedrock-amazon-dynamodb-amazon-kendra-amazon-lex-and-langchain/](https://aws.amazon.com/blogs/machine-learning/build-generative-ai-agents-with-amazon-bedrock-amazon-dynamodb-amazon-kendra-amazon-lex-and-langchain/).'
  prefs: []
  type: TYPE_NORMAL
- en: By effectively integrating Amazon Bedrock with LangChain Agents, organizations
    can unlock the full potential of LLMs, enabling the development of intelligent
    and context-aware applications that drive innovation, automate complex workflows,
    and deliver exceptional user experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s jump into building Amazon Bedrock Agents for leveraging an end-to-end
    GenAI application.
  prefs: []
  type: TYPE_NORMAL
- en: Agents for Amazon Bedrock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the powerful capabilities offered by Amazon Bedrock is the ability to
    build and configure autonomous agents within your applications. These agents act
    as intelligent assistants, helping end users complete tasks based on organizational
    data and user input. Agents orchestrate interactions between FMs (LLMs), data
    sources, software applications, and user conversations. They can automatically
    call APIs to take actions and invoke knowledge bases to supplement information
    for these actions. By integrating agents, developers can save weeks of development
    effort and accelerate the delivery of GenAI applications.
  prefs: []
  type: TYPE_NORMAL
- en: Agents on Amazon Bedrock are designed to automate tasks for customers and provide
    intelligent responses to their questions. For example, you could create an agent
    that assists customers in processing insurance claims or making travel reservations.
    The beauty of agents is that you don’t have to worry about provisioning capacity,
    managing infrastructure, or writing custom code from scratch. Amazon Bedrock handles
    the complexities of prompt engineering, memory management, monitoring, encryption,
    user permissions, and API invocation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Agents on Amazon Bedrock perform the following key tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extend FMs**: Agents leverage LLMs to understand user requests and break
    down complex tasks into smaller, manageable steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collect additional information**: Through natural conversation, agents can
    gather additional information from users to fulfill their requests effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Take actions**: Agents can make API calls to your company’s systems to perform
    actions and fulfill customer requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Augment performance and accuracy**: By querying data sources and knowledge
    bases, agents can enhance their performance and provide more accurate responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to harness the power of Agents for Amazon Bedrock, developers follow
    a straightforward process:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a knowledge base to store your organization’s private data, which can
    be used to enhance the agent’s performance and accuracy. This step is *optional*
    because not all agents require access to private organizational data to carry
    out their assigned objectives. If the agent’s tasks and objectives do not depend
    on or benefit significantly from access to such data, creating a knowledge base
    may not be necessary. It depends on the specific use case and requirements of
    the agent being developed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure an agent for your specific use case, defining the actions it can perform.
    Lambda functions, written in your preferred programming language, dictate how
    the agent handles these actions. This is an optional step as an agent doesn’t
    necessarily require an action group to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Associate the agent with a knowledge base to augment its capabilities further.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the agent’s behavior by modifying prompt templates for preprocessing,
    orchestration, knowledge-base response generation, and postprocessing steps. Note
    that *not* all agents require extensive modification of prompt templates for their
    goal. The need for customization depends on the complexity of the tasks the agent
    is expected to perform and the level of control and fine-tuning desired by developers.
    For simpler tasks or generic use cases, the default prompt templates may suffice,
    making extensive customization unnecessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the agent using the Amazon Bedrock console or API calls, modifying configurations
    as necessary. Utilize traces to gain insights into the agent’s reasoning process
    at each step of its orchestration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the agent is ready for deployment, create an alias that points to a specific
    version of the agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrate your application with the agent alias, enabling seamless API calls
    and interactions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterate on the agent as needed, creating new versions and aliases to adapt to
    changing requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Throughout the development process, Amazon Bedrock handles the complexities
    of prompt engineering, memory management, monitoring, encryption, user permissions,
    and API invocation, allowing you to focus on building intelligent agents tailored
    to your specific use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Unveiling the inner workings of GenAI agents with Amazon Bedrock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When delving into the realm of Amazon Bedrock, one encounters a powerful toolset
    designed to facilitate the creation and management of intelligent agents. This
    toolset is composed of two distinct categories of API operations, each serving
    a specific purpose in the agent’s life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first category, aptly termed *build-time API operations*, enables developers
    to construct, configure, and oversee their agents and their associated resources.
    These operations act as the foundational building blocks, enabling the creation
    of agents tailored to specific requirements and objectives. Through these APIs,
    developers can fine-tune various aspects of their agents, ensuring they are equipped
    with the necessary capabilities to tackle the tasks at hand. More details on build-time
    API operations are listed here: [https://docs.aws.amazon.com/bedrock/latest/APIReference/API_Operations_Agents_for_Amazon_Bedrock.html](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_Operations_Agents_for_Amazon_Bedrock.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second category, *runtime API operations*, breathes life into agents, allowing
    them to interact with user input and initiate an intricate orchestration process
    to accomplish their designated tasks. When a user provides input, these APIs enable
    the agent to process and interpret the information, triggering a sequence of actions
    that ultimately lead to the desired outcome.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let us dive into build-time and runtime configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Build-time configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'During the build phase, an agent is assembled from the following key components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FM**: You select a pre-trained language model that the agent employs to interpret
    user input, generate responses, and guide its decision-making process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instructional prompts**: You craft instructions that delineate the agent’s
    purpose and desired behavior. With advanced prompting techniques, you can dynamically
    tailor these instructions at each stage of the agent’s workflow and incorporate
    custom logic through serverless functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action groups**: You define actions the agent can perform by providing the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An OpenAPI schema specification that outlines the operations the agent can invoke.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A serverless function that executes the specified API operation based on the
    agent’s input and returns the result.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Knowledge bases**: You can associate knowledge bases with the agent, allowing
    it to retrieve relevant context to enhance its response generation and decision-making
    capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prompt templates**: The orchestrator exposes default prompt templates used
    during various stages of the agent’s life cycle, such as preprocessing input,
    orchestrating actions, querying knowledge bases, and postprocessing outputs. You
    can customize these templates to modify the agent’s behavior or disable specific
    stages as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During the build process, these components are combined to create base prompts
    that guide the agent’s orchestration flow until the user’s request is fulfilled.
    With advanced prompting techniques, you can augment these base prompts with additional
    logic, examples, and metadata to improve the agent’s accuracy and performance
    at each stage of its invocation. After configuring the agent’s components and
    security settings, you can prepare the agent for deployment and testing in a runtime
    environment, as shown in *Figure 10**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Build-time API operations for Agent creation](img/B22045_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Build-time API operations for Agent creation
  prefs: []
  type: TYPE_NORMAL
- en: Runtime process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the heart of this runtime process lies the `InvokeAgent` API operation,
    a powerful conductor that sets the agent sequence in motion. The agent’s performance
    unfolds in three harmonious acts: preprocessing, orchestration, and postprocessing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Act I –** **Preprocessing**'
  prefs: []
  type: TYPE_NORMAL
- en: Before the curtains rise, the preprocessing phase meticulously manages how the
    agent contextualizes and categorizes user input. This crucial step can also validate
    the input, ensuring a seamless transition to the subsequent stages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Act II – Orchestration – the** **grand performance**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The orchestration phase is where the true magic unfolds, a symphonic interplay
    of interpretation, invocation, and knowledge synthesis. This act consists of the
    following movements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interpretation**: The agent deftly interprets the user input with an FM,
    generating a rationale that lays out the logical path for the next steps.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Invocation and synthesis**: Like a skilled conductor, the agent invokes action
    groups and queries knowledge bases, retrieving additional context and summarizing
    the data to augment its generation capabilities.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Observation and augmentation**: From the invoked action groups and summarized
    knowledge-base results, the agent generates an output, known as an **observation**.
    This observation is then used to enrich the base prompt, which is subsequently
    interpreted by the FM. The agent then determines if further orchestration iterations
    are necessary.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This iterative loop continues until the agent delivers its final response to
    the user or requires additional information from the user.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the orchestration phase, the base prompt template is augmented with
    agent instructions, action groups, and knowledge bases, creating a rich tapestry
    of information. This enhanced base prompt is then fed into the FM, which predicts
    the optimal trajectory to fulfill the user’s request. At each iteration, the FM
    selects the appropriate API operation or knowledge-base query, resulting in a
    responsive and contextually accurate output.
  prefs: []
  type: TYPE_NORMAL
- en: '**Act III – Postprocessing –** **the finale**'
  prefs: []
  type: TYPE_NORMAL
- en: In the final act, the postprocessing phase, the agent formats the culmination
    of its efforts – the final response to be returned to the user. However, this
    step can be gracefully bypassed, leaving the performance open to interpretation.
  prefs: []
  type: TYPE_NORMAL
- en: During the agent’s performance, users have the option to invoke a trace at runtime,
    unlocking a window into the agent’s thought process. This trace meticulously tracks
    the agent’s rationale, actions, queries, and observations at each step of the
    sequence. It includes the full prompts sent to the FM, as well as outputs from
    the model, API responses, and knowledge-base queries. By examining this trace,
    users can gain invaluable insights into the agent’s reasoning, paving the way
    for continuous improvement and refinement.
  prefs: []
  type: TYPE_NORMAL
- en: As the user’s session with the agent continues through successive `InvokeAgent`
    requests, the conversation history is diligently preserved, continually augmenting
    the orchestration base prompt template with context. This enrichment process aids
    in enhancing the agent’s accuracy and performance, forging a symbiotic relationship
    between the user and the AI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The agent’s process during runtime is a captivating interplay of interpretation,
    synthesis, and adaptation, as showcased in *Figure 10**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Runtime process flow for Agent workflow](img/B22045_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Runtime process flow for Agent workflow
  prefs: []
  type: TYPE_NORMAL
- en: Advancing reasoning capabilities with GenAI – a primer on ReAct
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GenAI models have demonstrated splendid capabilities in processing and generating
    human-like text, but their ability to reason through complex tasks and provide
    step-by-step solutions remains a challenge. Yao et. al have developed a technique
    called ReAct, as articulated in the paper *ReAct: Synergizing Reasoning and Acting
    in Language Models* ([https://arxiv.org/abs/2210.03629](https://arxiv.org/abs/2210.03629)),
    to enhance the reasoning abilities of these models, enabling them to systematically
    approach and solve user-requested tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ReAct technique involves structuring prompts that guide the model through
    a sequence of reasoning steps and corresponding actions. These prompts consist
    of a series of *question-thought-action-observation* examples, where the following
    applies:'
  prefs: []
  type: TYPE_NORMAL
- en: The *question* represents the user-requested task or problem to be solved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *thought* is a reasoning step that demonstrates how to approach the problem
    and identify a potential action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *action* is an API call or function that the model can invoke from a predefined
    set of allowed operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *observation* is the result or output obtained from executing the chosen
    action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The set of allowed actions is defined by instructions prepended to the example
    prompt text. This structured approach encourages the model to engage in a step-by-step
    reasoning process, breaking down complex tasks into smaller, actionable steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the construction of a ReAct prompt, consider the following example
    prompt structure with question-thought-action-observation sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 1:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question**: What is the optimal inventory level to minimize stockouts?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thought**: To avoid stockouts, we must balance inventory levels based on
    demand forecasts and reorder points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`optimizeInventoryLevels` function using historical sales data and demand projections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Observation**: Maintaining inventory at 80% of forecasted demand reduced
    stockouts by 30% while optimizing carrying costs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example 2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Question**: How can we improve customer satisfaction ratings?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thought**: To enhance satisfaction, we should analyze feedback data and implement
    targeted improvements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`analyzeCustomerFeedback` API to identify trends and insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Observation**: Based on the analysis, implementing personalized customer
    support led to a 20% increase in satisfaction scores.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These examples demonstrate how the ReAct technique guides the model through
    reasoning steps, leading to actionable outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: While the process of manually crafting these prompts can be time-consuming and
    intricate, the Amazon Bedrock Agent streamlines this process by automatically
    generating the prompts based on the provided information and available actions.
    Bedrock agents handle the complexities of prompt engineering, allowing researchers
    and developers to focus on defining the task requirements and available actions.
  prefs: []
  type: TYPE_NORMAL
- en: Readers are encouraged to check out [https://github.com/aws-samples/agentsforbedrock-retailagent](https://github.com/aws-samples/agentsforbedrock-retailagent),
    which uncovers the creation of an FM-powered customer service bot by leveraging
    Agents for Amazon Bedrock.
  prefs: []
  type: TYPE_NORMAL
- en: The ReAct technique and Bedrock Agents represent a significant advancement in
    the field of GenAI, enabling models to demonstrate improved reasoning abilities
    and tackle complex tasks more effectively. By providing a structured approach
    to problem-solving and leveraging the power of prompts, this technique has the
    potential to unlock new possibilities and applications for GenAI in various domains.
    Let us explore the functioning of Amazon Bedrock Agents with some practical use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Practical use case and functioning with Amazon Bedrock Agents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will dive into real-world applications and operational
    insights of leveraging Amazon Bedrock Agents in GenAI. Let us consider an example
    scenario of a multilingual summarizer bot, wherein a GenAI agent can be employed
    to streamline operations and automate how to translate the content in a summarized
    fashion in the language of the user’s choice. In order to begin, the developer
    must access the Bedrock console and initiate the agent creation workflow, as highlighted
    in *Figure 10**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Agent creation within the Bedrock console](img/B22045_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Agent creation within the Bedrock console
  prefs: []
  type: TYPE_NORMAL
- en: 'This process involves providing essential details, such as the agent’s name,
    description, and the necessary permissions through an AWS **Identity and Access
    Management** (**IAM**) service role. This role grants the agent access to required
    services such as **Amazon Simple Storage Service** (**Amazon S3**) and AWS Lambda,
    as illustrated in *Figure 10**.6*. As an example, the figure demonstrates the
    creation of a multilingual document summarizer and translator agent for extracting
    relevant information from the documents and relaying the information to the user
    in the translated language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Bedrock Agent creation process with IAM permissions](img/B22045_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Bedrock Agent creation process with IAM permissions
  prefs: []
  type: TYPE_NORMAL
- en: By default, Amazon Bedrock employs encryption for agent sessions with users,
    utilizing a key that AWS owns and manages on your behalf. However, if you prefer
    to use a customer-managed key from AWS **Key Management Service** (**KMS**) that
    you have set up, you have the option to customize your encryption settings accordingly.
    This allows you to take control of the encryption key used for securing agent-user
    interactions, aligning with your organization’s security and compliance requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the developer selects an FM from Bedrock that aligns with the desired
    use case. This step involves providing natural language instructions that define
    the agent’s task and the persona it should assume. For instance, in the example
    demonstrated in *Figure 10**.7*, the instruction could be `You are a multi-lingual
    agent designed to help with extracting inquired information from relevant documents
    and providing the response in` `translated language`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Amazon Bedrock Agent configuration for model selection and
    Agent persona](img/B22045_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Amazon Bedrock Agent configuration for model selection and Agent
    persona
  prefs: []
  type: TYPE_NORMAL
- en: The console also provides the option for the user to select guardrails to implement
    application-specific safeguards abiding by responsible AI policies. For simplicity,
    we can leave this blank and move to the next section. We will be covering guardrails
    in detail in [*Chapter 12*](B22045_12.xhtml#_idTextAnchor226).
  prefs: []
  type: TYPE_NORMAL
- en: 'Subsequently, the developer adds action groups, which are sets of tasks the
    agent can perform automatically by making API calls to the company’s systems.
    This step involves defining an API schema that outlines the APIs for all actions
    within a group and providing a Lambda function that encapsulates the business
    logic for each API. For example, an action group named `Summarizer_Translator_ActionGroup`
    could handle documents stored either in a database or within a particular location,
    identifying the information requested by the user and sending a summarized response
    to the user in the translated language inquired by the user. *Figure 10**.8* showcases
    the creation of an action group to handle tasks for agents to execute autonomously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Creating Bedrock Agent’s action group](img/B22045_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Creating Bedrock Agent’s action group
  prefs: []
  type: TYPE_NORMAL
- en: As shown previously, you will have to create a Lambda function to handle incoming
    requests from the agents and select an API schema. Please ensure you have provided
    the right permissions to your AWS Lambda function to invoke Bedrock agents.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the case of document identification, summarization, and translation, we
    have provided the following Lambda function that users can leverage for executing
    the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Users running the preceding workflow can also use the following OpenAPI schema
    and store it in S3, as part of this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, users have the option to select a knowledge base, as depicted
    in *Figure 10**.9*. This showcases the power of Bedrock Agents to easily create
    a RAG-based solution for extracting information from relevant sources stored in
    the knowledge base, by performing similarity searches and providing desired responses
    back to the user. For simplicity, we will ignore that and move to the final creation
    step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Knowledge-base creation with Bedrock Agents integration](img/B22045_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Knowledge-base creation with Bedrock Agents integration
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to dive deep into use cases involving knowledge-base integration
    with your agents, you can execute the following code samples: [https://github.com/aws-samples/amazon-bedrock-workshop/tree/main/05_Agents/insurance_claims_agent/with_kb](https://github.com/aws-samples/amazon-bedrock-workshop/tree/main/05_Agents/insurance_claims_agent/with_kb).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional code within the GitHub repository further illustrates how to create
    and invoke Bedrock Agents with the Python SDK, as evidenced in the following notebook:
    [https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/05_Agents/insurance_claims_agent/with_kb/create_and_invoke_agent_with_kb.ipynb](https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/05_Agents/insurance_claims_agent/with_kb/create_and_invoke_agent_with_kb.ipynb).'
  prefs: []
  type: TYPE_NORMAL
- en: Once the preceding steps are done, you can verify the agent configuration and
    select **Create Agent**. Congratulations on creating your Amazon Bedrock Agent
    (*Figure 10**.10*)!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Amazon Bedrock Agent version](img/B22045_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Amazon Bedrock Agent version
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right side of the screen, you can easily test your agent by asking it
    questions about the document and requesting it to summarize and translate the
    document into your desired language, as shown in *Figure 10**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Testing Bedrock Agent within AWS console](img/B22045_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Testing Bedrock Agent within AWS console
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we acquired a practical comprehension of developing and evaluating
    Amazon Bedrock Agents tailored for a text summarization use case. Upon ensuring
    the agent’s configuration and functionality align with the designated tasks, it’s
    time to transition into the deployment phase.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an Agent for Amazon Bedrock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integrating an Amazon Bedrock agent into your application requires creating
    an alias, which serves as a reference to a specific version of the agent’s code
    and configuration. Follow these steps to create an alias:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the Amazon Bedrock console and navigate to the agent you wish to deploy.
    From the agent’s overview page, navigate to the **Aliases** section and then click
    **Create** to initiate the alias creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name and description (optional) for the alias. You’ll also need to
    decide whether you want to associate this alias with a new version of the agent
    or an existing version that you’ve previously created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users also have the option to opt for provisioned throughput for the alias by
    selecting the **Provisioned Throughput (PT)** button. Once selected, a drop-down
    menu will list models created with Provisioned Throughput. No option being displayed
    will indicate that no PT model exists within the Amazon Bedrock environment. For
    further information, users can leverage [https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html](https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By creating an alias, Bedrock takes a snapshot of the agent’s current code
    and configuration settings and links that snapshot (version) to the alias you’ve
    defined. You can then use this alias to integrate and interact with that specific
    version of the agent within your applications. *Figure 10**.12* showcases two
    aliases that were created for the summarizer-translator agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Aliases for Amazon Bedrock Agents](img/B22045_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Aliases for Amazon Bedrock Agents
  prefs: []
  type: TYPE_NORMAL
- en: The alias essentially acts as a stable reference point, allowing you to manage
    different versions of your agent while ensuring your applications are interacting
    with the desired version.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Bedrock agents enable productivity gains, enhanced customer experiences,
    and automated workflows. Their versatility allows innovative implementations across
    domains such as task automation, conversational interfaces, and DevOps processes,
    driving operational efficiency and business value.
  prefs: []
  type: TYPE_NORMAL
- en: There can be several other industrial use cases with Bedrock Agents. For instance,
    in the case of insurance, by leveraging GenAI through Amazon Bedrock, insurance
    companies can enhance operational efficiency and customer experience. The agent
    can automate tedious and repetitive tasks, freeing up human resources to focus
    on more complex and strategic endeavors. Additionally, the agent’s ability to
    process natural language instructions allows for seamless integration into existing
    workflows and systems, facilitating a smoother transition toward AI-driven operations.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the potential applications of GenAI in the insurance industry extend
    beyond claim processing. Agents can be trained to assist with personalized policy
    recommendations, risk assessment, fraud detection, and even customer support through
    natural language interactions. As technology continues to evolve, the opportunities
    for innovation and optimization within the insurance sector will undoubtedly expand.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link demonstrates an end-to-end scenario to get started with
    Amazon Bedrock Agents using the AWS Python SDK: [https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py](https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The notebook uncovers the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating an execution role specifically for the Bedrock agent
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiating the Bedrock agent and deploying an initial draft version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a Lambda function and its corresponding execution role
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Granting the necessary IAM permissions to provision the agent to invoke the
    Lambda function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Establishing an action group that links the agent with the Lambda function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying the fully configured agent using a designated alias
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invoking the agent with user-provided prompts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Removing all resources created during the process
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users can execute this scenario end to end in order to imbibe a deeper understanding
    of creating a GenAI agent on Amazon Bedrock for their utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'For readers interested in diving further into the world of Agents for Amazon
    Bedrock, you are highly encouraged to leverage Amazon’s *Building generative AI
    applications with Amazon Bedrock using agents* workshop: [https://catalog.us-east-1.prod.workshops.aws/workshops/f8a7a3f8-1603-4b10-95cb-0b471db272d8/en-US](https://catalog.us-east-1.prod.workshops.aws/workshops/f8a7a3f8-1603-4b10-95cb-0b471db272d8/en-US).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Readers are further encouraged to check out workflow orchestration using Amazon
    Bedrock Agent chaining with a digital insurance Agent use case: [https://github.com/build-on-aws/workflow-orchestration-bedrock-agent-chaining/tree/main](https://github.com/build-on-aws/workflow-orchestration-bedrock-agent-chaining/tree/main).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the intricate concept of Agents within the GenAI
    universe. We examined various use cases and personas associated with agents, further
    elucidating practical examples of their applications in real-world scenarios.
    Additionally, we uncovered the seamless integration of LangChain agents with Amazon
    Bedrock and explored the creation of Amazon Bedrock Agents through practical code
    examples, as well as their orchestration workflow for building, testing, and deploying
    Bedrock agents.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have gained a thorough understanding of Agents and their orchestration
    processes, we will explore effective strategies for monitoring Amazon Bedrock
    models within large-scale enterprises in the next chapter. This will equip us
    with the necessary knowledge to manage and optimize the security and governance
    of these models in complex organizational settings, ensuring optimal utilization
    and efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Model Management and Security Considerations'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will understand the core aspects of evaluating and monitoring
    models, as well as ensuring security and privacy within the Amazon Bedrock environment.
    [*Chapter 11*](B22045_11.xhtml#_idTextAnchor207) explores techniques for assessing
    model performance, including automatic model evaluation, human evaluation, and
    open source tools. Additionally, it covers monitoring techniques such as Amazon
    CloudWatch, model invocation logging, and integration with AWS CloudTrail and
    Amazon EventBridge. [*Chapter 12*](B22045_12.xhtml#_idTextAnchor226) centers on
    data protection, identity and access management, network security, ethical considerations,
    and implementing guardrails to adhere to responsible AI practices and policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B22045_11.xhtml#_idTextAnchor207), *Evaluating and Monitoring
    Models with Amazon Bedrock*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B22045_12.xhtml#_idTextAnchor226), *Ensuring Security and Privacy
    in Amazon Bedrock*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
