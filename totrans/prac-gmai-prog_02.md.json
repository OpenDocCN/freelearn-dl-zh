["```py\npublic class Enemy : MonoBehaviour { \nprivate int Health = 100; \nprivate bool statePassive; \nprivate bool stateAggressive; \nprivate bool stateDefensive; \n// Use this for initialisation  \nvoid Start () {  \n}  \n// Update is called once per frame \nvoid Update () {  \n}  \n} \n```", "```py\npublic class Enemy : MonoBehaviour {\nprivate int Health = 100;\nprivate bool statePassive; \nprivate bool stateAggressive; \nprivate bool stateDefensive; \nprivate bool triggerL; \nprivate bool triggerR; \nprivate bool triggerM;\n// Use this for initialisation \nvoid Start () { \n statePassive = true; \n}\n// Update is called once per frame \nvoid Update () {\n // The AI will remain passive until an interaction with the player occurs \n if(Health == 100 && triggerL == false && triggerR == false && triggerM \n == false) \n { \n  statePassive = true; \n  stateAggressive = false; \n  stateDefensive = false; \n }\n // The AI will shift to the defensive mode if player comes from the\n right side or if the AI is below 20 HP \n if(Health<= 100 && triggerR == true || Health<= 20) \n { \n  statePassive = false; \n  stateAggressive = false; \n  stateDefensive = true; \n }\n // The AI will shift to the aggressive mode if player comes from the\n left side or it's on the middle and AI is above 20HP \n if(Health> 20 && triggerL == true || Health> 20 && triggerM == true) \n { \n  statePassive = false; \n  stateAggressive = true; \n  stateDefensive = false; \n  } \n } \n}\n```", "```py\nVoid Defensive () { \nif(playerPosition == \"triggerR\") \n{ \n// Check if player is currently  \nlocated on the triggerR position \ntransform.LookAt(playerSoldier); \n// Face the direction of the player   \nif(cover == false) \n { \n  transform.position = Vector3.MoveTowards(transform.position,  \n  wallPosition.position, walk); \n } \nif(cover == true) \n { \n  coverFire();} \n } \n} \n```", "```py\nif (playerPosition == \"triggerM\") \n{  \n transform.LookAt(playerSoldier); // Face the direction of the player  \n transform.position = Vector3.MoveTowards(transform.position,  \n buildingPosition.position, walkBack);  \n backwardsFire(); } \n```", "```py\nVoid Aggressive () {   \nif(playerPosition == \"triggerL\" || playerPosition == \"triggerM\")  \n{  \n transform.LookAt(playerSoldier); // Face the direction of the player  \n frontFire();  \n}   \nelse {   \n transform.position = Vector3.MoveTowards(transform.position,\n triggerLPosition.position, walk);  \n}   \n}  \n```", "```py\nPrivate int Health = 100;  \nPrivate bool statePassive;  \nPrivate bool stateAggressive;  \nPrivate bool stateDefensive;   \nPrivate bool triggerL;  \nPrivate bool triggerR;  \nPrivate bool triggerM;   \npublic Transform wallPosition;  \npublic Transform buildingPosition;  \npublic Transform triggerLPosition; \nprivate bool cover;  \nprivate float speed;  \nprivate float speedBack;  \nprivate float walk;  \nprivate float walkBack; \npublic Transform playerSoldier;  \nstaticstring playerPosition; \n```", "```py\n// Use this for initialization \nVoid Start () {        \nstatePassive = true;  \n}  \n// Update is called once per frame  \nVoid Update () {   \n// The AI will remain passive until an interaction with the player occurs \nif(Health == 100 && triggerL == false && triggerR == false && triggerM == false) \n{  \n statePassive = true;  \n stateAggressive = false;  \n stateDefensive = false;  \n}   \n// The AI will shift to the defensive mode if player comes from the right side or if the AI is below 20 HP  \nif(Health<= 100 && triggerR == true || Health<= 20){  \n statePassive = false;  \n stateAggressive = false;  \n stateDefensive = true;  \n}   \n// The AI will shift to the aggressive mode if player comes from the left side or it's on the middle and AI is above 20HP  \nif(Health> 20 && triggerL == true || Health> 20 && triggerM == true){  \n statePassive = false;  \n stateAggressive = true;  \n stateDefensive = false;  \n}   \nwalk = speed * Time.deltaTime;  \n     = speedBack * Time.deltaTime;  \n}   \nVoid Defensive () {   \n     if (playerPosition == \"triggerR\")  \n     {  \n     // Check if player is currently located on the triggerR position  \n     transform.LookAt(playerSoldier); // Face the direction of the\n     player   \n     if(cover == false)  \n      {  \n        transform.position = Vector3.MoveTowards(transform.position,  \n        wallPosition.position, walk);         \n       }   \n     if(cover == true)  \n     {  \n      coverFire();  \n     }  \n     }   \n    if(playerPosition == \"triggerM\") \n     {  \n      transform.LookAt(playerSoldier); // Face the direction of the\n      player  \n      transform.position = Vector3.MoveTowards(transform.position,\n      buildingPosition.position, walkBack);  \n      backwardsFire();  \n     }  \n    }   \nVoid Aggressive () {   \nif (playerPosition == \"triggerL\" || playerPosition == \"triggerM\")\n {  \n  transform.LookAt(playerSoldier); // Face the direction of the player  \n  frontFire();  \n }   \nelse {   \n  transform.position = Vector3.MoveTowards(transform.position, \n  triggerLPosition.position, walk);  \n }   \n}    \nVoid coverFire () {  \n// Here we can write the necessary code that makes the enemy firing while in cover position.}   \nVoid backwardsFire () { \n// Here we can write the necessary code that makes the enemy firing while going back.}   \nvoidfrontFire() { \n}   \n```", "```py\nVoid Passive () {   \nrndNumber = Random.Range(0,100);  \nIf(morningTime == true &&  13) \n{  \n// We have 87% of chance  \ngoGuard(); \n}   \nif(morningTime == true && rndNumber =< 13 && rndNumber< 3) \n{ \n// We have 10% of chance  \ngoDrink();  \n}   \nif(morningTime == true && rndNumber<= 3) \n{ \n// We have 3% of chance  \ngoWalk();  \n}   \nif(afternoonTime == true && rndNumber> 52) \n{ \n// We have 48% of chance  \ngoGuard();  \n}   \nif(afternoonTime == true && rndNumber =< 34 && rndNumber< 2) \n{  \n// We have 32% of chance\ngoDrink();  \n}   \nif(afternoonTime == true && rndNumber<= 2) \n{  \n// We have 2% of chance  \ngoWalk();  \n}   \nif(nightTime == true && rndNumber> 65) \n{  \n// We have 35% of chance  \ngoGuard();  \n}   \nif(nightTime == true && rndNumber =< 65 && rndNumber< 25) \n{  \n// We have 40% of chance  \ngoDrink();  \n}   \nif(nightTime == true && rndNumber<= 25) \n{  \n// We have 25% of chance        \ngoWalk();  \n}  \n}  \n```"]