["```py\nfrom sklearn.datasets import fetch_20newsgroups  # import packages which help us download dataset \ntwenty_train = fetch_20newsgroups(subset='train', shuffle=True, download_if_missing=True)\ntwenty_test = fetch_20newsgroups(subset='test', shuffle=True, download_if_missing=True)\n```", "```py\n# Extracting features from text files\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(twenty_train.data)\n\nprint(f'Shape of Term Frequency Matrix: {X_train_counts.shape}')\n```", "```py\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n\nprint(f'Shape of TFIDF Matrix: {X_train_tfidf.shape}')\n```", "```py\nfrom sklearn.linear_model import LogisticRegression as LR\nfrom sklearn.pipeline import Pipeline\n```", "```py\ntext_lr_clf = Pipeline([('vect', CountVectorizer()), ('tfidf', TfidfTransformer()), ('clf',LR())])\ntext_lr_clf = text_lr_clf.fit(twenty_train.data, twenty_train.target)\n```", "```py\nimport numpy as np\nlr_predicted = text_lr_clf.predict(twenty_test.data)\nlr_clf_accuracy = np.mean(lr_predicted == twenty_test.target) * 100.\n\nprint(f'Test Accuracy is {lr_clf_accuracy}')\n```", "```py\nTest Accuracy is 82.79341476367499\n```", "```py\nfrom sklearn.metrics import confusion_matrix\ncf = confusion_matrix(y_true=twenty_test.target, y_pred=lr_predicted)\nprint(cf)\n```", "```py\nimport json\nprint(json.dumps(cf.tolist(), indent=2))\n```", "```py\n[\n  [\n    236,\n    2,\n    0,\n    0,\n    1,\n    1,\n    3,\n    0,\n    3,\n    3,\n    1,\n    1,\n    2,\n    9,\n    2,\n    35,\n    3,\n    4,\n    1,\n    12\n  ],\n ...\n  [\n    38,\n    4,\n    0,\n    0,\n    0,\n    0,\n    4,\n    0,\n    0,\n    2,\n    2,\n    0,\n    0,\n    8,\n    3,\n    48,\n    17,\n    2,\n    9,\n    114\n  ]\n ]\n```", "```py\n# this line ensures that the plot is rendered inside the Jupyter we used for testing this code\n%matplotlib inline \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,10))\nax = sns.heatmap(cf, annot=True, fmt=\"d\",linewidths=.5, center = 90, vmax = 200)\n# plt.show() # optional, un-comment if the plot does not show\n```"]