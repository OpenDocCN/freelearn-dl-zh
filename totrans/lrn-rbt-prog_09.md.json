["```py\npi@myrobot:~ $ sudo apt-get install -y git python3-pip python3-smbus i2c-tools\n```", "```py\npi@myrobot:~ $ pip3 install git+https://github.com/orionrobots/Raspi_MotorHAT\nCollecting git+https://github.com/orionrobots/Raspi_MotorHAT\n  Cloning https://github.com/orionrobots/Raspi_MotorHAT to /tmp/pip-c3sFoy-build\nInstalling collected packages: Raspi-MotorHAT\n  Running setup.py install for Raspi-MotorHAT ... done\nSuccessfully installed Raspi-MotorHAT-0.0.2\n```", "```py\n$ sudo raspi-config\n```", "```py\npi@myrobot:~ $ sudo i2cdetect -y 1\n     0 1 2 3 4 5 6 7 8 9 a b c d e f\n00: -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 6f\n70: 70 -- -- -- -- -- -- --\n```", "```py\n    from Raspi_MotorHAT import Raspi_MotorHAT\n    import time\n    import atexit\n    mh = Raspi_MotorHAT(addr=0x6f)\n    lm = mh.getMotor(1)\n    rm = mh.getMotor(2)\n    def turn_off_motors():\n      lm.run(Raspi_MotorHAT.RELEASE)\n      rm.run(Raspi_MotorHAT.RELEASE)\n    atexit.register(turn_off_motors)\n    lm.setSpeed(150)\n    rm.setSpeed(150)\n    lm.run(Raspi_MotorHAT.FORWARD)\n    rm.run(Raspi_MotorHAT.FORWARD)\n    time.sleep(1)\n    ```", "```py\n    pi@myrobot:~ $ python3 test_motors.py\n    ```", "```py\nfrom Raspi_MotorHAT import Raspi_MotorHAT\nimport time\nimport atexit\n```", "```py\nmh = Raspi_MotorHAT(addr=0x6f)\nlm = mh.getMotor(1)\nrm = mh.getMotor(2)\n```", "```py\ndef turn_off_motors():\n  lm.run(Raspi_MotorHAT.RELEASE)\n  rm.run(Raspi_MotorHAT.RELEASE)\natexit.register(turn_off_motors)\n```", "```py\nlm.setSpeed(150)\nrm.setSpeed(150)\nlm.run(Raspi_MotorHAT.FORWARD)\nrm.run(Raspi_MotorHAT.FORWARD)\n```", "```py\ntime.sleep(1)\n```", "```py\n    lm.run(Raspi_MotorHAT.FORWARD)\n    rm.run(Raspi_MotorHAT.FORWARD)\n    ```", "```py\n    lm.run(Raspi_MotorHAT.FORWARD)\n    rm.run(Raspi_MotorHAT.BACKWARD)\n    ```", "```py\n    lm and rm modes to FORWARD, and then making one of the speeds smaller than the other, like this:\n\n    ```", "```py\n\n    This code makes the robot drive forward and turn gently to the left.\n    ```", "```py\nfrom Raspi_MotorHAT import Raspi_MotorHAT\nimport atexit\nclass Robot:\n    def __init__(self, motorhat_addr=0x6f):\n        # Setup the motorhat with the passed in address\n        self._mh = Raspi_MotorHAT(addr=motorhat_addr)\n        # get local variable for each motor\n        self.left_motor = self._mh.getMotor(1)\n        self.right_motor  = self._mh.getMotor(2)\n        # ensure the motors get stopped when the code exits\n        atexit.register(self.stop_motors)\n    def stop_motors(self):\n        self.left_motor.run(Raspi_MotorHAT.RELEASE)\n        self.right_motor.run(Raspi_MotorHAT.RELEASE)\n```", "```py\nimport robot\nfrom Raspi_MotorHAT import Raspi_MotorHAT\nfrom time import sleep\nr = robot.Robot()\nr.left_motor.setSpeed(150)\nr.right_motor.setSpeed(150)\nr.left_motor.run(Raspi_MotorHAT.FORWARD)\nr.right_motor.run(Raspi_MotorHAT.FORWARD)\nsleep(1)\n```", "```py\nfrom Raspi_MotorHAT import Raspi_MotorHAT\nimport atexit\nclass Robot(object):\n    def __init__(self, motorhat_addr=0x6f):\n        self._mh = Raspi_MotorHAT(addr=motorhat_addr)\n        self.left_motor = self._mh.getMotor(1)\n        self.right_motor  = self._mh.getMotor(2)\n        atexit.register(self.stop_motors)\n    def convert_speed(self, speed):\n        return (speed * 255) // 100\n    def stop_motors(self):\n        self.left_motor.run(Raspi_MotorHAT.RELEASE)\n        self.right_motor.run(Raspi_MotorHAT.RELEASE)\n```", "```py\nimport robot\nfrom Raspi_MotorHAT import Raspi_MotorHAT\nfrom time import sleep\nr = robot.Robot()\nr.left_motor.setSpeed(r.convert_speed(80))\nr.right_motor.setSpeed(r.convert_speed(80))\nr.left_motor.run(Raspi_MotorHAT.FORWARD)\nr.right_motor.run(Raspi_MotorHAT.FORWARD)\nsleep(1)\n```", "```py\ndef convert_speed(self, speed):\n        # Choose the running mode\n        mode = Raspi_MotorHAT.RELEASE\n        if speed > 0:\n            mode = Raspi_MotorHAT.FORWARD\n        elif speed < 0:\n            mode = Raspi_MotorHAT.BACKWARD\n        # Scale the speed\n        output_speed = (abs(speed) * 255) // 100\n        return mode, int(output_speed)\n```", "```py\n    def set_left(self, speed):\n        mode, output_speed = self.convert_speed(speed)\n        self.left_motor.setSpeed(output_speed)\n        self.left_motor.run(mode)\n    def set_right(self, speed):\n        mode, output_speed = self.convert_speed(speed)\n        self.right_motor.setSpeed(output_speed)\n        self.right_motor.run(mode)\n```", "```py\nfrom Raspi_MotorHAT import Raspi_MotorHAT\nimport atexit\nclass Robot:\n    def __init__(self, motorhat_addr=0x6f):\n        # Setup the motorhat with the passed in address\n        self._mh = Raspi_MotorHAT(addr=motorhat_addr)\n        # get local variable for each motor\n        self.left_motor = self._mh.getMotor(1)\n        self.right_motor = self._mh.getMotor(2)\n        # ensure the motors get stopped when the code exits\n        atexit.register(self.stop_motors)\n    def convert_speed(self, speed):\n        # Choose the running mode\n        mode = Raspi_MotorHAT.RELEASE\n        if speed > 0:\n            mode = Raspi_MotorHAT.FORWARD\n        elif speed < 0:\n            mode = Raspi_MotorHAT.BACKWARD\n        # Scale the speed\n        output_speed = (abs(speed) * 255) // 100\n        return mode, int(output_speed)\n    def set_left(self, speed):\n        mode, output_speed = self.convert_speed(speed)\n        self.left_motor.setSpeed(output_speed)\n        self.left_motor.run(mode)\n    def set_right(self, speed):\n        mode, output_speed = self.convert_speed(speed)\n        self.right_motor.setSpeed(output_speed)\n        self.right_motor.run(mode)\n\n    def stop_motors(self):\n        self.left_motor.run(Raspi_MotorHAT.RELEASE)\n        self.right_motor.run(Raspi_MotorHAT.RELEASE)\n```", "```py\nimport robot\nfrom time import sleep\nr = robot.Robot()\nr.set_left(80)\nr.set_right(80)\nsleep(1)\n```", "```py\nimport robot\nfrom time import sleep\ndef straight(bot, seconds):\n    bot.set_left(80)\n    bot.set_right(80)\n    sleep(seconds)\ndef turn_left(bot, seconds):\n    bot.set_left(20)\n    bot.set_right(80)\n    sleep(seconds)\ndef turn_right(bot, seconds):\n    bot.set_left(80)\n    bot.set_right(20)\n    sleep(seconds)\ndef spin_left(bot, seconds):\n    bot.set_left(-80)\n    bot.set_right(80)\n    sleep(seconds)\n```", "```py\nbot = robot.Robot()\nstraight(bot, 1)\nturn_right(bot, 1)\nstraight(bot, 1)\nturn_left(bot, 1)\nstraight(bot, 1)\nturn_left(bot, 1)\nstraight(bot, 1)\nspin_left(bot, 1)\n```", "```py\n$ python3 behavior_path.py\n```", "```py\nbot = robot.Robot()\nstraight(bot, 1)\nturn_right(bot, 0.6)\nstraight(bot, 1)\nturn_left(bot, 0.6)\nstraight(bot, 1)\nturn_left(bot, 0.6)\nstraight(bot, 1)\nspin_left(bot, 1)\n```", "```py\ndef straight(bot, seconds):\n    bot.set_left(80)\n    bot.set_right(70)\n    sleep(seconds)\n```"]