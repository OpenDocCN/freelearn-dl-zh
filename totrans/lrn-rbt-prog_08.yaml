- en: '*Chapter 6*: Building Robot Basics – Wheels, Power, and Wiring'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start building the robot. We will choose a robot chassis
    kit with wheels and motors, a motor controller, and some power for the robot,
    talking through the trade-offs and things to avoid. We'll see how to ensure that
    everything fits and then build the robot. By the end of the chapter, you will
    have your basic robot structure ready.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the trade-offs and plan right now gives you a robot you can build upon
    and experiment with, ensuring you know components are suitable before buying them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a robot chassis kit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a motor controller board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powering the robot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test fitting the robot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembling the base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting the motors to the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A computer with access to the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi and an SD card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A set of screwdrivers: M2.5, M3 Phillips, and some jeweler''s screwdrivers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pair of long-nose pliers. Optionally, a set of miniature metric spanners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some electrical tape.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hook and loop or Velcro tape.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing software such as [app.diagrams.net](http://app.diagrams.net), Inkscape,
    Visio, or similar software.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nylon standoff kits for M2.5 and M3 threads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some insulation tape.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four AA batteries, charged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will be choosing and purchasing a chassis, motor controller, and battery
    compartment in this chapter, but do not buy them yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3oLofCg](https://bit.ly/3oLofCg)'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a robot chassis kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chassis, like the controller, is a fundamental decision when making a robot.
    Although these can be self-made using 3D printing or toy hacking, the simplest
    place to start is with a chassis kit. These kits contain sets of parts to start
    your robot build. A chassis can be changed, but it would mean rebuilding the robot.
  prefs: []
  type: TYPE_NORMAL
- en: The internet has plenty of chassis kits around – too many. So how do you choose
    one?
  prefs: []
  type: TYPE_NORMAL
- en: Size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Getting the size of a robot right matters too. Make too small a robot and you
    will need miniaturization skills for electronics; too large and you will need
    far more serious power handling. These are both things to avoid for a beginner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Robot chassis sizes compared'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Robot chassis sizes compared
  prefs: []
  type: TYPE_NORMAL
- en: 'We can compare different robot sizes from the chassis photos in *Figure 6.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chassis 1** has a diameter of 11 cm and just about fits a controller in but
    is too tiny. Being so small makes it hard to build your robot. Squeezing the controller,
    power, and all the sensors into this small space would need skill and experience
    beyond the scope of a first robot build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chassis 2** is Armbot. This bigger robot is 33 cm by 30 cm wide, giving it
    lots of space and an arm reach of another 300 mm. It needs eight AA batteries,
    big motors, and a powerful motor controller. These add to the expense and may
    cause issues around power handling, weight, and rigidity for a new builder. Armbot
    is one of my most expensive robots, excluding the cost of the arm!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chassis 3** fits the Pi, batteries, and sensor, but without being large and
    bulky. It is around the right dimensions, being between 15-20 cm long and 10-15
    cm wide. Those that have split levels might work for this, but no more than two
    levels, as three or four can make a robot top-heavy and cause it to topple. Chassis
    3 has enough space and is relatively easy to build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at the wheel count next.
  prefs: []
  type: TYPE_NORMAL
- en: Wheel count
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some chassis kits have elaborate movement methods – legs, tank tracks, Mecanum
    wheels, and tri-star wheels, to name a few. While these are fun and I encourage
    experimenting with them, this is not the place to start. I recommend thoroughly
    sensible and basic wheels on the your first robot.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are kits with four-wheel drive (shown in *Figure 6.2*) and six-wheel
    drive. These can be quite powerful and require larger motor controllers. They
    may also chew through batteries, and you are increasing the likelihood of overloading
    something. The additional motors can mean trickier wiring:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Four-wheel drive robot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Four-wheel drive robot
  prefs: []
  type: TYPE_NORMAL
- en: 'Two-wheel drive is the simplest to wire in. It usually requires a third wheel
    for balance. The third wheel can be a castor wheel (shown in *Figure 6.3*), a
    rollerball, or just a Teflon sled for tiny robots. Two wheels are also the easiest
    to steer, avoiding some friction issues seen with robots using four or more wheels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 6.3 – Two wheels with a castor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Two wheels with a castor
  prefs: []
  type: TYPE_NORMAL
- en: Two wheels won't have the pulling power of four- or six-wheel drive, but they
    are simple and work. They are also the least expensive.
  prefs: []
  type: TYPE_NORMAL
- en: Wheels and motors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A kit for a beginner should come with the wheels and the motors. The wheels
    should have simple rubber tires. *Figure 6.4* shows a common style for inexpensive
    robot wheels. There are many kits with these in them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Common inexpensive robot wheels'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Common inexpensive robot wheels
  prefs: []
  type: TYPE_NORMAL
- en: The kit should also have two motors, one for each wheel, and include the screws
    or parts to mount them onto the chassis. I recommend DC gear motors, as the gearing
    keeps the speed usable while increasing the mechanical pushing power the robot
    has.
  prefs: []
  type: TYPE_NORMAL
- en: 'Importantly, the motors should have the wires connected, like the first motor
    in *Figure 6.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Gear motors with and without wires'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Gear motors with and without wires
  prefs: []
  type: TYPE_NORMAL
- en: 'It is tricky to solder or attach these wires to the small tags on motors, and
    poorly attached ones have a frustrating habit of coming off. The kits you want
    to start with have these wires attached, as can be seen in *Figure 6.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Encoder wheel and slot close up'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Encoder wheel and slot close up
  prefs: []
  type: TYPE_NORMAL
- en: Where the motors are mounted, the kits should have some encoder wheels, and
    a slot to read them through. The encoder wheels are also known as odometry, tachometer,
    or tacho wheels.
  prefs: []
  type: TYPE_NORMAL
- en: Simplicity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You don't want to use a complex or hard-to-assemble kit for your first robot
    build. I've repeated this throughout that with two-wheel drive, you want two motors
    with the wires soldered on. I steer clear of large robots, or unique and exciting
    locomotion systems, not because they are flawed, but because it's better to start
    simple. There is a limit to this, a robot kit that is a fully built and enclosed
    when bought leaves little room for learning or experimentation. An entirely premade
    robot may require toy hacking skills to customize.
  prefs: []
  type: TYPE_NORMAL
- en: Cost
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Related to simplicity is cost. You can buy robot chassis kits from around $15,
    up to thousands of dollars. Larger and more complex robots tend to be far more
    costly. For this book, I am aiming to keep to the less costly options or at least
    show where they are possible.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, now you can choose a chassis kit, with two wheels and a castor, two motors
    with wires soldered on them, slots, and encoder wheels. These laser-cut bases
    are not expensive, and are widely available on popular internet shopping sites
    as *Smart Car Chassis*, with terms like *2WD*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – The robot kit I''m using'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – The robot kit I'm using
  prefs: []
  type: TYPE_NORMAL
- en: The kit I'm working with looks like *Figure 6.7* when assembled without the
    Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: We've chosen a chassis kit. It is a medium-sized one that doesn't need large
    power handling. It has some space constraints but is not tiny. We can use these
    attributes to choose the motor controller.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a motor controller board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next important part you'll need is a motor controller. You cannot connect
    a Raspberry Pi directly to DC motors, as they require different voltages and high
    currents that would destroy GPIO pins. Motor controller boards can also add interfaces
    to other devices like sensors and other motor types.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a vital robot component that will guide many later decisions. Much like
    the motors, there are some trade-offs and considerations before buying one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – A selection of motor control boards'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – A selection of motor control boards
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.8* shows a small sample group of motor controller boards. As we compare
    the requirements of our motor board, we refer to the boards pictured there as
    examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Integration level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Motor controllers may only control a motor (usually 2) like the L298N, containing
    the barest minimum to run this chip safely. They are not designed to sit on a
    Raspberry Pi and must be wired into the Pi's I/O output.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers like the PiZMoto sit on top of the Raspberry Pi, reducing wiring.
    They still contain only a single circuit to control a motor. They also have pins
    to connect additional devices like a distance sensor and line sensor, which shift
    voltage levels, as we'll see later. This and the L298N require the Raspberry Pi
    to generate the PWM signal to move motors.
  prefs: []
  type: TYPE_NORMAL
- en: At a higher level of integration is the Full Function Stepper HAT. It has a
    chip that specializes in PWM control and is capable of driving multiple servo
    motors along with DC motors. This HAT frees up Raspberry Pi I/O pins by using
    I2C.
  prefs: []
  type: TYPE_NORMAL
- en: The PiConZero is the most integrated device here. It uses a microcontroller
    that is the equivalent of an Arduino to control DC motors and servo motors, to
    output to lights and take input from various sensors. It also uses I2C, reducing
    the number of pins needed.
  prefs: []
  type: TYPE_NORMAL
- en: Pin usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When buying a motor controller in Raspberry Pi HAT form, it's essential to consider
    which I/O pins are in use. Having boards that make use of the same pins for incompatible
    functions won't work.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Although a HAT plugs into all pins, this doesn't mean they are all used. Only
    a subset of the pins is usually actually connected on a HAT.
  prefs: []
  type: TYPE_NORMAL
- en: To get an idea of how pins in different boards interact on the Raspberry Pi,
    take a look at [https://pinout.xyz](https://pinout.xyz), which lets you select
    Raspberry Pi boards and see the pin configuration for them.
  prefs: []
  type: TYPE_NORMAL
- en: Using the L298N would require four I/O pins for the DC motors, and using sensors
    or servo motors with it requires further pins. The PIZMoto functions in a similar
    way to the L298N, requiring four I/O pins for DC motor control. The PiZMoto also
    assigns a pin for the line detector, two for distance sensing, two for LEDs, tying
    up a total of nine GPIO pins. The PiZMoto would also require additional support
    for servo motors.
  prefs: []
  type: TYPE_NORMAL
- en: The PiConZero and Full Function Stepper HAT both use the I2C bus. Using the
    I2C or serial bus makes efficient use of pins, as they use only two pins for I2C.
    Multiple devices can share the I2C bus, so even the use of these pins is shared.
    The PiConZero assigns some other pins to functions like the Ultrasonic device.
    The Full Function Stepper HAT leaves all other pins free to use while supporting
    the DC motors and 5 servo motors from a single I2C connection, making it one of
    the most flexible control boards in the selection.
  prefs: []
  type: TYPE_NORMAL
- en: Size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The choice of the motor controller size depends on the chassis and the size
    of the motors you have. In simple terms, the larger your chassis, the larger a
    controller you need. We specify the power handling capacity of a motor controller
    in amps. For a robot like the one shown in *Figure 6.7*, around 1 to 1.5 amps
    per channel is good.
  prefs: []
  type: TYPE_NORMAL
- en: 'The consequence of too low a rating can range from a robot that barely moves
    up to catching fire. Too large a controller has consequences for space, weight,
    and cost. A heatsink is one way to keep a controller cool while handling current
    but makes the controller larger, as shown in *Figure 6.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – An L298N with a heatsink'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – An L298N with a heatsink
  prefs: []
  type: TYPE_NORMAL
- en: The level of integration can also contribute to size. A tiny board that stacks
    on a Pi takes up less space than separate boards.
  prefs: []
  type: TYPE_NORMAL
- en: Another size or shape consideration is whether the board restricts access to
    the Raspberry Pi camera port. Some boards, such as the Pimoroni Explorer HAT Pro,
    cover the camera slot entirely, making it tricky to use. Some boards have a slot
    for the camera port, like the Full Function Stepper HAT, and others are half-size
    hats (pHat) that don't cover the area, such as the PiConZero and PizMoto.
  prefs: []
  type: TYPE_NORMAL
- en: As we are using the camera in this book, it is a requirement that the camera
    port is accessible, either through a slot or by being a half-size (PHat) board.
  prefs: []
  type: TYPE_NORMAL
- en: Soldering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you choose boards for a robot, note that some come as kits themselves, requiring
    you to solder parts on them. If you have experience with this, it may be an option,
    with a time cost. A small header is going to be a very quick and easy job. A board
    that comes as a bag of components with a bare board will take a chunk of an evening
    and could require debugging itself.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Soldering is an essential skill for robot building but is not needed for a first
    robot, so for this book, I mostly recommend pre-assembled modules.
  prefs: []
  type: TYPE_NORMAL
- en: Power input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Motors can require different voltages from the 5 V power supply the Raspberry
    Pi uses. They are also likely to consume a high current. We cover power supply
    choices later, but it is usually good to separate the power supply for the motor
    from the supply for the Raspberry Pi. All the boards in *Figure 6.8* have a separate
    motor power supply input.
  prefs: []
  type: TYPE_NORMAL
- en: The PiConZero and L298N let the user power the Raspberry Pi from the motor supply,
    but this can lead to reset and dropout conditions. Some motor interface boards,
    such as the Adafruit Crickit and the Pimoroni Explorer HAT Pro use the same 5
    V supply for the motors and the Raspberry Pi, requiring a high current capable
    5 V supply. My recommendation is to ensure the motor board has a separate power
    input for motors.
  prefs: []
  type: TYPE_NORMAL
- en: Connectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Closely related to soldering and power input are the connectors for the motors
    and batteries. I tend to prefer the screw type connectors shown in *Figure 6.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Screw terminals for motor and battery connections'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Screw terminals for motor and battery connections
  prefs: []
  type: TYPE_NORMAL
- en: Other types may require motors with special connectors, or a robot builder to
    have crimping skills.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our robot is space-constrained; for this reason, we use the Raspberry Pi HAT
    type form factor. We are also looking to keep the number of pins it uses low.
    An I2C-based HAT lets us do this. The **Full Function Stepper Motor HAT** is shown
    in *Figure 6.11*. It''s also known as the Full Function Robot Expansion Board
    and gets us access to all the Pi pins while being a powerful motor controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – The Full Function Stepper Motor HAT'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – The Full Function Stepper Motor HAT
  prefs: []
  type: TYPE_NORMAL
- en: It's available in most countries, has space for the ribbon for the camera, and
    controls servo motors. I recommend this HAT for the robot in this book. Our code
    is directly compatible with boards based on the PCA9685 chip used on the Full
    Function board. With some minor changes in code and wiring, the 4tronix PiConZero
    would also be a suitable choice.
  prefs: []
  type: TYPE_NORMAL
- en: Powering the robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The robot needs power for all its parts. We must consider two major power systems:
    the power for all the digital parts, such as the Raspberry Pi and sensors, and
    then the power for the motors.'
  prefs: []
  type: TYPE_NORMAL
- en: Motors need a separate power system for a few reasons. First, they consume far
    more electrical power than most other components on the robot. They may require
    different voltages; I've seen low-voltage, high-current motor supplies and high-voltage
    supplies too. The other reason that they need their own power system is that they
    can cause interference. They can pull enough power that other circuitry has brownouts.
    A brownout is when circuitry has a voltage drop that is low or long enough to
    get into an inconsistent or reset state. Resets can lead to SD card corruption
    on a Pi. Motors can also introduce electrical noise to a power line as they are
    used, which could cause digital parts to misbehave.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two primary strategies for powering a robot with motors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dual batteries**: The motors and the rest of the robot have entirely separate
    sets of batteries, ensuring that their power is independent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Battery eliminators**: Use a single battery or are set with a BEC/regulator.
    A **BEC** is a **battery eliminator circuit**, shown in *Figure 6.12*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Picture of a BEC'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.12 – Picture of a BEC
  prefs: []
  type: TYPE_NORMAL
- en: 'Dual batteries are the surest option to avoid any brownout, loss of power,
    or interference issues. This option takes more space than a BEC. However, the
    dual power option, with a USB power bank for the Raspberry Pi (shown in *Figure
    6.13*) is a simple and effective way to avoid power issues. Choose one with small
    outercase dimensions, but a high power-rating, such as 10,000 mAh, and an output
    of at least 2.1 A:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – The USB power bank from Armbot – slightly old and battered,
    but still effective'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – The USB power bank from Armbot – slightly old and battered, but
    still effective
  prefs: []
  type: TYPE_NORMAL
- en: Check that the USB power bank comes with the cable to connect the Raspberry
    Pi – a Raspberry Pi 3 (A+ and B+) requires a USB micro connector, and the Raspberry
    Pi 4 requires a USB-C connector. Power bank outputs usually use a USB-A connector.
    If they are not included with the power bank, you will need to buy one of these
    cables too.
  prefs: []
  type: TYPE_NORMAL
- en: Motor controller boards sometimes have power supplies to regulate power for
    a Pi from the motor power. These often have too low an output rating. They can
    be very inefficient, wasting a lot of battery power. Unless using very high current
    handling batteries, they are very likely to lead to brownouts.
  prefs: []
  type: TYPE_NORMAL
- en: A battery eliminator circuit is lighter and takes up less space. Types include
    a BEC, uBEC, switching supply, or a regulator. Battery eliminators usually need
    high-power batteries such as Li-Ion types. By sharing a supply with motors, batteries
    need enough current capacity not to be vulnerable to the voltage drops that cause
    controller resets and line noise for the controller. This requirement affects
    switching power supply Pi SHIMs like the Wide Input SHIM and the power supplies
    built into some motor controllers.
  prefs: []
  type: TYPE_NORMAL
- en: You need to ensure that the BEC output can handle at least 2.1 A, preferably
    more. It's common to see 3.4 A and 4.2 A power banks. UBECs with 5 A ratings are
    also reasonably common.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep things simple in this robot, and not have to deal with reset issues,
    we use the dual battery approach and accept the cost in bulk and weight:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – The 4 x AA battery box we use with the motors'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – The 4 x AA battery box we use with the motors
  prefs: []
  type: TYPE_NORMAL
- en: For the motors, 4 x AA batteries work. I recommend using nickel metal hydride
    rechargeable batteries for them. That is not just because you can recharge them,
    but also because they can deliver more current if needed than alkaline batteries.
    To save space, we use the *two up/two down* or *back to back* configuration, like
    the battery box shown in *Figure 6.14*.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, for our battery selection, we will use a 4 x AA metal hydride
    set for the motors and a USB power bank for the Raspberry Pi and logic.
  prefs: []
  type: TYPE_NORMAL
- en: We have now made part selections. We know which chassis, controller, and battery
    configurations we will use. We have seen the size of the motors and wheels, and
    have, in previous chapters, selected a Raspberry Pi model to use. Before we go
    ahead and buy all this, we should make a further check to see that it will all
    fit. In the next section, let's learn about test fitting robot parts.
  prefs: []
  type: TYPE_NORMAL
- en: Test fitting the robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I recommend test fitting before actually ordering parts. The test fit helps
    a builder be more confident that components fit, and you'll know roughly where
    these parts go. This step saves you time and money later.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use paper and a pen for test fitting, or an app such as [diagrams.net](http://diagrams.net).
    First, I find the dimensions for all the parts. *Figure 6.15* has a screenshot
    from Amazon showing how to spot product dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Finding product specifications'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.15 – Finding product specifications
  prefs: []
  type: TYPE_NORMAL
- en: 'Some information-digging is needed to find these for your parts. For each,
    first find a shop you can buy them at, such as Amazon, several online shops, or
    eBay. You can then search for or ask for information about the dimensions of each
    board or item. Make sure you are looking at the dimensions of the part and not
    its packaging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – A battery box product drawing with dimensions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.16 – A battery box product drawing with dimensions
  prefs: []
  type: TYPE_NORMAL
- en: You can find diagrams like the battery box in *Figure 6.16* by doing image searches
    on dimensions or part datasheets. In this case, the dimensions are in mm. The
    ± signs show the manufacturing variation of plus or minus the next number. When
    test fitting, err on the higher side, so take 57±1 as 58 mm for that dimension.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the dimensions I have are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Raspberry Pi 3a+: 65 mm x 56 mm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The chassis: Mine suggests it is 100 mm x 200 mm. Be aware that the dimensions
    here are outer dimensions and include the wheels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The motor controller fits over the Pi, so it is counted here as the Pi. This
    controller makes things taller but is only really a concern for a multi-level
    robot chassis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The 4 x AA battery box: The type I suggested is 58 mm x 31.5 mm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The USB power bank: 60 mm x 90 mm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this, drawing rectangles to scale is enough detail. In [diagrams.net](http://diagrams.net),
    create a new blank diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – Using diagrams.net to create test fit parts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.17 – Using diagrams.net to create test fit parts
  prefs: []
  type: TYPE_NORMAL
- en: 'You can follow the instructions to create test fit parts as shown in *Figure
    6.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the general palette on the left to drag out rectangles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It helps to label each part clearly. Double-click a rectangle and type a label
    into it. Press *Enter* to accept the label. I've added a text label on the *front*
    of the chassis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the item so it has a blue highlight. Click the tabs on the right to select
    the **Arrange** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, type your dimensions (swap millimeters for points) into the **Width**
    and **Height** boxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can repeat *steps 1* through *4* for all the items and then drag the parts
    together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.18 – The test fit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.18 – The test fit
  prefs: []
  type: TYPE_NORMAL
- en: The Pi should be near the front of the robot, as we'll later have sensors here,
    and the motor wires can go forward into it. In *Figure 6.18*, I've dragged the
    rectangles into place. [Draw.io](http://Draw.io) helps you here by showing blue
    guidelines for centering and aligning objects. I put the power bank at the rear,
    with the AA batteries closer to the Pi so they can go into the motor controller
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: The parts look like they fit. It's not 100% accurate, but good enough to say
    this probably works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to buy parts. My shopping list looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The chassis kit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Full Function Stepper Motor HAT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 x AA battery box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 x metal hydride AA batteries. If you don't have one, you need a charger for
    these too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 x USB power bank able to deliver 3 amps or more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now you've selected your parts and made the trade-offs. You've followed that
    by test fitting them to see how they're laid out and check they all fit. It's
    time for you to go and buy your parts and chassis. Once done, come back here because
    then we can begin our build.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling the base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assuming you bought a chassis similar to mine, you can assemble it with these
    steps. For a completely different chassis, I strongly recommend consulting the
    documentation for assembly instructions. A chassis that is very different from
    the recommendations here may make it harder to follow the next few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some parts may be covered in a layer of paper (shown in *Figure 6.19*). This
    layer prevents the plastic from getting scratches and can be safely removed. You
    can do this by getting a nail under it or using a craft knife. It''s not essential
    to remove it, but a robot looks better without it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Removing the protective backing from robot parts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.19 – Removing the protective backing from robot parts
  prefs: []
  type: TYPE_NORMAL
- en: With the laser-cut kits that use the yellow motors, there are two main ways
    the motors are attached. One type has plastic brackets, and the other has metal
    motor brackets. Given that you may buy kits of either style, let's look at how
    the kits could differ. The difference only matters in assembly steps, so buy what
    is available to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a kit with a plastic motor bracket, you should have the parts shown in
    *Figure 6.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Robot kit parts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.20 – Robot kit parts
  prefs: []
  type: TYPE_NORMAL
- en: 'In the kit, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Two wheels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Encoder wheels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pair of motors with wires.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A castor wheel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bolts and brass standoffs to mount the castor wheel. I've replaced one set of
    bolts with non-conductive nylon ones. You should be able to do the same from the
    nylon standoff kit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The chassis plate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plastic brackets to mount the motors. Your kit may have metal types, which work
    slightly differently and come with four extra screws.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Four bolts and nuts to mount the motors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 6.21* shows how the metal motor bracket parts differ:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure. 6.21 – Metal type motor bracket'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure. 6.21 – Metal type motor bracket
  prefs: []
  type: TYPE_NORMAL
- en: 'In the kit, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The metal bracket replaces the plastic brackets here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chassis to bracket bolts – instead of slotting through, these brackets need
    to be bolted to the chassis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The long bolts for the bracket to the motor will still be the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The other components not shown are going to be very similar to this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let's see how to attach encoder wheels.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching the encoder wheels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by attaching the encoder wheels to the motor. We need these for
    a later chapter on sensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.22 – The encoder wheel is attached to the motor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.22 – The encoder wheel is attached to the motor
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the steps in *Figure 6.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: Observe on which side the wires are connected to it. The encoder wheel should
    attach on the same side as the wires.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the axle hole with flattened sides in the encoder wheel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The axles on the motors are shaped to match this hole.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Line up the axle hole with the motor axle on the same side as the wires and
    gently push it on. It should have a little friction. Repeat this for the other
    motor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now have two motors with encoder wheels on them, on the same side
    as their wires. Next, we fit the motor brackets to the robot.
  prefs: []
  type: TYPE_NORMAL
- en: Fitting the motor brackets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two kinds of motor brackets commonly used in the pictured laser-cut
    chassis. You should use the section that is most similar to the type you have.
  prefs: []
  type: TYPE_NORMAL
- en: Fitting plastic motor brackets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you have the metal type, skip this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fit the plastic type of bracket, first look for the slots to attach it,
    as shown in *Figure 6.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.23 – Plastic motor mount'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.23 – Plastic motor mount
  prefs: []
  type: TYPE_NORMAL
- en: 'To fit these, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The arrows point at the slots. Push the plastic brackets through the slots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the motor against the bracket. Note that the wires and the encoder wheel
    face the inside. The encoder should be under a cutout in the chassis body for
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a slot in the chassis for an outer bracket, sandwiching the motor.
    Push another bracket into this slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the long screws through from the outside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, push a nut onto the screws and use a screwdriver to screw them in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the nut closest to the chassis, one of its flattened edges should hold it
    in place as you tighten the screw. For the outer nut, use a spanner or pliers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to repeat the same steps for the other side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This section has covered attaching motors to a chassis with plastic brackets.
    If you have metal brackets, you should use the following section instead.
  prefs: []
  type: TYPE_NORMAL
- en: Fitting metal motor brackets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Please skip this section if you have assembled the plastic motor brackets.
    The metal type of bracket is slightly different; *Figure 6.24* shows its assembly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24 – Assembling metal motor brackets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.24 – Assembling metal motor brackets
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to see two small screw holes in the top of the bracket; these
    are threaded. There are two short screws per bracket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The chassis has holes in the wheel mount area that match these. Line these up,
    and then screw the short screws through the chassis holes into the bracket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take the motor and ensure the wires are facing away from you. Push the long
    screws through the two holes in the motor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, take this motor assembly and push the long threads into the holes on the
    side of the bracket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It should fit through like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, push nuts onto the threads that stick out the other end of the bracket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can tighten the nuts furthest from the chassis with pliers, or a spanner
    and a screwdriver. The closer nuts catch on one flat side, so you'll only need
    a screwdriver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have the completed assembly and need to repeat these steps for the other
    side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After completing either set of steps, you should now have a motor mounted on
    each side. We will use these for the drive wheels. But first, we need the castor
    wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the castor wheel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, it is time to fit the castor wheel. The castor wheel balances the robot.
    It is not driven, so will be dragged along by the robot. It''s important that
    it has little friction. *Figure 6.25*, along with the steps that follow, will
    teach you exactly how to get this done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.25 – Fitting the castor wheel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.25 – Fitting the castor wheel
  prefs: []
  type: TYPE_NORMAL
- en: 'Use these steps with the *Figure 6.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: This is the castor. It has four screw holes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to push a metal screw through the hole, so the thread is facing away
    from the wheel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, screw one of the brass standoffs into this screw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this for the four other sides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Line the other side of the standoffs with the four holes on the chassis. Note
    that this castor wheel is a rectangle, not a square. Make sure the wheel is facing
    down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push one of the screws through and screw it down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I suggest you screw the opposite corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This makes the remaining two screws easier to put in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The castor should now be attached to the robot like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the castors attached, the robot will balance, but it needs wheels to move
    anywhere, so let's add wheels.
  prefs: []
  type: TYPE_NORMAL
- en: Putting the wheels on
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The wheels now need to be pushed on, as shown in *Figure 6.26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Fitting the wheels'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.26 – Fitting the wheels
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, note that they have two flattened sides in their axle hole, like the
    encoder wheel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Line the wheels up with the axles, taking into account the flat edges, and push
    them on. Do not push on the wires or the encoder disk as they may break.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sometimes, rotating the wheels until they push in helps. You should be able
    to push the wheel on, being sure to support the motor from the other side. After
    doing this, you may want to realign the encoder wheels with their slots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wheels are on the motors and the robot is starting to take shape. The robot
    should now be able to sit on three wheels. You can roll it around manually, but
    it's not quite ready to drive itself yet.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing the wires up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A last minor step in chassis assembly is to bring the wires up. The motor controller
    will be on the top of the robot, so the wires need to be above the chassis too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27 – Bringing the wires up'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.27 – Bringing the wires up
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the steps in *Figure 6.27*:'
  prefs: []
  type: TYPE_NORMAL
- en: First, gather the two wires from one motor. Locate the small slot in the middle
    of the chassis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the wires through.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gently pull them through to the top of the chassis, so they are poking out as
    shown. Repeat this for the other motor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We should now have a robot that looks like *Figure 6.28* (motor brackets vary):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28 – The assembled chassis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.28 – The assembled chassis
  prefs: []
  type: TYPE_NORMAL
- en: With the motors in place and wheels ready, we can see how the robot will move.
    You've built the mechanical section of the robot. The wires are in position, and
    we're now ready to add the electronics. We'll start by adding the central controller,
    the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Fitting the Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will not fit the motor controller yet – we''ll address that in the next
    chapter, but we can mount the Raspberry Pi now and prepare it to have other boards
    connected to it. We need to put standoffs on the Pi to bolt it onto the chassis,
    but leave room for the motor bracket mounting, and later sensors that go under
    the Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29 – Fitting the Raspberry Pi'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.29 – Fitting the Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the steps shown in *Figure 6.29*:'
  prefs: []
  type: TYPE_NORMAL
- en: You need a small posidrive screwdriver, a small spanner or pair of pliers, 4
    x M2.5 5mm screws, 4 x M2.5 8 mm standoffs with threads, 4 x M2.5 12 mm standoffs,
    and the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push an 8 mm standoff thread up through the screw hole from the bottom of the
    Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, screw a 10 mm standoff onto the top of these, with the thread facing upward,
    using the pliers/spanner to hold the standoff.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat for all four corners.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Line two of these up with some slots or screw holes on the chassis and screw
    them in from underneath.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the chassis I used, there were only two holes that line up, so I screwed
    those in and used the other standoffs to keep the Pi level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This robot now has a main controller, which will be able to run code and command
    the robot. However, before it will do much, the controller and motors need power.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the batteries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two sets of batteries that you have bought: the 4 x AA battery holder,
    as in *Figure 6.14* (with a set of rechargeable metal hydride batteries), and
    a USB power bank, as in *Figure 6.13*. The power bank contains a lithium-ion cell
    and a USB charging system.'
  prefs: []
  type: TYPE_NORMAL
- en: We mount these on the back of the robot, where they'll counterbalance some of
    the sensors that we'll add later.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the USB power bank
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Do not connect the power bank to the Raspberry Pi yet (or be sure to log in
    and shut it down properly before pulling the power cable out if you have done
    so):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.30 – Mounting the power bank'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.30 – Mounting the power bank
  prefs: []
  type: TYPE_NORMAL
- en: 'To attach a USB power bank to the chassis, use the following instructions and
    *Figure 6.30*:'
  prefs: []
  type: TYPE_NORMAL
- en: For this power bank, we use some hook and loop tape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a look at the power bank and note that one side has the USB connector on
    it. This connector should end up on the left of the robot. If it has an LED charge
    display, this should be on top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Measure two lengths of hook and loop tape. Stick the rough sides in two strips
    on the robot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stick the soft sides to the power bank, and line these up with the robot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the power supply down, so the hook and loop have stuck together. This connection
    holds well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is how the power bank should sit on the robot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatives are to use sticky tack (for a cheap but flimsy connection), cable
    ties, double-sided tape, or rubber bands to hold the battery in place. These are
    suitable for different sizes of batteries.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting the AA battery holder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will also use hook and loop tape to add an AA battery holder for motor power.
    We need the holder to be easy to remove so the batteries can be replaced. Hook
    and loop tape is a convenient choice for this. Adding the AA battery holder is
    shown in *Figure 6.31*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.31 – Mounting the AA battery holder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.31 – Mounting the AA battery holder
  prefs: []
  type: TYPE_NORMAL
- en: 'To mount the AA battery holder, use *Figure 6.31* with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the AA battery holder does not have batteries in it yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cut and stick a small strip of hook and loop tape to the bottom of the battery
    holder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stick the opposite hook and loop strip to the robot just in front of the power
    bank (removed for clarity – you do not need to remove the power bank).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the battery holder here using the hook and loop strips.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At a pinch, sticky tack can be used for this, but remember that the AA battery
    box needs to be removable to replace the cells in it.
  prefs: []
  type: TYPE_NORMAL
- en: The completed robot base
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have now completed the robot base, which should look something like *Figure
    6.32*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.32 – The completed chassis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.32 – The completed chassis
  prefs: []
  type: TYPE_NORMAL
- en: You've now built your first robot chassis! Hopefully, the first of many. With
    the robot chassis completed, sporting wheels, a Raspberry Pi, and battery compartment,
    it is nearly ready to roll. It needs some wiring to a motor controller and code
    to really come to life.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the motors to the Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will connect the motors to the Raspberry Pi. Once we have
    connected them, we can use code on the Raspberry Pi to control the motors and
    make the robot move. *Figure 6.33* is the block diagram for the robot that we
    are building in this chapter. We will be using the Full Function Stepper Motor
    HAT as the controller board, calling it the Motor HAT for short.
  prefs: []
  type: TYPE_NORMAL
- en: 'This block diagram is similar to the type shown in [*Chapter 3*](B15660_03_Final_ASB_ePub.xhtml#_idTextAnchor050),
    *Exploring the Raspberry Pi*. First, it starts with the Raspberry Pi, here in
    gray, as we''ve chosen that as our controller. Connected to the Pi is the Motor
    HAT, with instructions flowing from the Raspberry Pi to this board. The Motor
    HAT and its connections are highlighted as we are adding these parts in this chapter.
    As we build on this block diagram in later chapters, existing components will
    be in the color gray. Added components will be highlighted with red to show what
    is new. Finally, the two motors are added to the left and right of the Motor HAT,
    with arrows going from the Motor HAT to show it is controlling the motors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.33 – Block diagram of the robot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.33 – Block diagram of the robot
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in connecting the motors is to fit the Motor HAT onto the Raspberry
    Pi. *Figure 6.34* shows the Motor HAT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.34 – The Full Function Stepper Motor HAT'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15660_06_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.34 – The Full Function Stepper Motor HAT
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s attach this HAT to our robot and wire it in so we can start programming
    our robot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_06_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.35 – Fitting the motor controller
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to *Figure 6.35* and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Line up the motor board socket with the Pi header. The four holes in the corners
    should also line up with the screw threads facing up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gently and evenly push the motor board onto the Raspberry Pi, guiding the screw
    threads through. Continue until the board is firmly seated on the GPIO header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The robot should now look like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The board is now attached to the Raspberry Pi, and we can start wiring it.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring the Motor HAT in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now wire in the Motor HAT, first to the motors, and also partially to
    the motor batteries. We wire the motor batteries so the motors have their own
    source of power and do not cause low-power reset conditions on the Raspberry Pi.
    The motor controller needs to be wired to the motors to power and control them.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.36* shows how we wire this up. Don''t wire in the ground (black)
    wire on the batteries until we are ready to power it up. I suggest using a little
    insulation tape to tape the tip of it down to a plastic part of the chassis, so
    it does not catch on anything. Leaving ground unwired lets us use it as a kind
    of makeshift switch:'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The black wire on a battery may be referred to as ground, GND, and negative.
    The red wire can be referred to as **positive** (**+ve**), **vIn** (**voltage
    In**), or by the voltage input rating – for example, 5 V – 12 V.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.36 – How to wire up the motors and batteries](img/B15660_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.36 – How to wire up the motors and batteries
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.37* shows the steps for the connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_06_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.37 – Steps for connecting the wires
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps with reference to *Figure 6.37* to connect the
    wires:'
  prefs: []
  type: TYPE_NORMAL
- en: Loosen up the screw terminals for the 5 V – 12 V connection, GND, the two M2
    connectors, and the M1 connectors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the red wire from the AA battery box into the screw terminal marked 5 V
    – 12 V, so the metal part of the wire (the core) is in the slot formed by the
    metal cover.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screw it down firmly, so the wire does not pull out easily. Ensure that the
    core is being gripped, and not the plastic outer layer (its insulation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat for the motor terminals, making the connections shown in image 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result should look like image 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now connected the motors to the controller, so it can drive them. We
    have partially connected the battery power, but we have left one connection free,
    so we can use this as a power switch. Let's try powering up the robot.
  prefs: []
  type: TYPE_NORMAL
- en: Independent power
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, although we have set up a headless Raspberry Pi, we have still been
    plugging it into the wall. Now it is time to try powering it independently. We
    will power up the motors from the AA batteries, and the Raspberry Pi from the
    USB power bank. We will see lights on the devices to tell us they are powered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_06_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.38 – Going on to independent power
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the steps shown in *Figure 6.38*:'
  prefs: []
  type: TYPE_NORMAL
- en: Plug the Micro USB (tiny) end of the cable into the Pi in the USB micro-socket
    indicated by the arrow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fit the four AA batteries; you may need to pop the battery box up and push it
    back down again after this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can power up the motor board now. Connect the black wire from the battery
    box into the GND terminal indicated by the arrow, next to 5 V – 12 V. When you
    do so, a light appears on the motor board to show it is active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on the Pi by plugging the USB A (wide) end into the power bank. The intention
    from here is to keep the micro-USB tiny end in, and only connect/disconnect the
    USB A (wide) end when powering the Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Raspberry Pi and motor board are now powered, as shown in image 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Congratulations, your robot is now running on independent power, freeing the
    Raspberry Pi from the wall and giving the motors power too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_06_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.39 – The complete [*Chapter 6*](B15660_06_Final_ASB_ePub.xhtml#_idTextAnchor096)
    robot
  prefs: []
  type: TYPE_NORMAL
- en: The photograph in *Figure 6.39* shows our robot so far. It has motors on the
    chassis, with a Raspberry Pi and a motor control board fitted. The robot has a
    power supply for the Raspberry Pi – currently powered up. It has a power supply
    for the motors, currently disconnected with the black ground wire carefully taped
    out of the way of the rest of the robot. The motors are wired into the control
    board. This is enough robot to start making things move.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: SD cards can be corrupted by removing power from the Pi without shutting it
    down. When turning it off, log in with PuTTY and use `sudo poweroff` before removing
    the power.
  prefs: []
  type: TYPE_NORMAL
- en: Your motors are ready to drive, and the Raspberry Pi is ready to run code without
    needing to be plugged into a wall. Combining independent power with headless Wi-Fi
    control means the robot can be driven around by instructions from your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've now learned how to choose the parts for a robot by reasoning
    and making some important design decisions. You used a simple tool to test fit
    these parts and see what works before buying anything. Finally, you bought the
    parts and built your starting robot platform.
  prefs: []
  type: TYPE_NORMAL
- en: By considering the trade-offs and test fitting again, you have gained skills
    for planning any hardware project, including finding dimensions on the datasheets/vendor
    websites, making a simple test-fit sketch, and considering how the parts will
    interact together. You've learned how the size of a robot affects motor and controller
    decisions. You've seen how to make parts easy to remove using hook and loop tape
    and considered other options for this.
  prefs: []
  type: TYPE_NORMAL
- en: By hooking up independent power, and connecting the motors, the robot has the
    hardware it will need to drive itself around without being tethered to a wall.
    What it doesn't yet have is any code to move with. In the next chapter, we will
    start writing the code to get this robot moving!
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B15660_02_Final_ASB_ePub.xhtml#_idTextAnchor033), *Exploring
    Robot Building Blocks – Code and Electronics*, you created block diagrams for
    a different robot. Consider what chassis, power, and parts it needs. Use online
    vendors to find suitable parts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider whether there is a suitable combination of Raspberry Pi hats or bonnets
    that fit your design. Use resources such as [https://pinout.xyz](https://pinout.xyz)
    to check their pin usage is compatible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What power systems might be suitable for the Raspberry Pi and the output devices
    in your new design?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there components that may need to be removed easily? How could you approach
    that? Can you come up with alternatives to hook and loop tape? Keep it simple.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a test-fitting sketch for your new robot parts, checking that they fit
    using part dimensions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: For further reading on chassis designs, consider *Raspberry Pi Robotic Blueprints*,
    *Dr. Richard Grimmett*, *Packt Publishing*. This includes modifying an RC car
    into a robot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more robot chassis types, the community sharing website [https://www.instructables.com](https://www.instructables.com)
    has many buildable examples. Some of these are very interesting and more advanced
    than our robot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
