["```py\n    import streamlit as st\n    import spacy_streamlit\n    ```", "```py\n    DEFAULT_TEXT = \"\"\"Givenchy is looking at buying U.K. startup for $1 billion\"\"\"\n    ```", "```py\n    spacy_model = \"../chapter_08/pipelines/fashion_ner_with_base_entities\"\n    ```", "```py\n    st.title(\"NER Fashion Brands App\")\n    text = st.text_area(\"Text to analyze\", DEFAULT_TEXT, height=200)\n    ```", "```py\n    doc = spacy_streamlit.process_text(spacy_model, text)\n    ```", "```py\n    spacy_streamlit.visualize_ner(\n        doc,\n        labels=[\"FASHION_BRAND\", \"GPE\"],\n        show_table=False,\n        title=\"Fashion brands and locations\",\n    )\n    ```", "```py\n    with st.form(\"my_form\"):\n        text = st.text_area(\"Text to analyze\", DEFAULT_TEXT, \n                            height=200)\n        submitted = st.form_submit_button(\"Submit\")\n        if submitted:\n            doc = spacy_streamlit.process_text(spacy_model, text)\n            spacy_streamlit.visualize_ner(\n                doc,\n                labels=[\"FASHION_BRAND\", \"GPE\"],\n                show_table=False,\n                title=\"Fashion brands and locations\",\n            )\n    ```", "```py\n    import streamlit as st\n    import spacy_streamlit\n    DEFAULT_TEXT = \"\"\"Givenchy is looking at buying U.K. startup for $1 billion\"\"\"\n    spacy_model = \"../chapter_08/pipelines/fashion_ner_with_base_entities\"\n    st.title(\"NER Fashion Brands App\")\n    with st.form(\"my_form\"):\n        text = st.text_area(\"Text to analyze\", DEFAULT_TEXT, \n                            height=200)\n        submitted = st.form_submit_button(\"Submit\")\n        if submitted:\n            doc = spacy_streamlit.process_text(spacy_model, text)\n            spacy_streamlit.visualize_ner(\n                doc,\n                labels=[\"FASHION_BRAND\", \"GPE\"],\n                show_table=False,\n                title=\"Fashion brands and locations\",\n            )\n    ```", "```py\nstring_or_int = \"Hi friends\"\nstring_or_int = 10\n```", "```py\ndef greeting(name):\n    return \"Hello\" + name\n```", "```py\ndef greeting(name: str) -> str:\n    return f\"Hello {name}\"\n```", "```py\n    from fastapi import FastAPI\n    app = FastAPI()\n    ```", "```py\n    @app.get(\"/\")\n    def root():\n        return {\"message\": \"Hello World\"}\n    ```", "```py\n    {\n      \"values\": [\n        {\n          \"record_id\": \"1\",\n          \"text\": \"Givenchy is looking at buying U.K. startup for $1 billion\"\n        }\n      ]\n    }\n    ```", "```py\n{\n  \"values\": [\n    {\n      \"record_id\": \"1\",\n      \"data\": {\n        \"entities\": [\n          {\n            \"name\": \"Givenchy\",\n            \"label\": \"FASHION_BRAND\",\n            \"matches\": [\n              {\n                \"char_start\": 0,\n                \"char_end\": 8,\n                \"text\": \"Givenchy\"\n              }\n            ]\n          },\n          // [...]          {\n            \"name\": \"$1 billion\",\n            \"label\": \"MONEY\",\n            \"matches\": [\n              {\n                \"char_start\": 47,\n                \"char_end\": 57,\n                \"text\": \"$1 billion\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```", "```py\n    from pydantic import BaseModel\n    from typing import List\n    class TextToExtractEntities(BaseModel):\n        record_id: str\n        text: str\n    ```", "```py\n    class TextsRequest(BaseModel):\n        values: List[TextToExtractEntities]\n    ```", "```py\n    import spacy\n    from spacy.language import Language\n    class EntityExtractor:\n        def __init__(self, nlp: Language,\n                     record_id_col_key: str = \"record_id\",\n                     record_text_col_key: str = \"text\"):\n            self.nlp = nlp\n            self.record_id_col_key = record_id_col_key\n            self.record_text_col_key = record_text_col_key\n    ```", "```py\n    def extract_entities(self, records: List[Dict[str, str]]):\n        ids = (item[self.record_id_col_key] for item in records)\n        texts = (item[self.record_text_col_key] for item in records)\n        response = []\n        for doc_id, spacy_doc in zip(ids, self.nlp.pipe(texts)):\n            entities = {}\n            for ent in spacy_doc.ents:\n                ent_name = ent.text\n                if ent_name not in entities:\n                    entities[ent_name] = {\n                        \"name\": ent_name,\n                        \"label\": ent.label_,\n                        \"matches\": [],\n                    }\n                entities[ent_name][\"matches\"].append(\n                    {\"char_start\": ent.start_char, \n                     \"char_end\": ent.end_char,\n                     \"text\": ent.text}\n                )\n            response.append({\"id\": doc_id, \n                             \"entities\": list(entities.values())})\n        return response\n    ```", "```py\n    import spacy\n    from pprint import pprint\n    from extractor import EntityExtractor\n    nlp = spacy.load(\"../chapter_08/pipelines/fashion_ner_with_base_entities\")\n    sentence = \"Givenchy is looking at buying U.K. startup for $1 billion\"\n    doc = nlp(sentence)\n    extractor = EntityExtractor(nlp)\n    entities = extractor.extract_entities([{\"record_id\":1,\"text\":sentence}])\n    pprint(entities)\n    ```", "```py\n    [{\n        'entities': [\n            {\n                'label': 'FASHION_BRAND',\n                'matches': [{\n                    'char_end': 8,\n                    'char_start': 0,\n                    'text': 'Givenchy'\n                }],\n                'name': 'Givenchy'\n            },\n            {\n                'label': 'GPE',\n                'matches': [{\n                    'char_end': 34,\n                    'char_start': 30,\n                    'text': 'U.K.'\n                }],\n                'name': 'U.K.'\n            },\n            {\n                'label': 'MONEY',\n                'matches': [{\n                    'char_end': 57,\n                    'char_start': 47,\n                    'text': '$1 billion'\n                }],\n                'name': '$1 billion'\n            }\n        ],\n        'id': 1\n    }]\n    ```", "```py\n    @app.post(\"/entities\")\n    def extract_entities(body: TextsRequest):\n        \"\"\"Extract Named Entities from a batch of Records.\"\"\"\n        documents = []\n        for item in body.values:\n            documents.append({\"record_id\": item.record_id, \n                              \"text\": item.text})\n    ```", "```py\n        entities_result = extractor.extract_entities(documents)\n        response = [\n            {\"record_id\": er[\"record_id\"], \n             \"data\": {\"entities\": er[\"entities\"]}}\n            for er in entities_result\n        ]\n        return {\"values\": response}\n    ```", "```py\nfrom fastapi import FastAPI\nfrom typing import List\nfrom pydantic import BaseModel\nimport spacy\nfrom extractor import EntityExtractor\napp = FastAPI()\nnlp = spacy.load(\"../chapter_08/pipelines/fashion_ner_with_base_entities\")\nextractor = EntityExtractor(nlp)\nclass TextToExtractEntities(BaseModel):\n    record_id: str\n    text: str\nclass TextsRequest(BaseModel):\n    values: List[TextToExtractEntities]\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n@app.post(\"/entities\")\ndef extract_entities(body: TextsRequest):\n    \"\"\"Extract Named Entities from a batch of Records.\"\"\"\n    documents = []\n    for item in body.values:\n        documents.append({\"record_id\": item.record_id, \n                          \"text\": item.text})\n    entities_result = extractor.extract_entities(documents)\n    response = [\n        {\"record_id\": er[\"record_id\"], \n         \"data\": {\"entities\": er[\"entities\"]}}\n        for er in entities_result\n    ]\n    return {\"values\": response}\n```"]