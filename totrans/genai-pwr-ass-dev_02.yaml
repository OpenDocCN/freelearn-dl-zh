- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing and Setting Up Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q nomenclature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Q Developer basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Q Developer features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Q Developer tiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Q Developer setup for third-party IDEs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Q Developer setup for the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Q Developer setup for AWS coding environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build on AWS with support from Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our previous chapter, we laid the foundation for how generative AI-powered
    assistants help developers improve their productivity, and we also looked at some
    of the assistants available in the market. In this chapter, we will focus on **Amazon
    Q Developer** – a developer tool that helps us understand and build applications
    using generative AI. It supports developers across the software development lifecycle.
    With Amazon Q Developer, employees receive timely, pertinent information and guidance,
    facilitating streamlined tasks, faster decision-making, and effective problem-solving,
    and fostering creativity and innovation in the workplace.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started with an important note on the service nomenclature.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q nomenclature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go any further, we want to clarify the nomenclature to prevent any
    misunderstandings for the remainder of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Q** is the flagship term used to refer to the generative AI-powered
    assistant from AWS. Under this term, there are multiple products and/or features
    of existing AWS services that specifically assist with certain types of technology
    domains and the personas that typically work in those domains. Let’s quickly look
    at those:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Q Business**: This is a generative AI-powered assistant capable of
    answering questions, providing summaries, generating content, and securely completing
    tasks based on data from your enterprise systems. It empowers employees to be
    more creative, data-driven, efficient, prepared, and productive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Q in QuickSight**: Amazon QuickSight is a **business intelligence**
    (**BI**) service from AWS. With Amazon Q in QuickSight, customers receive a generative
    BI assistant that enables business analysts to use natural language to build BI
    dashboards in minutes and effortlessly create visualizations and complex calculations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Q in Connect**: Amazon Connect is a service from AWS that enables
    businesses to set up and manage a customer contact center with ease, offering
    various features to enhance customer service and support. Amazon Q in Connect
    leverages real-time conversations with customers and relevant company content
    to automatically suggest responses and actions for agents, enhancing customer
    assistance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Q in AWS Supply Chain**: AWS Supply Chain is a service from AWS that
    unifies data and offers ML-powered actionable insights, built-in contextual collaboration,
    and demand planning. It seamlessly integrates with your existing **enterprise
    resource planning** (**ERP**) and supply chain management systems. With Amazon
    Q in AWS Supply Chain, inventory managers, supply and demand planners, and other
    stakeholders can ask questions and receive intelligent answers about their supply
    chain’s status, underlying causes, and recommended actions. They can also explore
    “what-if” scenarios to evaluate the trade-offs of various supply chain decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Q Developer**: This book focuses on this service. It assists developers
    and IT professionals with a wide range of tasks, including coding, testing, upgrading
    applications, diagnosing errors, performing security scans and fixes, and optimizing
    AWS resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy name and nomenclature used in this book
  prefs: []
  type: TYPE_NORMAL
- en: The code assistant was previously called Amazon CodeWhisperer and has now been
    rebranded as part of Amazon Q Developer. You may see the legacy name CodeWhisperer
    in some places while using the tool with multiple AWS services, but it’s all part
    of Amazon Q Developer now.
  prefs: []
  type: TYPE_NORMAL
- en: Also, throughout the book, for brevity, we will sometimes use the terms Amazon
    Q, Q Developer, or just Q to refer to **Amazon** **Q Developer**.
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into how to set up Amazon Q Developer in different environments,
    let’s first explore some of its basics.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After understanding the challenges developers face, AWS created a generative
    AI-powered assistant – Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers typically follow the **software development lifecycle** (**SDLC**):
    plan, create, test, operate, and maintain. Each stage in this process is often
    repetitive and error-prone. As a result, the process takes significant time and
    effort, hampering developer productivity. The following figure shows the typical
    SDLC tasks on which developers spend time and effort.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The SDLC tasks that developers spend the most time on](img/B21378_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The SDLC tasks that developers spend the most time on
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Q Developer assists developers across the SDLC. Let’s look at this at
    a high level before diving deep into each of these components throughout the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plan**: Amazon Q assists during the planning phase by providing code explanations
    and helping with AWS best practices and recommendations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create**: Amazon Q enhances development productivity by offering in-line
    coding suggestions, generating new features using natural language, and allowing
    you to ask questions directly within the **integrated development** **environment**
    (**IDE**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: Amazon Q aids developers in verifying the functionality and security
    of their code. It assists in unit testing and identifies and resolves security
    vulnerabilities earlier in the development cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operate**: Amazon Q is equipped to troubleshoot errors, analyze VPC reachability,
    and provide enhanced debugging and optimization suggestions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintain**: Amazon Q’s Code Transformation feature assists in maintaining
    and modernizing code by upgrading projects to newer language versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s look at the features of Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have dedicated chapters to dive deep into each of the features. This chapter
    will introduce the capabilities and help you complete the initial setup required
    for it to work with different tools. Let’s begin with the most important feature,
    auto-code generation.
  prefs: []
  type: TYPE_NORMAL
- en: Auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Q Developer’s ability to generate substantial code accelerates application
    development, enabling developers to address previously unattended business-critical
    issues. This creates additional time for envisioning and crafting next-generation
    innovative experiences. Additionally, by conducting security scans within the
    **integrated development environment** (**IDE**), it identifies and rectifies
    potential vulnerabilities early in the application lifecycle, reducing costs,
    time, and risks associated with development.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer seamlessly integrates into the developer’s IDE. By installing
    the Amazon Q IDE extension, developers can start coding immediately. As code is
    written, Amazon Q Developer autonomously assesses both the code and accompanying
    comments. Recognizing natural language comments (in English), Q provides multiple
    real-time code suggestions, even offering completion suggestions for comments
    as they are written.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q goes beyond individual code snippets, suggesting entire functions and
    logical code blocks, often spanning 10–15 lines, directly within the IDE’s code
    editor. The generated code mirrors the developer’s writing style and adheres to
    their naming conventions. Developers can swiftly accept the top suggestion (using
    the *tab* key), explore additional suggestions (using arrow keys), or seamlessly
    continue with their own code creation process. A link to the complete list of
    user actions for Amazon Q Developer in different IDEs is provided in the *References*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer supports many programming languages such as Python, Java,
    JavaScript, TypeScript, C#, Go, Rust, PHP, Ruby, Kotlin, C, C++, shell scripting,
    SQL, and Scala. Additionally, Q Developer is accessible as an extension in many
    IDEs such as Visual Studio, VS Code, and JetBrains IDEs, and is natively available
    in AWS Lambda, Amazon SageMaker Studio, Amazon EMR Studio, Amazon Redshift, Amazon
    CodeCatalyst, and AWS Glue Studio.
  prefs: []
  type: TYPE_NORMAL
- en: We have multiple chapters related to auto-code generation in *Parts 2, 3 and
    4* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Code customizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Q Developer enhances its suggestions by considering the nuances of internal
    codebases, which is crucial for organizations with extensive repositories, internal
    APIs, and unique coding practices. Developers often grapple with navigating large
    internal code repositories that lack comprehensive documentation. To address this,
    Amazon Q allows secure integration with an organization’s private repositories.
    With just a few clicks, developers can tailor Amazon Q to provide real-time recommendations
    aligned with internal libraries, APIs, packages, classes, and methods.
  prefs: []
  type: TYPE_NORMAL
- en: This customization supports multiple data sources, enabling organizations to
    verify that recommendations align with coding standards, security protocols, and
    performance best practices. Administrators have granular control, selecting repositories
    for customization securely and implementing strict access controls. They decide
    which customizations to activate and manage access for developers within the organization.
    Each customization operates independently, preserving the integrity of the foundational
    model and safeguarding intellectual property. This ensures that only authorized
    members with specific access can view, access, and utilize these tailored recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover this topic in depth in [*Chapter 10*](B21378_10.xhtml#_idTextAnchor159)
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Code transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, Amazon Q lets you upgrade code written in Java 8 and Java 11 to Java
    17\. To assist with this feature, the Amazon Q Developer Agent for Code Transformation
    is available to generate a transformation plan used to upgrade your code. After
    transforming your code, it provides a transformation summary and a file difference,
    allowing you to review the changes before accepting them.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover this topic in depth in [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181)
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Code explanation, optimization, and update
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Q Developer can explain, optimize, refactor, fix, and update specific
    lines of code within your IDE. To update your code, simply ask Amazon Q to modify
    a particular line or block of code. It will generate new code that incorporates
    the requested changes, which you can then insert directly into the original file.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover this topic in depth in [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181)
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Code feature development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Amazon Q Developer Agent assists with developing code features or making
    changes to projects within your IDE. Describe the feature you want to create,
    and Amazon Q will use the context of your current project to generate an implementation
    plan and the necessary code to bring the feature to life.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover this topic in depth in [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181)
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Reference tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Trained on extensive datasets comprising billions of lines from both Amazon
    and open source code, Amazon Q Developer recognizes instances where a code suggestion
    resembles specific open source training data. It can annotate such suggestions
    with repository and licensing details. Additionally, it keeps a record of accepted
    suggestions that share similarities with the training data, facilitating the provision
    of proper attribution.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover this topic in depth in [*Chapter 11*](B21378_11.xhtml#_idTextAnchor174)
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Security scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Q Developer also helps conduct scans on both generated and developer-written
    code to identify potential security vulnerabilities. It also provides recommendations
    for addressing identified vulnerabilities. The scanning process extends to detecting
    elusive security issues and is compatible with Python, Java, and JavaScript in
    VS Code and JetBrains IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: Security scans cover various aspects, including compliance with **Open Worldwide
    Application Security Project** (**OWASP**) standards, enforcement of cryptographic
    library practices, adherence to AWS security standards, and other best practices.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover this topic in depth in [*Chapter 13*](B21378_13.xhtml#_idTextAnchor197)
    of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with AWS services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Q Developer also accelerates development on AWS by integrating with many
    services, allowing for rapid application building using AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Data engineers can expedite the creation of data pipelines by leveraging Q’s
    integration with AWS Glue Studio Notebook and Amazon EMR Notebook. Creating SQL
    queries in Redshift becomes simple by articulating business outcomes using plain
    English sentences, as Q auto-generates SQL queries within the Redshift query editor.
    Data scientists and ML engineers can accelerate the ML development process by
    leveraging Q’s integration with Amazon SageMaker Studio.
  prefs: []
  type: TYPE_NORMAL
- en: AWS builders can utilize Q Developer’s integration with AWS Lambda to swiftly
    build event-driven logic. Q also supports the DevOps process through Amazon CodeCatalyst,
    assisting in many of its features such as pull requests and code changes.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer is also aware of the AWS resources in your account and can
    easily list specific aspects of your resources through its conversational capability.
    It can also help you understand the cost of AWS services used.
  prefs: []
  type: TYPE_NORMAL
- en: Q Developer not only automates many development tasks within AWS but also aids
    builders in troubleshooting lambda code and understanding networking-related issues.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, you can consult Q for best practices and solutions for use cases.
    It can also recommend optimal EC2 instances for specific use cases. The chat capability
    of Q allows you to ask questions and receive responses easily, simplifying integrations
    with AWS support.
  prefs: []
  type: TYPE_NORMAL
- en: We will dive deeper into Q’s assistance with AWS services in the *Build on AWS
    with support from Amazon Q Developer* section later in this chapter. A more detailed
    exploration of these capabilities is also provided in separate chapters in *Part
    4* of the book, where we explain real-world development use cases in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer provides many features, with some advanced options available
    in a Pro tier. In the following section, we will walk through both the free and
    Pro tiers and explain how you, as a user, can leverage each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer tiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon Q Developer offers two tiers: free tier and Pro tier. Let’s quickly
    look at how these two tiers work and what features are available in them.'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer free tier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The free tier of Amazon Q Developer provides monthly limits for anyone logged
    in as an AWS IAM user or AWS Builder ID user. The specific features available
    to you depend on your interface and authentication method.
  prefs: []
  type: TYPE_NORMAL
- en: The best thing about the free tier is that anyone can use Amazon Q Developer
    in one of the supported IDEs they use for software development, even if they don’t
    use AWS services or don’t have an AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if you are reading this book and don’t have an AWS account set up, you
    can quickly set up an AWS Builder ID using this link: [https://profile.aws.amazon.com](https://profile.aws.amazon.com).
    Your AWS Builder ID represents you as an individual and is separate from any credentials
    and data associated with your existing AWS accounts. All you need is your personal
    email ID to quickly set it up.'
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights my AWS Builder ID page once it is set up.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – AWS Builder ID creation](img/B21378_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – AWS Builder ID creation
  prefs: []
  type: TYPE_NORMAL
- en: Once your AWS Builder ID is created, you can log in to one of the supported
    IDEs. We will cover this part when we go through the IDE setup section later in
    the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer Pro tier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access Amazon Q Developer Pro, you must be an IAM Identity Center user, and
    your administrator must subscribe you to Amazon Q Developer Pro. As a subscriber,
    your usage limits are determined at an individual user level in the Amazon Q Console,
    Q in the IDE, and Q in Amazon CodeCatalyst.
  prefs: []
  type: TYPE_NORMAL
- en: If you are part of an organization, then access to the Pro tier will be set
    up by the admin team. However, if you are reading this book and want to try out
    some of the capabilities of Amazon Q Developer that are only available in the
    Pro tier, you can do so as an individual AWS user as well.
  prefs: []
  type: TYPE_NORMAL
- en: We will quickly guide you on one of the ways to access the Pro tier. Once you
    set up your AWS account, you will most likely assign yourself the admin role so
    that you can access all AWS services without provisioning additional privileges.
    However, if you are not the admin, make sure you have the admin role for the Amazon
    Q Developer service.
  prefs: []
  type: TYPE_NORMAL
- en: Once you log in to the AWS console, search for and open the Amazon Q service
    page. The following screenshot shows the Q Developer Pro bundle available for
    subscription.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Amazon Q Developer Pro bundle](img/B21378_02_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Amazon Q Developer Pro bundle
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you hit **Subscribe**, it will ask you to select a user or group
    from the IAM Identity Center to grant the pro subscription to. If you are a first-time
    user and your IAM Identity Center user is not set up, you will have to set it
    up before you can assign it, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Amazon Q Developer Pro – IAM Identity Center users and groups](img/B21378_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Amazon Q Developer Pro – IAM Identity Center users and groups
  prefs: []
  type: TYPE_NORMAL
- en: Setting up users in IAM Identity Center involves several tasks, and we have
    included a link to the setup instructions in the *References* section of this
    chapter. Once the user is ready, they will appear in the dropdown menu for you
    to search by name and assign in the previous step. During this setup process,
    IAM Identity Center will also configure Amazon Q in its application settings,
    where the identity source and authentication settings will be found.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have assigned the user in the subscription screen, the Pro tier subscription
    will be active, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Amazon Q Developer Pro – Active subscription for a user](img/B21378_02_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Amazon Q Developer Pro – Active subscription for a user
  prefs: []
  type: TYPE_NORMAL
- en: Once the subscription is active, go to the Amazon Q Developer service from the
    AWS console, and on its settings page, you will see a full list of features available
    for the user to use, along with the start URL. The start URL is what we will use
    when authenticating in the external IDE.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights the Amazon Q Developer Pro subscription
    details that are ready for the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Amazon Q Developer Pro – Settings screen](img/B21378_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Amazon Q Developer Pro – Settings screen
  prefs: []
  type: TYPE_NORMAL
- en: To determine the specific features included in the free versus Pro tiers of
    Q Developer, please refer to the pricing document, the link to which has been
    provided in the *References* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s move on to our next topic: setting up Amazon Q Developer inside
    your favorite IDEs.'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer setup for third-party IDEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An IDE is a software application that provides comprehensive facilities to programmers
    for software development. Typically, an IDE includes a source code editor, build
    automation tools, and a debugger. Its purpose is to streamline the coding and
    development process by integrating various aspects of software development into
    a single environment, making it more efficient and convenient for developers.
    Popular examples of IDEs include Visual Studio, Eclipse, and IntelliJ IDEA.
  prefs: []
  type: TYPE_NORMAL
- en: To enhance developer productivity, Amazon Q Developer seamlessly integrates
    with Visual Studio, Visual Studio Code, and JetBrains IDEs. Each of these IDEs
    has its own strengths, and developers often have a favorite go-to IDE or switch
    around depending on the features they require for a particular programming language.
    We aim to demonstrate how to enable Q in all three of them and leave the choice
    to our end users.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Visual Studio** **Code** (**VS Code**) is a standalone source code editor
    compatible with Windows, macOS, and Linux. It is ideal for Java and web developers
    and offers many extensions to support virtually any programming language.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you install VS Code, to start using Q, you need to install the Amazon Q
    extension. You can install it either by searching the Extensions section of VS
    Code or by installing it via the VS Code Marketplace. For further assistance in
    installing and setting up the Q extension for VS Code, refer to the link provided
    in the *References* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once the extension is installed, you need to authenticate yourself. If you are
    using the Amazon Q Pro tier as part of your organization, your AWS account administrator
    will setup and enable IAM Identity Center for you to authenticate. Basically,
    your administrator will add you as a user and provide you with a start URL for
    you to log in with IAM Identity Center so that you can leverage Q as part of the
    organizational policies enabled.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using VS Code and want to use Amazon Q as a free tier user, then
    you need to log in using your AWS Builder ID. Once installed and authenticated,
    you will see the following screenshot, where the extension for Amazon Q is installed
    for VS Code, and you can see it being authenticated using the Builder ID at the
    bottom of the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Enabled and authenticated extension for Amazon Q Developer in
    VS Code](img/B21378_02_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Enabled and authenticated extension for Amazon Q Developer in VS
    Code
  prefs: []
  type: TYPE_NORMAL
- en: Let’s quickly see how the authentication for the free and Pro tiers appears
    in VS Code. In the previous sections, we established an AWS Builder ID for the
    free tier and also set up an IAM Identity Center user who was provided with a
    subscription to the Pro tier.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the Amazon Q extension, when you first try to authenticate
    to Q from the VS Code editor, you will be presented with both choices, free and
    Pro tier, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Authentication options to Amazon Q Developer in VS Code](img/B21378_02_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Authentication options to Amazon Q Developer in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: When you proceed with the free tier, it will open a browser screen asking you
    to input your AWS Builder ID credentials. It will also ask you to confirm whether
    you approve giving the IDE access to your data through Amazon Q, as seen in the
    following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Approve Amazon Q access to VS Code](img/B21378_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Approve Amazon Q access to VS Code
  prefs: []
  type: TYPE_NORMAL
- en: You will see a notification in the VS Code IDE, as seen in the following screenshot,
    indicating that you have successfully authenticated using the AWS Builder ID and
    that the IDE is ready to leverage the free tier features of Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Authenticated in VS Code using AWS Builder ID](img/B21378_02_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Authenticated in VS Code using AWS Builder ID
  prefs: []
  type: TYPE_NORMAL
- en: If you want to authenticate to the Amazon Q Pro tier, you will be prompted to
    enter the start URL. This URL was obtained during the setup of the Pro tier in
    the earlier section. Simply copy the URL and paste it here, as seen in the following
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Authenticating to Amazon Q Pro tier in VS Code IDE](img/B21378_02_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Authenticating to Amazon Q Pro tier in VS Code IDE
  prefs: []
  type: TYPE_NORMAL
- en: After continuing, it will prompt you to authenticate again via the web browser
    using your IAM Identity credentials. Upon successful multi-factor authentication,
    VS Code will notify you, as shown in the following screenshot, that you are connected
    and ready to use the Amazon Q Pro tier.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Successfully authenticated to Amazon Q Pro tier in VS Code
    IDE](img/B21378_02_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Successfully authenticated to Amazon Q Pro tier in VS Code IDE
  prefs: []
  type: TYPE_NORMAL
- en: The setup for JetBrains IDE is identical so let’s quickly take a look at that.
    We will not repeat all the steps again since the process is similar.
  prefs: []
  type: TYPE_NORMAL
- en: JetBrains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JetBrains provides a series of IDEs, each with its own set of support for different
    programming languages. For example, Java developers use IntelliJ Idea IDE whereas
    Python developers use PyCharm IDE. Similarly, JetBrains provides many other IDEs
    for other programming languages. Since we will be using Python as our primary
    language to describe different functionalities of Amazon Q, let’s set it up for
    PyCharm IDE.
  prefs: []
  type: TYPE_NORMAL
- en: We need to get the Amazon Q plugin for JetBrains installed and authenticated
    as we did for VS Code earlier. You can either install the plugin from the Plugins
    section of the IDE or from the JetBrains marketplace. To further assist you in
    installing and setting up the plugin for JetBrains IDE, refer to the link provided
    in the *References* section at the end of this chapter, which also lists support
    for different JetBrains IDEs and their specific versions.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the plugin for Amazon Q installed inside PyCharm
    IDE. Keep in mind to disable other AI assistants to avoid conflicting results.
    If PyCharm is what you use for Python coding, you are all set to jump in to [*Chapter
    4*](B21378_04.xhtml#_idTextAnchor081) to start using Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Enabled plugin for Amazon Q Developer in PyCharm IDE](img/B21378_02_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Enabled plugin for Amazon Q Developer in PyCharm IDE
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at another popular IDE that Amazon Q supports, Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio 2022 is a popular IDE for Windows, catering to .NET and C++ developers.
    It excels in constructing web, cloud, desktop, mobile apps, services, and games.
  prefs: []
  type: TYPE_NORMAL
- en: For Amazon Q to work inside the Visual Studio IDE, you will need to install
    the AWS Toolkit for Visual Studio. From the Visual Studio Marketplace, first install
    the AWS Toolkit for Visual Studio, and then there are multiple ways to authenticate
    into the AWS account. For detailed instructions on setting up Amazon Q with Visual
    Studio, refer to the link provided in the *References* section at the end of the
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q supports C, C++, and C# as programming languages in Visual Studio.
    And support for the command line is also available so let’s look at the initial
    setup of Amazon Q Developer for use with the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer setup for command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the age of sophisticated IDEs, **command-line interfaces** (**CLIs**) are
    still very popular with developers for quick tests and builds. In *Part 2* of
    the book, we will look at how you can use Amazon Q Developer with command lines,
    but first, we need to ensure that Q is installed and set up for the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Things are constantly evolving, but currently, Amazon Q Developer for the command
    line is supported only with macOS. There are a handful of shells, terminal emulators,
    terminal IDEs, and over 500 CLIs supported. Always refer to the AWS documentation
    for newly supported environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are using macOS with the zsh shell terminal, we will guide you through
    the installation steps for it:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Amazon Q Developer for the command line. The link is in
    the *References* section at the bottom of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have Pro-tier access provided by your organization, you will need an
    IAM Identity Centre start URL provided by your organization’s administrators.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a free user, it will ask you to authenticate using your Builder ID
    or with IAM Identity Centre. AWS Builder ID is a personal profile that grants
    you access to Amazon Q Developer. Builder IDs are free, and you can sign up using
    your email address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the installation is successful, the **Automated checks** section in Amazon
    Q should display checkmarks, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Amazon Q installation for the command line](img/B21378_02_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Amazon Q installation for the command line
  prefs: []
  type: TYPE_NORMAL
- en: You can verify if all went well by using the `q doctor` command. The following
    screenshot confirms that Q Developer was installed correctly for the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Amazon Q Developer installation for the command line – success](img/B21378_02_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Amazon Q Developer installation for the command line – success
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at the initial setup of Amazon Q Developer with some of the
    supported AWS services and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer setup for AWS coding environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are an application builder, software developer, data engineer, or data
    scientist working with AWS services, you would frequently use builder-friendly
    tools such as Amazon SageMaker as a platform for building AI/ML projects, Amazon
    EMR as a platform for building big data processing projects, AWS Glue for building
    **extract, transform, and load** (**ETL**) pipelines, and AWS Lambda as a serverless
    compute service. All these services provide tools that help builders and developers
    write code.
  prefs: []
  type: TYPE_NORMAL
- en: To simplify the developer experience with these AWS services, Amazon Q provides
    code suggestion and code generation features inside the supported AWS tools. Let’s
    explore all such tools and how to set them up.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon SageMaker Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon SageMaker Studio is a comprehensive platform featuring specialized tools
    for every stage of **machine learning** (**ML**) development. From data preparation
    to model building, training, deployment, and management, it provides a seamless
    workflow. Upload data swiftly, construct models in your preferred IDE, enhance
    team collaboration, optimize coding with an AI-powered companion, fine-tune and
    debug models, deploy and manage them in production, and automate workflows—all
    effortlessly unified within a single web-based interface.
  prefs: []
  type: TYPE_NORMAL
- en: Before enabling Q Developer to make Python code recommendations in SageMaker
    Studio, we assume that you have your SageMaker Studio environment up and running,
    with all the prerequisites completed and the SageMaker Domain created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To proceed, in your SageMaker IAM execution role, just add the following IAM
    policy allowing Amazon Q to generate code recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note the legacy name CodeWhisperer still being referenced in the policy statement.
    It may change in the future, so always refer the official documentation for updates.
  prefs: []
  type: TYPE_NORMAL
- en: If you already have a SageMaker Domain, you can find the execution role for
    it in the domain setting as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Execution role for a SageMaker domain](img/B21378_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Execution role for a SageMaker domain
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In November 2023, SageMaker Studio was updated with a brand-new experience.
    The previous experience, now named Amazon SageMaker Studio Classic, is still available
    for use. If you are already using the Classic theme, you can still enable Amazon
    Q Developer for in-line prompt-based code generation.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the new experience, along with in-line prompts, you can also enable
    chat-style assistance from Amazon Q. The chat feature can only be enabled with
    the Pro tier of Amazon Q Developer, which requires the SageMaker domain to be
    integrated with IAM Identity Center.
  prefs: []
  type: TYPE_NORMAL
- en: To enable chat style feature of Amazon Q inside SageMaker Studio, you can enable
    Q in the **App Configurations** tab of the domain details as shown in the following
    screenshot. The Q Profile ARN can be found in the settings page of Amazon Q Developer
    as shown in *Figure 2**.6*.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.17 – \uFEFFEnabling Amazon Q chat in SageMaker Studio](img/B21378_02_17.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Enabling Amazon Q chat in SageMaker Studio
  prefs: []
  type: TYPE_NORMAL
- en: After this, you can open a new JupyterLab notebook and see at the bottom that
    Amazon Q is enabled, as seen in the following screenshot. Also, SageMaker supports
    in-line prompts as well as chat-based code generation which is also highlighted
    in the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.18 – Amazon Q \uFEFFin action in SageMaker Studio](img/B21378_02_18.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Amazon Q in action in SageMaker Studio
  prefs: []
  type: TYPE_NORMAL
- en: We will look into how to effectively use Amazon Q inside SageMaker Studio in
    [*Chapter 14*](B21378_14.xhtml#_idTextAnchor210). For now, we are just setting
    it up in all the supported tools inside AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EMR Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: EMR Studio is an IDE inside Amazon EMR service that simplifies the process for
    data scientists and engineers to create, visualize, and debug data engineering
    and data science applications using R, Python, Scala, and PySpark. Amazon Q Developer
    supports Python language making it easy to write Spark jobs.
  prefs: []
  type: TYPE_NORMAL
- en: To enable Amazon Q for EMR Studio, all you need to do is attach the same IAM
    policy that we used for SageMaker Studio to EMR. Once you launch the notebook
    via the workspace, Q will be enabled for use.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows Q enabled inside EMR Studio Notebook and is able
    to generate code based on comments. Note that the old name of CodeWhisperer is
    still being displayed. This may eventually change to Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Amazon Q enabled in Amazon EMR Studio](img/B21378_02_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Amazon Q enabled in Amazon EMR Studio
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many data scientists and data engineers use Jupyter Notebooks for their data
    science projects. JupyterLab, a customizable and feature-rich application for
    authoring notebooks, is a key component of Project Jupyter, a non-profit, open
    source project that aims to deliver tools and standards for interactive computing
    using computational notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q supports Python code recommendations in JupyterLab. The following commands
    in macOS install Q for JupyterLab 3 or 4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After installing you can authenticate using the AWS Builder ID, after which
    Q will start giving suggestions inside the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Glue Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Glue Studio provides a user-friendly graphical interface for effortless
    creation, execution, and monitoring of data integration jobs within AWS Glue.
    Amazon Q supports Python as well as Scala languages, which are popularly used
    for coding ETL pipelines using Glue Studio.
  prefs: []
  type: TYPE_NORMAL
- en: To enable Amazon Q inside Glue Studio, the same IAM policy that we used in the
    SageMaker Studio setup has to be attached to the Glue role. Once enabled, you
    can launch Glue Studio Notebook under the **ETL Jobs** and start leveraging the
    features of Q.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows Q enabled inside Glue Studio Notebook and is
    able to generate code based on prompts. Note that the old name of CodeWhisperer
    is still being displayed. This may eventually change to Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Amazon Q enabled in AWS Glue Studio](img/B21378_02_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Amazon Q enabled in AWS Glue Studio
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Lambda is a serverless and event-driven computing service that executes
    your code without the need to provision or manager servers. It provides a quick
    path to transform ideas into modern, production-ready, serverless applications.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q, as of now, supports the Python and Node.js languages in AWS Lambda.
    After you assign the same IAM policy for Q, you can activate it by choosing the
    Q code suggestions option from the **Tools** menu.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the option to enable Amazon Q inside a Lambda
    function. Note that the old name of CodeWhisperer is still being displayed. This
    may eventually change to Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF1 – Amazon Q enabled in AWS Lambda](img/B21378_02_021.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Amazon Q enabled in AWS Lambda
  prefs: []
  type: TYPE_NORMAL
- en: The lambda editor can now accept code suggestions. Refer to the *User actions*
    webpage from the *References* section at the end of the chapter to test different
    keyboard shortcuts for different editors including lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s switch gears and see how Amazon Q Developer can also assist AWS builders
    in building solutions faster.
  prefs: []
  type: TYPE_NORMAL
- en: Build on AWS with support from Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’re a builder in your IT department and use AWS services to solve business
    use cases, then Amazon Q can help boost your productivity and enhance your experiences
    with AWS services. Amazon Q can be accessed from the AWS Management Console, the
    AWS website, and even within the AWS documentation to help you reach your desired
    end goal faster.
  prefs: []
  type: TYPE_NORMAL
- en: Before we explore some of the capabilities of Amazon Q on AWS, let’s review
    the permissions you may need in your AWS account before you can start using it.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a user logs into the AWS console, they assume a role that has been granted
    certain permissions to use specific resources in the AWS services. For a user
    to utilize the features of Amazon Q, they must have permission to use Q features.
    To facilitate this, the role assumed by the user needs to have an IAM policy with
    Q permissions. The quickest and easiest way to get started is to attach the managed
    IAM policy to the role. `AmazonQFullAccess` is a managed IAM policy that provides
    full access to all features of Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: 'This managed IAM policy contains wildcard (`*`) characters in actions and resources,
    allowing all features of Q to be used by all AWS resources. The following code
    snippet illustrates this policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In your organization, the AWS account admin most probably won’t grant you full
    access. Typically, the wildcard character is replaced with actual actions and
    resources your role needs access to.
  prefs: []
  type: TYPE_NORMAL
- en: For example, to allow users to utilize the conversational feature of Q, in the
    `Action` section, the `*` will be replaced with `q:StartConversation` and `q:SendMessage`.
    And to use the AWS console troubleshoot feature, the `Action` will have `q:StartTroubleshootingAnalysis`,
    `q:GetTroubleshootingResults`, and `q:StartTroubleshootingResolutionExplanation`
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the permissions sorted out, let’s explore some areas where
    Amazon Q can assist on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Conversational Q&A capability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Q allows you to ask conversational-style questions right inside the AWS
    Management Console itself. AWS builders can ask a wide range of questions about
    architecture, services, best practices, and ask multiple follow-up questions too
    to get the desired guidance. Getting all the responses in the Q chat console cuts
    down the time needed for research and investigation, which in turn fast-tracks
    the application build process.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights Q’s ability to provide context-based answers.
    The Amazon Q icon is in the top right corner of the console. We will explore many
    more conversational-style uses of Amazon Q for AWS in *Part 4* of the book.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF2 – Working with Amazon Q inside the AWS console](img/B21378_02_022.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Working with Amazon Q inside the AWS console
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q also provides targeted assistance for AWS services such as Amazon Redshift
    and AWS Glue by using its conversational Q&A capability. While we will briefly
    cover them in this introductory chapter, a more detailed discussion will be provided
    in *Part 4* of the book, where we delve into chapters focused on the AWS build
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Chat to generate insights from Amazon Redshift
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Amazon Redshift is a fully managed data warehousing service in the cloud, offering
    fast query performance using robust SQL-based analytics tools. It efficiently
    manages petabyte-scale data warehouses, enabling users to analyze large datasets
    and derive valuable insights for decision-making. The Amazon Redshift Query Editor
    is a browser-based tool that allows users to run SQL queries directly against
    their Redshift data warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: The Amazon Q generative SQL feature within the Amazon Redshift Query Editor
    generates SQL recommendations based on natural language prompts. This enhances
    productivity by assisting users in extracting insights more efficiently from their
    data.
  prefs: []
  type: TYPE_NORMAL
- en: The provided screenshot exemplifies how Amazon Q comprehended the query posed
    in the chat and effectively joined the various tables necessary to complete the
    SQL query. You can incorporate the generated query into the notebook and validate
    its accuracy by testing the query for precise results.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF3 – An overview of working of Amazon Q inside Amazon Redshift\
    \ Query Editor](img/B21378_02_023.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – An overview of working of Amazon Q inside Amazon Redshift Query
    Editor
  prefs: []
  type: TYPE_NORMAL
- en: This feature would expedite report creation and enable non-technical users to
    derive insights from the data without having to wait for technical expertise to
    generate reports. We will delve into the details of this in [*Chapter 14*](B21378_14.xhtml#_idTextAnchor210).
    Now, let’s explore how Amazon Q can add value in AWS Glue notebooks, making it
    easier for data engineers to create ETL jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Chat to generate logic for AWS Glue ETL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous section, we discussed how Amazon Q can assist with auto-coding
    inside the Glue Studio notebook. However, sometimes you need to chat with the
    assistant to generate the boilerplate logic in its entirety. Using the Amazon
    Q chat capability simplifies job authoring, troubleshooting, and provides immediate
    responses to inquiries regarding AWS Glue and data integration tasks, significantly
    reducing time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot demonstrates how, simply by providing Q with the use
    case, it was able to generate the Glue code, which you can then copy into the
    Glue Studio notebook for testing. This significantly saves time for data engineers
    who prefer to create custom scripts for their ETL jobs.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF4 – Working with Amazon Q chat to generate Glue code](img/B21378_02_024.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – Working with Amazon Q chat to generate Glue code
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 14*](B21378_14.xhtml#_idTextAnchor210), we will introduce a use
    case and provide a solution to illustrate how Q can expedite ETL job creation
    in AWS Glue.
  prefs: []
  type: TYPE_NORMAL
- en: Chat about AWS resources and costs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Amazon Q can now also understand Q&A within the context of the resources created
    in your account. You can ask questions such as “Show all my EC2 instances running
    in the us-west-1 region,” and it will list them all for you. Amazon Q can also
    provide you with a cost breakdown of resources being used in the AWS account.
    You can ask questions such as “How much did we spend on Amazon Redshift in 2023
    in the us-east-1 region?” and it will provide you with the cost structure.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s explore some other important features of Amazon Q with various
    AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshoot AWS console errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS builders spend a significant amount of time troubleshooting issues during
    their development process. Amazon Q makes it easy to identify and solve errors
    directly from the AWS console. Instead of manually checking logs and researching
    solutions to errors, Q proposes possible solutions with just a click of a button.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, we have a simple AWS Lambda function that prints
    a message. But the sample code has a bug.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF5 – Example of an AWS Lambda function with a bug in the code](img/B21378_02_025.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – Example of an AWS Lambda function with a bug in the code
  prefs: []
  type: TYPE_NORMAL
- en: Everything looks great, but we mistakenly ended the string inside the `print`
    statement with a double quote instead of a single quote. The error becomes apparent
    when we run the test, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF6 – Amazon Q troubleshoot feature with AWS Lambda – Error](img/B21378_02_026.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Amazon Q troubleshoot feature with AWS Lambda – Error
  prefs: []
  type: TYPE_NORMAL
- en: Instead of manually combing through log files or researching the error on the
    internet, you can simply click the **Troubleshoot with Amazon Q** button on the
    test screen itself. Q will provide an analysis of the issue, and you can also
    ask it to provide a resolution. The following screenshot shows the analysis and
    resolution of the missing single quote.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF7 – Amazon Q troubleshooting feature with AWS Lambda – Error\
    \ resolution](img/B21378_02_027.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – Amazon Q troubleshooting feature with AWS Lambda – Error resolution
  prefs: []
  type: TYPE_NORMAL
- en: In *Part 4* of the book, we will look into details other on how to troubleshoot
    other complicated issues while building solutions using AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshoot networking issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every application builder and developer knows how nightmarish it can be to deal
    with networking issues. To alleviate this frustration, Amazon Q can also help
    troubleshoot networking issues. Amazon Q works in tandem with Amazon VPC’s Reachability
    Analyzer to check networking connections and identify potential configuration
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the following screenshot, you can see that by simply asking
    a connectivity question to Q, it was able to suggest possible network issues.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.2\uFEFF8 – Amazon Q networking troubleshoot](img/B21378_02_028.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.28 – Amazon Q networking troubleshoot
  prefs: []
  type: TYPE_NORMAL
- en: After Q identifies that the issue arises due to a network connectivity problem,
    it then utilizes Amazon VPC’s Reachability Analyzer to analyze the full networking
    path, pinpointing where the issue might be occurring along the route. The following
    screenshot shows the path analysis from source to destination and suggests potential
    locations for the issue.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.\uFEFF29 – Amazon Q networking troubleshoot – Path analysis](img/B21378_02_029.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.29 – Amazon Q networking troubleshoot – Path analysis
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to see some more capabilities of Amazon Q on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Optimal selection of Amazon EC2 instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS builders are well familiar with Amazon **Elastic Compute Cloud** (**EC2**)
    instances as many of them use servers to deploy and run their applications. However,
    with so many different types of EC2 instances, it is difficult to know which type
    of instance would be best suitable for a particular workload. Of course, you can
    research it and choose the best one, but Amazon Q makes it easy to select the
    best EC2 for the job, right from the EC2 console itself.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the EC2 console, where you get to choose an instance type, Amazon Q comes
    in handy when you click the **Get advice** link as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.3\uFEFF0 – Amazon Q – EC2 instance type advise](img/B21378_02_030.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.30 – Amazon Q – EC2 instance type advise
  prefs: []
  type: TYPE_NORMAL
- en: You can then choose your use case, workload type, priority, and CPU types, which
    make up the input to Amazon Q as it advises the best possible EC2 instances to
    use. The following screenshot shows the criteria selection section once you seek
    advice from Q.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.3\uFEFF1 – Amazon Q – EC2 instance type selection criteria](img/B21378_02_031.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.31 – Amazon Q – EC2 instance type selection criteria
  prefs: []
  type: TYPE_NORMAL
- en: Once you hit the **Get instance type advice** button, Q works its magic. The
    following screenshot shows the instances to use for the input criteria we provided,
    and it also explains what each of these EC2 instances brings to the table. It
    lists the sources from where the information is taken so that anyone can look
    at the original source of truth.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.3\uFEFF2 – Amazon Q – EC2 instance selection advise](img/B21378_02_032.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.32 – Amazon Q – EC2 instance selection advise
  prefs: []
  type: TYPE_NORMAL
- en: Before we wind down this introductory chapter about Amazon Q, let’s quickly
    look at another key aspect around feature development.
  prefs: []
  type: TYPE_NORMAL
- en: Assist with AWS Support cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use Amazon Q Developer to create a support case and contact AWS Support
    from anywhere in the AWS Management Console, including the AWS Support Center
    Console. Amazon Q leverages the context of your conversation to automatically
    draft a support case on your behalf, incorporating your recent conversation into
    the support case description. Once the case is created, Amazon Q can connect you
    to a support agent through your preferred method, including live chat within the
    same interface.
  prefs: []
  type: TYPE_NORMAL
- en: Assist during DevOps process in Amazon CodeCatalyst
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon CodeCatalyst is a service that offers development teams a unified software
    development service to rapidly construct, deploy, and expand applications on AWS,
    all while maintaining organization-specific best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q’s feature development capability in Amazon CodeCatalyst acts as a generative
    AI assistant to which you can assign issues. Once an issue is assigned, Amazon
    Q analyzes its title and description, reviews the code in the specified repository,
    and, if possible, drafts a solution. This draft solution is then presented to
    users for evaluation in a pull request.
  prefs: []
  type: TYPE_NORMAL
- en: We have a whole chapter on this topic in *Part 4* of the book, so we will keep
    this introduction short here.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered what Amazon Q Developer is and how it can assist
    developers and application builders in their day-to-day tasks. We also briefly
    explored some of its features, along with considerations for setting it up.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we walked through the setup of Amazon Q for command-line interfaces, external
    IDEs such as VS Code and JetBrains IDEs, as well as AWS services, IDEs, and notebooks
    such as Amazon SageMaker Studio, Amazon EMR Studio, AWS Glue Studio, and AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: We examined its benefits for AWS builders, highlighting how Amazon Q can be
    leveraged from the AWS console itself to assist with various activities. On a
    high level, we covered how Amazon Q can help with conversational Q&A style chat,
    console issues, network troubleshooting, EC2 instance selection, and also during
    the DevOps process in Amazon CodeCatalyst.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapters in *Part 2* of the book, we will delve into detail
    about auto code generation techniques and how Amazon Q Developer can assist developers
    in this process.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon Q home page: [https://aws.amazon.com/q/](https://aws.amazon.com/q/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Q Developer pricing: [https://aws.amazon.com/q/developer/pricing/](https://aws.amazon.com/q/developer/pricing/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Setting up Amazon Q Developer: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/getting-started-q-dev.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/getting-started-q-dev.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Q Developer install for macOS command line: [https://desktop-release.codewhisperer.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg](https://desktop-release.codewhisperer.us-east-1.amazonaws.com/latest/Amazon%20Q.dmg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install Amazon Q Developer extension/plugin for your IDEs: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User actions for Amazon Q Developer in different IDEs: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/actions-and-shortcuts.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/actions-and-shortcuts.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS IAM Identity Center: [https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html](https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Q Developer tiers: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/getting-started-q-dev.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/getting-started-q-dev.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 2:Generate Code Recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will look at many of the key features of Amazon Q Developer
    that can assist developers during the software development life cycle. These features
    can be used within many of the supported IDEs and assist with various programming
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21378_03.xhtml#_idTextAnchor060), *Understanding Auto-Code Generation
    Techniques*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21378_04.xhtml#_idTextAnchor081), *Boost Coding Efficiency for
    Python and Java with Auto-Code Generation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21378_05.xhtml#_idTextAnchor094), *Boost Coding Efficiency for
    C and C++ with Auto-Code Generation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21378_06.xhtml#_idTextAnchor107), *Boost Coding Efficiency for
    JavaScript and PHP with Auto-Code Generation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21378_07.xhtml#_idTextAnchor119), *Boost Coding Efficiency for
    SQL with Auto-Code Generation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B21378_08.xhtml#_idTextAnchor131), *Boost Coding Efficiency for
    Command**-**Line and Shell Script with Auto-Code Generation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B21378_09.xhtml#_idTextAnchor145), *Boost Coding Efficiency for
    JSON, YAML, and HCL with Auto-Code Generation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
