["```py\n#pragma once\nUENUM(BlueprintType)\nenum class EBatteryStatus : uint8\n{\n    EBS_Empty = 0 UMETA(DisplayName = \"Empty\"),\n    EBS_Low = 1 UMETA(DisplayName = \"Low\"),\n    EBS_Medium = 2 UMETA(DisplayName = \"Medium\"),\n    EBS_Full = 3 UMETA(DisplayName = \"Full\")\n};\n```", "```py\n#include \"BatteryStatus.h\"\n```", "```py\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Dummy Character\")\nfloat MaxBatteryLevel = 100.f;\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Dummy Character\")\nfloat BatteryCostPerTick = 5.f;\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Dummy Character\")\nfloat BatteryRechargePerTick = 1.f;\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Dummy Character\")\nfloat RunSpeed = 650.f;\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Dummy Character\")\nfloat WalkSpeed = 500.f;\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Dummy Character\")\nfloat MovementRandomDeviation = 5.f;\n```", "```py\nUPROPERTY()\nfloat BatteryLevel;\n```", "```py\nDECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnBatteryStatusChanged, EBatteryStatus, NewBatteryStatus);\nUPROPERTY(BlueprintAssignable, Category = \"Dummy Character\")\nFOnBatteryStatusChanged OnBatteryStatusChanged;\n```", "```py\nvirtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;\n```", "```py\nUFUNCTION(BlueprintCallable, Category=\"Dummy Character\")\nvoid SetWalkSpeed();\nUFUNCTION(BlueprintCallable, Category=\"Dummy Character\")\nvoid SetRunSpeed();\nUFUNCTION(BlueprintCallable, BlueprintGetter, Category=\"Dummy Character\")\nEBatteryStatus GetBatteryStatus() const;\n```", "```py\n#include \"Components/CapsuleComponent.h\"\n#include \"Components/SkeletalMeshComponent.h\"\n#include \"GameFramework/CharacterMovementComponent.h\"\n#include \"BatteryStatus.h\"\n```", "```py\nPrimaryActorTick.TickInterval = .25f;\n```", "```py\nbUseControllerRotationPitch = false;\nbUseControllerRotationYaw = false;\nbUseControllerRotationRoll = false;\n```", "```py\nGetMesh()->SetRelativeLocation(FVector(0.f, 0.f, -120.f));\nGetMesh()->SetRelativeRotation(FRotator(0.f, -90.f, 0.f));\nstatic ConstructorHelpers::FObjectFinder<USkeletalMesh>\nSkeletalMeshAsset(TEXT(\"/Game/KayKit/PrototypeBits/Character/Dummy.Dummy\"));\nif (SkeletalMeshAsset.Succeeded())\n{\n    GetMesh()->SetSkeletalMesh(SkeletalMeshAsset.Object);\n}\nGetMesh()->SetAnimationMode(EAnimationMode::AnimationBlueprint);\nstatic ConstructorHelpers::FObjectFinder<UAnimBlueprint>\nAnimBlueprintAsset(TEXT(\"/Game/KayKit/PrototypeBits/Character/ABP_Dummy.ABP_Dummy\"));\nif (AnimBlueprintAsset.Succeeded())\n{\n    GetMesh()->SetAnimClass(AnimBlueprintAsset.Object->GeneratedClass);\n}\n```", "```py\nGetCapsuleComponent()->InitCapsuleSize(50.f, 120.0f);\n```", "```py\nGetCharacterMovement()->bOrientRotationToMovement = true;\nGetCharacterMovement()->MaxWalkSpeed = 500.f;\nGetCharacterMovement()->RotationRate = FRotator(0.f, 640.f, 0.f);\nGetCharacterMovement()->bConstrainToPlane = true;\nGetCharacterMovement()->bSnapToPlaneAtStart = true;\nGetCharacterMovement()->AvoidanceConsiderationRadius = 2000.f;\nGetCharacterMovement()->bUseRVOAvoidance = true;\n```", "```py\nBatteryLevel = MaxBatteryLevel * FMath::RandRange(0.f, 1.f);\nOnBatteryStatusChanged.Broadcast(GetBatteryStatus());\n```", "```py\nvoid ABaseDummyCharacter::SetWalkSpeed()\n{\n    const auto Deviation = FMath::RandRange(-1.f * MovementRandomDeviation, MovementRandomDeviation);\n   GetCharacterMovement()->MaxWalkSpeed = WalkSpeed + Deviation;\n}\nvoid ABaseDummyCharacter::SetRunSpeed()\n{\n    const auto Deviation = FMath::RandRange(-1.f * MovementRandomDeviation, MovementRandomDeviation);\n    GetCharacterMovement()->MaxWalkSpeed = RunSpeed + MovementRandomDeviation;\n}\n```", "```py\nEBatteryStatus ABaseDummyCharacter::GetBatteryStatus() const\n{\n    const auto Value = BatteryLevel / MaxBatteryLevel;\n    if (Value < 0.05f)\n    {\n       return EBatteryStatus::EBS_Empty;\n    }\n    if (Value < 0.35f)\n    {\n       return EBatteryStatus::EBS_Low;\n    }\n    if (Value < 0.95f)\n    {\n       return EBatteryStatus::EBS_Medium;\n    }\n    return EBatteryStatus::EBS_Full;\n}\n```", "```py\nconst auto CurrentStatus = GetBatteryStatus();\nif(GetMovementComponent()->Velocity.Size() > .1f)\n{\n    BatteryLevel -= BatteryCostPerTick;\n}\nelse\n{\n    BatteryLevel += BatteryRechargePerTick;\n}\nBatteryLevel = FMath::Clamp<float>(BatteryLevel, 0.f, MaxBatteryLevel);\nif (const auto NewStatus = GetBatteryStatus();\n  CurrentStatus != NewStatus)0\n  {\n    OnBatteryStatusChanged.Broadcast(NewStatus);\n  }\n```", "```py\nclass UBehaviorTree;\n```", "```py\nUPROPERTY(EditAnywhere, BlueprintReadOnly,\n  Category = \"Dummy AI Controller\")\nTObjectPtr<UBehaviorTree> BehaviorTree;\n```", "```py\nvirtual void OnPossess(APawn* InPawn) override;\n```", "```py\nvoid ABaseDummyAIController::OnPossess(APawn* InPawn)\n{\n    Super::OnPossess(InPawn);\n    if (ensureMsgf(BehaviorTree, TEXT(\"Behavior Tree is nullptr! Please assign BehaviorTree in your AI Controller.\")))\n    {\n       RunBehaviorTree(BehaviorTree);\n    }\n}\n```", "```py\npublic:\nUPROPERTY(EditAnywhere, Category=\"Blackboard\")\nFBlackboardKeySelector BlackboardKey;\nUPROPERTY(EditAnywhere, Category=\"Dummy Task\")\nFName TargetTag;\nvirtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent&   OwnerComp, uint8* NodeMemory) override;\n```", "```py\n#include \"BehaviorTree/BlackboardComponent.h\"\n#include \"Kismet/GameplayStatics.h\"\n```", "```py\nEBTNodeResult::Type UBTTask_FindRandomLocation::ExecuteTask(UBehaviorTreeComponent& OwnerComp,   uint8* NodeMemory)\n{\n    const auto BlackboardComp = OwnerComp.GetBlackboardComponent();\n    if (BlackboardComp == nullptr) { return EBTNodeResult::Failed; }\n    TArray<AActor*> TargetList;\n    UGameplayStatics::GetAllActorsWithTag(GetWorld(), TargetTag,       TargetList);\n    if(TargetList.Num() == 0) { return EBTNodeResult::Failed; }\n    const auto RandomTarget = TargetList[FMath::RandRange       (0, TargetList.Num() - 1)];\n    BlackboardComp->SetValueAsVector(BlackboardKey.SelectedKeyName,       RandomTarget->GetActorLocation());\n    return EBTNodeResult::Succeeded;\n}\n```", "```py\nprotected:\n  virtual void TickNode(UBehaviorTreeComponent& OwnerComp, uint8*     NodeMemory, float DeltaSeconds) override;\n```", "```py\n#include \"BaseDummyAIController.h\"\n#include \"BaseDummyCharacter.h\"\n```", "```py\nvoid UBTService_SpeedControl::TickNode(UBehaviorTreeComponent&   OwnerComp, uint8* NodeMemory, float DeltaSeconds)\n{\n    Super::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n    const auto AIController = Cast<ABaseDummyAIController>(OwnerComp.      GetAIOwner());\n    if (!AIController) return;\n    const auto ControlledCharacter = Cast<ABaseDummyCharacter>      (AIController->GetPawn());\n    if (!ControlledCharacter) return;\n    switch (ControlledCharacter->GetBatteryStatus())\n    {\n      case EBatteryStatus::EBS_Empty:\n          break;\n      case EBatteryStatus::EBS_Low:\n          ControlledCharacter->SetWalkSpeed();\n          break;\n      case EBatteryStatus::EBS_Medium:\n      case EBatteryStatus::EBS_Full:\n          ControlledCharacter->SetRunSpeed();\n          break;\n    }\n}\n```", "```py\nclass ABaseDummyCharacter;\nenum class EBatteryStatus : uint8;\n```", "```py\npublic:\nUBTService_BatteryCheck();\n```", "```py\nprotected:\nUPROPERTY()\nUBlackboardComponent* BlackboardComponent = nullptr;\nUPROPERTY()\nABaseDummyCharacter* ControlledCharacter = nullptr;\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category=\"Blackboard\")\nFBlackboardKeySelector IsLowOnBatteryKey;\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category=\"Blackboard\")\nFBlackboardKeySelector IsBatteryDepletedKey;\n```", "```py\nvirtual void OnBecomeRelevant(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) override;\nvirtual void OnCeaseRelevant(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) override;\nUFUNCTION()\nvoid OnBatteryStatusChange(EBatteryStatus NewBatteryStatus);\n```", "```py\n#include \"BaseDummyAIController.h\"\n#include \"BaseDummyCharacter.h\"\n#include \"BatteryStatus.h\"\n#include \"BehaviorTree/BlackboardComponent.h\"\n```", "```py\nUBTService_BatteryCheck::UBTService_BatteryCheck()\n{\n    bCreateNodeInstance = true;\n    bNotifyBecomeRelevant = true;\n    bNotifyCeaseRelevant = true;\n    bNotifyTick = false;\n}\n```", "```py\nvoid UBTService_BatteryCheck::OnBatteryStatusChange(const EBatteryStatus NewBatteryStatus)\n{\n    switch (NewBatteryStatus)\n    {\n    case EBatteryStatus::EBS_Empty:\n       BlackboardComponent->SetValueAsBool(IsBatteryDepletedKey.         SelectedKeyName, true);\n       break;\n    case EBatteryStatus::EBS_Low:\n       BlackboardComponent->SetValueAsBool(IsLowOnBatteryKey.         SelectedKeyName, true);\n       BlackboardComponent->SetValueAsBool(IsBatteryDepletedKey.         SelectedKeyName, false);\n       break;\n    case EBatteryStatus::EBS_Medium:\n       break;\n    case EBatteryStatus::EBS_Full:\n       BlackboardComponent->SetValueAsBool(IsLowOnBatteryKey.         SelectedKeyName, false);\n       break;\n    }\n}\n```", "```py\nvoid UBTService_BatteryCheck::OnBecomeRelevant(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)\n{\n    Super::OnBecomeRelevant(OwnerComp, NodeMemory);\n    BlackboardComponent = OwnerComp.GetBlackboardComponent();\n   const ABaseDummyAIController* AIController =      Cast<ABaseDummyAIController>(OwnerComp.GetAIOwner());\n    if (!AIController) return;\n    APawn* ControlledPawn = AIController->GetPawn();\n    if (!ControlledPawn) return;\n    ControlledCharacter = Cast<ABaseDummyCharacter>(ControlledPawn);\n    if (!ControlledCharacter) return;\n    ControlledCharacter->OnBatteryStatusChanged.AddDynamic       (this, &UBTService_BatteryCheck::OnBatteryStatusChange);\n}\nvoid UBTService_BatteryCheck::OnCeaseRelevant(UBehaviorTreeComponent&   OwnerComp, uint8* NodeMemory)\n{\n    Super::OnCeaseRelevant(OwnerComp, NodeMemory);\n    ControlledCharacter->OnBatteryStatusChanged.RemoveDynamic       (this, &UBTService_BatteryCheck::OnBatteryStatusChange);\n}\n```", "```py\nUCLASS(BlueprintType, Blueprintable, ClassGroup=\"Unreal Agility Arena\", meta=(BlueprintSpawnableComponent))\n```", "```py\npublic:\nUBatteryIndicatorComponent();\nprotected:\nUPROPERTY()\nUMaterialInstanceDynamic* DynamicMaterialInstance;\nvirtual void BeginPlay() override;\nUFUNCTION()\nvoid OnBatteryStatusChange(EBatteryStatus NewBatteryStatus);\n```", "```py\n#include \"BaseDummyCharacter.h\"\n```", "```py\nUBatteryIndicatorComponent::UBatteryIndicatorComponent()\n{\n    static ConstructorHelpers::FObjectFinder<UStaticMesh>       StaticMeshAsset(\n       TEXT(\"/Game/_GENERATED/MarcoSecchi/SM_HeadLight.SM_         Headlight\"));\n    if (StaticMeshAsset.Succeeded())\n    {\n       UStaticMeshComponent::SetStaticMesh(StaticMeshAsset.Object);\n    }\n}\n```", "```py\nvoid UBatteryIndicatorComponent::BeginPlay()\n{\n    Super::BeginPlay();\n    ABaseDummyCharacter* Owner =       Cast<ABaseDummyCharacter>(GetOwner());\n    if(Owner == nullptr) return;\n    AttachToComponent(Owner->GetMesh(),       FAttachmentTransformRules::SnapToTargetIncludingScale, \"helmet\");\n    DynamicMaterialInstance = this->CreateDynamicMaterialInstance       (1, GetMaterial(1));\n   Owner->OnBatteryStatusChanged.AddDynamic      (this, &UBatteryIndicatorComponent::OnBatteryStatusChange);\n}\n```", "```py\nvoid UBatteryIndicatorComponent::OnBatteryStatusChange(EBatteryStatus NewBatteryStatus)\n{\n    const auto BatteryValue = StaticCast<float>(NewBatteryStatus);\n    const auto Intensity = (BatteryValue - 1.f) * 25.f;\n    DynamicMaterialInstance->SetScalarParameterValue(FName       (\"Intensity\"), Intensity);\n}\n```"]