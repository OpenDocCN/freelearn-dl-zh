["```py\n        mode_config = {\n            \"avoid_behavior\": \"avoid_behavior.py\",\n            \"circle_head\": \"circle_pan_tilt_behavior.py\",\n            \"test_rainbow\": \"test_rainbow.py\",\n            \"test_leds\": \"leds_test.py\",\n            \"line_following\": \"line_follow_behavior.py\",\n            \"behavior_line\": \"straight_line_drive.py\",\n            \"drive_north\": \"drive_north.py\"\n        }\n    ```", "```py\n        menu_config = [\n            {\"mode_name\": \"avoid_behavior\", \"text\": \"Avoid Behavior\"},\n            {\"mode_name\": \"circle_head\", \"text\": \"Circle Head\"},\n            {\"mode_name\": \"test_leds\", \"text\": \"Test LEDs\"},\n            {\"mode_name\": \"test_rainbow\", \"text\": \"LED Rainbow\"},\n            {\"mode_name\": \"line_following\", \"text\": \"Line Following\"},\n            {\"mode_name\": \"behavior_line\", \"text\": \"Drive In A Line\"},\n            {\"mode_name\": \"drive_north\", \"text\": \"Drive North\"}\n        ]\n    ```", "```py\n        def run(self, mode_name):\n            while self.is_running():\n                self.stop()\n            script = self.mode_config[mode_name]\n            self.current_process = subprocess.Popen([\"python3\", script])\n    ```", "```py\n    curl -X POST http//myrobot.local:5000/run/test_leds\n    ```", "```py\n    curl -X POST http//myrobot.local:5000/run/circle_head\n    ```", "```py\n    curl -X POST http//myrobot.local:5000/stop\n    ```", "```py\n    from flask import Flask, render_template\n    from robot_modes import RobotModes\n    ```", "```py\n    @app.after_request\n    def add_header(response):\n        response.headers['Cache-Control'] = \"no-cache, no-store, must-revalidate\"\n        return response\n    ```", "```py\n    @app.route(\"/\")\n    def index():\n        return render_template('menu.html', menu=mode_manager.menu_config)\n    ```", "```py\n    <html>\n    <head>\n        <script src=\"img/jquery-3.5.1.min.js\"></script>\n        <title>My Robot Menu</title>\n    </head>\n    ```", "```py\n    <body>\n      <h1>My Robot Menu</h1>\n    ```", "```py\n        <p id=\"message\"></p>\n    ```", "```py\n    run action in some code.\n    ```", "```py\n        <li><a href=\"#\" onclick=\"run('/stop')\">Stop</a></li>\n      </ul>\n    ```", "```py\n    run function calls the .post method with the => operator is JavaScript shorthand for defining a small function—in this case, one that has the response parameter. An important idea in JavaScript is that a function can be a bit of data. In JavaScript, passing a function in as a parameter to another function is a common way to do things. Because we often use this, functions used that way are not even given names; they are anonymous functions or lambdas.\n    ```", "```py\n    </body>\n    </html>\n    ```", "```py\npi@myrobot:~ $ python3 control_server.py \n * Serving Flask app \"control_server\" (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 270-549-285\n```", "```py\n192.168.1.149 - - [17/Oct/2020 22:42:57] \"POST /run/test_leds HTTP/1.1\" 200 -\nred\nblue\nred\nblue\nred\nTraceback (most recent call last):\n  File \"leds_test.py\", line 16, in <module>\n    sleep(0.5)\nKeyboardInterrupt\n192.168.1.149 - - [17/Oct/2020 22:43:41] \"POST /stop HTTP/1.1\" 200 -\n```", "```py\n    @app.after_request\n    def add_header(response):\n        response.headers['Cache-Control'] = \"no-cache, no-store, must-revalidate\"\n        return response\n    ```", "```py\n    import time\n    from robot import Robot\n    from image_app_core import start_server_process, get_control_instruction, put_output_image\n    import camera_stream\n    ```", "```py\n    TIMEOUT_IN_SECONDS = 1\n    ```", "```py\n    class ManualDriveBehavior(object):\n        def __init__(self, robot):\n            self.robot = robot\n            self.last_time = time.time()\n    ```", "```py\n    self.handle_instruction.\n    ```", "```py\n    int to convert it into an integer number for our motors. \n    ```", "```py\n            elif command == \"exit\":\n                print(\"stopping\")\n                exit()\n    ```", "```py\n            else:\n                raise ValueError(f\"Unknown instruction: {instruction}\")\n    ```", "```py\n        def make_display(self, frame):\n            encoded_bytes = camera_stream.get_encoded_bytes_for_frame(frame)\n            put_output_image(encoded_bytes)\n    ```", "```py\n        def run(self):\n            self.robot.set_pan(0)\n            self.robot.set_tilt(0)\n            camera = camera_stream.setup_camera()\n            time.sleep(0.1)\n            self.robot.servos.stop_all()\n            print(\"Setup Complete\")\n    ```", "```py\n            for frame in camera_stream.start_stream(camera):\n                self.make_display(frame)\n                self.process_control()\n    ```", "```py\n                if time.time() > self.last_time + TIMEOUT_IN_SECONDS:\n                    self.robot.stop_motors()\n    ```", "```py\n    print(\"Setting up\")\n    behavior = ManualDriveBehavior(Robot())\n    process = start_server_process('manual_drive.html')\n    ```", "```py\n    try:\n        behavior.run()\n    except:\n        process.terminate()\n    ```", "```py\n    <html>\n        <head>\n    ```", "```py\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    ```", "```py\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/display.css?\">\n    ```", "```py\n            <script src=\"img/jquery-3.5.1.min.js\"></script>\n            <script src=\"img/touch-slider.js?\"></script>\n    ```", "```py\n            <style>html, body {margin: 0; height: 100%; overflow: hidden}</style>\n    ```", "```py\n            <title>Manually Drive The Robot</title>\n        </head>\n    ```", "```py\n    slider_track class lets us style both tracks—we use HTML classes to identify multiple objects. The left_slider ID will help us position and add touch events to it. IDs in HTML are usually used to reference one object uniquely.The `viewBox` attribute defines the dimensions of the drawing internal to `svg` as lower *x*, lower *y*, width, and height. View box coordinates make sense even if we scale the `svg` element for a different device. The height range is -100/100, equivalent to the motor speeds, and the width range is -10 to +10.\n    ```", "```py\n                <circle r=\"18\" class=\"slider_tick\"/>\n    ```", "```py\n    button class with fonts and colors, and we can use the style for other buttons (for example, to enhance the menu app). We'll use the exitbutton ID to position this in the place we designed before.\n    ```", "```py\n            <div id=\"video\"><img src=\"img/{{ url_for('display') }}\" /></div>\n    ```", "```py\n            <svg id=\"right_slider\" class=\"slider_track\" viewBox=\"-10 -100 20 200\">\n                <circle r=\"18\" class=\"slider_tick\"/>\n            </svg>\n    ```", "```py\n            <script type=\"text/javascript\">\n    ```", "```py\n                function set_motor(name, speed) {\n                    $.post('/control', {'command': 'set_' + name, 'speed': speed});\n                }\n    ```", "```py\n                $(() => {\n    ```", "```py\n                    $('#exitbutton').click(function() {\n                        $.post('/control', {'command': 'exit'});\n                        window.location.replace('//' + window.location.hostname + \":5000\");\n                    });\n    ```", "```py\n    makeSlider, which uses id for the ID of the object we are turning into a slider (a svg track), and a function to call when the slider has changed.\n    ```", "```py\n            </script>\n        </body>\n    </html>\n    ```", "```py\n    .slider_track {\n        width: 10vw;\n        height: 90vh;\n    ```", "```py\n        border: 1px solid blue;\n        background-color: lightblue;\n    }\n    ```", "```py\n    .slider_tick {\n        fill: mistyrose;\n    }\n    ```", "```py\n    #left_slider {\n        position: absolute;\n        left: 5vw;\n        top: 5vh;\n    }\n    #right_slider {\n        position: absolute;\n        right: 5vw;\n        top: 5vh;\n    }\n    ```", "```py\n    .button {\n        display: block;\n        height: 10vh;\n    ```", "```py\n        text-align: center;\n        font-size: 2em;\n        line-height: 10vh;\n    ```", "```py\n        text-decoration: none;\n        background-color: blue;\n        color: white;\n    }\n    ```", "```py\n    #exitbutton {\n        width: 40vh;\n        margin-top: 5vh;\n        margin-left: auto;\n        margin-right: auto;\n    }\n    ```", "```py\n    .video {\n      text-align: center;\n    }\n    ```", "```py\n    #video img {\n        margin-top: 20vh;\n        width: 80vmin;\n        height: auto;\n    }\n    ```", "```py\n    function makeSlider(id, when_changed) {\n    ```", "```py\n        let touched = false;\n        let changed = false;\n        let position = 0;\n        const slider = $('#' + id);\n    ```", "```py\n        const set_position = function(new_position) {\n            position = Math.round(new_position);\n            slider.find('.slider_tick')[0].setAttribute('cy', position);\n            changed = true;\n        };\n    ```", "```py\n    touch variable from the event data. We get a list of touches, but we are only using the first one.\n    ```", "```py\n            let from_top = touch.pageY - slider.offset().top;\n    ```", "```py\n            let relative_touch = (from_top / slider.height()) * 200;\n            set_position(relative_touch - 100);\n    ```", "```py\n            touched = true;\n            event.preventDefault();\n        });\n    ```", "```py\n        slider.on('touchend', event => touched = false);\n    ```", "```py\n        const update = function() {\n            if(!touched && Math.abs(position) > 0) {\n    ```", "```py\n                let error = 0 - position;\n                let change = (0.3 * error) + (Math.sign(error) * 0.5);\n                set_position(position + change);\n                // console.log(id + \": \" + position);\n            }\n        };\n    ```", "```py\n        setInterval(update, 50);\n    ```", "```py\n    makeSlider function. \n    ```", "```py\n    192.168.1.107. Your address will be different; note that down, and put that in the phone browser with the port. An example for my robot is http://192.168.1.107:5000.\n    ```", "```py\n    app.run(host=\"0.0.0.0\")\n    ```", "```py\n        mode_config = {\n            \"avoid_behavior\": {\"script\": \"avoid_behavior.py\"},\n            \"circle_head\": {\"script\": \"circle_pan_tilt_behavior.py\"},\n            ...\n    ```", "```py\n            manual_drive configuration here, you need to add this to menu_config variable too so that it shows up on the menu.\n    ```", "```py\n        def run(self, mode_name):\n            while self.is_running():\n                self.stop()\n            script = self.mode_config[mode_name]['script']\n            self.current_process = subprocess.Popen([\"python\", script])\n    ```", "```py\n        def should_redirect(self, mode_name):\n            return self.mode_config[mode_name].get('server') is True and self.is_running()\n    ```", "```py\n    from flask import Flask, render_template, jsonify\n    ```", "```py\n    @app.route(\"/run/<mode_name>\", methods=['POST'])\n    def run(mode_name):\n        mode_manager.run(mode_name)\n        response = {'message': f'{mode_name} running'}\n    ```", "```py\n        if mode_manager.should_redirect(mode_name):\n            response['redirect'] = True\n    ```", "```py\n        return jsonify(response)\n    ```", "```py\n    @app.route(\"/stop\", methods=['POST'])\n    def stop():\n        mode_manager.stop()\n        return jsonify({'message': \"Stopped\"})\n    ```", "```py\n        function run(url) {\n    ```", "```py\n          $.post(url, '', response => {\n               $('#message').html(response.message);\n    ```", "```py\n    setTimeout function calls a function after a specified time. We give it 3,000 milliseconds (3 seconds), which gives a video behavior time to warm up first.\n    ```", "```py\n    <head>\n        <script src=\"img/jquery-3.5.1.min.js\"></script>\n        <title>My Robot Menu</title>\n        <meta charset=\"UTF-8\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/display.css\">\n    </head>\n    ```", "```py\n        <ul class=\"menu\">\n          {% for item in menu %}\n            <li>\n                <a class=\"button\" href=\"#\" onclick=\"run('/run/{{ item.mode_name }}')\">\n                    {{ item.text }}\n                </a>\n            </li>\n          {% endfor %}\n        <li><a class=\"button\" href=\"#\" onclick=\"run('/stop')\">Stop</a></li>\n    ```", "```py\n    .menu {\n        width: 100%;\n        margin-top: 0;\n        margin-bottom: 0;\n        padding: 0;\n    }\n    ```", "```py\n    .menu li {\n        list-style-type: none;\n        list-style-position: initial;\n    }\n    ```", "```py\n    .menu .button {\n        margin-left: auto;\n        margin-right: auto;\n        width: 60vw;\n        border: 1px solid lightblue;\n    }\n    ```", "```py\n    from robot_modes import RobotModes\n    from leds_led_shim import Leds\n    ```", "```py\n    mode_manager = RobotModes()\n    leds = Leds()\n    leds.set_one(1, [0, 255, 0])\n    leds.show()\n    ```", "```py\n    def run(mode_name):\n        global leds\n        if leds:\n            leds.clear()\n            leds.show()\n            leds = None\n    ...\n    ```", "```py\n    [Unit]\n    Description=Robot Menu Web Service\n    After=network.target\n    ```", "```py\n    [Install]\n    WantedBy=multi-user.target\n    ```", "```py\n    [Service]\n    ```", "```py\n    WorkingDirectory=/home/pi\n    User=pi\n    ```", "```py\n    ExecStart=/usr/bin/env python3 control_server.py\n    ```", "```py\n    $ sudo cp menu_server.service /etc/systemd/system/\n    ```", "```py\n    $ sudo systemctl daemon-reload\n    $ sudo systemctl enable menu_server\n    ```", "```py\n    Created symlink /etc/systemd/system/multi-user.target.wants/menu_server.service → /etc/systemd/system/menu_server.service.\n    ```", "```py\n    $ sudo systemctl start menu_server\n    ```", "```py\n    $ systemctl status menu_server\n    ```", "```py\n    ● menu_server.service - Robot Menu Web Service\n      Loaded: loaded (/etc/systemd/system/menu_server.service; enabled; vendor preset: enabled)\n       Active: active (running) since Wed 2020-10-21 23:41:55 BST; 2s ago\n     Main PID: 1187 (python3)\n        Tasks: 1 (limit: 860)\n       Memory: 10.0M\n       CGroup: /system.slice/menu_server.service\n               └─1187 python3 control_server.py\n    Oct 21 23:41:55 myrobot systemd[1]: Started Robot Menu Web Service.\n    Oct 21 23:41:56 myrobot env[1187]:  * Serving Flask app \"control_server\" (lazy loading)\n    Oct 21 23:41:56 myrobot env[1187]:  * Environment: production\n    Oct 21 23:41:56 myrobot env[1187]:    WARNING: This is a development server. Do not use it in a production deployment.\n    ```", "```py\n    $ journalctl -u menu_server -f\n    ```", "```py\n$ sudo systemctl restart menu_server\n```"]