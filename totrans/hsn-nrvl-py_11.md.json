["```py\n    def __init__(self, configuration, side, size=2):\n        self.size = size\n        self.side = side\n        self.configuration = configuration\n        self.data = np.zeros((size, size))\n\n        # Parse configuration\n        lines = self.configuration.splitlines()\n        for r, line in enumerate(lines):\n            chars = line.split(\" \")\n            for c, ch in enumerate(chars):\n                if ch == 'o':\n                    # pixel is ON\n                    self.data[r, c] = 1.0\n                else:\n                    # pixel is OFF\n                    self.data[r, c] = 0.0\n```", "```py\n        # Parse configuration\n        lines = self.configuration.splitlines()\n        for r, line in enumerate(lines):\n            chars = line.split(\" \")\n            for c, ch in enumerate(chars):\n                if ch == 'o':\n                    # pixel is ON\n                    self.data[r, c] = 1.0\n                else:\n                    # pixel is OFF\n                    self.data[r, c] = 0.0\n```", "```py\n    def create_data_set(self):\n        # set left side objects\n        self.visual_objects.append(VisualObject(\". .\\n. .\", \n                                                side=Side.BOTH))\n        self.visual_objects.append(VisualObject(\". .\\n. o\", \n                                                side=Side.BOTH))\n        self.visual_objects.append(VisualObject(\". o\\n. o\", \n                                                side=Side.LEFT))\n        self.visual_objects.append(VisualObject(\". o\\n. .\", \n                                                side=Side.BOTH))\n        self.visual_objects.append(VisualObject(\". o\\no o\", \n                                                side=Side.LEFT))\n        self.visual_objects.append(VisualObject(\". .\\no .\", \n                                                side=Side.BOTH))\n        self.visual_objects.append(VisualObject(\"o o\\n. o\", \n                                                side=Side.LEFT))\n        self.visual_objects.append(VisualObject(\"o .\\n. .\", \n                                                side=Side.BOTH))\n```", "```py\n       # set right side objects\n       self.visual_objects.append(VisualObject(\". .\\n. .\", \n                                               side=Side.BOTH))\n       self.visual_objects.append(VisualObject(\"o .\\n. .\", \n                                               side=Side.BOTH))\n       self.visual_objects.append(VisualObject(\"o .\\no .\", \n                                               side=Side.RIGHT))\n       self.visual_objects.append(VisualObject(\". .\\no .\", \n                                               side=Side.BOTH))\n       self.visual_objects.append(VisualObject(\"o o\\no .\", \n                                               side=Side.RIGHT))\n       self.visual_objects.append(VisualObject(\". o\\n. .\", \n                                               side=Side.BOTH))\n       self.visual_objects.append(VisualObject(\"o .\\no o\", \n                                               side=Side.RIGHT))\n       self.visual_objects.append(VisualObject(\". .\\n. o\", \n                                               side=Side.BOTH))\n```", "```py\n        inputs = left.get_data() + right.get_data()\n        inputs.append(0.5) # the bias\n\n        net.Input(inputs)\n```", "```py\n        outputs = net.Output()\n        outputs[0] = 1.0 if outputs[0] >= 0.5 else 0.0\n        outputs[1] = 1.0 if outputs[1] >= 0.5 else 0.0\n```", "```py\n        left_target = 1.0 if left.side == Side.LEFT or \\\n                             left.side == Side.BOTH else 0.0\n        right_target = 1.0 if right.side == Side.RIGHT or \\\n                              right.side  == Side.BOTH else 0.0\n        targets = [left_target, right_target]\n```", "```py\n    error = (outputs[0]-targets[0]) * (outputs[0]-targets[0]) + \\\n            (outputs[1]-targets[1]) * (outputs[1]-targets[1])\n```", "```py\n    seed = 1569777981\n    # Create substrate\n    substrate = create_substrate()\n    # Create CPPN genome and population\n    g = NEAT.Genome(0,\n             substrate.GetMinCPPNInputs(),\n             2, # hidden units\n             substrate.GetMinCPPNOutputs(),\n             False,\n             NEAT.ActivationFunction.TANH,\n             NEAT.ActivationFunction.SIGNED_GAUSS, # hidden \n             1, # hidden layers seed\n             params, \n             1) # one hidden layer\n    pop = NEAT.Population(g, params, True, 1.0, seed)\n    pop.RNG.Seed(seed)\n```", "```py\n    start_time = time.time()\n    best_genome_ser = None\n    best_ever_goal_fitness = 0\n    best_id = -1\n    solution_found = False\n\n    stats = Statistics()\n    ...\n```", "```py\n        # get list of current genomes\n        genomes = NEAT.GetGenomeList(pop)\n\n        # evaluate genomes\n        genome, fitness, errors = eval_genomes(genomes, \n                         rt_environment=rt_environment, \n                         substrate=substrate, \n                         params=params)\n        stats.post_evaluate(max_fitness=fitness, errors=errors)\n        solution_found = fitness >= FITNESS_THRESHOLD\n```", "```py\n        if solution_found or best_ever_goal_fitness < fitness:\n            # dump to pickle to freeze the genome state\n            best_genome_ser = pickle.dumps(genome)\n            best_ever_goal_fitness = fitness\n            best_id = genome.GetID()\n```", "```py\n        if solution_found:\n            print('Solution found at generation: %d, best fitness: %f, species count: %d' % (generation, fitness, len(pop.Species)))\n            break\n```", "```py\n        # advance to the next generation\n        pop.Epoch()\n\n        # print statistics\n        gen_elapsed_time = time.time() - gen_time\n        print(\"Best fitness: %f, genome ID: %d\" % \n               (fitness, best_id))\n        print(\"Species count: %d\" % len(pop.Species))\n        print(\"Generation elapsed time: %.3f sec\" % \n               (gen_elapsed_time))\n        print(\"Best fitness ever: %f, genome ID: %d\" % \n               (best_ever_goal_fitness, best_id))\n```", "```py\n    print(\"\\nBest ever fitness: %f, genome ID: %d\" % \n             (best_ever_goal_fitness, best_id))\n    print(\"\\nTrial elapsed time: %.3f sec\" % (elapsed_time))\n    print(\"Random seed:\", seed)\n```", "```py\n    if save_results or show_results:        \n        # Draw CPPN network graph\n        net = NEAT.NeuralNetwork()\n        best_genome.BuildPhenotype(net)\n        visualize.draw_net(net, view=False, node_names=None, \n                           filename=\"cppn_graph.svg\", \n                           directory=trial_out_dir, fmt='svg')\n        print(\"\\nCPPN nodes: %d, connections: %d\" % \n                     (len(net.neurons), len(net.connections)))\n```", "```py\n        net = NEAT.NeuralNetwork()\n        best_genome.BuildESHyperNEATPhenotype(net, substrate, \n                                              params)\n        visualize.draw_net(net, view=False, node_names=None, \n                           filename=\"substrate_graph.svg\", \n                           directory=trial_out_dir, fmt='svg')\n        print(\"\\nSubstrate nodes: %d, connections: %d\" % \n                 (len(net.neurons), \n               len(net.connections)))\n        inputs = net.NumInputs()\n        outputs = net.NumOutputs()\n        hidden = len(net.neurons) - net.NumInputs() - \\\n                 net.NumOutputs()\n        print(\"\\n\\tinputs: %d, outputs: %d, hidden: %d\" % \n                (inputs, outputs, hidden))\n```", "```py\n        # Test against random retina configuration\n        l_index = random.randint(0, 15)\n        r_index = random.randint(0, 15)\n        left = rt_environment.visual_objects[l_index]\n        right = rt_environment.visual_objects[r_index]\n        err, outputs = rt_environment._evaluate(net, left, \n                                                right, 3)\n        print(\"Test evaluation error: %f\" % err)\n        print(\"Left flag: %f, pattern: %s\" % (outputs[0], left))\n        print(\"Right flag: %f, pattern: %s\" % (outputs[1], right))\n\n        # Test against all visual objects\n        fitness, avg_error, total_count, false_detections = \\\n                     rt_environment.evaluate_net(net, debug=True)\n        print(\"Test evaluation against full data set [%d], fitness: %f, average error: %f, false detections: %f\" % (total_count, fitness, avg_error, false_detections))\n```", "```py\n        # Visualize statistics\n        visualize.plot_stats(stats, ylog=False, view=show_results, \n              filename=os.path.join(trial_out_dir,            ‘avg_fitness.svg’))\n```", "```py\n    # The input layer\n    x_space = np.linspace(-1.0, 1.0, num=4)\n    inputs = [\n        # the left side\n        (x_space[0], 0.0, 1.0), (x_space[1], 0.0, 1.0), \n        (x_space[0], 0.0, -1.0), (x_space[1], 0.0, -1.0),\n        # the right side\n        (x_space[2], 0.0, 1.0), (x_space[3], 0.0, 1.0), \n        (x_space[2], 0.0, -1.0), (x_space[3], 0.0, -1.0), \n        (0,0,0) # the bias\n        ]\n```", "```py\n        # The output layer\n        outputs = [(-1.0, 1.0, 0.0), (1.0, 1.0, 0.0)]\n```", "```py\n    # Allow connections: input-to-hidden, hidden-to-output, \n    # and  hidden-to- hidden\n    substrate.m_allow_input_hidden_links = True\n    substrate.m_allow_hidden_output_links = True\n    substrate.m_allow_hidden_hidden_links = True\n\n    substrate.m_allow_input_output_links = False\n    substrate.m_allow_output_hidden_links = False\n    substrate.m_allow_output_output_links = False\n    substrate.m_allow_looped_hidden_links = False\n    substrate.m_allow_looped_output_links = False\n\n    substrate.m_hidden_nodes_activation = \\\n           NEAT.ActivationFunction.SIGNED_SIGMOID\n    substrate.m_output_nodes_activation = \\\n           NEAT.ActivationFunction.UNSIGNED_SIGMOID\n\n    # send connection length to the CPPN as a parameter\n    substrate.m_with_distance = True \n    substrate.m_max_weight_and_bias = 8.0\n```", "```py\ndef eval_genomes(genomes, substrate, rt_environment, params):\n    best_genome = None\n    max_fitness = 0\n    errors = []\n    for genome in genomes:\n        fitness, error, total_count, false_detetctions = eval_individual(\n                               genome, substrate, rt_environment, params)\n        genome.SetFitness(fitness)\n        errors.append(error)\n\n        if fitness > max_fitness:\n            max_fitness = fitness\n            best_genome = genome\n\n    return best_genome, max_fitness, errors\n```", "```py\n    best_genome = None\n    max_fitness = 0\n    errors = []\n```", "```py\n    for genome in genomes:\n        fitness, error, total_count, false_detetctions = eval_individual(\n                               genome, substrate, rt_environment, params)\n        genome.SetFitness(fitness)\n        errors.append(error)\n\n        if fitness > max_fitness:\n            max_fitness = fitness\n            best_genome = genome\n```", "```py\ndef eval_individual(genome, substrate, rt_environment, params):\n    # Create ANN from provided CPPN genome and substrate\n    net = NEAT.NeuralNetwork()\n    genome.BuildESHyperNEATPhenotype(net, substrate, params)\n\n    fitness, dist, total_count, false_detetctions = \\\n       rt_environment.evaluate_net(net, max_fitness=MAX_FITNESS)\n    return fitness, dist, total_count, false_detetctions\n```", "```py\n    params.PopulationSize = 300\n```", "```py\n    params.SpeciesMaxStagnation = 100\n    params.MinSpecies = 5\n    params.MaxSpecies = 15\n```", "```py\n    params.MutateAddLinkProb = 0.03\n    params.MutateAddNeuronProb = 0.03\n```", "```py\n    params.ActivationFunction_SignedGauss_Prob = 1.0\n    params.ActivationFunction_SignedStep_Prob = 1.0\n    params.ActivationFunction_Linear_Prob = 1.0\n    params.ActivationFunction_SignedSine_Prob = 1.0\n    params.ActivationFunction_SignedSigmoid_Prob = 1.0\n```", "```py\n    params.DivisionThreshold = 0.5\n    params.VarianceThreshold = 0.03\n```", "```py\n$ conda create --name rt_multineat python=3.5\n$ conda activate vd_multineat\n$ conda install -c conda-forge multineat \n$ conda install matplotlib\n$ conda install -c anaconda seaborn\n$ conda install graphviz\n$ conda install python-graphviz\n```", "```py\n$ git clone https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python.git\n$ cd Hands-on-Neuroevolution-with-Python/Chapter8\n$ python retina_experiment.py -t 1 -g 1000\n```", "```py\n****** Generation: 949 ******\n\nSolution found at generation: 949, best fitness: 1000.000000, species count: 6\n\nBest ever fitness: 1000.000000, genome ID: 284698\n\nTrial elapsed time: 1332.576 sec\nRandom seed: 1569777981\n\nCPPN nodes: 21, connections: 22\n\nSubstrate nodes: 15, connections: 28\n```"]