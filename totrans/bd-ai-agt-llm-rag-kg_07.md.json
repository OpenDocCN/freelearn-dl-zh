["```py\n#Custom method\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.messages import SystemMessage\nfrom langchain_core.output_parsers import StrOutputParser\nprompt = ChatPromptTemplate.from_messages([\n    SystemMessage(content=\"\"\"\n    You are a helpful assistant in creates knowledge graphs by Generating Cypher Queries.\\n\n    Task:\n     *  Identify Entities, Relationships and Property Keys from Context.\\n\n     *  Generate Cypher Query to Create Knowledge Graph from the Entities Relationships and Property Keys discovered.\\n\n     *  Extract ALL Entities and RelationShips as Possible.\\n\n     *  Always extract a person Profession as an Entity.\\n\n     *  Be creative.\n     *  Understand hidden relationships from the network.\n     Note: Read the Context twice and carefully before generating Cypher Query.\\n\n     Note: Do not return anything other than the Cypher Query.\\n\n     Note: Do not include any explanations or apologies in your responses.\\n\n     Note: Do not hallucinate.\\n\n     Entities include Person, Place, Product, WorkPlaces, Companies, City, Country, Animals, Tags like peoples Profession and more \\n\n     Few Shot Prompts:\n      Example Context:\n       Mary was born in 1995\\. She is Friends with Jane and John. Jane is 2 years older than Mary.\n       Mary has a dog named Max,and is 3 years old. She is also married to John. Mary is from USA and a Software Engineer.\n      Answer:\n        MERGE (Mary:Person {name: \"Mary\", birth_year: 1995})\n        MERGE (Jane:Person {name: \"Jane\", age:1993})\n        MERGE (John:Person {name: \"John\"})\n        MERGE (Mary)-[:FRIENDS_WITH]->(Jane)\n        MERGE (Mary)-[:FRIENDS_WITH]->(John)\n        MERGE (Jane)-[:FRIENDS_WITH]->(Mary)\n        MERGE (John)-[:FRIENDS_WITH]->(Mary)\n        MERGE (Mary)-[:HAS_DOG]->(Max:Dog {name: \"Max\", age: 3})\n        MERGE (Mary)-[:MARRIED_TO]->(John)\n        MERGE (Mary)-[:HAS_PROFESSION]->(SoftwareEngineer:Profession {name: \"Software Engineer\"})\n        MERGE (Mary)-[:FROM]->(USA:Country {name: \"USA\"})\n    \"\"\"),\n    (\"human\", \"Context:{text}\"),\n])\n```", "```py\nfrom langchain_core.documents import Document\nfrom langchain_experimental.graph_transformers import LLMGraphTransformer\nllm_transformer = LLMGraphTransformer(llm=llm)\ndocuments = [Document(page_content=content)]\ngraph_documents = llm_transformer.convert_to_graph_documents(documents)\n```", "```py\nfrom langchain.chains import GraphCypherQAChain\ngraphchain = GraphCypherQAChain.from_llm(\n    llm, graph=graph, verbose=True, return_intermediate_steps=True\n)\nresults = graphchain.invoke({\"query\":\"People who have kids\"})\nprint(results[\"result\"])\n```"]