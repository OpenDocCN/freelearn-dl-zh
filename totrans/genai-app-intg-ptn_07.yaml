- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: 'Integration Pattern: Real-Time Intent Classification'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成模式：实时意图分类
- en: In previous chapters, we discussed the batch-processing integration pattern,
    where we focused on efficiently processing large volumes of data and generating
    data to be used by downstream systems. In this chapter, we will shift our focus
    to **real-time integration patterns**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了批量处理集成模式，我们专注于高效处理大量数据并生成用于下游系统的数据。在本章中，我们将将重点转向**实时集成模式**。
- en: Real-time interactions require applications to be optimized for latency, rather
    than processing large batch requests efficiently. In other words, we need to ensure
    that the output is generated as quickly as possible to provide an optimized user
    experience. The most common use case for this pattern is real-time agents exposed
    through chat or voice interfaces.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实时交互要求应用针对延迟进行优化，而不是高效处理大量批量请求。换句话说，我们需要确保输出尽可能快地生成，以提供优化的用户体验。这种模式最常见的用例是通过聊天或语音界面暴露的实时代理。
- en: Let’s consider an intent classification use case, which is a common scenario
    for chatbots. In this context, an **artificial intelligence** (**AI**) system
    is responsible for identifying the user’s intent, such as checking a balance,
    scheduling an appointment, or making a purchase. Based on the identified intent,
    the system can then perform the appropriate tasks or provide relevant responses.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个意图分类用例，这是聊天机器人常见的场景。在这种情况下，一个**人工智能**（**AI**）系统负责识别用户的意图，例如检查余额、安排预约或进行购买。根据识别到的意图，系统可以执行适当的任务或提供相关响应。
- en: In today’s application experiences, customers expect seamless and personalized
    experiences when interacting with businesses. One way to achieve this is by implementing
    an intelligent system that can accurately interpret user intents based on natural
    language inputs. This capability is particularly valuable in customer service,
    e-commerce, and conversational AI applications, where understanding the user’s
    intent is crucial for providing relevant and contextual responses.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的应用体验中，客户在与企业互动时期望无缝和个性化的体验。实现这一目标的一种方式是实施一个智能系统，该系统能够根据自然语言输入准确解释用户意图。这种能力在客户服务、电子商务和对话式AI应用中尤其有价值，在这些应用中，理解用户的意图对于提供相关和上下文相关的响应至关重要。
- en: In this chapter, we’ll explore a real-time intent classification use case, leveraging
    the power of Google’s **Gemini Pro**, *a state-of-the-art* generative AI model,
    to build a system that can accurately categorize user inputs into predefined intents.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一个实时意图分类用例，利用谷歌的**Gemini Pro**，*一种最先进的*生成式AI模型，构建一个能够准确地将用户输入分类到预定义意图的系统。
- en: We’ll walk through the entire process, from data preparation to deployment and
    integration with downstream systems, following the integration framework discussed
    in previous chapters.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从头到尾走一遍整个过程，从数据准备到部署以及与下游系统的集成，遵循前几章中讨论的集成框架。
- en: 'In this chapter, we will cover:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Use case definition
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例定义
- en: Architecture
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构
- en: Entry point
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入口点
- en: Prompt pre-processing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示预处理
- en: Inference
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推理
- en: Result post-processing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果后处理
- en: Result presentation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果展示
- en: Full code
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整代码
- en: Use case definition
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例定义
- en: Let’s consider a scenario where we’re working with an e-commerce company that
    wants to improve its customer service experience. The company receives a large
    volume of customer inquiries through various channels, such as email, chat, and
    social media. Currently, these inquiries are handled manually by a team of customer
    service representatives, which can be time-consuming and prone to inconsistencies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个场景，我们正在与一家希望改善其客户服务体验的电子商务公司合作。该公司通过各种渠道，如电子邮件、聊天和社交媒体，接收大量客户咨询。目前，这些咨询由客户服务代表团队手动处理，这可能耗时且容易出错。
- en: By integrating intent classification into customer engagement flows, companies
    can optimize their customer service operations. This advanced natural language
    processing technique automatically categorizes incoming customer inquiries into
    predefined intents, such as “order status,” “product inquiry,” “return request,”
    or “general feedback.” The classification layer acts as an intelligent entry point
    for customer service interactions, enabling more efficient and accurate routing
    of inquiries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将意图分类集成到客户参与流程中，公司可以优化其客户服务运营。这种高级自然语言处理技术自动将客户咨询分类到预定义的意图中，例如“订单状态”、“产品咨询”、“退货请求”或“一般反馈”。分类层作为客户服务互动的智能入口，使查询的分配更加高效和准确。
- en: This automated categorization serves as the foundation for a scalable customer
    service infrastructure. Once an inquiry is classified, it can be seamlessly directed
    to the most appropriate team or agent, ensuring that customers receive expert
    assistance tailored to their specific needs. For high-volume, straightforward
    inquiries, the system can even trigger automated responses, providing instant
    solutions to common issues. This not only dramatically improves response times
    but also enhances overall customer satisfaction by delivering quick, relevant
    assistance.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种自动分类是可扩展客户服务基础设施的基础。一旦查询被分类，它就可以无缝地导向最合适的团队或代理，确保客户获得针对其特定需求的专家协助。对于高容量、简单的查询，系统甚至可以触发自动响应，提供对常见问题的即时解决方案。这不仅极大地提高了响应时间，而且通过提供快速、相关的帮助，增强了整体客户满意度。
- en: Additionally, the implementation of intent classification significantly improves
    the quality of life for customer service agents.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，实施意图分类显著提高了客户服务代表的日常生活质量。
- en: By receiving pre-categorized inquiries, organizations can leverage specialist
    agents to focus on their areas of expertise, reducing the cognitive load of constantly
    switching between different types of issues. This specialization allows agents
    to provide more in-depth, high-quality support, leading to better resolution rates
    and increased job satisfaction.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过接收预先分类的查询，组织可以利用专家代理专注于他们的专业领域，减少在处理不同类型问题之间不断切换的认知负荷。这种专业化使代理能够提供更深入、高质量的支持，从而提高解决率和增加工作满意度。
- en: There is an additional benefit in terms of analytics, as the data gathered from
    intent classification can offer valuable insights into customer needs and pain
    points, enabling companies to continually refine their products, services, and
    support strategies to better meet customer expectations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析方面，还有一个额外的优势，因为从意图分类中收集的数据可以提供对客户需求和痛点的宝贵见解，使公司能够不断改进其产品、服务和支持策略，更好地满足客户期望。
- en: In the following section, we will dive deep into an approach that will get you
    started on an intent classification example using GenAI.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨一种方法，它将帮助您开始使用GenAI进行意图分类示例。
- en: Architecture
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: 'To build our intent classification system, we’ll leverage a serverless, event-driven
    architecture built on **Google Cloud** (for example: [https://cloud.google.com/architecture/serverless-functions-blueprint](https://cloud.google.com/architecture/serverless-functions-blueprint)).
    This approach aligns with cloud-native principles and allows for seamless integration
    with other cloud services.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建我们的意图分类系统，我们将利用基于**Google Cloud**（例如：[https://cloud.google.com/architecture/serverless-functions-blueprint](https://cloud.google.com/architecture/serverless-functions-blueprint)）的无服务器、事件驱动架构。这种方法符合云原生原则，并允许与其他云服务无缝集成。
- en: '![](img/B22175_07_01.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22175_07_01.png)'
- en: 'Figure 7.1: Intent classification example architecture diagram'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：意图分类示例架构图
- en: 'The architecture consists of the following key components:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 架构包括以下关键组件：
- en: '**Ingestion layer**: This layer is responsible for accepting incoming user
    inputs from various channels, such as web forms, chat interfaces, or API endpoints.
    We’ll use **Google Cloud Functions** as the entry point for our system, which
    can be triggered by events from services like **Cloud Storage**, **Pub/Sub**,
    or **Cloud Run**.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摄取层**：这一层负责接受来自各种渠道的用户输入，例如网页表单、聊天界面或API端点。我们将使用**Google Cloud Functions**作为我们系统的入口点，它可以由**Cloud
    Storage**、**Pub/Sub**或**Cloud Run**等服务的事件触发。'
- en: '**AI processing layer**: In this layer, we’ll integrate Google’s Gemini Pro
    through **Vertex AI**. Vertex AI provides a managed environment for deploying
    and scaling machine learning models, ensuring high availability and performance.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AI处理层**：在这一层中，我们将通过**Vertex AI**整合Google的Gemini Pro。Vertex AI提供了一个托管环境来部署和扩展机器学习模型，确保高可用性和性能。'
- en: '**Intent classification model**: This is the core component of our system,
    responsible for analyzing the user input and determining the corresponding intent.
    We’ll leverage Google Gemini Pro’s natural language understanding capabilities
    for our intent classification model.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**意图分类模型**：这是我们系统的核心组件，负责分析用户输入并确定相应的意图。我们将利用Google Gemini Pro的自然语言理解能力为我们构建意图分类模型。'
- en: '**Orchestration and routing**: Based on the classified intent, we’ll need to
    route the user input to the appropriate downstream system or service. This could
    involve integrating with **customer relationship management** (**CRM**) systems,
    knowledge bases, or other enterprise applications. We’ll use Cloud Functions or
    Cloud Run to orchestrate this routing process.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编排和路由**：根据分类的意图，我们需要将用户输入路由到适当的后端系统或服务。这可能涉及与**客户关系管理**（CRM）系统、知识库或其他企业应用的集成。我们将使用Cloud
    Functions或Cloud Run来编排此路由过程。'
- en: '**Monitoring and logging**: To ensure the reliability and performance of our
    system, we’ll implement robust monitoring and logging mechanisms. We’ll leverage
    services like **Cloud Logging**, **Cloud Monitoring**, and **Cloud Operations**
    to gain visibility into our system’s behavior and quickly identify and resolve
    any issues.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和日志记录**：为确保我们系统的可靠性和性能，我们将实施强大的监控和日志记录机制。我们将利用如**云日志**、**云监控**和**云操作**等服务来了解我们系统的行为，并快速识别和解决任何问题。'
- en: By adopting this architecture, the intent classification system won’t just be
    scalable but also flexible enough to adapt to varying workloads and integration
    requirements. We’ll be able to handle high volumes of customer inquiries in real
    time and deliver swift and consistent responses that improve the overall customer
    experience.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用这种架构，意图分类系统不仅可扩展，而且足够灵活，可以适应不同的工作负载和集成需求。我们能够实时处理大量客户咨询，并快速提供一致的反应，从而改善整体客户体验。
- en: The serverless nature of this architecture brings several additional benefits.
    It allows for automatic scaling based on demand, ensuring that we can handle sudden
    spikes in customer inquiries without manual intervention. This elasticity not
    only improves system reliability but also optimizes costs, as we only pay for
    the resources we actually use.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的无服务器特性带来了几个额外的优势。它允许根据需求自动扩展，确保我们能够在无需人工干预的情况下处理客户咨询的突然激增。这种弹性不仅提高了系统可靠性，还优化了成本，因为我们只为实际使用的资源付费。
- en: This event-driven design facilitates easy integration with other systems and
    services. As our customer service ecosystem evolves, we can easily add new triggers
    or outputs to our intent classification system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种事件驱动的设计促进了与其他系统和服务的轻松集成。随着我们的客户服务生态系统的发展，我们可以轻松地向意图分类系统中添加新的触发器或输出。
- en: This could include integrating with new communication channels, connecting to
    additional backend systems, or incorporating advanced analytics for deeper insights
    into customer behavior and preferences.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能包括集成新的通信渠道、连接到额外的后端系统或结合高级分析以深入了解客户行为和偏好。
- en: In the following sections, we’ll dive deeper into each component of our architecture,
    exploring the specific Google Cloud services we’ll use, best practices for implementation,
    and strategies for optimizing performance and cost-efficiency. We’ll also discuss
    a concrete example that will help you get started.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入了解我们架构的每个组件，探讨我们将使用的特定Google Cloud服务、实施的最佳实践以及优化性能和成本效益的策略。我们还将讨论一个具体的示例，以帮助您开始。
- en: Entry point
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入口点
- en: For real-time interactive applications, the entry points where prompts originate
    need to be highly streamlined, with simplicity and ease of use in mind. These
    prompts often originate from unpredictable contexts, so interfaces have to feel
    natural across device types and usage scenarios.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实时交互式应用，提示的入口点需要高度精简，考虑到简洁性和易用性。这些提示通常来自不可预测的上下文，因此界面需要在各种设备和使用场景中感觉自然。
- en: In our use case, the entry point could be a web form, chat interface, or API
    endpoint where customers submit their inquiries. These inputs will be sent to
    a cloud function, which acts as the ingestion layer for our system.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的用例中，入口点可能是一个网页表单、聊天界面或API端点，客户在此提交他们的咨询。这些输入将被发送到云函数，该函数作为我们系统的摄入层。
- en: 'Let’s start with a sample user query:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从用户查询的示例开始：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Prompt pre-processing
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示预处理
- en: In a real-time system, every step in the prompt pre-processing workflow adds
    precious latency, commonly measured in milliseconds or microseconds depending
    on your application’s SLAs, to the overall response time. Higher-latency experiences
    can be detrimental to the user experience. Therefore, pre-processing should be
    kept as lightweight as possible.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在实时系统中，提示预处理工作流程中的每一步都会向整体响应时间添加宝贵的延迟，通常根据您的应用程序的SLA以毫秒或微秒来衡量。高延迟体验可能会损害用户体验。因此，预处理应尽可能保持轻量级。
- en: For our intent classification use case, the prompt pre-processing may involve
    simple text normalization, such as removing punctuation, converting to lowercase,
    or handling abbreviations. Additionally, we may apply some basic filtering to
    remove any potentially harmful or inappropriate content before sending the prompt
    to the model.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的意图分类用例，提示预处理可能涉及简单的文本规范化，例如删除标点符号、转换为小写或处理缩写。此外，我们可能应用一些基本的过滤以移除任何可能有害或不适当的内容，在将提示发送到模型之前。
- en: 'Let’s dive deep into an example prompt:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入一个示例提示：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous prompt defines the template for the intent classification task.
    The prompt provides context that explains that the assistant is helping users
    of an online financial services company perform various actions, such as signing
    up, checking balances, investing in CDs, withdrawing funds, and more.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的提示定义了意图分类任务的模板。提示提供了上下文，解释了助手正在帮助在线金融服务公司的用户执行各种操作，例如注册、检查余额、投资CD、提取资金等。
- en: Additionally, this prompt instructs the model to carefully analyze the user’s
    input message and classify the intent into one of the predefined categories. For
    each intent category, the prompt specifies the JSON object that should be returned,
    including any additional information that needs to be extracted from the user’s
    message.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个提示指示模型仔细分析用户的输入消息，并将意图分类到预定义的类别之一。对于每个意图类别，提示指定应返回的JSON对象，包括需要从用户的消息中提取的任何附加信息。
- en: 'For example, if the user’s intent is to invest in a CD, the assistant should
    return the JSON object in the following format:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户的意图是投资CD，助手应返回以下格式的JSON对象：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This means that the virtual assistant should not only identify the intent as
    `"invest_cd"` but also extract relevant information like the investment amount
    and term from the user’s message and include it in the `"content"` field.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着虚拟助手不仅应将意图识别为“invest_cd”，还应从用户的消息中提取相关信息，如投资金额和期限，并将其包含在“content”字段中。
- en: The prompt also provides instructions for handling intents that do not fall
    into any of the predefined categories (the `"Other"` case).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 提示还提供了处理不属于任何预定义类别（即“其他”情况）的意图的说明。
- en: By providing this detailed prompt template, the system can effectively guide
    the language model to perform the intent classification task for financial services
    scenarios, ensuring that the model’s responses are structured and formatted correctly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供这个详细的提示模板，系统可以有效地引导语言模型执行金融服务场景的意图分类任务，确保模型的响应结构化和格式正确。
- en: Inference
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推理
- en: At the inference stage, we’ll leverage Google’s Gemini Pro model hosted on Vertex
    AI. Within the cloud function triggered by the user input, we’ll invoke the Vertex
    AI endpoint hosting the Gemini Pro model, passing the pre-processed input as the
    prompt.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在推理阶段，我们将利用托管在Vertex AI上的Google的Gemini Pro模型。在由用户输入触发的云函数中，我们将调用托管Gemini Pro模型的Vertex
    AI端点，将预处理的输入作为提示传递。
- en: 'Gemini Pro will process the input and return the predicted intent, leveraging
    its natural language understanding capabilities. Since we’re using an out-of-the-box
    model, the underlying infrastructure and resource allocation are abstracted away,
    ensuring that individual requests are processed efficiently while adhering to
    the service’s performance and cost objectives:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini Pro 将处理输入并返回预测的意图，利用其自然语言理解能力。由于我们使用的是现成的模型，因此底层基础设施和资源分配被抽象化，确保单个请求在遵守服务的性能和成本目标的同时高效处理：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Result post-processing
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果后处理
- en: For our intent classification use case, the post-processing step may involve
    formatting the predicted intent into a suitable response format, such as JSON
    or a human-readable string. Additionally, we may apply some basic filtering or
    ranking mechanisms to ensure that the most relevant and helpful responses are
    prioritized.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的意图分类用例，后处理步骤可能涉及将预测的意图格式化为合适的响应格式，例如 JSON 或可读性强的字符串。此外，我们可能应用一些基本的过滤或排序机制，以确保最相关和有帮助的响应被优先考虑。
- en: '[PRE4]json")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4]json")'
- en: end_index = text.find("[PRE5]json"
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: end_index = text.find("[PRE5]json"
- en: 'if start_index != -1 and end_index != -1:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'if start_index != -1 and end_index != -1:'
- en: 'json_string = text[start_index + 7: end_index]  # Extract the JSON string'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'json_string = text[start_index + 7: end_index]  # 提取 JSON 字符串'
- en: 'else:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: json_string = text
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: json_string = text
- en: 'try:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'try:'
- en: json_data = json.loads(json_string)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: json_data = json.loads(json_string)
- en: return json_data
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: return json_data
- en: 'except json.JSONDecodeError:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'except json.JSONDecodeError:'
- en: return None
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: return None
- en: 'extract_json that is designed to handle cases where the language model’s output
    contains JSON data wrapped in backticks: json[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: extract_json，该函数旨在处理语言模型输出中包含在反引号内包裹的 JSON 数据的情况：json[PRE6]
- en: 'The `extract_json` function takes a string text as input and attempts to extract
    the JSON portion from within the backticks. Here’s a breakdown of how the function
    works:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract_json` 函数接受一个字符串 text 作为输入，并尝试从反引号内提取 JSON 部分。以下是该函数的工作原理的分解：'
- en: The function first looks for the string [PRE7]json"[PRE8]
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数首先查找字符串 [PRE7]json"[PRE8]
- en: 'def process_intent(intent):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'def process_intent(intent):'
- en: 'if intent["intent"] == "signup":'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'if intent["intent"] == "signup":'
- en: '#If a user is trying to sign up you could'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果用户正在尝试注册，你可以'
- en: '#redirect the to a sign up page for example.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '# 重定向到注册页面等。'
- en: return("Sign up process")
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: return("注册流程")
- en: 'elif intent["intent"] == "change_password":'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "change_password":'
- en: '#If a user is looking into changing their password,'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果用户正在考虑更改密码，'
- en: '#you could either do it through the chatbot,'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '# 可以通过聊天机器人来完成，'
- en: '#or redirect to a password change page.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '# 或者重定向到密码更改页面。'
- en: return("Change password")
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: return("更改密码")
- en: 'elif intent["intent"] == "check_balance":'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "check_balance":'
- en: '#In this case you could have a function that'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '# 在这种情况下，你可以有一个函数'
- en: '#would query a database to obtain the'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '# 会查询数据库以获取'
- en: '#balance (as long as the user is logged in or not)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '# 平衡（只要用户已登录或未登录）'
- en: return("Check account balance")
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: return("检查账户余额")
- en: 'elif intent["intent"] == "invest_cd":'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "invest_cd":'
- en: '#For the investment intent, this could redirect'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '# 对于投资意图，这可能将重定向'
- en: '#to a page where investment options can be selected.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '# 转到可以选择投资选项的页面。'
- en: return("Invest in a CD")
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: return("投资 CD")
- en: 'elif intent["intent"] == "withdraw_funds":'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "withdraw_funds":'
- en: return("Withdraw funds")
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: return("提取资金")
- en: 'elif intent["intent"] == "transfer_funds":'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "transfer_funds":'
- en: return("Transfer funds")
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: return("转账")
- en: 'elif intent["intent"] == "account_info":'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "account_info":'
- en: return("Account information")
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: return("账户信息")
- en: 'elif intent["intent"] == "lost_card":'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "lost_card":'
- en: return("Report lost card")
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: return("报告丢失的卡")
- en: 'elif intent["intent"] == "support":'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "support":'
- en: return("Contact support")
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: return("联系客服")
- en: 'elif intent["intent"] == "other":'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif intent["intent"] == "other":'
- en: return("Other kind of intent")
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: return("其他类型的意图")
- en: 'else:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: return("If a intent was classified as something else you should investigate
    what is going on.")
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: return("如果意图被分类为其他内容，你应该调查发生了什么。")
- en: intent = process_intent(extract_json(result.text))
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: intent = process_intent(extract_json(result.text))
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: process_intent function can be extended or modified to include additional logic
    or actions based on the specific requirements of the application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: process_intent 函数可以根据应用程序的具体要求扩展或修改，以包含额外的逻辑或操作。
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: import gradio as gr
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: import gradio as gr
- en: 'def chat(message, history):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'def chat(message, history):'
- en: response = generate(prompt_template.format(query=message))
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: response = generate(prompt_template.format(query=message))
- en: intent_action = process_intent(extract_json(response.text))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: intent_action = process_intent(extract_json(response.text))
- en: history.append((message, intent_action))
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: history.append((message, intent_action))
- en: return "", history
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: return "", history
- en: 'with gr.Blocks() as demo:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gr.Blocks() as demo:'
- en: gr.Markdown("Fintech Assistant")
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: gr.Markdown("Fintech Assistant")
- en: chatbot = gr.Chatbot(show_label=False)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: chatbot = gr.Chatbot(show_label=False)
- en: message = gr.Textbox(placeholder="Enter your question")
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: message = gr.Textbox(placeholder="Enter your question")
- en: message.submit(chat, [message, chatbot],[message, chatbot]  )
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: message.submit(chat, [message, chatbot],[message, chatbot]  )
- en: demo.launch(debug=True)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: demo.launch(debug=True)
- en: '```'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The previous code illustrates the result presentation stage for the intent classification
    system using the Gradio library.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码展示了使用Gradio库的意图分类系统的结果展示阶段。
- en: 'In our example, the `chat(message, history)` function is the core of the chatbot
    interface. It takes two arguments: `message` (the user’s input message) and `history`
    (a list containing the previous messages and responses). Here’s what the function
    does:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`chat(message, history)`函数是聊天机器人界面的核心。它接受两个参数：`message`（用户的输入消息）和`history`（包含先前消息和响应的列表）。以下是该函数的功能：
- en: It calls the `generate` function (not shown in the provided code) to get the
    response from the intent classification model, passing the user’s message as part
    of the prompt template. It then processes the model’s response using the `extract_json`
    function (not shown) to extract the predicted intent data.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它调用`generate`函数（在提供的代码中未显示）从意图分类模型获取响应，将用户的消息作为提示模板的一部分传递。然后使用`extract_json`函数（未显示）处理模型的响应以提取预测的意图数据。
- en: The extracted intent data is passed to the `process_intent` function (which
    is not shown) to determine the appropriate action or response based on the predicted
    intent. The user’s message and the generated response are appended to the history
    list, which keeps track of the conversation.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取的意图数据传递给`process_intent`函数（此处未显示），以根据预测的意图确定适当的行为或响应。用户的消息和生成的响应被追加到历史列表中，以跟踪对话。
- en: The function returns an empty string for the response message and the updated
    history list.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数返回一个空字符串作为响应消息和更新后的历史记录列表。
- en: 'The code then creates a Gradio interface using the `gr.Blocks` context manager.
    Inside the context, it does the following:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后代码使用`gr.Blocks`上下文管理器创建Gradio界面。在上下文中，它执行以下操作：
- en: Displays a title using the gr.Markdown component.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用gr.Markdown组件显示标题。
- en: Creates a `gr.Chatbot` component to display the conversation history.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`gr.Chatbot`组件来显示对话历史。
- en: Creates a `gr.Textbox` component for the user to enter their message.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户输入消息创建一个`gr.Textbox`组件。
- en: Binds the chat function to the `submit` event of the `Textbox` component. When
    the user submits their message, the chat function is called with the user’s message
    and the current history as arguments.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将聊天函数绑定到`Textbox`组件的`submit`事件。当用户提交他们的消息时，聊天函数被调用，并带有用户的消息和当前历史记录作为参数。
- en: Updates the `Textbox` and `Chatbot` components with the new message and updated
    history, respectively.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分别更新`Textbox`和`Chatbot`组件的新消息和更新后的历史记录。
- en: Launches the Gradio interface in debug mode using `demo.launch(debug=True)`.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`demo.launch(debug=True)`以调试模式启动Gradio界面。
- en: The result is an interactive chatbot interface where users can enter their messages
    as illustrated in *Figure 7.2*, and the system will process the message, predict
    the intent, and provide an appropriate response based on the `process_intent`
    function. The conversation history is displayed in the `Chatbot` component, allowing
    users to track the flow of the conversation.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个交互式的聊天机器人界面，用户可以像*图7.2*中所示那样输入他们的消息，系统将处理消息，预测意图，并根据`process_intent`函数提供适当的响应。对话历史在`Chatbot`组件中显示，使用户能够跟踪对话流程。
- en: '![](img/B22175_07_02.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22175_07_02.png)'
- en: 'Figure 7.2: Example Gradio interface'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：示例Gradio界面
- en: Logging and monitoring
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录和监控
- en: Real-time systems require tight instrumentation around per-request metrics,
    such as latencies, errors, and resource usage.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 实时系统需要对每个请求的指标进行紧密的监控，例如延迟、错误和资源使用。
- en: In our architecture, we’ll leverage services like Cloud Logging ([https://cloud.google.com/logging/docs/overview](https://cloud.google.com/logging/docs/overview))
    and Cloud Monitoring ([https://cloud.google.com/monitoring/docs/monitoring-overview](https://cloud.google.com/monitoring/docs/monitoring-overview))
    to gain visibility into the system’s behavior and quickly identify and resolve
    any issues. We can monitor metrics like request latency, error rates, and resource
    utilization, and set up alerts for anomalies or performance degradation.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的架构中，我们将利用 Cloud Logging ([https://cloud.google.com/logging/docs/overview](https://cloud.google.com/logging/docs/overview))
    和 Cloud Monitoring ([https://cloud.google.com/monitoring/docs/monitoring-overview](https://cloud.google.com/monitoring/docs/monitoring-overview))
    等服务来了解系统的行为，并快速识别和解决任何问题。我们可以监控诸如请求延迟、错误率和资源利用率等指标，并为异常或性能下降设置警报。
- en: By following this integration pattern and leveraging the power of Google’s Gemini
    Pro, businesses can unlock the power of generative AI to build intelligent systems
    that accurately classify user intents, enhance customer experiences, and streamline
    operations.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这种集成模式和利用 Google 的 Gemini Pro 的力量，企业可以解锁生成式 AI 的潜力，构建能够准确分类用户意图、提升客户体验和简化运营的智能系统。
- en: Refer to the GitHub directory of this chapter for the complete code that demonstrates
    how all the pieces described above fit together.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本章的 GitHub 目录，以获取上述所有组件如何组合在一起的完整代码示例。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the integration pattern for building a real-time
    intent classification system using Google’s Gemini Pro generative AI model. We
    started by introducing the concept of real-time integration patterns, which prioritize
    low latency over efficiency and volume, as opposed to batch-processing integration
    patterns.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了使用 Google 的 Gemini Pro 生成式 AI 模型构建实时意图分类系统的集成模式。我们首先介绍了实时集成模式的概念，这种模式优先考虑低延迟，而不是效率或数量，与批量处理集成模式形成对比。
- en: The use case we developed is an e-commerce company that wants to improve its
    customer service experience by automatically categorizing incoming customer inquiries
    into predefined intents, such as order status, product inquiry, return request,
    or general feedback. This classification can then be used to route the inquiry
    to the appropriate team or provide automated responses for common issues.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发的用例是一家希望通过自动将客户咨询分类到预定义意图（如订单状态、产品咨询、退货请求或一般反馈）来改善其客户服务体验的电子商务公司。这种分类可以用于将咨询路由到适当的团队或为常见问题提供自动响应。
- en: The architecture proposed is a serverless, event-driven architecture on Google
    Cloud, consisting of an ingestion layer (Cloud Functions), an AI processing layer
    (Vertex AI with Gemini Pro), an intent classification model, orchestration and
    routing (Cloud Functions or Cloud Run), and monitoring and logging (Cloud Logging,
    Cloud Monitoring, and Cloud Operations).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的架构是建立在 Google Cloud 上的无服务器、事件驱动架构，包括数据摄取层（Cloud Functions）、AI 处理层（Vertex
    AI 与 Gemini Pro）、意图分类模型、编排和路由（Cloud Functions 或 Cloud Run）以及监控和日志记录（Cloud Logging、Cloud
    Monitoring 和 Cloud Operations）。
- en: In the next chapter, we will dive deep into another very important real-time
    use case, a **Retrieval Augmented Generation** (**RAG**) example where we are
    going to leverage generative AI to answer questions based on documents provided
    by us.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨另一个非常重要的实时用例，一个 **检索增强生成**（**RAG**）示例，我们将利用生成式 AI 基于我们提供的文档来回答问题。
- en: Join our community on Discord
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/genpat](Chapter_07.xhtml)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/genpat](Chapter_07.xhtml)'
- en: '![](img/QR_Code134841911667913109.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code134841911667913109.png)'
