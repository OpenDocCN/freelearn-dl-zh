- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Improving Agent Navigation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进智能体导航
- en: Now that you have a strong grip on the basics of the Unreal Engine pathfinding
    system, it’s time to get deeper and start delving into the intricate workings
    of enhancing the agent Navigation System.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对Unreal Engine路径查找系统的基本原理有了牢固的掌握，是时候深入挖掘并开始研究增强智能体导航系统复杂运作的方法了。
- en: 'In this chapter, you will discover how to improve your nav mesh generation
    and agent movement: starting from dynamically generated meshes, going through
    querying the environment, up until avoiding other agents efficiently.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解如何改进你的导航网格生成和智能体移动：从动态生成的网格开始，经过查询环境，直到有效地避开其他智能体。
- en: By the end of this chapter, you will have some brand-new skills to make your
    levels more engaging and interesting. This knowledge will serve as a fundamental
    building block in guiding your path toward creating sophisticated games, ultimately
    enhancing your skills as an AI game programmer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将掌握一些全新的技能，让你的关卡更加引人入胜和有趣。这些知识将成为引导你走向创建复杂游戏的基础构建块，最终提升你作为AI游戏程序员的技能。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Generating navigation meshes at runtime
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时生成导航网格
- en: Influencing navigation with query filters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用查询过滤器影响导航
- en: Implementing agent avoidance
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现智能体避让
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the topics presented in this chapter, you should have completed the
    previous ones and understood their content.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中介绍的主题，你应该已经完成了前面的章节，并理解了它们的内容。
- en: Additionally, if you would prefer to begin with code from the companion repository
    for this book, you can download the **.zip** project files provided in this book’s
    companion project repository at [https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5](https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5)
    .
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你希望从本书的配套仓库中的代码开始，你可以下载本书配套项目仓库中提供的**.zip**项目文件，网址为[https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5](https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5)。
- en: You can download the files corresponding to the end of the last chapter by clicking
    on the **Unreal Agility Arena –** **Chapter 04** **-** **End** link.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击**Unreal Agility Arena –** **第04章** **-** **结束**链接下载与上一章结尾对应的文件。
- en: Generating navigation meshes at runtime
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时生成导航网格
- en: 'Let’s continue our short novel started in [*Chapter 4*](B31016_04.xhtml#_idTextAnchor073)
    , *Setting Up a* *Navigation Mesh* :'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们在[*第4章*](B31016_04.xhtml#_idTextAnchor073)中开始的短篇故事，*设置导航网格*：
- en: '*In the secret research laboratory, a groundbreaking experiment was underway.
    The artificial intelligence dummy puppets, developed by Dr. Markus and Professor
    Viktoria, were primed for a quest: equipped with advanced pathfinding systems,
    the puppets were cleverly placed in the lab’s complex network of corridors and*
    *interconnected rooms.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*在秘密研究实验室中，一项突破性的实验正在进行。由马克斯博士和维克托利亚教授开发的AI木偶，准备开始一项任务：配备了先进的路径查找系统，木偶被巧妙地放置在实验室复杂的走廊和*
    *相连的房间* *网络中*。'
- en: '*They faced simulated construction zones, unexpected barriers, and even simulated
    distractions that obstructed their path. However, armed with their state-of-the-art
    AI capabilities, the puppets swiftly adapted to the changing circumstances, employing
    their ingenuity to find alternative routes and skillfully navigate through the
    intricate layout of* *the laboratory.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*他们面对模拟的建筑工地、意外的障碍，甚至模拟的干扰，这些干扰阻碍了他们的路径。然而，凭借他们最先进的AI能力，木偶迅速适应了不断变化的情况，运用他们的独创性找到替代路线，并巧妙地穿过了*
    *实验室* *错综复杂的布局*。'
- en: If you are working with nav meshes, chances are you will sooner or later have
    objects that will be moving around and will cause the agent’s path to the target
    to change.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用导航网格，那么你迟早会遇到移动的物体，这将导致智能体到达目标的路径发生变化。
- en: This is why having a static nav mesh generation will become useless; you will
    need some kind of system that will update the nav mesh at runtime. This is why
    Unreal Engine provides more than one method for generating such meshes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么静态导航网格生成将变得毫无用处；你需要某种类型的系统来在运行时更新导航网格。这就是为什么Unreal Engine提供了多种生成此类网格的方法。
- en: As explained in [*Chapter 3*](B31016_03.xhtml#_idTextAnchor058) , *Presenting
    the Unreal Engine Navigation System* , the generation method can be changed from
    **Project Settings** or the **Recast Nav Mesh** actor in a level; as we need to
    change the nav mesh generation just for this level, we will be selecting the second
    option.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第 3 章*](B31016_03.xhtml#_idTextAnchor058)中所述，*介绍虚幻引擎导航系统*，生成方法可以从**项目设置**或层级中的**Recast
    Nav Mesh**演员中更改；由于我们只需要更改此层级的导航网格生成，我们将选择第二个选项。
- en: But first, we need to create a level for our puppet agent to walk on!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，我们需要为我们的木偶代理创建一个可以行走的层级！
- en: Creating the level
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建层级
- en: 'To create this gym, do the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这个健身房，请按照以下步骤操作：
- en: From the main menu, select **File** | **New Level** .
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单中选择**文件** | **新建层级**。
- en: Navigate to the **Maps/LevelInstances** folder and drag an instance of **LI_Lighting**
    inside your level; set its transform **Location** value to **(0,** **0, 0)** .
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/LevelInstances**文件夹，并将**LI_Lighting**实例拖动到你的层级中；将其变换的**位置**值设置为**(0，**
    **0，0)**。
- en: Navigate to the **Maps/PackedLevelActors** folder and drag an instance of **PLA_Lab_02**
    inside your level; set its transform **Location** value to **(0,** **0, 0)** .
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/PackedLevelActors**文件夹，并将**PLA_Lab_02**实例拖动到您的层级中；将其变换的**位置**值设置为**(0，**
    **0，0)**。
- en: Save the level in the **Maps** folder and name it **Gym_NavMesh_04** .
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Maps**文件夹中保存层级，并将其命名为**Gym_NavMesh_04**。
- en: 'This gym has a block of stairs along with a detached platform, as depicted
    in *Figure 5* *.1* :'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个健身房有一个楼梯块和一个分离的平台，如图*图 5.1*所示：
- en: '![Figure 5.1 – The gym](img/B31016_05_1.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 健身房](img/B31016_05_1.jpg)'
- en: Figure 5.1 – The gym
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 健身房
- en: 'Now, let’s add the nav mesh along with the agent and the target point:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加导航网格以及代理和目标点：
- en: Add a **Nav Mesh Bounds Volume** actor and set its boundaries so it covers the
    whole level.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**导航网格边界体积**演员，并设置其边界，使其覆盖整个层级。
- en: Add the **NS_Target** Niagara system at the top of the isolated platform.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在隔离平台的顶部添加**NS_Target** Niagara系统。
- en: 'Add the **BP_NavMeshAgent** Blueprint on the blue tile and set the **Target
    Actor** property value to **NS_Target** . The level should now look as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在蓝色瓦片上添加**BP_NavMeshAgent**蓝图，并将**目标演员**属性值设置为**NS_Target**。现在层级应该看起来如下：
- en: '![Figure 5.2 – The gym with the nav mesh](img/B31016_05_2.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 带有导航网格的健身房](img/B31016_05_2.jpg)'
- en: Figure 5.2 – The gym with the nav mesh
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 带有导航网格的健身房
- en: 'As we are using a level that is slightly more complex than those presented
    in the previous chapter, you may experience a mesh generation that is slightly
    different from the one depicted in my screenshot; the stairs nav mesh may seem
    detached from the rest, or you may experience some other issue. *Figure 5* *.3*
    shows a typical scenario you may encounter:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是一个比上一章中展示的层级稍微复杂一些的层级，您可能会遇到与我的截图中描述的略有不同的网格生成；楼梯导航网格可能看起来与其它部分分离，或者您可能会遇到一些其他问题。*图
    5.3*展示了您可能遇到的典型场景：
- en: '![Figure 5.3 – Broken nav mesh](img/B31016_05_3.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 破坏的导航网格](img/B31016_05_3.jpg)'
- en: Figure 5.3 – Broken nav mesh
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 破坏的导航网格
- en: 'To solve this type of problem, you will need to tweak the **Recast Nav Mesh**
    actor settings a bit. As an example, you may try to do the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此类问题，您需要稍微调整**Recast Nav Mesh**演员的设置。例如，您可以尝试以下操作：
- en: Set the **Default Cell Height** property value to **40.0** .
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**默认单元格高度**属性值设置为**40.0**。
- en: Set **Agent Radius** to **70.0** .
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**代理半径**设置为**70.0**。
- en: The first value will make the stairs navigable area connect to the rest of the
    level, while the second one will add some more padding to the border of the mesh
    so as to avoid an agent walking too close to the edges. Just play around with
    the values a bit until you get your desired result.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值将使楼梯的可导航区域连接到整个层级，而第二个值将为网格的边缘添加一些额外的填充，以避免代理走得太近。只需稍微调整一下这些值，直到您得到满意的结果。
- en: If you test the level right now, you will notice that the agent will try to
    reach the target point but it will get stuck at the base of the detached platform;
    obviously, there isn’t a route to the destination, and your little agent may not
    make it all the way there, but it will give its best shot to get as close as it
    can.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在测试层级，您会注意到代理会尝试到达目标点，但它会在分离平台的底部卡住；显然，没有通往目的地的路线，您的小代理可能无法到达那里，但它会尽力靠近。
- en: 'Now, try to add some obstacles around the level to force your agent to climb
    the stairs – something like *Figure 5* *.4* :'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试在层级周围添加一些障碍物，迫使您的代理爬楼梯 – 就像*图 5.4*所示：
- en: '![Figure 5.4 – The gym with some obstacles](img/B31016_05_4.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – The gym with some obstacles
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'If you test the level, the agent will stop at the very first step of the stairs;
    this is happening because the step height is too high for the poor fellow! To
    solve this, open the **BP_NavMeshAgent** Blueprint, and in the **Details** panel,
    look for the **Character Movement: Walking** category and set the **Max Step Height**
    value to **55.0** .'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: This will allow the agent to take higher steps and climb the stairs. Test the
    level again and you should see the agent climbing the stairs and stopping at the
    very edge of them. The journey to the ultimate destination appears to be quite
    a challenge for our little friend!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Let’s help it out by adding a pathway to the isolated platform, where the target
    point is located.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Adding a moving platform
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make our agent reach its target point, we are going to add a moving platform;
    this will allow us to create a dynamically generated nav mesh.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Blueprint
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To do this, we will start with a static mesh and make it a Blueprint:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: In **Content Drawer** , open the **KayKit/ProtorypeBits/Models** folder and
    drag a **Primitive_Cube_Primitive_Cube** instance into the level.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Location** attribute to **(380.0, 50.0, 60.0)** so that it connects
    the staircase and the isolated yellow platforms.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Mobility** of this actor to **Movable** .
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this actor selected, convert it into a Blueprint by clicking the **Convert
    to** **Blueprint** button.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The Convert to Blueprint button](img/B31016_05_5.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – The Convert to Blueprint button
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Save the Blueprint in the **Blueprints** folder and name it **BP_MovingPlatform**
    .
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Blueprint by double-clicking the asset.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now going to add some code logic, in order to make it move.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Adding the code
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the **BP_MovingPlatform** Blueprint open, start doing the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Create a new variable of the **Vector** type and name it **StartLocation** .
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new variable of the **Float** type and name it **VerticalOffset** .
    From the **Details** panel, check the **Instance** **Editable** property.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These two variables will store the initial position of the platform and the
    vertical distance it will cover while moving, respectively. The second one has
    also been made editable from the level.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, in **Event Graph** , perform the following steps:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a **Set Start Location** node and connect its incoming execution pin to
    the outgoing execution pin of the **Event Begin** **Play** node.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Get Actor Location** node and connect its **Return Value** outgoing
    pin to the **Start Location** incoming pin of the previously added setter node.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the outgoing execution pin of the **Set Start Location** node, add a **Timeline**
    node and double-click on it to start editing.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This part of the code stores the platform’s initial position and initializes
    a timeline to set up the platform animation. The code so far is shown in *Figure
    5* *.6* :'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.6 – The first part of the graph](img/B31016_05_6.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – 图表的第一部分](img/B31016_05_6.jpg)'
- en: Figure 5.6 – The first part of the graph
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 图表的第一部分
- en: 'The timeline is going to be a simple sinusoidal curve that will control the
    vertical offset of the platform. To create the curve, perform the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 时间线将是一个简单的正弦曲线，它将控制平台的垂直偏移。要创建曲线，请执行以下步骤：
- en: Click the **+ Track** button and, from the dropdown menu, select **Add** **Float
    Track** .
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+ 轨道**按钮，从下拉菜单中选择**添加****浮点轨道**。
- en: Name the track **Alpha** .
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将轨道命名为**Alpha**。
- en: Set the **Length** value of the curve to **15.00** .
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将曲线的**长度**值设置为**15.00**。
- en: Click the **Loop** button to make the **Timeline** repeat indefinitely.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**循环**按钮使**时间线**无限重复。
- en: 'In the curve graph, add three keys by right-clicking and selecting the **Add
    key** option. Set the keys’ values, respectively, to the following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在曲线图中，通过右键单击并选择**添加关键点**选项添加三个关键点。分别将关键点的值设置为以下：
- en: '**Time** to **0.0** and **Value** to **0.0** .'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间**设置为**0.0**，**值**设置为**0.0**。'
- en: '**Time** to **7.5** and **Value** to **1.0** .'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间**设置为**7.5**，**值**设置为**1.0**。'
- en: '**Time** to **15.0** and **Value** to **0.0** .'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间**设置为**15.0**，**值**设置为**0.0**。'
- en: 'Right-click on each key and set the **KEY INTERPOLATION** value to **Auto**
    ; this will make the curve sinusoidal and not linear. The resulting curve is shown
    in *Figure 5* *.7* :'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击每个关键点，并将**关键点插值**值设置为**自动**；这将使曲线呈正弦波形而不是线性。结果曲线如图*5.7*所示：
- en: '![Figure 5.7 – Timeline curve](img/B31016_05_7.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7 – 时间线曲线](img/B31016_05_7.jpg)'
- en: Figure 5.7 – Timeline curve
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 – 时间线曲线
- en: 'Get back to **Event Graph** and you should notice that the **Timeline** node
    now has an **Alpha** outgoing pin; we will use it to control the vertical position
    of the platform. Start doing the following steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到**事件图**，你应该会注意到**时间线**节点现在有一个**Alpha**输出引脚；我们将使用它来控制平台的垂直位置。开始执行以下步骤：
- en: Add a **Get Vertical** **Offset** node.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**获取垂直偏移**节点。
- en: Add a **Get Start Location** node; right-click on its outgoing pin and select
    **Split Struct Pin** to expose the **X** , **Y** , and **Z** pins of the structure.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**获取起始位置**节点；右键单击其输出引脚，并选择**拆分结构引脚**以暴露结构中的**X**、**Y**和**Z**引脚。
- en: Add a **Multiply** node and connect its two incoming pins to the **Vertical
    Offset** outgoing pin and to the **Alpha** outgoing pin of **Timeline** .
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**乘法**节点，并将其两个输入引脚连接到**垂直偏移**输出引脚和**时间线**的**Alpha**输出引脚。
- en: Add an **Add** node and connect its two incoming pins to the outgoing pin of
    the **Multiply** node and the outgoing **Start Location Z** pin of the **Get Start**
    **Location** node.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**添加**节点，并将其两个输入引脚连接到**乘法**节点的输出引脚和**获取起始位置**节点的**起始位置 Z**输出引脚。
- en: 'Add a **Set Actor Location** node to the graph, connect its incoming execution
    pin to the outgoing execution pin of the **Timeline** node, and do the following:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个**设置演员位置**节点，将其输入执行引脚连接到**时间线**节点的输出执行引脚，并执行以下操作：
- en: Right-click on the **New Location** incoming pin and select **Split Struct Pin**
    to expose the **X** , **Y** , and **Z** pins of the structure.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**新位置**输入引脚，并选择**拆分结构引脚**以暴露结构中的**X**、**Y**和**Z**引脚。
- en: Connect the incoming **New Location X** pin to the outgoing **Start Location
    X** pin of the **Get Start** **Location** node.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**新位置 X**输入引脚连接到**获取起始位置**节点的**起始位置 X**输出引脚。
- en: Connect the incoming **New Location Y** pin to the outgoing **Start Location
    Y** pin of the **Get Start** **Location** node.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**新位置 Y**输入引脚连接到**获取起始位置**节点的**起始位置 Y**输出引脚。
- en: 'Connect the incoming **New Location Z** pin to the outgoing pin of the **Add**
    node. The result of this part of the graph is shown in *Figure 5* *.8* :'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**新位置 Z**输入引脚连接到**添加**节点的输出引脚。此部分图表的结果如图*5.8*所示：
- en: '![Figure 5.8 – The second part of the graph](img/B31016_05_8.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图5.8 – 图表的第二部分](img/B31016_05_8.jpg)'
- en: Figure 5.8 – The second part of the graph
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 – 图表的第二部分
- en: Although quite lengthy, this code is pretty straightforward; it simply uses
    the **Timeline** node to compute an offset over time and applies it to the platform’s
    **Z** position. At runtime, the platform will keep going up and down, creating
    a passage to the target point once every 15 seconds – that is, the duration of
    the loop.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管代码相当长，但它相当直观；它只是简单地使用**时间线**节点来计算随时间变化的偏移量，并将其应用于平台的**Z**位置。在运行时，平台将不断上下移动，每15秒就会到达目标点一次——即循环的持续时间。
- en: If you simulate the gym right now – with the nav mesh visible – something weird
    will happen; although the platform will be moving up and down, the nav mesh will
    stay as originally generated, leaving a floating passage.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在模拟健身房 – 导航网格可见 – 会发生一些奇怪的事情；尽管平台会上下移动，但导航网格将保持最初生成的状态，留下一个漂浮的通道。
- en: '![Figure 5.9 – Static generation](img/B31016_05_9.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 静态生成](img/B31016_05_9.jpg)'
- en: Figure 5.9 – Static generation
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 静态生成
- en: This issue is happening because the nav mesh is generated statically and won’t
    be changed at runtime; the poor little fellow will drop off while trying to reach
    its target point, believing that a passage exists!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题发生是因为导航网格是静态生成的，在运行时不会改变；这个可怜的小家伙在试图到达目标点时会掉落，因为它相信存在一条通道！
- en: Let’s fix this immediately by making the nav mesh dynamic.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即通过使导航网格动态化来解决这个问题。
- en: Making the nav mesh dynamic
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使导航网格动态化
- en: As stated at the beginning of this section, we are going to set the mesh runtime
    generation active just for this level, so we need to change the **Recast Nav Mesh**
    actor. To do this, select the **Recast Nav Mesh** actor and, in the **Details**
    panel, locate the **Runtime** category. Set the **Runtime Generation** dropdown
    value to **Dynamic** .
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节开头所述，我们将只为这个级别设置网格运行时生成活动，因此我们需要更改**Recast 导航网格**演员。为此，选择**Recast 导航网格**演员，在**详细信息**面板中找到**运行时**类别。将**运行时生成**下拉值设置为**动态**。
- en: If you test the gym, you will now see the nav mesh updating at regular intervals
    and the passage will be interrupted.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你测试健身房，你现在将看到导航网格以固定间隔更新，通道将被中断。
- en: '![Figure 5.10 – Dynamic generation](img/B31016_05_10.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 动态生成](img/B31016_05_10.jpg)'
- en: Figure 5.10 – Dynamic generation
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 动态生成
- en: 'You may notice that the agent will stop at the edge of the stairs platform
    and won’t go on when the moving platform creates the passage. To fix this small
    issue, do the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到代理会在楼梯平台的边缘停下来，当移动平台创建通道时不会继续前进。为了修复这个小问题，请执行以下操作：
- en: Open **BP_NavMeshAgent** and disconnect the **Event** **BeginPlay** node.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**BP_NavMeshAgent**并断开**事件** **BeginPlay**节点。
- en: Connect the **Move to Actor** incoming execution pin to the outgoing execution
    pin of the **Event** **Tick** node.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**移动到演员**的输入执行引脚连接到**事件** **Tick**节点的输出执行引脚。
- en: Open the **Class Defaults** tab and set the **Tick Interval (secs)** attribute
    to **0.5** , to make the update a bit sparser. The updated Blueprint is shown
    in *Figure 5* *.11* .
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**类默认值**选项卡，将**Tick 间隔（秒）**属性设置为**0.5**，使更新更稀疏。更新后的蓝图如图 *5.11* 所示。
- en: '![Figure 5.11 – Updated Blueprint](img/B31016_05_11.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 更新后的蓝图](img/B31016_05_11.jpg)'
- en: Figure 5.11 – Updated Blueprint
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 更新后的蓝图
- en: What we have done here is pretty simple; instead of executing the code once
    at the start of the game, we set it to be executed once every tick – set to half
    a second – in order to keep on setting the final destination. This may not be
    the most performance-efficient solution, but it should work well for our small
    prototype.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是相当简单的；我们不是在游戏开始时一次性执行代码，而是将其设置为每帧执行一次 – 设置为半秒 – 以保持设置最终目的地。这可能不是最性能高效的解决方案，但应该适用于我们的小型原型。
- en: Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that updating a nav mesh at runtime is heavy on computation; this
    means that you should use this feature only when necessary and stick to the static
    generation most of the time.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在运行时更新导航网格计算量很大；这意味着你应该只在必要时使用此功能，并且大多数时候坚持静态生成。
- en: Now that you have mastered creating dynamic nav meshes, your tiny little agent
    will be in for a challenge as it navigates toward its target point. Life – or
    rather, artificial life – won’t be as simple for it anymore!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了创建动态导航网格，你的小代理在向目标点导航时将面临挑战。生活 – 或者更确切地说，人工生活 – 对它来说将不再那么简单了！
- en: In the next section, I’m going to introduce you to navigation filters, a feature
    that will let you change the way an agent behaves on the nav mesh.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将向您介绍导航过滤器，这是一个功能，将允许你改变代理在导航网格上的行为方式。
- en: Influencing navigation with query filters
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用查询过滤器影响导航
- en: As already mentioned in [*Chapter 3*](B31016_03.xhtml#_idTextAnchor058) , *Presenting
    the Unreal Engine Navigation System* , with query filters, you can custom tailor
    the navigation paths of AI agents, enabling you to enhance and optimize their
    movement in the environment.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在[*第 3 章*](B31016_03.xhtml#_idTextAnchor058)中提到的，*展示虚幻引擎导航系统*，使用查询过滤器，你可以自定义调整AI代理的导航路径，使你能够增强和优化它们在环境中的移动。
- en: You may have noticed that the **Move to Actor** method in the previously created
    graph has an attribute named **Filter Class** (see *Figure 5* *.11* ); this will
    allow us to customize the way our agent behaves on a nav mesh.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在之前创建的图中，**Move to Actor**方法有一个名为**Filter Class**的属性（见*图 5.11*）；这将允许我们自定义我们的代理在导航网格上的行为方式。
- en: A filter is created by extending the **NavigationQueryFilter** class and setting
    some appropriate values, so let’s start by creating one such class and see how
    it works.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展**NavigationQueryFilter**类并设置一些适当的值来创建一个过滤器，因此让我们先创建这样一个类并看看它的工作方式。
- en: Creating the level
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建级别
- en: 'As a first step, we will need a gym for testing filters; in this case, we are
    going to duplicate a pre-existing one and tweak it a bit:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们需要一个用于测试过滤器的健身房；在这种情况下，我们将复制一个现有的一个并稍作调整：
- en: Duplicate the **Gym_NavMesh_02** map, rename it **Gym_NavMesh_05** , and open
    it.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**Gym_NavMesh_02**地图，将其重命名为**Gym_NavMesh_05**，然后打开它。
- en: Remove all the obstacles from the bridge – if any.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从桥梁上移除所有障碍物（如果有）。
- en: Duplicate the agent and put it at the side of the first one, on the blue tile.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制代理并将其放在第一个代理旁边，在蓝色瓷砖上。
- en: 'To make the agents recognizable, you may wish to change the material of the
    duplicate; in my case, I opted for **MI_Prototype_B** . The final level should
    be like the one depicted in *Figure 5* *.12* :'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使代理易于识别，你可能希望更改复制的材质；在我的情况下，我选择了**MI_Prototype_B**。最终级别应该像*图 5.12*中描述的那样：
- en: '![Figure 5.12 – The base gym](img/B31016_05_12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 基础健身房](img/B31016_05_12.jpg)'
- en: Figure 5.12 – The base gym
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 基础健身房
- en: If you test the level, unsurprisingly, both agents will go toward the bridge,
    traverse it, and get to the target point.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你测试这个级别，不出所料，两个代理都会走向桥梁，穿越它，并到达目标点。
- en: Let’s spice things up a bit, shall we?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微增加一些趣味性，怎么样？
- en: Creating the query filter class
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建查询过滤器类
- en: 'We are now going to create a query filter that will override the way navigation
    modifiers are considered; we want the mud area to be considered less costly and
    easily traversable, but just for a single agent. To do this, follow these steps:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个查询过滤器，将覆盖导航修改器的考虑方式；我们希望泥泞区域被视为成本较低且易于穿越，但仅针对单个代理。为此，请按照以下步骤操作：
- en: Open **Content Drawer** and, in the **Blueprints** folder, create a new Blueprint
    class of the **Navigation Query** **Filter** type.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**内容抽屉**，在**蓝图**文件夹中创建一个新的**导航查询****过滤器**类型的蓝图类。
- en: Name the asset **NavFilter_MudWalker** and double-click on it to open it.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资产命名为**NavFilter_MudWalker**，双击它以打开它。
- en: In the **Details** panel, you will see an **Areas** array attribute; click on
    the **+** button to add an element.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**细节**面板中，你会看到一个**区域**数组属性；点击**+**按钮添加一个元素。
- en: 'Open the element and do the following:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开元素并执行以下操作：
- en: From the **Area Class** dropdown menu, select **NavArea_Mud** .
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**区域类**下拉菜单中选择**NavArea_Mud**。
- en: Check the **Travel Cost Override** checkbox and set its value to **1.0** .
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开**旅行成本覆盖**复选框并将其值设置为**1.0**。
- en: Check the **Entering Cost Override** checkbox and set its value to **0.0** .
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开**进入成本覆盖**复选框并将其值设置为**0.0**。
- en: '![Figure 5.13 – Query filter settings](img/B31016_05_13.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 查询过滤器设置](img/B31016_05_13.jpg)'
- en: Figure 5.13 – Query filter settings
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 查询过滤器设置
- en: We are basically creating a different cost for the muddy area of our level –
    that is, where the **NavArea_Mud** modifiers are placed.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上在创建我们级别泥泞区域的不同的成本 – 也就是说，**NavArea_Mud**修改器放置的地方。
- en: We now need to modify the AI agent a bit, so it will accept this kind of modifier.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要稍微修改一下AI代理，以便它能够接受这种修改器。
- en: Modifying the agent
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改代理
- en: 'We need to make a slight modification to the agent, so open the **BP_NavMeshAgent**
    Blueprint class and do the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对代理进行一些轻微的修改，因此打开**BP_NavMeshAgent**蓝图类并执行以下操作：
- en: From the **Move to Actor** node, click and drag on the **Filter Class** incoming
    pin, and, once released, select **Promote** **to variable** .
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Move to Actor**节点，点击并拖动**Filter Class**输入引脚，并在释放后选择**提升**到**变量**。
- en: Name the newly created variable **FilterClass** and make it **Instance Editable**
    by checking the corresponding attribute in the **Details** panel.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的变量命名为**FilterClass**，并在**细节**面板中检查相应的属性使其**可实例编辑**。
- en: Compile the **Blueprint** and double-check in the **Details** panel that **Default
    Value** is set to **None** .
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译**蓝图**，并在**细节**面板中再次确认**默认值**设置为**无**。
- en: Whenever you tell the agent to move to a target point, it will use the **FilterClass**
    variable – if set to any value – to override the nav mesh cost rules.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时你告诉智能体移动到目标点，它都会使用**FilterClass**变量——如果设置为任何值——来覆盖寻路网格成本规则。
- en: Let’s test it out in action. Open your gym and select the second agent; then,
    from the **Details** panel, from the **Filter Class** dropdown, select **NavFilter_MudWalker**
    .
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在实际操作中测试一下。打开你的健身房，选择第二个智能体；然后，从**详细信息**面板中，从**过滤器类别**下拉菜单中选择**NavFilter_MudWalker**。
- en: Test the gym and you will now notice the second agent go straight to the target
    point, moving through the mud. This cheeky AI agent has gone rogue and decided
    to play dirty, hasn’t it?
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 测试健身房，你现在会注意到第二个智能体直接移动到目标点，穿过泥地。这个顽皮的AI智能体已经叛变，决定玩弄手段，不是吗？
- en: In this section, you have discovered the ability to override the cost of a nav
    mesh, which grants you significant power in creating highly customizable AI characters.
    With this newfound capability, you can make your AI characters behave distinctively
    and stand out from the rest of the crowd. I am pretty confident you will understand
    that this opens up a world of possibilities for creating unique and dynamic gameplay
    experiences.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你发现了覆盖寻路网格成本的能力，这为你创建高度可定制的AI角色提供了显著的力量。有了这项新能力，你可以让你的AI角色表现出独特的个性，并从人群中脱颖而出。我相当确信你会理解这为创建独特和动态的游戏体验开辟了一个全新的世界。
- en: In the next section, I will show you another important technique in AI pathfinding,
    and that’s how to make your AI agents avoid each other.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将向你展示AI寻路中的另一个重要技术，那就是如何让你的AI智能体避免彼此。
- en: Implementing agent avoidance
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现智能体避免
- en: It comes as no surprise that, most of the time, you will be working with more
    than a single agent in a level, and this means there will be a high probability
    that they will have crossing pathfinding rules; this means that your poor AI entities
    will be at a significant risk of colliding with each other. As funny as it may
    be, I guess that’s not the intended behavior in your game.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，大多数时候，你将在一个关卡中与多个智能体一起工作，这意味着他们很可能会有交叉的寻路规则；这意味着你的AI实体有很大的风险相互碰撞。虽然这可能很有趣，但我猜这并不是你在游戏中的预期行为。
- en: That’s why Unreal Engine provides an out-of-the-box – but disabled by default
    – avoidance system. In this section, we are going to consider how to make AI agents
    avoid each other.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，Unreal Engine提供了一个开箱即用的——但默认情况下是禁用的——避免系统。在本节中，我们将考虑如何让AI智能体避免彼此。
- en: As always, we will start with a brand-new gym.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们将从一个全新的健身房开始。
- en: Creating the level
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建关卡
- en: 'As a first step, we will need a gym with some obstacles around. To get started,
    do the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们需要一个带有一些障碍物的健身房。为了开始，请执行以下操作：
- en: From the main menu, select **File** | **New Level** .
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单中选择**文件** | **新建关卡**。
- en: Navigate to the **Maps/LevelInstances** folder and drag an instance of **LI_Lighting**
    inside your level; set its transform **Location** value to **(0,** **0, 0)** .
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/LevelInstances**文件夹，并将**LI_Lighting**实例拖动到你的关卡中；将其变换的**位置**值设置为**(0,
    0, 0)**。
- en: Navigate to the **Maps/PackedLevelActors** folder and drag an instance of **PLA_Lab_05**
    inside your level; set its transform **Location** value to **(0,** **0, 0)** .
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/PackedLevelActors**文件夹，并将**PLA_Lab_05**实例拖动到你的关卡中；将其变换的**位置**值设置为**(0,
    0, 0)**。
- en: Save the level in the **Maps** folder and name it **Gym_NavMesh_06** .
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Maps**文件夹中保存关卡，并将其命名为**Gym_NavMesh_06**。
- en: 'This gym is slightly bigger than the previous ones and has some obstacles to
    make things more interesting. Additionally, there are eight blue tiles – we’re
    going to use eight agents – as depicted in *Figure 5* *.14* :'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这个健身房比之前的要大一些，并有一些障碍物使事情更有趣。此外，还有八个蓝色方块——我们将使用八个智能体——如*图5.14*所示：
- en: '![Figure 5.14 – The gym](img/B31016_05_14.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图5.14 – 健身房](img/B31016_05_14.jpg)'
- en: Figure 5.14 – The gym
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 – 健身房
- en: Adding the agents
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加智能体
- en: 'As previously mentioned, we are going to add several agents – eight in total
    – to check how they behave in a crowded environment. So, follow these steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将添加几个智能体——总共八个——以检查它们在拥挤环境中的行为。因此，请按照以下步骤操作：
- en: Add eight instances of the **BP_NavMeshAgent** Blueprint on the level and put
    each one in a blue tile in the level.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关卡中添加八个**BP_NavMeshAgent**蓝图实例，并将每个实例放入关卡中的一个蓝色方块中。
- en: Add eight instances of the **NS_Target** Niagara system and put them just behind
    each blue tile.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加八个**NS_Target** Niagara系统实例，并将它们放在每个蓝色方块后面。
- en: 'For each agent, set the **Target Actor** property value to the **NS_Target**
    Niagara system that is on the opposite side of the gym. The level should now look
    like *Figure 5* *.15* :'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个代理，将**目标演员**属性值设置为位于健身房另一侧的**NS_Target** Niagara 系统。现在关卡应该看起来像*图 5.15*：
- en: '![Figure 5.15 – The finished gym](img/B31016_05_15.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.15 – 完成的健身房](img/B31016_05_15.jpg)'
- en: Figure 5.15 – The finished gym
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 完成的健身房
- en: 'If you try testing the gym, chances are that some of your agents will collide
    with some other agent moving in the opposite direction, as depicted in *Figure
    5* *.16* :'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试测试健身房，很可能会发现一些代理会与图中*5.16*所示的反方向移动的其他代理相撞：
- en: '![Figure 5.16 – Ouch, this hurts!](img/B31016_05_16.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.16 – 哎呀，这很疼！](img/B31016_05_16.jpg)'
- en: Figure 5.16 – Ouch, this hurts!
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 – 哎呀，这很疼！
- en: Luckily, our agents are geared up with safety helmets, unlike the characters
    in your game who might be cruising without any protection! That’s why we are going
    to make the agents’ pathfinding slightly cleverer.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们的代理配备了安全头盔，而你的游戏中的角色可能没有任何保护地四处游荡！这就是为什么我们要使代理的路径寻找稍微聪明一点。
- en: Activating avoidance
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活避障
- en: 'Once you have opened the **BP_NavMeshAgent** Blueprint, you are ready to enable
    the avoidance system. To do this, follow these steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开了**BP_NavMeshAgent**蓝图，你就可以启用避障系统。为此，请按照以下步骤操作：
- en: 'In the **Details** panel, locate the **Character Movement: Avoidance** category
    and check the **Use** **RVOAvoidance** property.'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**详细信息**面板中，找到**角色移动：避障**类别，并检查**使用** **RVOAvoidance**属性。
- en: Set **Avoidance Consideration Radius** to **2000.0** .
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**避障考虑半径**设置为**2000.0**。
- en: As stated in [*Chapter 3*](B31016_03.xhtml#_idTextAnchor058) , *Presenting the
    Unreal Engine Navigation System* , RVO refers to a feature that enables AI agents
    to avoid collisions with each other.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第 3 章*](B31016_03.xhtml#_idTextAnchor058)所述，*介绍虚幻引擎导航系统*，RVO指的是一个功能，它使 AI
    代理能够避免相互碰撞。
- en: When the **Use RVOAvoidance** property is enabled for a character or agent,
    it allows them to dynamically adjust their movement to avoid colliding with other
    agents in the environment. The **Avoidance Consideration Radius** property is
    used to define the radius within which an agent considers other agents for collision
    avoidance.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当为角色或代理启用**使用 RVOAvoidance**属性时，它允许它们动态调整其移动以避免与环境中的其他代理发生碰撞。**避障考虑半径**属性用于定义代理考虑其他代理进行避障的半径。
- en: Testing the gym at this point will let you see the avoidance system at work;
    agents will avoid each other while reaching their target point.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在此测试健身房将让你看到避障系统在工作；代理会在到达目标点的同时避免彼此。
- en: Testing a worst-case scenario
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试最坏情况
- en: 'Let’s test something different; we will be creating a gym where spaces will
    be a bit more challenging for the agents. The new gym will be a duplicate of the
    previous one. Start by following these steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一些不同的事情；我们将创建一个对代理来说空间更具挑战性的健身房。新的健身房将是上一个的副本。首先按照以下步骤操作：
- en: Duplicate the **Gym_NavMesh_06** map and call it **Gym_NavMesh_07** .
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**Gym_NavMesh_06**地图，并将其命名为**Gym_NavMesh_07**。
- en: 'Add some obstacles that will create a narrow path, almost forcing the characters
    to follow a single, specific route. My gym is shown in *Figure 5* *.17* :'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些障碍物，将创造一个狭窄的路径，几乎迫使角色遵循单一、特定的路线。我的健身房在*图 5.17*中显示：
- en: '![Figure 5.17 – Worst-case scenario](img/B31016_05_17.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.17 – 最坏情况](img/B31016_05_17.jpg)'
- en: Figure 5.17 – Worst-case scenario
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – 最坏情况
- en: Test the game, and you will witness all the agents diligently making efforts
    to avoid colliding with one another. You can make a countertest and uncheck the
    **Use RVOAvoidance** property; you will notice that all the agents initially cluster
    together and collide with each other before eventually resolving their paths and
    reaching their respective target points.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 测试游戏，你会看到所有代理都在努力避免相互碰撞。你可以进行反测试，取消选中**使用 RVOAvoidance**属性；你会注意到所有代理最初聚集在一起，然后相互碰撞，最终解决路径并到达各自的目标点。
- en: '![Figure 5.18 – Mass collision](img/B31016_05_18.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – 大规模碰撞](img/B31016_05_18.jpg)'
- en: Figure 5.18 – Mass collision
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 大规模碰撞
- en: In this section, you have learned how to implement collision avoidance for agents
    moving on a nav mesh, ensuring that they can successfully navigate while actively
    avoiding collisions with other agents.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何为在导航网格上移动的代理实现避障，确保它们可以在积极避免与其他代理碰撞的同时成功导航。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we were introduced to some more advanced features of the Unreal
    Engine pathfinding system. Firstly, we saw how to create a nav mesh that can be
    updated at runtime. Next, we saw how you can override the way an agent interprets
    the cost of a nav mesh section. Finally, we saw how to use the built-in avoidance
    system so that AI agents won’t collide with each other.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了虚幻引擎寻路系统的一些更高级的功能。首先，我们看到了如何创建一个可以在运行时更新的导航网格。接下来，我们看到了如何覆盖代理解释导航网格部分成本的方式。最后，我们看到了如何使用内置的避障系统，以便AI代理不会相互碰撞。
- en: 'In the upcoming chapter, we will explore the final component of the pathfinding
    system: debugging and optimization techniques. We will explore ways to identify
    and resolve any issues that may arise and optimize the system for improved performance.
    Get ready for an exciting and informative session!'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，我们将探讨寻路系统的最后一个组成部分：调试和优化技术。我们将探讨如何识别和解决可能出现的任何问题，并优化系统以提高性能。准备好迎接一个既激动人心又富有信息量的会议吧！
