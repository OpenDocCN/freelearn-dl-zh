["```py\n{\n```", "```py\n  \"fields\": [\n```", "```py\n\t{\n```", "```py\n  \t\"numDimensions\": 1024,\n```", "```py\n  \t\"path\": \"semantic_embedding\",\n```", "```py\n  \t\"similarity\": \"cosine\",\n```", "```py\n  \t\"type\": \"vector\"\n```", "```py\n\t}\n```", "```py\n  ]\n```", "```py\n}\n```", "```py\n{\n```", "```py\n  \"fields\": [\n```", "```py\n\t{\n```", "```py\n  \t\"numDimensions\": 768,\n```", "```py\n  \t\"path\": \"content_embedding\",\n```", "```py\n  \t\"similarity\": \"cosine\",\n```", "```py\n  \t\"type\": \"vector\"\n```", "```py\n\t}\n```", "```py\n  ]\n```", "```py\n}\n```", "```py\n{\n```", "```py\n  \"fields\": [\n```", "```py\n    {\n```", "```py\n      \"numDimensions\": 1024,\n```", "```py\n      \"path\": \"semantic_embedding\",\n```", "```py\n      \"similarity\": \"cosine\",\n```", "```py\n      \"type\": \"vector\"\n```", "```py\n    },\n```", "```py\n    {\n```", "```py\n      \"path\": \"brand\",\n```", "```py\n      \"type\": \"filter\"\n```", "```py\n    },\n```", "```py\n    {\n```", "```py\n      \"path\": \"subscription_type\",\n```", "```py\n      \"type\": \"filter\"\n```", "```py\n    }\n```", "```py\n  ]\n```", "```py\n}\n```", "```py\n{\n```", "```py\n  \"fields\": [\n```", "```py\n    {\n```", "```py\n      \"numDimensions\": 768,\n```", "```py\n      \"path\": \"content_embedding\",\n```", "```py\n      \"similarity\": \"cosine\",\n```", "```py\n      \"type\": \"vector\"\n```", "```py\n    },\n```", "```py\n    {\n```", "```py\n      \"path\": \"brand\",\n```", "```py\n      \"type\": \"filter\"\n```", "```py\n    },\n```", "```py\n    {\n```", "```py\n      \"path\": \"subscription_type\",\n```", "```py\n      \"type\": \"filter\"\n```", "```py\n    },\n```", "```py\n    {\n```", "```py\n      \"path\": \"_id.article_id\",\n```", "```py\n      \"type\": \"filter\"\n```", "```py\n    }\n```", "```py\n  ]\n```", "```py\n}\n```", "```py\n{\n```", "```py\n  \"mappings\": {\n```", "```py\n    \"dynamic\": false,\n```", "```py\n    \"fields\": {\n```", "```py\n      \"brand\": {\n```", "```py\n        \"normalizer\": \"lowercase\",\n```", "```py\n        \"type\": \"token\"\n```", "```py\n      },\n```", "```py\n      \"subscription_type\": {\n```", "```py\n        \"normalizer\": \"lowercase\",\n```", "```py\n        \"type\": \"token\"\n```", "```py\n      },\n```", "```py\n      \"summary\": {\n```", "```py\n        \"type\": \"string\"\n```", "```py\n      },\n```", "```py\n      \"tags\": {\n```", "```py\n        \"normalizer\": \"lowercase\",\n```", "```py\n        \"type\": \"token\"\n```", "```py\n      },\n```", "```py\n      \"title\": {\n```", "```py\n        \"type\": \"string\"\n```", "```py\n      }\n```", "```py\n    }\n```", "```py\n  }\n```", "```py\n}\n```", "```py\n{ \"github_id\" : \"user1\", \"languages\" : [\"python\", \"csharp\"], …}\n```", "```py\n{ \"github_id\" : \"user2\", \"languages\" : [\"python\", \"cpp\"], …}…\n```", "```py\n{ \"_id\" : ObjectId(\"669…ab8\"), \"github_id\" : \"user1\", … }\n```", "```py\n{ \"_id\" : ObjectId(\"669…ab9\"), \"github_id\" : \"user2\", … }…\n```", "```py\nmongoimport --uri=<connection string to Atlas cluster>\n```", "```py\n--db=mdn --collection=subscribers --mode=merge\n```", "```py\n--file=github-20240719.json --upsertFields=github_id\n```", "```py\n--numInsertionWorkers=4\n```", "```py\n{ \"_id\" : ObjectId(\"669…ab8\"), \"github_id\" : \"user1\", \"languages\" : [\"python\", \"csharp\"], … }\n```", "```py\n{ \"_id\" : ObjectId(\"669…ab9\"), \"github_id\" : \"user2\", \"languages\" : [\"python\", \"cpp\"], … }…\n```", "```py\nimport os\nfrom langchain_openai import OpenAIEmbeddings\nfrom pymongo import MongoClient\nfrom pymongo.errors import PyMongoError\n# Set the OpenAI API key as an environment variable\nos.environ[\"OPENAI_API_KEY\"] = \"YOUR-OPENAI-API-KEY\"\n# Define the MongoDB Atlas connection string\nATLAS_CONNECTION_STRING = \"YOUR-MONGODB_ATLAS-CONNSTRING\"\n# Create a MongoClient instance to connect to MongoDB Atlas\nclient = MongoClient(\n    ATLAS_CONNECTION_STRING, tls=True, tlsAllowInvalidCertificates=True\n)\n# Select the 'articles' collection from the 'mdn' database\ncoll = client[\"mdn\"][\"articles\"]\n# Instantiate the OpenAIEmbeddings model with specified parameters\nembedding_model = OpenAIEmbeddings(\n    model=\"text-embedding-3-large\", dimensions=1024, disallowed_special=()\n)\n# Define a function to handle changes detected in the MongoDB collection\ndef handle_changes(change):\n    # Extract the document ID from the change event\n    doc_id = change[\"documentKey\"][\"_id\"]\n    # Create a filter to identify the document in the collection\n    doc_filter = {\n        \"_id\": doc_id\n    }\n    # Combine the title and summary of the document into a single text string\n    text = [change[\"fullDocument\"][\"title\"] + \" \" + change[\"fullDocument\"][\"summary\"]]\n    # Generate embeddings for the text\n    embeddings = embedding_model.embed_documents(text)\n    # Create an update document to set the 'semantic_embedding' field with the generated embeddings\n    set_fields = {\n        \"$set\": {\n            \"semantic_embedding\": embeddings[0]\n        }\n    }\n    # Update the document in the collection with the new embeddings\n    coll.update_one(doc_filter, set_fields)\n    print(f\"Updated embeddings for document {doc_id}\")\n# Start monitoring the MongoDB collection for changes\ntry:\n    # Define a stream filter to match insert and update operations affecting the title or summary fields\n    stream_filter = [\n        {\n            \"$match\": {\n                \"$or\": [\n                    {\"operationType\": \"insert\"},\n                    {\n                        \"$and\": [\n                            {\"operationType\": \"update\"},\n                            {\n                                \"$or\": [\n                                    {\n                                        \"updateDescription.updatedFields.title\": {\n                                            \"$exists\": True\n                                        }\n                                    },\n                                    {\n                                        \"updateDescription.updatedFields.summary\": {\n                                            \"$exists\": True\n                                        }\n                                    },\n                                ]\n                            },\n                        ]\n                    },\n                ]\n            }\n        }\n    ]\n    # Open a change stream to watch for changes in the collection\n    with coll.watch(stream_filter, full_document=\"updateLookup\") as stream:\n        print(\"Listening for changes...\")\n        for change in stream:\n            print(f\"Change detected: {change}. Processing\")\n            handle_changes(change)\nexcept PyMongoError as e:\n    # Print an error message if a PyMongoError occurs\n    print(f\"An error occurred: {e}\")\nfinally:\n    # Close the MongoDB client connection\n    client.close()\n```"]