["```py\npip3 install prettytable==3.10.2\n```", "```py\nfrom prettytable import PrettyTable\ninput_relevance_guardrail_data = [\n    {\n        \"input\": \"What should I do in New York City in July?\",\n        \"output\": True,\n        \"expected\": True\n    },\n{\n        \"input\": \"Can you help me with my math homework?\",\n        \"output\": False,\n        \"expected\": False\n    },\n    {\n        \"input\": \"What's the capital of France?\",\n        \"output\": False,\n        \"expected\": True\n    },\n]\n# assertion-based evaluation\ndef evaluate_correctness(output, expected):\n    return 1 if output == expected else 0\ndef calculate_average(scores):\n    return sum(scores) / len(scores)\ndef create_table(data):\n    table = PrettyTable()\n    table.field_names = [\"Input\", \"Output\", \"Expected\", \"Score\"]\n    scores = [evaluate_correctness(case[\"output\"], case[\"expected\"]) for case in data]\n    for case, score in zip(data, scores):\n        table.add_row([case[\"input\"], case[\"output\"], case[\"expected\"], score])\n# Add a blank row for visual separation\ntable.add_row([\"\", \"\", \"\", \"\"])\n    # Add average score to bottom of the table\n    average_score = calculate_average(scores)\n    table.add_row([\"Average\", \"\", \"\", f\"{average_score:.4f}\"])\n    return table\n# Create and print the table\nresult_table = create_table(input_relevance_guardrail_data)\nprint(result_table)\n```", "```py\n+--------------------------------------------+--------+----------+--------+\n|                   Input                    | Output | Expected | Score  |\n+--------------------------------------------+--------+----------+--------+\n| What should I do in New York City in July? |  True  |   True   |   1    |\n|   Can you help me with my math homework?   | False  |  False   |   1    |\n|       What's the capital of France?        | False  |   True   |   0    |\n|                                            |        |          |        |\n|                  Average                   |        |          | 0.6667 |\n+--------------------------------------------+--------+----------+--------+\n```", "```py\npip3 install prettytable==3.10.2 sacrebleu==2.4.2 rouge-score==0.1.2\n```", "```py\nfrom prettytable import PrettyTable\nimport sacrebleu\nfrom rouge_score import rouge_scorer\nevaluation_data = [\n    {\n        \"input\": \"What should I do in New York City in July?\",\n        \"output\": \"Check out Times Square, go to an outdoor concert, and visit the Statue of Liberty.\",\n        \"golden_answer\": \"Explore Central Park, attend outdoor concerts, and visit rooftop bars.\",\n        \"contexts\": [\n            \"Times Square is known for its Broadway theaters, bright lights, and bustling atmosphere.\",\n            \"Outdoor concerts in Central Park are popular summer events attracting many visitors.\",\n            \"The Statue of Liberty is a symbol of freedom and a must-see landmark in NYC.\"\n        ]\n    },\n    {\n        \"input\": \"Can you help me with my math homework?\",\n        \"output\": \"I'm designed to assist with travel queries. For math help, try using online resources like Khan Academy or Mathway.\",\n        \"golden_answer\": \"I am a travel assistant chatbot, so I cannot help you with your math homework.\",\n        \"contexts\": []\n    },\n    {\n        \"input\": \"What's the capital of France?\",\n        \"output\": \"The capital of France is Paris.\",\n        \"golden_answer\": \"Paris is the capital of France.\",\n        \"contexts\": [\n            \"Paris, known as the City of Light, is the most populous city of France.\",\n            \"European capitals: Paris, France; Berlin, Germany; Madrid, Spain\",\n        ]\n    }\n]\n# Statistical evaluators\ndef evaluate_bleu(output, golden_answer):\n    bleu = sacrebleu.corpus_bleu([output], [[golden_answer]])\n    return bleu.score / 100  # Normalize BLEU score to be between 0 and 1\ndef evaluate_rouge(output, contexts):\n    context_text = (\"\\n\").join(contexts)\n    scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)\n    scores = scorer.score(context_text, output)\n    return scores['rougeL'].fmeasure\ndef calculate_average(scores):\n    return sum(scores) / len(scores)\n# truncate strings for easier printing in table\ndef truncate_string(s, max_length=10):\n    return (s[:max_length] + '...') if len(s) > max_length else s\ndef create_table(data):\n    table = PrettyTable()\n    table.field_names = [\"Input\", \"Output\", \"Golden Answer\", \"# Contexts\", \"BLEU\", \"ROUGE\"]\n    bleu_scores = [evaluate_bleu(case[\"output\"], case[\"golden_answer\"]) for case in data]\n    rouge_scores = [evaluate_rouge(case[\"output\"], case[\"contexts\"]) for case in data]\n    for case, bleu, rouge in zip(data, bleu_scores, rouge_scores):\n        table.add_row([\n            truncate_string(case[\"input\"]),\n            truncate_string(case[\"output\"]),\n            truncate_string(case[\"golden_answer\"]),\n            len(case[\"contexts\"]),\n            f\"{bleu:.4f}\",\n            f\"{rouge:.4f}\"])\n    # Add a blank row for visual separation\n    table.add_row([\"\", \"\", \"\", \"\", \"\", \"\"])\n    # Add the average score to bottom of the table\n    average_bleu = calculate_average(bleu_scores)\n    average_rouge = calculate_average(rouge_scores)\n    table.add_row([\"Average\", \"\", \"\", \"\", f\"{average_bleu:.4f}\", f\"{average_rouge:.4f}\"])\n    return table\n# Create and print the table\nresult_table = create_table(evaluation_data)\nprint(result_table)\n```", "```py\n+---------------+---------------+---------------+------------+--------+--------+\n|     Input     |     Output    | Golden Answer | # Contexts |  BLEU  | ROUGE  |\n+---------------+---------------+---------------+------------+--------+--------+\n| What shoul... | Check out ... | Explore Ce... |     3      | 0.0951 | 0.2857 |\n| Can you he... | I'm design... | I am a tra... |     0      | 0.0270 | 0.0000 |\n| What's the... | The capita... | Paris is t... |     2      | 0.2907 | 0.2857 |\n|               |               |               |            |        |        |\n|    Average    |               |               |            | 0.1376 | 0.1905 |\n+---------------+---------------+---------------+------------+--------+--------+\n```", "```py\npip3 install prettytable==3.10.2 openai==1.39.0\n```", "```py\nimport json\nfrom prettytable import PrettyTable\nimport openai\nimport os\n# Add your OpenAI API key to call the model\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n# Data to evaluate\nevaluation_data = [\n    {\n        \"input\": \"What should I do in New York City in July?\",\n        \"output\": \"Check out Times Square, go to an outdoor concert, and visit the Statue of Liberty.\",\n    },\n    {\n        \"input\": \"Can you help me with my math homework?\",\n        \"output\": \"I'm designed to assist with travel queries. For math help, try using online resources like Khan Academy or Mathway.\",\n    },\n    {\n        \"input\": \"What's the capital of France?\",\n        \"output\": \"The capital of France is Paris.\",\n    }\n]\n# LLM-as-a-Judge Evaluation metric\n# that assesses if the output includes a recommendation.\ndef evaluate_includes_recommendation(input, output):\n    # Few-shot examples to help the model produce better answers.\n    few_shot_examples = [\n        {\n            \"input\": \"What are some good restaurants in Paris?\",\n            \"output\": \"Try Le Jules Verne for an upscale dining experience, or visit Le Relais de l'Entrecôte for a classic steak frites.\",\n            \"recommendation\": True\n        },\n        {\n            \"input\": \"Where should I stay in London?\",\n            \"output\": \"Consider staying at The Ritz for luxury or the Hoxton for a more budget-friendly option.\",\n            \"recommendation\": True\n        },\n        {\n            \"input\": \"What's the weather like in Tokyo in winter?\",\n            \"output\": \"In winter, Tokyo is generally cool with temperatures ranging from 2°C to 12°C. While you're there, consider visiting the hot springs (onsen) for a warm and relaxing experience.\",\n            \"recommendation\": True\n        },\n        {\n            \"input\": \"What's the population of Berlin?\",\n            \"output\": \"The population of Berlin is approximately 3.6 million.\",\n            \"recommendation\": False\n        },\n        {\n            \"input\": \"What's the currency used in Japan?\",\n            \"output\": \"The currency used in Japan is the Japanese Yen (JPY).\",\n            \"recommendation\": False\n        }\n    ]\n    # Constructing the prompt\n    prompt = \"\"\"Determine whether the following output includes a recommendation based on the input.\nFormat response as a JSON object with the shape { \"recommendation\": boolean }.\nExamples:\n\"\"\"\n    # Append few-shot examples to the prompt.\n    for example in few_shot_examples:\n        prompt += f\"\"\"Input: {example['input']}\nOutput: {example['output']}\nRecommendation: {{ \"recommendation\": {str(example['recommendation']).lower()} }}\n\"\"\"\n    prompt += f\"\"\"Input: {input}\nOutput: {output}\nRecommendation:\"\"\"\n    # Call the OpenAI API\n    response = openai.chat.completions.create(\n        # Use strong evaluator LLM\n        model=\"gpt-4o\",\n        ## Format response as JSON, so it is easier to parse\n        response_format={ \"type\": \"json_object\" },\n        messages=[{ \"role\": \"user\", \"content\": prompt }],\n        # Make sure temperature=0 for consistent outputs\n        temperature=0\n    )\n    recommendation = json.loads(response.choices[0].message.content)[\"recommendation\"]\n    return 1 if recommendation == True else 0\ndef calculate_average(scores):\n    return sum(scores) / len(scores)\n# truncate strings for easier printing in table\ndef truncate_string(s, max_length=30):\n    return (s[:max_length] + '...') if len(s) > max_length else s\ndef create_table(data):\n    table = PrettyTable()\n    table.field_names = [\"Input\", \"Output\", \"Score\"]\n    scores = [evaluate_includes_recommendation(case[\"input\"], case[\"output\"]) for case in data]\n    for case, score in zip(data, scores):\n        table.add_row([\n            truncate_string(case[\"input\"]),\n            truncate_string(case[\"output\"]),\n            score])\n    # Add a blank row for visual separation\n    table.add_row([\"\", \"\", \"\"])\n    # Add the average score to bottom of the table\n    average = calculate_average(scores)\n    table.add_row([\"Average\", \"\", f\"{average:.4f}\"])\n    return table\n# Create and print the table\nresult_table = create_table(evaluation_data)\nprint(result_table)\n```", "```py\n+-----------------------------------+-----------------------------------+--------+\n|               Input               |               Output              | Score  |\n+-----------------------------------+-----------------------------------+--------+\n| What should I do in New York C... | Check out Times Square, go to ... |   1    |\n| Can you help me with my math h... | I'm designed to assist with tr... |   1    |\n|   What's the capital of France?   | The capital of France is Paris... |   0    |\n|                                   |                                   |        |\n|              Average              |                                   | 0.6667 |\n+-----------------------------------+-----------------------------------+--------+\n```", "```py\npip3 install ragas==0.1.13 langchain-openai==0.1.20 datasets==2.20.0\n```", "```py\nfrom ragas.metrics import faithfulness\nfrom ragas import evaluate\nfrom datasets import Dataset\nfrom langchain_openai.chat_models import ChatOpenAI\nimport os\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\nevaluation_data = [\n    {\n        \"input\": \"What should I do in New York City in July?\",\n        \"output\": \"Check out Times Square, go to an outdoor concert, and visit the Statue of Liberty.\",\n        \"contexts\": [\n            \"Times Square is known for its Broadway theaters, bright lights, and bustling atmosphere.\",\n            \"Outdoor concerts in Central Park are popular summer events attracting many visitors.\",\n            \"The Statue of Liberty is a symbol of freedom and a must-see landmark in NYC.\"\n        ]\n    },\n    {\n        \"input\": \"Can you help me with my math homework?\",\n        \"output\": \"I'm designed to assist with travel queries. For math help, try using online resources like Khan Academy or Mathway.\",\n        \"contexts\": []\n    },\n    {\n        \"input\": \"What's the capital of France?\",\n        \"output\": \"The capital of France is Paris.\",\n        \"contexts\": [\n            \"Paris, known as the City of Light, is the most populous city of France.\",\n            \"European capitals: Paris, France; Berlin, Germany; Madrid, Spain\",\n        ]\n    }\n]\n# Format our dataset for Ragas data structure\ndef prepare_data_for_ragas(data_list):\n    data_table = {\n        'question': [],\n        'answer': [],\n        'contexts': []\n    }\n    for data_item in data_list:\n        data_table[\"question\"].append(data_item[\"input\"])\n        data_table[\"answer\"].append(data_item[\"output\"])\n        data_table[\"contexts\"].append(data_item[\"contexts\"])\n    return data_table\ndef create_report(data):\n    ragas_dict = prepare_data_for_ragas(data)\n    dataset = Dataset.from_dict(prepare_data_for_ragas(data))\n    langchain_llm = ChatOpenAI(\n        model_name=\"gpt-4o-mini\",\n        api_key=openai_api_key)\n    score = evaluate(dataset, metrics=[faithfulness], llm=langchain_llm)\n    return score\n# Create and print the table\nresults = create_report(evaluation_data)\nprint(results.to_pandas())\nprint(results)\n```", "```py\nEvaluating: 100%\n 3/3 [00:05<00:00,  1.72s/it]\n                                    question  \\\n0  What should I do in New York City in July?\n1      Can you help me with my math homework?\n2               What's the capital of France?\n                                              answer  \\\n0  Check out Times Square, go to an outdoor conce...\n1  I'm designed to assist with travel queries. Fo...\n2                    The capital of France is Paris.\n                                            contexts  faithfulness\n0  [Times Square is known for its Broadway theate...           1.0\n1                                                 []           0.0\n2  [Paris, known as the City of Light, is the mos...           1.0\n{'faithfulness': 0.6667}\n```", "```py\npip3 install ragas==0.1.13 langchain-openai==0.1.20 datasets==2.20.0\n```", "```py\nfrom ragas.metrics import answer_relevancy\nfrom ragas import evaluate\nfrom datasets import Dataset\nfrom langchain_openai.chat_models import ChatOpenAI\nfrom langchain_openai.embeddings import OpenAIEmbeddings\nimport os\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\nevaluation_data = [\n    {\n        \"input\": \"What should I do in New York City in July?\",\n        \"output\": \"Check out Times Square, go to an outdoor concert, and visit the Statue of Liberty.\",\n        \"contexts\": [\n            \"Times Square is known for its Broadway theaters, bright lights, and bustling atmosphere.\",\n            \"Outdoor concerts in Central Park are popular summer events attracting many visitors.\",\n            \"The Statue of Liberty is a symbol of freedom and a must-see landmark in NYC.\"\n        ]\n    },\n    {\n        \"input\": \"Can you help me with my math homework?\",\n        \"output\": \"I'm designed to assist with travel queries. For math help, try using online resources like Khan Academy or Mathway.\",\n        \"contexts\": []\n    },\n    {\n        \"input\": \"What's the capital of France?\",\n        \"output\": \"The capital of France is Paris.\",\n        \"contexts\": [\n            \"Paris, known as the City of Light, is the most populous city of France.\",\n            \"European capitals: Paris, France; Berlin, Germany; Madrid, Spain\",\n        ]\n    }\n]\n# Format our dataset for Ragas data structure\ndef prepare_data_for_ragas(data_list):\n    data_table = {\n        'question': [],\n        'answer': [],\n        'contexts': []\n    }\n    for data_item in data_list:\n        data_table[\"question\"].append(data_item[\"input\"])\n        data_table[\"answer\"].append(data_item[\"output\"])\n        data_table[\"contexts\"].append(data_item[\"contexts\"])\n    return data_table\ndef create_report(data):\n    ragas_dict = prepare_data_for_ragas(data)\n    dataset = Dataset.from_dict(prepare_data_for_ragas(data))\n    langchain_llm = ChatOpenAI(\n        model_name=\"gpt-4o-mini\",\n  api_key=openai_api_key)\n    langchain_embeddings = OpenAIEmbeddings(\n        model=\"text-embedding-3-large\",\n        api_key=openai_api_key\n    )\n    score = evaluate(dataset,\n                     metrics=[answer_relevancy],\n                     llm=langchain_llm,\n                     embeddings=langchain_embeddings\n                    )\n    return score\n# Create and print the table\nresults = create_report(evaluation_data)\nprint(results.to_pandas())\nprint(results)\n```", "```py\nEvaluating: 100%\n 3/3 [00:04<00:00,  4.85s/it]\n                                    question  \\\n0  What should I do in New York City in July?\n1      Can you help me with my math homework?\n2               What's the capital of France?\n                                              answer  \\\n0  Check out Times Square, go to an outdoor conce...\n1  I'm designed to assist with travel queries. Fo...\n2                    The capital of France is Paris.\n                                            contexts  answer_relevancy\n0  [Times Square is known for its Broadway theate...          0.630561\n1                                                 []          0.000000\n2  [Paris, known as the City of Light, is the mos...          0.873249\n{'answer_relevancy': 0.5013}\n```"]