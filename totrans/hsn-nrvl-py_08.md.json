["```py\n    def __init__(self, generation=-1, genomeId=-1, fitness=-1, novelty=-1):\n        self.generation = generation\n        self.genomeId = genomeId\n        self.fitness = fitness\n        self.novelty = novelty\n        self.in_archive = False\n        self.data = []\n```", "```py\n    def __init__(self, threshold, metric):\n        self.novelty_metric = metric\n        self.novelty_threshold = threshold\n        self.novelty_floor = 0.25\n        self.items_added_in_generation = 0\n        self.time_out = 0\n        self.neighbors = KNNNoveltyScore\n        self.generation = 0\n        self.novel_items = []\n        self.fittest_items = []\n```", "```py\n    def _adjust_archive_settings(self):\n        if self.items_added_in_generation == 0:\n            self.time_out += 1\n        else:\n            self.time_out = 0\n        if self.time_out >= 10:\n            self.novelty_threshold *= 0.95\n            if self.novelty_threshold < self.novelty_floor:\n                self.novelty_threshold = self.novelty_floor\n            self.time_out = 0\n        if self.items_added_in_generation >= 4:\n            self.novelty_threshold *= 1.2\n        self.items_added_in_generation = 0\n```", "```py\n    def evaluate_individual_novelty(self, genome, genomes, n_items_map, \n                                    only_fitness=False):\n        item = n_items_map[genome.key]\n        result = 0.0\n        if only_fitness:\n            result = self._novelty_avg_knn(item=item, genomes=genomes, \n                                           n_items_map=n_items_map)\n        else:\n            result = self._novelty_avg_knn(item=item, neighbors=1, \n                                           n_items_map=n_items_map)\n            if result > self.novelty_threshold or \\\n               len(self.novel_items) < ArchiveSeedAmount:\n                self._add_novelty_item(item)\n        item.novelty = result\n        item.generation = self.generation\n        return result\n```", "```py\n    def _novelty_avg_knn(self, item, n_items_map, genomes=None, \n                         neighbors=None):\n        distances = None\n        if genomes is not None:\n            distances = self._map_novelty_in_population(item=item, \n                          genomes=genomes, n_items_map=n_items_map)\n        else:\n            distances = self._map_novelty(item=item)\n        distances.sort()\n        if neighbors is None:\n            neighbors = self.neighbors\n\n        density, weight, distance_sum = 0.0, 0.0, 0.0\n        length = len(distances)\n        if length >= ArchiveSeedAmount:\n            length = neighbors\n            if len(distances) < length:\n                length = len(distances)\n            i = 0\n            while weight < float(neighbors) and i < length:\n                distance_sum += distances[i].distance\n                weight += 1.0\n                i += 1\n            if weight > 0:\n                sparsity = distance_sum / weight\n        return sparsity\n```", "```py\n    distances = None\n    if genomes is not None:\n        distances = self._map_novelty_in_population(item=item, \n                         genomes=genomes, n_items_map=n_items_map)\n    else:\n        distances = self._map_novelty(item=item)\n```", "```py\n    distances.sort()\n```", "```py\n    if neighbors is None:\n        neighbors = self.neighbors\n\n    density, weight, distance_sum = 0.0, 0.0, 0.0\n    length = len(distances)\n```", "```py\n    if length >= ArchiveSeedAmount:\n        length = neighbors\n        if len(distances) < length:\n            length = len(distances)\n```", "```py\n        i = 0\n        while weight < float(neighbors) and i < length:\n            distance_sum += distances[i].distance\n            weight += 1.0\n            i += 1\n```", "```py\n        if weight < 0:\n            sparsity = distance_sum / weight \n```", "```py\ndef maze_novelty_metric(first_item, second_item):\n    diff_accum = 0.0\n    size = len(first_item.data)\n    for i in range(size):\n        diff = abs(first_item.data[i] - second_item.data[i])\n        diff_accum += diff\n\n    return diff_accum / float(size)\n```", "```py\ndef eval_genomes(genomes, config):\n    n_items_map = {}\n    solver_genome = None\n    for genome_id, genome in genomes:\n        found = eval_individual(genome_id=genome_id, \n                                genome=genome, \n                                genomes=genomes, \n                                n_items_map=n_items_map, \n                                config=config)\n        if found:\n            solver_genome = genome\n    trial_sim.archive.end_of_generation()\n    # Now evaluate fitness of each genome in population\n    for genome_id, genome in genomes:\n        fitness = trial_sim.archive.evaluate_individual_novelty(\n                   genome=genome,\n                   genomes=genomes,\n                   n_items_map=n_items_map,\n                   only_fitness=True)\n        if fitness > 1:\n            fitness = math.log(fitness)\n        else:\n            fitness = 0\n        genome.fitness = fitness\n\n    if solver_genome is not None:\n        solver_genome.fitness = math.log(800000) # ~=13.59\n```", "```py\n    n_items_map = {}\n    solver_genome = None\n    for genome_id, genome in genomes:\n        found = eval_individual(genome_id=genome_id, \n                                genome=genome, \n                                genomes=genomes, \n                                n_items_map=n_items_map, \n                                config=config)\n        if found:\n            solver_genome = genome\n    trial_sim.archive.end_of_generation()\n```", "```py\n    for genome_id, genome in genomes:\n        fitness = trial_sim.archive.evaluate_individual_novelty(\n                   genome=genome,\n                   genomes=genomes,\n                   n_items_map=n_items_map,\n                   only_fitness=True)\n        if fitness > 1:\n            fitness = math.log(fitness)\n        else:\n            fitness = 0\n        genome.fitness = fitness\n```", "```py\n    if solver_genome is not None:\n        solver_genome.fitness = math.log(800000) # ~13.59\n```", "```py\ndef eval_individual(genome_id, genome, genomes, n_items_map, config):\n    n_item = archive.NoveltyItem(\n                        generation=trial_sim.population.generation,\n                        genomeId=genome_id)\n    n_items_map[genome_id] = n_item\n    maze_env = copy.deepcopy(trial_sim.orig_maze_environment)\n    control_net = neat.nn.FeedForwardNetwork.create(genome, config)\n    goal_fitness = maze.maze_simulation_evaluate(\n                                    env=maze_env, \n                                    net=control_net, \n                                    time_steps=SOLVER_TIME_STEPS,\n                                    n_item=n_item,\n                                    mcns=MCNS)\n\n    if goal_fitness == -1:\n        # The individual doesn't meet the min. fitness criterion\n        print(\"Individ with ID %d marked for extinction, MCNS %f\" \n               % (genome_id, MCNS))\n        return False\n\n    record = agent.AgentRecord(\n        generation=trial_sim.population.generation,\n        agent_id=genome_id)\n    record.fitness = goal_fitness\n    record.x = maze_env.agent.location.x\n    record.y = maze_env.agent.location.y\n    record.hit_exit = maze_env.exit_found\n    record.species_id = trial_sim.population.species \\\n        .get_species_id(genome_id)\n    record.species_age = record.generation - \\\n       trial_sim.population.species.get_species(genome_id).created\n    trial_sim.record_store.add_record(record)\n\n    if not maze_env.exit_found:\n        record.novelty = trial_sim.archive \\\n         .evaluate_individual_novelty(genome=genome, \n                       genomes=genomes, n_items_map=n_items_map)\n\n    trial_sim.archive.update_fittest_with_genome(genome=genome, \n                                        n_items_map=n_items_map)\n    return maze_env.exit_found\n```", "```py\n    n_item = archive.NoveltyItem(\n                       generation=trial_sim.population.generation,\n                       genomeId=genome_id)\n    n_items_map[genome_id] = n_item\n```", "```py\n    maze_env = copy.deepcopy(trial_sim.orig_maze_environment)\n    control_net = neat.nn.FeedForwardNetwork.create(genome, config)\n```", "```py\n    goal_fitness = maze.maze_simulation_evaluate(\n                                    env=maze_env, \n                                    net=control_net, \n                                    time_steps=SOLVER_TIME_STEPS,\n                                    n_item=n_item,\n                                    mcns=MCNS)\n```", "```py\n    record = agent.AgentRecord(\n        generation=trial_sim.population.generation,\n        agent_id=genome_id)\n    record.fitness = goal_fitness\n    record.x = maze_env.agent.location.x\n    record.y = maze_env.agent.location.y\n    record.hit_exit = maze_env.exit_found\n    record.species_id = trial_sim.population.species \\\n        .get_species_id(genome_id)\n    record.species_age = record.generation - \\\n       trial_sim.population.species.get_species(genome_id).created\n    trial_sim.record_store.add_record(record)\n```", "```py\n    if not maze_env.exit_found:\n        record.novelty = trial_sim.archive \\\n         .evaluate_individual_novelty(genome=genome, \n              genomes=genomes, n_items_map=n_items_map)\n\n    trial_sim.archive.update_fittest_with_genome(genome=genome, \n                                        n_items_map=n_items_map)\n```", "```py\n[NEAT]\nfitness_criterion = max\nfitness_threshold = 13.5\npop_size = 500\nreset_on_extinction = False\n```", "```py\n[DefaultStagnation]\nmax_stagnation = 100\n```", "```py\n$ conda create --name maze_ns_neat python=3.5\n$ conda activate maze_ns_neat\n$ pip install neat-python==0.92 \n$ conda install matplotlib\n$ conda install graphviz\n$ conda install python-graphviz\n```", "```py\n    print(\"Starting the %s maze experiment (Novelty Search), for %d trials\" \n          % (args.maze, args.trials))\n    for t in range(args.trials):\n        print(\"\\n\\n----- Starting Trial: %d ------\" % (t))\n        # Create novelty archive\n        novelty_archive = archive.NoveltyArchive(\n                                  threshold=args.ns_threshold,\n                                  metric=maze.maze_novelty_metric)\n        trial_out_dir = os.path.join(out_dir, str(t))\n        os.makedirs(trial_out_dir, exist_ok=True)\n        solution_found = run_experiment( config_file=config_path, \n                                        maze_env=maze_env, \n                                        novelty_archive=novelty_archive,\n                                        trial_out_dir=trial_out_dir,\n                                        n_generations=args.generations,\n                                        args=args,\n                                        save_results=True,\n                                        silent=True)\n        print(\"\\n------ Trial %d complete, solution found: %s ------\\n\" \n               % (t, solution_found))\n```", "```py\n        novelty_archive = archive.NoveltyArchive(\n                       threshold=args.ns_threshold,\n                       metric=maze.maze_novelty_metric)\n```", "```py\n    seed = int(time.time())\n    random.seed(seed)\n```", "```py\nconfig = neat.Config(neat.DefaultGenome, \n                     neat.DefaultReproduction, \n                     neat.DefaultSpeciesSet, \n                     neat.DefaultStagnation, \n                     config_file)\np = neat.Population(config) \n```", "```py\n    global trial_sim\n    trial_sim = MazeSimulationTrial(maze_env=maze_env, \n                                    population=p,\n                                    archive=novelty_archive)\n```", "```py\n    p.add_reporter(neat.StdOutReporter(True))\n    stats = neat.StatisticsReporter()\n    p.add_reporter(stats)\n```", "```py\n    start_time = time.time()\n    best_genome = p.run(eval_genomes, n=n_generations)\n    elapsed_time = time.time() - start_time\n    # Display the best genome among generations.\n    print('\\nBest genome:\\n%s' % (best_genome))\n    solution_found = \\\n        (best_genome.fitness >= config.fitness_threshold)\n    if solution_found:\n        print(\"SUCCESS: The stable maze solver controller was found!!!\")\n    else:\n        print(\"FAILURE: Failed to find the stable maze solver controller!!!\")\n```", "```py\n    node_names = {-1:'RF_R', -2:'RF_FR', -3:'RF_F', -4:'RF_FL', \n                    -5:'RF_L', -6: 'RF_B', -7:'RAD_F', -8:'RAD_L',\n                    -9:'RAD_B', -10:'RAD_R', 0:'ANG_VEL', 1:'VEL'}\n    visualize.draw_net(config, best_genome, view=show_results, \n                           node_names=node_names, \n                           directory=trial_out_dir, fmt='svg')\n    if args is None:\n        visualize.draw_maze_records(maze_env, \n                                trial_sim.record_store.records,\n                                view=show_results)\n    else:\n        visualize.draw_maze_records(maze_env, \n                           trial_sim.record_store.records, \n                           view=show_results, width=args.width, \n                           height=args.height,\n                           filename=os.path.join(trial_out_dir, \n                                           'maze_records.svg'))\n    visualize.plot_stats(stats, ylog=False, \n                          view=show_results,\n                          filename=os.path.join(trial_out_dir, \n                                           'avg_fitness.svg'))\n    visualize.plot_species(stats, view=show_results, \n                          filename=os.path.join(trial_out_dir, \n                                            'speciation.svg'))\n    # store NoveltyItems archive data\n    trial_sim.archive.write_fittest_to_file(\n                             path=os.path.join(trial_out_dir, \n                                     'ns_items_fittest.txt'))\n    trial_sim.archive.write_to_file(\n                             path=os.path.join(trial_out_dir, \n                                         'ns_items_all.txt'))\n```", "```py\n    maze_env = copy.deepcopy(trial_sim.orig_maze_environment)\n    control_net = neat.nn.FeedForwardNetwork.create(\n                                            best_genome, config)\n    path_points = []\n    evaluate_fitness = maze.maze_simulation_evaluate(\n                                    env=maze_env, \n                                    net=control_net, \n                                    time_steps=SOLVER_TIME_STEPS,\n                                    path_points=path_points)\n    print(\"Evaluated fitness of best agent: %f\" \n              % evaluate_fitness)\n    visualize.draw_agent_path(trial_sim.orig_maze_environment, \n                             path_points, best_genome,\n                             view=show_results, \n                             width=args.width,\n                             height=args.height,\n                             filename=os.path.join(trial_out_dir,\n                                        'best_solver_path.svg'))\n```", "```py\npython maze_experiment.py -g 500 -t 10 -m medium --width 300 --height 150\n```", "```py\n ****** Running generation 100 ****** \n\nMaze solved in 391 steps\nPopulation's average fitness: 1.28484 stdev: 0.90091\nBest fitness: 13.59237 - size: (2, 8) - species 1 - id 48354\n\nBest individual in generation 100 meets fitness threshold - complexity: (2, 8)\n```", "```py\nBest genome:\nKey: 48354\nFitness: 13.592367006650065\nNodes:\n 0 DefaultNodeGene(key=0, bias=-2.1711339938349026, response=1.0, activation=sigmoid, aggregation=sum)\n 1 DefaultNodeGene(key=1, bias=6.576480565646596, response=1.0, activation=sigmoid, aggregation=sum)\nConnections:\n DefaultConnectionGene(key=(-10, 1), weight=-0.5207773885939109, enabled=True)\n DefaultConnectionGene(key=(-9, 0), weight=1.7778928210387814, enabled=True)\n DefaultConnectionGene(key=(-7, 1), weight=-2.4940590667086524, enabled=False)\n DefaultConnectionGene(key=(-6, 1), weight=-1.3708732457648565, enabled=True)\n DefaultConnectionGene(key=(-4, 0), weight=4.482428082179011, enabled=True)\n DefaultConnectionGene(key=(-4, 1), weight=-1.3103728328721098, enabled=True)\n DefaultConnectionGene(key=(-3, 0), weight=-0.4583080031587811, enabled=True)\n DefaultConnectionGene(key=(-3, 1), weight=4.643599450804774, enabled=True)\n DefaultConnectionGene(key=(-2, 1), weight=-0.9055329546235956, enabled=True)\n DefaultConnectionGene(key=(-1, 0), weight=-1.5899992185951817, enabled=False)\nSUCCESS: The stable maze solver controller was found!!!\nRecord store file: out/maze_ns/medium/0/data.pickle\nRandom seed: 1567086899\nTrial elapsed time: 7452.462 sec\nPlot figure width: 6.8, height: 7.0\nMaze solved in 391 steps\nEvaluated fitness of best agent: 1.000000\nPlot figure width: 7.8, height: 4.0\n```", "```py\npython maze_experiment.py -g 500 -t 10 -r 100 -m medium --width 300 --height 150\n```", "```py\n$ python maze_experiment.py -m hard -g 500 -t 10 --width 200 --height 200\n```", "```py\n$ conda install -c conda-forge multineat\n```", "```py\n$ python maze_experiment_multineat.py -m hard -g 500 -t 10 --width 200 --height 200\n```"]