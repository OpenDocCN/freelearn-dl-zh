["```py\n    !pip install boto3  \n    ```", "```py\n    import boto3\n    ```", "```py\n    import json\n    ```", "```py\n    comprehend = boto3.client(service_name='comprehend')\n    ```", "```py\n    english_string = 'Machine Learning is fascinating.'\n    spanish_string = 'El aprendizaje automático es fascinante.'\n    ```", "```py\n    print('Calling DetectDominantLanguage')\n    print('english_string result:')\n    ```", "```py\n    print('\\n English string result:')\n    print(json.dumps(comprehend.detect_dominant_language\\\n                    (Text = english_string), sort_keys=True, \\\n                    indent=4))\n    print('\\n spanish_string result:')\n    print(json.dumps(comprehend.detect_dominant_language\\\n                    (Text = spanish_string), sort_keys=True, \\\n                    indent=4))\n    print('End of DetectDominantLanguage\\n')\n    \\ ) to split the logic across multiple lines. When the code is executed, Python will ignore the backslash, and treat the code on the next line as a direct continuation of the current line.\n    ```", "```py\n    import boto3\n    ```", "```py\n    import json\n    ```", "```py\n    comprehend = boto3.client(service_name='comprehend')\n    ```", "```py\n    english_string_list = \\\n    ['Machine Learning is fascinating.', \\\n     'Studying Artificial Intelligence is my passion.']\n    spanish_string_list = \\\n    ['El aprendizaje automático es fascinante.', \\\n     'Estudiar Inteligencia Artificial es mi pasión.']\n    ```", "```py\n    print('Calling BatchDetectDominantLanguage')\n    print('english_string_list results:')\n    print(json.dumps(comprehend.batch_detect_dominant_language\\\n                    (TextList=english_string_list), \\\n                    sort_keys=True, indent=4))\n    print('\\nspanish_string_list results:')\n    print(json.dumps(comprehend.batch_detect_dominant_language\\\n                    (TextList=spanish_string_list), \\\n                    sort_keys=True, indent=4))\n    print('End of BatchDetectDominantLanguage\\n')\n    ```", "```py\n    import boto3\n    ```", "```py\n    import json\n    ```", "```py\n    comprehend = boto3.client(service_name='comprehend')\n    ```", "```py\n    english_string = \"I study Machine Learning in \"\\\n                     \"Seattle on Thursday.\"\n    print('Calling DetectEntities')\n    ```", "```py\n    print(json.dumps(comprehend.detect_entities\\\n                    (Text = english_string, LanguageCode='en'), \\\n                    sort_keys=True, indent=4))\n    print('End of DetectEntities\\n')\n    ```", "```py\n    import boto3\n    ```", "```py\n    import json\n    ```", "```py\n    import glob\n    ```", "```py\n    import os\n    ```", "```py\n    comprehend = boto3.client(service_name='comprehend')\n    ```", "```py\n    data_dir = 'review_pos directory. Depending on where you have downloaded and stored the .txt files on your system, the highlighted path must be modified in the code. \n    ```", "```py\n    for file in file_list:\n      with open(file, 'r', encoding=\"utf-8\") as f:\n        file_as_str = f.read()\n        # python string formatting to print the text file name\n        print('Calling detect_entities_from_documents.py on file: %s' \\\n              % file[-15:])\n        # json.dumps() writes JSON data to a Python string\n        print(json.dumps(comprehend.detect_entities\\\n                        (Text = file_as_str, LanguageCode='en'), \\\n                        sort_keys=True, indent=4))\n        print('End of detect_entities\\n')\n    ```", "```py\n    import boto3\n    ```", "```py\n    import json\n    ```", "```py\n    comprehend = boto3.client(service_name='comprehend')\n    ```", "```py\n    english_string = 'robert redfords a river runs through '\\\n                     'is not a film i watch often. it is a '\\\n                     'masterpiece, one of the better films of '\\\n                     'recent years. The acting and direction is '\\\n                     'top-notch never sappy , always touching.'\n    print('Calling DetectKeyPhrases')\n    # json.dumps() writes JSON data to a Python string\n    print(json.dumps(comprehend.detect_key_phrases\\\n         (Text = english_string, LanguageCode='en'), \\\n         sort_keys=True, indent=4))\n    print('End of DetectKeyPhrases\\n')\n    ```", "```py\n    import boto3\n    ```", "```py\n    import json\n    ```", "```py\n    comprehend = boto3.client(service_name='comprehend')\n    ```", "```py\n    english_string = 'Today is my birthday, I am so happy.'\n    print('Calling DetectSentiment')\n    # json.dumps() #writes JSON data to a Python string\n    print('english_string results:')\n    print(json.dumps(comprehend.detect_sentiment\\\n         (Text = english_string, LanguageCode='en'), \\\n         sort_keys=True, indent=4))\n    print('End of DetectSentiment\\n')\n    ```", "```py\n    import boto3\n    ```", "```py\n    import json\n    ```", "```py\n    def Lambda_handler(event, context):\n    ```", "```py\n    s3 = boto3.client(\"s3\")\n    ```", "```py\n    bucket = \"<input Bucket name>\"\n    ```", "```py\n    text_file_obj = event[\"Records\"][0]\n    ```", "```py\n    filename = str(text_file_obj['s3']['object']['key'])\n    print(\"filename: \", filename)\n    ```", "```py\n    file_obj = s3.get_object(Bucket = Bucket, Key = filename)\n    ```", "```py\n    body_str_obj = str(file_obj['Body'].read())\n    ```", "```py\n    comprehend = boto3.client(service_name=\"comprehend\")\n    ```", "```py\n    sentiment_response = comprehend.detect_sentiment\\\n                         (Text = body_str_obj, \\\n                         LanguageCode = \"en\")\n    print(«sentiment_response: \\n», sentiment_response)\n    entity_response = comprehend.detect_entities\\\n                      (Text = body_str_obj, LanguageCode = \"en\")\n    print(\"\\n\\nentity_response: \\n\", entity_response)\n    key_phases_response = comprehend.detect_key_phrases\\\n                          (Text = body_str_obj, \\\n                          LanguageCode = \"en\") \n    print(\"\\n\\nkey_phases_response: \\n\", key_phases_response)\n    ```", "```py\n    return {\n          'statusCode' :200,\n          'body' : json.dumps('Hello from Lambda')\n        }\n    ```", "```py\n    {'Sentiment': 'POSITIVE',\n    'SentimentScore':{'Positive': 0.6005121469497681,\n                      'Negative': 0.029164031147956848, \n                      'Neutral': 0.3588017225265503, \n                      'Mixed': 0.01152205839753151}, \n    ```", "```py\n    {Entities':[{'Score':0.7053232192993164, \n                 'Type': 'QUANTITY','Text': '3 trigger', \n                 'BeginOffset': 35, 'EndOffset': 44}], \n    ```", "```py\n    {'KeyPhrases': [{'Score': 0.8986637592315674, \n                     'Text': 'a test file', \n                     'BeginOffset': 8, 'EndOffset': 19}, \n                    {'Score': 0.9852105975151062, \n                     'Text': 'the s3 trigger', 'BeginOffset': 30, \n                     'EndOffset': 44}],\n    ```"]