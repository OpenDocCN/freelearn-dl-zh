- en: '*Chapter 5*: Backing Up the Code with Git and SD Card Copies'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：使用Git和SD卡副本备份代码'
- en: As you create and customize the code for your robot, you will invest many hours
    in getting it to do awesome things that, unless you take precautions, could all
    suddenly disappear. The programs are not the whole story, as you've already started
    configuring Raspberry Pi OS for use on the robot. You want to keep your code and
    config in case of disaster, and to be able to go back if you make changes you
    regret.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在你为你的机器人创建和定制代码的过程中，你将投入许多小时来让它做些令人惊叹的事情，除非你采取预防措施，否则所有这些事情都可能突然消失。程序并不是全部的故事，因为你已经开始了为机器人使用Raspberry
    Pi OS的配置。你希望在灾难发生时保留你的代码和配置，以便在做出你后悔的改变时能够回退。
- en: This chapter will help you understand how exactly code or configuration can
    break and the disasters you might face while customizing code for your robot.
    We'll then take a look at three strategies for preventing this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你了解代码或配置如何具体地被破坏，以及在你为机器人定制代码时可能遇到的灾难。然后我们将探讨三种防止这种情况的策略。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解以下内容：
- en: Understanding how code can be broken or lost
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解代码如何被破坏或丢失
- en: Strategy 1 – Keeping the code on a PC and uploading it
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略1 – 在PC上保留代码并上传
- en: Strategy 2 – Using Git to go back in time
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略2 – 使用Git回到过去
- en: Strategy 3 – Making SD card backups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略3 – 制作SD卡备份
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will require the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下内容：
- en: The Raspberry Pi and the SD card you prepared in the previous chapter
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在上一章准备好的Raspberry Pi和SD卡
- en: The USB power supply and cable you used with the Pi
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你与Pi一起使用的USB电源和电缆
- en: A Windows, Linux, or macOS computer or laptop, connected to the internet and
    able to read/write to SD cards
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台连接到互联网并能够读写SD卡的Windows、Linux或macOS计算机或笔记本电脑
- en: 'Software: FileZilla and Git'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件：FileZilla和Git
- en: 'On Windows: Win32DiskImager'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上：Win32DiskImager
- en: 'Here is the GitHub link for the code files of this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章代码文件的GitHub链接：
- en: '[https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming/tree/master/chapter5](https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming/tree/master/chapter5)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming/tree/master/chapter5](https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming/tree/master/chapter5)'
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3bAm94l](https://bit.ly/3bAm94l)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际应用：[https://bit.ly/3bAm94l](https://bit.ly/3bAm94l)
- en: Understanding how code can be broken or lost
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解代码如何被破坏或丢失
- en: Code and its close cousin, configuration, take time and hard work. Code needs
    configuration to run, such as Raspberry Pi OS configuration, extra software, and
    necessary data files. Both need research and learning and to be designed, made,
    tested, and debugged.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 代码及其紧密相关的配置需要时间和辛勤的工作。代码需要配置才能运行，例如Raspberry Pi OS配置、额外软件和必要的数据文件。两者都需要研究和学习，并需要设计、制作、测试和调试。
- en: Many bad situations can lead to the loss of code. These have happened to me
    a week before taking robots to a show after weeks of work, and I learned the hard
    way to take this quite seriously. So, what can happen to your code?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多糟糕的情况可能导致代码丢失。这些事情发生在我将机器人带到展览会上的一周前，经过几周的工作，我艰难地学会了要非常认真地对待这个问题。那么，你的代码可能会发生什么？
- en: SD card data loss and corruption
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SD卡数据丢失和损坏
- en: SD card corruption is when the data on the SD card used to hold your code, Raspberry
    Pi OS, and anything you've prepared on it gets broken. Files become unreadable,
    or the card becomes unusable. The information on the SD card can be permanently
    lost.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡损坏是指用于存储你的代码、Raspberry Pi OS以及你准备在SD卡上的任何内容的SD卡数据被破坏。文件变得不可读，或者卡变得无法使用。SD卡上的信息可能会永久丢失。
- en: If a Raspberry Pi unexpectedly loses power, the SD card can be damaged, causing
    data loss. A hot Pi can slowly bake an SD card, damaging it. Visual processing
    on a Pi is one way it can get hot. SD cards get damaged if something terrible
    happens electrically to the Pi via the GPIO pins or its power supply. MicroSD
    cards are also tiny and are quickly lost when not in the Pi.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Raspberry Pi意外断电，SD卡可能会损坏，导致数据丢失。一个过热的Pi会慢慢地烘烤SD卡，损坏它。Pi的视觉处理是一种它可能变热的方式。如果Pi通过GPIO引脚或其电源发生电学上的糟糕事情，SD卡可能会损坏。MicroSD卡也很小，如果不放在Pi中，很容易丢失。
- en: Changes to the code or configuration
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码或配置的更改
- en: We all make mistakes. Coding means trying things out. While some work out, some
    do not and things break. At those times, you'll want to go back and see what you've
    changed. You might be able to use differences to find the bug, or if your experiment
    looks like a dead end, you may want to go back to a known working version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都会犯错误。编码意味着尝试新事物。虽然有些事情会成功，但有些不会，事情会出错。在这些时候，你将想要回顾一下你做了什么更改。你可能能够使用差异来找到错误，或者如果你的实验看起来像是死胡同，你可能想要回到一个已知的工作版本。
- en: You can also render your robot useless with the wrong configuration, such as
    the Pi not being on the network or booting anymore. An upgrade to system packages
    may go wrong and lead to code not working or needing extensive changes to the
    code for it to work again.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过错误的配置使机器人失效，例如树莓派未连接到网络或无法再启动。系统包的升级可能会出错，导致代码无法工作或需要对其进行大量更改才能再次工作。
- en: These problems can combine to cause real nightmares. I've seen changes in the
    code lead a robot to misbehave and damage itself in a way that made the SD card
    corrupted. I've been updating packages on the operating system when I knocked
    the power cable out, corrupting the SD card and breaking Raspberry Pi OS 2 weeks
    before a significant robot event, and it was painful rebuilding it. This was a
    lesson learned the hard way.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题可能结合在一起导致真正的噩梦。我曾看到代码的更改导致机器人行为不当并损坏自己，以至于SD卡损坏。在我更新操作系统包时，我意外地拔掉了电源线，导致SD卡损坏，并在一个重要的机器人活动两周前破坏了Raspberry
    Pi OS，重建它非常痛苦。这是一次艰难的教训。
- en: Back up the code and back up the SD card configuration. Over the rest of this
    chapter, we'll look at some solutions to keep your robot's software safe from
    many kinds of disasters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 备份代码和备份SD卡配置。在本章的剩余部分，我们将探讨一些解决方案，以保护你的机器人软件免受各种灾难的影响。
- en: Strategy 1 – Keeping the code on a PC and uploading it
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略1——在PC上保留代码并上传
- en: '**Secure File Transfer Protocol** (**SFTP**) lets you transfer files from a
    computer to a Pi. This strategy enables you to write code on your computer, then
    upload it to the Raspberry Pi. You can choose your editor and have the safety
    of more than one copy.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全文件传输协议**（**SFTP**）允许你从计算机传输文件到Pi。此策略使你能够在计算机上编写代码，然后将其上传到树莓派。你可以选择你的编辑器，并拥有多个副本的安全感。'
- en: Important note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: But wait – which editor? Editing code requires software designed for this purpose.
    Recommendations for Python are Mu, Microsoft VS Code, Notepad++, and PyCharm.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等——哪个编辑器？编辑代码需要为这个目的设计的软件。对于Python的推荐是Mu、Microsoft VS Code、Notepad++和PyCharm。
- en: 'SFTP uses SSH to copy files to and from the Raspberry Pi over the network.
    So, let''s see how to do it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SFTP使用SSH通过网络将文件从树莓派复制到其他设备。所以，让我们看看如何操作：
- en: First, make yourself a folder on the PC to store your robot code in; for example,
    `my_robot_project`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在PC上创建一个文件夹来存储你的机器人代码；例如，`my_robot_project`。
- en: 'Inside that folder, make a test file, using your editor, that will just print
    a bit of text. Put this code into a file named `hello.py`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个文件夹内，使用你的编辑器创建一个测试文件，该文件只会打印一些文本。将此代码放入名为`hello.py`的文件中：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will copy this to the robot and run it. You can make the copy using the SFTP
    tool FileZilla from [https://filezilla-project.org](https://filezilla-project.org).
    Download this and follow the installation instructions:![](img/B15660_05_01.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把这个文件复制到机器人上并运行它。你可以使用来自[https://filezilla-project.org](https://filezilla-project.org)的SFTP工具FileZilla进行复制。下载此工具并按照安装说明操作：![](img/B15660_05_01.jpg)
- en: Figure 5.1 – FileZilla
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.1 – FileZilla
- en: Plug in and power up your Raspberry Pi. You will notice at the bottom of the
    right-hand panel (*Figure 5.1*), FileZilla says **Not connected**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入并开启你的树莓派。你会在右侧面板的底部（*图5.1*）注意到，FileZilla显示**未连接**。
- en: In the `sftp://`; for example, `sftp://myrobot.local`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sftp://`；例如，`sftp://myrobot.local`。
- en: In the `pi`, and in the **Password** box, enter the password you set up before.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pi`，并在**密码**框中输入你之前设置的密码。
- en: Click the **Quickconnect** button to connect to the Raspberry Pi.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**快速连接**按钮连接到树莓派。
- en: When connected, you'll see files on the Raspberry Pi in the right-hand **Remote
    site** panel, shown in *Figure 5.2*:![](img/B15660_05_02.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接后，你将在右侧**远程站点**面板中看到树莓派上的文件，如*图5.2*所示：![](img/B15660_05_02.jpg)
- en: Figure 5.2 – The Raspberry Pi connected
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.2 – 连接的树莓派
- en: Use the left-hand **Local site** panel to go to your code on your computer.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用左侧**本地站点**面板转到你的计算机上的代码。
- en: Now click `hello.py`, highlighted at the top left of *Figure 5.3*, and drag
    it to the lower right-hand panel to put it on the Raspberry Pi:![](img/B15660_05_03.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击左上角高亮的`hello.py`，将其拖动到右下角的面板上，以便将其放置在Raspberry Pi上！![img/B15660_05_03.jpg](img/B15660_05_03.jpg)
- en: Figure 5.3 – Transferring a file
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.3 – 文件传输
- en: When you drag the file over, you should see it in the **Queued files** section,
    as shown in *Figure 5.3*. Since this file is small, it will only be in this queued
    state for an instant. You can also use the same system for whole folders. You'll
    soon see the file over in the remote site (the Raspberry Pi), shown on the right-hand
    panel in *Figure 5.3*.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您拖动文件时，您应该能在**队列文件**部分看到它，如图5.3所示。由于此文件很小，它将仅在队列状态中存在一瞬间。您还可以使用相同的系统来处理整个文件夹。您很快就会在远程站点（Raspberry
    Pi）上看到文件，如图5.3右侧的面板所示。
- en: 'To run this code, use PuTTY to log in to the Pi and try the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行此代码，请使用PuTTY登录到Pi并尝试以下命令：
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This strategy is a great start to making code safer. By working on your laptop/PC
    and copying to the Pi, you've guaranteed there is always one copy other than the
    one on the robot. You've also got the ability to use any code editor you like
    on the PC and spot some errors before they even get to the Raspberry Pi. Now we
    have a copy, let's see how we can track changes to our code and see what we've
    changed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略是使代码更安全的一个很好的开始。通过在您的笔记本电脑/PC上工作并将代码复制到Pi上，您已经确保除了机器人上的代码外，始终还有另一份副本。您还可以在PC上使用您喜欢的任何代码编辑器，并在代码到达Raspberry
    Pi之前发现一些错误。现在我们有了副本，让我们看看我们如何跟踪代码的更改以及我们做了哪些更改。
- en: Strategy 2 – Using Git to go back in time
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略2 – 使用Git回到过去
- en: '**Git** is a popular form of source control, a way to keep a history of changes
    you''ve made to code. You can go back through changes, see what they were, restore
    older versions, and keep a commented log of why you made the changes. Git also
    lets you store code in more than one location in case your hard drive fails. Git
    stores code and its history in repositories, or repos. In Git, you can make branches,
    copies of the whole set of code, to try ideas in parallel with your code, and
    later merge those back to the main branch.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git**是一种流行的源代码控制形式，它记录了您对代码所做的更改的历史。您可以回顾这些更改，查看它们是什么，恢复旧版本，并保留一个注释日志，说明您为什么做出这些更改。Git还允许您在多个位置存储代码，以防硬盘故障。Git将代码及其历史存储在仓库中，或称为repos。在Git中，您可以创建分支，即整个代码集的副本，以并行尝试您的代码中的想法，然后稍后将其合并回主分支。'
- en: 'I will get you started, but this section can only scratch the surface of what
    you can do with Git. Let''s begin:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我将为您开始，但本节只能触及Git所能做到的一小部分。让我们开始：
- en: Install Git, by following the instructions at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
    for your computer.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下网址的说明安装Git：[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are using Windows or macOS, I would suggest using the GitHub app for
    easier setup.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用Windows或macOS，我建议您使用GitHub应用以简化设置。
- en: 'Git requires you to set your identity using a command line on your computer:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git要求您使用电脑上的命令行设置您的身份信息：
- en: '[PRE2]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To put this project under source control, we need to initialize it and commit
    our first bit of code. Make sure you are in the folder for your code (`my_robot_project`)
    in a command line on your computer and type the following:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将此项目置于源代码控制之下，我们需要初始化它并提交我们的第一行代码。请确保您已进入电脑上的命令行中您的代码文件夹（`my_robot_project`），并输入以下命令：
- en: '[PRE3]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can now see the journal with `git log`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过`git log`查看日志：
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now modify the code in `hello.py`, changing it to this:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在修改`hello.py`中的代码，将其更改为以下内容：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'print line, and in its place adding an import and then a print line. We can
    add this into Git to make a new version, and then use git log again to see both
    versions:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打印行，然后在其位置添加一个导入语句和一个打印行。我们可以将此添加到Git中，以创建一个新版本，然后再次使用git log来查看两个版本：
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this method, you can go back to previous versions, or just compare versions,
    and protect yourself against changes you might regret. However, we have only just
    scratched the surface of the power of Git. See the reference in the *Further reading*
    section on how to branch, use remote services, roll back to previous versions,
    and find tools to browse the code in the Git history.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，您可以回到以前的版本，或者只是比较版本，并保护自己免受可能后悔的更改。然而，我们刚刚只是触及了Git的强大功能。请参阅“进一步阅读”部分中的参考，了解如何创建分支、使用远程服务、回滚到以前的版本以及找到浏览Git历史中代码的工具。
- en: Now we can go back and forward in time (at least for our code), we can be more
    confident in making changes. Just remember to make commits frequently – especially
    after making something work! Next, we will look at how to keep the configuration
    and installed packages.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在时间上前后移动（至少对于我们的代码来说），我们可以更有信心地进行更改。只需记住经常提交更改 – 尤其是在某件事开始工作之后！接下来，我们将探讨如何保持配置和已安装的软件包。
- en: Strategy 3 – Making SD card backups
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略3 – 制作SD卡备份
- en: Git and SFTP are great for keeping code safe, but they don't help you reinstall
    and reconfigure Raspberry Pi OS on a card. The procedures for Windows, Linux,
    and macOS are quite different for this. The basic idea is to insert the SD card
    and use a tool to clone the whole card to a file known as an image, which you
    can restore with balenaEtcher when you need recovery.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Git和SFTP非常适合保持代码安全，但它们不能帮助你重新安装和重新配置SD卡上的Raspberry Pi OS。Windows、Linux和macOS的此过程相当不同。基本思路是将SD卡插入并使用工具将其整个克隆到称为镜像的文件中，当你需要恢复时，可以使用balenaEtcher进行恢复。
- en: Important note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should only restore images to cards of the same size or larger. Putting
    an image on a smaller device is likely to fail to write, creating a corrupt SD
    card.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该只将镜像恢复到相同大小或更大的卡上。将镜像放在较小的设备上可能会失败，从而创建一个损坏的SD卡。
- en: Before we begin, properly shut down your Raspberry Pi, take out its SD card,
    and put that into your computer. These clean images are large, so do not put them
    in your Git repository. It's beyond the scope of this chapter, but I recommend
    finding a way to compress these files as they are mostly empty right now. In all
    cases, expect this operation to take 20-30 minutes due to the image sizes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请正确关闭Raspberry Pi，取出其SD卡，并将其放入你的电脑中。这些干净镜像很大，所以不要将它们放入你的Git仓库。这超出了本章的范围，但我建议找到一种方法来压缩这些文件，因为它们现在大部分是空的。在任何情况下，由于镜像的大小，预期此操作需要20-30分钟。
- en: Windows
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: 'For Windows, we''ll use Win32DiskImager. So, our first step will be to install
    and set this up. Follow along:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，我们将使用Win32DiskImager。因此，我们的第一步将是安装和设置此工具。请按照以下步骤操作：
- en: Get an installer for this at [https://sourceforge.net/projects/win32diskimager](https://sourceforge.net/projects/win32diskimager).
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在[https://sourceforge.net/projects/win32diskimager](https://sourceforge.net/projects/win32diskimager)获取此安装程序。
- en: Run this and follow the installation instructions.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此程序并按照安装说明进行操作。
- en: Tip
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since we will use it immediately, I suggest leaving the **Launch immediately**
    checkbox ticked.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们将立即使用它，我建议勾选**立即启动**复选框。
- en: Highlighted on the right of *Figure 5.4* is the **Device**; this should have
    automatically found the SD card device. Use the folder icon highlighted to choose
    where the image file will be stored:![](img/B15660_05_04.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*图5.4*的右侧突出显示的是**设备**；这应该会自动找到SD卡设备。使用突出显示的文件夹图标选择镜像文件将存储的位置：![img/B15660_05_04.jpg](img/B15660_05_04.jpg)
- en: Figure 5.4 – Win32 Disk Imager
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.4 – Win32 Disk Imager
- en: In *Figure 5.5*, I name my image `myrobot.img` in the **File name** box. You
    then click the **Open** button to confirm this:![](img/B15660_05_05.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*图5.5*中，我在**文件名**框中命名我的镜像为`myrobot.img`。然后点击**打开**按钮以确认这一点：![img/B15660_05_05.jpg](img/B15660_05_05.jpg)
- en: Figure 5.5 – Choose the location
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.5 – 选择位置
- en: 'After clicking **Open**, you''ll see a screen like the left side of *Figure
    5.6* with your selected location in the **Image File** box. Click on the **Read**
    button to start copying the image. As it reads the image, you''ll see a progress
    bar and an estimation of the time remaining. When the image is done, Win32 Disk
    Imager will tell you that the read was successful, and you can then exit the software:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**打开**后，你将看到一个类似于*图5.6*左侧的屏幕，其中**镜像文件**框中显示你的选择位置。点击**读取**按钮开始复制镜像。在读取镜像时，你会看到一个进度条和剩余时间的估计。当镜像完成时，Win32
    Disk Imager会告诉你读取成功，然后你可以退出软件：
- en: '![](img/B15660_05_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![img/B15660_05_06.jpg](img/B15660_05_06.jpg)'
- en: Figure 5.6 – Reading the image
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 读取镜像
- en: You have now created a complete copy of the data on the SD card. If you have
    corruption or configuration issues, you can write this image back to an SD card
    to restore it to this point.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在SD卡上创建了一个数据完整副本。如果你遇到损坏或配置问题，你可以将此镜像写回SD卡以恢复到这个点。
- en: Mac
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac
- en: 'MacOS X has a built-in way to make SD card and disk images. This is by using
    the built-in Disk Utility tool. Let''s see how this works:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: MacOS X有一个内置的方法来创建SD卡和磁盘镜像。这是通过使用内置的磁盘工具完成的。让我们看看它是如何工作的：
- en: Start the **Disk Utility** tool. When loaded, it should look like *Figure 5.7*:![](img/B15660_05_07.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**磁盘工具**工具。加载后，它应该看起来像*图5.7*：![img/B15660_05_07.jpg](img/B15660_05_07.jpg)
- en: Figure 5.7 – The Disk Utility tool
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.7 – 磁盘工具*'
- en: Click the **View** menu to show *Figure 5.8*:![](img/B15660_05_08.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**查看**菜单以显示*图5.8*：![img/B15660_05_08.jpg](img/B15660_05_08.jpg)
- en: Figure 5.8 – The View menu
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.8 – 查看菜单*'
- en: Now click on the **Show All Devices** option.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**显示所有设备**选项。
- en: You should now see the screen shown in *Figure 5.9*. Select the device that
    contains a boot volume:![](img/B15660_05_09.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该能看到*图5.9*中显示的屏幕。选择包含引导分区的设备！![img/B15660_05_09.jpg](img/B15660_05_09.jpg)
- en: Figure 5.9 – Disk Utility with Show All Devices enabled
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.9 – 启用显示所有设备的磁盘工具*'
- en: In the menu bar, select **File** | **New Image** (*Figure 5.10*):![](img/B15660_05_10.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单栏中，选择**文件** | **新建映像**（*图5.10*）：![img/B15660_05_10.jpg](img/B15660_05_10.jpg)
- en: Figure 5.10 – New Image menu
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.10 – 新建映像菜单*'
- en: Under this, select **Image from <your storage device>** (*Figure 5.11*):![](img/B15660_05_11.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之下，选择**从<您的存储设备>创建映像**（*图5.11*）：![img/B15660_05_11.jpg](img/B15660_05_11.jpg)
- en: Figure 5.11 – Image from STORAGE DEVICE
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.11 – 存储设备图像*'
- en: Disk Utility will show a dialog (*Figure 5.12*). Set the file name and location,
    and **Format** to **DVD/CD master**:![](img/B15660_05_12.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 磁盘工具将显示一个对话框（*图5.12*）。设置文件名和位置，并将**格式**设置为**DVD/CD主盘**：![img/B15660_05_12.jpg](img/B15660_05_12.jpg)
- en: Figure 5.12 – Save dialog
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.12 – 保存对话框*'
- en: Disk Utility gives these files a `.cdr` extension (*Figure 5.13*):![](img/B15660_05_13.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 磁盘工具给这些文件一个`.cdr`扩展名（*图5.13*）：![img/B15660_05_13.jpg](img/B15660_05_13.jpg)
- en: Figure 5.13 – File with .cdr extension
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.13 – 扩展名为.cdr的文件*'
- en: Rename this to a `.iso`:![](img/B15660_05_14.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为`.iso`：![img/B15660_05_14.jpg](img/B15660_05_14.jpg)
- en: Figure 5.14 – Renamed to .iso
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图5.14 – 重命名为.iso*'
- en: 'You will need to confirm you want this (*Figure 5.15*):'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要确认您想要这样做（*图5.15*）：
- en: '![](img/B15660_05_15.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![img/B15660_05_15.jpg](img/B15660_05_15.jpg)'
- en: Figure 5.15 – Confirm extension change
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.15 – 确认扩展名更改*'
- en: You are now able to create SD images ready to use with balenaEtcher on macOS.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用balenaEtcher在macOS上创建SD映像。
- en: Linux
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: 'Backing up SD cards is done on the command line in Linux by using the `dd`
    command. Before we see how this works, we will first need to find the device''s
    location. Let''s begin:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux的命令行中，通过使用`dd`命令来备份SD卡。在我们看到它是如何工作的之前，我们首先需要找到设备的位置。让我们开始：
- en: 'Insert the card and type the following to find the device''s location:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入卡并输入以下内容以找到设备的位置：
- en: '[PRE8]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command will output a lot of stuff, but you are interested only in a line
    near the end that looks like the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将输出很多内容，但您只对接近结尾的一行感兴趣，看起来如下所示：
- en: '[PRE9]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once you have the SD location (such as `/dev/sdb` or `/dev/disk1`), you can
    then start the clone with the `dd` command. This command dumps data to and from
    drives:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您有了SD位置（例如`/dev/sdb`或`/dev/disk1`），您就可以使用`dd`命令开始克隆。此命令将数据从驱动器中转储到另一个驱动器：
- en: '[PRE10]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `if` parameter is the `of` parameter is the `myrobot.img` file you are cloning
    your card into.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`参数是`of`参数，是你将要克隆到卡中的`myrobot.img`文件。'
- en: The `bs` parameter is the `32M`, will make the operation quicker.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`bs`参数是`32M`，会使操作更快。'
- en: You will need to type your user password for this to start. The `dd` command
    creates the `myrobot.img` file as a clone of the whole SD card in your home directory.
    `dd` will give no output until it is complete, and will then show you stats about
    the operation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动此操作，您需要输入用户密码。`dd`命令将在您的家目录中创建一个`myrobot.img`文件，作为整个SD卡的克隆。`dd`命令在完成前不会给出任何输出，完成后会显示操作统计信息。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned how to look after your code and configuration.
    You have seen how things can go wrong, and the strategies to protect your work
    from them. You have a starting point with Git, SFTP, and SD card backups that
    you can use together to be a bit more experimental and fearless about changes
    to your robot. You can use SFTP to edit on your computer, giving you at least
    one copy other than the code on your robot and letting you use powerful editors.
    You can use Git to go back in time, so you can wind back from mistakes and experiments,
    or just see the differences. You can use SD card backups to get a complete image
    of the storage your Raspberry Pi is using, and restore it if it goes wrong.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了如何照顾您的代码和配置。您已经看到了事情可能出错的方式，以及保护您的工作免受其害的策略。您有了Git、SFTP和SD卡备份的起点，您可以将它们一起使用，对您的机器人进行一些实验，并无所畏惧地改变它。您可以使用SFTP在您的计算机上编辑，这样您至少有一份除了机器人上的代码之外的副本，并让您使用强大的编辑器。您可以使用Git回到过去，这样您可以从错误和实验中恢复，或者只是查看差异。您可以使用SD卡备份来获取Raspberry
    Pi使用的存储的完整映像，并在出错时恢复它。
- en: In the next chapter, we'll start to build a basic robot. We'll assemble the
    robot chassis with motors and wheels, determine what power systems to use, then
    test fit the overall shape of our robot. Bring a screwdriver!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始构建一个基本的机器人。我们将组装带有电机和轮子的机器人底盘，确定要使用的电源系统，然后测试调整我们机器人的整体形状。带上螺丝刀！
- en: Assessment
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Try creating a file on your computer – a simple image or text. Try using SFTP
    to send it to the Raspberry Pi, then, using PuTTY, see if you can list the file
    with the `ls` command. The file could be a simple Python script, which you could
    try running on the Raspberry Pi.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的电脑上尝试创建一个文件——一个简单的图片或文本文件。尝试使用 SFTP 将其发送到树莓派，然后使用 PuTTY，看看你是否可以使用 `ls` 命令列出该文件。该文件可以是一个简单的
    Python 脚本，你可以在树莓派上尝试运行它。
- en: Make a change that is incorrect to `hello.py`. Use `diff` to see the difference.
    Use Git resources (see the *Further reading* section) to find out how to return
    this to how it was before the change.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `hello.py` 进行一个错误的更改。使用 `diff` 查看差异。使用 Git 资源（见 *进一步阅读* 部分）了解如何将其恢复到更改前的状态。
- en: Make a backup of your Raspberry Pi SD card using the preceding instructions,
    make some changes to the data in `/home/pi`, then restore the image using balenaEtcher.
    You could even restore your backup to another SD card, and plug it into the Raspberry
    Pi as if it was the original.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用前面的说明备份你的树莓派 SD 卡，对 `/home/pi` 中的数据进行一些更改，然后使用 balenaEtcher 恢复镜像。你甚至可以将备份恢复到另一张
    SD 卡，并将其插入树莓派，就像它是原始卡一样。
- en: I recommend finding out more about how Git can be used to look after your code,
    and even as a method of getting code onto the Raspberry Pi. Use the *Further reading*
    section to find out more about Git, and ways to work it into your coding workflow.
    Git can be complicated, but it is a tool worth learning.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我建议了解 Git 如何用于管理你的代码，甚至作为将代码上传到树莓派的方法。使用 *进一步阅读* 部分了解更多关于 Git 的信息，以及如何将其融入你的编码工作流程。Git
    可能很复杂，但它是一个值得学习的工具。
- en: Further reading
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please refer to the following for more information:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下内容获取更多信息：
- en: 'The Git Handbook on GitHub: [https://guides.github.com/introduction/git-handbook/](https://guides.github.com/introduction/git-handbook/).
    This document is a comprehensive look at what Git is, the problems it solves,
    and a starting point to using its functionality.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 上的 Git 手册：[https://guides.github.com/introduction/git-handbook/](https://guides.github.com/introduction/git-handbook/)。这份文档全面介绍了
    Git 是什么，它解决的问题，以及使用其功能的起点。
- en: 'Hands-On Version Control with Git: [https://www.packtpub.com/application-development/hands-version-control-git-video](https://www.packtpub.com/application-development/hands-version-control-git-video).
    This is a video tutorial on using Git.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Git 进行动手式版本控制：[https://www.packtpub.com/application-development/hands-version-control-git-video](https://www.packtpub.com/application-development/hands-version-control-git-video)。这是一个关于使用
    Git 的视频教程。
- en: 'The GitHub Guides: [https://guides.github.com/](https://guides.github.com/).
    A series of guides on getting the best out of Git and GitHub.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 指南：[https://guides.github.com/](https://guides.github.com/)。一系列关于如何充分利用
    Git 和 GitHub 的指南。
- en: 'GitLab Basics: [https://docs.gitlab.com/ee/gitlab-basics/](https://docs.gitlab.com/ee/gitlab-basics/).
    GitLab is an excellent alternative to GitHub, with a large community and some
    excellent guides on using Git.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab 基础知识：[https://docs.gitlab.com/ee/gitlab-basics/](https://docs.gitlab.com/ee/gitlab-basics/)。GitLab
    是 GitHub 的优秀替代品，拥有庞大的社区和一些关于使用 Git 的优秀指南。
