- en: '*Chapter 5*: Backing Up the Code with Git and SD Card Copies'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you create and customize the code for your robot, you will invest many hours
    in getting it to do awesome things that, unless you take precautions, could all
    suddenly disappear. The programs are not the whole story, as you've already started
    configuring Raspberry Pi OS for use on the robot. You want to keep your code and
    config in case of disaster, and to be able to go back if you make changes you
    regret.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will help you understand how exactly code or configuration can
    break and the disasters you might face while customizing code for your robot.
    We'll then take a look at three strategies for preventing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how code can be broken or lost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategy 1 – Keeping the code on a PC and uploading it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategy 2 – Using Git to go back in time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategy 3 – Making SD card backups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi and the SD card you prepared in the previous chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The USB power supply and cable you used with the Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Windows, Linux, or macOS computer or laptop, connected to the internet and
    able to read/write to SD cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Software: FileZilla and Git'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Windows: Win32DiskImager'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the GitHub link for the code files of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming/tree/master/chapter5](https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming/tree/master/chapter5)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3bAm94l](https://bit.ly/3bAm94l)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how code can be broken or lost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code and its close cousin, configuration, take time and hard work. Code needs
    configuration to run, such as Raspberry Pi OS configuration, extra software, and
    necessary data files. Both need research and learning and to be designed, made,
    tested, and debugged.
  prefs: []
  type: TYPE_NORMAL
- en: Many bad situations can lead to the loss of code. These have happened to me
    a week before taking robots to a show after weeks of work, and I learned the hard
    way to take this quite seriously. So, what can happen to your code?
  prefs: []
  type: TYPE_NORMAL
- en: SD card data loss and corruption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SD card corruption is when the data on the SD card used to hold your code, Raspberry
    Pi OS, and anything you've prepared on it gets broken. Files become unreadable,
    or the card becomes unusable. The information on the SD card can be permanently
    lost.
  prefs: []
  type: TYPE_NORMAL
- en: If a Raspberry Pi unexpectedly loses power, the SD card can be damaged, causing
    data loss. A hot Pi can slowly bake an SD card, damaging it. Visual processing
    on a Pi is one way it can get hot. SD cards get damaged if something terrible
    happens electrically to the Pi via the GPIO pins or its power supply. MicroSD
    cards are also tiny and are quickly lost when not in the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the code or configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We all make mistakes. Coding means trying things out. While some work out, some
    do not and things break. At those times, you'll want to go back and see what you've
    changed. You might be able to use differences to find the bug, or if your experiment
    looks like a dead end, you may want to go back to a known working version.
  prefs: []
  type: TYPE_NORMAL
- en: You can also render your robot useless with the wrong configuration, such as
    the Pi not being on the network or booting anymore. An upgrade to system packages
    may go wrong and lead to code not working or needing extensive changes to the
    code for it to work again.
  prefs: []
  type: TYPE_NORMAL
- en: These problems can combine to cause real nightmares. I've seen changes in the
    code lead a robot to misbehave and damage itself in a way that made the SD card
    corrupted. I've been updating packages on the operating system when I knocked
    the power cable out, corrupting the SD card and breaking Raspberry Pi OS 2 weeks
    before a significant robot event, and it was painful rebuilding it. This was a
    lesson learned the hard way.
  prefs: []
  type: TYPE_NORMAL
- en: Back up the code and back up the SD card configuration. Over the rest of this
    chapter, we'll look at some solutions to keep your robot's software safe from
    many kinds of disasters.
  prefs: []
  type: TYPE_NORMAL
- en: Strategy 1 – Keeping the code on a PC and uploading it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Secure File Transfer Protocol** (**SFTP**) lets you transfer files from a
    computer to a Pi. This strategy enables you to write code on your computer, then
    upload it to the Raspberry Pi. You can choose your editor and have the safety
    of more than one copy.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: But wait – which editor? Editing code requires software designed for this purpose.
    Recommendations for Python are Mu, Microsoft VS Code, Notepad++, and PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: 'SFTP uses SSH to copy files to and from the Raspberry Pi over the network.
    So, let''s see how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: First, make yourself a folder on the PC to store your robot code in; for example,
    `my_robot_project`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside that folder, make a test file, using your editor, that will just print
    a bit of text. Put this code into a file named `hello.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will copy this to the robot and run it. You can make the copy using the SFTP
    tool FileZilla from [https://filezilla-project.org](https://filezilla-project.org).
    Download this and follow the installation instructions:![](img/B15660_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.1 – FileZilla
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Plug in and power up your Raspberry Pi. You will notice at the bottom of the
    right-hand panel (*Figure 5.1*), FileZilla says **Not connected**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `sftp://`; for example, `sftp://myrobot.local`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `pi`, and in the **Password** box, enter the password you set up before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Quickconnect** button to connect to the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When connected, you'll see files on the Raspberry Pi in the right-hand **Remote
    site** panel, shown in *Figure 5.2*:![](img/B15660_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.2 – The Raspberry Pi connected
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the left-hand **Local site** panel to go to your code on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click `hello.py`, highlighted at the top left of *Figure 5.3*, and drag
    it to the lower right-hand panel to put it on the Raspberry Pi:![](img/B15660_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.3 – Transferring a file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you drag the file over, you should see it in the **Queued files** section,
    as shown in *Figure 5.3*. Since this file is small, it will only be in this queued
    state for an instant. You can also use the same system for whole folders. You'll
    soon see the file over in the remote site (the Raspberry Pi), shown on the right-hand
    panel in *Figure 5.3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run this code, use PuTTY to log in to the Pi and try the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This strategy is a great start to making code safer. By working on your laptop/PC
    and copying to the Pi, you've guaranteed there is always one copy other than the
    one on the robot. You've also got the ability to use any code editor you like
    on the PC and spot some errors before they even get to the Raspberry Pi. Now we
    have a copy, let's see how we can track changes to our code and see what we've
    changed.
  prefs: []
  type: TYPE_NORMAL
- en: Strategy 2 – Using Git to go back in time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Git** is a popular form of source control, a way to keep a history of changes
    you''ve made to code. You can go back through changes, see what they were, restore
    older versions, and keep a commented log of why you made the changes. Git also
    lets you store code in more than one location in case your hard drive fails. Git
    stores code and its history in repositories, or repos. In Git, you can make branches,
    copies of the whole set of code, to try ideas in parallel with your code, and
    later merge those back to the main branch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I will get you started, but this section can only scratch the surface of what
    you can do with Git. Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Git, by following the instructions at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
    for your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you are using Windows or macOS, I would suggest using the GitHub app for
    easier setup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Git requires you to set your identity using a command line on your computer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To put this project under source control, we need to initialize it and commit
    our first bit of code. Make sure you are in the folder for your code (`my_robot_project`)
    in a command line on your computer and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now see the journal with `git log`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now modify the code in `hello.py`, changing it to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'print line, and in its place adding an import and then a print line. We can
    add this into Git to make a new version, and then use git log again to see both
    versions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this method, you can go back to previous versions, or just compare versions,
    and protect yourself against changes you might regret. However, we have only just
    scratched the surface of the power of Git. See the reference in the *Further reading*
    section on how to branch, use remote services, roll back to previous versions,
    and find tools to browse the code in the Git history.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can go back and forward in time (at least for our code), we can be more
    confident in making changes. Just remember to make commits frequently – especially
    after making something work! Next, we will look at how to keep the configuration
    and installed packages.
  prefs: []
  type: TYPE_NORMAL
- en: Strategy 3 – Making SD card backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git and SFTP are great for keeping code safe, but they don't help you reinstall
    and reconfigure Raspberry Pi OS on a card. The procedures for Windows, Linux,
    and macOS are quite different for this. The basic idea is to insert the SD card
    and use a tool to clone the whole card to a file known as an image, which you
    can restore with balenaEtcher when you need recovery.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You should only restore images to cards of the same size or larger. Putting
    an image on a smaller device is likely to fail to write, creating a corrupt SD
    card.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, properly shut down your Raspberry Pi, take out its SD card,
    and put that into your computer. These clean images are large, so do not put them
    in your Git repository. It's beyond the scope of this chapter, but I recommend
    finding a way to compress these files as they are mostly empty right now. In all
    cases, expect this operation to take 20-30 minutes due to the image sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Windows, we''ll use Win32DiskImager. So, our first step will be to install
    and set this up. Follow along:'
  prefs: []
  type: TYPE_NORMAL
- en: Get an installer for this at [https://sourceforge.net/projects/win32diskimager](https://sourceforge.net/projects/win32diskimager).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run this and follow the installation instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since we will use it immediately, I suggest leaving the **Launch immediately**
    checkbox ticked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Highlighted on the right of *Figure 5.4* is the **Device**; this should have
    automatically found the SD card device. Use the folder icon highlighted to choose
    where the image file will be stored:![](img/B15660_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.4 – Win32 Disk Imager
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In *Figure 5.5*, I name my image `myrobot.img` in the **File name** box. You
    then click the **Open** button to confirm this:![](img/B15660_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.5 – Choose the location
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After clicking **Open**, you''ll see a screen like the left side of *Figure
    5.6* with your selected location in the **Image File** box. Click on the **Read**
    button to start copying the image. As it reads the image, you''ll see a progress
    bar and an estimation of the time remaining. When the image is done, Win32 Disk
    Imager will tell you that the read was successful, and you can then exit the software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B15660_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Reading the image
  prefs: []
  type: TYPE_NORMAL
- en: You have now created a complete copy of the data on the SD card. If you have
    corruption or configuration issues, you can write this image back to an SD card
    to restore it to this point.
  prefs: []
  type: TYPE_NORMAL
- en: Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MacOS X has a built-in way to make SD card and disk images. This is by using
    the built-in Disk Utility tool. Let''s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the **Disk Utility** tool. When loaded, it should look like *Figure 5.7*:![](img/B15660_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.7 – The Disk Utility tool
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **View** menu to show *Figure 5.8*:![](img/B15660_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.8 – The View menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now click on the **Show All Devices** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see the screen shown in *Figure 5.9*. Select the device that
    contains a boot volume:![](img/B15660_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.9 – Disk Utility with Show All Devices enabled
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the menu bar, select **File** | **New Image** (*Figure 5.10*):![](img/B15660_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.10 – New Image menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Under this, select **Image from <your storage device>** (*Figure 5.11*):![](img/B15660_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.11 – Image from STORAGE DEVICE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Disk Utility will show a dialog (*Figure 5.12*). Set the file name and location,
    and **Format** to **DVD/CD master**:![](img/B15660_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.12 – Save dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Disk Utility gives these files a `.cdr` extension (*Figure 5.13*):![](img/B15660_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.13 – File with .cdr extension
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Rename this to a `.iso`:![](img/B15660_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.14 – Renamed to .iso
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will need to confirm you want this (*Figure 5.15*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B15660_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Confirm extension change
  prefs: []
  type: TYPE_NORMAL
- en: You are now able to create SD images ready to use with balenaEtcher on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Backing up SD cards is done on the command line in Linux by using the `dd`
    command. Before we see how this works, we will first need to find the device''s
    location. Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the card and type the following to find the device''s location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will output a lot of stuff, but you are interested only in a line
    near the end that looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have the SD location (such as `/dev/sdb` or `/dev/disk1`), you can
    then start the clone with the `dd` command. This command dumps data to and from
    drives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `if` parameter is the `of` parameter is the `myrobot.img` file you are cloning
    your card into.
  prefs: []
  type: TYPE_NORMAL
- en: The `bs` parameter is the `32M`, will make the operation quicker.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to type your user password for this to start. The `dd` command
    creates the `myrobot.img` file as a clone of the whole SD card in your home directory.
    `dd` will give no output until it is complete, and will then show you stats about
    the operation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to look after your code and configuration.
    You have seen how things can go wrong, and the strategies to protect your work
    from them. You have a starting point with Git, SFTP, and SD card backups that
    you can use together to be a bit more experimental and fearless about changes
    to your robot. You can use SFTP to edit on your computer, giving you at least
    one copy other than the code on your robot and letting you use powerful editors.
    You can use Git to go back in time, so you can wind back from mistakes and experiments,
    or just see the differences. You can use SD card backups to get a complete image
    of the storage your Raspberry Pi is using, and restore it if it goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll start to build a basic robot. We'll assemble the
    robot chassis with motors and wheels, determine what power systems to use, then
    test fit the overall shape of our robot. Bring a screwdriver!
  prefs: []
  type: TYPE_NORMAL
- en: Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Try creating a file on your computer – a simple image or text. Try using SFTP
    to send it to the Raspberry Pi, then, using PuTTY, see if you can list the file
    with the `ls` command. The file could be a simple Python script, which you could
    try running on the Raspberry Pi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a change that is incorrect to `hello.py`. Use `diff` to see the difference.
    Use Git resources (see the *Further reading* section) to find out how to return
    this to how it was before the change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a backup of your Raspberry Pi SD card using the preceding instructions,
    make some changes to the data in `/home/pi`, then restore the image using balenaEtcher.
    You could even restore your backup to another SD card, and plug it into the Raspberry
    Pi as if it was the original.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend finding out more about how Git can be used to look after your code,
    and even as a method of getting code onto the Raspberry Pi. Use the *Further reading*
    section to find out more about Git, and ways to work it into your coding workflow.
    Git can be complicated, but it is a tool worth learning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Git Handbook on GitHub: [https://guides.github.com/introduction/git-handbook/](https://guides.github.com/introduction/git-handbook/).
    This document is a comprehensive look at what Git is, the problems it solves,
    and a starting point to using its functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hands-On Version Control with Git: [https://www.packtpub.com/application-development/hands-version-control-git-video](https://www.packtpub.com/application-development/hands-version-control-git-video).
    This is a video tutorial on using Git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The GitHub Guides: [https://guides.github.com/](https://guides.github.com/).
    A series of guides on getting the best out of Git and GitHub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitLab Basics: [https://docs.gitlab.com/ee/gitlab-basics/](https://docs.gitlab.com/ee/gitlab-basics/).
    GitLab is an excellent alternative to GitHub, with a large community and some
    excellent guides on using Git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
