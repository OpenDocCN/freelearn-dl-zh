["```py\nusing UnityEngine;\nusing System.Collections;\npublic class PlayerTankController : MonoBehaviour {\n    public GameObject Bullet;\n    public GameObject Turret;\n    public GameObject bulletSpawnPoint;\n    public float rotSpeed = 150.0f;\n     public float turretRotSpeed = 10.0f;\n    public float maxForwardSpeed = 300.0f; \n    public float maxBackwardSpeed = -300.0f;\n    public float shootRate = 0.5f; \n    private float curSpeed, targetSpeed;\n    protected float elapsedTime;\n    void Start() {\n   }\n    void Update() {\n        UpdateWeapon();\n        UpdateControl();\n    }\n```", "```py\nvoid UpdateWeapon() {\n    elapsedTime += Time.deltaTime;\n    if (Input.GetMouseButtonDown(0)) {\n        if (elapsedTime >= shootRate) {\n            //Reset the time \n            elapsedTime = 0.0f;\n            //Instantiate the bullet\n            Instantiate(Bullet,\n              bulletSpawnPoint.transform.position,\n              bulletSpawnPoint.transform.rotation);\n        }\n    }\n}\n```", "```py\nvoid UpdateControl() {\n    // AIMING WITH THE MOUSE\n    // Generate a plane that intersects the Transform's\n    // position with an upwards normal.\n    Plane playerPlane = new Plane(Vector3.up,\n      transform.position + new Vector3(0, 0, 0));\n    // Generate a ray from the cursor position \n    Ray RayCast =\n      Camera.main.ScreenPointToRay(Input.mousePosition);\n    // Determine the point where the cursor ray intersects\n    // the plane.\n    float HitDist = 0;\n    // If the ray is parallel to the plane, Raycast will\n    // return false.\n    if (playerPlane.Raycast(RayCast, out HitDist)) {\n        // Get the point along the ray that hits the\n        // calculated distance.\n        Vector3 RayHitPoint = RayCast.GetPoint(HitDist);\n        Quaternion targetRotation = \n          Quaternion.LookRotation(RayHitPoint –\n                                  transform.position);\n        Turret.transform.rotation = Quaternion.Slerp(\n          Turret.transform.rotation, targetRotation,\n          Time.deltaTime * turretRotSpeed);\n    }\n}\n```", "```py\nif (Input.GetKey(KeyCode.W)) {\n    targetSpeed = maxForwardSpeed;\n} else if (Input.GetKey(KeyCode.S)) {\n    targetSpeed = maxBackwardSpeed;\n} else {\n    targetSpeed = 0;\n}\nif (Input.GetKey(KeyCode.A)) {\n    transform.Rotate(0, -rotSpeed * Time.deltaTime, 0.0f);\n} else if (Input.GetKey(KeyCode.D)) {\n    transform.Rotate(0, rotSpeed * Time.deltaTime, 0.0f);\n}\n//Determine current speed\ncurSpeed = Mathf.Lerp(curSpeed, targetSpeed, 7.0f *\n                      Time.deltaTime);\ntransform.Translate(Vector3.forward * Time.deltaTime *\n                    curSpeed);\n```", "```py\nusing UnityEngine;\nusing System.Collections;\npublic class Bullet : MonoBehaviour {\n    //Explosion Effect \n    [SerializeField] // Used to expose in the inspector private \n                     // fields!\n    private GameObject Explosion;\n    [SerializeField]\n    private float Speed = 600.0f;\n    [SerializeField]\n    private float LifeTime = 3.0f;\n    public int damage = 50;\n    void Start() {\n        Destroy(gameObject, LifeTime);\n    }\n    void Update() {\n        transform.position +=\n        transform.forward * Speed * Time.deltaTime;\n    }\n    void OnCollisionEnter(Collision collision) {\n        ContactPoint contact = collision.contacts[0];\n        Instantiate(Explosion, contact.point,\n                    Quaternion.identity);\n        Destroy(gameObject);\n    }\n}\n```", "```py\nusing UnityEngine;\npublic class AutoDestruct : MonoBehaviour {\n    [SerializeField]\n    private float DestructTime = 2.0f;\n    void Start() {\n        Destroy(gameObject, DestructTime);\n    }\n}\n```", "```py\nusing UnityEngine;\nusing System.Collections;\npublic class FSM : MonoBehaviour {\n    protected virtual void Initialize() { } \n\n    protected virtual void FSMUpdate() { } \n\n    protected virtual void FSMFixedUpdate() { }\n    // Use this for initialization \n    void Start () {\n        Initialize();\n    }\n    // Update is called once per frame \n    void Update () {\n        FSMUpdate();\n    }\n    void FixedUpdate() {\n        FSMFixedUpdate();\n    }\n}\n```", "```py\nusing UnityEngine;\nusing System.Collections;\npublic class SimpleFSM : FSM {\n    public enum FSMState {\n        None, Patrol, Chase, Attack, Dead,\n    }\n    //Current state that the NPC is reaching\n    public FSMState curState = FSMState.Patrol;\n    //Speed of the tank\n    private float curSpeed = 150.0f;\n    //Tank Rotation Speed\n    private float curRotSpeed = 2.0f;\n    //Bullet\n    public GameObject Bullet;\n    //Whether the NPC is destroyed or not\n    private bool bDead = false;\n    private int health = 100;\n    // We overwrite the deprecated built-in rigidbody \n    // variable.\n    new private Rigidbody rigidbody;\n    //Player Transform\n    protected Transform playerTransform;\n    //Next destination position of the NPC Tank\n    protected Vector3 destPos;\n    //List of points for patrolling\n    protected GameObject[] pointList;\n    //Bullet shooting rate\n    protected float shootRate = 3.0f;\n    protected float elapsedTime = 0.0f;\n    public float maxFireAimError = 0.001f;\n    // Status Radius\n    public float patrollingRadius = 100.0f;\n    public float attackRadius = 200.0f;\n    public float playerNearRadius = 300.0f;\n    //Tank Turret\n    public Transform turret;\n    public Transform bulletSpawnPoint;\n```", "```py\n//Initialize the Finite state machine for the NPC tank protected override void Initialize () {\n    // Get the list of points \n    pointList = \n      GameObject.FindGameObjectsWithTag(\"WandarPoint\");\n    // Set Random destination point first \n    FindNextPoint();\n    // Get the target enemy(Player) \n    GameObject objPlayer =\n    GameObject.FindGameObjectWithTag(\"Player\");\n    // Get the rigidbody\n    rigidbody = GetComponent<Rigidbody>();\n    playerTransform = objPlayer.transform;\n    if (!playerTransform) {\n        print(\"Player doesn't exist. Please add one with\n               Tag named 'Player'\");\n    }\n}\n```", "```py\nprotected override void FSMUpdate() {\n    switch (curState) {\n        case FSMState.Patrol: \n            UpdatePatrolState(); \n            break; \n        case FSMState.Chase: \n            UpdateChaseState(); \n            break; \n        case FSMState.Attack: \n            UpdateAttackState(); \n            break; \n        case FSMState.Dead: \n            UpdateDeadState();\n            break;\n   }\n    // Update the time\n    elapsedTime += Time.deltaTime;\n    // Go to dead state is no health left \n    if (health <= 0) {\n        curState = FSMState.Dead;\n    }\n}\n```", "```py\nprotected void UpdatePatrolState() {\n    if (Vector3.Distance(transform.position, destPos) <=\n        patrollingRadius) {\n        print(\"Reached to the destination point\\n \n               calculating the next point\");\n        FindNextPoint();\n    } else if (Vector3.Distance(transform.position,\n        playerTransform.position) <= playerNearRadius) {\n        print(\"Switch to Chase Position\");\n        curState = FSMState.Chase;\n    }\n    // Rotate to the target point \n    Quaternion targetRotation = Quaternion.LookRotation(\n      destPos - transform.position);\n    transform.rotation = Quaternion.Slerp(\n      transform.rotation, targetRotation,\n      Time.deltaTime * curRotSpeed);\n    // Go Forward\n    transform.Translate(Vector3.forward * Time.deltaTime *\n                        curSpeed);\n}\nprotected void FindNextPoint() {\n    print(\"Finding next point\");\n    int rndIndex = Random.Range(0, pointList.Length); \n    float rndRadius = 10.0f;\n    Vector3 rndPosition = Vector3.zero;\n    destPos = pointList[rndIndex].transform.position + \n      rndPosition;\n    // Check Range to decide the random point as the same\n    // as before\n    if (IsInCurrentRange(destPos)) {\n        rndPosition = new Vector3(Random.Range(-rndRadius,\n          rndRadius), 0.0f, Random.Range(-rndRadius,\n          rndRadius));\n        destPos = pointList[rndIndex].transform.position +\n          rndPosition;\n    }\n}\nprotected bool IsInCurrentRange(Vector3 pos) {\n    float xPos = Mathf.Abs(pos.x - transform.position.x);\n    float zPos = Mathf.Abs(pos.z - transform.position.z);\n    if (xPos <= 50 && zPos <= 50) return true;\n    return false;\n}\n```", "```py\nprotected void UpdateChaseState() {\n    // Set the target position as the player position \n    destPos = playerTransform.position;\n    // Check the distance with player tank When\n    // the distance is near, transition to attack state \n    float dist = Vector3.Distance(transform.position,\n      playerTransform.position);\n    if (dist <= attackRadius) {\n        curState = FSMState.Attack;\n    } else if (dist >= playerNearRadius {\n        curState = FSMState.Patrol;\n    }\n    transform.Translate(Vector3.forward * Time.deltaTime *\n                        curSpeed);\n}\n```", "```py\nprotected void UpdateAttackState() {\n    destPos = playerTransform.position;\n    Vector3 frontVector = Vector3.forward;\n    float dist = Vector3.Distance(transform.position,\n      playerTransform.position);\n    if (dist >= attackRadius && dist < playerNearRadius {\n        Quaternion targetRotation = \n          Quaternion. FromToRotation(destPos – \n                                     transform.position); \n        transform.rotation = Quaternion.Slerp(\n          transform.rotation, targetRotation,\n          Time.deltaTime * curRotSpeed);\n        transform.Translate(Vector3.forward * \n                            Time.deltaTime * curSpeed);\n        curState = FSMState.Attack;\n    } else if (dist >= playerNearRadius) {\n        curState = FSMState.Patrol;\n    }\n    // Rotate the turret to the target point\n    // The rotation is only around the vertical axis of the\n    // tank.\n    Quaternion targetRotation = Quaternion.FromToRotation(\n      frontVector, destPos - transform.position);\n    turret.rotation = Quaternion.Slerp(turret.rotation,\n      turretRotation, Time.deltaTime * curRotSpeed);\n    //Shoot the bullets\n    if (Mathf.Abs(Quaternion.Dot(turretRotation,\n      turret.rotation)) > 1.0f - maxFireAimError) {\n        ShootBullet();\n    }\n}\nprivate void ShootBullet() {\n    if (elapsedTime >= shootRate) {\n        Instantiate(Bullet, bulletSpawnPoint.position,\n                    bulletSpawnPoint.rotation);\n        elapsedTime = 0.0f;\n    }\n}\n```", "```py\nprotected void UpdateDeadState() {\n    // Show the dead animation with some physics effects \n    if (!bDead) {\n        bDead = true;\n        Explode();\n    }\n}\n```", "```py\nprotected void Explode() {\n    float rndX = Random.Range(10.0f, 30.0f); \n    float rndZ = Random.Range(10.0f, 30.0f); \n    for (int i = 0; i < 3; i++) {\n        rigidbody.AddExplosionForce(10000.0f,\n          transform.position - new Vector3(rndX, \n          10.0f, rndZ), 40.0f, 10.0f);\n        rigidbody.velocity = transform.TransformDirection(\n          new Vector3(rndX, 20.0f, rndZ));\n    }\n    Destroy(gameObject, 1.5f);\n}\n```", "```py\nvoid OnCollisionEnter(Collision collision) {\n    // Reduce health \n    if(collision.gameObject.tag == \"Bullet\") {\n        health -=collision.gameObject.GetComponent\n          <Bullet>().damage;\n    }\n}\n```", "```py\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\npublic enum Transition {\n    None = 0, SawPlayer, ReachPlayer, LostPlayer, NoHealth,\n}\npublic enum FSMStateID {\n    None = 0, Patrolling, Chasing, Attacking, Dead,\n}\n```", "```py\npublic class AdvancedFSM : FSM {\n    private List<FSMState> fsmStates; \n    private FSMStateID currentStateID; \n    public FSMStateID CurrentStateID {\n        get {\n            return currentStateID;\n        }\n    }\n    private FSMState currentState; \n    public FSMState CurrentState {\n        get {\n            return currentState;\n        }\n    }\n```", "```py\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\npublic abstract class FSMState {\n    protected Dictionary<Transition, FSMStateID> map = \n      new Dictionary<Transition, FSMStateID>();\n    // Continue...\n```", "```py\n...\n    public abstract void CheckTransitionRules(Transform \n      player, Transform npc);\n    public abstract void RunState(Transform player,\n      Transform npc);\n...\n```", "```py\nusing UnityEngine;\nusing System.Collections;\npublic class PatrolState : FSMState {\n    private Vector3 destPos;\n    private Transform[] waypoints;\n    private float curRotSpeed = 1.0f;\n    private float curSpeed = 100.0f;\n    private float playerNearRadius;\n    private float patrollRadius;\n    public PatrolState(Transform[] wp, float\n      playerNearRadius, float patrollRadius) {\n        waypoints = wp;\n        stateID = FSMStateID.Patrolling;\n        this.playerNearRadius = playerNearRadius;\n        this.patrollRadius = patrollRadius;\n    }\n    public override void CheckTransitionRules(\n      Transform player, Transform npc) {\n        // Check the distance with player tank\n        // When the distance is near, transition to chase\n       // state \n        if (Vector3.Distance(npc.position, player.position)\n            <= playerNearRadius) {\n            Debug.Log(\"Switch to Chase State\");\n            NPCTankController npcTankController = \n              npc.GetComponent<NPCTankController>();\n            if (npcTankController != null) {\n                npcTankController.SetTransition(\n                Transition.SawPlayer);\n            } else {\n                Debug.LogError(\"NPCTankController not found\n                                in NPC\");\n            }\n        }\n    }\n    public override void RunState(Transform player,\n      Transform npc) {\n        // Find another random patrol point if the current\n        // point is reached\n        if (Vector3.Distance(npc.position, destPos) <= \n            patrollRadius) {\n            Debug.Log(\"Reached to the destination point\\n\n                       calculating the next point\"); \n            FindNextPoint();\n        }\n        // Rotate to the target point\n        Quaternion targetRotation =\n          Quaternion.FromToRotation(Vector3.forward,\n          destPos - npc.position);\n        npc.rotation = Quaternion.Slerp(npc.rotation,\n          targetRotation, Time.deltaTime * curRotSpeed);\n        // Go Forward \n        npc.Translate(Vector3.forward * Time.deltaTime * \n                      curSpeed);\n    }\n}\n```", "```py\npublic void SetTransition(Transition t) {\n    PerformTransition(t);\n}\n```", "```py\nprivate void ConstructFSM() {\n    PatrolState patrol = new PatrolState(waypoints,\n      playerNearRadius, patrollingRadius);\n    patrol.AddTransition(Transition.SawPlayer,\n                         FSMStateID.Chasing);\n    patrol.AddTransition(Transition.NoHealth,\n                         FSMStateID.Dead);\n    ChaseState chase = new ChaseState(waypoints); \n     chase.AddTransition(Transition.LostPlayer,\n                         FSMStateID.Patrolling); \n    chase.AddTransition(Transition.ReachPlayer,\n                        FSMStateID.Attacking); \n    chase.AddTransition(Transition.NoHealth,\n                        FSMStateID.Dead);\n    AttackState attack = new AttackState(waypoints); \n   attack.AddTransition(Transition.LostPlayer,\n                        FSMStateID.Patrolling); \n    attack.AddTransition(Transition.SawPlayer,\n                         FSMStateID.Chasing); \n    attack.AddTransition(Transition.NoHealth,\n                         FSMStateID.Dead);\n    DeadState dead = new DeadState(); \n    dead.AddTransition(Transition.NoHealth,\n                       FSMStateID.Dead);\n    AddFSMState(patrol); \n    AddFSMState(chase); \n    AddFSMState(attack);\n    AddFSMState(dead);\n}\n```", "```py\nprotected override void FSMFixedUpdate() {\n    CurrentState.Reason(playerTransform, transform);\n    CurrentState.Act(playerTransform, transform);\n}\n```"]