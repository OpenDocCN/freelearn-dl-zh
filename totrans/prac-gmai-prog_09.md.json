["```py\npublic static Transform[] points;\n\n     void Awake () \n     {\n         points = new Transform[transform.childCount];\n         for (int i = 0; i < points.Length; i++)\n         {\n             points[i] = transform.GetChild(i); \n         }\n     } \n```", "```py\n public float speed;\n public int health;\n\n private Transform target;\n private int wavepointIndex = 0; \n```", "```py\n private float speed;\n public int health;\n\n private Transform target;\n private int wavepointIndex = 0;\n\n void Start ()\n {\n      target = waypoints.points[0];  speed = 10f;\n }\n\n void Update ()\n {\n      Vector3 dir = target.position - transform.position;\n      transform.Translate(dir.normalized * speed * Time.deltaTime, Space.World);\n\n      if(Vector3.Distance(transform.position, target.position) <= 0.4f)\n      {\n          GetNextWaypoint();\n      }\n }\n\n void GetNextWaypoint()\n {\n      if(wavepointIndex >= waypoints.points.Length - 1)\n      {\n          Destroy(gameObject);\n          return;\n      }\n\n      wavepointIndex++;\n      target = waypoints.points[wavepointIndex];\n } \n```", "```py\n public float speed;\n public int health;\n public float speedTurn;\n\n private Transform target;\n private int wavepointIndex = 0;\n\n void Start ()\n {\n      target = waypoints.points[0];\n      speed = 10f;\n      speedTurn = 0.2f;\n }\n\n void Update ()\n {\n      Vector3 dir = target.position - transform.position;\n      transform.Translate(dir.normalized * speed * Time.deltaTime, Space.World);\n\n      if(Vector3.Distance(transform.position, target.position) <= 0.4f)\n      {\n          GetNextWaypoint();\n      }\n\n      Vector3 newDir = Vector3.RotateTowards(transform.forward, dir, speedTurn,\n      0.0F);\n\n      transform.rotation = Quaternion.LookRotation(newDir);\n }\n\n void GetNextWaypoint()\n {\n      if(wavepointIndex >= waypoints.points.Length - 1)\n      {\n          Destroy(gameObject);\n          return;\n      }\n\n      wavepointIndex++;\n      target = waypoints.points[wavepointIndex];\n } \n```", "```py\n     public float speed;\n     public int health;\n     public float speedTurn;\n     private Transform target;\n     private int wavepointIndex = 0;\n     private bool Found;\n\n     void Start ()\n     {\n         target = waypoints.points[0];\n         speed = 10f;\n         speedTurn = 0.2f;\n     }\n\n     void Update ()\n     {\n         Vector3 dir = target.position - transform.position;\n         transform.Translate(dir.normalized * speed * Time.deltaTime,\n         Space.World);\n\n         if(Vector3.Distance(transform.position, target.position) <= 0.4f)\n         {\n             GetNextWaypoint();\n         }\n\n         Vector3 newDir = Vector3.RotateTowards(transform.forward, dir,\n         speedTurn, 0.0F);\n\n         transform.rotation = Quaternion.LookRotation(newDir);\n     }\n\n     void GetNextWaypoint()\n     {\n         if(wavepointIndex >= waypoints.points.Length - 1)\n         {\n             Destroy(gameObject);\n             return;\n         }\n\n         wavepointIndex++;\n         target = waypoints.points[wavepointIndex];\n     }\n\n     void OnTriggerEnter(Collider other)\n     {\n         if(other.gameObject.tag ==\"Player\")\n         {\n             Found = true;\n         }\n     } \n```", "```py\n     public float speed;\n     public int health;\n     public float speedTurn;\n     private Transform target;\n     private int wavepointIndex = 0;\n     public bool Found;\n\n     void Start ()\n     {\n         target = waypoints.points[0];\n         speed = 40f;\n         speedTurn = 0.2f;\n     }\n\n     void Update ()\n     {\n         if (Found == false)\n         {\n             Vector3 dir = target.position - transform.position;\n             transform.Translate(dir.normalized * speed *\n             Time.deltaTime,\n             Space.World);\n\n             if (Vector3.Distance(transform.position, target.position)\n             <= 0.4f)\n             {\n                 GetNextWaypoint();\n             }\n\n             Vector3 newDir = Vector3.RotateTowards(transform.forward,\n             dir,\n             speedTurn, 0.0F);\n\n             transform.rotation = Quaternion.LookRotation(newDir);\n         }\n     }\n\n     void GetNextWaypoint()\n     {\n         if(wavepointIndex >= waypoints.points.Length - 1)\n         {\n             Destroy(gameObject);\n             return;\n         }\n\n         wavepointIndex++;\n         target = waypoints.points[wavepointIndex];\n     }\n\n     void OnTriggerEnter(Collider other)\n     {\n         if(other.gameObject.tag == \"Player\")\n         {\n             Found = true;\n         }\n     } \n```", "```py\nvoid Update ()\n     {\n         if (Found == false)\n         {\n             Vector3 dir = target.position - transform.position;\n             transform.Translate(dir.normalized * speed *\n             Time.deltaTime,\n             Space.World);\n\n             if (Vector3.Distance(transform.position, target.position)\n             <= 0.4f)\n             {\n                 GetNextWaypoint();\n             }\n\n             Vector3 newDir = Vector3.RotateTowards(transform.forward,\n             dir,\n             speedTurn, 0.0F);\n\n             transform.rotation = Quaternion.LookRotation(newDir);\n         }\n\n         if (Found == true)\n         {\n             transform.LookAt(target);\n         }\n     }\n\n     void GetNextWaypoint()\n     {\n         if(wavepointIndex >= waypoints.points.Length - 1)\n         {\n             Destroy(gameObject);\n             return;\n         }\n\n         wavepointIndex++;\n         target = waypoints.points[wavepointIndex];\n     }\n\n     void OnTriggerEnter(Collider other)\n     {\n         if(other.gameObject.tag == \"Player\")\n         {\n             Found = true; \n             target = other.gameObject.transform;  \n\n         }\n     } \n```", "```py\n public bool facingFront;\n public bool facingBack; \n```", "```py\nvoid Update ()\n     {\n         if (Found == false)\n         {\n             Vector3 dir = target.position - transform.position;\n             transform.Translate(dir.normalized * speed * \n             Time.deltaTime,\n             Space.World);\n\n             if (Vector3.Distance(transform.position, target.position)\n             <= 0.4f)\n             {\n                 GetNextWaypoint();\n             }\n\n             Vector3 newDir = Vector3.RotateTowards(transform.forward,\n             dir,\n             speedTurn, 0.0F);\n\n             transform.rotation = Quaternion.LookRotation(newDir);\n         }\n\n         if (Found == true)\n         {\n             transform.LookAt(target);\n         }\n     }\n\n     void GetNextWaypoint()\n     {\n         if(wavepointIndex >= waypoints.points.Length - 1)\n         {\n             Destroy(gameObject);\n             return;\n         }\n\n         wavepointIndex++;\n         target = waypoints.points[wavepointIndex];\n     }\n\n     void OnTriggerEnter(Collider other)\n     {\n         if(other.gameObject.tag == \"Player\")\n         {\n             Found = true;\n             target = other.gameObject.transform;\n         }\n\n         if(other.gameObject.name == \"frontSide\")\n         {\n             facingFront = true;\n             facingBack = false;\n         }\n\n         if(other.gameObject.name == \"backSide\")\n         {\n             facingFront = false;\n             facingBack = true;\n         }\n     } \n```", "```py\n public float speed;\n public int health;\n public float speedTurn;\n private Transform target;\n private int wavepointIndex = 0;\n public bool Found;\n\n public bool facingFront;\n public bool facingBack;\n\n public int dangerMeter;\n```", "```py\nvoid OnTriggerEnter(Collider other)\n     {\n         if(other.gameObject.tag == \"Player\")\n         {\n             Found = true;\n             target = other.gameObject.transform;\n         }\n\n         if(other.gameObject.name == \"frontSide\")\n         {\n             facingFront = true;\n             facingBack = false;\n             dangerMeter += 50;\n         }\n\n         if(other.gameObject.name == \"backSide\")\n         {\n             facingFront = false;\n             facingBack = true;\n             dangerMeter += 5;\n         }\n     } \n```", "```py\nahead = transform.position + Vector3.Normalize(velocity) * MAX_SEE_AHEAD;\n```", "```py\nahead = transform.position + Vector3.Normalize(velocity) * MAX_SEE_AHEAD;\nahead2 = transform.position + Vector3.Normalize(velocity) * (MAX_SEE_AHEAD * 0.5);\n```", "```py\n public Vector3 velocity; \n public Vector3 ahead;\n public float MAX_SEE_AHEAD;\n public Transform a;\n public Transform b;\n\n void Start (){\n\n     ahead = transform.position + Vector3.Normalize(velocity) * MAX_SEE_AHEAD;\n     }\n\n void Update ()\n {\n\n     float distA = Vector3.Distance(a.position, transform.position);\n     float distB = Vector3.Distance(b.position, transform.position);\n\n     if(distA > distB)\n     {\n         avoidB();\n     }\n\n     if(distB > distA)\n     {\n         avoidA();\n     }\n     }\n\n     void avoidB()\n     {\n\n     }\n\n     void avoidA()\n     {\n\n     } \n} \n```", "```py\n public Vector3 velocity;\n public Vector3 ahead;\n public float MAX_SEE_AHEAD;\n public float MAX_AVOID;\n public Transform a;\n public Transform b;\n public Vector3 avoidance;\n\n void Start () {\n\n     ahead = transform.position + Vector3.Normalize(velocity) * MAX_SEE_AHEAD;\n }\n\n void Update ()\n {\n\n     float distA = Vector3.Distance(a.position, transform.position);\n     float distB = Vector3.Distance(b.position, transform.position);\n\n     if(distA > distB)\n     {\n         avoidB();\n     }\n\n     if(distB > distA)\n     {\n         avoidA();\n     }\n }\n\n void avoidB()\n {\n     avoidance = ahead - b.position;\n     avoidance = Vector3.Normalize(avoidance) * MAX_AVOID;\n }\n\n void avoidA()\n {\n     avoidance = ahead - a.position;\n     avoidance = Vector3.Normalize(avoidance) * MAX_AVOID;\n } \n}  \n```"]