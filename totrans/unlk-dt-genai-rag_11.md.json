["```py\n %pip install bs4\n%pip install python-docx\n%pip install docx2txt\n%pip install jq\n```", "```py\n from bs4 import BeautifulSoup\nimport docx\nimport json\n```", "```py\n pdf_path = \"google-2023-environmental-report.pdf\"\nhtml_path = \"google-2023-environmental-report.html\"\nword_path = \"google-2023-environmental-report.docx\"\njson_path = \"google-2023-environmental-report.json\"\n```", "```py\n with open(pdf_path, \"rb\") as pdf_file:\n    pdf_reader = PdfReader(pdf_file)\n    pdf_text = \"\".join(\n        page.extract_text() for page in pdf_reader.pages)\n    soup = BeautifulSoup(\"<html><body></body></html>\",\n                         \"html.parser\")\n    soup.body.append(pdf_text)\n    with open(html_path, \"w\",\n              encoding=\"utf-8\") as html_file:\n                  html_file.write(str(soup))\n                  doc = docx.Document()\n                  doc.add_paragraph(pdf_text)\n                  doc.save(word_path)\n    with open(json_path, \"w\") as json_file:\n        json.dump({\"text\": pdf_text}, json_file)\n```", "```py\n from langchain_community.document_loaders import BSHTMLLoader\nloader = BSHTMLLoader(html_path)\ndocs = loader.load()\n```", "```py\n from PyPDF2 import PdfReader\ndocs = []\nwith open(pdf_path, \"rb\") as pdf_file:\n    pdf_reader = PdfReader(pdf_file)\n    pdf_text = \"\".join(page.extract_text() for page in\n               pdf_reader.pages)\n    docs = [Document(page_content=page) for page in\n            pdf_text.split(\"\\n\\n\")]\n```", "```py\n from langchain_community.document_loaders import Docx2txtLoader\nloader = Docx2txtLoader(word_path)\ndocs = loader.load()\n```", "```py\n from langchain_community.document_loaders import JSONLoader\nloader = JSONLoader(\n    file_path=json_path,\n    jq_schema='.text',\n)\ndocs = loader.load()\n```", "```py\n dense_documents = [Document(page_content=doc.page_content,\n    metadata={\"id\": str(i), \"search_source\": \"dense\"}) for\n        i, doc in enumerate(splits)]\nsparse_documents = [Document(page_content=doc.page_content,\n    metadata={\"id\": str(i), \"search_source\": \"sparse\"}) for\n        i, doc in enumerate(splits)]\n```", "```py\n for i, doc in enumerate(retrieved_docs, start=1):\n    print(f\"Document {i}: Document ID: {doc.metadata['id']}\n    source: {doc.metadata['source']}\")\n    print(f\"Content:\\n{doc.page_content}\\n\")\n```", "```py\n from langchain_text_splitters import CharacterTextSplitter\ntext_splitter = CharacterTextSplitter(\n    separator=\"\\n\",\n    chunk_size=1000,\n    chunk_overlap=200,\n    is_separator_regex=False,\n)\nsplits = text_splitter.split_documents(docs)\n```", "```py\n Document(page_content=<st c=\"16033\">'Environmental \\nReport\\n2023What's \\ninside\\nAbout this report\\nGoogle's 2023 Environmental Report provides an overview of our environmental \\nsustainability strategy and targets and our annual progress towards them.\\u20091  \\nThis report features data, performance highlights, and progress against our targets from our 2022 fiscal year (January 1 to December 31, 2022).</st> <st c=\"16405\">It also mentions some notable achievements from the first half of 2023\\.</st> <st c=\"16477\">After two years of condensed reporting, we're sharing a deeper dive into our approach in one place.\\nADDITIONAL RESOURCES\\n• 2023 Environmental Report: Executive Summary\\n• Sustainability.google\\n• Sustainability reports\\n• Sustainability blog\\n• Our commitments\\n• Alphabet environmental, social, and governance (ESG)\\n• About GoogleIntroduction  3\\nExecutive letters  4\\nHighlights  6\\nOur sustainability strategy 7\\nTargets and progress summary 8\\nEmerging opportunities 9\\nEmpowering individuals  12\\nOur ambition 13\\nOur appr\\noach 13\\nHelp in\\ng people make  14</st>')\n```", "```py\n Document(page_content=<st c=\"17375\">'Highlights  6\\nOur sustainability strategy 7\\nTargets and progress summary 8\\nEmerging opportunities 9\\nEmpowering individuals  12\\nOur ambition 13\\nOur appr\\noach 13\\nHelp in\\ng people make  14 \\nmore sustainable choices  \\nReducing home energy use 14\\nProviding sustainable  \\ntrans\\nportation options  17 \\nShari\\nng other actionable information 19\\nThe journey ahead  19\\nWorking together 20\\nOur ambition 21\\nOur approach 21\\nSupporting partners</st> <st c=\"17820\">22\\nInvesting in breakthrough innovation 28\\nCreating ecosystems for collaboration  29\\nThe journey ahead  30Operating sustainably 31\\nOur ambiti\\non 32\\nOur oper a\\ntions  32\\nNet-\\nzero c\\narbon  33\\nWater stewardship 49\\nCircular econom\\ny 55\\nNature and biodiversity 67\\nSpotlight: Building a more sustainable  \\ncam\\npus in Mountain View73 \\nGovernance and engagement  75\\nAbout Google\\n 76\\nSustainab i\\nlity governance  76\\nRisk management  77\\nStakeholder engagement  78\\nPublic policy and advocacy</st> <st c=\"18318\">79\\nPartnerships  83\\nAwards and recognition 84\\nAppendix  85</st>')\n```", "```py\n recursive_splitter = RecursiveCharacterTextSplitter(\n    separators=[\"\\n\\n\", \"\\n\", \". \", \" \", \"\"],\n    chunk_size=1000,\n    chunk_overlap=200\n)\nsplits = character_splitter.split_documents(docs)\n```", "```py\n from langchain_experimental.text_splitter import SemanticChunker\nembedding_function = OpenAIEmbeddings()\nsemantic_splitter = SemanticChunker(embedding_function,\n    number_of_chunks=200)\nsplits = semantic_splitter.split_documents(docs)\n```", "```py\n from langchain_core.output_parsers import StrOutputParser\nstr_output_parser = StrOutputParser()\n```", "```py\n from langchain_core.output_parsers import JsonOutputParser\nfrom langchain_core.pydantic_v1 import BaseModel, Field\nfrom langchain_core.outputs import Generation\nimport json\n```", "```py\n class FinalOutputModel(BaseModel):\n    relevance_score: float = Field(description=\"The\n        relevance score of the retrieved context to the\n        question\")\n    answer: str = Field(description=\"The final answer to\n        the question\")\n```", "```py\n json_parser = JsonOutputParser(\n    pydantic_model=FinalOutputModel)\n```", "```py\n def format_json_output(x):\n    # print(x)\n    json_output = {\"relevance_score\":extract_score(\n        x['relevance_score']),\"answer\": x['answer'],\n    }\n    return json_parser.parse_result(\n        [Generation(text=json.dumps(json_output))])\n```", "```py\n def conditional_answer(x):\n    relevance_score = extract_score(x['relevance_score'])\n    if relevance_score < 4:\n        return \"I don't know.\" else:\n        return format_json_output(x)\n```", "```py\n rag_chain = (\n    RunnableParallel({\"context\": ensemble_retriever,\n        \"question\": RunnablePassthrough()})\n    | RunnablePassthrough.assign(context=(lambda x:\n        format_docs(x[\"context\"])))\n    | RunnableParallel({\"relevance_score\": (\n          RunnablePassthrough()\n          | (lambda x: relevance_prompt_template.format(\n                 question=x[\"question\"],\n                 retrieved_context=x[\"context\"]\n                 )\n             )\n             | llm\n             | str_output_parser\n        ),\n        \"answer\": (\n            RunnablePassthrough()\n            | prompt\n            | llm\n            | str_output_parser\n            ),\n        }\n    )\n    | RunnablePassthrough().assign(\n         final_result=conditional_answer)\n)\n```", "```py\n result = rag_chain.invoke(user_query)\nprint(f\"Original Question: {user_query}\\n\")\nprint(f\"Relevance Score: {result['relevance_score']}\\n\")\nprint(f\"Final Answer:\\n{result[\n    'final_result']['answer']}\\n\\n\")\nprint(f\"Final JSON Output:\\n{result}\\n\\n\")\n```", "```py\n Original Question: What are Google's environmental initiatives? Relevance Score: 5\nFinal Answer:\nGoogle's environmental initiatives include empowering individuals to take action, working together with partners and customers, operating sustainably… [TRUNCATED]\nFinal JSON Output:\n{\n'relevance_score': '5',\n'answer': \"Google's environmental initiatives include empowering individuals to take action, working together with partners and customers, operating sustainably, achieving net-zero carbon emissions, water stewardship, engaging in a circular economy, and supporting sustainable consumption of public goods. They also engage with suppliers to reduce energy consumption and greenhouse gas emissions, report environmental data, and assess environmental criteria. Google is involved in various sustainability initiatives, such as the iMasons Climate Accord, ReFED, and projects with The Nature Conservancy. They also invest in breakthrough innovation and support sustainability-focused accelerators. Additionally, Google focuses on renewable energy, data analytics tools for sustainability, and AI for sustainability to drive more intelligent supply chains.\",\n'final_result': {\n     'relevance_score': 5.0,\n     'answer': \"Google's environmental initiatives include empowering individuals to take action, working together with partners and customers, operating sustainably, achieving net-zero carbon emissions, water stewardship, engaging in a circular economy, and supporting sustainable consumption of public goods. They also engage with suppliers to reduce energy consumption and greenhouse gas emissions, report environmental data, and assess environmental criteria. Google is involved in various sustainability initiatives, such as the iMasons Climate Accord, ReFED, and projects with The Nature Conservancy. They also invest in breakthrough innovation and support sustainability-focused accelerators. Additionally, Google focuses on renewable energy, data analytics tools for sustainability, and AI for sustainability to drive more intelligent supply chains.\" }\n}\n```"]