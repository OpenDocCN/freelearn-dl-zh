- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Boost Coding Efficiency for JavaScript and PHP with Auto-Code Generation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动代码生成提高 JavaScript 和 PHP 的编码效率
- en: 'In this chapter, we will look at the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: Overview of web development programming languages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络开发编程语言概述
- en: JavaScript auto-code generation using Amazon Q Developer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 进行 JavaScript 自动代码生成
- en: PHP auto-code generation using Amazon Q Developer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 自动生成 PHP 代码
- en: JavaScript and PHP code explainability and optimization using Amazon Q Developer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 解释和优化 JavaScript 和 PHP 代码的可解释性
- en: 'In the previous chapter, we looked at some of the categories of programming
    languages. We then discussed an overview of foundational programming languages
    before focusing on two dominant ones used in the software industry: C and C++.
    We introduced how auto-code generation, especially using Amazon Q Developer, is
    integrated and can be used by C and C++ developers to understand, learn the syntax,
    and automatically generate code.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了编程语言的某些类别。然后，我们讨论了基础编程语言的概述，在关注软件行业中使用的两种主导语言：C 和 C++ 之前。我们介绍了如何使用
    Amazon Q Developer 集成自动代码生成，并可以帮助 C 和 C++ 开发者理解、学习语法和自动生成代码。
- en: 'Similar to the previous chapter, in this chapter, we will focus on two programming
    languages. We will start with an overview of web programming languages and then
    focus on two that are commonly used in the software industry: **JavaScript** (**JS**)
    and **PHP**. We will introduce how auto-code generation, particularly through
    Amazon Q Developer, can be used by JS and PHP developers for understanding the
    basics, learning the syntax, automatically generating code, code explainability,
    and optimization through code recommendations.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章类似，在本章中，我们将关注两种编程语言。我们将从网络编程语言的概述开始，然后重点关注在软件行业中常用的两种语言：**JavaScript**（**JS**）和
    **PHP**。我们将介绍如何使用自动代码生成，特别是通过 Amazon Q Developer，来帮助 JavaScript 和 PHP 开发者理解基础知识、学习语法、自动生成代码、代码可解释性和通过代码建议进行优化。
- en: Overview of web development programming languages
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络开发编程语言概述
- en: In earlier chapters, we reviewed different programming language categories and
    delved deep into foundational languages such as C and C++, which power many system
    constructs. Now, let’s dive into web development languages such as JS and PHP,
    which enable dynamic and interactive web experiences. These are some of the most
    popular languages for server-side scripting, client-side scripting, **Document
    Object Model** (**DOM**) programming, web APIs, mobile applications, and more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们回顾了不同的编程语言类别，并深入探讨了如 C 和 C++ 这样的基础语言，这些语言为许多系统结构提供动力。现在，让我们深入了解网络开发语言，如
    JS 和 PHP，这些语言使动态和交互式网络体验成为可能。这些是服务器端脚本、客户端脚本、**文档对象模型**（**DOM**）编程、Web API、移动应用程序等最受欢迎的语言。
- en: A few decades ago, with the growth in web application development, many languages
    were introduced in the software industry. Web development languages play a crucial
    role in shaping the interactive and functional aspects of modern web applications.
    Among these, JS and PHP are prominent for their respective roles in client-side
    and server-side scripting. JS powers dynamic and interactive user experiences
    in web browsers, while PHP facilitates server-side logic for dynamic content generation
    and database interactions. In the realm of web development, efficiency and productivity
    are key factors for success. Developers often face challenges such as repetitive
    coding tasks, maintaining code consistency across different modules, and keeping
    up with evolving best practices. Auto-code generation has emerged as a solution
    to these challenges, enabling developers to automate routine coding tasks and
    streamline their workflow.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年前，随着网络应用程序开发的增长，软件行业中引入了许多语言。网络开发语言在塑造现代网络应用程序的交互和功能方面发挥着关键作用。在这些语言中，JavaScript（JS）和
    PHP 因其在客户端和服务器端脚本中的各自角色而突出。JavaScript 为网络浏览器中的动态和交互式用户体验提供动力，而 PHP 则便于服务器端逻辑，以实现动态内容生成和数据库交互。在
    Web 开发领域，效率和生产力是成功的关键因素。开发者经常面临诸如重复编码任务、在不同模块间保持代码一致性以及跟上不断发展的最佳实践等挑战。自动代码生成已成为解决这些挑战的解决方案，使开发者能够自动化常规编码任务并简化他们的工作流程。
- en: Amazon Q Developer, an advanced tool leveraging artificial intelligence and
    machine learning, offers significant capabilities in auto-code generation for
    JavaScript and PHP. By integrating Amazon Q Developer into the development process,
    developers can leverage its features to enhance productivity, improve code quality,
    and expedite the development cycle.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Q开发者是一个利用人工智能和机器学习的高级工具，为JavaScript和PHP的自动代码生成提供了显著的能力。通过将亚马逊Q开发者集成到开发过程中，开发者可以利用其功能来提高生产力、提升代码质量并加快开发周期。
- en: JS, as a frontend scripting language, is instrumental in creating interactive
    user interfaces and dynamic web content. However, JS development can become complex
    due to the need for cross-browser compatibility, asynchronous programming patterns,
    and managing event-driven interactions. Amazon Q Developer simplifies JS development
    by generating code snippets and functions tailored to specific requirements instructed
    in the prompts. Web developers can leverage different prompting techniques and
    chat style integrations (refer to [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060))
    to get recommendations for the automated creation of event handlers, DOM manipulation
    functions, and asynchronous operations, thereby reducing development time and
    ensuring code consistency across different browser environments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前端脚本语言，JS在创建交互式用户界面和动态网页内容方面起着至关重要的作用。然而，由于需要跨浏览器兼容性、异步编程模式和事件驱动交互的管理，JS开发可能会变得复杂。亚马逊Q开发者通过生成针对特定要求定制的代码片段和函数来简化JS开发。网页开发者可以利用不同的提示技术以及聊天式集成（请参阅[*第3章*](B21378_03.xhtml#_idTextAnchor060)）来获取自动创建事件处理程序、DOM操作函数和异步操作的建议，从而减少开发时间并确保在不同浏览器环境中的代码一致性。
- en: On the server side, PHP remains a popular choice for dynamic web applications
    and backend services. PHP’s versatility in handling form submissions, session
    management, and database interactions makes it indispensable for web developers.
    However, writing efficient and secure PHP code requires adherence to coding standards
    and best practices. Amazon Q Developer assists developers by generating optimized
    PHP code snippets for common tasks such as database queries, form processing,
    and error handling. This not only accelerates development but also enhances code
    reliability and security.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，PHP仍然是动态网页应用和后端服务的流行选择。PHP在处理表单提交、会话管理和数据库交互方面的多功能性使它对网页开发者来说是不可或缺的。然而，编写高效且安全的PHP代码需要遵守编码标准和最佳实践。亚马逊Q开发者通过为常见任务如数据库查询、表单处理和错误处理生成优化的PHP代码片段来协助开发者。这不仅加速了开发，还增强了代码的可靠性和安全性。
- en: Moreover, Amazon Q Developer supports the learning and understanding of JS and
    PHP syntax. For developers new to these languages, Amazon Q Developer provides
    interactive tutorials and code examples through chat-style interactions. Developers
    can use prompts to request explanations of language features, obtain code snippets
    for specific functionalities, or generate complete scripts based on predefined
    templates. This educational aspect of Amazon Q Developer helps shorten the learning
    curve and empowers developers to quickly grasp essential concepts and techniques.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，亚马逊Q开发者支持JS和PHP语法的学习和理解。对于这些语言的新手开发者，亚马逊Q开发者通过聊天式交互提供交互式教程和代码示例。开发者可以使用提示来请求对语言特性的解释、获取特定功能的代码片段或根据预定义模板生成完整的脚本。亚马逊Q开发者这一教育特性有助于缩短学习曲线，并使开发者能够快速掌握基本概念和技术。
- en: Now, let’s dive deep to see how Amazon Q Developer can help a web programmer.
    To illustrate, I am using the Amazon Q Developer interface with VS Code (refer
    to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022) for the configuration steps
    for Amazon Q Developer with VS Code and check the *References* section at the
    end of this chapter for the URLs for JS and PHP in VS Code).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨一下亚马逊Q开发者如何帮助一位网页程序员。为了说明这一点，我正在使用VS Code中的亚马逊Q开发者界面（有关亚马逊Q开发者与VS
    Code的配置步骤，请参阅[*第2章*](B21378_02.xhtml#_idTextAnchor022)，并在本章末尾的*参考*部分查看JS和PHP的URL），并检查JS和PHP在VS
    Code中的配置步骤；检查本章末尾的*参考*部分以获取JS和PHP的URL。
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Amazon Q Developer uses LLMs, which, by nature, are non-deterministic, so you
    may not get exactly the same answers/code blocks shown in the code snapshots;
    try to update prompts to get the desired recommendations. However, logically,
    the generated answer/code should meet the requirements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Q开发者使用LLMs，按其本质是非确定性的，因此您可能不会得到代码快照中显示的完全相同的答案/代码块；尝试更新提示以获取所需的建议。然而，从逻辑上讲，生成的答案/代码应满足要求。
- en: JS auto-code generation using Amazon Q Developer
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Q 开发者进行 JS 自动代码生成
- en: First, let’s explore how Amazon Q Developer can assist a new web programmer
    planning to work with JS but lacking a background in the language. We will use
    Amazon Q Developer’s chat-style interface to educate the programmer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们探索 Amazon Q 开发者如何帮助一个计划使用 JS 但缺乏语言背景的新网页程序员。我们将使用 Amazon Q 开发者的聊天风格界面来教育程序员。
- en: JS language basics
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JS 语言基础
- en: 'Let’s learn about the JS programming language by asking about the very basics
    of JS:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过询问 JS 的基础知识来了解 JS 编程语言：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the following screenshot, Amazon Q Developer provided historical
    information about the original developers. It then summarized the common use cases
    by categorizing where the JS language excels. Additionally, it offered sources
    for further reference and learning.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在以下屏幕截图中所见，Amazon Q 开发者提供了关于原始开发者的历史信息。然后，它通过分类总结 JS 语言的常见用例，其中 JS 语言表现出色。此外，它还提供了进一步参考和学习的资源。
- en: '![Figure 6.1 – Chat style – JS basics](img/B21378_06_1.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 聊天风格 – JS 基础](img/B21378_06_1.jpg)'
- en: Figure 6.1 – Chat style – JS basics
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 聊天风格 – JS 基础
- en: You can observe that, in addition to web development, Amazon Q Developer pointed
    out the versatility of JS applications, such as game development, desktop applications,
    **Internet of Things** (**IoT**) applications, and machine learning applications.
    Amazon Q also provided guidelines about JS use in “**applications that require
    a high degree of interactivity, responsiveness, and** **dynamic behavior**”*.*
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到，除了网页开发之外，Amazon Q 开发者指出了 JS 应用程序的通用性，例如游戏开发、桌面应用程序、**物联网**（**IoT**）应用程序和机器学习应用程序。Amazon
    Q 还提供了关于在“**需要高度交互性、响应性和动态行为**”的应用程序中使用 JS 的指南*.*
- en: 'Based on the preceding information, you can see that JS is so versatile and
    can be used in various software development projects across industries. Let’s
    look at the commonly used commands by JS web programmers:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的信息，你可以看到 JS 是如此通用，可以在各个行业的各种软件开发项目中使用。让我们看看 JS 网页程序员常用的命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will not be going through each command, but just for illustration, as you
    can see in the following partial screenshot, Amazon Q Developer provided several
    categories of the common commands and constructs in the JS programming language.
    To make it easy to follow, it also included some of the common key commands for
    each of the categories.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会逐个介绍每个命令，但为了说明，如你在以下部分屏幕截图中所见，Amazon Q 开发者提供了 JS 编程语言中常见命令和结构的几个类别。为了便于理解，它还包含了每个类别的常见关键命令。
- en: '![Figure 6.2 – Chat style – JS commands](img/B21378_06_2.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 聊天风格 – JS 命令](img/B21378_06_2.jpg)'
- en: Figure 6.2 – Chat style – JS commands
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 聊天风格 – JS 命令
- en: Amazon Q Developer highlighted multiple areas where JS has various supported
    command sets such as console commands, DOM manipulation commands, array manipulation,
    and more.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q 开发者突出了 JS 在多个领域支持的命令集，例如控制台命令、DOM 操作命令、数组操作等等。
- en: 'Let’s use one of the areas to get information and ask Amazon Q Developer to
    provide details and examples related to JS support for DOM manipulation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用其中一个领域来获取信息，并请 Amazon Q 开发者提供与 JS 对 DOM 操作支持相关的详细信息和示例：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure 6.3 – Chat style – JS DOM manipulation](img/B21378_06_3.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 聊天风格 – JS DOM 操作](img/B21378_06_3.jpg)'
- en: Figure 6.3 – Chat style – JS DOM manipulation
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 聊天风格 – JS DOM 操作
- en: 'As shown in the preceding partial screenshot, Amazon Q Developer begins with
    the basics of DOM manipulation, which refers to the ability to dynamically access
    and modify the content, structure, and style of a web page using JS. The DOM represents
    the hierarchical structure of an HTML document, where each element, attribute,
    and text node is an object that can be accessed and manipulated. It then continues
    by providing specific details related to categories such as accessing DOM elements,
    creating and modifying elements, manipulating attributes, handling events, modifying
    styles, and DOM manipulation libraries and frameworks. At the end, it provides
    a summary highlighting the importance of JS for DOM manipulation: “**DOM manipulation
    is a crucial aspect of building dynamic and interactive web applications. By leveraging
    JavaScript’s capabilities to access and modify the DOM, developers can create
    rich user experiences, update content on-the-fly, validate user input, and respond
    to user interactions without requiring a full-page refresh**”, with reference
    sources included.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张部分截图所示，亚马逊Q开发者从DOM操作的基础开始，这指的是使用JS动态访问和修改网页的内容、结构和样式的能力。DOM代表了HTML文档的层次结构，其中每个元素、属性和文本节点都是一个可以访问和操作的对象。然后，它继续提供与访问DOM元素、创建和修改元素、操作属性、处理事件、修改样式以及DOM操作库和框架相关的具体细节。最后，它提供了一个总结，强调了JS在DOM操作中的重要性：“**DOM操作是构建动态和交互式Web应用程序的关键方面。通过利用JavaScript访问和修改DOM的能力，开发者可以创建丰富的用户体验，动态更新内容，验证用户输入，并响应用户交互，而无需刷新整个页面**”，并附上参考来源。
- en: 'Now, let’s ask Amazon Q Developer for the syntax of one of the most useful
    loops used while coding complex scripts, the `for...in` loop in JS:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向亚马逊Q开发者询问在编写复杂脚本时最常用的循环之一的语法，即JS中的`for...in`循环：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 6.4 – Chat style – JS “for…in” loop example](img/B21378_06_4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 聊天风格 – JS “for...in”循环示例](img/B21378_06_4.jpg)'
- en: Figure 6.4 – Chat style – JS “for…in” loop example
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 聊天风格 – JS “for...in”循环示例
- en: Observe in the preceding screenshot that Amazon Q Developer provided the syntax,
    details, and an example of a `for...in` loop. Now, let’s move to the sample use
    case to show the power of Amazon Q Developer’s ability to recommend the code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张部分截图中，可以看到亚马逊Q开发者提供了`for...in`循环的语法、细节和示例。现在，让我们转到示例使用案例，以展示亚马逊Q开发者推荐代码的能力。
- en: End-to-end JS use case development
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端JS使用案例开发
- en: To illustrate, I am going to use the VS Code script editor window with single
    and multi-line prompts.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我将使用VS Code脚本编辑器窗口的单行和多行提示。
- en: 'Here is the use case: Create JS end-to-end code to build a to-do list application.
    Create tasks such as adding new items, marking items as completed, and deleting
    items. Use JS to manipulate the DOM and respond to user events. Here is the prompt:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用案例：创建JS端到端代码来构建待办事项列表应用程序。创建添加新项目、标记项目为完成和删除项目等任务。使用JS操作DOM并响应用户事件。以下是提示：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 6.5 – Prompt – JS program partial snapshot](img/B21378_06_5.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 提示 – JS程序部分快照](img/B21378_06_5.jpg)'
- en: Figure 6.5 – Prompt – JS program partial snapshot
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 提示 – JS程序部分快照
- en: The preceding screenshot shows a partial code snippet suggested by Amazon Q
    Developer. The full end-to-end code generated in response to our prompt demonstrates
    several fundamental and advanced concepts in JS and DOM manipulation. It effectively
    utilizes key JS functionalities related to the DOM, such as getting elements,
    creating elements, modifying elements, handling events, and applying styles. It
    leverages multiple key out-of-box functions of JS, including `document.getElementById`,
    `document.createElement`, `taskItem.appendChild`, `taskList.removeChild`, `Button.onclick`,
    and more. It also included a custom `addTask()` function to support coding best
    practices. The end-to-end code meets the specifics of your prompts, showcasing
    Amazon Q Developer’s capability to generate comprehensive and functional code
    for web development tasks.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了亚马逊Q开发者建议的部分代码片段。根据我们的提示生成的完整端到端代码展示了JS和DOM操作中的几个基本和高级概念。它有效地利用了与DOM相关的关键JS功能，例如获取元素、创建元素、修改元素、处理事件和应用样式。它利用了JS的多个关键内置函数，包括`document.getElementById`、`document.createElement`、`taskItem.appendChild`、`taskList.removeChild`、`Button.onclick`等。它还包括一个自定义的`addTask()`函数来支持编码最佳实践。端到端代码满足了您提示的具体要求，展示了亚马逊Q开发者生成全面且功能强大的Web开发任务代码的能力。
- en: 'In the current version of the code, Amazon Q Developer added two buttons: `Delete`
    and `Complete`. If we use the basic chain of thought for actions supported by
    the application, it appears that a `Cancel` button is missing. Let’s use a single-line
    prompt technique to suggest to Amazon Q Developer to add a `Cancel` button:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的代码中，亚马逊 Q 开发者添加了两个按钮：“删除”和“完成”。如果我们根据应用程序支持的基本操作链来考虑，似乎缺少一个“取消”按钮。让我们使用单行提示技术建议亚马逊
    Q 开发者添加一个“取消”按钮：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure 6.6 – Prompt – JS program Cancel button](img/B21378_06_6.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 提示 – JS 程序取消按钮](img/B21378_06_6.jpg)'
- en: Figure 6.6 – Prompt – JS program Cancel button
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 提示 – JS 程序取消按钮
- en: As you can see in the preceding screenshot, Amazon Q Developer added multiple
    lines of code to add the `Cancel` button. It effectively used JS functions such
    as `document.createElement`, `cancelButton.onclick`, and `taskList.removeChild`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所见，亚马逊 Q 开发者添加了多行代码来添加“取消”按钮。它有效地使用了诸如 `document.createElement`、`cancelButton.onclick`
    和 `taskList.removeChild` 等JS函数。
- en: In the next section, let’s see how Amazon Q Developer supports PHP developers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看亚马逊 Q 开发者如何支持 PHP 开发者。
- en: PHP auto-code generation using Amazon Q Developer
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用亚马逊 Q 开发者进行 PHP 自动代码生成
- en: 'Just like previously, first, let’s assume that a new web programmer is planning
    to work with **PHP** (which is a recursive acronym for **PHP: Hypertext Preprocessor**)
    and does not have much experience coding with a PHP background. Let’s use Amazon
    Q Developer’s chat-style interface to educate the programmer.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '就像之前一样，首先，让我们假设一位新的网络程序员计划使用 **PHP**（这是一个递归缩写，代表 **PHP: Hypertext Preprocessor**）并且没有太多使用
    PHP 背景进行编码的经验。让我们使用亚马逊 Q 开发者的聊天风格界面来教育这位程序员。'
- en: PHP language basics
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 语言基础
- en: 'Let’s learn about the PHP programming language:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解 PHP 编程语言：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 6.7 – Chat style – PHP basics](img/B21378_06_7.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 聊天风格 – PHP 基础](img/B21378_06_7.jpg)'
- en: Figure 6.7 – Chat style – PHP basics
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 聊天风格 – PHP 基础
- en: As you can see in the preceding screenshot, Amazon Q Developer provided basic
    information, such as informing us that PHP is a popular, open source, server-side
    scripting language widely used for web development. It is designed primarily for
    creating dynamic web pages and web applications. PHP’s versatility and the availability
    of numerous libraries and frameworks have expanded its use cases beyond the web.
    However, it is still predominantly used for building dynamic web applications,
    content management systems, and web services.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所见，亚马逊 Q 开发者提供了基本信息，例如告知我们 PHP 是一种流行的开源服务器端脚本语言，广泛用于网站开发。它主要用于创建动态网页和网页应用程序。PHP
    的多功能性和大量库和框架的可用性已经扩展了其使用场景，超出了网页的范围。然而，它仍然主要用于构建动态网页应用程序、内容管理系统和网页服务。
- en: Additionally, it outlined common applications where PHP plays an important role,
    such as web development, **Content Management Systems** (**CMSs**), server-side
    scripting, command-line scripting, desktop applications, data processing and analysis,
    and embedded systems.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它概述了 PHP 在其中扮演重要角色的常见应用，例如网站开发、**内容管理系统**（**CMSs**）、服务器端脚本、命令行脚本、桌面应用程序、数据处理和分析以及嵌入式系统。
- en: 'Since PHP is a popular, open source, server-side scripting language, let’s
    ask Amazon Q Developer to provide details and examples of PHP’s support for server-side
    scripting, which has contributed to its widespread use:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 PHP 是一种流行的开源服务器端脚本语言，让我们请亚马逊 Q 开发者提供有关 PHP 对服务器端脚本支持的具体细节和示例，这有助于其广泛使用：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure 6.8 – Chat style – PHP server-side scripting support](img/B21378_06_8.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 聊天风格 – PHP 服务器端脚本支持](img/B21378_06_8.jpg)'
- en: Figure 6.8 – Chat style – PHP server-side scripting support
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 聊天风格 – PHP 服务器端脚本支持
- en: Amazon Q Developer began with the basics of server-side scripting, explaining
    that “**Server-side scripting refers to the process of executing code on the server
    before sending the resulting output (typically HTML) to the client’s web browser**”*.*
    It then provided context for PHP, highlighting that PHP is a server-side scripting
    language designed to run on the server and generate dynamic web pages. Additionally,
    it listed key functionality supported by PHP, such as embedding PHP code in HTML,
    processing user input, filesystem operations, database integration, session management,
    web services and APIs, and server configuration and environment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Q开发者从服务器端脚本的基础开始，解释说：“**服务器端脚本是指在实际输出（通常是HTML）发送到客户端的Web浏览器之前在服务器上执行代码的过程**”*.*
    然后，它为PHP提供了背景信息，强调PHP是一种设计在服务器上运行并生成动态网页的服务器端脚本语言。此外，它列出了PHP支持的关键功能，例如在HTML中嵌入PHP代码、处理用户输入、文件系统操作、数据库集成、会话管理、网络服务和API以及服务器配置和环境。
- en: 'Now, let’s ask for some commonly used commands by PHP web programmers:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们请求一些PHP网络程序员常用的命令：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure 6.9 – Chat style – PHP common commands partial screenshot](img/B21378_06_9.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 聊天式界面 – PHP常见命令局部截图](img/B21378_06_9.jpg)'
- en: Figure 6.9 – Chat style – PHP common commands partial screenshot
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 聊天式界面 – PHP常见命令局部截图
- en: We won’t cover every command, but as illustrated in the preceding partial screenshot,
    Amazon Q Developer provided various command categories such as output commands,
    variable commands, conditional statements, database commands, form commands, error
    handling, array commands, and more. To make it easier to follow, it included some
    common key commands for each category and provided references for users to obtain
    further detailed information on these topics.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会涵盖每个命令，但如图6.10所示的局部截图所示，亚马逊Q开发者提供了各种命令类别，例如输出命令、变量命令、条件语句、数据库命令、表单命令、错误处理、数组命令等。为了便于理解，它为每个类别包含了一些常见的关键命令，并为用户提供参考，以便获取这些主题的更详细信息。
- en: 'Database commands is one of the important categories that make PHP useful for
    server-side scripting. Now, let’s ask Amazon Q Developer for the syntax and an
    example of `mysqli_connect()` in PHP:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库命令是使PHP在服务器端脚本中变得有用的几个重要类别之一。现在，让我们向亚马逊Q开发者请求PHP中`mysqli_connect()`的语法和示例：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Figure 6.10 – Chat style –PHP mysqli_connect()](img/B21378_06_10_new.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 聊天式界面 – PHP mysqli_connect()](img/B21378_06_10_new.jpg)'
- en: Figure 6.10 – Chat style –PHP mysqli_connect()
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 聊天式界面 – PHP mysqli_connect()
- en: As shown in the preceding screenshot, Amazon Q Developer provided an example
    for `mysqli_connect()` and explained the details of each line of the code to make
    it easier to understand.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，亚马逊Q开发者提供了一个`mysqli_connect()`的示例，并解释了代码每一行的细节，以便更容易理解。
- en: End-to-end PHP language use case development
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP语言端到端用例开发
- en: Now, let’s move on to the sample use case to show the power of Amazon Q Developer’s
    ability to recommend the code. To illustrate, I am going to use the same chat-style
    interface to generate the code and then move to the VS Code script editor window.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续到示例用例，以展示亚马逊Q开发者推荐代码的能力。为了说明，我将使用相同的聊天式界面生成代码，然后转到VS Code脚本编辑器窗口。
- en: 'A common use case for PHP in server-side programming is handling user authentication
    and managing sessions. This involves verifying user credentials, starting sessions,
    and managing session data to maintain user state across different pages of a web
    application. Here is the prompt:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端编程中，PHP的一个常见用例是处理用户身份验证和管理会话。这包括验证用户凭据、启动会话以及管理会话数据以在Web应用程序的不同页面之间保持用户状态。以下是提示：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Figure 6.11 – Prompt – PHP program partial snapshot](img/B21378_06_11.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 提示 – PHP程序局部快照](img/B21378_06_11.jpg)'
- en: Figure 6.11 – Prompt – PHP program partial snapshot
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 提示 – PHP程序局部快照
- en: The preceding screenshot displays a partial code snippet suggested by Amazon
    Q Developer. You can use the `authenticate ($username, $password)` function with
    error handling, and checks for valid users with session handling using `isset($_SESSION['loggedin'])
    && $_SESSION['loggedin']`. The code meets the specifics of your prompts, demonstrating
    Amazon Q Developer’s ability to generate comprehensive and functional code for
    handling user authentication and managing sessions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了 Amazon Q Developer 提出的部分代码片段。您可以使用 `authenticate ($username, $password)`
    函数并带有错误处理，以及使用 `isset($_SESSION['loggedin']) && $_SESSION['loggedin']` 检查有效用户并使用会话处理。该代码符合您提示的具体要求，展示了
    Amazon Q Developer 生成全面且功能性的代码以处理用户身份验证和管理会话的能力。
- en: 'The script is already echoing the error message, but let’s spice things up
    with some customization. Instead of just a boring error message, let’s display
    a random error image from a folder full of random images every time an error occurs.
    Let’s use the single-line prompt technique, to add a custom twist:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本已经输出了错误信息，但让我们通过一些定制来增加趣味。不是仅仅显示一个无聊的错误信息，而是每次发生错误时都从充满随机图像的文件夹中显示一个随机错误图像。让我们使用单行提示技术，添加一个自定义的转折点：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Figure 6.12 – Prompt – PHP program custom error image](img/B21378_06_12.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 提示 – PHP 程序自定义错误图像](img/B21378_06_12.jpg)'
- en: Figure 6.12 – Prompt – PHP program custom error image
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 提示 – PHP 程序自定义错误图像
- en: As you can see in the preceding screenshot, Amazon Q Developer added multiple
    lines of code to randomly pick one image from our `error/images` directory and
    added it as part of the display.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，Amazon Q Developer 添加了多行代码，随机从我们的 `error/images` 目录中选择一个图像，并将其作为显示的一部分。
- en: Now, let’s explore how Amazon Q Developer supports code explainability and optimization
    for JS and PHP.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探讨 Amazon Q Developer 如何支持 JS 和 PHP 的代码可解释性和优化。
- en: JS and PHP code explainability and optimization using Amazon Q Developer
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 解释 JS 和 PHP 代码的可解释性和优化
- en: Amazon Q Developer offers a simple interface for achieving code explainability
    and optimization for both JS and PHP. For more details on explainability and optimization,
    please refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q Developer 为 JS 和 PHP 提供了一个简单的界面，以实现代码的可解释性和优化。有关可解释性和优化的更多详细信息，请参阅
    [*第 12 章*](B21378_12.xhtml#_idTextAnchor181)。
- en: To illustrate, I am going to use the previously auto-generated code during the
    *PHP server-side end-to-end code* creation task. As shown In the following screenshot,
    highlight the code, right-click to open the pop-up menu, select **Amazon Q**,
    and choose **Explain** for code explainability or **Optimize** for optimization
    recommendations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我将在 *PHP 服务器端端到端代码* 创建任务中使用的先前自动生成的代码。如下所示截图，突出显示代码，右键单击以打开弹出菜单，选择 **Amazon
    Q**，然后选择 **解释** 以实现代码可解释性或选择 **优化** 以获取优化建议。
- en: '![Figure 6.13 – Prompt – JS and PHP program explainability and optimization](img/B21378_06_13.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 提示 – JS 和 PHP 程序的可解释性和优化](img/B21378_06_13.jpg)'
- en: Figure 6.13 – Prompt – JS and PHP program explainability and optimization
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 提示 – JS 和 PHP 程序的可解释性和优化
- en: This will open up Amazon Q Developer’s chat-style interface to analyze the full
    code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开 Amazon Q Developer 的聊天式界面以分析完整代码。
- en: For explainability, Amazon Q Developer provides detailed information about each
    function and the overall code logic.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可解释性，Amazon Q Developer 提供了关于每个函数和整体代码逻辑的详细信息。
- en: When it comes to optimization, Amazon Q Developer offers end-to-end optimized
    code that you can directly insert into your editor using the `authenticate()`
    function, combining conditions in `$isLoggedIn` for improved readability, and
    suggested output encoding to prevent potential XSS vulnerabilities. These optimizations
    enhance the code’s security, readability, and performance without altering its
    core functionality. Additionally, it advised replacing the current authentication
    method with a more secure approach, such as employing a secure password hashing
    algorithm and storing user credentials in a database.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在优化方面，Amazon Q Developer 提供了端到端优化的代码，您可以直接使用 `authenticate()` 函数将其插入到您的编辑器中，结合
    `$isLoggedIn` 中的条件以提高可读性，并建议输出编码以防止潜在的安全漏洞。这些优化增强了代码的安全性、可读性和性能，而不改变其核心功能。此外，它建议用更安全的方法替换当前的认证方法，例如使用安全的密码散列算法并将用户凭据存储在数据库中。
- en: In addition to JS and PHP, Amazon Q Developer supports multiple other programming
    languages. There are many enhancements happening in this area, and we anticipate
    further enhancements in the support for additional languages (check the *References*
    section at the end of the chapter).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 JS 和 PHP，Amazon Q 开发者还支持多种其他编程语言。该领域正在进行许多改进，我们预计将会有更多语言支持方面的改进（请参阅章节末尾的*参考文献*部分）。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Amazon Q Developer represents a transformative tool for auto-code generation
    in web development languages such as JS and PHP. Programmers engage with Amazon
    Q Developer through chat-style interactions, making it an intuitive platform for
    learning and coding. By using various prompting techniques, developers can obtain
    code fragments or complete scripts from Amazon Q Developer, streamlining their
    workflow.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q 开发者代表了在诸如 JS 和 PHP 这样的网络开发语言中自动代码生成的变革性工具。程序员通过与 Amazon Q 开发者的聊天式交互来与之互动，使其成为一个直观的学习和编码平台。通过使用各种提示技术，开发者可以从
    Amazon Q 开发者那里获取代码片段或完整的脚本，从而简化他们的工作流程。
- en: For JS, this capability is crucial for creating interactive user interfaces
    and dynamic web content. Developers can prompt Amazon Q Developer to generate
    JS code for common tasks such as form validation, event handling, and DOM manipulation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JS 来说，这项功能对于创建交互式用户界面和动态网络内容至关重要。开发者可以提示 Amazon Q 开发者生成用于常见任务（如表单验证、事件处理和
    DOM 操作）的 JS 代码。
- en: Similarly, Amazon Q Developer’s integration for PHP aids web developers in implementing
    dynamic web applications, server-side scripting, and backend services. As illustrated,
    it can generate PHP code for tasks such as handling user logins, sessions, authentication,
    and more. In addition to code generation, Amazon Q Developer offers explanations
    for the generated code, helping developers understand how each part of the script
    functions. This educational aspect is invaluable for both novice and experienced
    developers looking to enhance their coding skills.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，Amazon Q 开发者对 PHP 的集成有助于网络开发者实现动态网络应用、服务器端脚本和后端服务。如图所示，它可以生成用于处理用户登录、会话、身份验证等任务的
    PHP 代码。除了代码生成外，Amazon Q 开发者还提供生成代码的解释，帮助开发者理解脚本中每一部分的功能。这一教育特性对于希望提高编码技能的新手和经验丰富的开发者来说都非常有价值。
- en: Overall, Amazon Q Developer empowers web developers to be more productive by
    automating routine coding tasks and providing optimization insights. This enables
    developers to focus on the innovative aspects of their projects, improving development
    efficiency and code quality. The support for JS and PHP showcases the versatility
    and potential of Amazon Q Developer in modern web development.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Amazon Q 开发者通过自动化常规编码任务和提供优化见解，使网络开发者能够更高效地工作。这使开发者能够专注于项目创新方面，提高开发效率和代码质量。对
    JS 和 PHP 的支持展示了 Amazon Q 开发者在现代网络开发中的多功能性和潜力。
- en: In the next chapter, we will introduce how Amazon Q Developer with SQL provides
    benefits to DBAs and DEs.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 Amazon Q 开发者如何通过 SQL 为数据库管理员（DBAs）和开发工程师（DEs）提供益处。
- en: References
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'JavaScript in Visual Studio Code: [https://code.visualstudio.com/docs/languages/javascript](https://code.visualstudio.com/docs/languages/javascript)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code 中的 JavaScript：[https://code.visualstudio.com/docs/languages/javascript](https://code.visualstudio.com/docs/languages/javascript)
- en: 'PHP in Visual Studio Code: [https://code.visualstudio.com/docs/languages/php](https://code.visualstudio.com/docs/languages/php)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code 中的 PHP：[https://code.visualstudio.com/docs/languages/php](https://code.visualstudio.com/docs/languages/php)
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IDE 中 Amazon Q 开发者支持的语言：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)
