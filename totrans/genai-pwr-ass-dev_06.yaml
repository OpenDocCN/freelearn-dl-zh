- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boost Coding Efficiency for JavaScript and PHP with Auto-Code Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of web development programming languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript auto-code generation using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP auto-code generation using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript and PHP code explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous chapter, we looked at some of the categories of programming
    languages. We then discussed an overview of foundational programming languages
    before focusing on two dominant ones used in the software industry: C and C++.
    We introduced how auto-code generation, especially using Amazon Q Developer, is
    integrated and can be used by C and C++ developers to understand, learn the syntax,
    and automatically generate code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the previous chapter, in this chapter, we will focus on two programming
    languages. We will start with an overview of web programming languages and then
    focus on two that are commonly used in the software industry: **JavaScript** (**JS**)
    and **PHP**. We will introduce how auto-code generation, particularly through
    Amazon Q Developer, can be used by JS and PHP developers for understanding the
    basics, learning the syntax, automatically generating code, code explainability,
    and optimization through code recommendations.'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of web development programming languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In earlier chapters, we reviewed different programming language categories and
    delved deep into foundational languages such as C and C++, which power many system
    constructs. Now, let’s dive into web development languages such as JS and PHP,
    which enable dynamic and interactive web experiences. These are some of the most
    popular languages for server-side scripting, client-side scripting, **Document
    Object Model** (**DOM**) programming, web APIs, mobile applications, and more.
  prefs: []
  type: TYPE_NORMAL
- en: A few decades ago, with the growth in web application development, many languages
    were introduced in the software industry. Web development languages play a crucial
    role in shaping the interactive and functional aspects of modern web applications.
    Among these, JS and PHP are prominent for their respective roles in client-side
    and server-side scripting. JS powers dynamic and interactive user experiences
    in web browsers, while PHP facilitates server-side logic for dynamic content generation
    and database interactions. In the realm of web development, efficiency and productivity
    are key factors for success. Developers often face challenges such as repetitive
    coding tasks, maintaining code consistency across different modules, and keeping
    up with evolving best practices. Auto-code generation has emerged as a solution
    to these challenges, enabling developers to automate routine coding tasks and
    streamline their workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer, an advanced tool leveraging artificial intelligence and
    machine learning, offers significant capabilities in auto-code generation for
    JavaScript and PHP. By integrating Amazon Q Developer into the development process,
    developers can leverage its features to enhance productivity, improve code quality,
    and expedite the development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: JS, as a frontend scripting language, is instrumental in creating interactive
    user interfaces and dynamic web content. However, JS development can become complex
    due to the need for cross-browser compatibility, asynchronous programming patterns,
    and managing event-driven interactions. Amazon Q Developer simplifies JS development
    by generating code snippets and functions tailored to specific requirements instructed
    in the prompts. Web developers can leverage different prompting techniques and
    chat style integrations (refer to [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060))
    to get recommendations for the automated creation of event handlers, DOM manipulation
    functions, and asynchronous operations, thereby reducing development time and
    ensuring code consistency across different browser environments.
  prefs: []
  type: TYPE_NORMAL
- en: On the server side, PHP remains a popular choice for dynamic web applications
    and backend services. PHP’s versatility in handling form submissions, session
    management, and database interactions makes it indispensable for web developers.
    However, writing efficient and secure PHP code requires adherence to coding standards
    and best practices. Amazon Q Developer assists developers by generating optimized
    PHP code snippets for common tasks such as database queries, form processing,
    and error handling. This not only accelerates development but also enhances code
    reliability and security.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Amazon Q Developer supports the learning and understanding of JS and
    PHP syntax. For developers new to these languages, Amazon Q Developer provides
    interactive tutorials and code examples through chat-style interactions. Developers
    can use prompts to request explanations of language features, obtain code snippets
    for specific functionalities, or generate complete scripts based on predefined
    templates. This educational aspect of Amazon Q Developer helps shorten the learning
    curve and empowers developers to quickly grasp essential concepts and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s dive deep to see how Amazon Q Developer can help a web programmer.
    To illustrate, I am using the Amazon Q Developer interface with VS Code (refer
    to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022) for the configuration steps
    for Amazon Q Developer with VS Code and check the *References* section at the
    end of this chapter for the URLs for JS and PHP in VS Code).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer uses LLMs, which, by nature, are non-deterministic, so you
    may not get exactly the same answers/code blocks shown in the code snapshots;
    try to update prompts to get the desired recommendations. However, logically,
    the generated answer/code should meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: JS auto-code generation using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let’s explore how Amazon Q Developer can assist a new web programmer
    planning to work with JS but lacking a background in the language. We will use
    Amazon Q Developer’s chat-style interface to educate the programmer.
  prefs: []
  type: TYPE_NORMAL
- en: JS language basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn about the JS programming language by asking about the very basics
    of JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the following screenshot, Amazon Q Developer provided historical
    information about the original developers. It then summarized the common use cases
    by categorizing where the JS language excels. Additionally, it offered sources
    for further reference and learning.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Chat style – JS basics](img/B21378_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Chat style – JS basics
  prefs: []
  type: TYPE_NORMAL
- en: You can observe that, in addition to web development, Amazon Q Developer pointed
    out the versatility of JS applications, such as game development, desktop applications,
    **Internet of Things** (**IoT**) applications, and machine learning applications.
    Amazon Q also provided guidelines about JS use in “**applications that require
    a high degree of interactivity, responsiveness, and** **dynamic behavior**”*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the preceding information, you can see that JS is so versatile and
    can be used in various software development projects across industries. Let’s
    look at the commonly used commands by JS web programmers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will not be going through each command, but just for illustration, as you
    can see in the following partial screenshot, Amazon Q Developer provided several
    categories of the common commands and constructs in the JS programming language.
    To make it easy to follow, it also included some of the common key commands for
    each of the categories.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Chat style – JS commands](img/B21378_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Chat style – JS commands
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer highlighted multiple areas where JS has various supported
    command sets such as console commands, DOM manipulation commands, array manipulation,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use one of the areas to get information and ask Amazon Q Developer to
    provide details and examples related to JS support for DOM manipulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.3 – Chat style – JS DOM manipulation](img/B21378_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Chat style – JS DOM manipulation
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding partial screenshot, Amazon Q Developer begins with
    the basics of DOM manipulation, which refers to the ability to dynamically access
    and modify the content, structure, and style of a web page using JS. The DOM represents
    the hierarchical structure of an HTML document, where each element, attribute,
    and text node is an object that can be accessed and manipulated. It then continues
    by providing specific details related to categories such as accessing DOM elements,
    creating and modifying elements, manipulating attributes, handling events, modifying
    styles, and DOM manipulation libraries and frameworks. At the end, it provides
    a summary highlighting the importance of JS for DOM manipulation: “**DOM manipulation
    is a crucial aspect of building dynamic and interactive web applications. By leveraging
    JavaScript’s capabilities to access and modify the DOM, developers can create
    rich user experiences, update content on-the-fly, validate user input, and respond
    to user interactions without requiring a full-page refresh**”, with reference
    sources included.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s ask Amazon Q Developer for the syntax of one of the most useful
    loops used while coding complex scripts, the `for...in` loop in JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.4 – Chat style – JS “for…in” loop example](img/B21378_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Chat style – JS “for…in” loop example
  prefs: []
  type: TYPE_NORMAL
- en: Observe in the preceding screenshot that Amazon Q Developer provided the syntax,
    details, and an example of a `for...in` loop. Now, let’s move to the sample use
    case to show the power of Amazon Q Developer’s ability to recommend the code.
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end JS use case development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To illustrate, I am going to use the VS Code script editor window with single
    and multi-line prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the use case: Create JS end-to-end code to build a to-do list application.
    Create tasks such as adding new items, marking items as completed, and deleting
    items. Use JS to manipulate the DOM and respond to user events. Here is the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.5 – Prompt – JS program partial snapshot](img/B21378_06_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Prompt – JS program partial snapshot
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows a partial code snippet suggested by Amazon Q
    Developer. The full end-to-end code generated in response to our prompt demonstrates
    several fundamental and advanced concepts in JS and DOM manipulation. It effectively
    utilizes key JS functionalities related to the DOM, such as getting elements,
    creating elements, modifying elements, handling events, and applying styles. It
    leverages multiple key out-of-box functions of JS, including `document.getElementById`,
    `document.createElement`, `taskItem.appendChild`, `taskList.removeChild`, `Button.onclick`,
    and more. It also included a custom `addTask()` function to support coding best
    practices. The end-to-end code meets the specifics of your prompts, showcasing
    Amazon Q Developer’s capability to generate comprehensive and functional code
    for web development tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the current version of the code, Amazon Q Developer added two buttons: `Delete`
    and `Complete`. If we use the basic chain of thought for actions supported by
    the application, it appears that a `Cancel` button is missing. Let’s use a single-line
    prompt technique to suggest to Amazon Q Developer to add a `Cancel` button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.6 – Prompt – JS program Cancel button](img/B21378_06_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Prompt – JS program Cancel button
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer added multiple
    lines of code to add the `Cancel` button. It effectively used JS functions such
    as `document.createElement`, `cancelButton.onclick`, and `taskList.removeChild`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s see how Amazon Q Developer supports PHP developers.
  prefs: []
  type: TYPE_NORMAL
- en: PHP auto-code generation using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like previously, first, let’s assume that a new web programmer is planning
    to work with **PHP** (which is a recursive acronym for **PHP: Hypertext Preprocessor**)
    and does not have much experience coding with a PHP background. Let’s use Amazon
    Q Developer’s chat-style interface to educate the programmer.'
  prefs: []
  type: TYPE_NORMAL
- en: PHP language basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn about the PHP programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.7 – Chat style – PHP basics](img/B21378_06_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Chat style – PHP basics
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer provided basic
    information, such as informing us that PHP is a popular, open source, server-side
    scripting language widely used for web development. It is designed primarily for
    creating dynamic web pages and web applications. PHP’s versatility and the availability
    of numerous libraries and frameworks have expanded its use cases beyond the web.
    However, it is still predominantly used for building dynamic web applications,
    content management systems, and web services.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it outlined common applications where PHP plays an important role,
    such as web development, **Content Management Systems** (**CMSs**), server-side
    scripting, command-line scripting, desktop applications, data processing and analysis,
    and embedded systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since PHP is a popular, open source, server-side scripting language, let’s
    ask Amazon Q Developer to provide details and examples of PHP’s support for server-side
    scripting, which has contributed to its widespread use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.8 – Chat style – PHP server-side scripting support](img/B21378_06_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Chat style – PHP server-side scripting support
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer began with the basics of server-side scripting, explaining
    that “**Server-side scripting refers to the process of executing code on the server
    before sending the resulting output (typically HTML) to the client’s web browser**”*.*
    It then provided context for PHP, highlighting that PHP is a server-side scripting
    language designed to run on the server and generate dynamic web pages. Additionally,
    it listed key functionality supported by PHP, such as embedding PHP code in HTML,
    processing user input, filesystem operations, database integration, session management,
    web services and APIs, and server configuration and environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s ask for some commonly used commands by PHP web programmers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.9 – Chat style – PHP common commands partial screenshot](img/B21378_06_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Chat style – PHP common commands partial screenshot
  prefs: []
  type: TYPE_NORMAL
- en: We won’t cover every command, but as illustrated in the preceding partial screenshot,
    Amazon Q Developer provided various command categories such as output commands,
    variable commands, conditional statements, database commands, form commands, error
    handling, array commands, and more. To make it easier to follow, it included some
    common key commands for each category and provided references for users to obtain
    further detailed information on these topics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Database commands is one of the important categories that make PHP useful for
    server-side scripting. Now, let’s ask Amazon Q Developer for the syntax and an
    example of `mysqli_connect()` in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.10 – Chat style –PHP mysqli_connect()](img/B21378_06_10_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Chat style –PHP mysqli_connect()
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, Amazon Q Developer provided an example
    for `mysqli_connect()` and explained the details of each line of the code to make
    it easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end PHP language use case development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s move on to the sample use case to show the power of Amazon Q Developer’s
    ability to recommend the code. To illustrate, I am going to use the same chat-style
    interface to generate the code and then move to the VS Code script editor window.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common use case for PHP in server-side programming is handling user authentication
    and managing sessions. This involves verifying user credentials, starting sessions,
    and managing session data to maintain user state across different pages of a web
    application. Here is the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.11 – Prompt – PHP program partial snapshot](img/B21378_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Prompt – PHP program partial snapshot
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot displays a partial code snippet suggested by Amazon
    Q Developer. You can use the `authenticate ($username, $password)` function with
    error handling, and checks for valid users with session handling using `isset($_SESSION['loggedin'])
    && $_SESSION['loggedin']`. The code meets the specifics of your prompts, demonstrating
    Amazon Q Developer’s ability to generate comprehensive and functional code for
    handling user authentication and managing sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script is already echoing the error message, but let’s spice things up
    with some customization. Instead of just a boring error message, let’s display
    a random error image from a folder full of random images every time an error occurs.
    Let’s use the single-line prompt technique, to add a custom twist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.12 – Prompt – PHP program custom error image](img/B21378_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Prompt – PHP program custom error image
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer added multiple
    lines of code to randomly pick one image from our `error/images` directory and
    added it as part of the display.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore how Amazon Q Developer supports code explainability and optimization
    for JS and PHP.
  prefs: []
  type: TYPE_NORMAL
- en: JS and PHP code explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer offers a simple interface for achieving code explainability
    and optimization for both JS and PHP. For more details on explainability and optimization,
    please refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate, I am going to use the previously auto-generated code during the
    *PHP server-side end-to-end code* creation task. As shown In the following screenshot,
    highlight the code, right-click to open the pop-up menu, select **Amazon Q**,
    and choose **Explain** for code explainability or **Optimize** for optimization
    recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Prompt – JS and PHP program explainability and optimization](img/B21378_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Prompt – JS and PHP program explainability and optimization
  prefs: []
  type: TYPE_NORMAL
- en: This will open up Amazon Q Developer’s chat-style interface to analyze the full
    code.
  prefs: []
  type: TYPE_NORMAL
- en: For explainability, Amazon Q Developer provides detailed information about each
    function and the overall code logic.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to optimization, Amazon Q Developer offers end-to-end optimized
    code that you can directly insert into your editor using the `authenticate()`
    function, combining conditions in `$isLoggedIn` for improved readability, and
    suggested output encoding to prevent potential XSS vulnerabilities. These optimizations
    enhance the code’s security, readability, and performance without altering its
    core functionality. Additionally, it advised replacing the current authentication
    method with a more secure approach, such as employing a secure password hashing
    algorithm and storing user credentials in a database.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to JS and PHP, Amazon Q Developer supports multiple other programming
    languages. There are many enhancements happening in this area, and we anticipate
    further enhancements in the support for additional languages (check the *References*
    section at the end of the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer represents a transformative tool for auto-code generation
    in web development languages such as JS and PHP. Programmers engage with Amazon
    Q Developer through chat-style interactions, making it an intuitive platform for
    learning and coding. By using various prompting techniques, developers can obtain
    code fragments or complete scripts from Amazon Q Developer, streamlining their
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: For JS, this capability is crucial for creating interactive user interfaces
    and dynamic web content. Developers can prompt Amazon Q Developer to generate
    JS code for common tasks such as form validation, event handling, and DOM manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, Amazon Q Developer’s integration for PHP aids web developers in implementing
    dynamic web applications, server-side scripting, and backend services. As illustrated,
    it can generate PHP code for tasks such as handling user logins, sessions, authentication,
    and more. In addition to code generation, Amazon Q Developer offers explanations
    for the generated code, helping developers understand how each part of the script
    functions. This educational aspect is invaluable for both novice and experienced
    developers looking to enhance their coding skills.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, Amazon Q Developer empowers web developers to be more productive by
    automating routine coding tasks and providing optimization insights. This enables
    developers to focus on the innovative aspects of their projects, improving development
    efficiency and code quality. The support for JS and PHP showcases the versatility
    and potential of Amazon Q Developer in modern web development.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce how Amazon Q Developer with SQL provides
    benefits to DBAs and DEs.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript in Visual Studio Code: [https://code.visualstudio.com/docs/languages/javascript](https://code.visualstudio.com/docs/languages/javascript)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PHP in Visual Studio Code: [https://code.visualstudio.com/docs/languages/php](https://code.visualstudio.com/docs/languages/php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
