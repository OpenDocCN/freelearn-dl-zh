- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Extracting Entities and Generating Code with Amazon Bedrock
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Bedrock 提取实体和生成代码
- en: This chapter uncovers the realm of entity extraction, a crucial technique in
    NLP. We will explore the intricacies of entity extraction applications, providing
    a comprehensive understanding of implementing entity extraction using Amazon Bedrock.
    Through real-world use cases, you will gain insights into the practical applications
    of entity extraction across various domains.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章揭示了实体提取领域，这是自然语言处理中的一个关键技术。我们将探讨实体提取应用的复杂性，提供使用 Amazon Bedrock 实施实体提取的全面理解。通过实际案例，您将深入了解实体提取在各个领域的实际应用。
- en: Furthermore, the chapter will guide you through the exciting world of generative
    AI for code generation. We will investigate the underlying principles and methodologies
    that enable AI systems to generate code snippets, functions, and even entire applications.
    You will learn how to leverage Amazon Bedrock to streamline your development workflows
    and enhance productivity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本章将引导您进入代码生成的激动人心的生成式 AI 世界。我们将探讨使 AI 系统能够生成代码片段、函数甚至整个应用程序的底层原理和方法。您将学习如何利用
    Amazon Bedrock 简化您的开发工作流程并提高生产力。
- en: By mastering these techniques, you will be equipped with the knowledge and skills
    to tackle complex NLP tasks and harness the power of generative AI in your coding
    endeavors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握这些技术，您将具备解决复杂 NLP 任务和利用生成式 AI 在编码工作中的力量的知识和技能。
- en: 'The following topics will be covered in detail:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下主题将详细介绍：
- en: Entity extraction – a comprehensive exploration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体提取 – 全面探索
- en: Industrial use cases of entity extraction – unleashing the power of unstructured
    data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体提取的工业应用案例 – 解放非结构化数据的力量
- en: Entity extraction with Amazon Bedrock
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Bedrock 进行实体提取
- en: Code generation with LLMs – unleashing the power of AI-driven development
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用大型语言模型进行代码生成 – 解放 AI 驱动的开发力量
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to have access to an AWS account. If you don’t have
    one already, you can go to [https://aws.amazon.com/getting-started/](https://aws.amazon.com/getting-started/)
    and create an AWS account.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您拥有 AWS 账户访问权限。如果您还没有账户，可以访问 [https://aws.amazon.com/getting-started/](https://aws.amazon.com/getting-started/)
    创建一个 AWS 账户。
- en: 'Secondly, you will need to install and configure the AWS CLI from [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/)
    after you create an account, which will be needed to access Amazon Bedrock FMs
    from your local machine. Since the majority of the code cells we will be executing
    are based on Python, setting up an AWS Python SDK (Boto3) at [https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html](https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html)
    would be beneficial at this point. You can carry out the Python setup in the following
    manner: install it on your local machine, use AWS Cloud9 or AWS Lambda, or leverage
    Amazon SageMaker.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，您需要在创建账户后从 [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/) 安装和配置
    AWS CLI，这将用于从您的本地机器访问 Amazon Bedrock FMs。由于我们将执行的大多数代码单元都是基于 Python 的，因此在此时设置
    AWS Python SDK（Boto3）[https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html](https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html)
    将非常有用。您可以通过以下方式执行 Python 设置：在您的本地机器上安装它，使用 AWS Cloud9 或 AWS Lambda，或利用 Amazon
    SageMaker。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There will be a charge associated with the invocation and customization of Amazon
    Bedrock FMs. Please refer to [https://aws.amazon.com/bedrock/pricing/](https://aws.amazon.com/bedrock/pricing/)
    to learn more.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与调用和定制 Amazon Bedrock FMs 相关的费用将会产生。请参阅 [https://aws.amazon.com/bedrock/pricing/](https://aws.amazon.com/bedrock/pricing/)
    了解更多信息。
- en: Entity extraction – a comprehensive exploration
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体提取 – 全面探索
- en: In the era of big data and information overload, the ability to extract meaningful
    insights from unstructured text data has become increasingly valuable. **Entity
    extraction**, a subfield of NLP, plays a pivotal role in this endeavor by identifying
    and classifying named entities within text, such as people, organizations, locations,
    and more. This process not only facilitates information retrieval and knowledge
    management but also enables a wide range of applications, including **question-answering**,
    sentiment analysis, and **decision support** **systems** (**DSSs**).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在大数据和信息过载的时代，从非结构化文本数据中提取有意义的见解的能力变得越来越有价值。**实体提取**，作为 NLP 的一个子领域，在这一努力中发挥着关键作用，通过识别和分类文本中的命名实体（如人物、组织、地点等），从而不仅促进了信息检索和知识管理，还使各种应用成为可能，包括**问答**、**情感分析**和**决策支持系统**（DSSs）。
- en: The journey of entity extraction began with simple pattern-matching and rule-based
    systems, which relied heavily on manually crafted rules and lexicons. These methods,
    while useful, lacked scalability and robustness when dealing with diverse and
    complex datasets.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实体提取的旅程始于简单的模式匹配和基于规则的系统，这些系统严重依赖于手动制定的规则和词汇表。虽然这些方法有用，但在处理多样化和复杂的数据集时，它们缺乏可扩展性和鲁棒性。
- en: Hence, traditionally, entity extraction has been a challenging task, requiring
    extensive manual effort and domain-specific knowledge. However, the advent of
    generative AI, particularly LLMs, has revolutionized this field, offering more
    accurate, scalable, and efficient solutions. In this chapter, we will explore
    the various techniques employed by LLMs on Amazon Bedrock for entity extraction,
    diving into their underlying architectures, strengths, and limitations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，传统上，实体提取是一个具有挑战性的任务，需要大量的手动工作和领域专业知识。然而，生成式 AI 的出现，尤其是 LLMs，彻底改变了这一领域，提供了更准确、可扩展和高效的解决方案。在本章中，我们将探讨
    LLMs 在 Amazon Bedrock 上用于实体提取的各种技术，深入其底层架构、优势和局限性。
- en: Deep learning approaches
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深度学习方法
- en: The advent of machine learning introduced statistical models that leveraged
    feature engineering. These models, including **hidden Markov models** (**HMMs**)
    and **conditional random fields** (**CRFs**), represented a significant step forward.
    They utilized hand-crafted features and probabilistic frameworks to improve extraction
    accuracy. However, their performance was still limited by the quality and comprehensiveness
    of the features engineered by experts.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习的出现引入了利用特征工程统计模型。这些模型，包括**隐马尔可夫模型**（HMMs）和**条件随机字段**（CRFs），代表了一个重大进步。它们利用手工制作的特征和概率框架来提高提取精度。然而，它们的性能仍然受到专家设计的特征的质量和全面性的限制。
- en: Neural networks marked a paradigm shift in entity extraction by automating feature
    learning and capturing intricate patterns within the data. Early applications
    of neural networks, such as **recurrent NNs** (**RNNs**) and **long short-term
    memory networks** (**LSTMs**), demonstrated the potential of deep learning in
    handling sequential data and extracting entities with greater accuracy.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络通过自动化特征学习和捕捉数据中的复杂模式，在实体提取中实现了范式转变。早期神经网络的应用，如**循环神经网络**（RNNs）和**长短期记忆网络**（LSTMs），展示了深度学习在处理序列数据和以更高精度提取实体方面的潜力。
- en: While models such as BERT and its successors represent a significant leap in
    NLP, our focus will remain on models and techniques that align with the practical
    applications and tools used in Bedrock. We will explore some deep learning approaches
    and models that have proven effective in various scenarios and are relevant to
    our framework.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 BERT 及其后续模型在 NLP 领域代表了一个重大飞跃，但我们的关注点将始终集中在与 Bedrock 中使用的实际应用和工具相一致的模式和技巧上。我们将探讨一些在多种场景中证明有效的深度学习方法和模型，它们与我们的框架相关。
- en: Transformer-based models
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于 Transformer 的模型
- en: 'Transformer architectures, introduced by the seminal paper *Attention is All
    You Need* (*Vaswani et al.*, *2017*: [https://arxiv.org/abs/1706.03762](https://arxiv.org/abs/1706.03762)),
    have become the backbone of many SOTA LLMs for entity extraction. These models
    employ self-attention mechanisms to capture long-range dependencies within the
    input text, enabling them to better understand the context and relationships between
    entities.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'Transformer 架构，由开创性的论文 *Attention is All You Need* (*Vaswani 等人，*2017*: [https://arxiv.org/abs/1706.03762](https://arxiv.org/abs/1706.03762))
    提出，已成为许多 SOTA LLMs 用于实体提取的骨干。这些模型采用自注意力机制来捕捉输入文本中的长距离依赖关系，使它们能够更好地理解上下文以及实体之间的关系。'
- en: BERT, developed by Google AI, is a prominent example of a transformer-based
    model that has achieved exceptional results in various NLP tasks, including entity
    extraction. It is a bidirectional model, meaning it can process text in both directions
    simultaneously, allowing it to capture contextual information more effectively
    than its predecessors.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由谷歌AI开发的BERT是一个基于转换器的模型，它在各种NLP任务中，包括实体提取中取得了卓越的成果。它是一个双向模型，这意味着它可以同时处理文本的两个方向，使其比前辈更有效地捕捉上下文信息。
- en: Sequence labeling and CRFs
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列标注和CRFs
- en: Entity extraction can be framed as a sequence labeling problem, where each token
    in the input text is assigned a label indicating its entity type (for example,
    person, organization, location) or a non-entity label. LLMs can be trained to
    perform this task by leveraging techniques such as CRFs or the more recent **bidirectional
    LSTM with CRF** (**BiLSTM-CRF**) architecture.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实体提取可以被视为一个序列标注问题，其中输入文本中的每个标记都被分配一个标签，指示其实体类型（例如，人、组织、地点）或非实体标签。LLMs可以通过利用CRFs或更近期的**双向LSTM与CRF（BiLSTM-CRF**）架构等技术来训练执行此任务。
- en: '**CRFs** are probabilistic graphical models that can effectively capture the
    dependencies between labels in a sequence, making them well suited for entity
    extraction tasks. They model the conditional probability of label sequences given
    the input text, allowing for the incorporation of rich features and contextual
    information.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**条件随机场（CRFs**）是能够有效捕捉序列中标签之间依赖关系的概率图模型，这使得它们非常适合实体提取任务。它们模型化给定输入文本的标签序列的条件概率，允许结合丰富的特征和上下文信息。'
- en: '**BiLSTM-CRF models** combine the strengths of BiLSTMs for capturing long-range
    dependencies and CRFs for sequence labeling. This hybrid approach has shown impressive
    performance in entity extraction, particularly in scenarios where entities may
    span multiple tokens or have complex structures.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**双向长短时记忆网络-条件随机场（BiLSTM-CRF**）模型结合了BiLSTM在捕捉长距离依赖关系和CRFs在序列标注方面的优势。这种混合方法在实体提取中表现出令人印象深刻的性能，尤其是在实体可能跨越多个标记或具有复杂结构的情况下。'
- en: Rule-based systems
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于规则的系统
- en: While deep learning approaches have gained significant traction in recent years,
    rule-based systems remain valuable tools in the entity extraction domain. These
    systems rely on manually crafted rules and patterns to identify and classify entities
    within text, leveraging domain-specific knowledge and expert insights. These rules
    can be augmented to the prompt template when invoking Amazon Bedrock in order
    to generate a desirable response from the FMs. For example, in a medical application,
    the rule-based component might identify drug names, dosages, and patient information
    using predefined patterns.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管近年来深度学习方法获得了显著的关注，但基于规则的系统在实体提取领域仍然是宝贵的工具。这些系统依赖于手动编写的规则和模式来识别和分类文本中的实体，利用领域特定知识和专家见解。这些规则可以增强到Amazon
    Bedrock的提示模板中，以便从FMs生成期望的响应。例如，在医疗应用中，基于规则的组件可能会使用预定义的模式来识别药物名称、剂量和患者信息。
- en: Regular expressions and pattern matching
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式和模式匹配
- en: '**Regular expressions** and **pattern-matching** techniques are fundamental
    building blocks of rule-based entity extraction systems. These methods allow for
    the definition of patterns that can match and extract specific entity types, such
    as phone numbers, email addresses, or specific named entities (for example, company
    names and product names).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**正则表达式**和**模式匹配**技术是规则基于实体提取系统的基本构建块。这些方法允许定义可以匹配和提取特定实体类型（例如电话号码、电子邮件地址或特定的命名实体，例如公司名称和产品名称）的模式。'
- en: 'While regular expressions can be effective for well-defined and structured
    entity types, they may struggle with more complex or ambiguous entities that require
    contextual understanding. Nevertheless, they remain valuable tools, particularly
    in combination with other techniques or as a preprocessing step for more advanced
    methods. Here are some examples:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然正则表达式对于定义明确和结构化的实体类型可能非常有效，但它们在处理需要上下文理解的更复杂或模糊的实体时可能会遇到困难。尽管如此，它们仍然是宝贵的工具，尤其是在与其他技术结合使用或作为更高级方法预处理步骤时。以下是一些例子：
- en: '**Ruleset**: Define rules using regular expressions and pattern matching to
    identify specific entities such as drug names, dosages, and patient information'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则集**：使用正则表达式和模式匹配定义规则，以识别特定的实体，如药物名称、剂量和患者信息'
- en: '`\d+mg` (for example, `500mg`)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\d+mg`（例如，`500mg`）'
- en: 'Patient information can be identified through patterns such as `Patient: [A-Za-z]+`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '可以通过诸如`Patient: [A-Za-z]+`之类的模式识别患者信息'
- en: Gazetteer lists and dictionaries
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地名词典和词典
- en: '**Gazetteer lists** and **dictionaries** are curated collections of known entities,
    often organized by entity type or domain. These resources can be used to match
    and extract entities within text by performing lookups against predefined lists.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**地名词典**和**词典**是已知实体的精选集合，通常按实体类型或领域组织。这些资源可以通过对预定义列表进行查找来用于匹配和提取文本中的实体。'
- en: For example, a gazetteer of geographic locations can be employed to identify
    and extract mentions of cities, countries, or other places in a given text. Similarly,
    dictionaries of person names or organization names can ease the extraction of
    these entity types.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，地理位置的地名词典可以用来识别和提取给定文本中提到的城市、国家或其他地点。同样，人名或组织名词典可以简化这些实体类型的提取。
- en: While gazetteer lists and dictionaries can be highly accurate for the entities
    they cover, they may struggle with ambiguity, variations, or newly emerging entities
    not present in the predefined lists. Additionally, maintaining and updating these
    resources can be a labor-intensive process, especially in rapidly evolving domains.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然地名词典和词典对于它们覆盖的实体可能非常准确，但它们可能难以处理歧义、变化或新出现的实体，这些实体不在预定义的列表中。此外，维护和更新这些资源可能是一个劳动密集型过程，尤其是在快速发展的领域。
- en: Hybrid approaches
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合方法
- en: In practice, many entity extraction systems employ a combination of deep learning
    and rule-based techniques, leveraging the strengths of both approaches to achieve
    optimal performance. These hybrid approaches aim to strike a balance between the
    flexibility and generalization capabilities of deep learning models and the precision
    and interpretability of rule-based systems.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，许多实体提取系统采用深度学习和基于规则的技术的组合，利用两种方法的优势来实现最佳性能。这些混合方法旨在在深度学习模型的灵活性和泛化能力与基于规则的系统的精确性和可解释性之间取得平衡。
- en: Ensemble methods
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成方法
- en: '**Ensemble methods** involve combining the outputs of multiple entity extraction
    models, potentially using different architectures or techniques, to improve overall
    performance. This approach can leverage the strengths of individual models while
    mitigating their weaknesses, resulting in more robust and accurate entity extraction.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成方法**涉及结合多个实体提取模型的输出，可能使用不同的架构或技术，以提高整体性能。这种方法可以利用单个模型的优势，同时减轻其弱点，从而实现更稳健和准确的实体提取。'
- en: For example, an ensemble system might combine the predictions of a transformer-based
    model such as BERT with those of a rule-based system or a gazetteer lookup. The
    outputs of these models can be combined using various strategies, such as majority
    voting, weighted averaging, or more sophisticated ensemble learning techniques.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个集成系统可能结合了基于BERT的转换器模型的预测以及基于规则的系统或地名词典查找的预测。这些模型的输出可以通过各种策略结合，例如多数投票、加权平均或更复杂的集成学习技术。
- en: Hybrid architectures
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合架构
- en: '**Hybrid architectures** integrate deep learning and rule-based components
    within a single model, allowing for the seamless integration of both approaches.
    These architectures often involve a deep learning component for learning representations
    and capturing contextual information, combined with rule-based components for
    incorporating domain-specific knowledge or handling well-defined entity types.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**混合架构**将深度学习和基于规则的组件集成到单个模型中，允许两种方法的无缝集成。这些架构通常涉及一个用于学习表示和捕获上下文信息的深度学习组件，并结合基于规则的组件来融入特定领域的知识或处理定义明确的实体类型。'
- en: 'One example of a hybrid architecture is the use of LLMs for entity representation
    learning, followed by a rule-based component for entity classification or extraction.
    The LLM component can learn rich representations of the input text, capturing
    contextual information and long-range dependencies, while the rule-based component
    can leverage expert knowledge and precise patterns for entity identification and
    classification. For instance, consider an application designed to extract financial
    information from corporate earnings reports. Here’s a detailed example of how
    a hybrid architecture can be implemented:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 混合架构的一个例子是使用LLM进行实体表示学习，然后使用基于规则的组件进行实体分类或提取。LLM组件可以学习输入文本的丰富表示，捕捉上下文信息和长距离依赖关系，而基于规则的组件可以利用专家知识和精确模式进行实体识别和分类。例如，考虑一个旨在从公司收益报告中提取财务信息的应用程序。以下是一个混合架构如何实现的详细示例：
- en: '`revenue`, `net income`, and `operating expenses`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`收入`、`净收入`和`运营费用`。'
- en: '`revenue`, `net income`, or `expenses`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`收入`、`净收入`或`费用`。'
- en: Extracting dates and fiscal periods using regular expressions.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正则表达式提取日期和财政期间。
- en: Recognizing company-specific terminology and abbreviations.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别公司特定的术语和缩写。
- en: The rule-based system analyzes the LLM-generated representations, applying these
    rules to accurately extract specific financial entities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基于规则的系统分析由LLM生成的表示，应用这些规则以准确提取特定的金融实体。
- en: 'Let’s now look at how the representations are integrated and optimized:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看这些表示是如何集成和优化的：
- en: '**Pipeline**: The system processes the earnings report through the LLM, which
    outputs rich text representations. These representations are then fed into the
    rule-based component.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道**：系统通过LLM处理收益报告，输出丰富的文本表示。然后，这些表示被输入到基于规则的组件中。'
- en: '**Output**: The final output includes precisely extracted financial entities,
    such as revenue figures, net income amounts, and fiscal periods, all verified
    and categorized according to the predefined rules.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**：最终输出包括精确提取的金融实体，如收入数字、净收入金额和财政期间，所有这些都根据预定义的规则进行了验证和分类。'
- en: By employing such a hybrid approach on Amazon Bedrock, the application leverages
    the comprehensive text understanding provided by LLMs and the precision and reliability
    of rule-based extraction methods. This approach ensures that entity extraction
    is more accurate and contextually aware, making it useful for complex domains
    such as financial analysis.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Amazon Bedrock上采用这种混合方法，应用程序利用了LLM提供的全面文本理解以及基于规则的提取方法的精确性和可靠性。这种方法确保了实体提取的准确性更高，并且具有更强的上下文意识，使其适用于金融分析等复杂领域。
- en: 'In order to gain a deeper understanding of hybrid LLM frameworks, readers are
    encouraged to read these papers: *Hybrid LLM-Rule-based Approaches to Business
    Insights Generation from Structured Data* (https://arxiv.org/pdf/2404.15604) and
    *An innovative hybrid approach for extracting named entities from unstructured
    text* *data* (https://www.researchgate.net/publication/332676137_An_innovative_hybrid_approach_for_extracting_named_entities_from_unstructured_text_data).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地了解混合LLM框架，鼓励读者阅读以下论文：*从结构化数据生成业务洞察的混合LLM-基于规则的途径*（https://arxiv.org/pdf/2404.15604）和*从非结构化文本数据中提取命名实体的创新混合方法*（https://www.researchgate.net/publication/332676137_An_innovative_hybrid_approach_for_extracting_named_entities_from_unstructured_text_data）。
- en: In this section, we covered different approaches (deep learning, rule-based,
    and hybrid approaches) associated with entity extraction. Now that we have a basic
    understanding of these approaches, let us dive into some industrial use cases
    of entity extraction.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了与实体提取相关联的不同方法（深度学习、基于规则和混合方法）。现在，我们已经对这些方法有了基本的了解，让我们深入了解一些实体提取的工业应用案例。
- en: Industrial use cases of entity extraction – unleashing the power of unstructured
    data
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体提取的工业应用案例——释放非结构化数据的力量
- en: 'Entity extraction has numerous applications across various domains, ranging
    from information retrieval and knowledge management to DSSs and **business intelligence**
    (**BI**). In this section, we will explore some practical use cases and applications
    of entity extraction with GenAI:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 实体提取在各个领域有广泛的应用，从信息检索和知识管理到决策支持系统（DSS）和**商业智能**（**BI**）。在本节中，我们将探讨一些使用GenAI的实体提取的实际用例和应用：
- en: '`Google was founded by Larry Page and Sergey Brin while they were Ph.D. students
    at` `Stanford University.`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Google是由拉里·佩奇和谢尔盖·布林在斯坦福大学攻读博士学位时创立的。`'
- en: 'With entity extraction, the following information can be extracted:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用实体提取，可以提取以下信息：
- en: '`Google (Organization)`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Google (组织)`'
- en: '`Larry` `Page (Person)`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Larry` `Page (人物)`'
- en: '`Sergey` `Brin (Person)`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sergey` `Brin (人物)`'
- en: '`Stanford` `University (Organization`)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stanford` `University (组织)`'
- en: '`founded by` (`Google` -> `Larry Page and Sergey Brin`) and `studied at` (`Larry
    Page and Sergey Brin` -> `Stanford University`), are established as edges connecting
    the nodes. This structured representation allows for efficient querying and reasoning
    over the information.*   `Google (Organization)`*   `Larry` `Page (Person)`*   `Sergey`
    `Brin (Person)`*   `Stanford` `University (Organization)`*   `Google -> Founded
    by ->` `Larry Page`*   `Google -> Founded by ->` `Sergey Brin`*   `Larry Page
    -> Studied at ->` `Stanford University`*   `Sergey Brin -> Studied at ->` `Stanford
    University`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`由` (`Google` -> `拉里·佩奇和谢尔盖·布林`) 和 `就读于` (`拉里·佩奇和谢尔盖·布林` -> `斯坦福大学`)，被确立为连接节点的边。这种结构化表示允许对信息进行高效的查询和推理。*   `Google
    (组织)`*   `Larry` `Page (人物)`*   `Sergey` `Brin (人物)`*   `Stanford` `University
    (组织)`*   `Google -> 创始人 ->` `拉里·佩奇`*   `Google -> 创始人 ->` `谢尔盖·布林`*   `拉里·佩奇 ->
    就读于 ->` `斯坦福大学`*   `谢尔盖·布林 -> 就读于 ->` `斯坦福大学`'
- en: 'LLMs on Amazon Bedrock can be employed for accurate and scalable entity extraction,
    facilitating the creation of comprehensive knowledge graphs from diverse data
    sources, such as news articles, scientific publications, or social media posts.
    These knowledge graphs can power various applications, including question answering
    systems, recommendation engines, and decision support tools. Here are some examples:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Bedrock上的LLM可用于准确和可扩展的实体提取，促进从多样化的数据源（如新闻文章、科学出版物或社交媒体帖子）创建全面的知识图谱。这些知识图谱可以支持各种应用，包括问答系统、推荐引擎和决策支持工具。以下是一些示例：
- en: '**Biomedical and scientific literature analysis**: Entity extraction is particularly
    valuable in the biomedical and scientific domains, where vast amounts of unstructured
    text data are generated through research publications, clinical notes, and other
    sources. Identifying and classifying entities such as genes, proteins, diseases,
    and chemical compounds can enable researchers and healthcare professionals to
    quickly navigate and extract insights from this wealth of information.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生物医学和科学文献分析**：在生物医学和科学领域，实体提取特别有价值，因为这些领域通过研究出版物、临床笔记和其他来源产生了大量非结构化文本数据。识别和分类诸如基因、蛋白质、疾病和化学化合物等实体，可以使研究人员和医疗保健专业人员快速导航并从这些丰富的信息中提取见解。'
- en: LLMs in Amazon Bedrock can be fine-tuned on domain-specific datasets to achieve
    high accuracy in extracting biomedical and scientific entities. These models can
    assist in literature review processes, drug discovery pipelines, and the development
    of knowledge bases for precision medicine and personalized healthcare.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亚马逊Bedrock中的LLM可以在特定领域的数据集上进行微调，以实现提取生物医学和科学实体的高精度。这些模型可以帮助进行文献综述过程、药物发现流程以及精准医疗和个性化医疗的知识库开发。
- en: '**BI and competitive analysis**: In the business world, entity extraction can
    be leveraged for competitive analysis, market research, and BI applications. By
    extracting entities such as company names, product names, and industry-specific
    terms from news articles, social media posts, and other online sources, businesses
    can gain valuable insights into their competitors, market trends, and customer
    sentiment.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商业智能和竞争分析**：在商业领域，实体提取可以用于竞争分析、市场研究和商业智能应用。通过从新闻文章、社交媒体帖子和其他在线来源中提取公司名称、产品名称和行业特定术语等实体，企业可以对其竞争对手、市场趋势和客户情绪获得有价值的见解。'
- en: Amazon Bedrock APIs can be coupled with **BI platforms** (**BIPs**) and analytics
    tools, enabling real-time entity extraction and analysis of vast amounts of unstructured
    data. This can empower data-driven decision-making, strategic planning, and the
    identification of new business opportunities.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亚马逊Bedrock API可以与**商业智能平台**（**BIps**）和分析工具结合使用，实现大量非结构化数据的实时实体提取和分析。这可以促进数据驱动决策、战略规划和识别新的商业机会。
- en: '**Social media monitoring and sentiment analysis**: Social media platforms
    generate a constant stream of user-generated content, containing valuable information
    about public opinion, trends, and sentiment toward various entities, such as brands,
    products, or public figures. Entity extraction plays a crucial role in social
    media monitoring and sentiment analysis by identifying the relevant entities within
    this unstructured data.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社交媒体监控和情感分析**：社交媒体平台产生大量用户生成内容，包含有关公众舆论、趋势以及对各种实体（如品牌、产品或公众人物）的情感的有价值信息。实体提取在社交媒体监控和情感分析中发挥着关键作用，通过识别这些非结构化数据中的相关实体。'
- en: LLMs in Amazon Bedrock can be employed to accurately extract entities from social
    media posts, enabling sentiment analysis and opinion mining around these entities.
    This can provide businesses with valuable insights into customer feedback, brand
    perception, and potential issues or opportunities, allowing them to respond proactively
    and shape their marketing and communication strategies accordingly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Bedrock中的LLMs可以用于从社交媒体帖子中准确提取实体，从而实现围绕这些实体的情感分析和意见挖掘。这可以为业务提供有关客户反馈、品牌认知以及潜在问题或机会的宝贵见解，使他们能够积极应对并相应地调整其营销和沟通策略。
- en: In this section, we covered industrial applications applicable in the context
    of entity extraction. Keep in mind that the number of these use cases can increase
    exponentially as we uncover more diverse scenarios across different industries.
    Now, let us learn how to leverage Amazon Bedrock for entity extraction use cases.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了适用于实体提取背景下的工业应用。请记住，随着我们在不同行业中发现更多多样化的场景，这些用例的数量可以呈指数级增长。现在，让我们学习如何利用Amazon
    Bedrock进行实体提取用例。
- en: Entity extraction with Amazon Bedrock
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Bedrock的实体提取
- en: At its core, entity extraction with GenAI involves providing a prompt that instructs
    the model to identify and classify relevant entities within a given text input.
    The key is constructing prompts that are clear, consistent, and provide enough
    examples for the model to understand the desired behavior.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，使用GenAI进行实体提取涉及提供提示，指导模型在给定的文本输入中识别和分类相关实体。关键在于构建清晰、一致且提供足够示例的提示，以便模型理解期望的行为。
- en: The Amazon Bedrock service, with the ability to invoke LLMs in a serverless
    manner, provides a scalable and cost-effective solution for entity extraction.
    This service allows developers to leverage pre-trained models or fine-tune them
    on custom datasets, enabling tailored entity extraction for specific domains or
    use cases.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Bedrock服务，能够以无服务器的方式调用LLMs，为实体提取提供可扩展且成本效益高的解决方案。此服务允许开发者利用预训练模型或在其自定义数据集上进行微调，从而实现针对特定领域或用例的定制实体提取。
- en: Structuring prompts for entity extraction
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化实体提取提示
- en: 'When designing prompts for entity extraction tasks, it’s essential to provide
    clear instructions and examples to the model. A well-structured prompt typically
    includes the following components:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计实体提取任务的提示时，向模型提供清晰的指示和示例至关重要。一个结构良好的提示通常包括以下组件：
- en: '`Identify and classify the following entities in the` `given text`.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`在给定的文本中识别和分类以下实体。`'
- en: '`Person`, `Organization`, `Location`, and so on.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Person`，`Organization`，`Location`等等。'
- en: '**Example inputs and outputs**: Include one or more examples of input text
    with the corresponding entities annotated. This helps the model understand the
    desired output format and learn from real-world instances.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例输入和输出**：包括一个或多个带有相应实体标注的输入文本示例。这有助于模型理解期望的输出格式并从现实世界的实例中学习。'
- en: 'The following is an example prompt:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例提示：
- en: '`''''''`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`''''''`'
- en: '`: Identify and classify the following entities in the` `given text:`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`: 在给定的文本中识别和分类以下实体：`'
- en: '`Entity Types: Person,` `Organization, Location`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`实体类型：Person，Organization，Location`'
- en: '`: "Michael Jordan, the legendary basketball player for the Chicago Bulls,
    announced his retirement from the NBA after an` `illustrious career."`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`: "迈克尔·乔丹，芝加哥公牛队的传奇篮球运动员，在辉煌的职业生涯后宣布退役。"`'
- en: '`The output looks` `like this:`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出看起来像这样：`'
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Let''s look at` `another example:`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`让我们再看一个例子：`'
- en: '`: "Apple Inc., the tech giant based in Cupertino, California, unveiled its
    latest iPhone model at a` `press event."`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`: "苹果公司，位于加利福尼亚州库比蒂诺的科技巨头，在新闻发布会上发布了其最新的iPhone型号。"`'
- en: '`The output looks` `like this:`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出看起来像这样：`'
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`''''''`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`''''''`'
- en: Let’s explore these use cases through a code example and generate an output
    by invoking an Anthropic Claude 3 Sonnet FM on Amazon Bedrock.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个代码示例来探索这些用例，并通过在Amazon Bedrock上调用Anthropic Claude 3 Sonnet FM来生成输出。
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please ensure that you have the required libraries, such as `boto3`, installed
    to run the code. If not, please install the library using the `pip install boto3`
    command in your editor.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您已安装所需的库，例如`boto3`，以便运行代码。如果没有，请在您的编辑器中使用`pip install boto3`命令安装库。
- en: Additionally, ensure that you have enabled access to the models available on
    Amazon Bedrock. For further documentation on model access on Bedrock, please visit
    https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保您已启用对Amazon Bedrock上可用的模型访问权限。有关Bedrock上模型访问的进一步文档，请访问https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html。
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s a sample output from the FM:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是FM的一个示例输出：
- en: '![Figure 8.1 – Sample output](img/B22045_08_01.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 示例输出](img/B22045_08_01.jpg)'
- en: Figure 8.1 – Sample output
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 示例输出
- en: While this basic structure works for simple cases, more advanced prompting techniques
    are needed for robust, production-level entity extraction.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种基本结构适用于简单情况，但更高级的提示技术对于稳健、生产级别的实体提取是必需的。
- en: Incorporating context and domain knowledge
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合上下文和领域知识
- en: Entity extraction scenarios often benefit from contextual information and domain-specific
    knowledge. By providing relevant background or domain-specific details within
    the prompt, you can enhance the model’s understanding and improve its ability
    to accurately identify entities.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 实体提取场景通常受益于上下文信息和领域特定知识。在提示中提供相关的背景或领域特定细节，可以增强模型的理解并提高其准确识别实体的能力。
- en: 'Here’s an example prompt with context:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个带有上下文的示例提示：
- en: '[PRE3] [PRE4]'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3] [PRE4]'
- en: '[Athlete: Serena Williams], [Athlete: Venus Williams], [Tournament: Grand Slam],
    [Tournament: Australian Open], [Sport: tennis]'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[运动员：塞雷娜·威廉姆斯], [运动员：维纳斯·威廉姆斯], [赛事：大满贯], [赛事：澳大利亚公开赛], [运动：网球]'
- en: '[PRE5]` [PRE6]`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5]` [PRE6]`'
- en: 'In *Figure 8**.2*, the code sample for the preceding use case is depicted.
    It’s important to note that the code does not explicitly mention the installed
    libraries. It is assumed that users have already pre-installed the required Python
    packages and libraries, as detailed in the previous code sample:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图8*.2中，展示了前一个用例的代码示例。需要注意的是，代码并未明确提及已安装的库。假设用户已经预先安装了之前代码示例中详细说明的所需Python包和库：
- en: '![Figure 8.2 – Prompting Amazon Bedrock FM for entity extraction with contextual
    information](img/B22045_08_02.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 使用上下信息提示Amazon Bedrock FM进行实体提取](img/B22045_08_02.jpg)'
- en: Figure 8.2 – Prompting Amazon Bedrock FM for entity extraction with contextual
    information
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 使用上下信息提示Amazon Bedrock FM进行实体提取
- en: 'It might produce favorable output for certain FMs based on the input instructions.
    However, in other scenarios, it has the potential to generate hallucinated or
    irrelevant additional information, as demonstrated in *Figure 8**.3*. Therefore,
    employing few-shot prompting can be advantageous for entity extraction in such
    cases:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能会根据输入指令为某些FM生成有利的输出。然而，在其他情况下，它有可能生成幻觉或无关的额外信息，如*图8*.3所示。因此，在这种情况下使用少样本提示对于实体提取是有益的：
- en: '![Figure 8.3 – AI21 Labs J2 Jumbo Instruct FM output](img/B22045_08_03.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – AI21 Labs J2 Jumbo Instruct FM输出](img/B22045_08_03.jpg)'
- en: Figure 8.3 – AI21 Labs J2 Jumbo Instruct FM output
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – AI21 Labs J2 Jumbo Instruct FM输出
- en: Leveraging few-shot learning
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用少样本学习
- en: As you are aware, few-shot learning involves providing the model with a small
    number of labeled examples during training or inference. This approach can be
    particularly effective for entity extraction tasks, as it allows the model to
    learn from a limited set of high-quality examples and generalize to new, unseen
    data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，少样本学习涉及在训练或推理期间向模型提供少量标记示例。这种方法对于实体提取任务尤其有效，因为它允许模型从有限的高质量示例中学习并推广到新的、未见过的数据。
- en: 'Here’s an example prompt with few-shot learning:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个带有少样本学习的示例提示：
- en: '[PRE7] [PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7] [PRE8]'
- en: '[Company: Microsoft], [Product: Windows 11], [Location: Redmond], [Location:
    Washington]'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[公司：微软], [产品：Windows 11], [地点：雷德蒙德], [地点：华盛顿州]'
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Company: Alphabet Inc.], [Company: Google], [Location: Iowa], [Location: Nevada]'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[公司：Alphabet Inc.], [公司：Google], [地点：爱荷华州], [地点：内华达州]'
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Company: Samsung Electronics], [Product: Galaxy S22], [Location: South Korea]'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[公司：三星电子], [产品：Galaxy S22], [地点：韩国]'
- en: '[PRE11]` [PRE12]`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE11]` [PRE12]`'
- en: 'Let’s craft a code sample for the preceding use case and invoke the Amazon
    Titan model on Amazon Bedrock:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为前面的用例编写一个代码示例，并在Amazon Bedrock上调用Amazon Titan模型：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Executing the preceding code generates the following output, as shown in *Figure
    8**.4*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的代码会生成以下输出，如图**8.4**所示：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Figure 8.4 – Generated output from Amazon Titan FM](img/B22045_08_04.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – Amazon Titan FM生成的输出](img/B22045_08_04.jpg)'
- en: Figure 8.4 – Generated output from Amazon Titan FM
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – Amazon Titan FM生成的输出
- en: Therefore, in this example, the prompt offers a set of labeled instances to
    assist the model in understanding the entity extraction task within the technology
    domain. Through the utilization of few-shot learning, the model can proficiently
    generalize to unfamiliar input text, all while upholding a high level of accuracy.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个例子中，提示提供了一组标记实例，以帮助模型理解技术领域内的实体提取任务。通过利用少量样本学习，模型可以熟练地泛化到不熟悉的输入文本，同时保持高精度。
- en: Iterative refinement and evaluation
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代优化和评估
- en: Prompt engineering constitutes an iterative process that frequently necessitates
    refinement and evaluation. As you explore various prompts and techniques, it’s
    vital to assess the model’s performance through automatic model evaluation or
    human evaluation methods, as elaborated upon in [*Chapter 11*](B22045_11.xhtml#_idTextAnchor207).
    Through careful analysis of the model’s outputs and identifying areas for enhancement,
    you can iteratively refine your prompts, thereby augmenting the overall accuracy
    of your entity extraction system.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 提示工程是一个迭代过程，通常需要优化和评估。在探索各种提示和技术时，通过自动模型评估或人工评估方法评估模型的性能至关重要，如第11章所述。通过仔细分析模型的输出并确定改进领域，您可以迭代地优化您的提示，从而提高实体提取系统的整体准确性。
- en: 'Take a look at the following example of model analysis and refinement:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下模型分析和优化的示例：
- en: '`''''''`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`''''''`'
- en: '`:`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`:`'
- en: '`: Identify and classify entities in the` `given text.`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`: 识别和分类给定文本中的实体。`'
- en: '`Entity Types: Person,` `Organization, Location`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`实体类型：人物，组织，位置`'
- en: '`: "Elon Musk, the CEO of Tesla Inc., announced plans to build a new Gigafactory
    in` `Austin, Texas."`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`: "Elon Musk，特斯拉公司的首席执行官，宣布计划在` `Austin, Texas` `建设一个新的超级工厂。"`'
- en: '`The output looks` `like this:`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出看起来是这样的：`'
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`: The model correctly identified the person and organization entities but
    missed the` `location "Texas."`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`: 模型正确地识别了人物和组织实体，但遗漏了` `位置 "Texas."`'
- en: '`:`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`:`'
- en: '`: Identify and classify entities in the given text, including nested or` `multi-word
    entities.`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`: 识别和分类给定文本中的实体，包括嵌套或` `多词实体。`'
- en: '`Entity Types: Person,` `Organization, Location`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`实体类型：人物，组织，位置`'
- en: '`: "Elon Musk, the CEO of Tesla Inc., announced plans to build a new Gigafactory
    in` `Austin, Texas."`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`: "Elon Musk，特斯拉公司的首席执行官，宣布计划在` `Austin, Texas` `建设一个新的超级工厂。"`'
- en: '`The output looks` `like this:`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出看起来是这样的：`'
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`''''''`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`''''''`'
- en: By refining the prompt to include instructions for handling nested or multi-word
    entities, the model’s performance improved, correctly identifying the location
    as Austin, Texas.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过细化提示以包括处理嵌套或多词实体的说明，模型的性能得到了提升，正确地将位置识别为Austin, Texas。
- en: We encourage users to run the provided code on Amazon Bedrock to extract pertinent
    entities using the Claude 3 model and the `Messages` API. As mentioned earlier,
    please ensure that access to these models on Amazon Bedrock is enabled. For further
    documentation on accessing models on Bedrock, please visit [https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html](https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励用户在Amazon Bedrock上运行提供的代码，使用Claude 3模型和`Messages` API提取相关实体。如前所述，请确保在Amazon
    Bedrock上启用对这些模型的访问。有关在Bedrock上访问模型的进一步文档，请访问[https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html](https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html)。
- en: Note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Make sure you have the `boto3` library installed, as explained in the previous
    chapters. If not, please install the latest version using the following command:
    `pip` `install boto3`.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装`boto3`库，如前几章所述。如果没有，请使用以下命令安装最新版本：`pip install boto3`。
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Printing `response_body` as shown in the preceding snippet might yield the
    following output, as expected:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前面的代码片段打印`response_body`可能会得到以下预期的输出：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Hence, by leveraging effective prompt engineering techniques with Amazon Bedrock,
    such as providing clear instructions, relevant examples, and handling ambiguity,
    GenAI models can be guided to perform high-quality entity extraction across several
    use cases and different domains. As with any AI application, it requires careful
    design, testing, and refinement to build a truly production-ready system.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过利用 Amazon Bedrock 中的有效提示工程技术，例如提供清晰的指令、相关的示例和解决歧义，GenAI 模型可以被引导在多个用例和不同领域执行高质量实体提取。与任何
    AI 应用一样，它需要仔细的设计、测试和改进，以构建一个真正适合生产的系统。
- en: As LLMs continue to grow in size and complexity, their capabilities in entity
    extraction are expected to further improve, enabling more accurate and robust
    solutions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 随着大型语言模型（LLMs）的规模和复杂性的持续增长，它们在实体提取方面的能力预计将进一步提高，从而实现更准确和稳健的解决方案。
- en: Ongoing research also focuses on integrating external knowledge sources such
    as knowledge graphs or ontologies into LLMs for entity extraction. By embedding
    structured knowledge into the model’s architecture or training regimen, these
    methods have the potential to enrich the model’s comprehension of entities and
    their interconnections, thereby potentially enhancing both performance and interpretability.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 持续的研究还集中在将外部知识源（如知识图谱或本体）集成到 LLMs 中以进行实体提取。通过将这些结构化知识嵌入到模型的架构或训练方案中，这些方法有可能丰富模型对实体及其相互关系的理解，从而有可能提高性能和可解释性。
- en: 'Check the following AWS blog showcasing the integration of **intelligent document
    processing** (**IDP**) in the context of entity extraction automation using AWS
    AI/ML services such as Amazon Textract with Amazon Bedrock and LangChain: [https://aws.amazon.com/blogs/machine-learning/intelligent-document-processing-with-amazon-textract-amazon-bedrock-and-langchain/](https://aws.amazon.com/blogs/machine-learning/intelligent-document-processing-with-amazon-textract-amazon-bedrock-and-langchain/).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下 AWS 博客，展示了在 AWS AI/ML 服务（如 Amazon Textract 与 Amazon Bedrock 和 LangChain）的背景下，使用智能文档处理（**IDP**）进行实体提取自动化的集成：[https://aws.amazon.com/blogs/machine-learning/intelligent-document-processing-with-amazon-textract-amazon-bedrock-and-langchain/](https://aws.amazon.com/blogs/machine-learning/intelligent-document-processing-with-amazon-textract-amazon-bedrock-and-langchain/)。
- en: This solution proves particularly beneficial for handling handwritten or scanned
    documents, encompassing the extraction of pertinent data from various file formats
    such as PDF, PNG, TIFF, and JPEG, regardless of the document layout. The Amazon
    Textract service facilitates the automatic extraction of text, handwriting, and
    data from such scanned documents.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此解决方案特别有益于处理手写或扫描文档，包括从各种文件格式（如 PDF、PNG、TIFF 和 JPEG）中提取相关数据，无论文档布局如何。Amazon
    Textract 服务简化了此类扫描文档中文本、手写和数据的自动提取。
- en: 'Consequently, this solution capitalizes on the strengths of each component:
    Amazon Textract for precise data extraction, Amazon Bedrock for streamlined data
    processing pipelines, and LangChain for seamlessly integrating LLMs into the workflow.
    Overall, the blog post offers a pragmatic solution for automating document processing
    tasks, underscoring the advantages of leveraging AWS services and open source
    frameworks such as LangChain to develop intelligent applications. Therefore, it
    holds substantial potential for diverse document processing scenarios, providing
    dynamic adaptability to evolving data patterns.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，此解决方案利用了每个组件的优势：Amazon Textract 用于精确数据提取，Amazon Bedrock 用于简化的数据处理管道，LangChain
    用于无缝集成 LLMs 到工作流程中。总的来说，该博客文章提供了一个实用的解决方案，用于自动化文档处理任务，强调了利用 AWS 服务和开源框架（如 LangChain）开发智能应用的优点。因此，它具有在多样化的文档处理场景中提供动态适应不断变化的数据模式的大量潜力。
- en: 'Additional examples of entity extraction with Bedrock have been added here:
    [https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/04_entity_extraction.ipynb](https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/04_entity_extraction.ipynb).
    Users are encouraged to run and execute the code cells to gain a much better understanding
    of entity extraction using Amazon Bedrock for GenAI use cases.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处还添加了使用 Bedrock 进行实体提取的更多示例：[https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/04_entity_extraction.ipynb](https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/04_entity_extraction.ipynb)。鼓励用户运行和执行代码单元，以更好地理解使用
    Amazon Bedrock 进行 GenAI 用例的实体提取。
- en: Now that you have grasped the concepts of entity extraction in more detail,
    we will dive into more code generation scenarios in the universe of Amazon Bedrock.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经更详细地掌握了实体提取的概念，我们将深入亚马逊Bedrock宇宙中的更多代码生成场景。
- en: Code generation with LLMs – unleashing the power of AI-driven development
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LLM进行代码生成——释放AI驱动开发的潜力
- en: As the field of AI continues to evolve, one of the most exciting and promising
    areas is the use of LLMs for code generation, especially in the case of developer
    productivity gains. Customers can leverage state-of-the-art LLMs available on
    Amazon Bedrock to generate high-quality code, revolutionizing the way developers
    approach software development.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 随着人工智能领域的持续发展，最令人兴奋和有前景的领域之一是使用LLM进行代码生成，尤其是在提高开发者生产力的方面。客户可以利用亚马逊Bedrock上提供的最先进的LLM生成高质量的代码，从而彻底改变开发者对待软件开发的方式。
- en: The code generation process
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码生成过程
- en: 'The code generation process with Amazon Bedrock is straightforward and user-friendly.
    Developers can interact with the platform through a web-based interface or via
    an API, as discussed in the previous chapters. The process typically involves
    the following steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用亚马逊Bedrock进行代码生成的过程简单直观，开发者可以通过基于网页的界面或API与平台交互，如前几章所述。该过程通常包括以下步骤：
- en: '**Problem description**: The developer provides a natural language description
    of the desired functionality or task that they want the code to perform.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**问题描述**：开发者提供对所需功能或任务的天然语言描述，该代码需要执行。'
- en: '**Context and constraints**: The developer can optionally provide additional
    context, such as programming language preferences, coding styles, or specific
    libraries or frameworks to be used.'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**上下文和约束**：开发者可以选择提供额外的上下文，例如编程语言偏好、编码风格或特定库或框架的使用。'
- en: '**LLM code generation**: Amazon Bedrock’s LLMs analyze the problem description
    and any provided context and generate the corresponding code.'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LLM代码生成**：亚马逊Bedrock的LLM分析问题描述和提供的任何上下文，并生成相应的代码。'
- en: '**Code refinement**: The generated code can be iteratively refined through
    additional prompts or feedback from the developer, allowing for a collaborative
    and interactive process.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码优化**：生成的代码可以通过额外的提示或开发者的反馈进行迭代优化，从而实现协作和交互式的过程。'
- en: '**Code integration**: The final generated code can be seamlessly integrated
    into the developer’s project or code base.'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码集成**：最终生成的代码可以无缝集成到开发者的项目或代码库中。'
- en: Benefits of code generation with Amazon Bedrock
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用亚马逊Bedrock进行代码生成的益处
- en: 'Leveraging LLMs for code generation offers numerous benefits to developers,
    including the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 利用大型语言模型（LLM）进行代码生成为开发者带来了众多好处，包括以下几方面：
- en: '**Increased productivity**: With Amazon Bedrock, developers can quickly generate
    code for various tasks and functionalities, reducing the time and effort required
    for manual coding'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高生产力**：借助亚马逊Bedrock，开发者可以快速生成用于各种任务和功能的代码，减少手动编码所需的时间和精力。'
- en: '**Improved code quality**: The code generated by Amazon Bedrock’s LLMs can
    provide high-quality outputs, adhering to best practices and coding standards
    based on the iterative refinement of the prompts'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高代码质量**：亚马逊Bedrock的LLM生成的代码可以提供高质量的输出，遵循基于提示迭代优化的最佳实践和编码标准。'
- en: '**Reduced errors**: LLMs can help reduce the likelihood of common coding errors,
    such as syntax errors or logical flaws, by generating correct and coherent code
    with prompt engineering'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少错误**：通过提示工程生成正确且连贯的代码，LLM可以帮助减少常见编码错误的可能性，例如语法错误或逻辑错误。'
- en: '**Exploration and prototyping**: Bedrock enables developers to rapidly explore
    and prototype different ideas and approaches, facilitating more efficient and
    creative problem-solving'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索和原型设计**：Bedrock使开发者能够快速探索和原型设计不同的想法和方法，从而促进更高效和更具创造性的问题解决。'
- en: '**Accessibility**: By leveraging natural language descriptions and FMs for
    code generation purposes (Llama, Claude, Titan, Mistral, and so on), Amazon Bedrock
    makes code generation more accessible to developers with varying levels of expertise
    or backgrounds'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易用性**：通过利用自然语言描述和用于代码生成的FM（如Llama、Claude、Titan、Mistral等），亚马逊Bedrock使得代码生成对具有不同技术水平或背景的开发者更加容易。'
- en: Limitations and considerations
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 局限性和考虑因素
- en: 'While LLM-based code generation offers numerous advantages, it is important
    to be aware of their limitations and considerations:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基于LLM的代码生成提供了许多优势，但了解其局限性和考虑因素同样重要：
- en: '**Specialized domain knowledge**: LLMs may not always generate code that requires
    highly specialized domain knowledge or complex algorithms. Human expertise and
    review may still be necessary in certain cases.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专业领域知识**：LLMs可能并不总是生成需要高度专业领域知识或复杂算法的代码。在某些情况下，仍然可能需要人类的专家知识和审查。'
- en: '**Security and compliance**: Generated code should be thoroughly reviewed and
    tested to ensure it adheres to security best practices and any relevant compliance
    requirements.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和合规性**：生成的代码应彻底审查和测试，以确保其符合安全最佳实践和任何相关的合规性要求。'
- en: '**Integration and maintenance**: Generated code may need to be adapted and
    maintained over time as requirements or dependencies change.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成和维护**：生成的代码可能需要随着时间的推移进行适应和维护，因为需求或依赖关系发生变化。'
- en: '**Ethical considerations**: As with any AI system, it is crucial to ensure
    LLMs are used responsibly and ethically, considering potential biases or unintended
    consequences.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**伦理考量**：与任何AI系统一样，确保LLMs负责任和道德地使用至关重要，考虑到潜在的偏见或意外后果。'
- en: Use cases and examples
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例和示例
- en: 'Amazon Bedrock’s code generation capabilities can be applied to a wide range
    of use cases across various domains and programming languages. Some examples include
    the following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Bedrock的代码生成能力可以应用于各个领域和编程语言的广泛用例。以下是一些示例：
- en: '**Web development**: Developers can generate code using Bedrock for web applications,
    APIs, or user interfaces using languages such as JavaScript, Python, or Ruby.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web开发**：开发者可以使用Bedrock使用JavaScript、Python或Ruby等语言生成用于Web应用程序、API或用户界面的代码。'
- en: '**Data processing and analysis**: Developers can leverage Bedrock to write
    code for data manipulation, analysis, and visualization tasks using languages
    such as Python or R.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据处理和分析**：开发者可以利用Bedrock使用Python或R等语言编写数据操作、分析和可视化任务的代码。'
- en: '**Mobile app development**: Bedrock can be utilized to generate code for mobile
    applications using languages such as Swift, Kotlin, or React Native.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动应用开发**：Bedrock可用于使用Swift、Kotlin或React Native等语言生成移动应用的代码。'
- en: '**Embedded systems and Internet of Things (IoT) devices**: Developers can create
    code for embedded systems, microcontrollers, or IoT devices using languages such
    as C, C++, or Rust with the assistance of Bedrock models.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式系统和物联网（IoT）设备**：开发者可以在Bedrock模型的帮助下，使用C、C++或Rust等语言创建嵌入式系统、微控制器或IoT设备的代码。'
- en: '**Scientific computing**: Bedrock can aid in writing code for scientific simulations,
    numerical calculations, or data processing tasks using languages such as MATLAB,
    Julia, or Fortran through its code generation features.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**科学计算**：Bedrock可以通过其代码生成功能帮助编写使用MATLAB、Julia或Fortran等语言进行科学模拟、数值计算或数据处理任务的代码。'
- en: Now, let’s look at a few examples of code generation, debugging, or code transformation
    use cases with Amazon Bedrock.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些使用Amazon Bedrock进行代码生成、调试或代码转换用例的例子。
- en: Prompt engineering examples with Amazon Bedrock
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon Bedrock的提示工程示例
- en: 'Here is a sample prompt given to a Claude 3 Sonnet model within Amazon Bedrock
    to adopt the role of a Python developer and perform a code generation task:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Amazon Bedrock中给Claude 3 Sonnet模型提供的示例提示，以采用Python开发者的角色并执行代码生成任务：
- en: '[PRE19]python block. After writing the code, carefully check for errors. If
    errors exist, list them within <error> tags and provide a new corrected version.
    If no errors, write "CHECKED: NO ERRORS" within <[PRE20]'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE19]python代码块。在编写代码后，仔细检查错误。如果存在错误，请在<error>标签内列出它们，并提供一个新的修正版本。如果没有错误，请在<error>标签内写上“CHECKED:
    NO ERRORS”。'
- en: Import the respective libraries
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入相应的库
- en: import boto3
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: import boto3
- en: import botocore
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: import botocore
- en: import os
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: import os
- en: import json
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: import json
- en: import sys
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: import sys
- en: '#Create client side Amazon Bedrock connection with Boto3 library'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '#使用Boto3库创建客户端Amazon Bedrock连接'
- en: region = os.environ.get("AWS_REGION")
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: region = os.environ.get("AWS_REGION")
- en: bedrock_runtime = boto3.client(service_name='bedrock-runtime',region_name=region)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: bedrock_runtime = boto3.client(service_name='bedrock-runtime',region_name=region)
- en: 'Adding prompt example here:'
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在此处添加提示示例：
- en: 'prompt_data = """Human: You are an expert Python developer tasked with coding
    a web scraper for an experienced developer. The scraper should extract data from
    multiple web pages and store the results in a SQLite database. Write clean, high-quality
    Python code for this task, including necessary imports. Do not write anything
    before the [PRE21]'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'prompt_data = """Human: 你是一位经验丰富的 Python 开发者，需要编写一个用于经验丰富的开发者的网络爬虫。爬虫应从多个网页中提取数据，并将结果存储在
    SQLite 数据库中。为这个任务编写干净、高质量的 Python 代码，包括必要的导入。不要在 [PRE21]'
- en: 'We won’t dive into the entirety of the output generated, but provided in *Figure
    8**.5* is a code snippet generated as a result of invoking a Claude 3 Sonnet model
    via Amazon Bedrock API with the preceding prompt:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨生成的全部输出，但 *图 8**.5* 中提供了一个由 Amazon Bedrock API 通过前面的提示调用 Claude 3 Sonnet
    模型生成的代码片段：
- en: '![Figure 8.5 – Output code snippet generated by invoking Claude 3 Sonnet model
    via Amazon Bedrock](img/B22045_08_05.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 通过 Amazon Bedrock 调用 Claude 3 Sonnet 模型生成的输出代码片段](img/B22045_08_05.jpg)'
- en: Figure 8.5 – Output code snippet generated by invoking Claude 3 Sonnet model
    via Amazon Bedrock
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 通过 Amazon Bedrock 调用 Claude 3 Sonnet 模型生成的输出代码片段
- en: '*Figure 8**.6* shows yet another example of a code debugging use case, leveraging
    a Llama 2 Chat 13B model available on Amazon Bedrock within the chat playground:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.6* 展示了另一个代码调试用例的示例，利用 Amazon Bedrock 上的 Llama 2 Chat 13B 模型在聊天沙盒中进行：'
- en: '![Figure 8.6 – Code debugging using Llama 2 Chat 13B model on Amazon Bedrock](img/B22045_08_06.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 在 Amazon Bedrock 上使用 Llama 2 Chat 13B 模型进行代码调试](img/B22045_08_06.jpg)'
- en: Figure 8.6 – Code debugging using Llama 2 Chat 13B model on Amazon Bedrock
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 在 Amazon Bedrock 上使用 Llama 2 Chat 13B 模型进行代码调试
- en: 'Now, let’s take a look at a code translation scenario. Here’s an example prompt
    for a code translation use case with a Mixtral 8X7B instruct model on Amazon Bedrock,
    followed by a generated output:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一个代码翻译场景。以下是在 Amazon Bedrock 上使用 Mixtral 8X7B 指令模型的一个代码翻译用例的示例提示，随后是生成的输出：
- en: '[PRE22]python'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE22]python'
- en: 'class BankAccount:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'class BankAccount:'
- en: 'def __init__(self, initial_balance=0):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, initial_balance=0):'
- en: self.balance = initial_balance
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: self.balance = initial_balance
- en: 'def deposit(self, amount):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'def deposit(self, amount):'
- en: self.balance += amount
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: self.balance += amount
- en: 'def withdraw(self, amount):'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'def withdraw(self, amount):'
- en: 'if self.balance >= amount:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'if self.balance >= amount:'
- en: self.balance -= amount
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: self.balance -= amount
- en: 'else:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Insufficient funds")
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: print("Insufficient funds")
- en: 'def check_balance(self):'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 'def check_balance(self):'
- en: return self.balance
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: return self.balance
- en: '[PRE23]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The translated JavaScript code output looks like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译后的 JavaScript 代码输出如下所示：
- en: '[PRE24]javascript'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]javascript'
- en: // Define the BankAccount class
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义 BankAccount 类
- en: class BankAccount {
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: class BankAccount {
- en: // Initialize the balance property with an initial_balance of 0
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用初始余额 0 初始化余额属性
- en: constructor(initial_balance = 0) {
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(initial_balance = 0) {
- en: this.balance = initial_balance;
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: this.balance = initial_balance;
- en: '}'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Deposit method to add amount to the balance
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: // 存款方法，向余额中添加金额
- en: deposit(amount) {
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: deposit(amount) {
- en: this.balance += amount;
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: this.balance += amount;
- en: '}'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Withdraw method to subtract amount from the balance if there are sufficient
    funds
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: // 提款方法，如果余额充足则从余额中减去金额
- en: withdraw(amount) {
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: withdraw(amount) {
- en: if (this.balance >= amount) {
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: if (this.balance >= amount) {
- en: this.balance -= amount;
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: this.balance -= amount;
- en: '} else {'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: console.log("Insufficient funds");
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Insufficient funds");
- en: '}'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Check_balance method to return the current balance
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: // 检查余额方法，返回当前余额
- en: check_balance() {
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: check_balance() {
- en: return this.balance;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: return this.balance;
- en: '}'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE25]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this example, the prompt provides context about the code’s purpose and the
    original Python code and instructs Code Llama to translate it to JavaScript. The
    model is asked to maintain clear variable naming and proper indentation and add
    comments to explain non-trivial logic or language-specific constructs.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，提示提供了关于代码目的和原始 Python 代码的上下文，并指示 Code Llama 将其翻译成 JavaScript。模型被要求保持清晰的变量命名和适当的缩进，并添加注释来解释非平凡逻辑或语言特定的结构。
- en: 'The generated output shows the translated JavaScript code, with the class structure
    and methods translated correctly while preserving the original functionality.
    After translating the code, the model has carefully reviewed its work and indicated
    `CHECKED: NO ERRORS` within `<error>` tags, signifying that the translation is
    correct and error-free.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '生成的输出显示了翻译后的 JavaScript 代码，类结构和方法的翻译正确，同时保留了原始功能。在翻译代码后，模型仔细审查了其工作，并在 `<error>`
    标签内指示 `CHECKED: NO ERRORS`，表示翻译正确且无错误。'
- en: This example demonstrates how a prompt can be crafted to guide Code Llama (or
    similar AI code models) to perform code translation tasks while ensuring the translated
    code is verified and correct. Note that it is always a best practice to perform
    a human evaluation of the generated output to verify the accuracy of these models
    and rectify any issues.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 本例演示了如何构建一个提示来引导Code Llama（或类似的AI代码模型）执行代码翻译任务，同时确保翻译后的代码经过验证且正确。请注意，始终对生成的输出进行人工评估，以验证这些模型的准确性并纠正任何问题。
- en: Users are encouraged to try these examples within the Amazon Bedrock playground
    or leveraging Amazon Bedrock APIs with several other models such as Amazon Titan,
    Cohere Command, Meta Llama, and alternate variations of Anthropic Claude or Mistral
    models to test the generated output and refine it further.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励用户在Amazon Bedrock沙盒中尝试这些示例，或者利用Amazon Bedrock API与Amazon Titan、Cohere Command、Meta
    Llama以及其他Anthropic Claude或Mistral模型的变体等几个其他模型一起测试生成的输出并进一步优化。
- en: 'Users are further invited to explore this code sample where Amazon Bedrock
    LLMs are being invoked with zero-shot prompting to generate SQL and Python programs:
    [https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/01_code_generation_w_bedrock.ipynb](https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/01_code_generation_w_bedrock.ipynb).'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还被邀请探索这个代码示例，其中使用了Amazon Bedrock LLMs进行零样本提示以生成SQL和Python程序：[https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/01_code_generation_w_bedrock.ipynb](https://github.com/aws-samples/amazon-bedrock-workshop/blob/main/01_Text_generation/01_code_generation_w_bedrock.ipynb)。
- en: Entity extraction with GenAI represents a significant step forward in our ability
    to extract valuable insights from unstructured text data. By leveraging the power
    of LLMs and combining them with rule-based techniques, hybrid approaches offer
    accurate, scalable, and domain-adaptable solutions for a wide range of applications.
    As we continue to push the boundaries of these areas, we can expect to unlock
    new opportunities for knowledge discovery, decision support, and data-driven innovation
    across various industries and domains.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 利用GenAI进行实体提取代表了我们从非结构化文本数据中提取有价值见解能力的重要进步。通过利用LLM的力量并将它们与基于规则的技巧相结合，混合方法为广泛的适用范围提供了准确、可扩展和领域自适应的解决方案。随着我们继续推动这些领域的边界，我们有望在各个行业和领域中解锁知识发现、决策支持和数据驱动创新的新机会。
- en: The field of LLM-based code generation is also rapidly evolving, and Amazon
    Bedrock is at the forefront of this exciting development. As LLMs become more
    advanced and the available training data continues to grow, the capabilities and
    applications of code generation will expand further. Amazon Bedrock represents
    a significant step forward in the realm of code generation, empowering developers
    to leverage the power of LLMs to increase productivity, improve code quality,
    and explore new ideas more efficiently. As this technology continues to mature,
    it has the potential to revolutionize the way software is developed and open up
    new possibilities for innovation across various industries and domains.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 基于LLM的代码生成领域也在迅速发展，Amazon Bedrock处于这一激动人心的发展的最前沿。随着LLM变得更加先进，可用的训练数据持续增长，代码生成的功能和应用将得到进一步扩展。Amazon
    Bedrock在代码生成领域迈出了重要的一步，使开发者能够利用LLM的力量提高生产力，改善代码质量，并更有效地探索新想法。随着这项技术的不断成熟，它有可能彻底改变软件开发的方式，并为各个行业和领域开辟新的创新可能性。
- en: Summary
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter commenced with an in-depth exploration of entity extraction, uncovering
    its fundamentals, techniques, and best practices. It then transitioned to showcasing
    potential industrial applications of entity extraction, highlighting real-world
    use cases that demonstrate the power of unlocking valuable insights from unstructured
    data across various sectors.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从深入探讨实体提取开始，揭示了其基础、技术和最佳实践。然后转向展示实体提取在工业应用中的潜力，突出展示了在各个行业从非结构化数据中解锁有价值见解的实际用例。
- en: Recognizing the pivotal role of prompt engineering, the chapter further provided
    a comprehensive guide to crafting effective prompts, equipping readers with strategies
    and guidelines to optimize entity extraction performance. Shifting gears, the
    discussion then centered on the transformative potential of code generation with
    LLMs on Amazon Bedrock. We gained insights into the capabilities and limitations
    of LLMs in driving AI-based development, as well as methodologies for leveraging
    these cutting-edge models.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到提示工程的关键作用，本章进一步提供了一份关于如何制作有效提示的全面指南，为读者提供了优化实体提取性能的策略和指导方针。转换话题，讨论随后聚焦于在亚马逊Bedrock上使用LLM进行代码生成的变革潜力。我们深入了解了LLM在推动基于AI的开发方面的能力和局限性，以及利用这些前沿模型的方法。
- en: Finally, the chapter culminated with a compelling exploration of practical use
    cases for code generation, demonstrating how this technology can accelerate innovation
    and boost productivity across various domains. Through real-world examples and
    case studies, readers witnessed firsthand the profound impact of code generation
    on streamlining development processes and unleashing new possibilities. In the
    following chapter, we are going to explore image generation use cases with Amazon
    Bedrock, along with its potential applications. Stay tuned!
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本章以对代码生成实际用例的引人入胜的探索作为结尾，展示了这项技术如何加速创新并提高各个领域的生产力。通过现实世界的例子和案例研究，读者亲眼见证了代码生成在简化开发流程和释放新可能性方面的深远影响。在下一章中，我们将探讨亚马逊Bedrock的图像生成用例及其潜在应用。敬请期待！
