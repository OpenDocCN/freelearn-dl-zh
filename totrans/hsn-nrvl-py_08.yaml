- en: Novelty Search Optimization Method
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新颖性搜索优化方法
- en: In this chapter, you will learn about an advanced solution search optimization
    method that can be used to create autonomous navigator agents. This method is
    called **Novelty Search** (**NS**). The main idea of this method is that an objective
    function can be defined using the novelty of the behavior exposed by the solver
    agent, rather than the distance to a goal in the solution search space.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解一种高级的解决方案搜索优化方法，该方法可用于创建自主导航代理。这种方法被称为**新颖性搜索**（**NS**）。这种方法的主要思想是，可以使用求解代理暴露的行为的新颖性来定义目标函数，而不是在解决方案搜索空间中到目标的距离。
- en: In this chapter, you will learn how to use NS-based search optimization methods
    with the neuroevolution algorithm to train successful maze navigation agents.
    By conducting the experiments presented in this chapter, you will also see that
    the NS method is superior to the conventional goal-oriented search optimization
    method for specific tasks. By the end of this chapter, you will have learned the
    basics of the NS optimization method. You will be able to define the fitness function
    using the novelty score and apply it to solve practical tasks related to your
    work or experiments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用基于NS的搜索优化方法与神经进化算法一起训练成功的迷宫导航代理。通过本章中展示的实验，你还将看到NS方法在特定任务中优于传统的以目标为导向的搜索优化方法。到本章结束时，你将掌握NS优化方法的基础知识。你将能够使用新颖性得分来定义适应度函数，并将其应用于解决与你的工作或实验相关的实际任务。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The NS optimization method
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NS优化方法
- en: NS implementation basics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NS实现基础
- en: The fitness function with the novelty score
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有新颖性得分的适应度函数
- en: Experimenting with a simple maze configuration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试简单的迷宫配置
- en: Experimenting with a hard-to-solve maze configuration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试难以解决的迷宫配置
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following technical requirements should be met in order to carry out the
    experiments described in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行本章中描述的实验，应满足以下技术要求：
- en: Windows 8/10, macOS 10.13 or newer, or modern Linux
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 8/10, macOS 10.13或更高版本，或现代Linux
- en: Anaconda Distribution version 2019.03 or newer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda Distribution版本2019.03或更高版本
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter6)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter6)找到
- en: The NS optimization method
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NS优化方法
- en: The main idea behind NS is to reward the novelty of the produced solution rather
    than its progress to the final goal. This idea is inspired by natural evolution.
    When looking for a successful solution, it is not always obvious the exact steps
    that should be taken. Natural evolution continuously produces novel forms, with
    different phenotypes trying to exploit the surrounding environment and adapt to
    the changes. This has allowed an explosion of life forms on Earth and ignited
    qualitative leaps forward in the evolution of life. The same process allowed life
    forms to leave the sea and conquer the land. The extraordinary genesis of eukaryotes
    became the source of all higher life forms on the planet. All these are examples
    of rewarding novelty during evolution. At the same time, there is no clear objective
    or final goal in natural evolution.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: NS背后的主要思想是奖励产生解决方案的新颖性，而不是其向最终目标的进展。这个想法受到了自然进化的启发。在寻找成功解决方案时，并不总是明显应该采取的确切步骤。自然进化不断地产生新颖的形式，不同的表型试图利用周围环境并适应变化。这导致了地球上生命形式的爆炸性增长，并推动了生命进化的质变。同样的过程使得生命形式从海洋中离开并征服陆地。真核生物的非凡起源成为了地球上所有更高级生命形式的源头。所有这些都是进化过程中奖励新颖性的例子。同时，在自然进化中，没有明确的目标或最终目标。
- en: As you learned in the previous chapter, conventional goal-oriented fitness functions
    are susceptible to local optima traps. This pathology produces pressure on the
    evolutionary process to converge to a single solution that often gets stuck in
    dead ends in a search space, with no local steps available that can improve the
    performance of the fitness function any further. Thus, as a result, the successful
    solution is left unexplored.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上一章所学，传统的以目标为导向的适应度函数容易陷入局部最优陷阱。这种病理学给进化过程施加压力，使其收敛到单一解，这通常会导致搜索空间中的死胡同，没有局部步骤可以进一步提高适应度函数的性能。因此，结果是，成功的解决方案未被探索。
- en: On the other hand, NS drives evolution toward diversity. This drive helps the
    neuroevolution process to produce successful solver agents, even for tasks with
    a deceptive landscape of the fitness function values, such as maze navigation
    problems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，NS推动进化朝着多样性发展。这种推动力有助于神经进化过程产生成功的求解器代理，即使对于具有欺骗性适应度函数值的任务，如迷宫导航问题也是如此。
- en: A real-life example of such a deceptive problem is the task of navigating around
    an unknown city. If you visit old cities with irregular road maps, you need to
    use a different strategy to get from point A to point B than in modern cities
    with regular grid patterns of roads. In modern cities, traveling along roads that
    point in the direction of your destination is sufficient, but navigation in old
    cities is much more tricky. Heading toward the destination often leads you to
    dead ends (deceptive local optima). You need to employ a more explorative approach,
    trying novel and often counterintuitive directions that seemingly lead you away
    from your destination. So, finally, after another twist in the road, you reach
    your destination. However, note that from the start it was not obvious which turns
    to take based only on the distance to the final destination (that is, the goal-oriented
    fitness score). The stepping stones leading to the ultimate solution are often
    placed in counterintuitive places that seem to lead you away, but ultimately help
    you to succeed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个这样的欺骗性问题的现实例子是绕过一个未知城市的导航任务。如果你访问的是带有不规则道路图的古老城市，你需要使用与具有规则道路网格图案的现代城市不同的策略从A点到B点。在现代城市中，沿着指向目的地的道路行驶就足够了，但在古老城市中导航要复杂得多。朝向目的地前进往往会导致死胡同（欺骗性局部最优）。你需要采用更探索性的方法，尝试新颖且往往反直觉的方向，这些方向似乎会将你引离目的地。所以，最终，在道路的又一转弯后，你到达了目的地。然而，请注意，仅根据到达最终目的地的距离（即目标导向的适应度分数）来决定转弯并不明显。通向最终解决方案的垫脚石往往放置在看似将你引离的地方，但最终帮助你成功。
- en: Please refer to [Chapter 1](f59c6396-55e5-4495-95c0-7af9a42c2f20.xhtml), *Overview
    of Neuroevolution Methods*, for more details about NS optimization.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第1章](f59c6396-55e5-4495-95c0-7af9a42c2f20.xhtml)，*神经进化方法概述*，以获取更多关于NS优化的详细信息。
- en: NS implementation basics
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NS实现基础
- en: 'NS implementation should include data structure to hold information about the
    explored novel item and the structure to maintain and manage a list of novel items.
    In our implementation, this functionality is encapsulated in three Python classes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: NS实现应包括用于存储关于已探索新颖项的信息的数据结构，以及用于维护和管理新颖项列表的结构。在我们的实现中，此功能封装在三个Python类中：
- en: '`NoveltyItem`: The structure that holds all relevant information about the
    novelty score of the individual that was evaluated during the evolution.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoveltyItem`：一个结构，用于存储在进化过程中评估的个体的所有相关信息。'
- en: '`NoveltyArchive`: The class that maintains a list of the relevant `NoveltyItem`
    instances. It provides methods to evaluate the novelty scores of individual genomes
    compared to the already collected `NoveltyItem` instances and the current population.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoveltyArchive`：一个类，用于维护相关`NoveltyItem`实例的列表。它提供了评估与已收集的`NoveltyItem`实例和当前种群相比的个体基因组新颖性分数的方法。'
- en: '`ItemsDistance`: The auxiliary structure that holds the distance (novelty)
    metric value between the two `NoveltyItem` instances. It is used in calculations
    of the average k-nearest neighbor distance, which is used as a novelty score value
    in our experiment.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ItemsDistance`：一个辅助结构，用于存储两个`NoveltyItem`实例之间的距离（新颖性）度量值。它在计算平均k最近邻距离时使用，该距离用作实验中的新颖性分数值。'
- en: For implementation details, refer to the `novelty_archive.py` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实现细节，请参考 [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py)
    文件。
- en: NoveltyItem
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoveltyItem
- en: 'This class is the main structure that holds information about the novelty score
    of each individual evaluated during the evolution. It has several fields that
    store relevant information, as we can see in the source code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是主要结构，用于存储在进化过程中评估的每个个体的新颖度分数信息。它有几个字段用于存储相关信息，正如我们在源代码中所看到的：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `generation` field holds the ID of the generation at which this item was
    created. Basically, `genomeId` is the ID of the genome that was evaluated, and `fitness`
    is a goal-oriented fitness score of the evaluated genome (the proximity to the
    maze exit). Furthermore, `novelty` is the novelty score given to the evaluated
    genome, as we discuss in the next section, and `data` is a list of data points
    representing the coordinates of specific maze positions that the maze solver agent
    visited during a simulation. This data list is used to estimate the distance between
    the current and other novelty items. The calculated distance after that can be
    used to estimate the novelty score associated with the specific novelty item.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`generation` 字段持有创建此项时的代数 ID。基本上，`genomeId` 是被评估的基因组的 ID，而 `fitness` 是被评估基因组的（目标导向的）适应度分数（接近迷宫出口的距离）。此外，`novelty`
    是分配给被评估基因组的新颖度分数，正如我们在下一节中讨论的，而 `data` 是表示迷宫求解代理在模拟过程中访问的特定迷宫位置坐标的数据点列表。此数据列表用于估计当前新颖项与其他新颖项之间的距离。计算出的距离之后可以用来估计与特定新颖项相关联的新颖度分数。'
- en: NoveltyArchive
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoveltyArchive
- en: 'This class maintains a list of relevant novelty items and provides methods
    to evaluate the novelty scores of individual genomes as well as of the entire
    population of genomes as a whole. It has the following fields defined in the constructor:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类维护了一个相关新颖项的列表，并提供方法来评估单个基因组以及整个基因组种群的新颖度分数。它在构造函数中定义了以下字段：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that `novelty_metric` is a reference to the function that can be used to
    estimate the novelty metric or distance between two novelty items.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`novelty_metric` 是一个指向函数的引用，该函数可以用来估计新颖度度量或两个新颖项之间的距离。
- en: Furthermore, `novelty_threshold` defines the current minimal novelty score value
    of `NoveltyItem` to be eligible for adding to this archive. This value is dynamic
    and is changed during execution to maintain the size of the archive within particular
    limits; `novelty_floor` is the minimal possible value of `novelty_threshold`.
    The `items_added_in_generation` and `time_out` fields are used to schedule the
    dynamics of the change of the `novelty_threshold` values. The `neighbors` field is
    a default number of *k-nearest neighbors* to use for a novelty score estimation.
    The generation is the current evolutionary generation. Basically, `novel_items` is
    a list of all the relevant `NoveltyItem` instances collected so far, and `fittest_items` is
    the list of the novel items having the maximal goal-oriented fitness score among
    all.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`novelty_threshold` 定义了当前 `NoveltyItem` 需要达到的最小新颖度分数值，才能被添加到这个档案中。这个值是动态的，在执行过程中会改变，以保持档案的大小在特定的限制范围内；`novelty_floor`
    是 `novelty_threshold` 的最小可能值。`items_added_in_generation` 和 `time_out` 字段用于安排 `novelty_threshold`
    值变化的动态性。`neighbors` 字段是用于新颖度分数估计的默认的 *k-最近邻* 数量。`generation` 是当前的进化代数。基本上，`novel_items`
    是到目前为止收集到的所有相关 `NoveltyItem` 实例的列表，而 `fittest_items` 是在所有新颖项中具有最大目标导向适应度分数的新颖项列表。
- en: 'The dynamics of the `novelty_threshold` field are determined by the following
    source code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`novelty_threshold` 字段的动态性由以下源代码确定：'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding function is invoked at the end of each evolutionary generation
    to adjust the `novelty_threshold` field value for the next generation. As already
    mentioned, this value determines how many novelty items should be added to the
    archive in the next generation. The dynamic adjustment of this property is necessary
    to match the difficulty of finding novel solutions using the NS method over time.
    At the beginning of the evolution, there were immense opportunities to find novel
    solutions with high novelty scores, since only a few paths were explored in the
    maze. However, toward the end of the evolution, it becomes harder because fewer
    unexplored paths remain. To compensate for this, if a novel path is not found
    in the last 2,500 evaluations (`10` generations), the `novelty_threshold` value
    is lowered by 5%. On the other hand, to decrease the speed of adding a new `NoveltyItem`
    to the archive in the early stages of evolution, the `novelty_threshold` value
    is raised by 20%, if over four items were added in the last generation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个进化代结束时调用前面的函数来调整下一代的`novelty_threshold`字段值。如前所述，此值决定了下一代应添加多少创新项目到存档中。随着时间的推移，使用NS方法找到新颖解决方案的难度动态调整此属性是必要的。在进化的开始，由于在迷宫中只探索了少数路径，因此找到具有高创新度分数的新颖解决方案的机会巨大。然而，在进化的后期，由于剩余未探索的路径较少，这变得更为困难。为了补偿这一点，如果在最后2,500次评估（`10`代）中没有找到新颖路径，则将`novelty_threshold`值降低5%。另一方面，为了在进化的早期阶段降低将新的`NoveltyItem`添加到存档的速度，如果在上一代中添加了超过四个项目，则将`novelty_threshold`值提高20%。
- en: 'The following source code shows how the `novelty_threshold` value is used to
    determine which `NoveltyItem` to add:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码显示了如何使用`novelty_threshold`值来确定要添加哪个`NoveltyItem`：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code uses a function to evaluate the novelty score, which we will
    describe in the next section to estimate the novelty of the provided genome. If
    this function is invoked in the update archive mode (`only_fitness = False`),
    then the obtained novelty score (`result`) is compared with the current value
    of the `novelty_threshold` field. Based on the results of the comparison, the
    `NoveltyItem` object is added to the `NoveltyArchive` object or not. Furthermore,
    the `ArchiveSeedAmount` constant is introduced to do initial seeding of the archive
    with the `NoveltyItem` instances at the beginnings of the evolution when the archive
    is still empty.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用一个函数来评估创新度分数，我们将在下一节中描述该函数，以估计提供的基因组的新颖性。如果在此更新存档模式（`only_fitness = False`）下调用此函数，则获得的创新度分数（`result`）与当前`novelty_threshold`字段的值进行比较。根据比较结果，将`NoveltyItem`对象添加到`NoveltyArchive`对象中或不添加。此外，引入了`ArchiveSeedAmount`常量，在进化开始时存档仍然为空时，使用`NoveltyItem`实例对存档进行初始播种。
- en: The fitness function with the novelty score
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有创新度分数的适应度函数
- en: 'Now we have defined the basic principles behind the NS method, we need to find
    a way to integrate it into the definition of the fitness function that will be
    used to guide the neuroevolution process. In other words, we need to define the
    novelty metric that can capture the amount of novelty that is introduced by a
    particular solver agent during the evolutionary process. There are several characteristics
    that can be used as novelty metrics for a solver agent:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了NS方法背后的基本原理，我们需要找到一种方法将其整合到将用于指导神经进化过程的适应度函数定义中。换句话说，我们需要定义一个创新度指标，可以捕捉特定解算器代理在进化过程中引入的创新量。对于解算器代理，可以使用以下几种特征作为创新度指标：
- en: The novelty of the solver genotype structure—the *structural* novelty
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解算器基因型结构的创新性——*结构*创新性
- en: The stepping stones found in the search space of the solution—the *behavioral*
    novelty
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在解决方案搜索空间中找到的垫脚石——*行为*创新性
- en: Our primary interest in this chapter is to create a successful maze navigator
    agent. To successfully navigate through the maze, the agent must pay equal attention
    to most places in the maze. Such behavior can be achieved by rewarding agents
    who choose a unique exploration path compared to already known paths from the
    previously tested agents. In terms of the types of the previously mentioned novelty
    metrics, this means that we need to define a fitness function using a metric built
    around *behavioral* novelty.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中的主要兴趣是创建一个成功的迷宫导航代理。为了成功地在迷宫中导航，代理必须对迷宫中的大多数地方给予同等关注。这种行为可以通过奖励选择与之前测试代理已知路径相比独特探索路径的代理来实现。就之前提到的创新度指标类型而言，这意味着我们需要定义一个使用围绕*行为*创新性构建的适应度函数。
- en: The novelty score
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新颖分数
- en: The behavioral space of the maze solver agent is defined by its trajectory through
    the maze while running the maze-solving simulation. An effective novelty score
    implementation needs to compute the sparseness at any point in such a behavioral
    space. Thus, any area with a denser cluster of visited points of behavior space
    is less novel, giving fewer rewards to the solver agent.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫求解代理的行为空间由其在迷宫求解模拟中运行的轨迹定义。有效的创新分数实现需要在行为空间的任何点计算稀疏性。因此，任何具有更密集的行为空间访问点簇的区域都较少创新，给予求解代理更少的奖励。
- en: 'As mentioned in [Chapter 1](f59c6396-55e5-4495-95c0-7af9a42c2f20.xhtml), *Overview
    of Neuroevolution Methods*, the most straightforward measure of sparseness at
    a point is the average distance from it to the *k-nearest neighbors*. The sparse
    areas have higher distance values, and the denser areas have lower distance values,
    correspondingly. The following formula gives the sparseness at point ![](img/7b7415d4-4282-432b-90c8-72d43185f310.png) of
    the behavioral space:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [第 1 章](f59c6396-55e5-4495-95c0-7af9a42c2f20.xhtml) 中所述，*神经进化方法概述*，一个点稀疏性的最直接度量是从它到
    *k 个最近邻* 的平均距离。稀疏区域具有更高的距离值，而密集区域具有更低的距离值，相应地。以下公式给出了行为空间中点 ![行为空间点](img/7b7415d4-4282-432b-90c8-72d43185f310.png)
    的稀疏性：
- en: '![](img/d7a917c6-ca46-4d78-ad0d-26539f91feb6.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7a917c6-ca46-4d78-ad0d-26539f91feb6.png)'
- en: Note ![](img/35180e98-48b5-40c9-9d97-e521f6cd8278.png) is the ![](img/ef6e7309-eb38-4d1b-a9a2-b50ad4650c8f.png)
    nearest neighbor of ![](img/2b96ddaa-406a-4b2c-8add-7650fdd462d2.png) as calculated
    by the distance (novelty) metric, ![](img/ab46e610-e35c-413f-90a8-35554b3386a8.png).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 ![注意](img/35180e98-48b5-40c9-9d97-e521f6cd8278.png) 是根据距离（新颖性）度量 ![距离度量](img/ab46e610-e35c-413f-90a8-35554b3386a8.png)
    计算的 ![最近邻](img/ef6e7309-eb38-4d1b-a9a2-b50ad4650c8f.png) ![最近邻](img/2b96ddaa-406a-4b2c-8add-7650fdd462d2.png)
    的最近邻。
- en: The calculated by the above formula sparseness at the particular point in the
    behavioral space is a novelty score that can be used by the fitness function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述公式计算的行为空间特定点的稀疏性是一个可以由适应度函数使用的创新分数。
- en: 'The Python code to find a novelty score is defined in the following function:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 查找新颖分数的 Python 代码定义在以下函数中：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding function has the following major implementation parts:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数的主要实现部分如下：
- en: First, we check whether the `_novelty_avg_knn` function provided with the argument
    holds a list of all the genomes in the current population. In that case, we start
    by populating the list of distances between behavioral characteristics of all
    genomes in the population, including all the `NoveltyItem` objects from `NoveltyArchive`.
    Otherwise, we use the provided novelty item (`item`) to find distances between
    it and all `NoveltyItem` objects from `NoveltyArchive`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们检查提供的 `_novelty_avg_knn` 函数的参数是否包含当前种群中所有基因组的列表。如果是这样，我们就开始填充种群中所有基因组的特征行为之间的距离列表，包括来自
    `NoveltyArchive` 的所有 `NoveltyItem` 对象。否则，我们使用提供的新颖性项（`item`）来找到它与 `NoveltyArchive`
    中所有 `NoveltyItem` 对象之间的距离。
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, we sort a list of distances in ascending order to have the smallest
    distances first because we are interested in the points that are closest to the
    provided novel item in the behavioral space:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将距离列表按升序排序，以便首先得到最小的距离，因为我们对在行为空间中与提供的创新项最接近的点感兴趣：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we initialize all the intermediate variables necessary for the k-nearest
    neighbors scores calculation, and test whether the number of distance values collected
    in the previous step is higher than the `ArchiveSeedAmount` constant value:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们初始化计算 k 个最近邻分数所必需的所有中间变量，并测试在之前步骤中收集的距离值数量是否高于 `ArchiveSeedAmount` 常量值：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can check whether the length of the found distances list is less than
    the number of neighbors that we are asked to test against (`neighbors`). If so,
    we update the value of the related variable:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以检查找到的距离列表的长度是否小于我们要求测试的邻居数量（`neighbors`）。如果是这样，我们更新相关变量的值：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After all the local variables are set to the correct values, we can start the
    cycle that collects the sum of all distances and weights for each connection:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有局部变量都设置为正确值之后，我们可以开始收集每个连接的所有距离和权重的总和的循环：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the preceding cycle exits because of the calculated weight value exceeding
    the specified number of neighbors, or if we already iterated over all distance
    values in the `distances` list, we are ready to calculate the novelty score for
    a given item as an average distance to the k-nearest neighbors:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当先前的循环由于计算出的权重值超过指定的邻居数量而退出，或者如果我们已经迭代过`distances`列表中的所有距离值，我们就准备好计算给定项目的新颖性得分，作为到k个最近邻的平均距离：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The function then returns the estimated novelty score value.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 函数随后返回估计的新颖性得分值。
- en: For more implementation details, see the `novelty_archive.py` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多实现细节，请参阅[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/novelty_archive.py)文件。
- en: The novelty metric
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新颖性度量
- en: The novelty metric is a measure of how different the current solution is from
    the already known ones. It is used to calculate the novelty score when estimating
    the distance from the current point in the behavioral space to its *k-nearest
    neighbors*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 新颖性度量是衡量当前解决方案与已知解决方案之间差异的指标。它用于在估计行为空间中当前点到其**k个最近邻**的距离时计算新颖性得分。
- en: 'In our experiment, the novelty metric measuring the difference in the behavior
    of the two agents is determined by the *item-wise distance* between the two trajectory
    vectors (one vector per agent). The trajectory vector contains the coordinates
    of the positions that were visited by the maze navigator agent during a simulation.
    The following formula gives the definition of the metric:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实验中，测量两个代理行为差异的新颖性度量是通过两个轨迹向量之间的**项距离**（每个代理一个向量）确定的。轨迹向量包含迷宫导航代理在模拟期间访问的位置坐标。以下公式给出了该度量的定义：
- en: '![](img/a61b41a8-e092-4cca-8df7-32742826e827.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![img/a61b41a8-e092-4cca-8df7-32742826e827.png]'
- en: Note ![](img/cbb7ac77-245c-4bb4-9e7d-415935eedb59.png) is the size of the trajectory
    vector, and ![](img/ead12303-fc2d-4a5d-9a5c-10b6fa003efc.png) and ![](img/e8429ede-3355-4312-9e8c-8485763b8fda.png)
    are the values at position ![](img/15e07257-bf42-4ea2-ab1a-83055f6410b7.png) of
    the compared trajectory vectors, ![](img/dacf8b1f-2342-42a5-903b-1a8168bcd0a6.png)
    and ![](img/a2692ece-78af-4644-a161-903af7653c63.png).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 ![img/cbb7ac77-245c-4bb4-9e7d-415935eedb59.png] 是轨迹向量的大小，而 ![img/ead12303-fc2d-4a5d-9a5c-10b6fa003efc.png]
    和 ![img/e8429ede-3355-4312-9e8c-8485763b8fda.png] 是比较轨迹向量 ![img/15e07257-bf42-4ea2-ab1a-83055f6410b7.png]
    和 ![img/dacf8b1f-2342-42a5-903b-1a8168bcd0a6.png] 在位置 ![img/15e07257-bf42-4ea2-ab1a-83055f6410b7.png]
    的值。
- en: In a maze navigation experiment, we are mostly interested in the final position
    of the solver agent. Thus, the trajectory vector may only contain the final coordinates
    of the agent after completing all the necessary steps in the maze navigation simulation or
    when the maze exit is found.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在迷宫导航实验中，我们主要对求解代理的最终位置感兴趣。因此，轨迹向量可能仅包含代理在完成迷宫导航模拟中所有必要步骤后的最终坐标，或者在找到迷宫出口时。
- en: 'The Python code for the novelty metric value estimation is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对新颖性度量值估计的Python代码：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code takes two novelty items and finds the *item-wise* distance
    between the two trajectory vectors holding the positions of a corresponding solver
    agent during the simulation of a maze navigation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码取两个新颖性项，并找到在迷宫导航模拟中持有相应求解代理位置的两个轨迹向量之间的**项距离**。
- en: Fitness function
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适应度函数
- en: The fitness function used in the experiments described in this chapter directly
    applies the novelty score defined previously as the fitness value of the genome.
    As a result, the neuroevolution process tries to maximize the novelty of the produced
    individuals by using such a fitness function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所述实验中使用的适应度函数直接将先前定义的新颖性得分作为基因的适应度值。因此，神经进化过程试图通过使用这种适应度函数来最大化产生个体的新颖性。
- en: 'For different tasks in this experiment, we use various fitness factors:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验的不同任务中，我们使用各种适应度因素：
- en: The novelty score is used to guide the neuroevolution process (solution search
    optimization). It is assigned as a fitness value to each genome and used for genome
    evaluation during generations of evolution.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新颖性得分用于指导神经进化过程（解决方案搜索优化）。它被分配为每个基因的适应度值，并在进化的各个世代中用于基因评估。
- en: The goal-oriented fitness score (the distance to the maze exit) obtained from
    the maze simulator is used to test if the ultimate goal has been achieved (that
    is, the maze exit has been found)—also, this value is recorded for performance
    evaluation of each solver agent.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从迷宫模拟器获得的目标导向适应度分数（到达迷宫出口的距离）用于测试是否实现了最终目标（即找到了迷宫出口）——此外，此值也记录下来以评估每个求解代理的性能。
- en: 'The source code of the fitness values evaluation is presented in two functions:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 健身值评估的源代码包含两个函数：
- en: The callback function to evaluate the fitness scores of the entire population
    (`eval_genomes`)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估整个种群适应度分数的回调函数（`eval_genomes`）
- en: The function to evaluate individual genomes through the maze solving simulation
    ( `eval_individual`)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过迷宫解决模拟评估单个基因的函数（`eval_individual`）
- en: The population fitness evaluation function
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 种群适应度评估函数
- en: The fitness evaluation function is a callback function that is registered with
    the NEAT-Python library, allowing this library to run an evaluation of population
    genomes against specific conditions of a particular task that needs to be solved.
    We implement this function to evaluate each genome in the current population using
    the maze-solving task, and to use the obtained novelty score as a genome fitness
    value.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 适应度评估函数是一个回调函数，它注册到NEAT-Python库中，允许该库运行对种群基因进行评估，以解决特定任务的特定条件。我们实现此函数以使用迷宫解决任务评估当前种群中的每个基因，并使用获得的新颖性分数作为基因的适应度值。
- en: The NEAT-Python library doesn't allow us to send any signals about task completion
    from the callback function other than by specifying the specific fitness score
    value of the winner genome. This fitness value must be higher than the fitness
    threshold in the NEAT-Python hyperparameter configuration. However, with the NS
    algorithm, it is not possible to accurately estimate the upper limit of the novelty
    score that can be achieved by the winner genome. Furthermore, the winner genome
    can have the novelty score value that is below the values obtained by genomes
    earlier in the evolution process, when the solution search space was not so thoroughly
    explored.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: NEAT-Python库不允许我们从回调函数发送任何关于任务完成的信号，除了指定获胜基因的特定适应度分数值。这个适应度值必须高于NEAT-Python超参数配置中的适应度阈值。然而，使用NS算法，无法准确估计获胜基因可以实现的新颖性分数的上限。此外，获胜基因的新颖性分数值可能低于在进化过程中，当解决方案搜索空间没有如此彻底探索时，早期获得的基因的值。
- en: Thus, given that the novelty score is assigned to genomes as their fitness values,
    we need to come up with a workaround that allows us to use the standard termination
    criteria defined by the NEAT-Python library. We do this by using a specific indicative
    novelty score value that is big enough to be encountered during normal algorithm
    execution. This value determines the termination criterion that is provided through
    the NEAT-Python hyperparameter configuration. We use `800000` as an indicative
    measure of the novelty score and its natural logarithm (about `13.59`) as the
    appropriate fitness threshold.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，鉴于新颖性分数被分配给基因作为它们的适应度值，我们需要想出一个解决方案，使我们能够使用NEAT-Python库定义的标准终止标准。我们通过使用一个足够大的特定指示性新颖性分数值来实现这一点，这个值在正常算法执行过程中可能会遇到。这个值决定了通过NEAT-Python超参数配置提供的终止标准。我们将`800000`用作新颖性分数及其自然对数（约`13.59`）作为适当的适应度阈值。
- en: 'The full source code of the function is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的完整源代码如下：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The significant parts of the implementation of the function are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 函数实现的显著部分如下：
- en: 'First, we create the dictionary to store evaluated novelty items (`n_items_map`)
    for each genome in the population, and cycle through all genomes in the population,
    evaluating their maze-solving performance:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建字典以存储评估后的新颖性项目（`n_items_map`），用于种群中每个基因，并遍历种群中的所有基因，评估它们的迷宫解决性能：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After that, we cycle through all genomes in the population one more time to
    assign fitness scores to the genomes using estimated novelty scores. The process
    of novelty score estimation uses the `NoveltyItem` objects collected in `n_items_map` in
    the first cycle (described earlier) during the maze-solving simulation:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们再次遍历种群中的所有基因，使用估计的新颖性分数为基因分配适应度分数。新颖性分数估计的过程使用在第一次循环（如前所述）中收集的`NoveltyItem`对象，在迷宫解决模拟期间：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, if a successful solver genome is found in the first cycle, we assign
    it with a fitness value equal to the indicative fitness score described earlier
    (`~13.59`):'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果在第一个循环中找到成功的解决基因组，我们将其分配一个等于前面描述的指示性适应度分数的适应度值（`~13.59`）：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Please note that we apply the natural logarithm to the obtained novelty score
    values and to the indicative novelty score to keep them in numerical proximity.
    As a result, we can properly render performance plots using statistics collected
    during the experiment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将获得的创新度分数值和指示性创新度分数应用自然对数，以保持它们在数值上的接近。因此，我们可以使用实验期间收集的统计数据正确地绘制性能图表。
- en: The individual fitness evaluation function
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个体适应度评估函数
- en: This function is an essential part of the population fitness evaluation, and
    it is invoked from the `eval_genomes` function, discussed earlier, to evaluate
    the maze-solving performance of each genome in the population.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数是种群适应度评估的重要组成部分，它通过前面讨论过的`eval_genomes`函数被调用，以评估种群中每个基因组的迷宫解决性能。
- en: 'The evaluation of the individual genome as a maze-solving agent through the
    maze navigation simulation is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过迷宫导航模拟评估个体基因组作为迷宫解决代理的情况如下：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s delve into the meaning of all the central parts of the implementation
    of the `eval_individual` function:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨`eval_individual`函数实现中所有核心部分的意义：
- en: 'First, we create the `NoveltyItem` object to hold information about the novelty
    score associated with a particular genome and save it under the `genome_id` key
    in the `n_items_map` dictionary:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个`NoveltyItem`对象来保存与特定基因组相关的创新度分数信息，并将其保存在`n_items_map`字典中的`genome_id`键下：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After that, we create a deep copy of the original maze environment to avoid
    side effects during the simulation, and create the control ANN from the provided
    genome:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们创建原始迷宫环境的深度副本以避免模拟期间的副作用，并从提供的基因组创建控制ANN：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, using a copy of the maze environment and the created control ANN, we execute
    the maze-solving simulation for a given number of simulation steps:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用迷宫环境的副本和创建的控制ANN，我们执行给定步数的迷宫解决模拟：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After the simulation is finished, the returned goal-based fitness score (proximity
    to the maze exit) and other simulation and genome parameters are stored in `AgentRecord`,
    which is then added to the record store:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模拟完成后，返回的基于目标的适应度分数（接近迷宫出口的距离）和其他模拟及基因组参数存储在`AgentRecord`中，然后将其添加到记录存储中：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we estimate the novelty score of the given genome if it is not a winner,
    and update the list of the fittest genomes in `NoveltyArchive` with `NoveltyItem`
    of the current genome, if appropriate:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果给定的基因组不是赢家，我们估计其创新度分数，并在适当的情况下，使用当前基因组的`NoveltyItem`更新`NoveltyArchive`中适应度最高的基因组列表：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this experiment, the fitness score of the genome is defined as two separate
    values, each serving a different purpose. The goal-oriented fitness score helps
    to test whether a solution has been found and collects useful performance statistics.
    The novelty-based fitness score guides the neuroevolution process in the direction
    of the maximal diversity of solver behavior, which means that the gradient of
    the solution search is directed toward exploring different behaviors, without
    any explicit objective.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，基因组的适应度分数定义为两个不同的值，每个值都服务于不同的目的。目标导向的适应度分数有助于测试是否找到了解决方案并收集有用的性能统计数据。基于创新度的适应度分数引导神经进化过程朝着解决行为最大多样性的方向发展，这意味着解决方案搜索的梯度被引导去探索不同的行为，而不存在任何明确的目标。
- en: For more details about the implementation, please refer to the `maze_experiment.py`
    file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py.](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实现的更多细节，请参阅[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py)文件。
- en: Experimenting with a simple maze configuration
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试简单的迷宫配置
- en: We start our experiments using a simple maze configuration similar to the one
    described in the previous chapter. However, instead of the goal-oriented objective
    function, we use the NS optimization method to guide the neuroevolution process.
    We hope that with Novelty Search method it will be possible to find a successful
    maze solver with fewer epochs of evolution.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与上一章中描述的类似的一个简单迷宫配置开始我们的实验。然而，我们不是使用以目标为导向的目标函数，而是使用NS优化方法来指导神经进化过程。我们希望使用新颖性搜索方法可以在更少的进化周期内找到成功的迷宫求解器。
- en: 'You can see the schema of the simple maze in the following plot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下图表中看到简单迷宫的架构：
- en: '![](img/f1a00fe6-4220-42ac-a268-9e614a672c5e.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f1a00fe6-4220-42ac-a268-9e614a672c5e.png)'
- en: The simple maze configuration
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 简单迷宫配置
- en: The maze configuration is the same as in the previous chapter. However, we need
    to adjust the corresponding NEAT hyperparameters to meet the specifications of
    the NS optimization method.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫配置与上一章相同。然而，我们需要调整相应的NEAT超参数以满足NS优化方法的要求。
- en: Hyperparameter selection
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超参数选择
- en: The objective function used in the experiments described in this chapter is
    based on a novelty metric that has no clear upper-boundary value. As a result,
    the fitness threshold value cannot be estimated precisely. Thus, to signal that
    the winning solution was found, we use an indicative value that is big enough
    to not be encountered during the normal algorithm execution.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所述实验中使用的目标函数基于一个没有明确上限值的创新度指标。因此，适应度阈值值无法精确估计。因此，为了表明找到了获胜的解决方案，我们使用一个足够大以至于在正常算法执行过程中不会遇到的指示值。
- en: 'We selected `800000` as the indicative novelty score value. However, to maintain
    the visual presentation of the fitness scores when plotting the results of an
    experiment, we scaled down the obtained novelty scores of the solver agents using
    the natural logarithm. Thus, the fitness threshold value used in the configuration
    file becomes `13.5`, which is a bit less than the maximum possible fitness score
    (`13.59`) to avoid issues with rounding float numbers. Also, we increase the population
    size from the value described in the previous chapter (`250`) to make the solution
    search space deeper because we need to examine the maximum number of unique places
    in the maze:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了`800000`作为指示性新颖度分数值。然而，为了在绘制实验结果时保持适应度分数的视觉表现，我们使用自然对数缩小了求解器代理获得的新颖度分数。因此，配置文件中使用的适应度阈值值变为`13.5`，略低于最大可能的适应度分数（`13.59`），以避免浮点数舍入的问题。此外，我们将种群大小从上一章中描述的值（`250`）增加到使解决方案搜索空间更深入，因为我们需要检查迷宫中最大数量的唯一位置：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We run more generations in each trial than we did in the experiment in the
    previous chapter. Therefore, we have increased the stagnation value to keep species
    around for longer:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个试验中，我们运行的代数比上一章实验中多。因此，我们将停滞值增加，以使物种保持更长时间：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: All other NEAT hyperparameters have similar values to the ones presented in
    the previous chapter. Please refer to the previous chapter for the rationales
    for selecting the specific hyperparameter values.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他NEAT超参数的值与上一章中展示的类似。请参考上一章了解选择特定超参数值的原因。
- en: The complete list of hyperparameters used in the experiment can be found in
    the `maze_config.ini` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_config.ini](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_config.ini).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 实验中使用的完整超参数列表可以在[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_config.ini](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_config.ini)的`maze_config.ini`文件中找到。
- en: Working environment setup
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作环境设置
- en: 'The working environment for the experiment should include all dependencies
    and can be created using Anaconda with the following commands:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 实验的工作环境应包括所有依赖项，并可以使用以下命令使用Anaconda创建：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: These commands create and activate a `maze_ns_neat` virtual environment with
    Python 3.5\. After that, the NEAT-Python library with version 0.92 is installed,
    along with other dependencies used by our visualization utilities.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令创建并激活了一个Python 3.5的`maze_ns_neat`虚拟环境。之后，安装了版本0.92的NEAT-Python库，以及我们可视化工具使用的其他依赖项。
- en: The experiment runner implementation
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验运行器实现
- en: The experiment runner implementation used in this chapter is similar for the
    most part to the one used in the previous chapter but has significant differences,
    which we will discuss in this section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的实验运行函数在大多数方面与上一章中使用的函数相似，但具有显著的不同之处，我们将在本节中讨论。
- en: The trials cycle
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 试验周期
- en: In this chapter, we introduce an upgrade to the experiment runner implementation.
    We implement support to run multiple trials sequentially until the solution is
    found. Such an upgrade dramatically simplifies working with the multiple experiment
    trials sequentially, especially taking into account that each trial can take a
    long time to execute.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了对实验运行函数实现的升级。我们实现了支持顺序运行多个试验直到找到解决方案的功能。这种升级极大地简化了顺序处理多个实验试验的工作，特别是考虑到每个试验可能需要很长时间来执行。
- en: 'The main cycle of the experiment runner now looks like this (see `__main__` in
    the `maze_experiment.py` script):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 实验运行函数的主循环现在看起来是这样的（参见`maze_experiment.py`脚本中的`__main__`）：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The cycle runs the `args.trials` number of experiment trials, where `args.trials`
    is provided by the user from the command-line.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 循环运行`args.trials`数量的实验试验，其中`args.trials`是由用户从命令行提供的。
- en: 'The first lines of the cycle create the `NoveltyArchive` object, which is a
    part of the Novelty Search algorithm. Later, during a specific trial, this object
    will be used to store all the relevant `NoveltyItems`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的前几行创建了一个`NoveltyArchive`对象，它是新颖性搜索算法的一部分。在特定的试验中，此对象将用于存储所有相关的`NoveltyItems`：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that `maze.maze_novelty_metric` is a reference to the function that is
    used to evaluate the novelty score of each solver agent.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`maze.maze_novelty_metric`是对用于评估每个求解代理新颖度分数的函数的引用。
- en: 'With the source code for this chapter, we provide implementations of two novelty
    metric functions:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的源代码中，我们提供了两个新颖性度量函数的实现：
- en: The item-wise distance novelty metric (`maze.maze_novelty_metric`)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐项距离新颖性度量（`maze.maze_novelty_metric`）
- en: The Euclidean distance novelty metric (`maze.maze_novelty_metric_euclidean`)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧几里得距离新颖性度量（`maze.maze_novelty_metric_euclidean`）
- en: However, in our experiments, we use the first implementation. The second implementation
    is intended for you to run additional experiments.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的实验中，我们使用第一种实现。第二种实现是为了让你运行额外的实验。
- en: The experiment runner function
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验运行函数
- en: The runner function has many similarities to the runner function introduced
    in the previous chapter, but, at the same time, it has unique features that are
    specific to the NS optimization algorithm.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 运行函数与上一章中介绍的运行函数有许多相似之处，但同时也具有特定于NS优化算法的独特功能。
- en: 'Here, we consider the most significant parts of the implementation:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们考虑实现中的最显著部分：
- en: 'It starts with selecting a specific seed value for a random number generator,
    based on the current system time:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它从为随机数生成器选择一个特定的种子值开始，这个种子值基于当前系统时间：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After that, it loads the NEAT algorithm configuration and creates an initial
    population of genomes:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，它加载NEAT算法配置并创建一个初始基因组种群：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To hold the intermediate results after each generation evaluation, we initialize
    a `trial_sim` global variable with the `MazeSimulationTrial` object.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在每代评估后保存中间结果，我们使用`MazeSimulationTrial`对象初始化一个名为`trial_sim`的全局变量。
- en: 'We use a global variable so it can be accessed by the fitness evaluation callback
    function (`eval_genomes(genomes, config)`) that is passed to the NEAT-Python framework:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个全局变量，以便它可以通过传递给NEAT-Python框架的适应度评估回调函数（`eval_genomes(genomes, config)`）进行访问：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also, traditionally, we register with the `Population` object the number of
    reporters to output algorithm results and to collect statistics:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，传统上，我们通过`Population`对象注册报告算法结果和收集统计信息的报告者数量：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now we are ready to run the NEAT algorithm over a specified number of generations
    and evaluate the results:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好在指定数量的代数上运行NEAT算法并评估结果：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After that, the collected statistics and novelty archive records can be visualized
    and saved to the filesystem:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，收集的统计数据和新颖性存档记录可以被可视化并保存到文件系统：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Finally, we perform additional visualization routines introduced in this chapter
    that visualize the path of the maze-solver agents through the maze.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们执行本章中介绍的其他可视化程序，这些程序可视化迷宫求解代理在迷宫中的路径。
- en: 'We do this by running a simulation of maze navigation against the controller
    ANN of the best solver agent found during the evolution. During this simulation
    run, all the path points visited by a solver agent are collected to be rendered
    later by the `draw_agent_path` function:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过运行迷宫导航模拟，与在进化过程中找到的最佳求解代理的控制器ANN进行对比来实现这一点。在这次模拟运行期间，所有由求解代理访问的路径点都被收集起来，稍后由`draw_agent_path`函数进行渲染：
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the end, the `run_experiment` function returns a Boolean value indicating
    whether a successful maze solver agent was found during the trial or not.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`run_experiment`函数返回一个布尔值，指示在试验期间是否找到了成功的迷宫求解代理。
- en: Please refer to the `run_experiment(config_file, maze_env, novelty_archive,
    trial_out_dir, args=None, n_generations=100, save_results=False, silent=False)`
    function in the `maze_experiment.py` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考位于[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/maze_experiment.py)的`maze_experiment.py`文件中的`run_experiment(config_file,
    maze_env, novelty_archive, trial_out_dir, args=None, n_generations=100, save_results=False,
    silent=False)`函数。
- en: Running the simple maze navigation experiment with NS optimization
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NS优化运行简单的迷宫导航实验
- en: Make sure you copy all related Python scripts and configuration files (`maze_config.ini`
    and `medium_maze.txt)` into the local directory from the online repository that
    can be found at: [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将所有相关的Python脚本和配置文件（`maze_config.ini`和`medium_maze.txt`）从在线仓库复制到本地目录，该仓库位于：[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter6/)。
- en: 'Now enter this directory, and execute the following command in the Terminal
    application:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进入这个目录，并在终端应用程序中执行以下命令：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Do not forget to activate the appropriate virtual environment with the following
    command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用以下命令激活适当的虚拟环境：
- en: '`conda activate maze_ns_neat`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda activate maze_ns_neat`'
- en: The preceding command runs 10 trials of the maze navigation experiment with
    the simple maze configuration loaded from the `medium_maze.txt` file. The neuroevolution
    algorithm evaluates `500` generations of maze solvers in each trial, using the
    NEAT configuration data loaded from the `maze_config.ini` file. The width and height parameters
    specify the dimensions of the maze records subplot (see the `visualize.draw_maze_records` function
    implementation for more details).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令运行了10次迷宫导航实验，加载了从`medium_maze.txt`文件加载的简单迷宫配置。神经进化算法在每个试验中评估迷宫求解者的`500`代，使用从`maze_config.ini`文件加载的NEAT配置数据。`width`和`height`参数指定了迷宫记录子图的尺寸（有关更多详细信息，请参阅`visualize.draw_maze_records`函数实现）。
- en: 'After `99` generations of the evolution, the successful maze solver agent is
    found in generation `100`. There are general statistics about the population of
    genomes in the last generation of evolution. In the console output of the completed
    Python program, you will see the following for the last generation of evolution:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在进化`99`代之后，成功迷宫求解代理在第`100`代被发现。在进化的最后一代中，关于基因组种群的一般统计数据。在完成Python程序的控制台输出中，您将看到以下内容：
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After that, we display the configuration of the winner genome and general statistics
    about the trial:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们显示获胜基因组的配置和关于试验的一般统计数据：
- en: '[PRE36]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The console output shows us that the winner genome that encodes the control
    ANN of the successful maze solver has only two node genes and eight connection
    genes. These genes correspond to the two output nodes in the controller ANN, with
    the eight connections used to establish links with the inputs. The resulting configuration
    of the controller ANN is shown here:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出显示，编码成功迷宫求解者控制ANN的获胜基因组只有两个节点基因和八个连接基因。这些基因对应于控制器ANN中的两个输出节点，八个连接用于与输入建立联系。控制器ANN的结果配置如下所示：
- en: '![](img/b05eed53-88f7-422e-b9c1-a227acc31092.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b05eed53-88f7-422e-b9c1-a227acc31092.png)'
- en: The configuration of the successful controller ANN
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 成功控制器ANN的配置
- en: The configuration of the successful controller ANN is better than the configuration
    described in the previous chapter, which was found using the *goal-oriented* search
    optimization method. In this experiment, the ANN configuration omits the hidden
    nodes completely, and the evolutionary process takes fewer generations finding
    it.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 成功控制ANN的配置优于上一章中描述的配置，后者是通过*目标导向*搜索优化方法找到的。在这个实验中，ANN配置完全省略了隐藏节点，进化过程需要更少的代数就能找到它。
- en: Thus, we can assume that the Novelty Search optimization method is at least
    as effective as the goal-oriented method. This is even though the search optimization
    method is not based on the proximity to the final goal, but on rewarding novel
    behavior. The neuroevolution process produced a successful maze solver agent without
    any hints about the proximity to the final goal (maze exit), and that is just
    amazing.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以假设新颖性搜索优化方法至少与目标导向方法一样有效。尽管搜索优化方法不是基于对最终目标的接近度，而是基于奖励新颖行为，但这一点仍然成立。神经进化过程产生了一个成功的迷宫求解代理，没有任何关于最终目标（迷宫出口）的提示，这真是太令人惊讶了。
- en: 'Also, it is interesting to look at the speciation graph during the evolution:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，观察进化过程中的物种分化图也很有趣：
- en: '![](img/426942dd-7951-4b6b-b8bd-8852762afaf5.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/426942dd-7951-4b6b-b8bd-8852762afaf5.png)'
- en: The speciation graph
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 物种分化图
- en: In the speciation graph, we can see that the total number of species during
    the evolutionary process does not exceed nine. Furthermore, most of them are present
    from the very first generations of the evolution until a successful maze solver
    is found.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在物种分化图中，我们可以看到在进化过程中物种的总数不超过九种。此外，其中大多数物种从进化的第一代开始就存在，直到找到成功的迷宫求解者。
- en: Agent record visualization
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理记录可视化
- en: We used the method of visualizing agent records that was introduced in the previous
    chapter, and we introduced a new visualization method to visualize the path of
    the solver agent through the maze.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了上一章中介绍的可视化代理记录的方法，并引入了一种新的可视化方法来展示求解代理在迷宫中的路径。
- en: The visualization of agents records saved automatically for each completed trial
    as an `obj_medium_maze_records.svg` SVG file in the output directory of the corresponding
    experiment.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对代理记录的可视化以`obj_medium_maze_records.svg` SVG文件的形式自动保存在对应实验的输出目录中。
- en: 'In the following image, you can look at the visualization of agents records for
    the experiment described in this chapter:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图像中，您可以查看本章所述实验的代理记录可视化：
- en: '![](img/c57f068f-d251-48d0-9763-d40b3c64bc10.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c57f068f-d251-48d0-9763-d40b3c64bc10.png)'
- en: The visualization of agents records
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 对代理记录的可视化
- en: The top subplot of the plot shows the final positions of the agents belonging
    to the fittest species that have a goal-oriented fitness score value above **0.8**.
    We were able to find eight species that explored almost all areas of the maze
    and were finally able to find the maze exit. At the same time, even the evolutionary
    losers (the bottom plot) demonstrated highly explorative behavior, evenly filling
    the first half of the maze area (compare this with the similar plot in the previous
    chapter).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的顶部子图显示了具有目标导向适应度得分值高于**0.8**的最适合物种的代理的最终位置。我们找到了八种物种，它们几乎探索了迷宫的所有区域，并最终找到了迷宫出口。同时，即使是进化失败者（底部图）也表现出高度探索性的行为，均匀地填充了迷宫区域的前半部分（与上一章中的类似图表进行比较）。
- en: Also, it is important to note that eight of the total nine species created during
    the evolutionary process demonstrate the highest goal-oriented fitness scores;
    that is, they were almost able to reach the maze exit (and one of them ultimately
    reached it). This achievement is in stark contrast with the experiment in the
    previous chapter, where only half of all species (six from twelve) achieved the
    same results.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得注意的是，在进化过程中创建的九种物种中有八种表现出最高的目标导向适应度得分；也就是说，它们几乎能够到达迷宫出口（其中一种最终到达了）。这一成就与上一章的实验形成鲜明对比，在上一章的实验中，只有一半的物种（十二种中的六种）达到了相同的结果。
- en: 'However, the most exciting visualization allows us to look at the path of the
    successful maze solver agent that was able to find the maze exit:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最令人兴奋的可视化允许我们查看能够找到迷宫出口的成功迷宫求解代理的路径：
- en: '![](img/fa1bb586-03f5-4f99-8cdf-fc088c4f51f0.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa1bb586-03f5-4f99-8cdf-fc088c4f51f0.png)'
- en: The path through the maze of the successful maze solver
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 成功迷宫求解者通过迷宫的路径
- en: The visualization can be found in the `output` directory of the experiment in
    the `best_solver_path.svg` file.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化结果可以在实验的`output`目录下的`best_solver_path.svg`文件中找到。
- en: As you can see, a successful maze solver agent was able to find an almost optimal
    path through the maze, even though it does appear to get a little confused at
    the beginning.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一个成功的迷宫求解代理能够找到迷宫中的几乎最优路径，尽管它在开始时似乎有些困惑。
- en: It's just amazing that such a convoluted path through the maze can be found
    without any reference to the location of the maze exit but only by rewarding the
    novelty of each intermediate solution that is found.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 真是令人难以置信，这样的迷宫路径可以在没有任何关于迷宫出口位置参考的情况下找到，仅仅是通过奖励每个找到的中间解决方案的新颖性。
- en: Exercise 1
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习1
- en: Set the population size (`pop_size`) parameter in the `maze_config.ini` file
    to `250`. See if the maze solver can be found in this case.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`maze_config.ini`文件中的`pop_size`（种群大小）参数设置为`250`。看看在这种情况下是否可以找到迷宫求解器。
- en: Change the value of the parameter specifying the probability of adding a new
    node (`node_add_prob`). Was the neuroevolution process able to find a solution,
    and is it optimal from a topological point of view?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改指定添加新节点概率的参数值（`node_add_prob`）。神经进化过程是否找到了解决方案，并且从拓扑角度来看是否是最优的？
- en: Change the initial genome configuration to have zero hidden nodes at the beginning
    (`num_hidden`). How does this affect the algorithm's performance?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将初始基因组配置修改为零隐藏节点（`num_hidden`）。这如何影响算法的性能？
- en: Try to use another novelty metric that is provided with the source code (`maze.maze_novelty_metric_euclidean`)
    and see what happens.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用源代码中提供的另一个新颖性度量指标（`maze.maze_novelty_metric_euclidean`）并看看会发生什么。
- en: 'Change the `location_sample_rate` command-line parameter from its default value
    (`4000`), which allows you to include only the final position of the maze solver
    into its behavioral vector. Try the values that are less than `400` (the number
    of maze simulation steps). For example, if we set this parameter to `100`, then
    the behavioral vector will include coordinates a maximum of four trajectory points for
    each solver agent. See how this parameter can influence algorithm performance.
    You can provide a value for this parameter by running the following command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将命令行参数`location_sample_rate`从默认值（`4000`）修改，这允许你只将迷宫求解器的最终位置包含到其行为向量中。尝试小于`400`（迷宫模拟步骤数）的值。例如，如果我们设置此参数为`100`，那么行为向量将包括每个求解代理最多四个轨迹点的坐标。看看这个参数如何影响算法性能。你可以通过运行以下命令来提供此参数的值：
- en: '[PRE37]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The preceding command runs the simple maze experiment with `location_sample_rate`
    set to `100`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令以`location_sample_rate`设置为`100`运行简单的迷宫实验。
- en: Experimenting with a hard-to-solve maze configuration
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在难以解决的迷宫配置上进行实验
- en: In the next experiment, we evaluate the effectiveness of the NS optimization
    method in a more complex task. In this task, we try to evolve a maze solving agent
    that can find a path through a maze with a complex configuration.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个实验中，我们评估NS优化方法在更复杂任务中的有效性。在这个任务中，我们尝试进化一个迷宫求解代理，使其能够找到复杂配置的迷宫路径。
- en: 'For this experiment, we use the hard-to-solve maze configuration introduced
    in the previous chapter. Such an approach allows us to compare results obtained
    with the NS optimization method against the results obtained with the *goal-oriented*
    optimization method used in the previous chapter. The maze configuration is as
    follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，我们使用上一章中引入的难以解决的迷宫配置。这种方法允许我们比较使用NS优化方法获得的结果与上一章中使用的目标导向优化方法获得的结果。迷宫配置如下：
- en: '![](img/ba8f0918-f64e-4432-aacc-6723715819de.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba8f0918-f64e-4432-aacc-6723715819de.png)'
- en: The hard-to-solve maze configuration
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 难以解决的迷宫配置
- en: This maze configuration is identical to the one described in the previous chapter.
    Thus, you can refer to [Chapter 5](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml),
    *Autonomous Maze Navigation*, for a detailed description.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个迷宫配置与上一章中描述的配置相同。因此，你可以参考[第5章](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml)，*自主迷宫导航*，以获取详细描述。
- en: Hyperparameter selection and working environment setup
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超参数选择和工作环境设置
- en: The hyperparameters for this experiment are the same that we used for a simple
    maze experiment earlier in this chapter. We decided to leave the hyperparameters
    unchanged to test how well the algorithm generalizes by trying to find a solution
    to a task within the same domain, but with a different configuration.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验的超参数与我们在本章前面进行的简单迷宫实验中使用的相同。我们决定保持超参数不变，以测试算法通过尝试在同一领域内找到解决方案的能力，但具有不同的配置来测试算法的泛化能力。
- en: The working environment for this experiment is fully compatible with the environment
    already created for the simple maze experiment. Thus, we can use it as well.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 本实验的工作环境与为简单迷宫实验创建的环境完全兼容。因此，我们也可以使用它。
- en: Running the hard-to-solve maze navigation experiment
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行难以解决的迷宫导航实验
- en: 'To run this experiment, we can use the same experiment runner that we developed
    for the simple maze experiment, with the only difference being that different
    command-line parameters should be provided at the start. You can start the hard
    maze experiment with the following command:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此实验，我们可以使用为简单迷宫实验开发的相同实验运行器，唯一的区别是在启动时应该提供不同的命令行参数。你可以使用以下命令启动困难迷宫实验：
- en: '[PRE38]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This command starts the hard-to-solve maze experiment for `10` trials with `500`
    generations each. The width and height parameters determine the dimensions of
    the subplot to draw the maze records collected during the experiment.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令启动了10次试验的难以解决的迷宫实验，每次试验有500代。宽度和高度参数决定了绘制实验期间收集到的迷宫记录的子图的尺寸。
- en: 'Using the NEAT-Python library for the hard maze experiment, we were unable
    to find a successful maze solver within 10 trials, even with the NS optimization
    method. Nevertheless, the results obtained with the NS method are more promising
    than with the goal-oriented optimization method from the previous chapter. You
    can see this in the following plot, which depicts the final positions of the solver
    agents during the maze navigation simulation:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行困难迷宫实验时，我们使用NEAT-Python库，在10次试验中未能找到成功的迷宫求解代理，即使使用了NS优化方法。尽管如此，使用NS方法获得的结果比上一章中的目标导向优化方法更有希望。你可以在以下图表中看到这一点，该图表描绘了迷宫导航模拟期间求解代理的最终位置：
- en: '![](img/80175455-60ad-457a-9aeb-74a46b29a230.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/80175455-60ad-457a-9aeb-74a46b29a230.png)'
- en: The agents records visualization
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 代理记录的可视化
- en: The plot that visualizes the final positions of all evaluated agents demonstrates
    that, during this experiment, more areas of the maze were explored with the NS
    optimization method than with the goal-oriented method. Also, you can see that
    some species were almost at the finish line, only a few steps away from reaching
    the maze exit.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化所有评估代理最终位置的图表表明，在这次实验中，使用NS优化方法探索的迷宫区域比使用目标导向方法更多。你还可以看到，某些物种几乎到达终点线，只需几步就能到达迷宫出口。
- en: 'The path of the most successful maze-solver agent is as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最成功迷宫求解代理的路径如下：
- en: '![](img/d697228a-ba57-4289-8c41-672d3bd5b1f2.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d697228a-ba57-4289-8c41-672d3bd5b1f2.png)'
- en: The path through the maze of the most successful maze solver agent
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过最成功迷宫求解代理的迷宫路径
- en: The path through the maze taken by the most successful solver agent demonstrates
    that the agent was able to discover the crucial relations between sensor inputs
    and the maneuvers to perform. However, it still lacks precision in applying the
    control signal. Due to this flaw, some control actions lead to ineffective trajectory
    loops, consuming precious time steps allotted to solve the maze.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最成功求解代理在迷宫中走过的路径表明，代理能够发现传感器输入与执行动作之间的关键关系。然而，在应用控制信号方面仍缺乏精确性。由于这个缺陷，一些控制动作导致无效的轨迹循环，消耗了宝贵的解决迷宫的时间步数。
- en: 'Finally, it is interesting to take a look at the topology of the control ANN
    of the most successful maze solver:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，看看最成功迷宫求解代理的控制ANN拓扑结构是很有趣的：
- en: '![](img/e53507b6-a2b8-4baa-ac42-057c119551a0.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e53507b6-a2b8-4baa-ac42-057c119551a0.png)'
- en: The topology of the control ANN
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 控制ANN的拓扑结构
- en: You can see that all sensor inputs were involved in the decision-making, in
    contrast with the topology of the control ANN devised in the previous experiment
    in this chapter. Furthermore, the network topology includes two hidden nodes,
    which allows the agent to implement a complex control strategy to navigate through
    the hard-to-solve maze environment.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，所有传感器输入都参与了决策，这与本章前一个实验中设计的控制ANN拓扑结构形成对比。此外，网络拓扑包括两个隐藏节点，这使得代理能够实现一个复杂控制策略，以导航通过难以解决的迷宫环境。
- en: Despite our failure to evolve a successful maze solver agent with the Novelty
    Search optimization method in this experiment using the NEAT-Python library, it
    is rather an issue of ineffective NEAT implementation by the library than a failure
    of the Novelty Search method.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在这次实验中，我们未能使用NEAT-Python库通过新颖性搜索优化方法进化出一个成功的迷宫求解代理，但这更多是库中NEAT实现无效的问题，而不是新颖性搜索方法的失败。
- en: I have made an implementation of the NEAT algorithm in the GO programming language
    that solves a hard maze navigation task with high efficiency. You can check it
    out on GitHub at [https://github.com/yaricom/goNEAT_NS](https://github.com/yaricom/goNEAT_NS).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用GO编程语言实现了一个NEAT算法，该算法以高效率解决了一个困难的迷宫导航任务。你可以在GitHub上查看[https://github.com/yaricom/goNEAT_NS](https://github.com/yaricom/goNEAT_NS)。
- en: Exercise 2
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习2
- en: In the source code for this chapter, we also provide the experiment runner implementation
    based on the MultiNEAT Python library that we introduced in [Chapter 2](c673e180-4440-4eea-98f8-8800c77162c8.xhtml),
    *Python Libraries and Environment Setup*.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的源代码中，我们还提供了基于我们在第2章中介绍的MultiNEAT Python库的实验运行器实现，*Python库和环境设置*。
- en: 'You can try to use it to solve the hard maze task as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试如下使用它来解决困难迷宫任务：
- en: 'Update the current Anaconda environment by installing the MultiNEAT Python
    library with the following command:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更新当前Anaconda环境，安装MultiNEAT Python库：
- en: '[PRE39]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the experiment runner implementation based on the MultiNEAT library:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于MultiNEAT库运行实验运行器实现：
- en: '[PRE40]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: These commands install the MultiNEAT library in the current Anaconda environment
    and start 10 trials (with `500` generations each) of the hard maze experiment
    using an appropriate experiment runner.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令在当前Anaconda环境中安装MultiNEAT库，并使用适当的实验运行器启动10次（每次500代）的困难迷宫实验。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the *Novelty Search* optimization method
    and how it can be used to guide the neuroevolution process in deceptive problem
    space environments, such as maze navigation. We conducted the same maze navigation
    experiments as in the previous chapter. After that, we compared the results we
    obtained to determine if the NS method has advantages over the goal-oriented optimization
    method introduced in the previous chapter.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了*新颖性搜索*优化方法以及它如何用于指导在欺骗性问题空间环境中的神经进化过程，例如迷宫导航。我们进行了与上一章相同的迷宫导航实验。之后，我们比较了获得的结果，以确定NS方法是否优于上一章中介绍的目标导向优化方法。
- en: You got the practical experience of writing source code using Python and experimented
    with tuning the important hyperparameters of the NEAT algorithm. Also, we introduced
    a new visualization method, allowing you to see the path of the agent through
    the maze. With this method, you can easily compare how different agents are trying
    to solve the maze navigation problem and whether the path through the maze that
    was found is optimal or not.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过使用Python编写源代码获得了实际经验，并尝试调整NEAT算法的重要超参数。此外，我们引入了一种新的可视化方法，让你能够看到代理在迷宫中的路径。使用这种方法，你可以轻松地比较不同代理尝试解决迷宫导航问题的方法，以及找到的迷宫路径是否最优。
- en: The next chapter introduces more advanced applications of the NEAT algorithm.
    We start with the task of visual discrimination and introduce you to the HyperNEAT
    extension of the NEAT algorithm. The HyperNEAT method allows you to work with
    large-scale ANNs operating over thousands or millions of parameters. This scale
    of operations is impossible with the classic NEAT algorithm.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍NEAT算法的更多高级应用。我们首先介绍视觉识别任务，并介绍NEAT算法的HyperNEAT扩展。HyperNEAT方法允许你处理大规模的ANN，这些ANN操作在数千或数百万个参数上。这种规模的运算对于经典的NEAT算法是不可能的。
