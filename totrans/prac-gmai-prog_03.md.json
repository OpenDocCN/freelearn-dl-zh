["```py\nPrivate int currentHealth = 100; \nPrivate int currentBullets = 0; \nprivate int firedBullets = 0; \nprivate int hitBullets = 0; \nprivate int pFireBullets = 0; \nprivate int pHitBullets = 0; \nprivate int chanceFire = 0; \nprivate int chanceHit = 0; \npublic GameObject Bullet;  \nprivate bool findPlayer;  \nprivate bool findCover;  \nprivate bool findPoints;  \n```", "```py\nvoid Update () \n{ \n chanceFire = ((hitBullets / firedBullets) * 100) = 0; \n chanceHit = ((pHitBullets / pFiredBullets) * 100) = 0; \n if(currentHealth > 20 && currentBullets > 5) \n { \n  Fire(); \n } \n if(currentHealth > 20 && currentBullets < 5 && chanceFire < 80) \n { \n  MoveToPoint(); \n } \n if(currentHealth > 20 && currentBullets < 5 &&chanceFire>80) \n { \n  Fire(); \n } \n if(currentHealth > 20 && currentBullets > 5 && chanceFire < 30&&\n chanceHit > 30) \n { \n  MoveToCover(); \n } \n if(currentHealth < 20 && currentBullets > 0 && chanceFire > 90 && \n chanceHit < 50) \n { \n  Fire(); \n } \n} \n```", "```py\nif(recentPercentage > wholePercentage)  \n```", "```py\nPrivate float Hunger = 0f; \nPrivate float Energy = 0f; \nPrivate float Comfort = 0f; \nPrivate float Hygiene = 0f; \nPrivate float Fun = 0f; \nprivate float Overall = 0f; \npublic Transform Fridge; \npublic Transform Oven; \npublic Transform Sofa; \npublic Transform Bed; \npublic Transform TV; \npublic Transform Shower; \npublic Transform WC; \nvoid Start () \n{ \n   Hunger = 100f; \n   Energy = 100f; \n   Comfort = 100f; \n   Hygiene = 100f; \n   Fun = 100f; \n} \nvoid Update () \n{ \n Overall = ((Hunger + Energy + Comfort + Hygiene + Fun)/5); \n   Hunger -= Time.deltaTime / 9; \n   Energy -= Time.deltaTime / 20; \n   Comfort -= Time.deltaTime / 15; \n   Hygiene -= Time.deltaTime / 11; \n   Fun -= Time.deltaTime / 12; \n}\n```", "```py\nPrivate float Hunger = 0f; \nPrivate float Energy = 0f; \nPrivate float Comfort = 0f; \nPrivate float Hygiene = 0f; \nPrivate float Fun = 0f; \nprivate float Overall = 0f; \npublic Transform Fridge; \npublic Transform Oven; \npublic Transform Sofa; \npublic Transform Bed; \npublic Transform TV; \npublic Transform Shower; \npublic Transform WC; \nprivate int foodQuantity; \npublic float WalkSpeed; \npublic static bool atFridge; \nvoid Start () \n{ \n   Hunger = 100f; \n   Energy = 100f; \n   Comfort = 100f; \n   Hygiene = 100f; \n   Fun = 100f; \n} \nvoid Update () \n{ \n   Overall = ((Hunger + Energy + Comfort + Hygiene + Fun)/5); \n   Hunger -= Time.deltaTime / 9; \n   Energy -= Time.deltaTime / 20; \n   Comfort -= Time.deltaTime / 15; \n   Hygiene -= Time.deltaTime / 11; \n   Fun -= Time.deltaTime / 12; \n} \nvoid Hungry () \n{ \n   transform.LookAt(Fridge); // Face the direction of the Fridge\n   transform.position vector3.MoveTowards(transform.position.\n   Fridge.position, walkSpeed); \n   //checks if already triggered the fridge position \n   if(atFridge == true) \n   { \n    //interact with fridge \n    if(foodQuantity > 1) \n    { \n     Cook(); \n    } \n    else() \n    { \n     // calculate next priority \n    } \n } \n} \n```", "```py\nvoid Sleepy () \n{ \n   if(hoursToWork > 3&&Energy < Hygiene) \n{ \n       transform.LookAt(Bed); // Face the direction of the Bed \n       transform.position = vector3.MoveTowards(transform.position.Bed.\n       position, walkSpeed); \n         //checks if already triggered the bed position \n         if(atBed == true) \n          { \n          //interact with the bed \n          }  \n\n } \nif(hoursToWork > 3 && Energy > Hygiene) \n{ \n  useWC(); //Go to the bathroom \n} \n if(hoursToWork < 3) \n{ \n   //choose another thing to do \n} \n} \n```", "```py\nprivate bool isEating; \nprivate bool isWatchingTV; \nprivate bool Busy; \n... \nvoid Uncomfortable () \n{ \n   if(isEating == true || isWatchingTV == true) \n    { \n         transform.LookAt(Sofa); // Face the direction of the Sofa \n         transform.position = vector3.MoveTowards(transform.position.\n         Sofa.position, walkSpeed); \n         //checks if already triggered the bed position \n         if(atSofa == true) \n         {  \n         //interact with the sofa \n         }  \n     } \nelse \n{ \n  if(Comfort < Overall&& Busy == false) \n{ \n    transform.LookAt(Sofa); // Face the direction of the\n    Sofa \n    transform.position =\n    vector3.MoveTowards(transform.position.Sofa.position, walkSpeed); \n               //checks if already triggered the bed position \n\n           if(atSofa == true) \n           { \n           //interact with the sofa \n           }  \n    } \n   if(Busy == true && isEating == false && isWatchingTV == false) \n    { \n     //Keep doing what she is doing at that moment \n    } \n} \n} \n```", "```py\nvoid useBathroom () \n{ \nif(Hygiene<10) \n{\n       transform.LookAt(Bathroom); // Face the direction of the\n       Bathroom \n       transform.position = vector3.MoveTowards(transform.position.\n       Bathroom.position, walkSpeed); \n       //checks if already triggered the bed position \nif(atBathroom == true) \n\n{ \n\n   //choose randomly what to do in the bathroom \n\n}  \n\n} \n\n} \n```", "```py\nprivate bool isSeat; \nprivate bool televisionOn; \nvoid Bored () \n{ \nif(Fun<Overall&& Busy == false) \n{ \n   televisionOn = true; // turns on the television \n         transform.LookAt(TV); // Face the direction of the television \n         transform.position = vector3.MoveTowards(transform.position.\n         Sofa.position, walkSpeed); \n         //checks if already triggered the bed position \n         if(atSofa == true) \n         { \n          //interact with the sofa \n         } \n } \nif(Fun < Overall && Busy == true) \n{ \n   f(isEating == true) { \n         televisionOn = true; // turns on the television \n               transform.LookAt(TV); // Face the direction of the\n         television \n\n      } \nif(isSeat == true) \n  { \n         televisionOn = true; // turns on the television \n         transform.LookAt(TV); // Face the direction of the television \n\n   } \nif(isSeat == true && isEating == true) \n{ \n         televisionOn = true; // turns on the television \n         transform.LookAt(TV); // Face the direction of the television \n         } \n} \nelse() \n{ \n   //continue doing what she is doing \n}  \n} \n```"]