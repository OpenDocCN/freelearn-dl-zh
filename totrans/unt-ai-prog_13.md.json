["```py\nclass GoblinNameGenerator {\n    static string[] NameDatabase1 = { \"Ba\", \"Bax\", \"Dan\", \n      \"Fi\", \"Fix\", \"Fiz\", }; //... and more \n    static string[] NameDatabase2 = { \"b\", \"ba\", \"be\",\n      \"bi\", \"d\", \"da\", \"de\",\"di\", }; // ... and more \n    static string[] NameDatabase3 = { \"ald\", \"ard\", \"art\",\n      \"az\", \"azy\", \"bit\",\"bles\", \"eek\", \"eka\", \"et\",\n      \"ex\", \"ez\", \"gaz\", \"geez\", \"get\", \"giez\",\n      \"iek\", }; // ... and more\n    static string[] SurnameDatabase1 = { \"Bolt\", \"Boom\",\n      \"Bot\", \"Cog\", \"Copper\",\"Damp\", \"Dead\", \"Far\", \"Fast\",\n      \"Fiz\", \"Fizz\", \"Fizzle\", \"Fuse\", \"Gear\",\n      \"Giga\", \"Gold\", \"Grapple\" }; // ... and more\n    static string[] SurnameDatabase2 = { \"basher\", \"blade\",\n      \"blast\", \"blaster\",\"bolt\", \"bomb\", \"boot\", \"bottom\",\n      \"bub\", \"button\", \"buttons\", \"cash\",\n      \"clamp\", };  // ... and more\n    private static string RandomInArray(string[] array) {\n        return array[Random.Range(0, array.Length)];\n    }\n    public static string RandomGoblinName() {\n        return RandomInArray(NameDatabase1) + \n          RandomInArray(NameDatabase2) +\n            RandomInArray(NameDatabase3) + \" \" +\n            RandomInArray(SurnameDatabase1) + \n            RandomInArray(SurnameDatabase2);\n    }\n}\n```", "```py\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class GoblinWriter : MonoBehaviour {\n    public TMPro.TextMeshProUGUI textMesh;\n    public List<string> goblinJobs;\n    public int goblinMaxAge = 200;\n    void Start() {\n        UpdateString();\n    }\n    void Update() {\n        if (Input.GetKeyDown(KeyCode.Space)) {\n            UpdateString();\n        }\n    }\n    void UpdateString() {\n        string goblinName =\n          GoblinNameGenerator.RandomGoblinName();\n        string goblinAge = Random.Range(20,\n          goblinMaxAge).ToString();\n        string goblinJob = goblinJobs[Random.Range(0, \n          goblinJobs.Count)];\n        textMesh.text = $\"{goblinName} is a {goblinAge} \n          years old goblin {goblinJob}.\";\n    }\n}\n```", "```py\nMathf.PerlinNoise(xCoord, yCoord);\n```", "```py\n    void CalculateNoise() {\n        for (float y = 0.0f; y < noiseTex.height; y++) {\n            for (float x = 0.0f; x < noiseTex.width; x++) {\n                float xCoord = \n                  xOrg + x / noiseTex.width * scale;\n                float yCoord = \n                  yOrg + y / noiseTex.height * scale;\n                float value = \n                  Mathf.PerlinNoise(xCoord, yCoord);\n                pix[(int)y * noiseTex.width + (int)x] = \n                  new Color(value, value, value);\n            }\n        }\n        // Copy the pixel data to the texture and load it \n        // into the GPU.\n        noiseTex.SetPixels(pix);\n        noiseTex.Apply();\n    }\n```", "```py\nusing UnityEngine;\npublic class Bobbling : MonoBehaviour {\n    // Range over which height varies.\n    public float heightScale = 1.0f;\n    // Distance covered per second along X axis of Perlin\n    // plane.\n    public float xScale = 1.0f;\n    void Update() {\n        float height = heightScale *\n          Mathf.PerlinNoise(Time.time * xScale, 0.0f);\n        Vector3 pos = transform.position;\n        pos.y = height;\n        transform.position = pos;\n    }\n}  \n```", "```py\nusing UnityEngine;\nusing System;\npublic class CaveGenerator : MonoBehaviour {\n    [SerializeField]\n    private int width;\n    [SerializeField]\n    private int height;\n    [SerializeField]\n    private int seed;\n    [SerializeField]\n    private bool useRandomSeed;\n    private int[,] map;\n    void Start() {\n        InitializeRandomGrid();\n        DrawCaveMesh();\n    }\n    void Update() {\n        if (Input.GetKeyDown(KeyCode.G)) {\n            CellularAutomata(false);\n            DrawCaveMesh();\n        } else if (Input.GetKeyDown(KeyCode.Space)) {\n            CellularAutomata(true);\n            DrawCaveMesh();\n        } else if (Input.GetKeyDown(KeyCode.N)) {\n            InitializeRandomGrid();\n            DrawCaveMesh();\n        }\n    }\n```", "```py\n    void InitializeRandomGrid() {\n        map = new int[width, height];\n        if (useRandomSeed) {\n            seed = (int)DateTime.Now.Ticks;\n        }\n        System.Random randomGen =\n          new System.Random(seed.GetHashCode());\n        int mapMiddle = (height / 2);\n        for (int c = 0; c < width; c++) {\n            for (int r = 0; r < height; r++) {\n                if (c == 0 || c == width - 1 || r == 0 || r\n                     == height - 1) {\n                    map[c, r] = 1;\n                } else {\n                    if (c == mapMiddle) {\n                        map[c, r] = 0;\n                    } else {\n                        map[c, r] = (randomGen.Next(0, 100)\n                          < 50) ? 1 : 0;\n                    }\n                }\n            }\n        }\n    }\n```", "```py\n    int GetSurroundingWallCount(int c, int r, int size) {\n        int wallCount = 0;\n        for (int iX = c - size; iX <= c + size; iX ++) {\n            for (int iY = r - size; iY <= r + size; iY ++)\n            {\n                if (iX != c || iY != r) {\n                    wallCount += isWall(iX, iY) ? 1 : 0;\n                }\n            }\n        }\n        return wallCount;\n    }\n    bool isWall(int c, int r) {\n        if (c < 0 || r < 0) {\n            return true;\n        }\n        if (c > width - 1 || r > height - 1) {\n            return true;\n        }\n        return map[c, r] == 1;\n    }\n```", "```py\n    void CellularAutomata(bool clean = false) {\n        int[,] newmap = new int[width, height];\n        for (int c = 0; c < width; c ++) {\n            for (int r = 0; r < height; r ++) {\n                int numWalls = \n                  GetSurroundingWallCount(c, r, 1);\n                int numWalls2 = \n                  GetSurroundingWallCount(c, r, 2);\n                if (isWall(c,r)) {\n                    if (numWalls > 3) {\n                        newmap[c, r] = 1;\n                    } else {\n                        newmap[c, r] = 0;\n                    }\n                } else {\n                    if (!clean) {\n                        if (numWalls >= 5 || numWalls2 <= \n                            2) {\n                            newmap[c, r] = 1;\n                        } else {\n                            newmap[c, r] = 0;\n                        }\n                    } else {\n                        if (numWalls >= 5) {\n                            newmap[c, r] = 1;\n                        } else {\n                            newmap[c, r] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        map = newmap;\n    }\n```", "```py\n    void DrawCaveMesh() {\n        MeshGenerator meshGen =\n          GetComponent<MeshGenerator>();\n        meshGen.GenerateMesh(map, 1);\n    }\n```", "```py\nusing UnityEngine;\npublic abstract class MeshGenerator : MonoBehaviour {\n    abstract public void GenerateMesh(int[,] map, float\n                                      squareSize);\n}\n```", "```py\npublic class WallGenerator : MeshGenerator {\n    public GameObject wallCube;\n    public override void GenerateMesh(int[,] map, \n      float squareSize) {\n        foreach (Transform t in transform) {\n            Destroy(t.gameObject);\n        }\n        int width = map.GetLength(0);\n        int height = map.GetLength(1);\n        for (int c = 0; c < width; c++) {\n            for (int r = 0; r < height; r++) {\n                if (map[c, r] == 1) {\n                    GameObject obj = Instantiate(wallCube,\n                      new Vector3(c * squareSize, 0, r *\n                      squareSize), Quaternion.identity);\n                    obj.transform.parent = transform;\n                }\n            }\n        }\n        transform.position = \n          new Vector3(-width / 2.0f, 0, -height / 2.0f);\n        MergeCubes();\n    }\n```", "```py\n    private void MergeCubes() {\n        transform.GetComponent<MeshFilter>().mesh = \n          new Mesh();\n        MeshFilter[] meshFilters =\n          GetComponentsInChildren<MeshFilter>();\n        CombineInstance[] combine = \n          new CombineInstance[meshFilters.Length];\n        int i = 0;\n        while (i < meshFilters.Length) {\n            combine[i].mesh = meshFilters[i].sharedMesh;\n            combine[i].transform =\n              meshFilters[i].transform.localToWorldMatrix;\n            meshFilters[i].gameObject.SetActive(false);\n            i++;\n        }\n        transform.GetComponent<MeshFilter>().mesh = \n          new Mesh();\n        transform.GetComponent<MeshFilter>()\n          .mesh.indexFormat = \n          UnityEngine.Rendering.IndexFormat.UInt32;\n        transform.GetComponent<MeshFilter>()\n          .mesh.CombineMeshes(combine, true);\n        transform.gameObject.SetActive(true);\n        foreach (Transform t in ransform) {\n            Destroy(t.gameObject);\n        }\n    }\n```"]