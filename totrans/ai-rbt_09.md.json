["```py\nELIZA: How do you do. Please tell me your problem.\n> I hate cats.\nYou say you hate cats?\n> Yes.\nYou seem to be quite positive.\n> I hate cats.\nCan you elaborate on that?\n> I don't like cats because they smell bad.\nDon't you really like cats because they smell bad?\n> No. Don't like cats.\nAre you saying no just to be negative?\n> No.\nYou are being a bit negative.\n> I am\nIs it because you are that you came to me?\n> No\nWhy not?\n> I am afraid of cats\nHow long have you been afraid of cats?\n> About a year\nI'm not sure I understand you fully.\n> 1 year\nPlease go on.\n> I have been afraid of cats since the cat jumped on my head.\nYour head ?\n> yes\n```", "```py\ndecomp: * i am *\nreasmb: Is it because you are (2) that you came to me ?\nreasmb: How long have you been (2) ?\nreasmb: Do you believe it is normal to be (2) ?\nreasmb: Do you enjoy being (2) ?\n```", "```py\n<category>\n<pattern>I PLAY *</pattern>\n<template>Is <set_it><person/></set_it> a game or a musical instrument?</template>\n</category>\n<category>\n<pattern>I PLAY THE *</pattern>\n<template>I wish I played an instrument. My parents could not afford the lessons.\n<think><set_it><set_does><settopic>play the\n<person/></settopic></set_does></set_it></think></template>\n</category>\n<category>\n<pattern>I PRIDE MYSELF *</pattern>\n<template>It seems you have good self esteem.</template>\n</category>\n<category>\n<pattern>I QUIT MY JOB *</pattern>\n<template>Where did you work and why did you quit?</template>\n</category>\n<category>\n<pattern>I READ *</pattern>\n<template>I don't think I've read that. Can you give me a reference?\n<think><set_it><set_does><settopic>read\n<person/></settopic></set_does></set_it></think></template>\n</category>\n<category>\n<pattern>I READ * BOOKS</pattern>\n<template>Name some books in that genre.\n<think><set_it><set_does><settopic>read <person/> books</settopic></set_does></set_it></think>\n<think><set_personality>critical</set_personality></think></template>\n</category>\n```", "```py\n    initial: Hello. My name is Albert the Robot.\n    initial: Hello. I am Albert the Robot, but you can call me Albert.\n    initial: Hello. Nice to meet you. Call me Albert.\n    final: Goodbye. Thank you for talking to me.\n    final: Goodbye. It was nice to talk to you.\n    final: Goodbye. I need to get back to my tasks.\n    quit: bye\n    quit: goodbye\n    ```", "```py\n    pre: robot you\n    pre: albert you\n    …\n    synon: you robot albert bert bertie bot\n    synon: belief feel think believe wish\n    ```", "```py\n    questions:\n    reasmb: What is your name? <assert name>\n    reasmb: What can I call you? <assert name>\n    reasmb: How old are you? <assert old>\n    reasmb: How are you feeling today <assert feeling>\n    ```", "```py\n    datum: name\n    decomp * my name is * decomp I am *\n    decomp call me *\n    decomp <name> * # we are in the name context reasmb: Hello (1). Nice to meet you\n    reasmb: Hi (1).\n    reasmb: Your name is (1), right?\n    reasmb: Thank you for telling me your name, (1) store: <name> (1)\n    decomp * my name is *\n    reasmb: Hello (2). Nice to meet you.[welcome][happy] store:<name> (2)\n    ```", "```py\n    datum: age\n    decomp <age> * I am * years old decomp <age> * I am % # integer\n    reasmb: You are (2) years old?\n    reasmb: (2) years old!\n    decomp <age> *\n    reasmb: You are (1) years old?\n    reasmb: (1) years old!\n    store: <age> (1)\n    ```", "```py\n    key: feeling\n    decomp: how are you feeling decomp: how are you\n    decomp: hows it hanging\n    decomp: how are you today\n    reasmb: <happy> I'm doing well. How are you? <assert feeling>\n    reasmb: <sad> I am feeling sad. How are you? <assert feeling>\n    reasmb: <curious> I am curious about my surroundings\n    reasmb: <friend> I am feeling friendly today\n    reasmb: <welcome> I am in a welcoming mood today, my friend\n    reasmb: <frust> I am a bit frustrated, to tell you the truth\n    reasmb: <frust> I am feeling a bit frustrated\n    reasmb: <strange> I am having relationship problems\n    reasmb: <distant> None of my friends have come to visit\n    reasmb: <tired>  My batteries are low.  Maybe I need a rest.\n    ```", "```py\nclass RobotEmotionEngine():\n  def __in _(self):\n    self.emostate = [90,0]\n    self.emoText = \"neutral 50\"\n    self.emotions = {\"happy\" : 50, \"sad\": 50,\"welcome\" : 50, \"distant\":50,\"friend\" : 50,\"strange\" :50, \"curious\" : 50,\"frustrated\":50, \"fresh\" : 50, \"tired\",50}\n    self.bio = {\"name\":\"Albert Albert\", \"lastname\": \"Albert\", \"age\": \"6 months\",\"maker\": \"granddad\", \"color\":\"green\",\"food\",\"electricity\",\"author\":\"Isaac Asimov, of course\",\"school\": \"I do not go to school but I love to learn\",\"hobby\":\"picking up toys\", \"job\":\"picking up toys\"}\n    # list of happy emotions and sad emotions self.emotBalance={\"happy\": \"sad\", \"welcome\":\"distant\",\"friend\": \"strange\", \"curious\": \"frustrated\",\"fresh\": \"tired\"} self.emotionAxis{\"happy\":112, \"welcome\": 22,\"friend\":67,\"curious\":157,\n    \"sad\":292,\"distant\":202,\"strange\":247,\"frustrated\",337}\n    self.update()\n  def change(self,emot, val):\n    self.emotions[emot]=val\n    balance = 100 - val\n    otherEmotion = self.emotBalance[emot] \n    self.emotions[otherEmotion]=balance\n```", "```py\n    def update(self):\n        rmin = 100\n        rmax = 0\n        thetamin =360\n        thetamax=0\n        for emote in self.emotions:\n            theta = self.emotionAxis[emote]\n            thetamax = min(theta,thetamax)\n            thetamin = max(theta,thetamin)\n            r = self.emotions[emote]\n            rmin = max(rmin, r)\n            rmax = max(rmax,r)\n        stateR = (rmax-rmin)/ 2\n        stateTheta = (thetamax-thetamin) / 2\n        for emo in self.emotionAxis:\n            thisAngle = self.emotionAxis[emo]\n            if stateTheta > thisAngle\n            myEmotion = emo\n            break\n\n        self.emostate = [stateTheta, stateR]\n        if stateR < 55 and stateR > 45: \n            myEmotion = \"neutral\"\n        self.emoText = myEmotion + \" \"+ str(stateR)\n        print \"Current Emotional State\"  = myEmotion, stateR, stateTheta\n        return\n```", "```py\n    class HumanEmotionEngine():\n      def _init_ (self):\n        self.emostate = [90,0]\n        self.emoText = \"neutral 50\"\n        self.emotions = {\"happy\" : 50, \"sad\": 50,\"welcome\" : 50, \"distant\":50}\n        # list of happy emotions and sad emotions\n        self.emotBalance={\"happy\": \"sad\", \"welcome\":\"distant\"}\n        self.emotionAxis = {'distant': 315, 'welcome': 135, 'sad': 225,'happy': 45}\n        self.update()\n    ```", "```py\n    def change(self,emot, val):\n        self.emotions[emot]=val balance = 100 – val\n        otherEmotion = self.emotBalance[emot] \n        self.emotions[otherEmotion]=balance\n    ```", "```py\n    def update(self):\n        stateR = self.emotion[\"happy\"]\n        stateS = self.emotion[\"welcome\"]\n        self.emostate = [stateR, stateS]\n    ```", "```py\n    if stateR < 55 and stateR > 45 and stateS < 55 and stateS > 45: \n     myEmotion = \"neutral\"\n    happySad = stateR-50 welcomDist = stateS-50\n    if abs(happySad) > abs(welcomDist):\n     myEmotion = \"sad\"\n    if happySad > 0:\n     myEmotion = \"happy\"\n    else:\n    myEmotion = \"distant\" if welcomDist> 0:\n    myEmotion = \"welcome\"\n    self.emoText = myEmotion + \" \"+ str(stateR)\n    print \"Current Human Emotional State\" = myEmotion, stateR, stateTheta\n    return\n    ```", "```py\nclass HumanInformation():\n  def __init__(self):\n    self.info = {\"name\":\"none\"}\n    self.info[\"age\"]=0\n    self.info[\"school\"]=\"none\"\n    self.info[\"feeling\"]=\"none\"\n    self.info[\"food\"]=\"none\"\n    self.info[\"book\"]=\"none\"\n    self.info[\"subject\"]=\"none\"\n    self.info[\"song\"]=\"none\"\n    self.info[\"teeth\"]=\"none\"\n    self.info[\"jokes\"]=\"none\"\n    # stuff is random information that we use to get more information and have the human answer questions\n    # these are aimed at 3-7 year olds\n    self.info[\"stuff\"]=\"none\"\n    self.stuff = [\"the color pink\", \"singing\", \"dancing\", \"dinosaurs\", \"race cars\", \"building things\",\n    \"robots\", \"airplanes\", \"space ships\", \"unicorns\", \"princesses\"] self.points = self.info\n    # setup points scoring scheme\n    points = 20\n    for item in self.points:\n      self.points[item]=points\n      points -= 2\n```", "```py\nclass ContextMemory():\n    def __init__(self):\n        self.currentContext = \"None\"\n        self.currentHuman = None # pointer to the data file for the human we are currentl talking to\n        self.humanFile = []\n        self.emotion = \"happy\"\n        self.humanEmotion = \"happy\"\n        self.contextDict={}\n        self.contextDict['currentHuman'] = self.currentHuman\n        self.contextDict['robotEmotion'] = self.emotion\n        self.contextDict['humanEmotion'] = self.humanEmotion\n\n    def inContext(self, datum):\n        if datum in self.contextDict:\n            return self.contextDict[datum]\n        else:\n            return 0\n\n    def setHuman(self,human):\n        self.currentHuman = human\n        self.humanFile.append(human)  # add this person to the database of people we know\n\n    def addHuman(self,human):\n        self.humanFile.append(human)\n```"]