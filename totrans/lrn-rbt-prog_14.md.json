["```py\n    pi@myrobot:~ $ i2cdetect -y 1\n         0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n    00:          -- -- -- -- -- -- -- -- -- -- -- -- -- \n    10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n    20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n    30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n    40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n    50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n    60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- 6f \n    70: 70 -- -- -- -- -- -- —             \n    ```", "```py\n    pi@myrobot:~ $ git clone https://github.com/pimoroni/icm20948-python\n    pi@myrobot:~ $ cd icm20948-python/\n    pi@myrobot:~ $ sudo ./install.sh\n    pi@myrobot:~ $ cd\n    ```", "```py\npi@myrobot:~ $ pip3 install git+https://github.com/orionrobots/vpython-jupyter.git\n```", "```py\n    from icm20948 import ICM20948\n    ```", "```py\n    class RobotImu:\n        def __init__(self):\n            self._imu = ICM20948()\n    ```", "```py\n        def read_temperature(self):\n            return self._imu.read_temperature()\n    ```", "```py\n    vpython by importing it as vp.\n    ```", "```py\n    import time\n    import logging\n    ```", "```py\n    logging.basicConfig(level=logging.INFO)\n    ```", "```py\n    imu = RobotImu()\n    ```", "```py\n    vp.graph(xmin=0, xmax=60, scroll=True)\n    temp_graph = vp.gcurve()\n    ```", "```py\n    start = time.time()\n    ```", "```py\n    while True:\n        vp.rate(100)\n    ```", "```py\n        temperature = imu.read_temperature()\n        logging.info(\"Temperature: {}\".format(temperature))\n    ```", "```py\n        elapsed = time.time() - start\n    ```", "```py\n        temp_graph.plot(elapsed, temperature)\n    ```", "```py\n    $ VPYTHON_PORT=9020 VPYTHON_NOBROWSER=true python3 plot_temperature.py\n    ```", "```py\n    INFO:vpython.no_notebook:Creating server\n    http://localhost:9020\n    INFO:vpython.no_notebook:Server created\n    INFO:vpython.no_notebook:Starting serve forever loop\n    INFO:vpython.no_notebook:Started\n    ```", "```py\nINFO:root:Temperature 32.43858387995327\nINFO:root:Temperature 32.726120945278105\nINFO:root:Temperature 32.726120945278105\nINFO:root:Temperature 32.39066103573247\nINFO:root:Temperature 32.39066103573247\nINFO:root:Temperature 32.63027525683649\n```", "```py\n    pi@myrobot:~ $ alias vpython=\"VPYTHON_PORT=9020 VPYTHON_NOBROWSER=true python3\"\n    ```", "```py\n    pi@myrobot:~ $ echo 'alias vpython=\"VPYTHON_PORT=9020 VPYTHON_NOBROWSER=true python3\"' >>~/.bashrc\n    ```", "```py\n    import vpython as vp\n    ```", "```py\n    def robot_view():\n    ```", "```py\n    vp.scene.forward = vp.vector(-3, -1, -1) \n    ```", "```py\n        vp.scene.up = vp.vector(0, 0, 1)\n    ```", "```py\n    from icm20948 import ICM20948\n    from vpython import vector\n    ```", "```py\n            return vector(x, y, z)\n    ```", "```py\n    import vpython as vp\n    import logging\n    import time\n    from robot_imu import RobotImu\n    logging.basicConfig(level=logging.INFO)\n    imu = RobotImu()\n    ```", "```py\n    vp.graph(xmin=0, xmax=60, scroll=True)\n    graph_x = vp.gcurve(color=vp.color.red)\n    graph_y = vp.gcurve(color=vp.color.green)\n    graph_z = vp.gcurve(color=vp.color.blue)\n    ```", "```py\n    start = time.time()\n    while True:\n        vp.rate(100)\n        elapsed = time.time() – start\n    ```", "```py\n        gyro = imu.read_gyroscope()\n        graph_x.plot(elapsed, gyro.x)\n        graph_y.plot(elapsed, gyro.y)\n        graph_z.plot(elapsed, gyro.z)\n    ```", "```py\n        def read_accelerometer(self):\n            accel_x, accel_y, accel_z, _, _, _ = self._imu.read_accelerometer_gyro_data()\n            return vector(accel_x, accel_y, accel_z)\n    ```", "```py\n    import vpython as vp\n    import logging\n    from robot_imu import RobotImu\n    from robot_pose import robot_view\n    logging.basicConfig(level=logging.INFO)\n    imu = RobotImu()\n    ```", "```py\n    robot_view()\n    ```", "```py\n    accel_arrow = vp.arrow(axis=vp.vector(0, 0, 0))\n    x_arrow = vp.arrow(axis=vp.vector(1, 0, 0),\n                       color=vp.color.red)\n    y_arrow = vp.arrow(axis=vp.vector(0, 1, 0), \n                       color=vp.color.green)\n    z_arrow = vp.arrow(axis=vp.vector(0, 0, 1), \n                       color=vp.color.blue)\n    ```", "```py\n    while True:\n        vp.rate(100)\n    ```", "```py\n        accel = imu.read_accelerometer()\n        print(f\"Accelerometer: {accel}\")\n    ```", "```py\n        accel_arrow.axis = accel.norm()\n    ```", "```py\n        def read_magnetometer(self):\n    ```", "```py\n            mag_x, mag_y, mag_z = self._imu.read_magnetometer_data()\n            return vector(mag_x, -mag_y, -mag_z)\n    ```", "```py\n    import vpython as vp\n    import logging\n    from robot_imu import RobotImu\n    from robot_pose import robot_view\n    logging.basicConfig(level=logging.INFO)\n    imu = RobotImu()\n    robot_view()\n    ```", "```py\n    mag_arrow = vp.arrow(pos=vp.vector(0, 0, 0))\n    x_arrow = vp.arrow(axis=vp.vector(1, 0, 0), color=vp.color.red)\n    y_arrow = vp.arrow(axis=vp.vector(0, 1, 0), color=vp.color.green)\n    z_arrow = vp.arrow(axis=vp.vector(0, 0, 1), color=vp.color.blue)\n    ```", "```py\n    while True:\n        vp.rate(100)\n    ```", "```py\n        mag = imu.read_magnetometer()\n    ```", "```py\n        mag_arrow.axis = mag.norm()\n        print(f\"Magnetometer: {mag}\")\n    ```"]