- en: Co-Evolution and the SAFE Method
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协同进化和SAFE方法
- en: In this chapter, we introduce the concept of co-evolution and explain how it
    can be used to co-evolve the solver and the objective function that optimizes
    the evolution of the solver. We then discuss the **Solution and Fitness Evolution**
    (**SAFE**) method and provide a brief overview of different co-evolution strategies.
    You will learn how to use co-evolution with neuroevolution-based methods. You
    will also get practical experience with the implementation of a modified maze-solving
    experiment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了协同进化的概念，并解释了如何使用它来协同进化求解器和优化求解器进化的目标函数。然后，我们讨论了**解决方案和适应度进化**（**SAFE**）方法，并简要概述了不同的协同进化策略。您将学习如何使用基于神经进化的方法进行协同进化。您还将获得修改迷宫求解实验的实践经验。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Co-evolution basics and common co-evolution strategies
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协同进化基础和常见协同进化策略
- en: SAFE method basics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAFE方法基础
- en: Modified maze-solving experiment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改后的迷宫求解实验
- en: Discussion about the results of the experiment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于实验结果的讨论
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following technical requirements should be met to execute the experiments
    described in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行本章中描述的实验，应满足以下技术要求：
- en: Windows 8/10, macOS 10.13 or newer, or modern Linux
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 8/10，macOS 10.13或更高版本，或现代Linux
- en: Anaconda Distribution version 2019.03 or newer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda Distribution版本2019.03或更高版本
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter9](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter9)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter9](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter9)找到。
- en: Common co-evolution strategies
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的协同进化策略
- en: The natural evolution of biological systems cannot be considered separately
    from the concept of co-evolution. Co-evolution is one of the central evolutionary
    drives that leads to the current state of the biosphere, with the diversity of
    organisms that we can perceive around us.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 生物系统的自然进化不能与协同进化的概念分开考虑。协同进化是导致当前生物圈状态的中央进化驱动力之一，其中包括我们周围可感知的有机体的多样性。
- en: We can define co-evolution as a mutually beneficial strategy of the simultaneous
    evolution of multiple genealogies of different organisms. The evolution of one
    species cannot be possible without other species. During evolution, the co-evolving
    species mutually interact, and these inter-species relations shape their evolutionary
    strategy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将协同进化定义为多个不同生物系谱同时进化的互利策略。一个物种的进化不可能在没有其他物种的情况下进行。在进化过程中，协同进化的物种相互互动，这些物种间的关系塑造了它们的进化策略。
- en: 'There are three main types of co-evolution:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 存在三种主要的协同进化类型：
- en: '**Mutualism** is when two or more species coexist and mutually benefit each
    other.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互利共生**是指两种或更多物种共存并相互受益。'
- en: '**Competitive co-evolution**:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**竞争性协同进化**：'
- en: '**Predation** is when one organism kills another and consumes its resources.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捕食**是指一个生物体杀死另一个生物体并消耗其资源。'
- en: '**Parasitism** is when one organism exploits the resources of another but does
    not kill it.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**寄生**是指一个生物体利用另一个生物体的资源，但不会杀死它。'
- en: '**Commensalism** is when the members of one species benefit from another species
    without causing harm or benefits to the other species.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共生**是指一种物种的成员从另一种物种中受益，而不对另一种物种造成伤害或利益。'
- en: Each type of co-evolution strategy has been explored by researchers, and they
    have pros and cons for use as guiding principles of the neuroevolution process.
    However, a group of researchers recently explored the commensalism strategy as
    a guiding principle for neuroevolution and achieved promising results. They created
    the SAFE algorithm, which we will discuss in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 研究人员已经探索了每种协同进化策略，它们作为神经进化过程的指导原则各有优缺点。然而，最近有一组研究人员探索了共生策略作为神经进化的指导原则，并取得了有希望的结果。他们创建了SAFE算法，我们将在本章中讨论。
- en: For more details on the SAFE algorithm, please refer to the original publication
    at [https://doi.org/10.1007/978-3-030-16670-0_10](https://doi.org/10.1007/978-3-030-16670-0_10).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于SAFE算法的更多细节，请参阅原始出版物[https://doi.org/10.1007/978-3-030-16670-0_10](https://doi.org/10.1007/978-3-030-16670-0_10)。
- en: Now that we have covered the common types of co-evolution, let's discuss the
    SAFE method in detail.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了常见的协同进化类型，让我们详细讨论SAFE方法。
- en: SAFE method
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SAFE方法
- en: 'As the name suggests, the SAFE method is about the co-evolution of the solution
    and the fitness function, which guides the solution search optimization. The SAFE
    method is built around the *commensalistic* co-evolution strategy of two populations:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，SAFE方法涉及解决方案和适应度函数的协同进化，这引导了解决方案搜索优化。SAFE方法围绕两个种群之间的*共生*协同进化策略构建：
- en: The population of potential solutions, which evolve to solve the problem at
    hand
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那些进化以解决当前问题的潜在解决方案种群
- en: The population of objective function candidates, which evolve to guide the evolution
    of the solution population
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那些进化以引导解决方案种群进化的目标函数候选种群
- en: In this book, we have already discussed several search optimization strategies
    that can be used to guide the evolution of potential solution candidates. These
    strategies are objective-based fitness optimization and Novelty Search optimization.
    The former optimization strategy is perfect in situations when we have a plain
    fitness function landscape and can concentrate our optimization search on the
    ultimate goal. In this case, we can use the objective-based metric, which evaluates,
    in each epoch of evolution, how close our current solution is to the destination.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们已经讨论了几种可以用来指导潜在解决方案进化过程的搜索优化策略。这些策略是基于目标函数的适应度优化和新颖搜索优化。前一种优化策略在适应度函数景观简单的情况下非常完美，我们可以将优化搜索集中在最终目标上。在这种情况下，我们可以使用基于目标的度量标准，它评估在每个进化时代，我们的当前解决方案与目标有多接近。
- en: The Novelty Search optimization strategy is different. In this strategy, we
    are not interested in the proximity to the ultimate goal, but instead, we are
    concerned mostly about the path that the candidate solutions take. The central
    idea behind the Novelty Search method is to gradually explore the stepping stones,
    which finally lead to the destination. This optimization strategy is ideal for
    situations in which we have an intricate fitness function landscape with many
    deceptive dead ends and local optima.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 新颖搜索优化策略是不同的。在这个策略中，我们并不关心候选解与最终目标的接近程度，而是主要关注候选解所采取的路径。新颖搜索方法背后的核心思想是逐步探索垫脚石，最终引导到目的地。这种优化策略非常适合我们面临的是一个复杂度高的适应度函数景观，其中有许多误导性的死胡同和局部最优解的情况。
- en: Thus, the main idea behind the SAFE method is to benefit from both search optimization
    methods mentioned here. Hereafter, we will discuss the modified maze experiment,
    which uses both search optimization methods mentioned here to guide the neuroevolution
    process.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，SAFE方法背后的主要思想是利用这里提到的两种搜索优化方法的优势。接下来，我们将讨论修改后的迷宫实验，该实验使用这里提到的两种搜索优化方法来指导神经进化过程。
- en: Modified maze experiment
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改后的迷宫实验
- en: We have already discussed in this book how to apply either the objective-based
    search optimization or Novelty Search optimization methods to the problem of solving
    a maze. In this chapter, we introduce a modified maze-solving experiment in which
    we try to combine both search optimization methods using the SAFE algorithm.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本书中讨论了如何将基于目标的搜索优化或新颖搜索优化方法应用于解决迷宫的问题。在本章中，我们介绍了一种修改后的迷宫解决实验，我们尝试使用SAFE算法结合这两种搜索优化方法。
- en: 'We introduce the co-evolution of two populations: a population of maze-solving
    agents and a population of objective function candidates. Following the SAFE method,
    we use a commensalistic co-evolution strategy in our experiment. Let''s first
    discuss the maze-solving agent.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了两个种群之间的协同进化：一个是迷宫解决代理种群，另一个是目标函数候选种群。遵循SAFE方法，我们在实验中采用了一种共生协同进化策略。让我们首先讨论迷宫解决代理。
- en: The maze-solving agent
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫解决代理
- en: 'The maze-solving agent is equipped with a set of sensors, allowing it to perceive
    the maze environment and to know the direction to the maze exit at each step.
    The configuration of the sensors is shown in the following diagram:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫解决代理配备了一套传感器，使其能够感知迷宫环境，并在每一步知道迷宫出口的方向。传感器的配置如下所示：
- en: '![](img/2fa62210-89a3-4c3e-83eb-2ea33a48e645.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2fa62210-89a3-4c3e-83eb-2ea33a48e645.png)'
- en: The maze-solving agent's sensor configuration
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫解决代理的传感器配置
- en: In the preceding diagram, the dark arrows define the range-finder sensors allowing
    the agent to perceive obstacles and find the distance to the obstacle in the given
    direction. The four sectors drawn around the robot's body are pie-slice radars,
    which detect the direction to the maze exit in each time step. The light arrow
    inside the robot's body determines the direction in which the robot is facing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，暗箭头定义了测距传感器的作用范围，允许代理感知障碍物并找到给定方向上的障碍物距离。围绕机器人身体的四个区域是扇形雷达，它们在每个时间步检测迷宫出口的方向。机器人身体内部的浅箭头确定机器人面向的方向。
- en: 'Also, the robot has two actuators: one to change its angular velocity (rotation)
    and another to change its linear velocity.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，机器人有两个执行器：一个用于改变其角速度（旋转），另一个用于改变其线性速度。
- en: We use the same robot configuration that we used in [Chapter 5](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml),
    *Autonomous Maze Navigation*. Thus, you should refer to that chapter for more
    details. Now that we have covered the maze-solving agent, let's look at the maze
    environment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与[第5章](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml)，*自主迷宫导航*中相同的机器人配置。因此，您应该参考该章节以获取更多详细信息。现在我们已经涵盖了迷宫求解代理，让我们来看看迷宫环境。
- en: The maze environment
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫环境
- en: 'The maze is defined as an area enclosed by walls from the outside. Inside the
    maze, multiple internal walls create multiple dead ends with local fitness optima,
    which makes objective-oriented optimization search not very effective. Furthermore,
    due to the local fitness optima, objective-based search agents can get stuck inside
    a particular dead end, halting the evolution process completely. The dead ends
    are shown in the following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫被定义为由外部墙壁包围的区域。在迷宫内部，多个内部墙壁创建了多个局部适应度最优的死胡同，这使得以目标为导向的优化搜索不太有效。此外，由于局部适应度最优值，基于目标的搜索代理可能会陷入特定的死胡同，完全停止进化过程。死胡同在以下图中显示：
- en: '![](img/d638be6b-cb23-4f8c-85b4-2cceb6bb9397.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d638be6b-cb23-4f8c-85b4-2cceb6bb9397.png)'
- en: The local optima areas within the maze
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫中的局部最优区域
- en: In the preceding diagram, the solving agent's starting position is marked by
    a filled circle in the bottom-left corner, and the maze exit is marked by the
    filled circle in the top-left corner. The deceptive local fitness optima values
    are shown as filled sectors the agent's start position.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，求解代理的起始位置用左下角的实心圆圈标记，迷宫出口用左上角的实心圆圈标记。欺骗性的局部适应度最优值以实心扇区形式显示在代理的起始位置。
- en: The maze environment is defined through the configuration file, and we have
    implemented the simulator to simulate the solving agent's traversal through the
    maze. We discussed the maze simulator environment implementation in [Chapter 5](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml),
    *Autonomous Maze Navigation*, and you can refer to it for the particulars.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫环境通过配置文件定义，我们已经实现了模拟器来模拟求解代理在迷宫中的遍历。我们已在[第5章](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml)，*自主迷宫导航*中讨论了迷宫模拟器环境的实现，您可以参考该章节以获取详细信息。
- en: In this chapter, we discuss the modifications that were introduced into the
    original experiment to implement the SAFE optimization strategy. The most critical
    difference is how the fitness function is defined, and we discuss that in the
    next section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了引入到原始实验中的修改，以实现SAFE优化策略。最关键的区别在于适应度函数的定义，我们将在下一节中讨论。
- en: You can check out the complete implementation details of the maze simulator
    environment in the source code at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_environment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_environment.py).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在源代码中查看迷宫模拟器环境的完整实现细节，网址为[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_environment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_environment.py)。
- en: Fitness function definition
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适应度函数定义
- en: 'The SAFE method is about the co-evolution of solution candidates and the objective
    function candidates, that is, we have two co-evolving populations of species.
    Thus, we need to define two fitness functions: one for the solution candidates
    (maze solvers) and another for objective function candidates. In this section,
    we discuss both variants.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SAFE方法涉及解决方案候选者和目标函数候选者的共同进化，也就是说，我们有两种共同进化的种群。因此，我们需要定义两个适应度函数：一个用于解决方案候选者（迷宫求解器），另一个用于目标函数候选者。在本节中，我们讨论了这两种变体。
- en: Fitness function for maze solvers
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In every generation of the evolution, each solution individual (maze solver)
    is evaluated against all objective function candidates. We use the maximum fitness
    score obtained during the evaluation of a maze solver against each objective function
    candidate as a fitness score of the solution.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The fitness function of the maze solver is an aggregate of two metrics—the distance
    from the maze exit (the objective-based score) and the novelty of the solver's
    final position (the novelty score). These scores are arithmetically combined using
    a pair of coefficients obtained as an output from the particular individual in
    the objective function candidate's population.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'The following formula gives the combination of these scores as a fitness score:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99dd6cf2-6a2e-4556-8ed8-5425e150abf8.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: '![](img/3503325b-6d31-41e2-b0f0-6a834628f697.png) is the fitness values obtained
    by the evaluation of the solution candidate, ![](img/123669da-9593-4d08-8241-5ff4cfac875e.png),
    against the objective function, ![](img/e453f8b3-5790-49f1-a05f-0c51d6a62f68.png).
    The pair of the coefficients used, ![](img/53c7b36c-1a65-4a9f-8595-ca7a756e87a3.png),
    is the output of the particular objective function candidate. This pair determines
    how the distance to the maze exit (![](img/624adf98-48ae-4495-99e3-5530a8419e25.png))
    and the behavioral novelty (![](img/d029abbb-a6c9-40ab-9c34-a925f61ccac2.png))
    of the solution influence the ultimate fitness score of the maze solver at the
    end of the trajectory.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'The distance to the maze exit (![](img/da936b97-ef1d-4664-b1c0-5b345b1d4584.png))
    is determined as the Euclidean distance between the maze solver''s final coordinates
    and the maze exit coordinates. This is shown in the following formula:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f31a6a7-a7d2-4f25-8104-1dde6650c8d4.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: '![](img/3e37f415-f49c-4e25-b2b7-bc6da6ba6cb5.png) and ![](img/3867c95c-8ab2-45a4-a478-67c68f75eef7.png)
    are the final coordinates of the maze solver, and ![](img/2f68814d-b56a-4612-beda-2b10ad0268fd.png)
    and ![](img/969ad1ef-bfbf-4e2d-a978-e474b87b9d20.png) are the coordinates of the
    maze exit.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The novelty score, ![](img/04896aaa-ddc1-4b2a-a092-523c6d720d2f.png), of each
    maze solver is determined by its final position in the maze (point ![](img/e73f9cc2-2135-4af1-a181-cf88e46c68e6.png)).
    It is calculated as the average distance from this point to the k-nearest neighbor
    points, which are the final positions of the other maze solvers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'The following formula gives the novelty score value at point *x* of the behavioral
    space:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a0e787f-c22c-48ee-9cf9-c45937899fcc.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: '![](img/ee826d80-17a8-43ca-b909-3da2823ca5e6.png) is the i-th nearest neighbor
    of ![](img/ba9a13e6-7f4d-4fa9-90a9-b46b55b0734b.png), and ![](img/669712d0-2d48-42c2-9474-6e2c62206052.png)
    is the distance between ![](img/1bae89af-0a10-4b72-ad2d-576c0ae140a1.png) and
    ![](img/a9776135-ca81-445d-b2fd-a900c50f2d65.png).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The distance between two points is the novelty metric measuring how different
    the current solution (![](img/7178d7f4-99f7-4bb3-bbc1-5b18e3af1c14.png)) is from
    another (![](img/21fafe7a-1559-41b7-b414-fcfa2f9bdb4a.png)) produced by different
    maze solvers. The novelty metric is calculated as the Euclidean distance between
    two points:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 两点之间的距离是新颖度度量，衡量当前解决方案（![](img/7178d7f4-99f7-4bb3-bbc1-5b18e3af1c14.png)）与由不同迷宫求解者产生的另一个（![](img/21fafe7a-1559-41b7-b414-fcfa2f9bdb4a.png)）之间的差异。新颖度度量是两点之间的欧几里得距离：
- en: '![](img/217974f3-7c7b-4cbc-8fa3-8f326324d2af.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/217974f3-7c7b-4cbc-8fa3-8f326324d2af.png)'
- en: '![](img/5d45a339-7baa-4ae5-9d60-ab120d7b2472.png) and ![](img/4b5ba532-39df-4eba-b232-393c6597ed1b.png)
    are the values at position ![](img/19ab567e-e72f-438e-b07c-799a073fbe44.png) of
    the coordinate vectors holding coordinates of the ![](img/8f5c16cc-d11d-4bc6-b4f4-c89d32720229.png)
    and ![](img/32cb7134-f8c8-4fd1-8305-87feb5b67701.png) points correspondingly.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/5d45a339-7baa-4ae5-9d60-ab120d7b2472.png) 和 ![](img/4b5ba532-39df-4eba-b232-393c6597ed1b.png)
    分别是坐标向量中持有 ![](img/8f5c16cc-d11d-4bc6-b4f4-c89d32720229.png) 和 ![](img/32cb7134-f8c8-4fd1-8305-87feb5b67701.png)
    点坐标的位置 ![](img/19ab567e-e72f-438e-b07c-799a073fbe44.png) 的值。'
- en: Next, we discuss how to define the fitness function for the optimization of
    the objective function candidates.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何定义目标函数候选者优化的适应度函数。
- en: Fitness function for the objective function candidates
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标函数候选者的适应度函数
- en: The SAFE method is based on a commensalistic co-evolutionary approach, which
    means that one of the co-evolving populations neither benefits nor is harmed during
    the evolution. In our experiment, the commensalistic population is the population
    of the objective function candidates. For this population, we need to define a
    fitness function that is independent of the performance of the maze-solver population.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SAFE方法基于一种互利共生协同进化方法，这意味着在进化过程中，其中一个协同进化的种群既不受益也不受损。在我们的实验中，互利共生的种群是目标函数候选者的种群。对于这个种群，我们需要定义一个与迷宫求解者种群性能无关的适应度函数。
- en: A suitable candidate for such a function is a fitness function that uses the
    novelty score as the fitness score to be optimized. The formula to calculate the
    novelty score of each objective function candidate is the same as given for the
    maze solvers. The only difference is that in the case of the objective function
    candidates, we calculate the novelty score using vectors with the output values
    of each individual. After that, we use the novelty score value as the fitness
    score of the individual.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的函数候选者是一个使用新颖度评分作为要优化的适应度评分的适应度函数。计算每个目标函数候选者新颖度评分的公式与迷宫求解者给出的相同。唯一的区别是，在目标函数候选者的案例中，我们使用每个个体的输出值向量来计算新颖度评分。之后，我们使用新颖度评分值作为个体的适应度评分。
- en: This method of novelty score estimation is a part of the modified **Novelty
    Search** (**NS**) method, which we discuss in the next section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新颖度评分估计方法是改进的**新颖度搜索**（**NS**）方法的一部分，我们将在下一节中讨论。
- en: Modified Novelty Search
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进的Novelty Search
- en: We presented the NS method in [Chapter 6](62301923-b398-43da-b773-c8b1fe383f1d.xhtml),
    *Novelty Search Optimization Method*. In the current experiment, we use a slightly
    modified version of the NS method, which we discuss next.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第6章](62301923-b398-43da-b773-c8b1fe383f1d.xhtml)，《新颖度搜索优化方法》中介绍了NS方法。在当前实验中，我们使用NS方法的一个略微修改版本，我们将在下一节中讨论。
- en: The modifications to the NS method that we will present in this experiment relate
    to a new way of maintaining the archive of novelty points. The novelty point holds the
    maze solver's location in the maze at the end of the trajectory, which is combined
    with the novelty score.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本次实验中提出的对NS方法的修改与维护新颖度点存档的新方法有关。新颖度点持有迷宫求解者在轨迹末尾在迷宫中的位置，并将其与新颖度评分相结合。
- en: In the more traditional version of the NS method, the size of the novelty archive
    is dynamic, allowing the addition of a specific novel point if its novelty score
    exceeds a certain threshold (the novelty threshold). Also, the novelty threshold
    can be adjusted during runtime, taking into account how fast the new novelty points
    are discovered during the evolution. These adjustments allow us to control the
    maximum size of the archive (to some extent). However, we need to start with an
    initial novelty threshold value, and this choice is not an obvious one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在NS方法的更传统版本中，新颖存档的大小是动态的，如果新颖度得分超过某个阈值（新颖度阈值），则允许添加特定的创新点。此外，新颖度阈值可以在运行时进行调整，考虑到在进化过程中新新颖点的发现速度。这些调整使我们能够控制存档的最大大小（在一定程度上）。然而，我们需要从一个初始新颖度阈值值开始，这个选择并不明显。
- en: The modified NS method introduces the fixed-size novelty archive to address
    the issue of choosing the correct novelty threshold value. The new novelty points
    are added to the archive until it becomes full. After that, a novelty point is
    added to the archive only if its novelty score exceeds the current minimum score
    of the archive by replacing the current point with a minimal score. Thus, we can
    maintain the fixed size of the novelty archive and store in it only the most valuable
    novelty points discovered during the evolution.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的NS方法引入了固定大小的创新存档来解决选择正确新颖度阈值值的问题。新的新颖点被添加到存档中，直到它填满。之后，只有当新颖度得分超过存档当前最小得分时，才会将新颖点添加到存档中，通过用具有最小得分的当前点替换它。这样，我们可以保持新颖存档的固定大小，并在其中仅存储在进化过程中发现的最有价值的新颖点。
- en: The source code of the modified novelty archive implementation can be found
    at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/novelty_archive.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/novelty_archive.py).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的新颖存档实现的源代码可以在[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/novelty_archive.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/novelty_archive.py)找到。
- en: Next, let's discuss the most interesting parts of the implementation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论实现中最有趣的部分。
- en: The _add_novelty_item function
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`_add_novelty_item` 函数'
- en: 'This function allows the addition of new novelty points to the archive while
    maintaining its size. It has the following implementation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能允许在保持其大小的同时向存档中添加新的新颖点。其实现如下：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code first checks whether the size of the novelty archive has not been exceeded
    yet and directly appends a new novelty point to it in this case. Otherwise, a
    new novelty point replaces the last item in the archive, which is the item with
    the smallest novelty score. We can be sure that the last item in the archive has
    the smallest novelty score because after adding a new item to the archive, we
    sort it in descending order of novelty score value.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先检查新颖存档的大小是否尚未超过，在这种情况下直接将新的新颖点附加到其中。否则，一个新的新颖点将替换存档中的最后一个项目，即具有最小新颖度得分的项目。我们可以确信存档中的最后一个项目具有最小的新颖度得分，因为在我们将新项目添加到存档后，我们按新颖度得分值降序排序。
- en: The evaluate_novelty_score function
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`evaluate_novelty_score` 函数'
- en: 'This function provides a mechanism to evaluate the novelty score of the novelty
    item against all items already collected in the novelty archive and all the novelty
    items discovered in the current population. We calculate the novelty score as
    the average distance to the *k=15* nearest neighbors by following these steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数提供了一种机制来评估新颖项目相对于已收集在新颖存档中的所有项目以及当前种群中发现的全部新颖项目的创新度得分。我们按照以下步骤计算新颖度得分，作为到
    *k=15* 个最近邻的平均距离：
- en: 'We need to collect the distances from the provided novelty item to all items
    in the novelty archive:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要收集提供的创新项目与新颖存档中所有项目之间的距离：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, we add the distances from the provided novelty item to all items
    in the current population:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将提供的创新项目与当前种群中的所有项目之间的距离添加到其中：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we can estimate the average k-nearest neighbors value:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以估计平均k-最近邻值：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We sort the list with the distances in ascending order to guarantee that the
    closest items are first in the list. After that, we calculate the sum of the first
    *k=15* items in the list and divide it by the count of summed values. Thus, we
    obtain the value of the average distance to the *k-nearest neighbors*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将列表按距离升序排序，以确保最近的项首先出现在列表中。然后，我们计算列表中前*k=15*项的总和，并将其除以总和值的数量。因此，我们得到到*k-最近邻*的平均距离值。
- en: The modified NS optimization method is at the core of the fitness score evaluation
    for both the population of maze solvers and the population of objective function
    candidates. We use it extensively in the implementation of the experiment runner,
    which we discuss in the next section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的NS优化方法是迷宫求解者种群和目标函数候选者种群适应度评分评估的核心。我们在实验运行器的实现中广泛使用它，我们将在下一节中讨论。
- en: Modified maze experiment implementation
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改后的迷宫实验实现
- en: The implementation of the experiment runner is based on the MultiNEAT Python
    library, which we have used in several experiments in this book. The evolution
    of each co-evolving population is controlled by the basic NEAT algorithm, which
    was discussed in [Chapter 3](7acd0cf5-c389-4e55-93d7-9438fcaa1390.xhtml), *Using
    NEAT for XOR Solver Optimization*, [Chapter 4](34913ccd-6aac-412a-8f54-70d1900cef41.xhtml),
    *Pole-Balancing Experiments*, and [Chapter 5](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml),
    *Autonomous Maze Navigation*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 实验运行器的实现基于MultiNEAT Python库，我们在本书的几个实验中使用了该库。每个协同进化种群的进化由基本NEAT算法控制，该算法在[第3章](7acd0cf5-c389-4e55-93d7-9438fcaa1390.xhtml)，*使用NEAT进行XOR求解器优化*，[第4章](34913ccd-6aac-412a-8f54-70d1900cef41.xhtml)，*杆平衡实验*，和[第5章](22365f85-3003-4b67-8e1e-cc89fa5e259b.xhtml)，*自主迷宫导航*中进行了讨论。
- en: 'However, in this section, we demonstrate how to use the NEAT algorithm to maintain
    the co-evolution of two independent populations of species: the maze solvers and
    the objective function candidates.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本节中，我们展示了如何使用NEAT算法来维持两个独立物种种群（迷宫求解器和目标函数候选者）的协同进化。
- en: Next, we discuss the essential parts of the modified maze experiment runner.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论修改后的迷宫实验运行器的关键部分。
- en: For more details, please refer to the source code at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节，请参阅[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py)的源代码。
- en: Creation of co-evolving populations
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协同进化种群的创建
- en: In this experiment, we need to create two co-evolving populations of species
    with different initial genotype configurations to meet the phenotypic requirements
    of the produced species.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们需要创建两个具有不同初始基因型配置的协同进化的物种种群，以满足产生物种的表型需求。
- en: The phenotype of the maze solver has 11 input nodes to receive signals from
    the sensors and two output nodes to produce control signals. At the same time,
    the phenotype of the objective function candidate has one input node receiving
    the fixed value (`0.5`), which is converted into two output values that are used
    as the fitness function coefficients of the maze solver.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫求解器的表型有11个输入节点来接收来自传感器的信号，以及两个输出节点来产生控制信号。同时，目标函数候选者的表型有一个输入节点接收固定值（`0.5`），该值被转换为两个输出值，用作迷宫求解器的适应度函数系数。
- en: We start with a discussion of how to create the population of the objective
    function candidates.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先讨论如何创建目标函数候选者种群。
- en: Creation of the population of the objective function candidates
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标函数候选者种群的创建
- en: 'The genotype encoding the phenotype of the objective function candidates must
    produce phenotype configurations that have at least one input node and two output
    nodes, as discussed previously. We implement the population creation in the `create_objective_fun`
    function as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 编码目标函数候选者表型的基因型必须产生具有至少一个输入节点和两个输出节点的表型配置，正如之前所讨论的。我们在`create_objective_fun`函数中实现种群创建如下：
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this code, we create the NEAT genotype with one input node, two output nodes,
    and one hidden node. The hidden node is pre-seeded into the initial genome to
    boost the evolution with the pre-defined non-linearity. The activation function
    type of the hidden layer is selected to be hyperbolic tangent to support negative
    output values. This feature is essential for our task. A negative value of one
    of the coefficients produced by the objective function candidate can indicate
    that a particular component of the maze solver fitness function has a negative
    influence, and this sends a signal that the evolution needs to try other paths.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们创建了一个具有一个输入节点、两个输出节点和一个隐藏节点的NEAT基因型。隐藏节点被预先种入初始基因组中以增强进化过程中的预定义非线性。隐藏层的激活函数类型被选为双曲正切，以支持负输出值。这一特性对于我们的任务至关重要。目标函数候选者产生的系数之一为负值可以表明迷宫求解代理适应性函数的特定组成部分具有负面影响，这会发出进化需要尝试其他路径的信号。
- en: In the end, we create the `ObjectiveFun` object to maintain an evolving population
    of the objective function candidates.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建`ObjectiveFun`对象来维护目标函数候选者的进化群体。
- en: Next, we discuss how the population of maze solvers is created.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论迷宫求解代理群体的创建方法。
- en: Creating the population of maze solvers
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建迷宫求解代理的群体
- en: 'The maze-solver agent needs to get inputs from 11 sensors and generate two
    control signals, which affect the angular and linear velocity of the robot. Thus,
    the genome encoding the phenotype of the maze solver must yield phenotype configurations
    that include 11 input nodes and two output nodes. You can see how the creation
    of the initial population of genomes for the maze-solver agent is implemented
    by taking a look at the `create_robot` function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫求解代理需要从11个传感器获取输入并生成两个控制信号，这些信号影响机器人的角速度和线速度。因此，编码迷宫求解代理表型的基因组必须产生包含11个输入节点和两个输出节点的表型配置。您可以通过查看`create_robot`函数来了解迷宫求解代理初始基因组群体的创建过程：
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the code, we obtain the appropriate NEAT hyperparameters from the `create_robot_params`
    function. After that, we use them to create an initial NEAT genotype with the
    corresponding number of input and output nodes. Finally, we create a `Robot` object,
    which encapsulates all the data related to the maze-solver population, along with
    the maze simulator environment.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们从`create_robot_params`函数中获取适当的NEAT超参数。之后，我们使用它们来创建具有相应数量输入和输出节点的初始NEAT基因型。最后，我们创建一个`Robot`对象，它封装了与迷宫求解代理群体相关的所有数据，以及迷宫模拟环境。
- en: Now, when we have created the two co-evolving populations, we need to implement
    the fitness score evaluation for individuals in both populations. We discuss the
    implementation details of the fitness score evaluation in the next section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们创建了两个协同进化的群体后，我们需要实现两个群体中个体的适应性分数评估。我们将在下一节中讨论适应性分数评估的实现细节。
- en: The fitness evaluation of the co-evolving populations
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协同进化群体的适应性评估
- en: Having defined the two co-evolving populations, we need to create functions
    to evaluate the fitness scores of the individuals in each population. As we have
    already mentioned, the fitness scores of the individuals in the maze-solver population
    depend on the outputs produced by the population of objective function candidates.
    At the same time, the fitness score of each objective function candidate is wholly
    determined by the novelty score of that individual.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 已经定义了两个协同进化的群体后，我们需要创建函数来评估每个群体中个体的适应性分数。正如我们之前提到的，迷宫求解代理群体中个体的适应性分数取决于目标函数候选者群体产生的输出。同时，每个目标函数候选者的适应性分数完全由该个体的新颖性分数决定。
- en: Thus, we have two different approaches to the evaluation of fitness scores,
    and we need to implement two different functions. Hereafter, we discuss both implementations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有两种不同的方法来评估适应性分数，我们需要实现两个不同的函数。以下我们将讨论这两种实现方法。
- en: Fitness evaluation of objective function candidates
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标函数候选者的适应性评估
- en: 'The fitness score of each individual in the population of the objective function
    candidates is determined by its novelty score, which is calculated as we discussed
    previously. The implementation of the fitness score evaluation is divided between
    two functions: `evaluate_obj_functions` and `evaluate_individ_obj_function`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数候选者群体中每个个体的适应性分数由其新颖性分数决定，该分数的计算方法我们之前已经讨论过。适应性分数评估的实现被分为两个函数：`evaluate_obj_functions`和`evaluate_individ_obj_function`。
- en: Next, we discuss the implementations of both functions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论这两个函数的实现。
- en: The evaluate_obj_functions function implementation
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`evaluate_obj_functions` 函数实现'
- en: 'This function accepts the `ObjectiveFun` object, which holds the population
    of the objective function candidates, and uses it to estimate the fitness score
    of each individual in the population by following these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受 `ObjectiveFun` 对象，该对象包含目标函数候选者的种群，并使用它通过以下步骤来估计种群中每个个体的适应度分数：
- en: 'First, we iterate over all genomes in the population and collect the novelty
    points for each genome:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们遍历种群中的所有基因组，并为每个基因组收集新颖性点：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the code, the novelty points obtained from the `evaluate_individ_obj_function`
    function are appended to the list of novelty points in the population. Also, we
    append novelty point data to the list of coefficient pairs. The list of coefficient
    pairs later will be used to estimate the fitness scores of the individual maze
    solvers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，从 `evaluate_individ_obj_function` 函数获得的新颖性点被追加到种群新颖性点列表中。此外，我们将新颖性点数据追加到系数对列表中。该系数对列表将用于估计个体迷宫求解器的适应度分数。
- en: 'Next, we iterate over the list of population genomes and evaluate the novelty
    score of each genome using the novelty points collected in the previous step:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们遍历种群基因组的列表，并使用上一步收集到的新颖性点来评估每个基因组的 novelty 分数：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The novelty score estimated using the novelty points are already collected in
    the novelty archive and the list of the novelty points created for the current
    population. After that, we set the estimated novelty score as the fitness score
    of the corresponding genome. Furthermore, we find the maximum value of the fitness
    score and return it, along with the list of coefficient pairs.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新颖性点估计的新颖性分数已经收集在新颖性存档中和为当前种群创建的新颖性点列表中。之后，我们将估计的新颖性分数设置为相应基因组的适应度分数。此外，我们找到适应度分数的最大值，并返回它，以及系数对列表。
- en: The evaluate_individ_obj_function function implementation
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`evaluate_individ_obj_function` 函数实现'
- en: 'This function accepts the individual NEAT genome of the objective function
    candidate and returns the novelty point evaluation results. We implement it as
    follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受目标函数候选者的个体 NEAT 基因组，并返回新颖性点评估结果。我们按以下方式实现它：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We start with the creation of a `NoveltyItem` object to hold the novelty point
    data for a given genome. After that, we build a phenotype ANN and activate it
    with an input of `0.5`. Finally, we use the outputs from the ANN to create the
    novelty point.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个 `NoveltyItem` 对象开始，以保存给定基因组的 novelty 点数据。之后，我们构建一个表型人工神经网络（ANN）并用输入
    `0.5` 激活它。最后，我们使用 ANN 的输出创建 novelty 点。
- en: In the next section, we discuss the fitness score evaluation of the individuals
    in the maze-solver population.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论迷宫求解种群中个体的适应度分数评估。
- en: Fitness evaluation of the maze-solver agents
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫求解代理的适应度评估
- en: 'We estimate the fitness score of each individual in the maze-solver population
    as a compound consisting of two components: the novelty score and the distance
    to the maze exit at the end of the trajectory. The influence of each component
    is controlled by a coefficient pair produced by the individuals from the population
    of the objective function candidates.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将迷宫求解种群中每个个体的适应度分数估计为一个由两个组成部分组成的复合体：新颖性分数和轨迹结束时到达迷宫出口的距离。每个组成部分的影响由目标函数候选者种群中个体产生的系数对控制。
- en: The fitness score evaluation is divided into three functions, which we are going
    to discuss next.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 适应度分数评估分为三个函数，我们将在下面讨论。
- en: The evaluate_solutions function implementation
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`evaluate_solutions` 函数实现'
- en: The `evaluate_solutions` function receives the `Robot` object as an input parameter,
    which maintains the population of the maze-solver agent and the maze environment
    simulator. Also, it receives a list of the coefficient pairs generated during
    the evaluation of the population of objective function candidates.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`evaluate_solutions` 函数接收 `Robot` 对象作为输入参数，该对象维护迷宫求解代理的种群和迷宫环境模拟器。它还接收在评估目标函数候选者种群期间生成的系数对列表。'
- en: 'We use the input parameters of the function to evaluate each genome in the
    population and to estimate its fitness function. Here, we discuss the essential
    implementation details:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用函数的输入参数来评估种群中的每个基因组，并估计其适应度函数。在这里，我们讨论基本实现细节：
- en: 'First, we evaluate each individual in the population against the maze simulator
    and find the distance to the maze exit at the end of the trajectory:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将种群中的每个个体与迷宫模拟器进行评估，并找到轨迹末尾到迷宫出口的距离：
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we iterate over all genomes in the population and estimate the novelty
    score of each individual. Also, we use the corresponding distance to the maze
    exit collected before and combine it with the calculated novelty score to evaluate
    genome fitness:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们遍历种群中的所有基因，并估计每个个体的新颖度得分。同时，我们使用之前收集的相应的到迷宫出口的距离，并将其与计算出的新颖度得分结合起来，以评估基因的适应度：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the first half of the code, we use the `robot.archive.evaluate_novelty_score`
    function to estimate the novelty score of each individual in the population. The
    second half invokes the `evaluate_solution_fitness` function to estimate the fitness
    score of each individual using the novelty score and the distance to the maze
    exit.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的前半部分，我们使用`robot.archive.evaluate_novelty_score`函数来估计种群中每个个体的新颖度得分。后半部分调用`evaluate_solution_fitness`函数，使用新颖度得分和到迷宫出口的距离来估计每个个体的适应度得分。
- en: 'Finally, we collect evaluation statistics about the performance of the best
    maze-solver genome in the population:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们收集关于种群中最佳迷宫求解器基因的性能评估统计数据：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the end, all statistics collected during population evaluation are returned
    by the function.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，函数返回在种群评估过程中收集的所有统计数据。
- en: Hereafter, we discuss how the individual maze-solver genome is evaluated against
    the maze environment simulator.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，我们讨论如何评估个体迷宫求解器基因相对于迷宫环境模拟器。
- en: The evaluate_individual_solution function implementation
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`evaluate_individual_solution`函数的实现'
- en: 'This is the function that evaluates the performance of a particular maze solver
    against the maze environment simulator. It is implemented as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是评估特定迷宫求解器相对于迷宫环境模拟器性能的函数。其实现如下：
- en: 'First, we create the phenotype ANN of the maze solver and use it as a controller
    to guide the robot through the maze:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建迷宫求解器的表型人工神经网络（ANN），并将其用作控制器来引导机器人穿越迷宫：
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the code, we create a `NoveltyItem` object to hold the novelty point, which
    is defined by the robot's final position in the maze. After that, we create the
    phenotype ANN and run the maze simulator, using it as the control ANN for a given
    number of time steps (400). After a simulation completes, we receive the distance
    between the final position of the maze solver and the maze exit.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们创建一个`NoveltyItem`对象来保存创新点，该创新点由机器人在迷宫中的最终位置定义。之后，我们创建表型ANN并运行迷宫模拟器，将其用作控制ANN进行给定数量的时间步（400）。模拟完成后，我们接收迷宫求解器最终位置与迷宫出口之间的距离。
- en: 'Next, we save the simulation statistics into the `AgentRecord` object that
    we analyze at the end of the experiment:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将模拟统计信息保存到我们在实验结束时分析的`AgentRecord`对象中：
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After that, the function returns a tuple with the following values: a flag
    indicating whether we have found a solution, the distance to the maze exit at
    the end of the robot''s trajectory, and the `NoveltyItem` object encapsulating
    information about the novelty point discovered.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，该函数返回一个包含以下值的元组：一个标志，指示我们是否找到了解决方案，机器人轨迹末尾到迷宫出口的距离，以及封装有关发现的创新点信息的`NoveltyItem`对象。
- en: In the next section, we discuss the implementation of the maze-solver fitness
    function.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们讨论迷宫求解器适应度函数的实现。
- en: The evaluate_solution_fitness function implementation
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`evaluate_solution_fitness`函数的实现'
- en: 'This function is an implementation of the maze-solver fitness function that
    we discussed earlier. This function receives the distance to the maze exit, the
    novelty score, and the list of coefficient pairs generated by the current generation
    of the objective function candidates. Next, it uses the received input parameters
    to calculate the fitness score as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数是实现我们之前讨论过的迷宫求解器适应度函数。该函数接收到迷宫出口的距离、新颖度得分以及当前目标函数候选者生成器生成的系数对列表。然后，它使用接收到的输入参数来计算适应度得分，如下所示：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, we need to normalize the distance and the novelty score values using
    the natural logarithm. This normalization will guarantee that the distance and
    novelty score values are always on the same scale. It is essential to have these
    values on the same scale because the coefficient pair is always in the range `[0,1]`.
    Thus, if the values of distance and novelty score have different scales, a pair
    of coefficients will not be unable to influence the significance of each value
    when calculating the fitness score.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用自然对数对距离和新颖度得分值进行归一化。这种归一化将保证距离和新颖度得分值始终处于相同的尺度。确保这些值处于相同的尺度是必要的，因为系数对始终在范围
    `[0,1]` 内。因此，如果距离和新颖度得分值具有不同的尺度，一对系数将无法在计算适应度分数时影响每个值的显著性。
- en: The code iterates over the list of coefficients pairs and, for each pair of
    coefficients, it calculates the fitness score by combining the distance and the
    novelty score values.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 代码遍历系数对的列表，并对每一对系数，通过结合距离和新颖度得分值来计算适应度分数。
- en: The ultimate fitness score of the maze solver is the maximum among all found
    fitness scores. This value and the corresponding pair of coefficients are then
    returned by the function.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫求解器的最终适应度分数是所有找到的适应度分数中的最大值。然后，该值和相应的系数对由函数返回。
- en: The modified maze experiment runner
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改后的迷宫实验运行器
- en: Now, when we have implemented all the necessary routines to create co-evolving
    populations and to evaluate the fitness of individuals within these populations,
    we are ready to start implementing the experiment runner loop.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们已经实现了创建共同进化种群和评估这些种群中个体适应度的所有必要程序后，我们就可以开始实现实验运行器循环了。
- en: The complete details can be found in the `run_experiment` function in the `maze_experiment_safe.py`
    file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的细节可以在`maze_experiment_safe.py`文件中的`run_experiment`函数中找到，该文件位于[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/maze_experiment_safe.py)。
- en: 'Here, we discuss the essential details of the implementation:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们讨论实现的关键细节：
- en: 'We start with the creation of the corresponding populations of the co-evolving
    species:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从创建共同进化的物种对应种群开始：
- en: '[PRE15]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we start the evolution loop and evaluate both populations as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们开始进化循环，并如下评估两个种群：
- en: '[PRE16]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After evaluating the populations, we save the results as statistics of the
    current generation of the evolution:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在评估种群之后，我们将当前进化代的结果保存为统计数据：
- en: '[PRE17]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At the end of the evolution loop, we signal to both populations to advance
    to the next epoch if the solution has not been found in the current generation:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进化循环结束时，如果当前代未找到解决方案，我们向两个种群发出信号，使其进入下一个时代：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After the evolution loop completes its iteration over a specified number of
    generations, we visualize the collected maze records:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进化循环完成对指定代数的迭代后，我们可视化收集到的迷宫记录：
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The maze records mentioned here hold the statistics of the evaluation of each
    maze-solver genome in the maze simulator collected during the evolution as `AgentRecord`
    objects. In the visualization, we render the final position of each evaluated
    maze solver with the maze.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的迷宫记录包含在进化过程中收集的迷宫模拟器中每个迷宫求解器基因组的评估统计数据，作为`AgentRecord`对象。在可视化中，我们使用迷宫绘制每个评估的迷宫求解器的最终位置。
- en: 'Next, we simulate maze solving with the control ANN, which was created using
    the best solver genome found during the evolution. The trajectory of the maze
    solver during the simulation can be visualized as follows:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用在进化过程中找到的最佳求解器基因组创建的控制ANN进行迷宫求解模拟。迷宫求解器在模拟过程中的轨迹可以如下可视化：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: At first, the code creates a phenotype ANN from the best solver genome. Next,
    it runs the maze simulator using the created phenotype ANN as the maze solver
    controller. We then render the collected trajectory points of the maze solver.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，代码从最佳求解器基因组创建一个表型人工神经网络（ANN）。然后，它使用创建的表型ANN作为迷宫求解器控制器运行迷宫模拟器。我们随后绘制迷宫求解器的收集轨迹点。
- en: 'Finally, we render the plot with the average fitness scores per generation
    as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们以下列方式绘制每代的平均适应度分数图：
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: All the visualizations mentioned here are also saved into the local filesystem
    as SVG files and can be used later for result analysis.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的所有可视化内容也都以SVG文件的形式保存在本地文件系统中，以后可用于结果分析。
- en: In the next section, we discuss how to run the modified maze experiment and
    the results of the experiment.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论如何运行修改后的迷宫实验以及实验结果。
- en: Modified maze experiment
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改后的迷宫实验
- en: We are almost ready to start the experiment with co-evolution using the modified
    maze experiment. However, before that, we need to discuss the hyperparameter selection
    for each co-evolving population.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎准备好使用修改后的迷宫实验开始协同进化实验。然而，在那之前，我们需要讨论每个协同进化种群的超参数选择。
- en: Hyperparameters for the maze-solver population
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫求解器种群的超参数
- en: 'For this experiment, we choose to use the MultiNEAT Python library, which uses
    the `Parameters` Python class to maintain a list of all supported hyperparameters.
    The initialization of the hyperparameters for the population of maze solvers is
    defined in the `create_robot_params` function. Next, we discuss the essential
    hyperparameters and the reasons behind choosing particular values for them:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，我们选择使用MultiNEAT Python库，该库使用`Parameters` Python类来维护所有支持的超参数列表。迷宫求解器种群的超参数初始化在`create_robot_params`函数中定义。接下来，我们将讨论关键超参数及其选择特定值的原因：
- en: 'We decided to have a medium-sized population providing sufficient population
    diversity from the very beginning:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们决定从一开始就有一个中等大小的种群，以提供足够的种群多样性：
- en: '[PRE22]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We are interested in producing a compact genome topology during the evolution
    and limiting the number of species within the population. Thus, we have defined
    tiny probabilities for adding new nodes and connections during the evolution:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们对在进化过程中产生紧凑的基因组拓扑结构以及限制种群中物种数量感兴趣。因此，我们在进化过程中定义了非常小的添加新节点和连接的概率：
- en: '[PRE23]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The novelty score rewards finding unique positions in the maze. One way to
    achieve this is to intensify the numerical dynamics within the phenotype. Thus,
    we have increased the range of connection weights:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新颖度得分奖励在迷宫中找到独特位置。实现这一目标的一种方法是在表型中增强数值动力学。因此，我们增加了连接权重的范围：
- en: '[PRE24]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To support the evolutionary process, we choose to introduce elitism by defining
    the ratio of the genomes to be transferred to the next generation:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了支持进化过程，我们选择通过定义传递到下一代基因组的比例来引入精英主义：
- en: '[PRE25]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The elitism value determines that about one-tenth of the individuals will be
    carried to the next generation.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 精英主义值决定了大约十分之一的个体将被带到下一代。
- en: Hyperparameters for the objective function candidates population
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标函数候选种群的超参数
- en: 'We create the hyperparameters for the evolution of the population of objective
    function candidates in the `create_objective_fun_params` function. Here, we discuss
    the most critical hyperparameters:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`create_objective_fun_params`函数中为客观函数候选种群的进化创建超参数。在这里，我们讨论最重要的超参数：
- en: 'We decided to start with a small population to reduce computational costs.
    Also, the genotypes of the objective function candidate are not expected to be
    very complicated. Thus, a small population should be sufficient:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们决定从一个小的种群开始，以减少计算成本。此外，预期目标函数候选的基因型不会非常复杂。因此，一个小种群应该足够：
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As with the maze solvers, we are interested in producing compact genomes. Thus,
    the probabilities of adding new nodes and connections are kept very small:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与迷宫求解器类似，我们感兴趣的是产生紧凑的基因组。因此，添加新节点和连接的概率保持非常小：
- en: '[PRE27]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We are not expecting a complicated topology of genomes in the population of
    the objective function candidates. Thus, most of the hyperparameters are set to
    default values.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不期望目标函数候选种群中的基因组拓扑结构复杂。因此，大多数超参数都设置为默认值。
- en: Working environment setup
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作环境设置
- en: 'In this experiment, we use the MultiNEAT Python library. Thus, we need to create
    an appropriate Python environment, which includes this library and other dependencies.
    You can set up the Python environment with the help of Anaconda with the following
    commands:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们使用MultiNEAT Python库。因此，我们需要创建一个合适的Python环境，其中包括这个库和其他依赖项。您可以使用以下命令在Anaconda的帮助下设置Python环境：
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: These commands create the `maze_co` virtual environment with Python 3.5 and
    install all necessary dependencies into it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令创建了一个使用Python 3.5的`maze_co`虚拟环境，并将所有必要的依赖项安装到其中。
- en: Running the modified maze experiment
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行修改后的迷宫实验
- en: 'Now, we are ready to run the experiment in the newly created virtual environment.
    You can start the experiment by cloning the corresponding Git repository and running
    the script with the following commands:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Do not forget to activate the appropriate virtual environment with the `conda
    activate maze_co` command.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command starts one trial of the experiment for `150` generations
    of evolution using the medium-complexity maze configuration. After about `100`
    generations of evolution, a successful solution is discovered by the neuroevolution
    process, and you should be able to see the following output in the console:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: From the output presented here, you can see that a successful maze solver was
    found at generation `105` and was able to solve the maze in 338 steps from the
    allotted 400\. Also, it is interesting to note that the coefficient pair produced
    by the best objective function candidate gives slightly more importance to the
    novelty score component of the maze-solver fitness function.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'It is interesting to take a look at the plot of the best fitness scores per
    generation:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/812c2596-9516-4ca5-a854-6f90a391fa61.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: The fitness scores per generation
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding plot, you can see that the best fitness score has a maximum
    in the early generations of evolution. This is due to the high novelty score values,
    which are easier to obtain at the beginning of the evolution because there are
    many maze areas that have not been explored. Another essential point to note is
    that the average distance to the maze exit remains almost at the same level for
    most of the generations of evolution. Thus, we can assume that the correct solution
    was found not by gradual improvements, but rather by a quality leap of the champion
    genome. This conclusion is also supported by the next plot, where we render the
    collected maze records per species:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3c0e7fd-8a02-43b7-a9f3-df8e4e59c386.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: The maze records with final maze solvers positions
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding plot has two parts: the top for species with an objective fitness
    score (based on the distance from the maze exit) greater than **0.8**, and the
    bottom for other species. You can see that only one species produced a maze-solver
    genome that was able to reach the vicinity of the maze exit. Also, you can see
    that the genomes belonging to that species demonstrate very explorative behavior
    by exploring more maze areas than all other species combined.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we discuss the path of the successful maze solver through the maze,
    which is shown in the following diagram:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70fc92ee-1779-4fef-b8a6-4ea935d83d97.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: The path of the successful maze solver through the maze
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: The path of the successful maze solver is near-optimal for the given maze configuration.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: This experiment also demonstrates the importance of the initial conditions in
    finding a successful solution. The initial conditions are defined by the random
    seed value that we choose before running the experiment.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have included the hard-to-solve maze configuration into the experiment source
    code at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/hard_maze.txt](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/hard_maze.txt).
    You can try to solve the hard maze configuration by using the following command:
    `python maze_experiment_safe.py -g 120 -t 5 -m hard --width 200 --height 200`.'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经将难以解决的迷宫配置纳入了实验源代码中，可以在[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/hard_maze.txt](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter9/hard_maze.txt)找到。你可以通过以下命令尝试解决这个困难的迷宫配置：`python
    maze_experiment_safe.py -g 120 -t 5 -m hard --width 200 --height 200`。
- en: We have found a successful solution using `1571021768` as a random seed value.
    Try to find another random seed value producing a successful solution. How many
    generations did it take to find it?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们发现使用`1571021768`作为随机种子值是一个成功的解决方案。尝试找到另一个产生成功解决方案的随机种子值。找到它需要多少代？
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the co-evolution of two populations of species.
    You learned how commensalistic co-evolution can be implemented to produce a population
    of successful maze solvers. We introduced you to an exciting approach of implementing
    a fitness function of the maze solver that combines the objective-based score
    and the novelty score using coefficients produced by the population of the objective
    function candidates. Also, you have learned about the modified Novelty Search
    method and how it differs from the original method, which we discussed in [Chapter
    6](62301923-b398-43da-b773-c8b1fe383f1d.xhtml), *Novelty Search Optimization Method*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了两种物种群体的协同进化。你学习了如何通过共生协同进化来产生一群成功的迷宫解决者。我们向你介绍了一种令人兴奋的方法，即结合基于目标的分数和新颖性分数，使用目标函数候选群体产生的系数来实现迷宫解决者的适应度函数。此外，你还了解了改进后的新颖性搜索方法，以及它与我们在[第6章](62301923-b398-43da-b773-c8b1fe383f1d.xhtml)“新颖性搜索优化方法”中讨论的原方法有何不同。
- en: Using the knowledge gained in this chapter, you will be able to apply a commensalistic
    co-evolution approach to your work or research tasks that have no clear fitness
    function definition.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 利用本章获得的知识，你将能够将共生协同进化方法应用于你的工作或研究任务，这些任务没有明确的适应度函数定义。
- en: In the next chapter, you will learn about the deep neuroevolution method and
    how to use it to evolve agents that are able to play classic Atari games.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解深度神经进化方法以及如何使用它来进化能够玩经典Atari游戏的智能体。
