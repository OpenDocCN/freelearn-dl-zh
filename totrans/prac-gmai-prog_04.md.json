["```py\nif(cube.transform.position == mark.transform.position) \n{ \n   openDoor = true; \n} \n```", "```py\n public GameObject playerMesh;\n public Transform playerMark;\n public Transform cubeMark;\n public Transform currentPlayerPosition;\n public Transform currentCubePosition;\n\n public float proximityValueX;\n public float proximityValueY;\n public float nearValue;\n\n private bool playerOnMark;\n\n void Start () {\n\n }\nvoid Update () {\n\n // Calculates the current position of the player\n currentPlayerPosition.transform.position = playerMesh.transform.position;\n\n // Calculates the distance between the player and the player mark of the X axis\n proximityValueX = playerMark.transform.position.x - currentPlayerPosition.transform.position.x;\n\n // Calculates the distance between the player and the player mark of the Y axis\n proximityValueYplayerMark.transform.position.y - currentPlayerPosition.transform.position.y;\n\n // Calculates if the player is near of his MARK POSITION\n if((proximityValueX + proximityValueY) < nearValue)\n {\n    playerOnMark = true;\n } \n}  \n```", "```py\n public GameObject playerMesh;\n public Transform playerMark;\n public Transform cubeMark;\n public Transform currentPlayerPosition;\n public Transform currentCubePosition;\n\n public float proximityValueX;\n public float proximityValueY;\n public float nearValue;\n\n public float cubeProximityX;\n public float cubeProximityY;\n public float nearCube;\n\n private bool playerOnMark;\n private bool cubeIsNear;\n\n void Start () {\n\n    Vector3 playerMark = new Vector3(81.2f, 32.6f, -31.3f);\n    Vector3 cubeMark = new Vector3(81.9f, -8.3f, -2.94f);\n    nearValue = 0.5f;\n    nearCube = 0.5f;\n }\n\n void Update () {\n\n // Calculates the current position of the player\n currentPlayerPosition.transform.position = playerMesh.transform.position;\n\n // Calculates the distance between the player and the player mark of the X axis\n proximityValueX = playerMark.transform.position.x - currentPlayerPosition.transform.position.x; \n\n // Calculates the distance between the player and the player mark of the Y axis\n proximityValueY = playerMark.transform.position.y - currentPlayerPosition.transform.position.y;\n\n // Calculates if the player is near of his MARK POSITION\n if((proximityValueX + proximityValueY) < nearValue)\n {\n    playerOnMark = true;\n }\n\n cubeProximityX = currentCubePosition.transform.position.x - this.transform.position.x;\n cubeProximityY = currentCubePosition.transform.position.y - this.transform.position.y;\n\n if((cubeProximityX + cubeProximityY) < nearCube)\n {\n    cubeIsNear = true;\n }\n\nelse\n {\n    cubeIsNear = false;\n }\n}  \n```", "```py\n public GameObject playerMesh;\n public Transform playerMark;\n public Transform cubeMark;\n public Transform cubeMesh;\n public Transform currentPlayerPosition;\n public Transform currentCubePosition;\n\n public float proximityValueX;\n public float proximityValueY;\n public float nearValue;\n\n public float cubeProximityX;\n public float cubeProximityY;\n public float nearCube;\n\n private bool playerOnMark;\n private bool cubeIsNear;\n\n public float speed;\n public bool Finding;\n\n void Start () {\n\n  Vector3 playerMark = new Vector3(81.2f, 32.6f, -31.3f);\n  Vector3 cubeMark = new Vector3(81.9f, -8.3f, -2.94f);\n  nearValue = 0.5f;\n  nearCube = 0.5f;\n  speed = 1.3f;\n}\n\n void Update () {\n\n // Calculates the current position of the player\n currentPlayerPosition.transform.position = playerMesh.transform.position;\n\n // Calculates the distance between the player and the player mark of the X axis\n proximityValueX = playerMark.transform.position.x - currentPlayerPosition.transform.position.x; \n\n // Calculates the distance between the player and the player mark of the Y axis\n proximityValueY = playerMark.transform.position.y - currentPlayerPosition.transform.position.y;\n\n // Calculates if the player is near of his MARK POSITION\n if((proximityValueX + proximityValueY) < nearValue)\n {  \n     playerOnMark = true;\n }\n\n cubeProximityX = currentCubePosition.transform.position.x - this.transform.position.x;\n cubeProximityY = currentCubePosition.transform.position.y - this.transform.position.y;\n\n if((cubeProximityX + cubeProximityY) < nearCube)\n {\n     cubeIsNear = true;\n }\n\n else\n {\n     cubeIsNear = false;\n }\n\n if(playerOnMark == true && cubeIsNear == false && Finding == false)\n {\n    PositionChanging();\n }\n\n if(playerOnMark == true && cubeIsNear == true)\n {\n    Finding = false;\n }\n\n }\n\n void PositionChanging () {\n\n Finding = true;\n Vector3 positionA = this.transform.position;\n Vector3 positionB = cubeMesh.transform.position;\n this.transform.position = Vector3.Lerp(positionA, positionB, Time.deltaTime * speed);\n }\n```", "```py\n public GameObject playerMesh;\n public Transform playerMark;\n public Transform cubeMark;\n public Transform cubeMesh;\n public Transform currentPlayerPosition;\n public Transform currentCubePosition;\n\n public float proximityValueX;\n public float proximityValueY;\n public float nearValue;\n\n public float cubeProximityX;\n public float cubeProximityY;\n public float nearCube;\n\n public float cubeMarkProximityX;\n public float cubeMarkProximityZ;\n\n private bool playerOnMark;\n private bool cubeIsNear;\n\n public float speed;\n public bool Finding;\n\n void Start () {\n\n         Vector3 playerMark = new Vector3(81.2f, 32.6f, -31.3f);\n         Vector3 cubeMark = new Vector3(81.9f, -8.3f, -2.94f);\n         nearValue = 0.5f;\n         nearCube = 0.5f;\n         speed = 1.3f;\n }\n\n void Update () {\n\n // Calculates the current position of the player\n currentPlayerPosition.transform.position = playerMesh.transform.position;\n\n // Calculates the distance between the player and the player mark of the X axis\n proximityValueX = playerMark.transform.position.x - currentPlayerPosition.transform.position.x; \n\n // Calculates the distance between the player and the player mark of the Y axis\n proximityValueY = playerMark.transform.position.y - currentPlayerPosition.transform.position.y;\n\n // Calculates if the player is near of his MARK POSITION\n if((proximityValueX + proximityValueY) < nearValue)\n {\n    playerOnMark = true;\n }\n\n cubeProximityX = currentCubePosition.transform.position.x - this.transform.position.x;\n cubeProximityY = currentCubePosition.transform.position.y - this.transform.position.y;\n\n if((cubeProximityX + cubeProximityY) < nearCube)\n {\n    cubeIsNear = true;\n }\n\n else\n {\n    cubeIsNear = false;\n }\n\n if(playerOnMark == true && cubeIsNear == false && Finding == false)\n {\n     PositionChanging();\n }\n\n if(playerOnMark == true && cubeIsNear == true)\n {\n     Finding = false;\n   }\n\n  cubeMarkProximityX = cubeMark.transform.position.x - currentCubePosition.transform.position.x;\n  cubeMarkProximityZ = cubeMark.transform.position.z - currentCubePosition.transform.position.z;\n\n  if(cubeMarkProximityX > cubeMarkProximityZ)\n  {\n    PushX();\n  }\n\n  if(cubeMarkProximityX < cubeMarkProximityZ)\n  {\n    PushZ();\n  }\n\n }\n\n void PositionChanging () {\n\n Finding = true;\n Vector3 positionA = this.transform.position;\n Vector3 positionB = cubeMesh.transform.position;\n this.transform.position = Vector3.Lerp(positionA, positionB, Time.deltaTime * speed);\n\n} \n```", "```py\n public float HP;\n public float distanceValue;\n private Transform characterPosition;\n private GameObject characterMesh;\n\n private float proximityValueX;\n private float proximityValueY;\n private float nearValue;\n\n // Use this for initialization\n void Start () {\n\n HP = 100f;\n distanceValue = 1.5f;\n\n // Find the Character Mesh\n characterMesh = GameObject.Find(\"AICharacter\");\n }\n\n // Update is called once per frame\n void Update () {\n\n // Obtain the Character Mesh Position\n characterPosition = characterMesh.transform;\n\n //Calculate the distance between this object and the AI Character\n proximityValueX = characterPosition.transform.position.x - this.transform.position.x;\n proximityValueY = characterPosition.transform.position.y - this.transform.position.y;\n\n nearValue = proximityValueX + proximityValueY;\n } \n```", "```py\n public static float fenceHP;\n public static float lowerFenceHP;\n public static float fencesAnalyzed;\n public static GameObject bestFence;\n\n private Transform House;\n\n private float timeWasted;\n public float speed;\n\n void Start () {\n\n         fenceHP = 100f;\n         lowerFenceHP = fenceHP;\n         fencesAnalyzed = 0;\n         speed = 0.8;\n\n         Vector3 House = new Vector3(300.2f, 83.3f, -13.3f);\n\n }\n\n void Update () {\n\n         timeWasted += Time.deltaTime;\n\n         if(fenceHP > lowerFenceHP)\n         {\n             lowerFenceHP = fenceHP;\n         }\n\n         if(timeWasted > 30f)\n         {\n             GoToFence();   \n         }\n }\n\n void GoToFence() {\n\n         Vector3 positionA = this.transform.position;\n         Vector3 positionB = bestFence.transform.position;\n         this.transform.position = Vector3.Lerp(positionA, positionB, Time.deltaTime * speed);\n } \n```", "```py\n public float HP;\n public float distanceValue;\n private Transform characterPosition;\n private GameObject characterMesh;\n\n private float proximityValueX;\n private float proximityValueY;\n private float nearValue;\n void Start () {\n\n         HP = 100f;\n         distanceValue = 1.5f;\n\n         // Find the Character Mesh\n         characterMesh = GameObject.Find(\"AICharacter\");\n }\n\n void Update () {\n\n         // Obtain the Character Mesh Position\n         characterPosition = characterMesh.transform;\n\n         //Calculate the distance between this object and the AI Character\n         proximityValueX = characterPosition.transform.position.x - this.transform.position.x;\n         proximityValueY = characterPosition.transform.position.y - this.transform.position.y;\n\n         nearValue = proximityValueX + proximityValueY;\n\n         if(nearValue <= distanceValue){\n             if(AICharacter.fencesAnalyzed == 0){\n                 AICharacter.fencesAnalyzed = 1;\n                 AICharacter.bestFence = this.gameObject;\n             }\n\n             AICharacter.fenceHP = HP;\n\n             if(HP < AICharacter.lowerFenceHP){\n                 AICharacter.bestFence = this.gameObject;\n             }\n         }\n } \n```", "```py\n public static bool Beach;\n public static bool River;\n public static bool Forest;\n```", "```py\nif(Beach == true) \n{\n Forest = false;\n River = false;\n }\n\n if(Forest == true){\n Beach = false;\n  River = false;\n }\n\n if(River == true){\n Forest = false;\n  Beach = false;\n }\n```", "```py\nif (Forest == true)\n {// The AI will remain passive until an interaction with the player occurs\n if (Health == 100 && triggerL == false && triggerR == false && triggerM == false)\n {\n statePassive = true;\n stateAggressive = false;\n stateDefensive = false;\n }\n\n // The AI will shift to the defensive mode if player comes from the right side or if the AI is below 20 HP\n if (Health <= 100 && triggerR == true || Health <= 20)\n {\n statePassive = false;\n stateAggressive = false;\n stateDefensive = true;\n }\n\n // The AI will shift to the aggressive mode if player comes from the left side or it's on the middle and AI is above 20HP\n if (Health > 20 && triggerL == true || Health > 20 && triggerM == true)\n {\n statePassive = false;\n stateAggressive = true;\n stateDefensive = false;\n }\n\n walk = speed * Time.deltaTime;\n walk = speedBack * Time.deltaTime;\n } \n```", "```py\n public int HP;\n public int Ammunition;\n\n public static List<GameObject> wormList = new List<GameObject>(); \n //creates a list with all the worms\n public static int wormCount; //Amount of worms in the game\n public int ID; //It's used to differentiate the worms\n\n private float proximityValueX;\n private float proximityValueY;\n private float nearValue;\n public float distanceValue; //how far the enemy should be\n\n private bool canAttack;\n\n void Awake ()\n {\n         wormList.Add(gameObject); //add this worm to the list\n         wormCount++; //adds plus 1 to the amount of worms in the game\n }\n\n void Start ()\n {\n         HP = 100;\n         distanceValue = 30f;\n }\n\nvoid Update ()\n {\n         proximityValueX = wormList[1].transform.position.x - this.transform.position.x;\n         proximityValueY = wormList[1].transform.position.y - this.transform.position.y;\n         nearValue = proximityValueX + proximityValueY;\n\n         if(nearValue <= distanceValue)\n         {\n             canAttack = true;\n         }\n\n         else\n         {\n             canAttack = false;\n         }\n\n         Vector3 raycastRight = transform.TransformDirection(Vector3.forward);\n\n         if (Physics.Raycast(transform.position, raycastRight, 10)) \n             print(\"There is something blocking the Right side!\");\n\n         Vector3 raycastLEft = transform.TransformDirection(Vector3.forward);\n\n         if (Physics.Raycast(transform.position, raycastRight, -10)) \n             print(\"There is something blocking the Left side!\");\n } \n```"]