- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Using Stable Diffusion Models
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Stable Diffusion 模型
- en: When we start using Stable Diffusion models, we will immediately encounter different
    kinds of model files and will need to know how to convert a model file to the
    desired format.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始使用 Stable Diffusion 模型时，我们会立即遇到不同种类的模型文件，并需要知道如何将模型文件转换为所需的格式。
- en: In this chapter, we are going to get more familiar with Stable Diffusion model
    files, covering how to load models from the Hugging Face repository using model
    IDs. We’ll also provide sample code to load `safetensors` and `.ckpt` model files
    shared by the open source community.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更熟悉 Stable Diffusion 模型文件，包括如何使用模型 ID 从 Hugging Face 仓库加载模型。我们还将提供示例代码来加载开源社区共享的
    `safetensors` 和 `.ckpt` 模型文件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Loading the Diffusers model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载 Diffusers 模型
- en: Loading model checkpoints from safetensors and ckpt files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 safetensors 和 ckpt 文件加载模型检查点
- en: Using CKPT and safetensors files with Diffusers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CKPT 和 safetensors 文件与 Diffusers
- en: Model safety checker
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型安全检查器
- en: Converting checkpoint model files to the Diffusers format
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将检查点模型文件转换为 Diffusers 格式
- en: Using Stable Diffusion XL
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Stable Diffusion XL
- en: By the end of this chapter, you will have learned about the Stable Diffusion
    model file types and how to convert and load model files to a format that can
    be loaded with Diffusers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解 Stable Diffusion 模型文件类型以及如何将模型文件转换为可以由 Diffusers 加载的格式。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before you start, make sure you have the `safetensors` package installed:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保你已经安装了 `safetensors` 包：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `safetensors` Python package offers a simple and efficient way to access,
    store, and share tensors securely.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`safetensors` Python 包提供了一种简单高效的方式来安全地访问、存储和共享张量。'
- en: Loading the Diffusers model
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载 Diffusers 模型
- en: 'Instead of downloading model files manually, the Hugging Face Diffusers package
    provides a convenient way to access open source model files from a string-type
    model ID like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是手动下载模型文件，Hugging Face Diffusers 包提供了一个方便的方法，可以通过字符串类型的模型 ID 访问开源模型文件，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the preceding code is executed, if Diffusers can’t find the model files
    that are denoted by the model ID, the package will automatically reach out to
    the Hugging Face repository to download the model files and store them in a cache
    folder for next time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行前面的代码时，如果 Diffusers 找不到由模型 ID 指示的模型文件，该包将自动联系 Hugging Face 仓库下载模型文件，并将它们存储在缓存文件夹中以便下次使用。
- en: 'By default, the cache files will be stored in the following places:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，缓存文件将存储在以下位置：
- en: 'Windows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Windows：
- en: '`C:\Users\user_name\.cache\huggingface\hub`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Users\user_name\.cache\huggingface\hub`'
- en: 'Linux:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Linux：
- en: '`\``home\user_name\.cache\huggingface\hub`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`\``home\user_name\.cache\huggingface\hub`'
- en: Using the default cache path is fine in the beginning, however, if your system
    driver is less than 512 GB, you will soon find those model files are eating up
    storage space. To avoid running out of storage, we may need to plan the model
    storage in advance. Diffusers provides a parameter for us to specify a custom
    path for storing the cached weight files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认的缓存路径在开始时是可行的，然而，如果你的系统驱动器小于 512 GB，你很快会发现那些模型文件正在消耗存储空间。为了避免存储空间不足，我们可能需要提前规划模型存储。Diffusers
    提供了一个参数，允许我们指定存储缓存权重文件的自定义路径。
- en: 'The following is the preceding sample code with one more parameter, `cache_dir`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在前一个示例代码中添加了一个更多参数，`cache_dir`：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By specifying this `cache_dir` parameter, all auto-downloaded model and configuration
    files will be stored in the new location instead of eating up the system disk
    drive.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定此 `cache_dir` 参数，所有自动下载的模型和配置文件都将存储在新位置，而不是占用系统磁盘驱动器。
- en: You might also notice that the sample code specifies a `torch_dtytpe` parameter
    to tell Diffusers to use `torch.float16`. By default, PyTorch uses `torch.float32`
    for matrix multiplications. For model inference, or in other words, at the stage
    of using Stable Diffusion to generate images, we can use the `float16` type to
    not only increase the speed by about 100% but also save GPU memory with almost
    unnoticeable difference.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会注意到示例代码指定了一个 `torch_dtytpe` 参数，告诉 Diffusers 使用 `torch.float16`。默认情况下，PyTorch
    使用 `torch.float32` 进行矩阵乘法。对于模型推理，换句话说，在用 Stable Diffusion 生成图像的阶段，我们可以使用 `float16`
    类型，这不仅可以将速度提高约 100%，还可以几乎不引人注目的方式节省 GPU 内存。
- en: Usually, using models from Hugging Face is easy and safe. Hugging Face implements
    a safety checker to ensure the uploaded model files do not contain any malicious
    code that may harm your computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用 Hugging Face 的模型既容易又安全。Hugging Face 实现了一个安全检查器，以确保上传的模型文件不包含可能损害您的计算机的恶意代码。
- en: Nevertheless, we can still use manually downloaded model files with Diffusers.
    Next, we are going to load various model files from the local disk.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们仍然可以使用手动下载的模型文件与 Diffusers 一起使用。接下来，我们将从本地磁盘加载各种模型文件。
- en: Loading model checkpoints from safetensors and ckpt files
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 safetensors 和 ckpt 文件加载模型检查点
- en: The complete model files are also called **checkpoint** data. If you read an
    article or document talking about downloading a checkpoint, they are talking about
    a Stable Diffusion model file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的模型文件也称为 **检查点** 数据。如果您阅读了一篇或一份关于下载检查点的文章或文档，他们谈论的是 Stable Diffusion 模型文件。
- en: 'There are many types of checkpoints, such as `.ckpt` files, `safetensors` files,
    and `diffusers` files:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多类型的检查点，如 `.ckpt` 文件、`safetensors` 文件和 `diffusers` 文件：
- en: '`.ckpt` is the most basic file format and is compatible with most Stable Diffusion
    models. However, they are also the most vulnerable to malicious attacks.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.ckpt` 是最基础的文件格式，与大多数 Stable Diffusion 模型兼容。然而，它们也是最易受到恶意攻击的。'
- en: '`safetensors` is a newer file format that is designed to be more secure than
    `.ckpt` files. The `safetensors` format is better in terms of security, speed,
    and usability compared with `.ckpt`. Safetensors has several features to prevent
    code execution:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`safetensors` 是一种较新的文件格式，旨在比 `.ckpt` 文件更安全。与 `.ckpt` 相比，`safetensors` 格式在安全性、速度和可用性方面表现更佳。Safetensors
    有几个特性来防止代码执行：'
- en: '**Restricted data types**: Only specific data types, such as integers and tensors,
    are allowed to be stored. This eliminates the possibility of including code within
    the saved data.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制数据类型**：只允许存储特定的数据类型，例如整数和张量。这消除了在保存的数据中包含代码的可能性。'
- en: '**Hashing**: Each chunk of data is hashed, and the hash is stored alongside
    the data. Any modification to the data would change the hash, making it instantly
    detectable.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哈希**：每个数据块都会进行哈希处理，并将哈希值存储在数据旁边。对数据的任何修改都会改变哈希值，使其立即可检测。'
- en: '**Isolation**: Data is stored in an isolated environment, preventing interaction
    with other programs, and protecting your system from potential exploits.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离**：数据存储在隔离的环境中，防止与其他程序交互，并保护您的系统免受潜在的漏洞攻击。'
- en: Diffusers files are the latest file format specifically crafted for seamless
    integration with the `Diffusers` library. This format boasts top-notch security
    features and ensures compatibility with all Stable Diffusion models. Unlike traditional
    compression into a single file, the Diffusers format takes the form of a folder
    that encompasses both weights and configuration files. Moreover, the model files
    contained within these folders adhere to the `safetensors` format.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Diffusers 文件是专为与 `Diffusers` 库无缝集成而特别设计的最新文件格式。该格式具有顶级的加密功能，并确保与所有 Stable Diffusion
    模型兼容。与将数据压缩成单个文件的传统方法不同，Diffusers 格式采用文件夹的形式，包含权重和配置文件。此外，这些文件夹中包含的模型文件遵循 `safetensors`
    格式。
- en: When we use the Diffusers auto download function, Diffusers will store the files
    in the Diffusers format.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Diffusers 自动下载功能时，Diffusers 会将文件存储为 Diffusers 格式。
- en: Next, we are going to load up a Stable Diffusion model in `ckpt` or `safetensors`
    format.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将加载 `ckpt` 或 `safetensors` 格式的 Stable Diffusion 模型。
- en: Using ckpt and safetensors files with Diffusers
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ckpt 和 safetensors 文件与 Diffusers
- en: The Diffusers community is actively enhancing the functionality. At the time
    of writing, we can easily load `.ckpt` or `safetensors` checkpoint files using
    the `Diffusers` package.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Diffusers 社区正在积极增强其功能。在撰写本文时，我们可以轻松地使用 `Diffusers` 包加载 `.ckpt` 或 `safetensors`
    检查点文件。
- en: The following code can be used to load and use a `safetensors` or `.ckpt` checkpoint
    file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可以用来加载和使用 `safetensors` 或 `.ckpt` 检查点文件。
- en: 'Load the `safetensors` model:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 加载 `safetensors` 模型：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Load the `.ckpt` model with the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码加载 `.ckpt` 模型：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You are not reading the wrong code; we can load both `safetensors` and `.ckpt`
    model files with the same function – `from_single_file`. Next, let’s take a look
    at the safety checker.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您没有阅读错误的代码；我们可以使用相同的函数 `from_single_file` 加载 `safetensors` 和 `.ckpt` 模型文件。接下来，让我们看看安全检查器。
- en: Turning off the model safety checker
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关闭模型安全检查器
- en: By default, the Diffusers pipeline will check the output result with a safety
    checker model to ensure the generated result does not include any NSFW, violent,
    or unsafe content. In certain cases, the safety checker may trigger false alarms
    and produce empty images (completely black images). There are several GitHub issue
    discussions about the safety checker [11]. In the test stage, we can temporarily
    turn off the safety checker.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Diffusers 管道将使用安全检查器模型来检查输出结果，以确保生成的结果不包含任何 NSFW、暴力或不安全的内容。在某些情况下，安全检查器可能会触发误报并生成空图像（完全黑色的图像）。关于安全检查器有几个
    GitHub 问题讨论 [11]。在测试阶段，我们可以暂时关闭安全检查器。
- en: 'To turn off the safety checker when loading the model using the model ID, run
    the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用模型 ID 加载模型时关闭安全检查器，请运行以下代码：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that the parameter to turn off the safety checker is different when we
    are loading the model from a `safetensors` or `.ckpt` file. Instead of using `safety_checker`,
    we should use `load_safety_checker` as shown in the following sample code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们从 `safetensors` 或 `.ckpt` 文件加载模型时，关闭安全检查器的参数是不同的。我们不应使用 `safety_checker`，而应使用如下示例代码中所示的
    `load_safety_checker`：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should be able to use `load_safety_checker = False` in the `from_pretrained`
    function to disable the safety checker.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够在 `from_pretrained` 函数中使用 `load_safety_checker = False` 来禁用安全检查器。
- en: The safety checker is an open source machine learning model from CompVis – Computer
    Vision and Learning LMU Munich ([https://github.com/CompVis](https://github.com/CompVis)),
    built based on CLIP [9][10], called **Stable Diffusion Safety** **Checker** [3].
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安全检查器是来自 CompVis – 计算机视觉和学习 LMU 慕尼黑（[https://github.com/CompVis](https://github.com/CompVis)）的开源机器学习模型，基于
    CLIP [9][10] 构建，称为 **Stable Diffusion 安全检查器** [3]。
- en: While we can load a model in a single file, in some cases, we will need to convert
    a `.ckpt` or `safetensors` model file to the Diffusers folder structure. Next,
    let’s see how we can convert model files to the Diffusers format.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将模型加载到一个单独的文件中，但在某些情况下，我们需要将 `.ckpt` 或 `safetensors` 模型文件转换为 Diffusers
    文件夹结构。接下来，让我们看看如何将模型文件转换为 Diffusers 格式。
- en: Converting the checkpoint model file to the Diffusers format
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将检查点模型文件转换为 Diffusers 格式
- en: Loading checkpoint model data from a `.ckpt` or `safetensors` file is slow compared
    with the Diffusers format because every time we load a `.ckpt` or `safetensors`
    file, Diffusers will unpack and convert the file to the Diffusers format. To save
    the conversion every time we load a model file, we may consider converting checkpoint
    files to the Diffusers format.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Diffusers 格式相比，从 `.ckpt` 或 `safetensors` 文件加载检查点模型数据较慢，因为每次我们加载 `.ckpt` 或
    `safetensors` 文件时，Diffusers 都会解包并将其转换为 Diffusers 格式。为了每次加载模型文件时都保存转换，我们可能需要考虑将检查点文件转换为
    Diffusers 格式。
- en: 'We can use the following code to convert a `.ckpt` file to the Diffusers format:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码将 `.ckpt` 文件转换为 Diffusers 格式：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To convert a `safetensors` file to the Diffusers format, simply change the
    `from_safetensors` parameter to `True` as shown in the following sample code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `safetensors` 文件转换为 Diffusers 格式，只需将 `from_safetensors` 参数更改为 `True`，如下面的示例代码所示：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you have tried asking a search engine to find a solution to do the conversion,
    from some corners of the internet, you may see a solution that uses a script called
    `convert_original_stable_diffusion_to_diffusers.py`. The script is located in
    the Diffusers GitHub repository: [https://github.com/huggingface/diffusers/tree/main/scripts](https://github.com/huggingface/diffusers/tree/main/scripts).
    The script works well. If you look at the code of the script, the script uses
    the same code presented previously.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试通过搜索引擎寻找解决方案来进行转换，你可能会在互联网的某些角落看到使用名为 `convert_original_stable_diffusion_to_diffusers.py`
    的脚本的解决方案。该脚本位于 Diffusers GitHub 仓库中：[https://github.com/huggingface/diffusers/tree/main/scripts](https://github.com/huggingface/diffusers/tree/main/scripts)。该脚本运行良好。如果你查看脚本的代码，该脚本使用了之前展示的相同代码。
- en: 'To use the converted model file, simply use the `from_pretrained` function
    to load the `local` folder (instead of the model ID) this time:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用转换后的模型文件，这次只需使用 `from_pretrained` 函数加载 `local` 文件夹（而不是模型 ID）：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You should see a cute puppy image generated by the preceding code. Next, let’s
    load Stable Diffusion XL models.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到由前面的代码生成的可爱小狗图像。接下来，让我们加载 Stable Diffusion XL 模型。
- en: Using Stable Diffusion XL
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Stable Diffusion XL
- en: '**Stable Diffusion XL** (**SDXL**) is a model from Stability AI. Slightly different
    compared to previous models, SDXL is designed to be a two-stage model. We will
    need the base model to generate an image and can leverage a second, refiner model
    to refine an image, as shown in *Figure 6**.1*. The refiner model is optional:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Stable Diffusion XL** (**SDXL**)是Stability AI的一个模型。与之前的模型略有不同，SDXL被设计为双阶段模型。我们需要基础模型来生成图像，并可以利用第二个细化模型来细化图像，如图*图6.1*所示。细化模型是可选的：'
- en: '![Figure 6.1: SDXL, a two-model pipeline](img/B21263_06_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1：SDXL，双模型管道](img/B21263_06_01.jpg)'
- en: 'Figure 6.1: SDXL, a two-model pipeline'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：SDXL，双模型管道
- en: '*Figure 6**.1* shows that to generate images of the best quality from the SDXL
    model, we will need to use the base model to generate a raw image, output as a
    128x128 latent, and then use the refiner model to enhance it.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.1*显示，要从SDXL模型生成最佳质量的图像，我们需要使用基础模型生成原始图像，输出为128x128的潜在图像，然后使用细化模型对其进行增强。'
- en: Before trying out the SDXL model, please ensure you have at least 15 GB of VRAM,
    otherwise, you may see a `CUDA out of memory` error right before the refiner model
    outputs the image. You can also use the optimization methods from [*Chapter* *5*](B21263_05.xhtml#_idTextAnchor097),to
    build a custom pipeline to move the model out of VRAM whenever possible.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试SDXL模型之前，请确保您至少有15 GB的VRAM，否则，您可能会在细化模型输出图像之前看到`CUDA out of memory`错误。您还可以使用[*第5章*](B21263_05.xhtml#_idTextAnchor097)中的优化方法，构建一个自定义管道，在可能的情况下将模型移出VRAM。
- en: 'Here are the steps to load up an SDXL model:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是加载SDXL模型的步骤：
- en: Download the base model `safetensors` file [6]. You don’t need to download all
    files from the model repository. At the time of writing this, the checkpoint name
    is `sd_xl_base_1.0.safetensors`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载基础模型`safetensors`文件[6]。您不需要从模型仓库下载所有文件。在撰写本文时，检查点的名称是`sd_xl_base_1.0.safetensors`。
- en: Download the refiner model `safetensors` file [7]. We can also let the Diffusers
    pipeline download the `safetensors` file for us by providing the model ID.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载细化模型`safetensors`文件[7]。我们还可以通过提供模型ID让Diffusers管道为我们下载`safetensors`文件。
- en: 'Next, we will initialize the base and refiner models from the `safetensors`
    files:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将从`safetensors`文件初始化基础和细化模型：
- en: '[PRE10]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or, we can initialize the base and refiner models using model ID:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，我们可以使用模型ID初始化基础和细化模型：
- en: '[PRE30]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let’s generate the base image in latent space (the 4x128x128 middle layer latent):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们生成潜在空间中的基础图像（4x128x128的中间层潜在图像）：
- en: '[PRE47]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note that at the end of the preceding code, we moved `base_pipe` out of VRAM
    by using `base_pipe.to("cpu")` and `torch.cuda.empty_cache()`.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在前面代码的末尾，我们通过使用`base_pipe.to("cpu")`和`torch.cuda.empty_cache()`将`base_pipe`从VRAM中移除。
- en: 'Load the refiner model to VRAM and use the base image in latent space to generate
    the final image:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将细化模型加载到VRAM中，并使用潜在空间中的基础图像生成最终图像：
- en: '[PRE67]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The result will be similar to the one shown in *Figure 6**.2*:'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果将与*图6.2*中显示的类似：
- en: '![Figure 6.2: Image generated by SDXL – a cat in a spacesuit](img/B21263_06_02.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2：SDXL生成的图像——穿着宇航服的猫](img/B21263_06_02.jpg)'
- en: 'Figure 6.2: Image generated by SDXL – a cat in a spacesuit'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：SDXL生成的图像——穿着宇航服的猫
- en: The detail and quality are way better than the one rendered by Stable Diffusion
    1.5\. While this model is relatively new at the time of writing, in the near future,
    more mixed checkpoint models and Low-Rank Adapters (LoRAs) will be available.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息和质量远远优于Stable Diffusion 1.5渲染的版本。虽然这个模型在撰写本文时相对较新，但在不久的将来，将会有更多混合检查点模型和低秩适配器（LoRAs）可用。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter mainly focused on the usage of the Stable Diffusion model. We can
    utilize a model from Hugging Face by using its model ID. Additionally, widely
    distributed open source models are available on community websites such as CIVITAI
    [4], where you can download numerous model resources. These model files are typically
    in the `.ckpt` or `safetensors` file format.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要关注Stable Diffusion模型的用法。我们可以通过使用其模型ID来利用Hugging Face的模型。此外，广泛分布的开源模型可以在社区网站如CIVITAI
    [4]上找到，您可以在那里下载大量的模型资源。这些模型文件通常是`.ckpt`或`safetensors`文件格式。
- en: The chapter covered the distinction between these model files and using checkpoint
    model files directly from the `Diffusers` package. Furthermore, it offered a solution
    to convert standalone model checkpoint files to the Diffusers format for faster
    model loading.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了这些模型文件的区别以及直接从`Diffusers`包中使用检查点模型文件。此外，它还提供了一种解决方案，将独立模型检查点文件转换为Diffusers格式，以便更快地加载模型。
- en: Lastly, this chapter also covered how to load and use SDXL’s two-model pipelines.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本章还介绍了如何加载和使用 SDXL 的双模型管道。
- en: References
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Hugging Face Load safetensors: [https://huggingface.co/docs/diffusers/using-diffusers/using_safetensors](https://huggingface.co/docs/diffusers/using-diffusers/using_safetensors)'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hugging Face Load safetensors：[https://huggingface.co/docs/diffusers/using-diffusers/using_safetensors](https://huggingface.co/docs/diffusers/using-diffusers/using_safetensors)
- en: 'pickle — Python object serialization: [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pickle — Python 对象序列化：[https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)
- en: 'Stable Diffusion Safety Checker: [https://huggingface.co/CompVis/stable-diffusion-safety-checker](https://huggingface.co/CompVis/stable-diffusion-safety-checker'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稳定扩散安全检查器：[https://huggingface.co/CompVis/stable-diffusion-safety-checker](https://huggingface.co/CompVis/stable-diffusion-safety-checker)
- en: )
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'civitai: [https://www.civitai.com](https://www.civitai.com'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: civitai：[https://www.civitai.com](https://www.civitai.com)
- en: )
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'stability.ai: [https://stability.ai/](https://stability.ai/)'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: stability.ai：[https://stability.ai/](https://stability.ai/)
- en: 'stable-diffusion-xl-base-1.0: [https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: stable-diffusion-xl-base-1.0：[https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0)
- en: )
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'stable-diffusion-xl-refiner-1.0: [https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0](https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: stable-diffusion-xl-refiner-1.0：[https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0](https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0)
- en: )
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'safetensors GitHub repository: [https://github.com/huggingface/safetensors](https://github.com/huggingface/safetensors)'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: safetensors GitHub 仓库：[https://github.com/huggingface/safetensors](https://github.com/huggingface/safetensors)
- en: 'Alec Radford et al, Learning Transferable Visual Models From Natural Language
    Supervision: [https://arxiv.org/abs/2103.00020](https://arxiv.org/abs/2103.00020)'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Alec Radford 等人，从自然语言监督中学习可迁移的视觉模型：[https://arxiv.org/abs/2103.00020](https://arxiv.org/abs/2103.00020)
- en: 'OpenAI CLIP GitHub repository: [https://github.com/openai/CLIP](https://github.com/openai/CLIP)'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenAI CLIP GitHub 仓库：[https://github.com/openai/CLIP](https://github.com/openai/CLIP)
- en: 'Issues with safety checker: [https://github.com/huggingface/diffusers/issues/845](https://github.com/huggingface/diffusers/issues/845),
    [https://github.com/huggingface/diffusers/issues/3422](https://github.com/huggingface/diffusers/issues/3422)'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全检查器问题：[https://github.com/huggingface/diffusers/issues/845](https://github.com/huggingface/diffusers/issues/845),
    [https://github.com/huggingface/diffusers/issues/3422](https://github.com/huggingface/diffusers/issues/3422)
- en: Part 2 – Improving Diffusers with Custom Features
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分 – 使用定制功能改进扩散器
- en: In Part 1, we explored the fundamental concepts and techniques behind diffusers,
    setting the stage for their application in various domains. Now, it’s time to
    take our understanding to the next level by delving into advanced customization
    options that can significantly enhance the capabilities of these powerful models.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们探讨了扩散器背后的基本概念和技术，为它们在各个领域的应用奠定了基础。现在，是时候通过深入研究可以显著增强这些强大模型功能的高级定制选项，将我们的理解提升到下一个层次。
- en: The chapters in this section are designed to equip you with the knowledge and
    skills necessary to optimize and extend your diffusers, unlocking new possibilities
    for creative expression and problem-solving. From refining performance and managing
    VRAM usage to leveraging community-driven resources and exploring innovative techniques
    such as textual inversion, we’ll cover a range of topics that will help you push
    the boundaries of what’s possible with diffusers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的章节旨在为你提供优化和扩展扩散器所需的知识和技能，解锁新的创意表达和问题解决的可能性。从优化性能和管理 VRAM 使用到利用社区驱动的资源，以及探索文本反转等创新技术，我们将涵盖一系列有助于你推动扩散器可能性的边界的话题。
- en: Through the following chapters, you’ll learn how to overcome limitations, tap
    into the collective wisdom of the community, and unlock new features that will
    elevate your work with diffusers. Whether you’re seeking to improve efficiency,
    explore new artistic avenues, or simply stay at the forefront of innovation, the
    custom features and techniques presented in this part of the book will provide
    you with the tools and inspiration you need to succeed.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何克服限制，利用社区的集体智慧，并解锁将提升你使用扩散器工作的新功能。无论你是寻求提高效率、探索新的艺术途径，还是仅仅保持创新的前沿，本书的这一部分所提供的定制功能和技巧将为你提供成功所需的工具和灵感。
- en: 'This part contains the following chapters:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 7*](B21263_07.xhtml#_idTextAnchor136)*, Optimizing Performance and
    VRAM Usage*'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B21263_07.xhtml#_idTextAnchor136)*，优化性能和VRAM使用*'
- en: '[*Chapter 8*](B21263_08.xhtml#_idTextAnchor153)*, Using Community-Shared LoRAs*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B21263_08.xhtml#_idTextAnchor153)*，使用社区共享的LoRAs*'
- en: '[*Chapter 9*](B21263_09.xhtml#_idTextAnchor178)*, Using Textual Inversion*'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B21263_09.xhtml#_idTextAnchor178)*，使用文本反转*'
- en: '[*Chapter 10*](B21263_10.xhtml#_idTextAnchor197)*, Unlocking 77 Token Limitations
    and Enabling Prompt Weighting*'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B21263_10.xhtml#_idTextAnchor197)*，解锁77个Token限制并启用提示权重*'
- en: '[*Chapter 11*](B21263_11.xhtml#_idTextAnchor214)*, Image Restore and Super-Resolution*'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B21263_11.xhtml#_idTextAnchor214)*，图像恢复和超分辨率*'
- en: '[*Chapter 12*](B21263_12.xhtml#_idTextAnchor240)*, Scheduled Prompt Parsing*'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B21263_12.xhtml#_idTextAnchor240)*，计划提示解析*'
