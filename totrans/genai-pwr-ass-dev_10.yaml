- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing Code Recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for Amazon Q customizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating customization in Amazon Q
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating and optimizing the customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating different versions of customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding users and groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using customization in integrated development environments (IDEs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With customizations, **Amazon Q Developer** can support software development
    tailored to your team’s internal libraries, proprietary algorithms, and enterprise
    code style. By connecting a data source containing your code, Amazon Q leverages
    your content to provide assistance that aligns with your organization’s development
    style.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started by looking at some of the prerequisites before you can leverage
    customization with Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for Amazon Q customizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since customization is mostly used by organizations, it is only available with
    the Pro tier of Amazon Q Developer. However, you can also try it out on your own
    by getting the Pro subscription and adding the customization feature from the
    Amazon Q administrative console.
  prefs: []
  type: TYPE_NORMAL
- en: When using Amazon Q customizations, ensure that your Amazon Q administrator
    is authorized to access your code base, which can be stored either on **Amazon
    S3** or through **AWS CodeConnections**. Notably, in the standard setup procedure
    for Amazon Q Developer Pro, your **AWS Organizations** administrator doesn’t grant
    the Amazon Q administrator access to these services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, before utilizing Amazon Q customizations, it’s imperative to include
    the following permissions to the role of your Amazon Q administrator. Note the
    legacy name of **CodeWhisperer** still shows in the policy, even though it pertains
    to Amazon Q Developer now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding policy grants the role the permissions to leverage the customization
    APIs of Amazon Q Developer. It also allows the role to establish connections and
    access the code repositories either via Amazon S3 or AWS CodeConnections. If you
    are planning to try out customizations, feel free to copy the **Identity and Access
    Management** (**IAM**) policy code from the AWS documentation, a link to which
    has been provided in the *References* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Q also retains data regarding the creation of your customization within
    **Amazon** **CloudWatch Logs**. Grant your Amazon Q administrator permission to
    access these logs with the following authorization set. The following permissions
    allow the Amazon Q Developer administrator to view these logs. We will see in
    the following sections how these logs are helpful for tracking as well as debugging
    purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Ensuring the quality of your customization begins with selecting optimal source
    material. When preparing your data source, incorporate code that features team-endorsed
    patterns while avoiding code that contains anti-patterns, bugs, security vulnerabilities,
    performance issues, and similar concerns. Organizations establish best-of-breed
    coding standards and patterns by creating comprehensive guidelines and best practices
    that are thoroughly documented and easily accessible to all developers. They enforce
    these standards through code reviews and security standards in the development
    projects. All organizations can decide for themselves what project code repositories
    are gold standards for them so that they can use those for customizations in Amazon
    Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Your data source should include between 2 MB and 20 GB of source code files
    in supported languages. The Amazon CloudWatch logs will indicate the total size
    of all the code bases used during the customization training process. In our next
    few sections, we will highlight this aspect in the logs. There is no restriction
    on the number of files, but ensure each language you wish to support includes
    at least 10 files. If using Amazon S3 as the data source, organize all source
    code within a directory, avoiding placement at the root level, as files at the
    root level will be disregarded.
  prefs: []
  type: TYPE_NORMAL
- en: Supported languages
  prefs: []
  type: TYPE_NORMAL
- en: At this time, Amazon Q Developer supports customization for Java, Python, JavaScript,
    and TypeScript programming languages, and it can be used from the VS Code and
    JetBrains IDEs only. Keep an eye on new releases that may include more options.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn how to create the customization in Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a customization in Amazon Q
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with customizations, first set them up in the Amazon Q Developer
    console. We assume you have already followed the steps to set up your Pro tier.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the customization settings inside the Amazon
    Q Developer console. To access the Amazon Q Developer console, search for the
    service name within the AWS console and click the **Settings** button to reach
    the following screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Amazon Q customizations setup](img/B21378_10_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Amazon Q customizations setup
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, click on the **Customization** link and follow a simple three-step
    process inside the **Customizations** page: connecting to a repository, creating
    customization, and activating it. The following screenshot shows the process.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Amazon Q customizations – creation process](img/B21378_10_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Amazon Q customizations – creation process
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at these steps one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As soon as you click the **Create customization** button in the console, you
    will be presented with a page where you can provide the name and description for
    the customization along with the connection to the source repository, as shown
    in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Amazon Q customizations – creating a connection](img/B21378_10_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Amazon Q customizations – creating a connection
  prefs: []
  type: TYPE_NORMAL
- en: Always try to give a meaningful name and clear description here, as this information
    will be visible to the developers from the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: The important aspect in the preceding screenshot is the source connection. There
    are two ways to make your source code available to Amazon Q for creating the customization.
    You can take all the source code in the organization, upload it into an Amazon
    S3 bucket, and provide the S3 URI in the source connection. Many organizations
    that store large amounts of enterprise code in code repositories as part of the
    DevOps process are less likely to use this option. The other option is indeed
    to connect to the code repositories where the code is hosted.
  prefs: []
  type: TYPE_NORMAL
- en: If your data source resides on GitHub, GitLab, or Bitbucket, you need to establish
    a connection to it using AWS CodeConnections. To demonstrate the customization
    feature in this chapter, I will connect to my GitHub repository, where I will
    be leveraging some public repositories that I will fork for this to work. For
    detailed steps on how to create a connection to your repository, I have provided
    the link in the *References* section at the end of this chapter so that you can
    go through it step by step to create a connection and put the connection in the
    Amazon Q customization creation page.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the bottom part of the same customization creation
    page, which allows you to emit the logs generated during this process to one of
    the log delivery options. In this case, I have picked AWS CloudWatch, and in the
    subsequent steps, I will show you the importance of logs during this process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Amazon Q customizations – log delivery option](img/B21378_10_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Amazon Q customizations – log delivery option
  prefs: []
  type: TYPE_NORMAL
- en: Once you hit the **Create customization** button, it begins the training process.
    Depending on the total size of the code base, it may take anywhere from a few
    minutes to a few hours or even more.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing customizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this step, Amazon Q will connect to your code repository and train a custom
    model based on your organization’s coding practices so that it can utilize your
    content to provide suggestions tailored to the preferences of your organization’s
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: Security note
  prefs: []
  type: TYPE_NORMAL
- en: AWS will neither store nor utilize your content in any context that doesn’t
    directly benefit your enterprise. Also, AWS won’t leverage your content to offer
    code suggestions to other customers, and, of course, Amazon Q will not refer to
    security scans conducted for other customers.
  prefs: []
  type: TYPE_NORMAL
- en: During this process, Amazon Q retrieves the source code from the code repository,
    and after conducting sanity and quality checks, such as duplicate file checks
    and unsupported file formats, it attempts to establish whether it has enough context
    to create a customization that would benefit all the developers in the organization.
  prefs: []
  type: TYPE_NORMAL
- en: After running for a bit, the customization creation page failed and provided
    me with an error stating that the code size was not large enough for it to train
    an effective model. This issue is highlighted in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Amazon Q customizations – creating a customization failure](img/B21378_10_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Amazon Q customizations – creating a customization failure
  prefs: []
  type: TYPE_NORMAL
- en: The error doesn’t exactly tell me what was insufficient and how it fell below
    the minimum threshold in our code base during this process. This is where the
    CloudWatch Logs will come in handy. For many possible troubleshooting error messages,
    you can follow the link in the *References* section, but I will cover one such
    error that I encountered during this process.
  prefs: []
  type: TYPE_NORMAL
- en: If you navigate to the CloudWatch log group link provided during the customization
    setup, as shown in the **Log deliveries** section in *Figure 10**.4*, you will
    be able to see the exact cause of this error. For instance, in my case, the error
    log, as seen in the following screenshot, suggests that after the quality scrub
    process, Amazon Q could only gather about 1 MB of code. This limit is below the
    minimum threshold of 2 MB required by the engine to proceed toward the customization
    training process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Amazon Q customizations – failure details in AWS CloudWatch](img/B21378_10_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Amazon Q customizations – failure details in AWS CloudWatch
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this insufficient data error is that I had forked a popular code
    repository from the public code samples provided by AWS on GitHub, located at
    `https://github.com/aws-samples.`
  prefs: []
  type: TYPE_NORMAL
- en: In reality, as part of the organization, your administrator will connect the
    Amazon Q customization to your private enterprise repositories to allow Amazon
    Q to train customizations based on vast amounts of code used within your organization.
    To demonstrate the customization in this book, I cannot use any private code,
    so the best I can do is show this feature by connecting to a public repository
    with a license that allows anyone to use the code in any way they want.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the public code found in the code repository may very well have
    been used to train Amazon Q Developer anyway, so technically, I will not be getting
    real customizations. However, to show you the steps of how it works, this should
    serve its purpose.
  prefs: []
  type: TYPE_NORMAL
- en: After receiving that failure message, I understood that I needed to provide
    a lot more code samples and possibly more variety for the training to work in
    the first place. So, I went ahead and forked a few more repositories in my GitHub
    account so that Amazon Q could make it past that error step. I reran the customization
    creation process and after a while, I looked at the CloudWatch logs again to see
    whether adding more code repositories helped it get past the minimum threshold.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows that it barely made it past the 2 MB minimum
    threshold required.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Amazon Q customizations – AWS CloudWatch logs after modified
    re-run](img/B21378_10_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Amazon Q customizations – AWS CloudWatch logs after modified re-run
  prefs: []
  type: TYPE_NORMAL
- en: So, even after adding 5 to 6 repositories, the code size was still just above
    2 MB. The recommendation is to have at least 2 MB and this can go all the way
    up to 20 GB of code base. So, it’s pretty evident that the customization process
    will complete, but I am not expecting a great evaluation from this.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the customization was completed successfully;
    however, it gave me an abysmal evaluation score of 1\. In other words, it’s telling
    me I better not roll out this customization feature to all the developers in my
    organization as it will yield poor results.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Amazon Q customizations – customization creation is complete](img/B21378_10_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Amazon Q customizations – customization creation is complete
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss score evaluation and how to improve it in our next section,
    but let’s complete the third step in this creation process, which is to activate
    the created customization.
  prefs: []
  type: TYPE_NORMAL
- en: Activating and deactivating customizations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the customization is created, it needs to be activated. Since this was
    our first version, we will activate it even though the evaluation is not great.
    However, in reality, you can keep iterating through the customization creation
    process until you get a good evaluation score, and then activate the version you
    want to use as the final one.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the **Activate** option once the customization
    creation is complete. Once activated, the status will show as activated. You can
    also deactivate any customization version by selecting the **Deactivate** option
    from the **Action** dropdown. This is useful for keeping only the version with
    the best score active for use.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Amazon Q customizations – activate a version of the customization](img/B21378_10_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Amazon Q customizations – activate a version of the customization
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn about the score evaluation process and how you can improve
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating and optimizing the customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the customization process completed, it gave an evaluation score, and on
    the side, it also provided a detailed range of scores and a description of what
    they mean. Let’s discuss them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Score evaluation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on your evaluation score, you should now decide whether to activate your
    customization. Consider the following factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Very good (8-10)**: Amazon Q recommends activating this customization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fair (5-7)**: Amazon Q recommends activating this customization. If you do
    not see a significant improvement, consider the following optimization suggestions.
    If those are not effective, consider switching to a different code source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poor (1-4)**: This customization is unlikely to be useful. Consider the optimization
    suggestions from the next section around optimizing the customization. If those
    are not effective, consider switching to a different code source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This evaluation matrix is suggested in the AWS documentation, a link to which
    is also provided in the *References* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights this evaluation score for our version of
    the customization and on the side highlights what each range of score means.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Amazon Q customizations – score evaluation criteria](img/B21378_10_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Amazon Q customizations – score evaluation criteria
  prefs: []
  type: TYPE_NORMAL
- en: So, how do we go about bumping this score up? Let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing the customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s highlight some suggestions that may improve your evaluation score.
  prefs: []
  type: TYPE_NORMAL
- en: To tailor optimizations for the specific languages used in your organization,
    consider broadening your data source to encompass more code repositories. If your
    data set is limited to a few programming languages, try incorporating a wider
    variety of languages. Additionally, exclude auto-generated files and repositories
    or those created from templates, as training customizations for such files typically
    adds little value and introduces noise.
  prefs: []
  type: TYPE_NORMAL
- en: Assess whether your code base frequently employs internal libraries. If not,
    the core Amazon Q model may already be performing at its best. To fine-tune for
    particular languages, ensure you include at least 20 data files for each language,
    with a total size of at least 10 MB. Essentially, by increasing and improving
    the variety, quality, and quantity of code used for training customizations, the
    evaluation score may improve. A higher evaluation score will help generate better-customized
    code suggestions. Once you figure out how you are going to optimize the customization,
    you can create multiple versions of it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple versions of customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As organizations create new code repositories and establish new coding standards,
    there may be a need to retain the Amazon Q Developer customizations to incorporate
    additional customizations and improve the evaluation score of an existing customization.
    This is where **versioning** of customizations comes in handy, allowing you to
    keep different versions of customizations based on training.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple versions of customization is easy in Amazon Q Developer. From
    the created customization page where you see the current version, you can select
    **Create new version** from the **Actions** dropdown and start building a new
    version, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Amazon Q customizations – creating a new version of customization](img/B21378_10_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Amazon Q customizations – creating a new version of customization
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Q administrators can access up to three versions for each customization:
    the latest version, the currently active version in use, and the most recently
    active version that is no longer in use.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the customization version has an acceptable evaluation score, the admin
    can make it available to users or groups.
  prefs: []
  type: TYPE_NORMAL
- en: Adding users and groups to the customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding users or groups is straightforward. This step will allow developers access
    to the customizations when they start coding in either the VS Code or JetBrains
    IDE, both of which would already have the Amazon Q extension installed.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the **Add Users/Groups** tab in the Amazon Q
    console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Amazon Q customizations – add users/groups](img/B21378_10_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Amazon Q customizations – add users/groups
  prefs: []
  type: TYPE_NORMAL
- en: In this case, as seen from the following screenshot, I’m adding myself so that
    I can start using the customizations in the VS Code IDE. Keep in mind this is
    the AWS IAM Identity Center user we configured using the steps listed in [*Chapter
    2*](B21378_02.xhtml#_idTextAnchor022).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Amazon Q customizations – added a user](img/B21378_10_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – Amazon Q customizations – added a user
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are all set to start using the customization from the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Using customization in IDEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the admin gives the thumbs-up to start using a particular customization,
    it’s straightforward to start using it from the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Just a reminder that customizations are only available in the Pro tier, which
    means that you have to log into the IDE using your IAM Identity Center credentials.
    The following screenshot highlights that as soon as I log in to the VS Code IDE
    using my IAM Identity Center credentials, it gives me a notification that I have
    access to a new Amazon Q customization.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Amazon Q customizations – new customization notification in
    VS Code IDE](img/B21378_10_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Amazon Q customizations – new customization notification in VS
    Code IDE
  prefs: []
  type: TYPE_NORMAL
- en: As soon as I select it, I can see the name of the customization that was created
    earlier. The following screenshot highlights this aspect in VS Code IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Amazon Q customizations – selecting a customization in VS
    Code IDE](img/B21378_10_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – Amazon Q customizations – selecting a customization in VS Code
    IDE
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you select that, voilà, you are notified that all new Amazon Q code
    suggestions will be coming from the selected customization. This is highlighted
    in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.16 – Amazon Q customizations – customization selection confirmation
    in VS Code IDE](img/B21378_10_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – Amazon Q customizations – customization selection confirmation
    in VS Code IDE
  prefs: []
  type: TYPE_NORMAL
- en: Now, keep in mind that Amazon Q will attempt to provide you with custom suggestions
    wherever it finds code logic that it would create from the custom training data.
    In case it’s not able to relate to the customized model, Amazon Q will provide
    suggestions from the default model.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get custom code suggestions either through an inline prompt or by using
    the chat feature of Amazon Q Developer. For example, imagine you are working at
    a large e-commerce company with many customer-facing shopping applications, and
    as a developer for a new application, you have been tasked with building a feature
    that recommends items to customers. The logic for this feature may already exist
    in your organization. In your IDE, you can simply insert an inline prompt or use
    an appropriate function name such as `shoppingRecommendationEngine(customerId:
    String)`, and Amazon Q will try to provide the logic based on examples it has
    learned during the customization training process from your organization’s private
    repository. All the complex logic in the function, which may have been established
    as a gold standard in your organization, is immediately utilized without you having
    to understand and create all the code by hand.'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer can also answer your questions about your organization’s
    custom code using the chat feature. You can simply ask the chat to generate or
    explain code based on the use case, and Q will try to infer from what it has learned
    from the organization’s code base to provide the closest matching output. For
    example, you can ask the Amazon Q chat to generate a shopping recommendation engine
    implementation using the k-means clustering algorithm, and it will try to suggest
    code based on other similar examples it has learned from your organization’s code
    base during the customization training process.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of this chapter. Feel free to experiment with it if
    you have subscribed to the Pro tier or if your organization needs to set this
    up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered what code customization is in Amazon Q Developer.
    We started by laying out the prerequisites for Amazon Q customizations. Then,
    we looked at how to create customization in Amazon Q. After the creation process,
    the scores need to be evaluated and optimization techniques need to be put in
    place so that it bumps up the score in subsequent runs of the customization creation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at how multiple versions of customizations are created and maintained.
    Once the customization is created, it’s assigned to users or groups by the admin.
    Finally, the users can log into VS Code or JetBrains IDE using their IAM Identity
    Center credentials to select and start using the customizations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at understanding the references of the code
    suggestion so that appropriate actions can be taken.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Connection setup steps to code repositories: [https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html](https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Troubleshooting customization errors: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/customizations-log-use-understand.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/customizations-log-use-understand.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Customization evaluations: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/customizations-admin-activate.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/customizations-admin-activate.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
