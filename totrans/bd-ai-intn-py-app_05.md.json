["```py\n[\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210a\"),\n        \"paragraph_embedding\": [0.43, 0.57, ...],\n        \"page_number\": 12,\n        \"book_title\": \"A Philosophy of Software Design\",\n        \"publication_year\": 2018\n    },\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210b\"),\n        \"paragraph_embedding\": [0.72, 0.63, ...],\n        \"page_number\": 6,\n        \"book_title\": \"Design Patterns: Elements of Reusable Object-Oriented  Software\",\n        \"publication_year\": 1994\n    },\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210c\"),\n        \"paragraph_embedding\": [0.12, 0.48, ...],\n        \"page_number\": 3,\n        \"book_title\": \"Guide to Fortran\",\n        \"publication_year\": 2008\n    }, ...\n]\n```", "```py\n[\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210d\"),\n         \"page_number\": 81,\n        \"paragraph_embedding\": [0.43, 0.91, ...],\n    },\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210e\"),\n        \"full_page_content\": \"Pulling complexity down makes the most sense if (a) the complexity being pulled down is closely related to the class's existing functionality, (b) pulling the complexity down will result in many simplifications elsewhere in the application, and (c) pulling the complexity down simplifies the class's interface. ...\",\n        \"page_number\": 36,\n    }, ...\n]\n```", "```py\n[\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210d\"),\n        \"book_title\": \"A Philosophy of Software Design\",\n         \"book_title_embedding\": [0.67, 0.45, ...],\n         \"chapter_title\": \"The Nature of Complexity\",\n         \"chapter_title_embedding\": [0.51, 0.89, ...],\n         \"chapter_summary\": \"This book is about how to design software systems to minimize their complexity. The first step is to understand the enemy. Exactly what is 'complexity'?...\",\n         \"chapter_summary_embedding\": [0.36, 0.90, ...],\n         \"raw_text \"System designers sometimes assume that complexity can be measured by lines of code. They assume that if one implementation is shorter than another, then it must be simpler; if it only takes a few lines of code to make a change, then the change must be easy...\",\n         \"raw_text_embedding\": [0.43, 0.11, ...],\n    }, ...\n```", "```py\n[\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210a\"),\n        \"paragraph_embedding\": [0.43, 0.57, ...],\n        \"page_number\": 12,\n        \"score\": 0.95,\n        \"upvotes\": 2,\n        \"downvotes\": 58\n    },\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210b\"),\n        \"paragraph_embedding\": [0.72, 0.63, ...],\n        \"page_number\": 6,\n        \"score\": 0.90\n        \"upvotes\": 81,\n        \"downvotes\": 3\n    },\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210c\"),\n        \"paragraph_embedding\": [0.12, 0.48, ...],\n        \"page_number\": 3,\n        \"score\": 0.67\n        \"upvotes\": 2,\n        \"downvotes\": 5\n    }, ...\n]\n```", "```py\n[\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210d\"),\n         \"page_number\": 81,\n        \"paragraph_embedding\": [0.43, 0.91, ...],\n    },\n    {\n        \"_id\": ObjectID(\"662043cfb084403cdcf5210e\"),\n        \"full_page_content\": \"Pulling complexity down makes the most sense if (a) the complexity being pulled down is closely related to the class's existing functionality, (b) pulling the complexity down will result in many simplifications elsewhere in the application, and (c) pulling the complexity down simplifies the class's interface. ...\",\n        \"page_number\": 36,\n    }, ...\n]\n```"]