- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with spaCy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will have a comprehensive introduction to **natural language**
    **processing** ( **NLP** ) application development with **Python** and **spaCy**
    . First, we will see how NLP development can go hand in hand with Python, along
    with an overview of what spaCy offers as a Python library.
  prefs: []
  type: TYPE_NORMAL
- en: After the warm-up, you will quickly get started with spaCy by downloading the
    library and loading the models. You will then explore spaCy’s popular visualizer,
    **displaCy** , to visualize language data and explore its various features.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will know what you can achieve with spaCy and
    gain an overview of some of its key features. You will be also settled with your
    development environment, which will be used in all the chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of spaCy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing spaCy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing spaCy’s language models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualization with displaCy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code of this chapter can be found at [https://github.com/PacktPublishing/Mastering-spaCy-Second-Edition](https://github.com/PacktPublishing/Mastering-spaCy-Second-Edition)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Overview of spaCy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NLP is a subfield of AI that analyzes text, speech, and other forms of human-generated
    language data. Human language is complicated – even a short paragraph contains
    references to the previous words, pointers to real-world objects, cultural references,
    and the writer’s or speaker’s personal experiences. *Figure 1* *.1* shows such
    an example sentence, which includes a *reference to a relative date* (recently),
    phrases that can be *resolved only by another person* *who knows the speaker*
    (regarding the city that the speaker’s parents live in), and *who has general
    knowledge about the world* (a city is a place where human beings live together):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – An example of human language, containing many cognitive and
    cultural aspects](img/B22441_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – An example of human language, containing many cognitive and cultural
    aspects
  prefs: []
  type: TYPE_NORMAL
- en: How do we process such a complicated structure using computers? With spaCy,
    we can easily model natural language with statistical models, and process linguistic
    features to turn the text into a well-structured representation. This book provides
    all the necessary background and tools for you to extract the meaning from text.
  prefs: []
  type: TYPE_NORMAL
- en: With the launch of ChatGPT in November 2022, the whole world was impressed by
    the ability of a model to understand instructions and generate text in a way very
    similar to how we humans do. However, much like how a food processor can chop,
    slice, and puree in seconds, it’s not always the best tool for every job. Sometimes,
    all you need is a simple kitchen knife to get the task done quickly and efficiently.
    In the same way, while **large language models** ( **LLMs** ) such as ChatGPT
    are powerful and versatile, they can be overkill for many real-world applications
    where **focused** , **efficient** , and **interpretable** solutions are more appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why learning about libraries such as spaCy is so valuable. spaCy offers
    specialized tools for NLP that allow you to tackle specific tasks with speed,
    without the complexity and resource requirements of LLMs. And with **spacy-llm**
    you can also incorporate LLM components in your spaCy pipelines as well. Whether
    you’re building named entity recognizers, text classifiers, or tokenizers, spaCy
    provides the practical, well-optimized *kitchen knife* that cuts through complex
    language tasks efficiently. Understanding when and how to use the right tools
    can make all the difference in building effective NLP systems.
  prefs: []
  type: TYPE_NORMAL
- en: A high-level overview of the spaCy library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: spaCy is an open source Python library designed to help us do real work. It’s
    pretty fast because its performance-critical parts are implemented in Cython,
    allowing for optimized speed while still being easy to use with Python. spaCy
    is shipped with pretrained language models and word vectors for 75+ languages.
  prefs: []
  type: TYPE_NORMAL
- en: Another famous and frequently used Python library is the **Natural Language
    Toolkit** ( **NLTK** ). NLTK’s focus was providing students and researchers with
    an idea of language processing. spaCy focused on providing production-ready code
    from the first day. You can expect models to perform on real-world data, the code
    to be efficient, and the ability to process a huge amount of text data in a reasonable
    time.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that spaCy is focused on real-world NLP applications is not just due
    to its processing speed but also the ease of maintaining code for applications
    built with it. In the PyCon India 2019 keynote titled *Let them write code* (slides
    available at [https://speakerdeck.com/inesmontani/let-them-write-code-keynote-pycon-india-2019](https://speakerdeck.com/inesmontani/let-them-write-code-keynote-pycon-india-2019)
    ), Ines Montani (one of the core makers of spaCy) discusses the philosophy behind
    the creation of spaCy. The main idea behind spaCy design is “ *to help people
    do their work* .” Some of the worst developer experiences are “ *tools that want
    to be fully* *integrated solutions* .”
  prefs: []
  type: TYPE_NORMAL
- en: With spaCy, we can break down each NLP application into pipeline components,
    reusing pre-built library components or creating our own custom components. We
    will dive deep into spaCy pipelines in [*Chapter 5*](B22441_05.xhtml#_idTextAnchor074)
    . The spaCy container objects ( **Doc** , **Token** , and **Span** ) make working
    and processing text seamless (presented in detail in [*Chapter 2*](B22441_02.xhtml#_idTextAnchor028)
    ) and we can train statistical models using spaCy’s **config system** ( [https://spacy.io/usage/training#config](https://spacy.io/usage/training#config)
    ), which brings modularity, flexibility, and clear declarative configuration,
    enabling easy customization and reuse of NLP components ( [*Chapter 6*](B22441_06.xhtml#_idTextAnchor087)
    ). SpaCy also makes it easy to incorporate components that use LLMs in our NLP
    processing pipelines ( [*Chapter 7*](B22441_07.xhtml#_idTextAnchor102) ) and also
    helps us manage and share end-to-end workflows for different use cases and domains
    with **Weasel** ( [*Chapter 9*](B22441_09.xhtml#_idTextAnchor123) ). Finally,
    spaCy also integrates with other cool open source libraries such as **DVC** ,
    **Streamlit** , and **FastAPI** ( *Chapters 9* and *10* ). All this content covers
    the main building blocks of how the spaCy library is structured and how it can
    help us build maintainable NLP solutions.
  prefs: []
  type: TYPE_NORMAL
- en: By now, I hope you’re excited to learn how to use all these cool features during
    our learning journey throughout the book. In the next section, let’s install spaCy
    so we can start coding.
  prefs: []
  type: TYPE_NORMAL
- en: Installing spaCy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s get started by installing and setting up spaCy. spaCy is compatible with
    64-bit CPython 3.7+ and can run on Unix/Linux, macOS/OS X, and Windows. CPython
    is a reference implementation of Python in C. If you already have Python running
    on your system, most probably your CPython modules are fine too – hence, you don’t
    need to worry about this detail. The newest spaCy releases are always downloadable
    via **pip** ( [https://pypi.org/](https://pypi.org/) ) and **conda** ( [https://conda.io/en/latest/](https://conda.io/en/latest/)
    ). **pip** and **conda** are two of the most popular distribution packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s always a good idea to create a virtual environment to isolate the independent
    set of Python packages for each project. On Windows, we can create a virtual environment
    and install **spacy** with **pip** using these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If your machine has a GPU available, you can install spaCy with GPU support
    with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can see the installation instructions for each operating system at [https://spacy.io/usage#quickstart](https://spacy.io/usage#quickstart)
    . *Figure 1* *.2* shows all the available installation options.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – spaCy installation options](img/B22441_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – spaCy installation options
  prefs: []
  type: TYPE_NORMAL
- en: After installing the library, we need to install the language models. Let’s
    do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing spaCy’s language models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The spaCy installation doesn’t come with the statistical language models needed
    for the spaCy pipeline tasks. spaCy language models contain knowledge about a
    specific language collected from a set of resources. Language models let us perform
    a variety of NLP tasks, including **parts of speech tagging** popularly called
    as **POS tagging** and **named entity** **recognition** ( **NER** ).
  prefs: []
  type: TYPE_NORMAL
- en: Different languages have different models that are language-specific. There
    are also different models available for the same language. The naming convention
    of the models is **[lang]_[name]** . The **[name]** part usually contains information
    about the model capabilities, the genre, and the size. For example, the **pt_core_web_sm**
    model is a small Portuguese pipeline trained on web text. Large models can require
    a lot of disk space, for example, **en_core_web_lg** takes up 382 MB, while **en_core_web_md**
    needs 31 and **en_core_web_sm** takes only 12 MB.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good practice to match the model genre to your text type. We recommend
    picking the genre as close as possible to your text. For example, the vocabulary
    in the social media genre will be very different from that in the Wikipedia genre.
    You can pick the web genre if you have social media posts, newspaper articles,
    or financial news – that is, more language from daily life. The Wikipedia genre
    is suitable for rather formal articles, long documents, and technical documents.
    In case you are not sure which genre is the most suitable, you can download several
    models, test some example sentences from your own corpus, and see how each model
    performs.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’re well-informed about how to choose a model, let’s download our
    first model.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a language model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can install spaCy models as Python packages, meaning you can install them
    just like any other Python module and make them a part of your Python application.
    They can also go into your **requirements.txt** file as a dependency. You can
    install the models from a download URL or a local director manually, or via **pip**
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download a model via spaCy’s **download** command. **download** looks
    for the most compatible model for your spaCy version, and then downloads and installs
    it. This way, you don’t need to bother about any potential mismatch between the
    model and your spaCy version. This is the easiest way to install a model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command selects and downloads the most compatible version of
    this specific model for your local spaCy version. To download the exact model
    version, you can use the following (though you often don’t need it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The **download** command uses **pip** behind the scenes. When you make a download,
    **pip** installs the package and places it in your **site-packages** directory
    just as any other installed Python package.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the download, we can load the packages via spaCy’s **load()** method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have everything set to start using spaCy. Let’s now learn
    a little bit about spaCy’s powerful visualization tool, **displaCy** .
  prefs: []
  type: TYPE_NORMAL
- en: Visualization with displaCy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualization is the easiest way to explain some concepts to your colleagues,
    your boss, and any technical or non-technical audience. Visualization of language
    data is specifically useful and allows you to identify patterns in your data at
    a glance.
  prefs: []
  type: TYPE_NORMAL
- en: There are many Python libraries and plugins such as **matplotlib** , **seaborn**
    , **tensorboard** , and so on. spaCy also comes with its own visualizer – displaCy.
    In this subsection, you’ll learn how to spin up a displaCy server on your machine,
    in a Jupyter notebook, and in a web application. We’ll start by exploring the
    easiest way – using displaCy’s interactive demo.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with displaCy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go ahead and navigate to [https://demos.explosion.ai/displacy](https://demos.explosion.ai/displacy)
    to use the interactive demo. Enter your text in the **Text to parse** box and
    then click the search icon on the right to generate the visualization. The result
    might look like *Figure 1* *.3* .
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – displaCy’s online demo](img/B22441_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – displaCy’s online demo
  prefs: []
  type: TYPE_NORMAL
- en: The visualizer performs two syntactic parses, **POS tagging** , and a **dependency
    parser** . We’ll explore them in the upcoming chapters. For now, just think of
    the result as a sentence structure. Now, let’s see how to visualize named entities
    with displaCy.
  prefs: []
  type: TYPE_NORMAL
- en: Entity visualizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: displaCy’s entity visualizer highlights the named entities in your text. The
    online demo is at [https://demos.explosion.ai/displacy-ent](https://demos.explosion.ai/displacy-ent)
    . We haven’t gone through named entities yet, but you can think of them as proper
    nouns for important entities such as people’s names, company names, dates, city
    and country names, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The online demo works similar to the syntactic parser demo. Enter your text
    into the textbox and hit the **Search** button. *Figure 1* *.4* shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – displaCy’s named entity visualizer](img/B22441_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – displaCy’s named entity visualizer
  prefs: []
  type: TYPE_NORMAL
- en: The right side contains checkboxes for entity types. You can check the boxes
    that match your text type such as, for instance, **MONEY** and **QUANTITY** for
    a financial text. Just like in the syntactic parser demo, you can choose from
    the available models.
  prefs: []
  type: TYPE_NORMAL
- en: Using displaCy with pure Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The displaCy visualizers are integrated into the core library. This means that
    you can start using displaCy immediately after installing spaCy on your machine.
    Let’s go through some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s import spaCy and displaCy, load the model, and process a sentence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can use the displaCy **serve()** method to run a server locally, specifying
    that we want to see the dependency parser visualization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After firing up this code, you should see a response from displaCy as in *Figure
    1* *.5* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Firing up displaCy locally](img/B22441_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Firing up displaCy locally
  prefs: []
  type: TYPE_NORMAL
- en: We can see that **http://0.0.0.0:5000** is the local address where displaCy
    renders your visualization. You can open this URL in a browser to see it. When
    you want to shut down the server, you can press *Ctrl* + *C* to shut down the
    displaCy server and go back to the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you wish to use another port or if you get an error because port **5000**
    is already in use, you can use the **port** parameter of displaCy with another
    port number. Replacing the last line of the preceding code block with the following
    line will suffice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we provide the port number **5001** explicitly. In this case, displaCy
    will render the graphics on **http://0.0.0.0:5001** .
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating an entity recognizer visualization is done similarly. We pass **ent**
    to the style parameter instead of **dep** :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s move on to other platforms we can use for displaying the results.
  prefs: []
  type: TYPE_NORMAL
- en: Using displaCy in Jupyter notebooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jupyter Notebook is an important part of daily data science work. To display
    the visualizations in Jupyter notebooks, we can change the **serve()** method
    to **render()** . The rest of the code is all the same. *Figure 1* *.6* shows
    the result of running **displaCy** in a Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – displaCy rendering results in a Jupyter notebook](img/B22441_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – displaCy rendering results in a Jupyter notebook
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to find out how to use different background images, background colors,
    and fonts, you can visit the displaCy documentation at [http://spacy.io/usage/visualizers](http://spacy.io/usage/visualizers)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gave you an introduction to NLP with Python and spaCy. You now
    have a brief idea about why to use Python for language processing and the reasons
    to prefer spaCy for creating your NLP applications. We also got started on our
    spaCy journey by installing spaCy and downloading language models. This chapter
    also introduced us to the visualization tool, displaCy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue our exciting spaCy journey with spaCy
    core operations such as **tokenization** and **lemmatization** . It’ll be our
    first encounter with spaCy features in detail. See you there!
  prefs: []
  type: TYPE_NORMAL
