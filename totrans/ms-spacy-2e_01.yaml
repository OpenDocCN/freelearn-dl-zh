- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Started with spaCy
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 spaCy
- en: In this chapter, we will have a comprehensive introduction to **natural language**
    **processing** ( **NLP** ) application development with **Python** and **spaCy**
    . First, we will see how NLP development can go hand in hand with Python, along
    with an overview of what spaCy offers as a Python library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将全面介绍使用 **Python** 和 **spaCy** 进行自然语言处理（**NLP**）应用开发。首先，我们将了解 NLP 开发如何与
    Python 相辅相成，以及 spaCy 作为 Python 库提供的内容概述。
- en: After the warm-up, you will quickly get started with spaCy by downloading the
    library and loading the models. You will then explore spaCy’s popular visualizer,
    **displaCy** , to visualize language data and explore its various features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在热身之后，您将快速开始使用 spaCy，通过下载库和加载模型。然后，您将探索 spaCy 的流行可视化工具 **displaCy**，以可视化语言数据并探索其各种特性。
- en: By the end of this chapter, you will know what you can achieve with spaCy and
    gain an overview of some of its key features. You will be also settled with your
    development environment, which will be used in all the chapters of this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将了解使用 spaCy 可以实现什么，并对其关键特性有一个概述。您还将熟悉您的开发环境，该环境将用于本书的所有章节。
- en: 'We’re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Overview of spaCy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: spaCy 概述
- en: Installing spaCy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 spaCy
- en: Installing spaCy’s language models
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 spaCy 的语言模型
- en: Visualization with displaCy
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 displaCy 进行可视化
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code of this chapter can be found at [https://github.com/PacktPublishing/Mastering-spaCy-Second-Edition](https://github.com/PacktPublishing/Mastering-spaCy-Second-Edition)
    .
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在 [https://github.com/PacktPublishing/Mastering-spaCy-Second-Edition](https://github.com/PacktPublishing/Mastering-spaCy-Second-Edition)
    找到。
- en: Overview of spaCy
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: spaCy 概述
- en: 'NLP is a subfield of AI that analyzes text, speech, and other forms of human-generated
    language data. Human language is complicated – even a short paragraph contains
    references to the previous words, pointers to real-world objects, cultural references,
    and the writer’s or speaker’s personal experiences. *Figure 1* *.1* shows such
    an example sentence, which includes a *reference to a relative date* (recently),
    phrases that can be *resolved only by another person* *who knows the speaker*
    (regarding the city that the speaker’s parents live in), and *who has general
    knowledge about the world* (a city is a place where human beings live together):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言处理（NLP）是人工智能的一个子领域，它分析文本、语音和其他形式的人类生成语言数据。人类语言很复杂——即使是简短的段落也包含对先前单词的引用、指向现实世界对象的指针、文化引用以及作者或说话者的个人经历。*图
    1.1* *.1* 展示了这样一个例子句子，其中包含对*相对日期*的引用（最近），只有*知道说话者的人*才能解决的短语（关于说话者父母居住的城市），以及*对世界有一般知识的人*（城市是人类共同生活的地方）：
- en: '![Figure 1.1 – An example of human language, containing many cognitive and
    cultural aspects](img/B22441_01_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 包含许多认知和文化方面的人类语言示例](img/B22441_01_01.jpg)'
- en: Figure 1.1 – An example of human language, containing many cognitive and cultural
    aspects
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 包含许多认知和文化方面的人类语言示例
- en: How do we process such a complicated structure using computers? With spaCy,
    we can easily model natural language with statistical models, and process linguistic
    features to turn the text into a well-structured representation. This book provides
    all the necessary background and tools for you to extract the meaning from text.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用计算机处理如此复杂的结构？使用 spaCy，我们可以轻松地用统计模型建模自然语言，并处理语言特征，将文本转换为结构良好的表示。本书为您提供了所有必要的背景和工具，以从文本中提取意义。
- en: With the launch of ChatGPT in November 2022, the whole world was impressed by
    the ability of a model to understand instructions and generate text in a way very
    similar to how we humans do. However, much like how a food processor can chop,
    slice, and puree in seconds, it’s not always the best tool for every job. Sometimes,
    all you need is a simple kitchen knife to get the task done quickly and efficiently.
    In the same way, while **large language models** ( **LLMs** ) such as ChatGPT
    are powerful and versatile, they can be overkill for many real-world applications
    where **focused** , **efficient** , and **interpretable** solutions are more appropriate.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2022年11月ChatGPT的推出，全世界都为模型能够以与我们人类非常相似的方式理解指令和生成文本的能力而感到震惊。然而，就像食品加工器可以在几秒钟内切碎、切片和搅拌一样，它并不总是每个工作的最佳工具。有时，你只需要一把简单的厨房刀就能快速高效地完成任务。同样，虽然**大型语言模型**（**LLMs**）如ChatGPT功能强大且多才多艺，但它们对于许多需要**专注**、**高效**和**可解释**解决方案的真实世界应用来说可能是过度配置的。
- en: That’s why learning about libraries such as spaCy is so valuable. spaCy offers
    specialized tools for NLP that allow you to tackle specific tasks with speed,
    without the complexity and resource requirements of LLMs. And with **spacy-llm**
    you can also incorporate LLM components in your spaCy pipelines as well. Whether
    you’re building named entity recognizers, text classifiers, or tokenizers, spaCy
    provides the practical, well-optimized *kitchen knife* that cuts through complex
    language tasks efficiently. Understanding when and how to use the right tools
    can make all the difference in building effective NLP systems.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，了解如spaCy之类的库非常有价值。spaCy提供了专门用于NLP的工具，允许你快速处理特定任务，而无需LLM的复杂性和资源需求。并且，通过**spacy-llm**，你还可以将LLM组件纳入spaCy管道中。无论你是构建命名实体识别器、文本分类器还是分词器，spaCy都提供了实用的、优化良好的*厨房刀*，能够高效地解决复杂语言任务。了解何时以及如何使用正确的工具，在构建有效的NLP系统中可以起到决定性作用。
- en: A high-level overview of the spaCy library
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: spaCy库的高级概述
- en: spaCy is an open source Python library designed to help us do real work. It’s
    pretty fast because its performance-critical parts are implemented in Cython,
    allowing for optimized speed while still being easy to use with Python. spaCy
    is shipped with pretrained language models and word vectors for 75+ languages.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: spaCy是一个开源的Python库，旨在帮助我们完成实际工作。它非常快，因为其性能关键部分是用Cython实现的，允许优化速度同时仍然易于与Python一起使用。spaCy附带预训练的语言模型和75多种语言的词向量。
- en: Another famous and frequently used Python library is the **Natural Language
    Toolkit** ( **NLTK** ). NLTK’s focus was providing students and researchers with
    an idea of language processing. spaCy focused on providing production-ready code
    from the first day. You can expect models to perform on real-world data, the code
    to be efficient, and the ability to process a huge amount of text data in a reasonable
    time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个著名且经常使用的Python库是**自然语言工具包**（**NLTK**）。NLK的焦点是为学生和研究人员提供一个语言处理的概念。spaCy从第一天起就专注于提供生产就绪的代码。你可以期待模型在真实世界数据上的表现，代码的效率，以及能够在合理的时间内处理大量文本数据的能力。
- en: The fact that spaCy is focused on real-world NLP applications is not just due
    to its processing speed but also the ease of maintaining code for applications
    built with it. In the PyCon India 2019 keynote titled *Let them write code* (slides
    available at [https://speakerdeck.com/inesmontani/let-them-write-code-keynote-pycon-india-2019](https://speakerdeck.com/inesmontani/let-them-write-code-keynote-pycon-india-2019)
    ), Ines Montani (one of the core makers of spaCy) discusses the philosophy behind
    the creation of spaCy. The main idea behind spaCy design is “ *to help people
    do their work* .” Some of the worst developer experiences are “ *tools that want
    to be fully* *integrated solutions* .”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: spaCy专注于真实世界NLP应用的事实并不仅仅是因为其处理速度，还因为使用它构建的应用程序易于维护代码。在2019年PyCon印度大会的主题演讲“让他们编写代码”（幻灯片可在[https://speakerdeck.com/inesmontani/let-them-write-code-keynote-pycon-india-2019](https://speakerdeck.com/inesmontani/let-them-write-code-keynote-pycon-india-2019)）中，Ines
    Montani（spaCy的核心开发者之一）讨论了spaCy创建背后的哲学。spaCy设计背后的主要思想是“*帮助人们完成工作*”。一些最糟糕的开发者体验是“*想要完全*
    *集成解决方案*的工具。”
- en: With spaCy, we can break down each NLP application into pipeline components,
    reusing pre-built library components or creating our own custom components. We
    will dive deep into spaCy pipelines in [*Chapter 5*](B22441_05.xhtml#_idTextAnchor074)
    . The spaCy container objects ( **Doc** , **Token** , and **Span** ) make working
    and processing text seamless (presented in detail in [*Chapter 2*](B22441_02.xhtml#_idTextAnchor028)
    ) and we can train statistical models using spaCy’s **config system** ( [https://spacy.io/usage/training#config](https://spacy.io/usage/training#config)
    ), which brings modularity, flexibility, and clear declarative configuration,
    enabling easy customization and reuse of NLP components ( [*Chapter 6*](B22441_06.xhtml#_idTextAnchor087)
    ). SpaCy also makes it easy to incorporate components that use LLMs in our NLP
    processing pipelines ( [*Chapter 7*](B22441_07.xhtml#_idTextAnchor102) ) and also
    helps us manage and share end-to-end workflows for different use cases and domains
    with **Weasel** ( [*Chapter 9*](B22441_09.xhtml#_idTextAnchor123) ). Finally,
    spaCy also integrates with other cool open source libraries such as **DVC** ,
    **Streamlit** , and **FastAPI** ( *Chapters 9* and *10* ). All this content covers
    the main building blocks of how the spaCy library is structured and how it can
    help us build maintainable NLP solutions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用spaCy，我们可以将每个NLP应用程序分解为管道组件，重用预构建的库组件或创建我们自己的自定义组件。我们将在[*第5章*](B22441_05.xhtml#_idTextAnchor074)中深入探讨spaCy管道。spaCy容器对象（**Doc**、**Token**和**Span**）使文本的处理和加工变得无缝（在[*第2章*](B22441_02.xhtml#_idTextAnchor028)中详细介绍）并且我们可以使用spaCy的**配置系统**（[https://spacy.io/usage/training#config](https://spacy.io/usage/training#config)）来训练统计模型，这带来了模块化、灵活性和清晰的声明性配置，使得NLP组件的定制和重用变得容易（[*第6章*](B22441_06.xhtml#_idTextAnchor087)）。SpaCy还使得在我们的NLP处理管道中集成使用LLMs的组件变得容易（[*第7章*](B22441_07.xhtml#_idTextAnchor102)），并且还帮助我们使用**Weasel**（[*第9章*](B22441_09.xhtml#_idTextAnchor123)）管理和共享不同用例和领域的端到端工作流程。最后，spaCy还与其他酷炫的开源库如**DVC**、**Streamlit**和**FastAPI**（*第9章*和*第10章*）集成。所有这些内容涵盖了spaCy库的结构以及它如何帮助我们构建可维护的NLP解决方案的主要构建块。
- en: By now, I hope you’re excited to learn how to use all these cool features during
    our learning journey throughout the book. In the next section, let’s install spaCy
    so we can start coding.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我希望您在本书的学习之旅中学习如何使用所有这些酷炫功能感到兴奋。在下一节中，让我们安装spaCy，这样我们就可以开始编码了。
- en: Installing spaCy
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装spaCy
- en: Let’s get started by installing and setting up spaCy. spaCy is compatible with
    64-bit CPython 3.7+ and can run on Unix/Linux, macOS/OS X, and Windows. CPython
    is a reference implementation of Python in C. If you already have Python running
    on your system, most probably your CPython modules are fine too – hence, you don’t
    need to worry about this detail. The newest spaCy releases are always downloadable
    via **pip** ( [https://pypi.org/](https://pypi.org/) ) and **conda** ( [https://conda.io/en/latest/](https://conda.io/en/latest/)
    ). **pip** and **conda** are two of the most popular distribution packages.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装和设置spaCy开始。spaCy与64位CPython 3.7+兼容，可以在Unix/Linux、macOS/OS X和Windows上运行。CPython是用C实现的Python的参考实现。如果您已经在系统上运行了Python，那么您的CPython模块很可能也是好的——因此，您不需要担心这个细节。最新的spaCy版本总是可以通过**pip**（[https://pypi.org/](https://pypi.org/)）和**conda**（[https://conda.io/en/latest/](https://conda.io/en/latest/)）下载。**pip**和**conda**是最受欢迎的发行包之一。
- en: 'It’s always a good idea to create a virtual environment to isolate the independent
    set of Python packages for each project. On Windows, we can create a virtual environment
    and install **spacy** with **pip** using these commands:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总是创建一个虚拟环境来隔离每个项目的独立Python包集是一个好主意。在Windows上，我们可以使用以下命令创建虚拟环境并使用**pip**安装**spacy**：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If your machine has a GPU available, you can install spaCy with GPU support
    with this command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的机器有可用的GPU，您可以使用以下命令安装具有GPU支持的spaCy：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can see the installation instructions for each operating system at [https://spacy.io/usage#quickstart](https://spacy.io/usage#quickstart)
    . *Figure 1* *.2* shows all the available installation options.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://spacy.io/usage#quickstart](https://spacy.io/usage#quickstart)查看每个操作系统的安装说明。*图1.2*展示了所有可用的安装选项。
- en: '![Figure 1.2 – spaCy installation options](img/B22441_01_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – spaCy安装选项](img/B22441_01_02.jpg)'
- en: Figure 1.2 – spaCy installation options
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – spaCy安装选项
- en: After installing the library, we need to install the language models. Let’s
    do that in the next section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 安装库后，我们需要安装语言模型。让我们在下一节中完成这个操作。
- en: Installing spaCy’s language models
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装spaCy的语言模型
- en: The spaCy installation doesn’t come with the statistical language models needed
    for the spaCy pipeline tasks. spaCy language models contain knowledge about a
    specific language collected from a set of resources. Language models let us perform
    a variety of NLP tasks, including **parts of speech tagging** popularly called
    as **POS tagging** and **named entity** **recognition** ( **NER** ).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: spaCy的安装不包括spaCy管道任务所需的统计语言模型。spaCy语言模型包含从一组资源收集的特定语言的知识。语言模型使我们能够执行各种NLP任务，包括**词性标注**，通常称为**POS标注**和**命名实体****识别**（**NER**）。
- en: Different languages have different models that are language-specific. There
    are also different models available for the same language. The naming convention
    of the models is **[lang]_[name]** . The **[name]** part usually contains information
    about the model capabilities, the genre, and the size. For example, the **pt_core_web_sm**
    model is a small Portuguese pipeline trained on web text. Large models can require
    a lot of disk space, for example, **en_core_web_lg** takes up 382 MB, while **en_core_web_md**
    needs 31 and **en_core_web_sm** takes only 12 MB.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的语言有不同的语言特定模型。同一语言也有不同的模型可供选择。模型的命名约定是**[lang]_[name]**。**[name]**部分通常包含有关模型功能、类型和大小的信息。例如，**pt_core_web_sm**模型是在网络文本上训练的小型葡萄牙语管道。大型模型可能需要大量的磁盘空间，例如，**en_core_web_lg**占用382
    MB，而**en_core_web_md**需要31 MB，而**en_core_web_sm**只需12 MB。
- en: It is a good practice to match the model genre to your text type. We recommend
    picking the genre as close as possible to your text. For example, the vocabulary
    in the social media genre will be very different from that in the Wikipedia genre.
    You can pick the web genre if you have social media posts, newspaper articles,
    or financial news – that is, more language from daily life. The Wikipedia genre
    is suitable for rather formal articles, long documents, and technical documents.
    In case you are not sure which genre is the most suitable, you can download several
    models, test some example sentences from your own corpus, and see how each model
    performs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型类型与您的文本类型相匹配是一种良好的实践。我们建议选择尽可能接近您文本的类型。例如，社交媒体类型的词汇将与维基百科类型的词汇大不相同。如果您有社交媒体帖子、报纸文章或财经新闻，可以选择网络类型，即更多来自日常生活的语言。维基百科类型适用于较为正式的文章、长文档和技术文档。如果您不确定哪种类型最适合，您可以下载几个模型，测试一些来自您自己的语料库的示例句子，并查看每个模型的表现。
- en: Now that we’re well-informed about how to choose a model, let’s download our
    first model.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何选择模型，让我们下载我们的第一个模型。
- en: Installing a language model
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装语言模型
- en: We can install spaCy models as Python packages, meaning you can install them
    just like any other Python module and make them a part of your Python application.
    They can also go into your **requirements.txt** file as a dependency. You can
    install the models from a download URL or a local director manually, or via **pip**
    .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将spaCy模型作为Python软件包安装，这意味着您可以将它们像安装任何其他Python模块一样安装，并将它们作为您Python应用程序的一部分。它们也可以放入您的**requirements.txt**文件中作为依赖项。您可以手动从下载URL或本地目录安装模型，或通过**pip**安装。
- en: 'You can download a model via spaCy’s **download** command. **download** looks
    for the most compatible model for your spaCy version, and then downloads and installs
    it. This way, you don’t need to bother about any potential mismatch between the
    model and your spaCy version. This is the easiest way to install a model:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过spaCy的**download**命令下载模型。**download**会寻找与您的spaCy版本最兼容的模型，然后下载并安装它。这样，您就不必担心模型与您的spaCy版本之间可能存在的任何不匹配。这是安装模型的最简单方法：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding command selects and downloads the most compatible version of
    this specific model for your local spaCy version. To download the exact model
    version, you can use the following (though you often don’t need it):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令选择并下载与您本地spaCy版本最兼容的此特定模型的版本。要下载确切的模型版本，您可以使用以下命令（尽管您通常不需要这样做）：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The **download** command uses **pip** behind the scenes. When you make a download,
    **pip** installs the package and places it in your **site-packages** directory
    just as any other installed Python package.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载**命令在幕后使用**pip**。当您进行下载时，**pip**会安装该软件包并将其放置在您的**site-packages**目录中，就像任何其他已安装的Python软件包一样。'
- en: 'After the download, we can load the packages via spaCy’s **load()** method:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，我们可以通过spaCy的**load()**方法加载软件包：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At this point, we have everything set to start using spaCy. Let’s now learn
    a little bit about spaCy’s powerful visualization tool, **displaCy** .
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经设置好了一切，可以开始使用spaCy。现在让我们了解一下spaCy强大的可视化工具**displaCy**。
- en: Visualization with displaCy
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用displaCy进行可视化
- en: Visualization is the easiest way to explain some concepts to your colleagues,
    your boss, and any technical or non-technical audience. Visualization of language
    data is specifically useful and allows you to identify patterns in your data at
    a glance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化是向您的同事、老板以及任何技术或非技术受众解释一些概念的最简单方法。语言数据可视化特别有用，并允许您一眼就能识别数据中的模式。
- en: There are many Python libraries and plugins such as **matplotlib** , **seaborn**
    , **tensorboard** , and so on. spaCy also comes with its own visualizer – displaCy.
    In this subsection, you’ll learn how to spin up a displaCy server on your machine,
    in a Jupyter notebook, and in a web application. We’ll start by exploring the
    easiest way – using displaCy’s interactive demo.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多Python库和插件，如**matplotlib**、**seaborn**、**tensorboard**等。spaCy也自带其可视化器 – displaCy。在本节中，您将学习如何在您的机器上启动displaCy服务器，在Jupyter笔记本中，以及在Web应用程序中。我们将从最简单的方法开始探索
    – 使用displaCy的交互式演示。
- en: Getting started with displaCy
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用displaCy
- en: Go ahead and navigate to [https://demos.explosion.ai/displacy](https://demos.explosion.ai/displacy)
    to use the interactive demo. Enter your text in the **Text to parse** box and
    then click the search icon on the right to generate the visualization. The result
    might look like *Figure 1* *.3* .
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请前往[https://demos.explosion.ai/displacy](https://demos.explosion.ai/displacy)使用交互式演示。在**文本解析**框中输入您的文本，然后点击右侧的搜索图标以生成可视化。结果可能看起来像*图1.3*。
- en: '![Figure 1.3 – displaCy’s online demo](img/B22441_01_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – displaCy的在线演示](img/B22441_01_03.jpg)'
- en: Figure 1.3 – displaCy’s online demo
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – displaCy的在线演示
- en: The visualizer performs two syntactic parses, **POS tagging** , and a **dependency
    parser** . We’ll explore them in the upcoming chapters. For now, just think of
    the result as a sentence structure. Now, let’s see how to visualize named entities
    with displaCy.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化器执行两个句法分析，**词性标注**和**依存句法分析器**。我们将在接下来的章节中探讨它们。现在，只需将结果视为句子结构。现在，让我们看看如何使用displaCy可视化命名实体。
- en: Entity visualizer
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体可视化器
- en: displaCy’s entity visualizer highlights the named entities in your text. The
    online demo is at [https://demos.explosion.ai/displacy-ent](https://demos.explosion.ai/displacy-ent)
    . We haven’t gone through named entities yet, but you can think of them as proper
    nouns for important entities such as people’s names, company names, dates, city
    and country names, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: displaCy的实体可视化器突出显示文本中的命名实体。在线演示在[https://demos.explosion.ai/displacy-ent](https://demos.explosion.ai/displacy-ent)
    。我们还没有讲解命名实体，但您可以将它们视为重要实体的专有名词，例如人名、公司名、日期、城市和国家名称等。
- en: The online demo works similar to the syntactic parser demo. Enter your text
    into the textbox and hit the **Search** button. *Figure 1* *.4* shows an example.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在线演示与句法分析器演示类似。将您的文本输入到文本框中，然后点击**搜索**按钮。*图1.4*显示了示例。
- en: '![Figure 1.4 – displaCy’s named entity visualizer](img/B22441_01_04.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – displaCy的命名实体可视化器](img/B22441_01_04.jpg)'
- en: Figure 1.4 – displaCy’s named entity visualizer
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – displaCy的命名实体可视化器
- en: The right side contains checkboxes for entity types. You can check the boxes
    that match your text type such as, for instance, **MONEY** and **QUANTITY** for
    a financial text. Just like in the syntactic parser demo, you can choose from
    the available models.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧包含实体类型的复选框。您可以选择与您的文本类型匹配的复选框，例如，对于财务文本，可以选择**MONEY**和**QUANTITY**。就像在句法分析器演示中一样，您可以从可用的模型中选择。
- en: Using displaCy with pure Python
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用纯Python与displaCy结合
- en: 'The displaCy visualizers are integrated into the core library. This means that
    you can start using displaCy immediately after installing spaCy on your machine.
    Let’s go through some examples:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: displaCy的可视化器集成到核心库中。这意味着您可以在安装spaCy到您的机器后立即开始使用displaCy。让我们通过一些示例来了解：
- en: 'First, let’s import spaCy and displaCy, load the model, and process a sentence:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们导入spaCy和displaCy，加载模型，并处理一个句子：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we can use the displaCy **serve()** method to run a server locally, specifying
    that we want to see the dependency parser visualization:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用displaCy的**serve()**方法在本地运行服务器，指定我们想要查看依存句法分析器的可视化：
- en: '[PRE6]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After firing up this code, you should see a response from displaCy as in *Figure
    1* *.5* .
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动此代码后，您应该会看到displaCy的响应，如图*图1.5*所示。
- en: '![Figure 1.5 – Firing up displaCy locally](img/B22441_01_05.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 在本地启动 displaCy](img/B22441_01_05.jpg)'
- en: Figure 1.5 – Firing up displaCy locally
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 在本地启动 displaCy
- en: We can see that **http://0.0.0.0:5000** is the local address where displaCy
    renders your visualization. You can open this URL in a browser to see it. When
    you want to shut down the server, you can press *Ctrl* + *C* to shut down the
    displaCy server and go back to the command line.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到 **http://0.0.0.0:5000** 是 displaCy 渲染您可视化本地的地址。您可以在浏览器中打开此 URL 来查看它。当您想要关闭服务器时，您可以按
    *Ctrl* + *C* 来关闭 displaCy 服务器并返回到命令行。
- en: 'If you wish to use another port or if you get an error because port **5000**
    is already in use, you can use the **port** parameter of displaCy with another
    port number. Replacing the last line of the preceding code block with the following
    line will suffice:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想使用另一个端口号，或者如果您因为端口号 **5000** 已经被占用而遇到错误，您可以使用 displaCy 的 **port** 参数与另一个端口号。将前面代码块的最后一行替换为以下行就足够了：
- en: '[PRE7]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we provide the port number **5001** explicitly. In this case, displaCy
    will render the graphics on **http://0.0.0.0:5001** .
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们明确地提供了端口号 **5001**。在这种情况下，displaCy 将在 **http://0.0.0.0:5001** 上渲染图形。
- en: 'Creating an entity recognizer visualization is done similarly. We pass **ent**
    to the style parameter instead of **dep** :'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建实体识别器可视化也是类似的。我们传递 **ent** 到样式参数而不是 **dep**：
- en: '[PRE8]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s move on to other platforms we can use for displaying the results.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续了解其他我们可以用来显示结果的平台。
- en: Using displaCy in Jupyter notebooks
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Jupyter notebooks 中使用 displaCy
- en: Jupyter Notebook is an important part of daily data science work. To display
    the visualizations in Jupyter notebooks, we can change the **serve()** method
    to **render()** . The rest of the code is all the same. *Figure 1* *.6* shows
    the result of running **displaCy** in a Jupyter notebook.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 是日常数据科学工作的重要组成部分。为了在 Jupyter notebooks 中显示可视化，我们可以将 **serve()**
    方法更改为 **render()**。其余的代码都是相同的。*图 1* *.6* 展示了在 Jupyter notebook 中运行 **displaCy**
    的结果。
- en: '![Figure 1.6 – displaCy rendering results in a Jupyter notebook](img/B22441_01_06.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – displaCy 在 Jupyter notebook 中的渲染结果](img/B22441_01_06.jpg)'
- en: Figure 1.6 – displaCy rendering results in a Jupyter notebook
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – displaCy 在 Jupyter notebook 中的渲染结果
- en: If you wish to find out how to use different background images, background colors,
    and fonts, you can visit the displaCy documentation at [http://spacy.io/usage/visualizers](http://spacy.io/usage/visualizers)
    .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解如何使用不同的背景图片、背景颜色和字体，你可以访问 displaCy 文档，网址为 [http://spacy.io/usage/visualizers](http://spacy.io/usage/visualizers)。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter gave you an introduction to NLP with Python and spaCy. You now
    have a brief idea about why to use Python for language processing and the reasons
    to prefer spaCy for creating your NLP applications. We also got started on our
    spaCy journey by installing spaCy and downloading language models. This chapter
    also introduced us to the visualization tool, displaCy.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为您介绍了使用 Python 和 spaCy 的 NLP（自然语言处理）。您现在对为什么使用 Python 进行语言处理以及为什么选择 spaCy
    创建您的 NLP 应用程序的原因有了简要的了解。我们还通过安装 spaCy 和下载语言模型开始了我们的 spaCy 之旅。本章还介绍了可视化工具 displaCy。
- en: In the next chapter, we will continue our exciting spaCy journey with spaCy
    core operations such as **tokenization** and **lemmatization** . It’ll be our
    first encounter with spaCy features in detail. See you there!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续我们的激动人心的 spaCy 之旅，学习 spaCy 的核心操作，如**分词**和**词形还原**。这将是我们第一次详细接触 spaCy
    的功能。那里见！
