- en: '*Chapter 2*: Using the Editor UI to Create Workflows'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use n8n's **Editor UI**. This will help
    you find the different functionalities of n8n. You will also learn about the different
    kinds of nodes in n8n and how to use them. You will then learn about building
    workflows and dealing with dynamic data to handle different kinds of scenarios.
    You will finally create your first workflow in n8n.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Editor UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the regular and trigger nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expressions – using dynamic data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflows – putting it all together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first workflow – Hello World
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a list of technical requirements to prepare before continuing with
    the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Have n8n installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure n8n is running and the Editor UI is open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an account on Telegram.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the Editor UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Editor UI is a graphical interface that allows you to create automations
    using a node-based approach. n8n takes its inspiration for node-based visualization
    from the film and television industry, where many tools have a node-based system.
    Let''s take a look at what we have here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The Editor UI in n8n'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.01_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – The Editor UI in n8n
  prefs: []
  type: TYPE_NORMAL
- en: Let's start from the top left. You can expand the menu by clicking on the **>**
    button beneath the n8n logo.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we'll get ourselves familiar with the interface so that we can quickly
    find our way through n8n. We'll dive deeper into specific sections, such as **Executions**,
    as we progress through the chapters in this book. Let's take a look at the menu
    bar on the left.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we have the **Workflows** menu. In the menu, we have the following
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**New**: Create a new workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open**: Open an existing workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save**: Save changes to the current workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save As**: Save the current workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rename**: Rename the current workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: Delete the current workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download**: Download the workflow as a JSON file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import from URL**: Import a workflow from a URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import from File**: Import a workflow from a JSON file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Settings**: Configure the settings for the current workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note that some of these options will be grayed out since we haven't saved
    the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have the **Credentials** menu. In this menu, we have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**New**: Create a new credential.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open**: Open an existing credential.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: n8n allows you to connect to many different applications, services, and APIs.
    A lot of these require credentials to authenticate yourself. n8n enables you to
    encrypt and save these credentials in its database so that they can be quickly
    reused when building workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we have the **Executions** tab, which opens up a modal (popup) where
    you can view the executions of your different workflows. You can also filter the
    executions by their name and status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have the **Help** tab, which lists resources that will be useful
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Documentation**: A link to the n8n docs. The n8n docs contain detailed information
    on each node, example workflows, and references.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forum**: n8n has a very active and friendly community. If you get stuck on
    anything, feel free to drop a question there and someone will help you resolve
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflows**: This page lists workflows that have been submitted by the community.
    It''s a great place to gain some inspiration for your next automation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**About n8n**: This option opens up a modal with details about n8n''s version,
    a link to the GitHub repository, and the license.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the bottom left, you'll see options to zoom in and out of the canvas. The
    canvas is the grid of boxes in the Editor UI where you'll be adding the nodes
    to create workflows. You'll also notice that all new n8n workflows have a **Start**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom center of the Editor UI, you''ll notice a button labeled **Execute
    Workflow**. This is useful for manually executing the workflows that you have
    created in n8n. Workflows can run in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Manual executions**: These are useful for testing your workflows while you
    are building them or for one-off executions. An example of one-off execution can
    be a workflow that migrates all the data from a CSV file to Google Sheets. You
    can manually execute a workflow by clicking on the **Execute Workflow** button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated executions**: Once your automations are ready, most of the time,
    you''d want them to run at regular intervals or when a specific event occurs.
    For this to happen, you''ll need to activate a workflow. You can do so by clicking
    on the **Active** button at the top left, which will change the state of the toggle
    from inactive to active. Please note that you''ll need to first save the workflow
    before being able to activate it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we have the **+** button on the right side of the Editor UI. Clicking
    on it will reveal the **Nodes** panel. You can use this to add new nodes to the
    canvas and build out your workflow. You''ll notice that it has three categories:
    **All**, **Regular**, and **Trigger**. Let''s learn a bit more about nodes in
    n8n to understand what these sections mean.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the regular and trigger nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nodes are the building blocks of workflows in n8n. Nodes can connect to applications,
    services, and APIs, and do anything that is possible with Node.js in general.
    Each node performs tasks based on its design. Upon completion, the data is passed
    on to the next node. This data is the result of the work performed by the configured
    task in the previous node.
  prefs: []
  type: TYPE_NORMAL
- en: Each node has an input (left) side and an output (right) side. If a node's output
    connects to a second node's input, the second node receives the outcome of the
    first node as its input.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will cover specific nodes in greater detail later on in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'From an abstract point of view, there are two types of nodes in n8n:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Regular nodes**: Regular nodes are useful for things such as handling **Create,
    Read, Update, and Delete** (**CRUD**) operations with applications and APIs, transforming
    data, and pulling information from the internet. Some examples of regular nodes
    include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airtable node**: It can read, add, update, and delete data from an Airtable
    table.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function node**: It can execute JavaScript code, most often to manipulate
    workflow data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bubble node**: This node allows you to create, delete, update, and get objects
    from Bubble.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the whole list of regular nodes in the latest version of n8n by
    heading over to the **Apps & nodes** page of the n8n website ([https://n8n.io/integrations](https://n8n.io/integrations))
    and clicking on the **Regular** tab (see *Figure 2.2*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Some of the regular nodes that n8n comes with'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.02_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Some of the regular nodes that n8n comes with
  prefs: []
  type: TYPE_NORMAL
- en: '**Trigger nodes**: Trigger nodes start the execution of a workflow. These nodes
    can start a workflow based on events such as time-based intervals or events from
    external systems. You need a trigger node in a workflow if you want it to execute
    automatically. You cannot activate workflows unless they have a trigger node.
    A couple of examples of trigger nodes include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cron node**: This node can be configured to activate a workflow every minute
    or every hour, or specify using custom Cron expressions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telegram trigger node**: This node can be configured to activate a workflow
    every time a Telegram bot receives a message.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also find an exhaustive list of trigger nodes on n8n''s **Apps & nodes**
    page by clicking on the **Trigger** tab (see *Figure 2.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Some of the trigger nodes that n8n comes with'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.03_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Some of the trigger nodes that n8n comes with
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the nodes in n8n are referred to as core nodes. As of the time of writing,
    there isn''t a distinction in the Editor UI for these nodes. Core nodes could
    be both regular or trigger nodes. These are nodes that are more general purpose,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Webhook node**: Can be used to receive webhook responses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function node**: Can be used to manipulate workflow data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cron node**: Can be used to trigger workflows at specific intervals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Request node**: Can be used to make HTTP requests to a web page or an
    API endpoint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll dive deeper into the core nodes in n8n in [*Chapter 3*](B17493_03_Final_PD_ePub.xhtml#_idTextAnchor039),
    *Diving into Core Nodes and Data in n8n.* To put this concept to practice, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go back to the Editor UI. First of all, click on the **Start** node so
    that it's highlighted. Doing this ensures that the new node that you add to the
    canvas will automatically connect to the highlighted node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Highlighting the Start node by clicking on it'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.04_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Highlighting the Start node by clicking on it
  prefs: []
  type: TYPE_NORMAL
- en: If you didn't do that, no worries. You can always connect two disconnected nodes
    by clicking on the circle in front of the node and dragging it to the rectangle
    of the next node.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a node to the canvas by clicking on the **+** button in the Editor
    UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `Hacker News` into the **Nodes** panel and select the **Hacker News** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the node will add it to the canvas and open the node to be configured.
    Select **All** for the **Resource** field and click on the **Execute Node** button
    at the top right of the node panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Output of the Hacker News node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.05_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Output of the Hacker News node
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that the node returns 100 news articles from Hacker News. It
    produces a variety of information for each news item. Let's take a few minutes
    to understand what we have in the node panel.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on any node in n8n will open up the node details view, which allows
    you to configure the node, execute it, and look at the data that was either received
    or generated by it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the top left of the node panel. It says `Get news` for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the name of the node, we have two tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameters**: This tab contains parameters to configure the task. Most of
    the nodes have the **Resource** and **Operation** fields. They are a way to bundle
    together the wide variety of functionalities offered by the various applications
    and APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand this better, let's take the example of a CRM where you can store
    the data of individuals and companies. In n8n, a node for this CRM would have
    **People** and **Company** as resources. For each of the resources, it might then
    have create, read, update, and delete as the operations.
  prefs: []
  type: TYPE_NORMAL
- en: Underneath these two fields, you would have the fields that are required, for
    example, **Name**. Like the last name, any optional fields are always bundled
    together under the **Additional Fields** section, which keeps the UI uncluttered.
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings**: This tab contains a couple of options, such as adding notes,
    and a couple of other settings that we''ll cover later on in the book as they
    become relevant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the top middle of the node panel, you will see two tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JSON**: Clicking on this tab will showcase the data received from **Hacker
    News** in JSON format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Viewing the output by clicking on the JSON tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.06_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Viewing the output by clicking on the JSON tab
  prefs: []
  type: TYPE_NORMAL
- en: '**Table**: The table view is the default view for displaying data in n8n.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the top right of the panel, you'll see the **Execute Node** button. This
    button enables you to execute this specific node manually without re-triggering
    the entire workflow or executing the following nodes in the workflow. This is
    very useful for testing the workflows while building them step by step. We then
    have an **X** button next to it. You can click on it to go back to the canvas
    in the Editor UI.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, at the bottom of the node panel, you'll see a link to the node's documentation
    that you have opened up. Click on it to reach the node documentation, which contains
    example workflows with that node along with some FAQs.
  prefs: []
  type: TYPE_NORMAL
- en: When working with nodes, you will often need to reference data between nodes.
    This data would usually be dynamic. For example, weather data might change every
    hour. Let's learn about how we can reference dynamic data in n8n using expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Expressions – using dynamic data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider this scenario: you only want the name of the news article and the
    URL as part of your workflow data because the rest of the data returned by the
    Hacker News node is irrelevant to you. We can filter out the workflow data in
    a couple of ways, but we''ll use the **Set** node here. The **Set** node is one
    of the code nodes in n8n that helps you to configure workflow data To create a
    Set node for the aforementioned scenario, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the **Set** node to the canvas and connect it to the **Get news** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Adding the Set node to the Hacker News node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.07_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Adding the Set node to the Hacker News node
  prefs: []
  type: TYPE_NORMAL
- en: Now, open the **Set** node by double-clicking on it. Toggle the **Keep Only
    Set** field to true (green). It removes all incoming workflow data and only appends
    the new values configured in the **Set** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Add Value** button and select **String**. You''ll notice that
    we now have two fields: **Name** and **Value**. These two fields design the JSON
    data structure.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete `propertyName` from the `Title`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the value of the title will be different each time the node iterates over
    the 100 items that it will receive from the previous node. It is also possible
    that those 100 values will be completely different as new articles appear on Hacker
    News and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Because of that, the **Value** field needs to be dynamic since the value keeps
    changing. You can achieve this in n8n using expressions.
  prefs: []
  type: TYPE_NORMAL
- en: To add an expression to a field, click on the gears icon next to the field and
    click on **Add Expression**. Perform this step with the **Value** field. These
    actions will open up the Expression Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the left-hand side, you''ll notice the **Variable Selector** section. Click
    on the current node and go through the nesting to find the title. It should look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Selecting the title of a post using the Expression Editor in
    n8n'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.08_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Selecting the title of a post using the Expression Editor in n8n
  prefs: []
  type: TYPE_NORMAL
- en: 'If the data does not show up for you, check the following:'
  prefs: []
  type: TYPE_NORMAL
- en: This node and the previous node are connected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous node has been executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll perform the same steps for the URL and then click on the **Execute Node**
    button for the **Set** node.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Output of the Set node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.09_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Output of the Set node
  prefs: []
  type: TYPE_NORMAL
- en: We now have only the relevant data that we wanted in the workflow, thanks to
    the **Set** node and expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Expressions are a powerful feature in n8n. You can use them to reference data
    from the workflow, other nodes, the environment, and even self-generated data.
    Let's say we want to add a random ID to each of the news articles. Add a numerical
    value in the `ID` as the name, and click on **Add Expression** for the **Value**
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the `0` and enter the following: `{{ Math.floor(Math.random() *1000)
    }}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expressions can execute JavaScript between double curly braces, and here we''ve
    used it to generate three-digit random numbers. Let''s say that we want the IDs
    to be prefixed by `ID_`. Edit the expression so that it looks like this: `ID_{{
    Math.floor(Math.random() *1000) }}`. Click on the **Execute Node** button to see
    the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Output of the Set node after adding the ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.10_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Output of the Set node after adding the ID
  prefs: []
  type: TYPE_NORMAL
- en: There are many other things that you can do with expressions, and we'll introduce
    more concepts throughout the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know about expressions, let's learn more about workflows in n8n
    to understand what they are.
  prefs: []
  type: TYPE_NORMAL
- en: Workflows – putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflows are a collection of nodes in n8n. Workflows can range anywhere from
    two nodes to hundreds of nodes, with workflows calling sub-workflows. These workflows
    can then be saved in n8n's database and activated to run on their own in the background
    even when you do not have the n8n Editor UI open.
  prefs: []
  type: TYPE_NORMAL
- en: While each of these nodes in n8n is very powerful in and of itself, the true
    potential of n8n is evident when you begin to connect these nodes. In n8n, you
    can join one node to many other nodes. Workflows don't necessarily have to follow
    a linear structure.
  prefs: []
  type: TYPE_NORMAL
- en: Real-world problems or tasks are usually made up of a series of steps. n8n is
    powerful because you can model your complex processes and tasks as a workflow,
    a series of nodes that each performs a step toward completing the bigger process.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now save the workflow created by clicking on the `My first workflow` and
    press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Workflows are JSON objects. You can take a look at the underlying JSON in one
    of two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Workflows** icon and click on the **Download** button to download
    the JSON file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *A* on the canvas to select all the nodes in your workflow, press
    *Ctrl* + *C* to copy them, head over to a text editor, and paste the JSON by pressing
    *Ctrl* + *V*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s how the JSON for the workflow that we created appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – JSON for the workflow that we created'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.11_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – JSON for the workflow that we created
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the JSON file, you'll see that it contains information about
    the different nodes present in your workflow, how they are connected, and the
    set parameters. In the preceding screenshot, you can notice the title, URL, and
    ID that we configured in the **Set** node and the expressions that we added.
  prefs: []
  type: TYPE_NORMAL
- en: You can then share these files with your friends and colleagues so that they
    can load them on their n8n instances and run the workflows that you created. They
    can either import the workflow as a file or the JSON and paste it into their Editor
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned about workflows, let's create our first workflow in
    n8n, which will send us a cocktail recipe in Telegram every day at 6 P.M.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first workflow – Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are familiar with n8n''s Editor UI, nodes, and workflows, let''s
    create a new workflow that allows us to send a random cocktail recipe to Telegram
    every day. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new workflow on n8n by clicking on the **Workflows** icon and then
    clicking on **New**. Since this is an automation that runs every day, we'll need
    to add a trigger node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** button, click on the **Trigger** tab, and select the **Cron**
    node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Cron** node's details view, click on **Add Cron Time** and change
    **Hour** to **18**. By doing this, we ensure that the workflow runs every day
    at 1800 hours.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the workflow and name it **Hello World**. Now, the workflow will be triggered
    at 1800 hours for the default time zone in n8n. n8n's default time zone is **New
    York**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's change the time zone for this specific workflow by clicking on the **Workflows**
    icon and selecting **Settings**. There, you can choose your time zone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have done that, click on the **Save** button and return to the Editor
    UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Adding a Cron node to the Editor UI and saving the workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.12_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – Adding a Cron node to the Editor UI and saving the workflow
  prefs: []
  type: TYPE_NORMAL
- en: Now, highlight the **Cron** node by clicking on it and then add the **HTTP Request**
    node to the canvas. Make sure that it is connected to the **Cron** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll use the **HTTP Request** node since the cocktail API does not have a node
    in n8n. The **HTTP Request** node allows us to make HTTP requests and enables
    us to make API calls to services that don't have a node in n8n yet. We'll be making
    a call to the random endpoint of the CocktailDB API.
  prefs: []
  type: TYPE_NORMAL
- en: Enter [https://www.thecocktaildb.com/api/json/v1/1/random.php](https://www.thecocktaildb.com/api/json/v1/1/random.php)
    in the **URL** field of the **HTTP Request** node and click on the **Execute Node**
    button. You will notice that it returns details about a random cocktail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Output of the HTTP Request node after making a request to the
    random endpoint of the CocktailDB API'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.13_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – Output of the HTTP Request node after making a request to the
    random endpoint of the CocktailDB API
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll have to send this data to Telegram. To do that, we''ll first need
    to create a Telegram bot. You can use either the Telegram mobile app, web app,
    or desktop application for that. In the example screenshot (*Figure 2.14*), I
    am using the desktop app for macOS. To do that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for `BotFather` with a blue and white "verified" symbol next to its name.
    To verify, click on the BotFather username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – BotFather in the Telegram application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.14_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.14 – BotFather in the Telegram application
  prefs: []
  type: TYPE_NORMAL
- en: Enter the `/newbot` command and follow the instructions to create your bot.
    You can name it as you please, but the username needs to be unique.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once completed, it will give you an access token for the HTTP API. Copy that;
    we'll need that in n8n. Next, click on your bot link provided by BotFather and
    click on **Start**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now head over to n8n and add a **Telegram** node. Make sure that the input of
    the Telegram node is connected to the output of the **HTTP Request** node. You
    will notice that the node has a section called **Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Telegram API** field and select **Create New** from the dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Daily Drinks Bot` to differentiate it from my other Telegram bots at a
    glance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, paste the access token you copied from BotFather in the **Access Token**
    field, and click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need the chat ID. To find that, open a new tab in your web browser and
    go to https://api.telegram.org/bot<YourBOTToken>/getUpdates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to replace `<YourBOTToken>` with the access token that you got
    from BotFather. If you see nothing on that page, send a message to your bot and
    open the URL again. You can then copy the chat ID from there and paste it into
    the **Chat ID** field in n8n.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to craft the message for the **Text** field. We''ll use expressions
    for this. Feel free to craft the message as you like. Here''s how mine looked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Using the Expressions Editor to specify the content of the
    Telegram message'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.15_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.15 – Using the Expressions Editor to specify the content of the Telegram
    message
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to the Telegram node panel and click on the **Execute Node** button.
    You should now see a message from your bot on Telegram. Here''s how mine looked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Message sent by our n8n workflow via the Telegram bot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.16_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.16 – Message sent by our n8n workflow via the Telegram bot
  prefs: []
  type: TYPE_NORMAL
- en: Now that our bot is up and running, we will have to activate the workflow to
    get a new cocktail recipe every day at 1800 hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the canvas in the Editor UI, click on the **Activate** button at
    the top right, and select **Yes**, then activate and save! My final workflow looks
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Final workflow that has been activated'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.17_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.17 – Final workflow that has been activated
  prefs: []
  type: TYPE_NORMAL
- en: As long as n8n is running, you will now get cocktail recipes every evening.
    Congrats on creating your first n8n workflow!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about n8n's Editor UI. We then learned about the
    two types of nodes in n8n. We then covered expressions to reference dynamic data
    in n8n workflows and learned more about workflows in n8n. Finally, we created
    our first workflow in n8n by putting together knowledge of the Editor UI, nodes,
    expressions, and workflows. We'll use the principles that we've learned throughout
    this chapter to build workflows that will handle the backend of our products.
    An understanding of these topics will help with building workflows of any complexity
    in n8n.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to dig deeper into the core nodes that make
    n8n so powerful. We will then take a look at how n8n workflows share data between
    themselves and learn how to access that information.
  prefs: []
  type: TYPE_NORMAL
