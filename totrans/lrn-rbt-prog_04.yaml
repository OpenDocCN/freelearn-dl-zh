- en: '*Chapter 3*: Exploring the Raspberry Pi'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw the Raspberry Pi in the deconstruction of a
    robot. It's no surprise, then, that we'll build a robot using the **Raspberry
    Pi**.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be using the **Raspberry Pi 3A+** as a **controller**.
    We'll look at various options when examining this choice, and look at features
    such as the connections on the Raspberry Pi and how we will use them to understand
    our decision. We'll move on to exploring **Raspberry Pi OS**, and will finish
    by preparing the OS for use on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Raspberry Pi's capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Raspberry Pi OS?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an SD card with Raspberry Pi OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Micro SD card storing 16 GB or more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Raspberry Pi 3A+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Windows, Linux, or macOS computer or laptop connected to the internet and
    able to read/write to SD cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action: [https://bit.ly/3bBJQt9](https://bit.ly/3bBJQt9).'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Raspberry Pi's capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [*Chapter 2*](B15660_02_Final_ASB_ePub.xhtml#_idTextAnchor033),
    *Exploring Robot Building Blocks – Code and Electronics*, the controllers used
    for a robot can be one of the most critical choices you make. This will determine
    what kinds of inputs and outputs you have, what the power requirements of your
    electronics will be, what types of sensors you will be able to use, and what code
    you will run. Changing a controller could mean rewriting the code, redesigning
    where the controller would fit, and changing the power requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi is a range of small computers designed for use in education.
    Having I/O pins for connecting it to custom hardware, while being a complete computer,
    makes it a favorite of makers (a term for people who like to make things for a
    hobby, like robots and gadgets). This is helped by the relatively cheap cost and
    small size of a microcontroller compared to standard computing devices. All Raspberry
    Pi models have abilities including attaching a camera, display, and keyboard,
    as well as some kind of networking.
  prefs: []
  type: TYPE_NORMAL
- en: Speed and power
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Raspberry Pi is powerful enough to handle some visual processing tasks,
    such as facial recognition and tracking objects, with later models being able
    to perform this faster. The same can be said for voice recognition tasks too.
    It is for this reason that the faster 4B, 3B+, and 3A+ models are recommended.
    The Zero and Zero W models are much slower, and although the system will still
    work, the speed may be frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi is a **Single-Board Computer** (**SBC**) that is powerful enough
    to run a complete computer OS, specifically versions of **Linux**. We will explore
    this in the *What is Raspberry Pi OS?* section, but this allows us to use **Python**
    to perform visual processing and voice processing using libraries and tools that
    are well maintained by others. Microcontrollers, such as the **Arduino**, **Esp8266**,
    and **micro:bit**, simply do not have the capabilities to perform these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Some alternative SBCs that are usable as controllers run Linux, such as the
    **BeagleBone**, **CHIP**, **OnionIoT**, and **Gumstix Linux** computers, but these
    are either more costly than the Raspberry Pi or less capable. Only some come with
    camera integration. Although the BeagleBone has superior analog IO connectivity,
    the Raspberry Pi 3A+ is more of an all-rounder and has many options to extend
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Connectivity and networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Raspberry Pi 3A+ comes with USB ports and HDMI ports too. We don't plan
    on using them in this book, although they are handy for debugging if things go
    wrong and you lose contact with a robot. With that in mind, having an additional
    screen and keyboard available is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi 4, 3, and Zero W series all have Wi-Fi and Bluetooth onboard.
    Throughout this book, we will be using Wi-Fi to connect to the robot, so we recommend
    a model that has this. Wi-Fi can be used to program the robot, drive it, and start
    code running on it.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi has I/O pins to allow you to connect it to the sensors. In
    the Raspberry Pi 3A+, the **General Purpose Input/Output** (**GPIO**) connections
    are ready to use, due to having the pins (known as headers) already soldered in
    place. The Raspberry Pi Zero and Zero W models come without the headers attached.
    The first Raspberry Pi boards also had different I/O connectors. These reasons
    make the 3 and 4 series Raspberry Pi the best choice.
  prefs: []
  type: TYPE_NORMAL
- en: Picking the Raspberry Pi 3A+
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Putting all this together, the Raspberry Pi 3A+ is a complete computer. The
    following list of features meets all our needs:'
  prefs: []
  type: TYPE_NORMAL
- en: I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A connector for a camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capable of visual and speech processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Onboard Wi-Fi and Bluetooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs Python code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-soldered headers ready for connecting to robot devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small and relatively cheap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to this, the 3A+ has a quad-core ARM-based CPU running at 1.4 GHz,
    which will be enough for our use case. Later Raspberry Pi versions may supersede
    this model with faster processing and additional capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building the robot, we will use a subset of the connections the Raspberry
    Pi has to offer. Let's take a look at what those connections are and how we will
    use them. As we connect sensors and parts to the Raspberry Pi, we will cover the
    connections in detail, so do not feel like you need to memorize these now. However,
    the following pin diagram can serve as a reference for these connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 3.1*, the highlighted areas show the connections in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Raspberry Pi connections
  prefs: []
  type: TYPE_NORMAL
- en: First, we will be using the power connector, labeled **Power In** and located
    at the bottom left of the diagram. This plugs in via a micro-USB connector similar
    to that on many phones. We will use this while learning to go headless, and this
    is one of the options for powering a robot. We can plug USB battery packs into
    this port if they can provide the correct amount of power. Raspberry Pi recommends
    2.5 A power supplies, although anything over 2 A will usually suffice.
  prefs: []
  type: TYPE_NORMAL
- en: The lower-middle highlighted port is the camera (**Camera Serial Interface**
    (**CSI**)) port; this is for the **Pi camera**, which we will attach when preparing
    to do visual processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the Micro SD card slot under the Raspberry Pi to run our code.
    We will not be using Ethernet or HDMI, as we will be talking to the Raspberry
    Pi via Wi-Fi. The large connector across the top of *Figure 3.1* is the GPIO port:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The Raspberry Pi GPIO port (B+, 2, 3, 3B+, Zero, and Zero W)
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.2* shows a close-up of the GPIO port with the names and uses of some
    of the pins. This is where we will connect most of our sensors and motors. External
    devices can be attached to **SPI**, **I2C**, **Serial**, and **I2S** data buses,
    or to digital I/O pins.'
  prefs: []
  type: TYPE_NORMAL
- en: Power pins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The 5 V and 3.3 V pins are used for power, along with the pins marked **GND**.
    GND is an abbreviation of **ground**, which is the equivalent of a minus terminal
    on a battery or power supply. The 5 V pin can be used to supply the Pi with power
    from batteries. 5 V and 3.3 V can be used to supply small electronics or sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Data buses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SPI, I2C, and Serial are used to send control and sensor data between a controller
    and smart devices. I2S is used to carry encoded digital audio signals (**PCM**)
    to and from the Raspberry Pi. The ports for these data buses can be enabled through
    configuration, or the pins can be used as general digital pins when the data buses
    are turned off.
  prefs: []
  type: TYPE_NORMAL
- en: The pins marked **SDA** and **SCL** are an I2C data bus. We use this for sensors
    and motor control boards. Instructions are sent over this port.
  prefs: []
  type: TYPE_NORMAL
- en: Pins **9**, **10**, and **11** form the SPI port, which we use to drive RGB
    LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: Although there is an audio port on the Raspberry Pi, this is not really suitable
    for driving a speaker, so we will be using the I2S pins on the GPIO port for this.
    The I2S pins are **18**, **19**, **20**, and **21**. As they also have pins for
    audio input, we use this for voice processing.
  prefs: []
  type: TYPE_NORMAL
- en: General IO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The other pins that are numbered, without a specific word or shading type, are
    general-purpose I/O pins. General I/O pins are used for digital inputs and outputs
    with servo motors, encoders, and ultrasonic sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Why are the numbers mixed up? The numbers used in most Raspberry Pi documentation
    are BCM numbers, which correspond to pins on the main Broadcom chip. Use *Figure
    3.2* for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi HATs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Raspberry Pi HATs** (also named Bonnets) are circuit boards designed to plug
    into the GPIO header and conveniently connect the Raspberry Pi to devices such
    as motors or sensors.'
  prefs: []
  type: TYPE_NORMAL
- en: Some boards carry through GPIO pins for further boards/connections to use them,
    and others will need extender boards to gain access to the pins.
  prefs: []
  type: TYPE_NORMAL
- en: HATs use GPIO pins for different purposes; for example, audio HATs will use
    the I2S pins for audio interfacing, but some motor controller HATs use the same
    pins to control motors instead. Using these HATs together can be problematic,
    so be aware of this when using multiple HATs or specific buses. We will explore
    this more in [*Chapter 6*](B15660_06_Final_ASB_ePub.xhtml#_idTextAnchor096), *Building
    Robot Basics – Wheels, Power, and Wiring*, when we choose a motor controller.
  prefs: []
  type: TYPE_NORMAL
- en: What is Raspberry Pi OS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Raspberry Pi OS is the choice of software we use to drive the Raspberry Pi,
    an OS that our code will run in. It is the Raspberry Pi Foundation's official
    OS and comes with software prepared to make working with the Raspberry Pi easier.
    Raspberry Pi OS can support a full desktop or a minimal command line and network-only
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi OS is based on the **Debian** Linux distribution. Debian is a collection
    of software set up to run together, giving lots of functionality and many possibilities.
    Linux distributions like this are the basis of many internet servers, mobile phones,
    and other devices. The OS's software is optimized for the Raspberry Pi hardware,
    namely the kernel and drivers, which are made specifically for it. It also has
    some neat ways to configure the specialized features that Raspberry Pi users might
    need.
  prefs: []
  type: TYPE_NORMAL
- en: We will use it in a more minimal way than a desktop, forgoing the keyboard,
    mouse, and monitor support. This minimal version is known as **Raspberry Pi OS
    Lite** because it is a much smaller download when desktop software is not required,
    and it uses less space on the micro SD card. Not running a window manager frees
    up memory and uses less of the processing power of the Raspberry Pi, keeping it
    free for activities such as visual processing. We will extend Raspberry Pi OS
    Lite with the software and tools we will use to program our robot.
  prefs: []
  type: TYPE_NORMAL
- en: As you work through the book, you will mostly interact with the robot through
    code and the command line. Linux and Raspberry Pi OS are written with command-line
    usage over a network in mind, which is a good fit for the headless nature of programming
    a robot.
  prefs: []
  type: TYPE_NORMAL
- en: We use Linux's strong support for the Python programming language and the network
    tools that Linux provides. Raspberry Pi OS is widely used in the Raspberry Pi
    community and is among the easiest to find answers for when help is needed. It
    is not the only OS for the Pi, but it is the most useful choice for someone starting
    on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing an SD card with Raspberry Pi OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Raspberry Pi OS on a Raspberry Pi, you need to put the software onto
    a micro SD card in a way that means the Raspberry Pi can load it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raspberry Pi has created the Raspberry Pi Imager to put software onto an SD
    card. Let''s download it and get the right image on our card:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the Raspberry Pi software downloads page at [raspberrypi.org/software](http://raspberrypi.org/software),
    and select the **Download for** button for your computer, as shown in the following
    screenshot:![](img/B15660_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.3 – Downloading the Raspberry Pi Imager
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 3.3* shows what this will look like; it should highlight the correct
    download button for your computer.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install this using the instructions from Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert your micro SD card into the correct port on your laptop. You may need
    an adaptor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the Imager. We'll start here by choosing the OS. Select the **CHOOSE
    OS** button:![](img/B15660_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.4 – The CHOOSE OS button
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 3.4* shows the **CHOOSE OS** button, found in the lower right of the
    Imager screen.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you select this button, it will bring up a list of OSes to flash on the
    card:![](img/B15660_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.5 – The OS list
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 3.5* shows the list of OSes offered by the image. Choose **Raspberry
    Pi OS (other)**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Under the other menu, there is a further selection of Raspberry Pi OS flavors:![](img/B15660_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.6 – The Raspberry Pi OS selection screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Because we are trying to keep things minimal, select **Raspberry Pi OS Lite
    (32-bit)** from this menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should now click **CHOOSE SD CARD**:![](img/B15660_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.7 – Choosing an SD card
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will pop up a list of SD cards, which should show the card you are using:![](img/B15660_03_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.8 – The SD card selection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select this to continue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are now ready to write this. Click the **WRITE** button:![](img/B15660_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.9 – The WRITE button
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It will ask you if you are sure here; click **YES** to continue. It will take
    some time to download and write the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can load this onto a Raspberry Pi with a screen and keyboard, but before
    we can use this Raspberry Pi for a robot, we'll make changes to the SD card on
    your computer in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've seen more of what the Raspberry Pi is, and which connections
    on the Raspberry Pi we will use.
  prefs: []
  type: TYPE_NORMAL
- en: We've learned about the Raspberry Pi OS, which is derived from Linux, how to
    download it, and how to put this software onto a micro SD card for use in the
    Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will make this card headless so that we do not need
    a screen, keyboard, or mouse to use this Raspberry Pi and contact it from our
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I've recommended a Raspberry Pi 3A+. There are likely to be new models of the
    Raspberry Pi not considered. What would be their trade-offs? Think about cost,
    size, power consumption, and computing speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try other Raspberry Pi OS or Raspberry Pi distributions; some will need a keyboard
    and mouse. Be sure to return to Raspberry Pi OS Lite before carrying on in the
    book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I've mentioned the camera (CSI) connector, power, and GPIO ports. Take a look
    at the other ports on the Raspberry Pi, and perhaps see what they can be used
    for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Raspberry Pi Foundation guide to installing Raspberry Pi operating systems:
    [https://www.raspberrypi.org/documentation/installation/installing-images/README.md](https://www.raspberrypi.org/documentation/installation/installing-images/README.md).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Raspberry Pi By Example*, *Ashwin Pajankar* and *Arush Kakkar*, *Packt Publishing*,
    which has a section on alternative OSes for a Raspberry Pi, along with many exciting
    Raspberry Pi projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raspberry Pi GPIO pinout ([https://pinout.xyz/](https://pinout.xyz/)): This
    describes how different boards are connected to the Raspberry Pi in terms of the
    pins they actually use. It''s useful to know that most boards only use a subset
    of these pins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
