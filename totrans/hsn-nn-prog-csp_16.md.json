["```py\nprivate void Example_Load(object sender, EventArgs e)\n{\n LoadTrainingData(DataSet?[\"features\"].train, DataSet?[\"label\"].train);\nPopulateGraphs(DataSet?[\"label\"].train, DataSet?[\"label\"].test);\n}\n```", "```py\nprivate void LoadTrainingData(float[][] X, float[][] Y)\n {\n //clear the list first\n listView1.Clear();\n listView1.GridLines = true;\n listView1.HideSelection = false;\n if (X == null || Y == null )\n return;\n\n //add features\n listView1.Columns.Add(new ColumnHeader() {Width=20});\n for (int i=0; i < inDim ;i++)\n {\n var col1 = new ColumnHeader\n {\n Text = $\"x{i + 1}\",\n Width = 70\n };\n listView1.Columns.Add(col1);\n }\n\n //Add label\n var col = new ColumnHeader\n {\n Text = $\"y\",\n Width = 70\n };\n listView1.Columns.Add(col);\nfor (int i = 0; i < 100; i++)\n {\n var itm = listView1.Items.Add($\"{(i+1).ToString()}\");\n for (int j = 0; j < X[i].Length; j++)\n itm.SubItems.Add(X[i][j].ToString(CultureInfo.InvariantCulture));\n itm.SubItems.Add(Y[i][0].ToString(CultureInfo.InvariantCulture));\n }\n }\n```", "```py\nprivate void PopulateGraphs(float[][] train, float[][] test)\n {\n if (train == null)\n throw new ArgumentException(\"TrainNetwork parameter cannot be null\");\n if (test == null)\n throw new ArgumentException(\"test parameter cannot be null\");\nfor (int i=0; i<train.Length; i++)\ntrainingDataLine?.AddPoint(new PointPair(i + 1, train[i][0]));\nfor (int i = 0; i < test.Length; i++)\ntestDataLine?.AddPoint(new PointPair(i + 1, test[i][0]));\nzedGraphControl1?.RestoreScale(zedGraphControl1.GraphPane);\nzedGraphControl3?.RestoreScale(zedGraphControl3.GraphPane);\n}\n```", "```py\nstatic (float[][] train, float[][] valid, float[][] test) SplitDataForTrainingAndTesting(float[][] data, float valSize = 0.1f, float testSize = 0.1f)\n{\n if (data == null)\n throw new ArgumentException(\"data parameter cannot be null\");\n//Calculate the data needed\nvar posTest = (int)(data.Length * (1 - testSize));\n var posVal = (int)(posTest * (1 - valSize));\n return (\n data.Skip(0).Take(posVal).ToArray(), \n data.Skip(posVal).Take(posTest - posVal).ToArray(), \ndata.Skip(posTest).ToArray());\n}\n```", "```py\nprivate void btnStart_Click(object sender, EventArgs e)\n{\nint iteration = int.Parse(textBox1.Text);\n batchSize = int.Parse(textBox2.Text);\nprogressBar1.Maximum = iteration;\nprogressBar1.Value = 1;\ninDim = 5;\n ouDim = 1;\n int hiDim = 1;\n int cellDim = inDim;\nTask.Run(() => TrainNetwork(DataSet, hiDim, cellDim, iteration, batchSize, ReportProgress));\n}\n```", "```py\nprivate void TrainNetwork(Dictionary<string, (float[][] train, float[][] valid, float[][] test)> dataSet, int hiDim, int cellDim, int iteration, int batchSize, Action<Trainer, Function, int, DeviceDescriptor> progressReport)\n{\nSplit the dataset on TrainNetwork into validate and test parts\nvar featureSet = dataSet[\"features\"];\nvar labelSet = dataSet[\"label\"];\n```", "```py\nvar feature = Variable.InputVariable(new int[] { inDim }, DataType.Float, featuresName, null, false /*isSparse*/);\n var label = Variable.InputVariable(new int[] { ouDim }, DataType.Float, labelsName, new List<CNTK.Axis>() { CNTK.Axis.DefaultBatchAxis() }, false);\n var lstmModel = LSTMHelper.CreateModel(feature, ouDim, hiDim, cellDim, DeviceDescriptor.CPUDevice, \"timeSeriesOutput\");\n Function trainingLoss = CNTKLib.SquaredError(lstmModel, label, \"squarederrorLoss\");\n Function prediction = CNTKLib.SquaredError(lstmModel, label, \"squarederrorEval\");\n```", "```py\nTrainingParameterScheduleDouble learningRatePerSample = new TrainingParameterScheduleDouble(0.0005, 1);\nTrainingParameterScheduleDouble momentumTimeConstant = CNTKLib.MomentumAsTimeConstantSchedule(256);\nIList<Learner> parameterLearners = new List<Learner>()\n{\nLearner.MomentumSGDLearner(lstmModel?.Parameters(), learningRatePerSample, momentumTimeConstant, /*unitGainMomentum = */true)\n};\n```", "```py\n       var trainer = Trainer.CreateTrainer(lstmModel, trainingLoss, prediction, parameterLearners);\n```", "```py\nfor (int i = 1; i <= iteration; i++)\n{\n```", "```py\nforeach (var batchData infrom miniBatchData in GetNextDataBatch(featureSet.train, labelSet.train, batchSize)\nlet xValues = Value.CreateBatch(new NDShape(1, inDim), miniBatchData.X, DeviceDescriptor.CPUDevice)\nlet yValues = Value.CreateBatch(new NDShape(1, ouDim), miniBatchData.Y, DeviceDescriptor.CPUDevice)\nselect new Dictionary<Variable, Value>\n{\n{ feature, xValues },\n{ label, yValues }})\n{\n```", "```py\ntrainer?.TrainMinibatch(batchData, DeviceDescriptor.CPUDevice);\n} \nif (InvokeRequired)\n{\nInvoke(new Action(() => progressReport?.Invoke(trainer, lstmModel.Clone(), i, DeviceDescriptor.CPUDevice)));\n}\nelse\n{\nprogressReport?.Invoke(trainer, lstmModel.Clone(), i, DeviceDescriptor.CPUDevice);\n}\n}\n}\n```", "```py\npublic static Function CreateModel(Variable input, int outDim, int LSTMDim, int cellDim, DeviceDescriptor device, string outputName)\n{\nFunc<Variable, Function> pastValueRecurrenceHook = (x) => CNTKLib.PastValue(x);\n```", "```py\nFunction LSTMFunction = LSTMPComponentWithSelfStabilization<float>(input,  new[] { LSTMDim }, new[] { cellDim }, pastValueRecurrenceHook, pastValueRecurrenceHook, device)?.Item1;\n```", "```py\npre>       Function lastCell = CNTKLib.SequenceLast(LSTMFunction);\n```", "```py\n       var dropOut = CNTKLib.Dropout(lastCell,0.2, 1);\n```", "```py\n return FullyConnectedLinearLayer(dropOut, outDim, device, outputName);\n}\n```", "```py\nprivate static IEnumerable<(float[] X, float[] Y)> GetNextDataBatch(float[][] X, float[][] Y, int mMSize)\n{\nif (X == null)\n throw new ArgumentException(\"X parameter cannot be null\");\n if (Y == null)\n throw new ArgumentException(\"Y parameter cannot be null\");\nfor (int i = 0; i <= X.Length - 1; i += mMSize)\n {\n var size = X.Length - i;\n if (size > 0 && size > mMSize)\n size = mMSize;\nvar x = CreateBatch(X, i, size);\n var y = CreateBatch(Y, i, size);\nyield return (x, y);\n }\n}\n```", "```py\ninternal static float[] CreateBatch(float[][] data, int start, int count)\n{\n var lst = new List<float>();\n for (int i = start; i < start + count; i++)\n {\n if (i >= data.Length)\n break;\nlst.AddRange(data[i]);\n}\nreturn lst.ToArray();\n}\n```"]