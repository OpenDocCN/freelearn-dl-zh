- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Accelerate the DevOps Process on AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加速AWS上的DevOps流程
- en: 'In this chapter, we will look into the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: Challenges during the DevOps process
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps过程中的挑战
- en: Introduction to Amazon CodeCatalyst
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon CodeCatalyst简介
- en: Exploring Amazon Q’s capabilities in Amazon CodeCatalyst
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Amazon Q在Amazon CodeCatalyst中的能力
- en: Amazon Q’s feature development capability in Amazon CodeCatalyst
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q在Amazon CodeCatalyst中的功能开发能力
- en: Amazon Q’s summarizing capability in Amazon CodeCatalyst
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q在Amazon CodeCatalyst中的总结能力
- en: In any organization, software development is not just about writing code. The
    software engineering process also involves something known as DevOps. It is a
    combination of “development” and “operations,” involving a set of practices aimed
    at improving collaboration and communication between software **development**
    (**Dev**) and IT **operations** (**Ops**) teams. It focuses on automating processes,
    increasing efficiency, and delivering high-quality software products more quickly
    and reliably.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何组织中，软件开发不仅仅是编写代码。软件工程过程还涉及一种称为DevOps的东西。它结合了“开发”和“运营”，涉及一系列旨在改善软件**开发**（**Dev**）和IT**运营**（**Ops**）团队之间协作和沟通的实践。它侧重于自动化流程，提高效率，并更快、更可靠地交付高质量的软件产品。
- en: DevOps emphasizes a culture of collaboration, **continuous integration and continuous
    delivery** (**CI/CD**), the automation of infrastructure and workflows, and monitoring
    and feedback loops to enable faster development cycles, improved deployment frequency,
    and more stable operating environments.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps强调协作文化、**持续集成和持续交付**（**CI/CD**）、基础设施和工作流程的自动化，以及监控和反馈循环，以实现更快的开发周期、提高部署频率和更稳定的运行环境。
- en: Many tools are available in the marketplace to serve various purposes in the
    DevOps life cycle, including version control, continuous integration, continuous
    delivery, configuration management, infrastructure as code, monitoring, and collaboration.
    AWS also has a service called Amazon CodeCatalyst that helps with this process.
    But first, we need to understand some of the challenges faced during the DevOps
    process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有许多工具可供选择，用于DevOps生命周期的各种目的，包括版本控制、持续集成、持续交付、配置管理、基础设施即代码、监控和协作。AWS还提供了一种名为Amazon
    CodeCatalyst的服务，有助于这一过程。但首先，我们需要了解在DevOps过程中面临的挑战。
- en: Challenges during the DevOps process
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps过程中的挑战
- en: 'Even though DevOps tools help in many aspects of the software development process,
    some challenges still persist during this process. Let’s understand some of the
    challenges so that you will appreciate what Amazon Q brings to the DevOps process
    in CodeCatalyst:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管DevOps工具在软件开发过程的许多方面都提供了帮助，但在这一过程中仍存在一些挑战。让我们了解一些挑战，以便您能够欣赏到Amazon Q在CodeCatalyst的DevOps过程中带来的价值：
- en: '**Complexity**: Many DevOps tools can be complex to set up, configure, and
    maintain, requiring specialized knowledge and skills. For instance, setting up
    a CI/CD pipeline with Jenkins involves multiple steps: installing and configuring
    Jenkins on a server, integrating it with version control systems such as Git,
    setting up build scripts, configuring plugins for various stages of the pipeline,
    managing user permissions, and ensuring the server is secure and regularly updated.
    This process can be time-consuming and requires a deep understanding of both Jenkins
    and the underlying infrastructure.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：许多DevOps工具在设置、配置和维护方面可能很复杂，需要专业知识和技术技能。例如，使用Jenkins设置CI/CD管道涉及多个步骤：在服务器上安装和配置Jenkins，将其与版本控制系统（如Git）集成，设置构建脚本，配置管道各个阶段的插件，管理用户权限，并确保服务器安全且定期更新。这个过程可能耗时且需要深入理解Jenkins及其底层基础设施。'
- en: '**Integration issues**: Integrating multiple DevOps tools into a cohesive pipeline
    can be challenging, leading to compatibility issues and data silos.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成问题**：将多个DevOps工具集成到一个统一的管道中可能具有挑战性，导致兼容性问题和数据孤岛。'
- en: '**Limited automation**: While automation is a key principle of DevOps, not
    all tools offer robust automation capabilities, leading to manual workarounds
    and inefficiencies. For instance, consider a scenario where a team uses a deployment
    tool that lacks automated rollback features. If a deployment fails, team members
    must manually intervene to revert the system to a previous stable state. This
    manual process can be time-consuming and prone to errors and disrupt the streamlined
    workflow that DevOps aims to achieve. As a result, the lack of robust automation
    in the tool leads to inefficiencies and increased operational overhead.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化有限**：虽然自动化是 DevOps 的一个关键原则，但并非所有工具都提供强大的自动化功能，导致手动解决方案和低效。例如，考虑一个团队使用缺乏自动化回滚功能的部署工具的场景。如果部署失败，团队成员必须手动干预以将系统恢复到先前的稳定状态。这个过程可能耗时且容易出错，并会打断
    DevOps 力求实现的流畅工作流程。因此，工具中缺乏强大的自动化功能会导致低效和运营成本增加。'
- en: '**Learning curve**: DevOps tools often have steep learning curves, requiring
    time and resources for teams to become proficient in their use, which can slow
    down adoption and implementation.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线**：DevOps 工具通常具有陡峭的学习曲线，需要时间和资源让团队熟练使用，这可能会减缓采用和实施的速度。'
- en: '**Lack of collaboration**: Siloed teams and departments can hinder collaboration
    and communication, leading to inefficiencies and bottlenecks in the DevOps pipeline.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏协作**：孤立的团队和部门可能会阻碍协作和沟通，导致 DevOps 流程中的低效和瓶颈。'
- en: '**Continuous testing**: Implementing comprehensive testing strategies, including
    unit tests, integration tests, and automated regression tests, can be challenging,
    particularly in complex environments with frequent code changes.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续测试**：实施全面的测试策略，包括单元测试、集成测试和自动化回归测试，可能具有挑战性，尤其是在频繁代码更改的复杂环境中。'
- en: '**Skills gap**: Finding and retaining skilled DevOps professionals with expertise
    in automation, cloud computing, containerization, and other relevant technologies
    can be challenging in a competitive job market.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技能差距**：在竞争激烈的就业市场中，寻找并留住具有自动化、云计算、容器化和其他相关技术专长的 DevOps 专业人员可能具有挑战性。'
- en: Let’s quickly understand the basics of Amazon CodeCatalyst so that it’s easy
    to understand how Amazon Q can accelerate the DevOps process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解亚马逊 CodeCatalyst 的基础知识，这样就可以轻松理解亚马逊 Q 如何加速 DevOps 流程。
- en: Introduction to Amazon CodeCatalyst
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊 CodeCatalyst 简介
- en: Amazon CodeCatalyst streamlines software development for teams embracing continuous
    integration and continuous delivery practices. By consolidating essential tools,
    it simplifies work planning, code collaboration, and application development with
    built-in CI/CD capabilities. Seamlessly integrating AWS resources into projects
    is facilitated through direct connections with AWS accounts. This all-in-one tool
    manages every stage and facet of the application life cycle, enabling swift and
    assured software delivery.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 CodeCatalyst 为采用持续集成和持续交付实践的团队简化了软件开发。通过整合关键工具，它简化了工作计划、代码协作和应用程序开发，内置 CI/CD
    功能。通过直接连接 AWS 账户，可以无缝地将 AWS 资源集成到项目中。这个一站式工具管理应用程序生命周期的每个阶段和方面，实现快速和可靠的软件交付。
- en: The following figure highlights all the different aspects of software development
    that CodeCatalyst helps with.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下图突出了 CodeCatalyst 帮助的软件开发的所有不同方面。
- en: '![Figure 16.1 – Amazon CodeCatalyst capabilities](img/B21378_16_1_new.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.1 – 亚马逊 CodeCatalyst 功能](img/B21378_16_1_new.jpg)'
- en: Figure 16.1 – Amazon CodeCatalyst capabilities
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1 – 亚马逊 CodeCatalyst 功能
- en: 'Let’s walk through some of the key things that CodeCatalyst can do. These are
    also referenced in the AWS documentation for CodeCatalyst, a link to which is
    provided in the *References* section at the end of the chapter:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览一下 CodeCatalyst 可以做的关键功能。这些内容也参考了 AWS 文档中的 CodeCatalyst 部分，相关链接在章节末尾的 *参考文献*
    部分提供：
- en: '**Code collaboration**: Collaborate seamlessly with your team on code through
    branches, merges, pull requests, and comments in your source code repositories.
    Quickly create development environments to work on code without the need to clone
    or set up connections to repositories.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码协作**：通过分支、合并、拉取请求和源代码仓库中的评论与团队无缝协作。快速创建开发环境，无需克隆或设置与仓库的连接即可进行代码工作。'
- en: '**Build, test, and deploy an application with workflows**: Define workflows
    with build, test, and deploy actions to manage the CI/CD of your applications.
    Initiate workflows manually or set them to start automatically based on events
    such as code pushes or the creation or closing of pull requests.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用工作流构建、测试和部署应用程序**：通过构建、测试和部署操作定义工作流，以管理您应用程序的CI/CD。可以手动启动工作流或根据代码推送或拉取请求的创建或关闭等事件自动启动它们。'
- en: '**Prioritize work with issue tracking**: Use issues to establish backlogs and
    track the status of ongoing tasks with boards. Maintaining a healthy backlog of
    items for your team to address is integral to software development.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用问题跟踪优先处理工作**：使用问题建立待办事项列表并使用看板跟踪正在进行中的任务的状态。维护一个健康的项目待办事项列表，以便您的团队能够处理，对于软件开发至关重要。'
- en: '**Monitoring and notifications**: Monitor team activity and resource status,
    and configure notifications to remain informed about important changes.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和通知**：监控团队活动和资源状态，并配置通知，以便了解重要更改。'
- en: Amazon CodeCatalyst is a comprehensive service with multiple capabilities and
    features. Providing a detailed overview is beyond the scope of this book. However,
    if you are interested in exploring CodeCatalyst as a DevOps tool, feel free to
    go through the workshop that is listed in the *References* section at the end
    of this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon CodeCatalyst是一个具有多个功能和特性的综合服务。提供详细概述超出了本书的范围。然而，如果您对将CodeCatalyst作为DevOps工具进行探索感兴趣，请自由地查阅本章末尾*参考*部分列出的研讨会。
- en: To fast-track learning and see CodeCatalyst in action, multiple blueprints are
    provided within the service. These blueprints will create all the infrastructure
    needed to implement an end-to-end DevOps process for a specific use case. One
    such blueprint is for implementing a modern three-tier web application. You can
    find a step-by-step tutorial for it in the link provided in the *References* section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速学习并看到CodeCatalyst的实际应用，服务内提供了多个蓝图。这些蓝图将创建实现特定用例端到端DevOps流程所需的所有基础设施。其中一个蓝图是用于实现现代三层Web应用程序的。您可以在*参考*部分提供的链接中找到它的逐步教程。
- en: 'With the introduction to DevOps done, let’s jump straight into the theme of
    this chapter: how Amazon Q can help with the DevOps process inside Amazon CodeCatalyst.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了DevOps之后，让我们直接进入本章的主题：Amazon Q如何帮助在Amazon CodeCatalyst内部进行DevOps流程。
- en: Exploring Amazon Q’s capabilities in Amazon CodeCatalyst
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Amazon Q在Amazon CodeCatalyst中的功能
- en: If your project resides in a source repository within Amazon CodeCatalyst, GitHub
    Cloud, or Bitbucket Cloud, and Amazon Q features are enabled, you can leverage
    some of Q’s capabilities to expedite the DevOps process. Developers often face
    time constraints, leading to a backlog of tasks. Consequently, they may overlook
    providing detailed explanations for code changes in pull requests, assuming their
    peers will decipher them independently. Likewise, both pull request creators and
    reviewers may lack sufficient time to thoroughly analyze comments, especially
    in cases of multiple revisions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目位于Amazon CodeCatalyst、GitHub Cloud或Bitbucket Cloud中的源代码库中，并且启用了Amazon
    Q功能，您可以利用Q的一些功能来加速DevOps流程。开发者经常面临时间限制，导致任务积压。因此，他们可能忽略在拉取请求中提供代码更改的详细解释，假设他们的同事可以独立解读。同样，拉取请求的创建者和审阅者可能缺乏足够的时间来彻底分析评论，尤其是在多次修订的情况下。
- en: In modern software development, engineers encounter significant challenges during
    the DevOps process, leading to bottlenecks and inefficiencies. One prominent issue
    is the time-consuming nature of code review and collaboration within teams. Software
    engineers often struggle to provide comprehensive explanations for their code
    changes in pull requests, while reviewers face difficulties in thoroughly analyzing
    and understanding the changes, particularly in cases with multiple revisions.
    These inefficiencies result in delays, reduced productivity, and missed opportunities
    for innovation. Additionally, adding new features to the code is a time-consuming
    process; at the same time, reviewers may face difficulties in comprehending complex
    changes, especially when dealing with large code bases.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件开发中，工程师在DevOps流程中会遇到重大挑战，导致瓶颈和低效。一个突出的问题是代码审查和团队协作的耗时性质。软件工程师往往难以在拉取请求中提供对代码更改的全面解释，而审查者则面临全面分析和理解更改的困难，尤其是在多次修订的情况下。这些低效导致延迟、生产力下降和错失创新机会。此外，向代码中添加新功能是一个耗时的过程；同时，审查者可能难以理解复杂更改，尤其是在处理大型代码库时。
- en: 'With Amazon Q integration with Amazon CodeCatalyst, team members can streamline
    their workflows, allowing more time to focus on critical aspects of their work.
    We are in the infancy stage of incorporating Amazon Q into the DevOps process,
    but so far, here are some of the key features of Amazon Q that work with Amazon
    CodeCatalyst:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与Amazon CodeCatalyst的集成，团队成员可以简化他们的工作流程，从而有更多时间专注于工作的关键方面。我们将Amazon Q整合到DevOps流程中仍处于起步阶段，但到目前为止，以下是Amazon
    Q与Amazon CodeCatalyst一起工作的关键功能：
- en: '**Feature development**: Enables developers to input ideas in an issue and
    get fully tested application code that is ready for merge in a pull request. With
    just a few clicks and inputs in natural language, the whole workflow is simplified.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能开发**：允许开发者在一个问题中输入想法，并获取完全测试的应用程序代码，该代码已准备好在拉取请求中合并。只需几点击和自然语言输入，整个工作流程就简化了。'
- en: '**Auto-generate a pull request summary**: Amazon Q can analyze all comments
    left on code changes within a pull request and generate a concise summary of the
    feedback.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动生成拉取请求摘要**：Amazon Q可以分析拉取请求中留下的所有代码更改评论，并生成简洁的反馈摘要。'
- en: '**Auto-generate a pull request description**: Amazon Q can analyze the code
    changes and generate a description of the changes in the pull request, making
    it easier to review and approve changes.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动生成拉取请求描述**：Amazon Q可以分析代码更改，并在拉取请求中生成更改的描述，使审查和批准更改更加容易。'
- en: There are other areas where Q assists within CodeCatalyst, such as auto-selecting
    blueprints and providing task recommendations. We will go through each of these
    features in detail in this chapter. But first, as always, another reminder about
    the non-deterministic nature of LLM-generated output.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在CodeCatalyst中，Q还协助其他领域，例如自动选择蓝图和提供任务推荐。我们将在本章中详细讨论每个这些功能。但首先，像往常一样，再次提醒关于LLM生成输出的非确定性。
- en: Reminder
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒
- en: Before we start showcasing Amazon Q’s capabilities with CodeCatalyst, it is
    important to remember a few things. Responses received from LLMs are generally
    not idempotent. Idempotence refers to the property of an operation where applying
    it multiple times has the same effect as applying it once.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始展示Amazon Q与CodeCatalyst的能力之前，重要的是要记住一些事情。从LLM收到的响应通常不是幂等的。幂等性是指操作的一个属性，即多次应用该操作的效果与只应用一次相同。
- en: In the context of LLMs, each response generated is based on the specific input
    prompt provided at that moment. While the same prompt may produce similar or related
    responses across multiple iterations, there is no guarantee that the responses
    will be identical each time. Factors such as model initialization, randomization,
    and the specific context of the prompt can influence the variations in the generated
    responses.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在LLM的背景下，每个生成的响应都是基于当时提供的特定输入提示。虽然相同的提示可能在多次迭代中产生相似或相关的响应，但无法保证每次生成的响应都相同。模型初始化、随机化和提示的具体上下文等因素可能会影响生成响应的变化。
- en: Therefore, even in the example we will be using in the following sections, if
    you send the same prompt to Amazon Q, you may receive different responses each
    time, making the responses non-idempotent. Use your own judgment on what to accept
    as accurate and what to prompt the system again for to receive a revised approach,
    before you proceed to try out all the steps.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使在以下章节中我们将使用的示例中，如果您向Amazon Q发送相同的提示，您可能会每次都收到不同的响应，使得响应不具有幂等性。在尝试所有步骤之前，请根据自己的判断来决定接受什么作为准确的信息，以及需要再次提示系统以接收修订的方法。
- en: Now, let’s start with the feature development capability in Amazon CodeCatalyst,
    our DevOps service, in which generative AI capabilities of Amazon Q are already
    enabled.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从我们的DevOps服务Amazon CodeCatalyst中的功能开发能力开始，其中已经启用了Amazon Q的生成式AI能力。
- en: Amazon Q’s feature development capability in Amazon CodeCatalyst
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon CodeCatalyst中Amazon Q的功能开发能力
- en: The feature development capability in Amazon Q enables users to customize and
    enhance Q’s question-answering skills for specific domains. Concerning the DevOps
    process using Amazon CodeCatalyst, feature development could entail issuing a
    fix to a bug identified in the application, making improvements, or adding new
    functionality. For all these tasks, the code base requires alteration, testing,
    troubleshooting for any issues during this process, and then pushing the changes
    back into production for deployment. While it may seem straightforward, in large
    code bases with many components and insufficient comments for clarity, especially
    for newly onboarded developers, completing the end-to-end task quickly becomes
    challenging.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q的功能开发能力使用户能够针对特定领域定制和增强Q的问答技能。关于使用Amazon CodeCatalyst的DevOps流程，功能开发可能包括对应用程序中识别出的错误进行修复、进行改进或添加新功能。对于所有这些任务，都需要修改代码库、测试、在过程中解决任何问题，然后将更改推回生产环境进行部署。虽然这看起来很简单，但在具有许多组件且注释不足的大型代码库中，特别是对于新加入的开发者来说，快速完成端到端任务很快就会变得具有挑战性。
- en: Let’s walk through an example of how Amazon Q assists with feature development
    inside Amazon CodeCatalyst. Here, we assume that you have a basic understanding
    of the different components of CodeCatalyst. If this is your first time using
    the service, we encourage you to try out the workshop linked in the *References*
    section at the end of this chapter. Once you complete those, you will be able
    to relate better to some of the aspects we discuss in this section. Let’s jump
    straight to the use case.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来看看Amazon Q如何协助在Amazon CodeCatalyst中进行功能开发。在这里，我们假设您对CodeCatalyst的不同组件有基本的了解。如果您是第一次使用此服务，我们鼓励您尝试本章末尾*参考文献*部分中链接的工作坊。完成这些后，您将能够更好地理解本节中讨论的一些方面。让我们直接进入用例。
- en: Use case for leveraging Amazon Q feature development in Amazon CodeCatalyst
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用Amazon CodeCatalyst中Amazon Q功能开发的用例
- en: To demonstrate the feature development capability, we will select the AWS Glue
    ETL blueprint available when you create a project. We’ve chosen this example to
    provide a comprehensive view of how developers can expedite their ETL code in
    Glue. Additional techniques for accelerating coding with Glue are covered in [*Chapter
    14*](B21378_14.xhtml#_idTextAnchor210).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示功能开发能力，我们将选择在创建项目时可用AWS Glue ETL蓝图。我们选择这个例子是为了提供一个全面的视角，展示开发者如何在Glue中加速他们的ETL代码。有关使用Glue加速编码的其他技术，请参阅[*第14章*](B21378_14.xhtml#_idTextAnchor210)。
- en: The following screenshot shows the AWS Glue ETL blueprint inside CodeCatalyst.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了CodeCatalyst中的AWS Glue ETL蓝图。
- en: '![Figure 16.2 – Glue ETL blueprint in Amazon CodeCatalyst](img/B21378_16_2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图16.2 – Amazon CodeCatalyst中的Glue ETL蓝图](img/B21378_16_2.jpg)'
- en: Figure 16.2 – Glue ETL blueprint in Amazon CodeCatalyst
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – Amazon CodeCatalyst中的Glue ETL蓝图
- en: In this example, since we already knew which blueprint we wanted, it was easy
    for us to read the description and select it for our project. However, some use
    cases may require us to read the descriptions of multiple available blueprints
    before selecting the most appropriate one. Amazon Q now assists you in creating
    a project by auto-selecting the best-matching blueprint based on the criteria
    you provide in natural language. Q will analyze the descriptions of all the blueprints
    and select the best one for you to create a project with, thus saving you valuable
    time.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，因为我们已经知道我们想要哪个蓝图，所以我们很容易阅读描述并选择它用于我们的项目。然而，某些用例可能需要我们在选择最合适的蓝图之前阅读多个可用蓝图的描述。现在，Amazon
    Q 通过根据您以自然语言提供的标准自动选择最佳匹配的蓝图来帮助您创建项目，从而为您节省宝贵的时间。Q 将分析所有蓝图的描述，并为您选择最佳的蓝图来创建项目，从而节省您的时间。
- en: The following example highlights the project creation process with Amazon Q
    suggesting the Glue blueprint based on the criteria we provided in the chat.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例突出了使用 Amazon Q 建立项目的过程，Amazon Q 根据我们在聊天中提供的标准建议 Glue 蓝图。
- en: '![Figure 16.3 – Glue ETL blueprint suggestion by Amazon Q](img/B21378_16_3.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.3 – Amazon Q 建议的 Glue ETL 蓝图](img/B21378_16_3.jpg)'
- en: Figure 16.3 – Glue ETL blueprint suggestion by Amazon Q
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3 – Amazon Q 建议的 Glue ETL 蓝图
- en: Once you have completed the steps, the source code repository will be set up,
    and a CI/CD pipeline via a workflow will have been completed. The pipeline essentially
    initiates an AWS CloudFormation stack using the AWS **Cloud Development Kit**
    (**CDK**) code stored within the repository.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 完成步骤后，源代码库将设置好，并通过工作流程完成 CI/CD 管道。该管道本质上使用存储在库中的 AWS **云开发工具包**（**CDK**）代码启动
    AWS CloudFormation 堆栈。
- en: The following screenshot depicts the Glue ETL blueprint after its setup in CodeCatalyst.
    The architecture of this ETL project is also explained in the overview. It’s a
    straightforward project where input data is processed using AWS Glue and stored
    in Amazon S3 in Parquet file format for querying by Amazon Athena. The workflow
    status at the bottom of the screen indicates completion, signifying that the CloudFormation
    stack has successfully deployed all the components of the architecture. You can
    navigate to the AWS Lambda and AWS Glue service consoles in AWS to inspect the
    artifacts.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了在 CodeCatalyst 中设置后的 Glue ETL 蓝图。此 ETL 项目的架构也在概述中进行了说明。这是一个简单的项目，其中输入数据使用
    AWS Glue 处理，并以 Parquet 文件格式存储在 Amazon S3 中，以便由 Amazon Athena 进行查询。屏幕底部的流程状态指示完成，这意味着
    CloudFormation 堆栈已成功部署了架构的所有组件。您可以通过 AWS 中的 AWS Lambda 和 AWS Glue 服务控制台导航以检查工件。
- en: '![Figure 16.4 – Glue ETL blueprint deployed using Amazon CodeCatalyst](img/B21378_16_4.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.4 – 使用 Amazon CodeCatalyst 部署的 Glue ETL 蓝图](img/B21378_16_4.jpg)'
- en: Figure 16.4 – Glue ETL blueprint deployed using Amazon CodeCatalyst
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4 – 使用 Amazon CodeCatalyst 部署的 Glue ETL 蓝图
- en: Notice the **Add with Amazon Q** option (at the top right of the preceding screenshot),
    which allows you to add new components by suggesting other blueprints based on
    your desired requirements. For this use case, let’s assume we found everything
    we wanted in this single blueprint, so we will work with what we already have.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 **使用 Amazon Q 添加** 选项（在上一个截图的右上角），它允许您通过根据您所需的建议其他蓝图来添加新组件。对于此用例，假设我们在单个蓝图中找到了我们想要的所有内容，因此我们将使用我们已有的内容。
- en: Now, let’s assume that we have some enhancements to make in our Glue ETL pipeline.
    Constant enhancements and improvements to solutions are always encouraged, so
    we will also do something similar.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们在我们的 Glue ETL 管道中需要进行一些增强。对解决方案的持续增强和改进总是受到鼓励，因此我们也将做类似的事情。
- en: The Glue ETL blueprint stores the final output in the Parquet file format, which
    is widely used to set up data lakes. However, as the volume of processed and stored
    data increases, so does the storage cost. To enhance the storage efficiency of
    these Parquet files, compression algorithms can be applied to store them in a
    compressed format. However, determining the optimal compression algorithm that
    balances storage savings with performance can be challenging for developers. Without
    clear guidance on how to approach this task and test the compression-to-performance
    ratio, developers may spend considerable time on research before implementing
    changes. Alternatively, they can seek quick solutions by consulting Amazon Q’s
    feature development capability, integrated into CodeCatalyst.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Glue ETL蓝图将最终输出存储在Parquet文件格式中，该格式广泛用于设置数据湖。然而，随着处理和存储的数据量的增加，存储成本也在增加。为了提高这些Parquet文件的存储效率，可以应用压缩算法以压缩格式存储它们。但是，对于开发者来说，确定平衡存储节省与性能的优化压缩算法可能具有挑战性。如果没有关于如何处理此任务和测试压缩到性能比率的明确指导，开发者可能需要在实施更改之前花费大量时间进行研究。或者，他们可以通过咨询集成到CodeCatalyst中的Amazon
    Q的功能开发能力来寻求快速解决方案。
- en: The following figure provides a good workflow of how Amazon Q helps with feature
    development.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图提供了一个很好的工作流程，展示了Amazon Q如何帮助进行功能开发。
- en: '![Figure 16.5 – Amazon Q feature development workflow](img/B21378_16_05.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图16.5 – Amazon Q功能开发工作流程](img/B21378_16_05.jpg)'
- en: Figure 16.5 – Amazon Q feature development workflow
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – Amazon Q功能开发工作流程
- en: Let’s understand all these steps in detail and see how Amazon Q can expedite
    this laborious DevOps process for the Glue project we have selected in this chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细理解这些步骤，并看看Amazon Q如何加速我们在本章所选的Glue项目中的繁琐DevOps流程。
- en: Assigning issues to Amazon Q
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将问题分配给Amazon Q
- en: Say an ETL developer knows that they need to apply some compression logic to
    the code but is unsure which algorithm to apply. Also, the developer is not sure
    what code would need to be changed throughout the code base. This is where Amazon
    Q can help. The developer will create an **issue** in CodeCatalyst and describe
    their issue in as much detail as possible.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个ETL开发者知道他们需要在代码中应用一些压缩逻辑，但不确定应该应用哪种算法。此外，开发者也不确定需要更改代码库中的哪些代码。这就是Amazon
    Q可以提供帮助的地方。开发者将在CodeCatalyst中创建一个**问题**，并尽可能详细地描述他们的问题。
- en: The following screenshot shows an issue that we would create with a title and
    description of what our end goal is.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们将创建的问题，包括标题和描述我们的最终目标。
- en: '![Figure 16.6 – Create an issue in Amazon CodeCatalyst and assign it to Amazon
    Q](img/B21378_16_6.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图16.6 – 在Amazon CodeCatalyst中创建问题并将其分配给Amazon Q](img/B21378_16_6.jpg)'
- en: Figure 16.6 – Create an issue in Amazon CodeCatalyst and assign it to Amazon
    Q
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.6 – 在Amazon CodeCatalyst中创建问题并将其分配给Amazon Q
- en: We can keep the status as **To do** and the priority as **No priority** as the
    default options for now. Note that instead of assigning this to a user, we have
    the option to assign this to Amazon Q instead.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以保持状态为**待办**，并将优先级设置为**无优先级**作为默认选项。请注意，我们不是将此分配给用户，而是可以选择将其分配给Amazon Q。
- en: Once it’s assigned to Amazon Q, it wants us to specify how it should proceed
    with the flow. First, we provided the source repository that this issue should
    work against. Then, it’s asking whether the user wants to review code change suggestions
    along the way. Based on user comments, Q can adjust its approach a certain number
    of times. For the vast majority of cases, it’s always good to keep this option
    enabled as the suggestions may not always align with our desired code. Next, it’s
    also asking whether Q can modify the workflow files on its own. In this case,
    we disabled this just to be on the safe side. Q can now also recommend tasks based
    on its analysis of the issue. For now, we’ll keep it turned off but we will look
    at this option again during the next stage.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦分配给Amazon Q，它希望我们指定它应该如何处理流程。首先，我们提供了这个问题应该与之工作的源仓库。然后，它询问用户是否希望在过程中审查代码更改建议。根据用户评论，Q可以调整其方法一定次数。在绝大多数情况下，保持此选项启用总是好的，因为建议可能并不总是符合我们期望的代码。接下来，它还询问Q是否可以自行修改工作流程文件。在这种情况下，我们只是出于安全考虑禁用了此选项。现在，Q还可以根据对问题的分析推荐任务。目前，我们将保持它关闭，但我们将在下一阶段再次考虑此选项。
- en: The following screenshot shows our selection when we assign the issue to Amazon
    Q.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们将问题分配给Amazon Q时的选择。
- en: '![Figure 16.7 – Initial input required by Amazon to proceed with the issue](img/B21378_16_7.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图16.7 – 亚马逊为处理问题所需初始输入](img/B21378_16_7.jpg)'
- en: Figure 16.7 – Initial input required by Amazon to proceed with the issue
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7 – 亚马逊为处理问题所需初始输入
- en: Once we confirm our selection and create the issue, Amazon Q moves the issue
    to the **In progress** lane, as highlighted in the following screenshot.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认选择并创建问题，亚马逊Q将问题移动到**进行中**通道，如下面的截图所示。
- en: '![Figure 16.8 – Issue being analyzed by Amazon Q in the In progress lane](img/B21378_16_8.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图16.8 – 亚马逊Q在“进行中”通道中分析的问题](img/B21378_16_8.jpg)'
- en: Figure 16.8 – Issue being analyzed by Amazon Q in the In progress lane
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.8 – 亚马逊Q在“进行中”通道中分析的问题
- en: The next step is to generate an approach to solve the issue and provide the
    developer with the option to provide any feedback via prompts.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是生成一个解决问题的方法，并给开发者提供通过提示提供任何反馈的选项。
- en: Generating an approach and providing feedback
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成方法和提供反馈
- en: This step is where all the real magic happens behind the scenes. Q will first
    evaluate any prerequisites and then proceed to read the code repository you provided
    in the previous step.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤是幕后所有真正神奇的事情发生的地点。Q将首先评估任何先决条件，然后继续阅读你在上一步提供的代码库。
- en: The following screenshot highlights the approach Q will take to reach the end
    goal. Observe that it waits for the user’s response before it can proceed further.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图突出了Q将采取的方法以达到最终目标。注意，它在继续前进之前会等待用户的响应。
- en: '![Figure 16.9 – Amazon Q analyzing steps when the issue is assigned to it in
    CodeCatalyst](img/B21378_16_9.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图16.9 – 当问题分配给亚马逊Q在CodeCatalyst中的分析步骤](img/B21378_16_9.jpg)'
- en: Figure 16.9 – Amazon Q analyzing steps when the issue is assigned to it in CodeCatalyst
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9 – 当问题分配给亚马逊Q在CodeCatalyst中的分析步骤
- en: The **Recommend tasks** button is also presented on this screen, where Q can
    analyze the issue and assign more manageable tasks to users for faster actions.
    In our use case here, we don’t need to use this feature, but feel free to try
    it out for more complex issues you want to create in your workplace.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**推荐任务**按钮也显示在这个屏幕上，Q可以分析问题并为用户提供更多可管理的任务以加快行动。在我们的用例中，我们不需要使用此功能，但请随意尝试它来解决你希望在办公场所创建的更复杂的问题。'
- en: Based on what it learned, it will generate a summary background of what it understood
    about the project. The following screenshot highlights the background generated
    for the AWS Glue ETL project.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 根据它所学到的，它将生成一个关于它对项目理解的总背景。以下截图突出了为AWS Glue ETL项目生成的背景。
- en: '![Figure 16.10 – Amazon Q background generation step in CodeCatalyst](img/B21378_16_10.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图16.10 – 亚马逊Q在CodeCatalyst中的背景生成步骤](img/B21378_16_10.jpg)'
- en: Figure 16.10 – Amazon Q background generation step in CodeCatalyst
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.10 – 亚马逊Q在CodeCatalyst中的背景生成步骤
- en: The background is helpful in summarizing what the code base is all about. The
    next step is the main one, as it presents the approach it would take to solve
    the issue that was provided as input in the description of the issue.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 背景有助于总结代码库的主要内容。下一步是主要步骤，因为它展示了它将采取的方法来解决问题，该问题已在问题的描述中提供。
- en: The following screenshot highlights the approach for the compression use case
    we presented to Q.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图突出了我们向Q展示的压缩用例的方法。
- en: '![Figure 16.11 – Amazon Q-generated approach in CodeCatalyst – part 1](img/B21378_16_11.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图16.11 – 亚马逊Q在CodeCatalyst中生成的方案 – 第1部分](img/B21378_16_11.jpg)'
- en: Figure 16.11 – Amazon Q-generated approach in CodeCatalyst – part 1
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.11 – 亚马逊Q在CodeCatalyst中生成的方案 – 第1部分
- en: At the end of the step, once you understand the changes proposed by Q, you have
    two options. In some cases, Q will provide perfect choices and everything proposed
    may seem 100% accurate. In such cases, you can simply proceed. However, it’s important
    to keep in mind, as we have been constantly reminded, that LLM-based solutions
    may not always be exactly what you want, but Q is willing to learn and provide
    better or alternative solutions. This is where prompt engineering comes in, and
    Amazon Q allows you to provide prompts via the comments section so that it can
    modify its approach and provide a different solution.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤结束时，一旦你理解了Q提出的更改，你有两个选择。在某些情况下，Q会提供完美的选择，并且所提出的所有内容可能看起来100%准确。在这种情况下，你可以直接继续。然而，重要的是要记住，正如我们一直被提醒的那样，基于LLM的解决方案可能并不总是你想要的，但Q愿意学习和提供更好的或替代的解决方案。这就是提示工程发挥作用的地方，亚马逊Q允许你通过评论部分提供提示，以便它可以修改其方法并提供不同的解决方案。
- en: The following screenshot highlights the options Q presents for its generated
    approach. For our use case, we will accept the approach Q presented and proceed
    to the next step.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图突出了Q为其生成的方案提供的选项。对于我们的用例，我们将接受Q提供的方案并继续下一步。
- en: '![Figure 16.12 – Amazon Q-generated approach in CodeCatalyst – part 2](img/B21378_16_12.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图16.12 – CodeCatalyst中由Amazon Q生成的方案 – 第2部分](img/B21378_16_12.jpg)'
- en: Figure 16.12 – Amazon Q-generated approach in CodeCatalyst – part 2
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.12 – CodeCatalyst中由Amazon Q生成的方案 – 第2部分
- en: Observe how Amazon Q systematically lays down possible next steps. Firstly,
    it understood our requirement and suggested using Snappy compression, which would
    provide a good balance between compression and speed. It then provided code snippets
    that will need to be added or changed in every source code file to make this work.
    For developers, researching possible solutions to a problem and understanding
    all the places where code changes are required can take a significant amount of
    time and effort. Amazon Q did all this on our behalf in just a few minutes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 观察Amazon Q如何系统地列出可能的下一步。首先，它理解了我们的需求，并建议使用Snappy压缩，这将提供压缩和速度之间的良好平衡。然后，它提供了需要在每个源代码文件中添加或更改的代码片段，以使这成为可能。对于开发者来说，研究问题的可能解决方案和理解所有需要代码更改的地方可能需要大量的时间和精力。Amazon
    Q代表我们在几分钟内完成了所有这些。
- en: To add a bit of intrigue, one of the code snippets provided in the approach
    seems to have a problem. I could have provided additional prompts and attempted
    to get Amazon Q to provide me with the exact code that would work. However, in
    real life, sometimes issues slip through the cracks. But don’t worry; we will
    have another opportunity to fix this at a later stage. This also demonstrates
    how Q provides other features to move toward the perfect final solution within
    CodeCatalyst.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加一些神秘感，方案中提供的代码片段之一似乎存在问题。我本可以提供额外的提示并尝试让Amazon Q提供确切的工作代码。然而，在现实生活中，有时问题会从缝隙中溜走。但不用担心；我们将在稍后的阶段有另一个机会修复这个问题。这也展示了Q如何在CodeCatalyst中提供其他功能，以朝着完美的最终解决方案迈进。
- en: For now, we accept the approach and instruct it to proceed. The next step in
    the workflow is the generation of pull requests.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们接受方案并指示其继续进行。工作流程的下一步是生成拉取请求。
- en: Generating pull requests
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成拉取请求
- en: Once Q receives our marching orders to proceed with the approved approach, it
    will generate the necessary code and create a pull request. At this step, the
    workflow moves to the review stage. Developers will once again appreciate how
    much time this is going to save them.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Q收到我们继续使用批准的方案的命令，它将生成必要的代码并创建一个拉取请求。在这一步，工作流程进入审查阶段。开发者将再次欣赏这将为他们节省多少时间。
- en: The following screenshot shows Amazon Q doing all the work of branching and
    creating the necessary changes and presenting all this in a pull request for the
    approver to review.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了Amazon Q在分支、创建必要的更改并在拉取请求中向审批者展示所有这些工作的全过程。
- en: '![Figure 16.13 – Amazon Q completed the approach and generated a pull request](img/B21378_16_13.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图16.13 – Amazon Q完成了方案并生成了一个拉取请求](img/B21378_16_13.jpg)'
- en: Figure 16.13 – Amazon Q completed the approach and generated a pull request
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.13 – Amazon Q完成了方法并生成了一个拉取请求
- en: When you click on the pull request, the approach is laid out in the overview,
    making it easy for the reviewer to understand the changes that were made in the
    code base. The following screenshot shows the overview page of the pull request,
    which summarizes the changes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击拉取请求时，方案将在概述中展开，使审查者更容易理解代码库中做出的更改。以下屏幕截图显示了拉取请求的概述页面，其中总结了更改。
- en: '![Figure 16.14 – Amazon Q-generated pull request overview in CodeCatalyst](img/B21378_16_14.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图16.14 – CodeCatalyst中由Amazon Q生成的拉取请求概述](img/B21378_16_14.jpg)'
- en: Figure 16.14 – Amazon Q-generated pull request overview in CodeCatalyst
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.14 – CodeCatalyst中由Amazon Q生成的拉取请求概述
- en: The generation of a pull request, along with a detailed description of the changes,
    really helps with the next step of the workflow, which is to review and revise
    the suggested changes in the code base.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 生成拉取请求以及更改的详细描述，有助于工作流程的下一步，即审查和修改代码库中的建议更改。
- en: Reviewing and revising code changes
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查和修改代码更改
- en: The approver would typically want to compare the proposed changes on a side-by-side
    comparison screen so that it’s easy to understand all the changes in different
    code files. The following screenshot shows a comparison screen highlighting all
    the changes proposed by Amazon Q in green.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 审批者通常会想要在并排比较屏幕上比较建议的更改，这样就可以轻松理解不同代码文件中的所有更改。以下屏幕截图显示了突出显示 Amazon Q 提出的所有更改的屏幕。
- en: '![Figure 16.15 – Amazon Q-generated pull request code comparison in CodeCatalyst](img/B21378_16_15.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.15 – 在 CodeCatalyst 中 Amazon Q 生成的拉取请求代码比较](img/B21378_16_15.jpg)'
- en: Figure 16.15 – Amazon Q-generated pull request code comparison in CodeCatalyst
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.15 – 在 CodeCatalyst 中 Amazon Q 生成的拉取请求代码比较
- en: Recall a while back we mentioned that there seems to be an issue in one of the
    code snippets suggested by the Amazon Q approach. Since we did not notice it during
    the previous step, it is prominent in the pull request when the actual code is
    presented for review. No team wants incorrect code to creep into the repository,
    hence it is usually a best practice to review and approve pull requests before
    the code is merged into the main branch.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，我们之前提到过，似乎在 Amazon Q 方法建议的一个代码片段中存在问题。由于我们在上一步中没有注意到它，所以在实际代码提交审查时，这个问题在拉取请求中显得尤为突出。没有团队希望错误的代码进入仓库，因此通常在代码合并到主分支之前，审查和批准拉取请求是一种最佳实践。
- en: Upon closer inspection, it is observed that `compression` is not a direct property
    of the Glue table in the CDK code file. Therefore, the code `compression:glue.Compression.SNAPPY`
    will fail to compile during the build stage. Instead of doing this all over again,
    CodeCatalyst will allow the reviewer to add comments right inside the pull request
    screen and make a revision request.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查后，观察到在 CDK 代码文件中，`compression` 不是 Glue 表的直接属性。因此，代码 `compression:glue.Compression.SNAPPY`
    将在构建阶段编译失败。为了避免重复做同样的事情，CodeCatalyst 允许审查者在拉取请求屏幕内直接添加注释并请求修订。
- en: In the following screenshot, we added a comment next to the incorrect line of
    code, asking the system to use a different logic.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，我们在错误代码行旁边添加了注释，要求系统使用不同的逻辑。
- en: '![Figure 16.16 – Add a comment in the pull request and request a revision in
    CodeCatalyst](img/B21378_16_16.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.16 – 在 CodeCatalyst 的拉取请求中添加注释并请求修订](img/B21378_16_16.jpg)'
- en: Figure 16.16 – Add a comment in the pull request and request a revision in CodeCatalyst
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.16 – 在 CodeCatalyst 的拉取请求中添加注释并请求修订
- en: When you hit the **Create Revision** button on the pull request screen, Amazon
    Q is invoked again. It takes the comment made in the code as a prompt and creates
    a new revision of the pull request with the correct logic this time. This is highlighted
    in the following screenshot, where revision v2 was able to come back with the
    correct code.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在拉取请求屏幕上点击**创建修订**按钮时，Amazon Q 会被再次调用。它将代码中的注释作为提示，并创建一个新的拉取请求修订，这次带有正确的逻辑。以下屏幕截图显示了修订
    v2 能够返回正确代码的情况。
- en: '![Figure 16.17 – New, updated code in the revised pull request in CodeCatalyst](img/B21378_16_17.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.17 – 在 CodeCatalyst 修订的拉取请求中的新、更新后的代码](img/B21378_16_17.jpg)'
- en: Figure 16.17 – New, updated code in the revised pull request in CodeCatalyst
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.17 – 在 CodeCatalyst 修订的拉取请求中的新、更新后的代码
- en: Once the reviewer confirms everything looks correct, they can approve the pull
    request in CodeCatalyst as the next step. This is highlighted in the following
    screenshot.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦审查者确认一切看起来都正确，他们就可以在 CodeCatalyst 中作为下一步批准拉取请求。以下屏幕截图显示了这一过程。
- en: '![Figure 16.18 – New, updated code approved in the revised pull request in
    CodeCatalyst](img/B21378_16_18.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.18 – 在 CodeCatalyst 修订的拉取请求中批准的新、更新后的代码](img/B21378_16_18.jpg)'
- en: Figure 16.18 – New, updated code approved in the revised pull request in CodeCatalyst
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.18 – 在 CodeCatalyst 修订的拉取请求中批准的新、更新后的代码
- en: This brings us to the final step in the workflow, which is to merge the approved
    code changes back into the repository.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们带到了工作流程的最终一步，即将批准的代码更改合并回仓库。
- en: Merging code changes in the repository
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库中的代码更改合并
- en: Once the review and approval are done, the code can be merged into the main
    branch, as seen in the following screenshot.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成审查和批准，代码就可以合并到主分支，如下一个屏幕截图所示。
- en: '![Figure 16.19 – Code merge process in CodeCatalyst](img/B21378_16_19.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.19 – CodeCatalyst 中的代码合并过程](img/B21378_16_19.jpg)'
- en: Figure 16.19 – Code merge process in CodeCatalyst
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.19 – CodeCatalyst 中的代码合并过程
- en: The merge request triggers the workflow to recompile, rebuild, and redeploy
    the code via the CI/CD process. You can always go to the workflows in the CI/CD
    section to confirm the successful completion of the build and deploy process.
    The following screenshot shows the successful build of the workflow after the
    pull request was merged.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 合并请求触发工作流通过CI/CD流程重新编译、重建和重新部署代码。您始终可以前往CI/CD部分的工作流以确认构建和部署过程的成功完成。下面的截图显示了拉取请求合并后工作流的成功构建。
- en: '![Figure 16.20 – Workflows in CodeCatalyst](img/B21378_16_20.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图16.20 – CodeCatalyst中的工作流](img/B21378_16_20.jpg)'
- en: Figure 16.20 – Workflows in CodeCatalyst
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.20 – CodeCatalyst中的工作流
- en: For our Glue ETL use case, the workflow will compile the code and trigger the
    AWS CloudFormation stack via the CDK logic. The CloudFormation stack, in turn,
    will recreate/update the necessary infrastructure that was affected by the code
    changes. In our case, you can go to the Glue console and check the updated ETL
    job with the compression logic in it ready to be triggered for the next run.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的Glue ETL用例，工作流将编译代码并通过CDK逻辑触发AWS CloudFormation堆栈。CloudFormation堆栈反过来将重新创建/更新受代码更改影响的基础设施。在我们的案例中，您可以访问Glue控制台并检查包含压缩逻辑的更新ETL作业，准备触发下一次运行。
- en: Before we wind down the feature development capability in CodeCatalyst using
    Amazon Q, I also want to provide an alternate scenario of failure. In the world
    of software engineering, not everything goes as planned. What if during the code
    review process, the reviewer did not catch the code issue and did not fix it using
    the revision feature? Well, they would have approved the request, and the merge
    process would have triggered the workflow, eventually resulting in failure.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束使用Amazon Q在CodeCatalyst中的功能开发能力之前，我还想提供一个失败的替代场景。在软件工程的世界里，并非所有事情都按计划进行。如果在代码审查过程中，审查者没有发现代码问题，并且没有使用修订功能来修复它，会怎样呢？好吧，他们会批准请求，合并过程将触发工作流，最终导致失败。
- en: The following screenshot shows the failed workflow if the code issue had not
    been revised during the pull request process.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了如果在拉取请求过程中没有修订代码问题，将显示失败的工作流。
- en: '![Figure 16.21 – Failed workflow in CodeCatalyst due to code issue](img/B21378_16_21.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图16.21 – 由于代码问题导致CodeCatalyst中的失败工作流](img/B21378_16_21.jpg)'
- en: Figure 16.21 – Failed workflow in CodeCatalyst due to code issue
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.21 – 由于代码问题导致CodeCatalyst中的失败工作流
- en: At this point, the development team enters firefighting mode and identifies
    the error causing the failure from the logs provided within the failed workflow.
    The following screenshot shows the error that caused the failure.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，开发团队进入灭火模式，并从失败工作流中提供的日志中识别导致失败的错误。下面的截图显示了导致失败的错误。
- en: '![Figure 16.22 – Failed workflow cause in the logs of the workflow in CodeCatalyst](img/B21378_16_22.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图16.22 – CodeCatalyst中工作流日志中的失败工作流原因](img/B21378_16_22.jpg)'
- en: Figure 16.22 – Failed workflow cause in the logs of the workflow in CodeCatalyst
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.22 – CodeCatalyst中工作流日志中的失败工作流原因
- en: One of the next steps after this would be to create another issue in CodeCatalyst,
    provide the error details in the description, and assign it back to Amazon Q for
    analysis and troubleshooting. You may have to engage in prompt engineering and
    provide multiple comments along the way for Amazon Q to arrive at the correct
    logic that would fix the issue. Once you go through the entire process, the new
    code will again be included in the pull request for approval and merging into
    the main branch.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后的一个下一步将是创建另一个问题在CodeCatalyst中，提供描述中的错误详情，并将其分配回Amazon Q进行分析和故障排除。您可能需要参与快速工程并提供多个评论，以便Amazon
    Q得出正确的逻辑来修复问题。一旦您完成整个流程，新代码将再次包含在拉取请求中，以供批准和合并到主分支。
- en: Before we wind down this chapter, we will quickly look at a couple of other
    cool features in CodeCatalyst using Amazon Q that help developers save time and
    effort.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，我们将快速查看CodeCatalyst中使用Amazon Q的几个其他酷炫功能，这些功能可以帮助开发者节省时间和精力。
- en: Amazon Q’s summarizing capability in Amazon CodeCatalyst
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Q在Amazon CodeCatalyst中的总结能力
- en: Developers will understand the pain of trying to comprehend the changes made
    in a pull request submission. Typically, the people who make code changes are
    not the ones approving them. So, someone else needs to understand all the changes
    made in the code base, analyze their intended effect, and finally, approve them
    if they meet the standards.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者会理解尝试理解拉取请求提交中变更的痛苦。通常，进行代码变更的人并不是批准他们的人。因此，其他人需要理解代码库中所有变更，分析其预期效果，并最终，如果它们符合标准，批准它们。
- en: Without proper comments, it’s difficult to understand all the nuances of the
    changes made. Sometimes, even with comments, it gets overwhelming to grasp the
    full intention of the changes. This is where Amazon Q steps in to make life easier
    for developers and approvers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 没有适当的注释，很难理解所有变更的细微差别。有时，即使有注释，也很难完全理解变更的意图。这就是Amazon Q介入，使开发者和审批者生活变得更轻松的地方。
- en: Let’s look at Amazon Q’s ability to analyze code changes and generate a summary
    of the changes when creating a pull request, as well as create a summary based
    on all the comments made on the code changes in a pull request.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Amazon Q分析代码变更并在创建拉取请求时生成变更总结的能力，以及根据拉取请求中对代码变更的所有评论创建总结。
- en: Pull request comment summary
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取请求评论摘要
- en: When reviewing a pull request, users often leave numerous comments regarding
    the proposed changes. With multiple reviewers providing feedback, it can become
    challenging to identify common themes or ensure a thorough review of all comments
    across revisions. To streamline this process, the **Create comment summary** feature
    utilizes Amazon Q to analyze all comments left on code changes within a pull request
    and generate a concise summary of the feedback.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查拉取请求时，用户经常就拟议的变更留下许多评论。随着多个审查者提供反馈，确定共同主题或确保对所有评论进行彻底审查可能变得具有挑战性。为了简化此过程，**创建评论摘要**功能利用Amazon
    Q分析拉取请求中留下的所有代码变更评论，并生成简洁的反馈摘要。
- en: The following screenshot highlights the summary generated by Amazon Q for the
    compression changes we did in our pull request.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图突出了Amazon Q为我们拉取请求中进行的压缩变更生成的摘要。
- en: '![Figure 16.23 – Pull request content summary](img/B21378_16_23.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图16.23 – 拉取请求内容摘要](img/B21378_16_23.jpg)'
- en: Figure 16.23 – Pull request content summary
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.23 – 拉取请求内容摘要
- en: Pull request description
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取请求描述
- en: Pull requests serve as a collaborative platform for reviewing code alterations,
    whether they’re minor fixes, significant feature additions, or updates to released
    software versions. Including a summary of the code changes and their purpose in
    the pull request description aids reviewers in comprehending the alterations and
    fosters a historical perspective on the code evolution. However, developers frequently
    depend on the code itself to convey information, resulting in vague or insufficiently
    detailed descriptions that hinder reviewers’ understanding of the changes or their
    underlying intent.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求作为代码变更审查的协作平台，无论是微小的修复、重大的功能添加，还是发布软件版本的更新。在拉取请求描述中包含代码变更的总结及其目的，有助于审查者理解变更并促进对代码演变的历史视角。然而，开发者经常依赖代码本身来传达信息，导致描述模糊或不够详细，从而阻碍审查者对变更或其潜在意图的理解。
- en: This is where the **Write description for me** feature comes in handy, as it
    is able to generate a description of the changes in the pull request, making it
    easier to review and approve changes. The following screen shows the **Write description
    for me** option on the pull request screen.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**为我编写描述**功能派上用场的地方，因为它能够生成拉取请求中变更的描述，使审查和批准变更变得更加容易。以下屏幕显示了拉取请求屏幕上的**为我编写描述**选项。
- en: '![Figure 16.24 – Pull request description generation feature in CodeCatalyst](img/B21378_16_24.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图16.24 – CodeCatalyst中的拉取请求描述生成功能](img/B21378_16_24.jpg)'
- en: Figure 16.24 – Pull request description generation feature in CodeCatalyst
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.24 – CodeCatalyst中的拉取请求描述生成功能
- en: Amazon Q examines the disparities between the source branch containing the code
    modifications and the target branch where you intend to merge these alterations.
    Subsequently, it generates a summary outlining the nature of these modifications
    and offers its most accurate interpretation of their purpose and impact.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q检查包含代码修改的源分支和您打算合并这些变更的目标分支之间的差异。随后，它生成一个总结，概述这些修改的性质，并提供了对其目的和影响的最准确解释。
- en: The following screenshot highlights the description generated by Amazon Q using
    all the information from the pull request.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图突出了Amazon Q使用拉取请求中所有信息生成的描述。
- en: '![Figure 16.25 – Auto-generated description on the CodeCatalyst pull request
    screen](img/B21378_16_25.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图16.25 – CodeCatalyst拉取请求屏幕上的自动生成描述](img/B21378_16_25.jpg)'
- en: Figure 16.25 – Auto-generated description on the CodeCatalyst pull request screen
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.25 – CodeCatalyst拉取请求屏幕上的自动生成描述
- en: CodeCatalyst is a comprehensive service with numerous features of its own. We
    have only covered some of the next-generation features provided in the service
    via Amazon Q, which is a generative AI-powered assistant.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: CodeCatalyst是一项具有众多自身功能的综合服务。我们只介绍了通过Amazon Q提供的部分下一代功能，Amazon Q是一个由生成式AI驱动的助手。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered some of the challenges faced by developers during
    the DevOps process. We then introduced Amazon CodeCatalyst, a comprehensive software
    development service designed for development teams to rapidly construct, deploy,
    and scale applications on AWS.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了开发者在DevOps过程中面临的一些挑战。然后，我们介绍了Amazon CodeCatalyst，这是一项为开发团队设计的综合软件开发服务，旨在快速构建、部署和扩展在AWS上运行的应用程序。
- en: After that, we leveraged a use case to demonstrate the different generative
    AI capabilities of the service. Amazon Q allows developers to rapidly add new
    features to software. Developers can create issues and assign them to Amazon Q
    for comprehensive understanding and recommendations for different approaches needed
    to solve the particular task provided as input. Q can also be prompted to provide
    revised approaches based on the comments that users provide. It then generates
    the code and creates a pull request so that reviewers can examine the proposed
    changes and either approve or request revisions before merging them back into
    the main repository.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们利用一个用例来展示该服务不同的生成式AI功能。Amazon Q允许开发者快速向软件添加新功能。开发者可以创建问题并将它们分配给Amazon Q，以全面理解并针对提供的特定任务所需的不同方法提供建议。Q还可以根据用户提供的评论提示提供修订的方法。然后，它生成代码并创建拉取请求，以便审阅者可以检查提议的更改，并在合并回主存储库之前批准或要求修订。
- en: We also explored how Amazon Q provides pull request comment summaries and generates
    pull request descriptions. All these features boost developer productivity and
    save significant time during the entire software development process.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了Amazon Q如何提供拉取请求评论摘要和生成拉取请求描述。所有这些功能都提高了开发者的生产力，并在整个软件开发过程中节省了大量时间。
- en: Final thoughts
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的想法
- en: Thank you for taking the time to go on the journey we took in this book. Even
    though we have reached the end of this book on Amazon Q Developer and covered
    many topics, we are still in the infancy stage of generative AI. Rapid innovation
    is happening across the board, so keep an open mind when it comes to seeing and
    exploring new features as they are rolled out. Many of the features we described
    may evolve for the better. The goal of writing this book was to give you a glimpse
    of the art possible with Amazon Q Developer.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您花时间与我们一同经历这本书中的旅程。尽管我们已经到达了关于Amazon Q开发者的书籍的结尾，并涵盖了众多主题，但我们仍处于生成式AI的初期阶段。全面创新正在各个领域迅速发生，因此在看到和探索新功能时，请保持开放的心态。我们描述的许多功能可能会得到更好的发展。编写这本书的目的是让您一窥使用Amazon
    Q开发者可能实现的技艺。
- en: Generative AI-powered assistants, such as Amazon Q Developer, are set to transform
    the landscape for both current software engineers and aspiring developers who
    may lack resources or skills. For established engineers, AI will significantly
    boost productivity by generating code snippets, providing real-time feedback,
    and automating tedious tasks such as debugging and documentation as we have seen
    in this book. This enables them to focus on more complex and creative aspects
    of development. AI can also facilitate better collaboration within teams by summarizing
    discussions and translating language barriers, fostering a more inclusive work
    environment.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由生成式AI驱动的助手，如Amazon Q开发者，将改变当前软件工程师和可能缺乏资源或技能的渴望成为开发者的前景。对于经验丰富的工程师来说，AI将通过生成代码片段、提供实时反馈以及自动化如调试和文档等繁琐任务（正如我们在本书中所见）来显著提高生产力。这使得他们能够专注于开发更复杂和更具创造性的方面。AI还可以通过总结讨论和翻译语言障碍来促进团队内部更好的协作，营造一个更具包容性的工作环境。
- en: For aspiring developers, particularly those with limited access to resources
    or formal education, AI offers personalized learning experiences tailored to their
    strengths and weaknesses. It provides instant feedback and learning support, making
    it easier to acquire new skills and understand complex concepts. AI-powered tools
    can democratize access to coding education by offering mentorship, career path
    recommendations, and resources that adapt to evolving industry trends. Additionally,
    AI can help break down barriers for individuals with physical or learning disabilities
    through voice-activated coding and other accessibility features.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有志于成为开发者的人来说，尤其是那些资源有限或接受过正规教育的人，AI 提供了个性化的学习体验，这些体验是根据他们的优势和劣势量身定制的。它提供即时反馈和学习支持，使获取新技能和理解复杂概念变得更加容易。AI
    驱动的工具可以通过提供导师指导、职业路径推荐以及适应不断变化的行业趋势的资源，来民主化编码教育的获取途径。此外，AI 还可以通过语音激活编码和其他辅助功能帮助克服身体或学习障碍的人士的障碍。
- en: So, to conclude, if you are feeling overwhelmed with learning anything new in
    the world of information technology, this is your moment to embrace generative
    AI-powered assistants such as Amazon Q Developer. The more you use them, the more
    you will empower yourself to achieve greater heights in your career.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结来说，如果你在信息技术领域的新知识学习上感到不知所措，那么拥抱由 Amazon Q Developer 等生成式 AI 助手正是你的时刻。你用得越多，就越能增强自己在职业生涯中达到更高成就的能力。
- en: Never stop learning; you’ll be amazed by how many new doors it will open for
    you.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要停止学习；你会对它为你打开多少新的大门感到惊讶。
- en: References
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Amazon CodeCatalyst documentation: [https://docs.aws.amazon.com/codecatalyst/latest/userguide/welcome.html](https://docs.aws.amazon.com/codecatalyst/latest/userguide/welcome.html)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon CodeCatalyst 文档: [https://docs.aws.amazon.com/codecatalyst/latest/userguide/welcome.html](https://docs.aws.amazon.com/codecatalyst/latest/userguide/welcome.html)'
- en: 'Amazon CodeCatalyst workshop: [https://catalog.workshops.aws/ccdevops/](https://catalog.workshops.aws/ccdevops/)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon CodeCatalyst 工作坊: [https://catalog.workshops.aws/ccdevops/](https://catalog.workshops.aws/ccdevops/)'
- en: 'Amazon CodeCatalyst – Modern three-tier web application tutorial: [https://docs.aws.amazon.com/codecatalyst/latest/userguide/getting-started-template-project.html](https://docs.aws.amazon.com/codecatalyst/latest/userguide/getting-started-template-project.html)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon CodeCatalyst – 现代三层 Web 应用程序教程: [https://docs.aws.amazon.com/codecatalyst/latest/userguide/getting-started-template-project.html](https://docs.aws.amazon.com/codecatalyst/latest/userguide/getting-started-template-project.html)'
- en: 'Managing generative AI features in Amazon CodeCatalyst: [https://docs.aws.amazon.com/codecatalyst/latest/adminguide/managing-generative-ai-features.html](https://docs.aws.amazon.com/codecatalyst/latest/adminguide/managing-generative-ai-features.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 Amazon CodeCatalyst 中管理生成式 AI 功能: [https://docs.aws.amazon.com/codecatalyst/latest/adminguide/managing-generative-ai-features.html](https://docs.aws.amazon.com/codecatalyst/latest/adminguide/managing-generative-ai-features.html)'
