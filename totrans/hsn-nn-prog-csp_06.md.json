["```py\nclass Perceptron {\n\nfloat[] weights;\n```", "```py\nPerceptron(int n) {\n    weights = new float[n];\n    for (int i = 0; i<weights.length; i++) {\n```", "```py\n      weights[i] = random(-1,1);\n    }\n}\n```", "```py\nint feedforward(float[] inputs) {\n    float sum = 0;\n    for (int i = 0; i<weights.length; i++) {\n      sum += inputs[i]*weights[i];\n    }\n```", "```py\n return activate(sum);\n }\n```", "```py\nPerceptron p = new Perceptron(3);\n```", "```py\nfloat[] point = {5,-2,19};\n```", "```py\nint result = p.feedforward(point);\n```", "```py\nfloat c = 0.01;\n```", "```py\nvoid train(float[] inputs, int desired) {\n```", "```py\n  int guess = feedforward(inputs);\n```", "```py\nfloat error = desired - guess;\n```", "```py\n  for (int i = 0; i<weights.length; i++) {\n    weights[i] += c * error * inputs[i];\n```", "```py\nprivate void PlotAllFunctions()\n{\n    Clear everything out.\n    MasterPane master = zed.MasterPane;\n    master.PaneList.Clear();\n    master.Title.IsVisible = true;\n    master.Margin.All = 10;\n\n    Here is the section that will plot each individual function.\n    PlotOnMasterPane(Functions.LogisticApproximantSteep, \"Logistic \n    Steep (Approximant)\");\n\n    PlotOnMasterPane(Functions.LogisticFunctionSteep, \"Logistic Steep \n    (Function)\");\n\n    PlotOnMasterPane(Functions.SoftSign, \"Soft Sign\");\n\n    PlotOnMasterPane(Functions.PolynomialApproximant, \"Polynomial \n    Approximant\");\n\n    PlotOnMasterPane(Functions.QuadraticSigmoid, \"Quadratic Sigmoid\");\n\n    PlotOnMasterPane(Functions.ReLU, \"ReLU\");\n\n    PlotOnMasterPane(Functions.LeakyReLU, \"Leaky ReLU\");\n\n    PlotOnMasterPane(Functions.LeakyReLUShifted, \"Leaky ReLU \n    (Shifted)\");\n\n    PlotOnMasterPane(Functions.SReLU, \"S-Shaped ReLU\");\n\n    PlotOnMasterPane(Functions.SReLUShifted, \"S-Shaped ReLU \n    (Shifted)\");\n\n    PlotOnMasterPane(Functions.ArcTan, \"ArcTan\");\n\n    PlotOnMasterPane(Functions.TanH, \"TanH\");\n\n    PlotOnMasterPane(Functions.ArcSinH, \"ArcSinH\");\n\n    PlotOnMasterPane(Functions.ScaledELU, \"Scaled Exponential Linear \n    Unit\");\n\n    Reconfigure the Axis\n    zed.AxisChange();\n\n    Layout the graph panes using a default layout\n    using (Graphics g = this.CreateGraphics()) \n    {\n        master.SetLayout(g, PaneLayout.SquareColPreferred);\n    }\n\n    MainPlot Function\n\n    Behind the scenes, the â€˜Plot' function is what is responsible for \n    executing     and plotting each function.\n\n    private void Plot(Func<double, double> fn, string fnName, Color \n    graphColor, GraphPane gpane = null)\n    {\n        const double xmin = -2.0;\n        const double xmax = 2.0;\n        const int resolution = 2000;\n        zed.IsShowPointValues = true;\n        zed.PointValueFormat = \"e\";\n\n        var pane = gpane ?? zed.GraphPane;\n        pane.XAxis.MajorGrid.IsVisible = true;\n        pane.YAxis.MajorGrid.IsVisible = true;\n        pane.Title.Text = fnName;\n        pane.YAxis.Title.Text = string.Empty;\n        pane.XAxis.Title.Text = string.Empty;\n\n        double[] xarr = new double[resolution];\n        double[] yarr = new double[resolution];\n        double incr = (xmax - xmin) / resolution;\n        doublex = xmin;\n\n        for(int i=0; i<resolution; i++, x += incr)\n        {\n            xarr[i] = x;\n            yarr[i] = fn(x);\n        }\n\n        PointPairList list1 = new PointPairList(xarr, yarr);\n        LineItem li = pane.AddCurve(string.Empty, list1, graphColor, \n        SymbolType.None);\n        li.Symbol.Fill = new Fill(Color.White);\n        pane.Chart.Fill = new Fill(Color.White, \n        Color.LightGoldenrodYellow, 45.0F);\n}\n```"]