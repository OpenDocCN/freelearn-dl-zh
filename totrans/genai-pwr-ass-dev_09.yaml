- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boost Coding Efficiency for JSON, YAML, and HCL with Auto-Code Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of **Infrastructure as Code** (**IaC**) languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON and YAML auto-code generation for AWS CloudFormation using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HCL auto-code generation for Terraform using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON, YAML, and HCL code explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous chapter, we explored the **command-line interface** (**CLI**)
    and shell scripting using two user personas: system administrators and shell script
    programmers. We introduced how auto-code generation through Amazon Q Developer
    can assist these professionals. Using the Amazon Q Developer CLI, we demonstrated
    how to achieve various administrative tasks such as disk space management, user
    management, process management, library management, and more. Additionally, we
    generated an end-to-end shell script utilizing chain-of-thought prompts, single-line
    prompts, and multi-line prompt techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore different categories of programming languages
    associated with IaC. In IaC, the programming languages are tightly coupled with
    the tools or services used. Firstly, we will focus on JSON and YAML, which are
    used by the AWS CloudFormation service. Then, we will explore HCL, which is used
    by Terraform. We will introduce how auto-code generation through Amazon Q Developer
    can help understand the basics, learn the syntax, and automatically generate code
    using JSON, YAML, and HCL. Then, we will explore code explainability to support
    documentation and code optimization recommendations provided by Amazon Q Developer
    for IaC programmers.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of IaC languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In today’s cloud computing landscape, IaC has emerged as a fundamental paradigm
    shift in managing and provisioning infrastructure. AWS CloudFormation and Terraform
    are two leading IaC tools that enable developers and system administrators to
    define and manage cloud resources programmatically, treating infrastructure as
    software.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation simplifies the provisioning and management of AWS resources
    using declarative JSON or YAML templates. These templates define the configuration
    and interdependencies of AWS services, enabling users to provision multiple resources
    predictably and repeatably. CloudFormation automates the creation, updating, and
    deletion of infrastructure stacks, ensuring consistency and reducing the risk
    of manual errors in resource provisioning.
  prefs: []
  type: TYPE_NORMAL
- en: Terraform, developed by HashiCorp, takes a broader approach by supporting multiple
    cloud providers (including AWS, Azure, and Google Cloud Platform) and on-premises
    infrastructure. It uses a declarative language called **HashiCorp Configuration
    Language** (**HCL**) to define infrastructure as code. Terraform’s state management
    capabilities allow it to plan and execute changes to infrastructure with minimal
    downtime and manage complex dependencies between resources across different providers.
  prefs: []
  type: TYPE_NORMAL
- en: Both AWS CloudFormation and Terraform play critical roles in enabling organizations
    to achieve IaC principles, including versioning, automation, and scalability.
    They facilitate collaborative development practices, integrate with CI/CD pipelines,
    and enable the management of infrastructure configurations as code repositories.
    IaC developers can leverage various prompt techniques and chat-style integration
    with Amazon Q Developer to enhance AWS CloudFormation and Terraform capabilities
    in several key areas. Amazon Q Developer automates the generation of AWS CloudFormation
    templates and Terraform configurations based on specific infrastructure requirements.
    Using natural language processing and chat-style interactions, developers can
    specify infrastructure needs and receive generated code that adheres to best practices
    and architectural guidelines. Beyond basic template generation, Amazon Q Developer
    offers optimization suggestions and enforces best practices for AWS CloudFormation
    and Terraform configurations. It analyzes generated code, identifies potential
    performance bottlenecks or security vulnerabilities, and provides recommendations
    to optimize infrastructure deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Amazon Q Developer serves as an educational resource for learning
    IaC principles and mastering AWS CloudFormation and Terraform. It offers interactive
    tutorials, explanations of IaC concepts, and practical examples through its intuitive
    interface. This educational aspect helps developers and system administrators
    improve their proficiency in efficiently and securely managing cloud resources.
    Additionally, by integrating Amazon Q Developer with AWS CloudFormation and Terraform,
    teams benefit from standardized templates, shared infrastructure configurations,
    and streamlined code review processes. This integration enhances collaboration
    between development, operations, and security teams, ensuring that infrastructure
    changes are implemented consistently and securely. As cloud environments evolve,
    Amazon Q Developer continuously updates its recommendations and capabilities to
    align with the latest best practices and architectural patterns in AWS CloudFormation
    and Terraform. This ensures that organizations can leverage cutting-edge infrastructure
    management techniques and maintain operational excellence in cloud deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive deep to see how Amazon Q Developer can help an IaC developer. To
    illustrate, I am going to use the Amazon Q Developer interface with VS Code (refer
    to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022) for configuration steps for
    Amazon Q Developer with VS Code). Additionally, for information on the Terraform
    Extension for Visual Studio Code, please refer to the *References* section at
    the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer uses LLMs, which, by nature, are non-deterministic, so you
    may not get exactly the same answers/code blocks shown in the code snapshots;
    try to update prompts to get desired recommendations. However, logically, the
    generated answer/code should meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: JSON and YAML auto-code generation for AWS CloudFormation using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the previous chapter, let’s assume that a new IaC developer plans
    to work with JSON and YAML coding to build infrastructure on the AWS cloud using
    AWS CloudFormation but lacks background knowledge about this service. We will
    use Amazon Q Developer’s chat-style interface to educate IaC developers. They
    can simply ask questions in natural language to learn about AWS CloudFormation
    and its support for JSON and YAML.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s first learn about AWS CloudFormation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.1 – Prompt – IaC AWS CloudFormation basic](img/B21378_09_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Prompt – IaC AWS CloudFormation basic
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Q Developer provided an overview of the AWS CloudFormation service:
    “**AWS CloudFormation is a service provided by Amazon Web Services (AWS) that
    allows you to model and provision a collection of related AWS and third-party
    resources using templates. It enables you to define and manage your infrastructure
    as code, making it easier to create, update, and delete resources in a consistent
    and** **repeatable manner****”****.**'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Amazon Q Developer listed some AWS resources that can be provisioned
    using AWS CloudFormation. Then, it provided the key features of AWS CloudFormation,
    including IaC, automated provisioning, resource orchestration, reusability and
    modularity, change management, rollback, and deletion. Furthermore, it highlighted
    the use of JSON and YAML templates as common programming mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now, let’s ask Amazon Q Developer to provide more information about the
    AWS resources supported by AWS CloudFormation using JSON and YAML templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.2 – Prompt – IaC AWS CloudFormation AWS resources](img/B21378_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Prompt – IaC AWS CloudFormation AWS resources
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer gave a well-formatted
    answer with specifications related to categories of resources such as compute,
    networking, storage, databases, analytics, security, application services, and
    management, and sample resources from each of those categories that are supported
    by AWS CloudFormation using JSON and YAML.
  prefs: []
  type: TYPE_NORMAL
- en: JSON auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the previous information, an IaC developer now understands the support
    provided by AWS CloudFormation for provisioning resources using JSON. As the next
    step, let’s begin writing a JSON template for AWS CloudFormation to create a simple
    AWS resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s ask Amazon Q Developer to create JSON code for a commonly requested AWS
    resource such as an S3 bucket from a storage resource and a networking component
    such as VPC. For customization, use the specific S3 bucket name, VPC name, and
    the CIDR block as `10.0.0.0/16`. We will use prompts to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an AWS CloudFormation JSON template to create an S3 bucket named `"MyTestBucket"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an AWS CloudFormation JSON template to create a `"MyTestVPC"` VPC with
    a CIDR block of `10.0.0.0/16`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To illustrate, I will use the VS Code script editor integrated with Amazon
    Q Developer. As these are relatively easy requirements, let’s use single-line
    prompts for each of the preceding resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.3 – Prompt – IaC AWS CloudFormation JSON, S3 and VPC](img/B21378_09_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Prompt – IaC AWS CloudFormation JSON, S3 and VPC
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer provided the
    correct end-to-end JSON template syntax for S3 and VPC. It used specific keywords
    supported by AWS CloudFormation to provision these resources, such as `"AWS::S3::Bucket"`
    and `"AWS::EC2::VPC"`, which combine the resource type and the corresponding parent
    service name. Additionally, it used the required properties to meet our requirements,
    such as `"BucketName"` set to `"MyTestBucket"` and `"CidrBlock"` with the value
    `"10.0.0.0/16"`.
  prefs: []
  type: TYPE_NORMAL
- en: YAML auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YAML is another language supported by AWS CloudFormation for provisioning resources.
    As the next step, let’s begin writing a YAML template for AWS CloudFormation to
    create a simple AWS resource. We’ll use the same requirements for the Amazon S3
    bucket and VPC creation as we did for the JSON template. Now, let’s modify our
    prompts to instruct Amazon Q Developer to generate a YAML template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the previous example, I will use the VS Code script editor integrated
    with Amazon Q Developer and utilize single-line prompts for each of these resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.4 – Prompt – IaC AWS CloudFormation YAML, S3 and VPC](img/B21378_09_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Prompt – IaC AWS CloudFormation YAML, S3 and VPC
  prefs: []
  type: TYPE_NORMAL
- en: Notice in the preceding screenshot that Amazon Q Developer created an end-to-end
    YAML script for S3 and the VPC. It used specific keywords supported by AWS CloudFormation
    to provision these resources, such as `AWS::S3::Bucket` and `AWS::EC2::VPC`, which
    combine the resource type and the corresponding parent service name. Additionally,
    it used the required properties to meet our requirements, such as `BucketName`
    set to `mytestbucket` and `CidrBlock` with the value `10.0.0.0/16`.
  prefs: []
  type: TYPE_NORMAL
- en: If you compare the YAML template screenshot (*Figure 9**.4*) with the JSON template
    screenshot (*Figure 9**.3*), you will notice that Amazon Q Developer included
    additional properties in the YAML version. Due to the non-deterministic nature
    of LLMs, Amazon Q Developer may add extra properties. However, it always includes
    the necessary properties to meet your requirements. If desired, you can adjust
    the prompts to add further requirements and receive recommendations with additional
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: We will revisit the JSON template in the *JSON, YAML, and HCL code explainability
    and optimization using Amazon Q Developer* section to review additional recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: HCL auto-code generation for Terraform using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll follow the theme to start with a basic knowledge of the language in this
    section, too. I’ll first assume the persona of a new IaC developer who is planning
    to work with HCL by Terraform and does not have any background with the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Terraform basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s use Amazon Q Developer’s chat-style interface to educate IaC developers,
    where they can simply ask questions in natural language to learn about Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first learn about Terraform from Amazon Q Developer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.5 – Prompt – IaC Terraform basic partial screenshot](img/B21378_09_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Prompt – IaC Terraform basic partial screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding partial screenshot, Amazon Q Developer provided
    basic information: “**Terraform is an open-source infrastructure as code (IaC)
    tool created by HashiCorp. It is used for provisioning and managing cloud infrastructure
    resources across multiple cloud providers**”. Then, it listed the use cases and
    features supported by Terraform such as infrastructure provisioning, IaC, multi-cloud
    support, resource lifecycle management, state management, dependency handling,
    and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, based on the information from Amazon Q Developer’s answer, as an IaC developer,
    we understand that it used HCL to create resources across multiple cloud providers
    and on-premises, including AWS resources such as EC2 instances, VPCs, RDS databases,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now ask Amazon Q Developer to list the different AWS resources that are
    supported by HCL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.6 – Prompt – IaC Terraform AWS resources](img/B21378_09_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Prompt – IaC Terraform AWS resources
  prefs: []
  type: TYPE_NORMAL
- en: Notice that Amazon Q Developer provided a categorized list including compute,
    networking, storage, databases, analytics, security, application services, and
    management, and sample resources within each category supported by Terraform HCL.
  prefs: []
  type: TYPE_NORMAL
- en: HCL auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the preceding basic information from Amazon Q Developer, HCL is the
    language supported by Terraform to provision multiple AWS cloud resources including
    Amazon S3 buckets and VPCs. As the next step, let’s use the same requirements
    for the S3 bucket and VPC creation as we used in the previous section on AWS CloudFormation
    with JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s modify our prompts to instruct Amazon Q Developer to generate an
    HCL template. Similar to the previous example, I will use the VS Code script editor
    integrated with Amazon Q Developer and utilize single-line prompts for each of
    these resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.7 – Prompt – IaC Terraform HCL, S3 and VPC](img/B21378_09_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Prompt – IaC Terraform HCL, S3 and VPC
  prefs: []
  type: TYPE_NORMAL
- en: Observe that the HCL end-to-end code provided by Amazon Q Developer used Terraform
    modules and corresponding required properties. It used `resource "aws_s3_bucket"`,
    `resource "aws_vpc"`, `bucket = "MyTestBucket"`, and `cidr_block = "10.0.0.0/16"`
    to meet the exact specification provided in the prompt. Feel free to update prompts
    to get specific HCL code recommendations from Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: JSON, YAML, and HCL code explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer offers a simple interface for achieving code explainability
    and optimization and supports AWS CloudFormation scripts with JSON and YAML templates
    and Terraform HCL. For more details on explainability and optimization, please
    refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate, I am going to use the code that was auto-generated during the
    AWS CloudFormation JSON creation task. As shown in the following screenshot, highlight
    the code, right-click to open the pop-up menu, select **Amazon Q**, and choose
    **Explain** for code explainability or **Optimize** for optimization recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – JSON, YAML, and HCL – Amazon Q explainability and optimization](img/B21378_09_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – JSON, YAML, and HCL – Amazon Q explainability and optimization
  prefs: []
  type: TYPE_NORMAL
- en: This will pop up Amazon Q Developer’s chat-style interface and move the full
    code for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'For explainability, Amazon Q Developer recognizes two distinct templates and
    segregates each block accordingly, offering detailed information that can be utilized
    for documentation and understanding resource specifications. For instance, Amazon
    Q Developer provided the following details for the S3 bucket section: “**This
    template defines a single resource named MyTestBucket of type AWS::S3::Bucket.
    The Properties section specifies the properties for the S3 bucket resource. In
    this case, it sets the BucketName property to “MyTestBucket”, which will be the
    name of the S3** **bucket created**”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For optimization, Amazon Q Developer recommended several additional properties
    to enhance the security, functionality, and organizational structure of the CloudFormation
    templates, while maintaining their core purpose of creating an S3 bucket and a
    VPC. Here are some key enhancements suggested: “**Enable S3 Bucket Encryption:
    Implement server-side encryption with AES256 for enhanced data security, Configure
    VPC DNS Support: Enable EnableDnsHostnames and EnableDnsSupport to ensure proper
    DNS resolution within the VPC, Set VPC Instance Tenancy: Set the tenancy to default,
    which is recommended for most use cases, and Implement Tagging: Add tags to resources
    for improved identification and** **organization purposes**”.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Amazon Q Developer generated an updated end-to-end script incorporating
    all the preceding changes, which you can add directly by clicking the **Insert
    at** **cursor** button.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to JSON, YAML, and HCL for IaC, Amazon Q Developer supports **AWS
    Cloud Development Kit** (**CDK**) (TypeScript and Python), and multiple other
    programming languages. There are many enhancements happening in this area, and
    we anticipate further enhancements in support for additional languages (check
    the *References* section at the end of the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON, YAML, and HCL with AWS CloudFormation and Terraform, enhanced by Amazon
    Q Developer, revolutionize modern infrastructure management through IaC. These
    tools automate deployment workflows, ensuring consistency and adherence to best
    practices, while also providing educational resources to facilitate learning and
    adoption. This comprehensive approach empowers organizations to achieve enhanced
    agility, reliability, and scalability in their cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated in this chapter, the integration of Amazon Q Developer with AWS
    CloudFormation and Terraform to generate JSON, YAML, and HCL code can significantly
    enhance the efficiency and innovation of infrastructure provisioning and management.
    By leveraging Amazon Q Developer’s capabilities, teams can streamline the development
    of IaC templates, optimize resource utilization, and expedite deployment cycles.
    This not only reduces manual effort but also minimizes the risk of errors during
    infrastructure updates and scaling operations. Furthermore, Amazon Q Developer
    provides insights into advanced configurations and offers recommendations for
    optimizing infrastructure designs. This enables organizations to implement robust,
    scalable architectures that meet evolving business needs effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the synergy between Amazon Q Developer, JSON, YAML, and HCL with
    AWS CloudFormation and Terraform empowers enterprises to achieve operational excellence
    in cloud operations, driving continuous improvement and innovation in their IT
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how you can use the Amazon Q Developer
    Customizations feature to allow code suggestions that align with the team’s internal
    libraries, proprietary algorithmic techniques, and enterprise code style.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Terraform Extension for Visual Studio Code: [https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 3:Advanced Assistant Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will explore some of the advanced features of Amazon Q Developer
    that enhance developer productivity by providing capabilities beyond the basic
    auto-code generation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B21378_10.xhtml#_idTextAnchor159), *Customizing Code Recommendations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21378_11.xhtml#_idTextAnchor174), *Understanding Code References*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21378_12.xhtml#_idTextAnchor181), *Simplifying Code Explanation,
    Optimization, Transformation, and Feature Development*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21378_13.xhtml#_idTextAnchor197), *Simplifying Scanning and
    Fixing Security Vulnerabilities in Code*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
