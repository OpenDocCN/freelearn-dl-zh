- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Boost Coding Efficiency for JSON, YAML, and HCL with Auto-Code Generation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过自动代码生成提高 JSON、YAML 和 HCL 的编码效率
- en: 'In this chapter, we will look at the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: An overview of **Infrastructure as Code** (**IaC**) languages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（IaC）语言的概述'
- en: JSON and YAML auto-code generation for AWS CloudFormation using Amazon Q Developer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 为 AWS CloudFormation 自动生成 JSON 和 YAML 代码
- en: HCL auto-code generation for Terraform using Amazon Q Developer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 为 Terraform 自动生成 HCL 代码
- en: JSON, YAML, and HCL code explainability and optimization using Amazon Q Developer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 进行 JSON、YAML 和 HCL 代码的可解释性和优化
- en: 'In the previous chapter, we explored the **command-line interface** (**CLI**)
    and shell scripting using two user personas: system administrators and shell script
    programmers. We introduced how auto-code generation through Amazon Q Developer
    can assist these professionals. Using the Amazon Q Developer CLI, we demonstrated
    how to achieve various administrative tasks such as disk space management, user
    management, process management, library management, and more. Additionally, we
    generated an end-to-end shell script utilizing chain-of-thought prompts, single-line
    prompts, and multi-line prompt techniques.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过两个用户角色：系统管理员和 shell 脚本程序员，探讨了命令行界面（CLI）和 shell 脚本。我们介绍了如何通过 Amazon
    Q Developer 的自动代码生成功能协助这些专业人士。使用 Amazon Q Developer CLI，我们演示了如何完成各种管理任务，如磁盘空间管理、用户管理、进程管理、库管理等等。此外，我们还利用思维链提示、单行提示和多行提示技术生成了一个端到端的
    shell 脚本。
- en: In this chapter, we will explore different categories of programming languages
    associated with IaC. In IaC, the programming languages are tightly coupled with
    the tools or services used. Firstly, we will focus on JSON and YAML, which are
    used by the AWS CloudFormation service. Then, we will explore HCL, which is used
    by Terraform. We will introduce how auto-code generation through Amazon Q Developer
    can help understand the basics, learn the syntax, and automatically generate code
    using JSON, YAML, and HCL. Then, we will explore code explainability to support
    documentation and code optimization recommendations provided by Amazon Q Developer
    for IaC programmers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨与 IaC 相关的不同编程语言类别。在 IaC 中，编程语言与使用的工具或服务紧密耦合。首先，我们将关注 JSON 和 YAML，它们由
    AWS CloudFormation 服务使用。然后，我们将探索 HCL，它由 Terraform 使用。我们将介绍如何通过 Amazon Q Developer
    的自动代码生成功能帮助理解基础知识、学习语法以及使用 JSON、YAML 和 HCL 自动生成代码。然后，我们将探讨代码可解释性，以支持 Amazon Q
    Developer 为 IaC 程序员提供的文档和代码优化建议。
- en: Overview of IaC languages
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IaC 语言的概述
- en: In today’s cloud computing landscape, IaC has emerged as a fundamental paradigm
    shift in managing and provisioning infrastructure. AWS CloudFormation and Terraform
    are two leading IaC tools that enable developers and system administrators to
    define and manage cloud resources programmatically, treating infrastructure as
    software.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的云计算领域，基础设施即代码（IaC）已成为管理和提供基础设施的基本范式转变。AWS CloudFormation 和 Terraform 是两款领先的
    IaC 工具，它们使开发人员和系统管理员能够以编程方式定义和管理云资源，将基础设施视为软件。
- en: AWS CloudFormation simplifies the provisioning and management of AWS resources
    using declarative JSON or YAML templates. These templates define the configuration
    and interdependencies of AWS services, enabling users to provision multiple resources
    predictably and repeatably. CloudFormation automates the creation, updating, and
    deletion of infrastructure stacks, ensuring consistency and reducing the risk
    of manual errors in resource provisioning.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation 通过声明性 JSON 或 YAML 模板简化了 AWS 资源的提供和管理。这些模板定义了 AWS 服务的配置和相互依赖关系，使用户能够可预测和可重复地提供多个资源。CloudFormation
    自动创建、更新和删除基础设施堆栈，确保一致性并降低资源提供中手动错误的几率。
- en: Terraform, developed by HashiCorp, takes a broader approach by supporting multiple
    cloud providers (including AWS, Azure, and Google Cloud Platform) and on-premises
    infrastructure. It uses a declarative language called **HashiCorp Configuration
    Language** (**HCL**) to define infrastructure as code. Terraform’s state management
    capabilities allow it to plan and execute changes to infrastructure with minimal
    downtime and manage complex dependencies between resources across different providers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform，由HashiCorp开发，采用更广泛的方法，支持多个云服务提供商（包括AWS、Azure和Google Cloud Platform）以及本地基础设施。它使用一种名为**HashiCorp配置语言**（**HCL**）的声明性语言来定义基础设施代码。Terraform的状态管理功能允许它在最小停机时间内规划和执行对基础设施的更改，并管理不同提供商之间资源的复杂依赖关系。
- en: Both AWS CloudFormation and Terraform play critical roles in enabling organizations
    to achieve IaC principles, including versioning, automation, and scalability.
    They facilitate collaborative development practices, integrate with CI/CD pipelines,
    and enable the management of infrastructure configurations as code repositories.
    IaC developers can leverage various prompt techniques and chat-style integration
    with Amazon Q Developer to enhance AWS CloudFormation and Terraform capabilities
    in several key areas. Amazon Q Developer automates the generation of AWS CloudFormation
    templates and Terraform configurations based on specific infrastructure requirements.
    Using natural language processing and chat-style interactions, developers can
    specify infrastructure needs and receive generated code that adheres to best practices
    and architectural guidelines. Beyond basic template generation, Amazon Q Developer
    offers optimization suggestions and enforces best practices for AWS CloudFormation
    and Terraform configurations. It analyzes generated code, identifies potential
    performance bottlenecks or security vulnerabilities, and provides recommendations
    to optimize infrastructure deployments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation和Terraform在帮助组织实现IaC（基础设施即代码）原则方面发挥着关键作用，包括版本控制、自动化和可扩展性。它们促进了协作开发实践，与CI/CD管道集成，并允许将基础设施配置作为代码存储库进行管理。IaC开发人员可以利用Amazon
    Q Developer的各种提示技术和聊天式集成，在几个关键领域增强AWS CloudFormation和Terraform的功能。Amazon Q Developer根据特定的基础设施需求自动生成AWS
    CloudFormation模板和Terraform配置。通过自然语言处理和聊天式交互，开发人员可以指定基础设施需求，并接收符合最佳实践和架构指南的生成代码。除了基本的模板生成之外，Amazon
    Q Developer还提供优化建议，并强制执行AWS CloudFormation和Terraform配置的最佳实践。它分析生成的代码，识别潜在的性能瓶颈或安全漏洞，并提供优化基础设施部署的建议。
- en: Moreover, Amazon Q Developer serves as an educational resource for learning
    IaC principles and mastering AWS CloudFormation and Terraform. It offers interactive
    tutorials, explanations of IaC concepts, and practical examples through its intuitive
    interface. This educational aspect helps developers and system administrators
    improve their proficiency in efficiently and securely managing cloud resources.
    Additionally, by integrating Amazon Q Developer with AWS CloudFormation and Terraform,
    teams benefit from standardized templates, shared infrastructure configurations,
    and streamlined code review processes. This integration enhances collaboration
    between development, operations, and security teams, ensuring that infrastructure
    changes are implemented consistently and securely. As cloud environments evolve,
    Amazon Q Developer continuously updates its recommendations and capabilities to
    align with the latest best practices and architectural patterns in AWS CloudFormation
    and Terraform. This ensures that organizations can leverage cutting-edge infrastructure
    management techniques and maintain operational excellence in cloud deployments.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Amazon Q Developer作为学习IaC（基础设施即代码）原则和掌握AWS CloudFormation和Terraform的教育资源。它通过直观的界面提供交互式教程、IaC概念的说明和实际示例。这一教育方面有助于开发人员和系统管理员提高他们在高效和安全地管理云资源方面的熟练程度。此外，通过将Amazon
    Q Developer与AWS CloudFormation和Terraform集成，团队可以受益于标准化的模板、共享的基础设施配置和简化的代码审查流程。这种集成增强了开发、运维和安全团队之间的协作，确保基础设施更改的一致性和安全性。随着云环境的发展，Amazon
    Q Developer持续更新其推荐和功能，以与AWS CloudFormation和Terraform的最新最佳实践和架构模式保持一致。这确保了组织可以利用最尖端的设施管理技术，并在云部署中保持运营卓越。
- en: Let’s dive deep to see how Amazon Q Developer can help an IaC developer. To
    illustrate, I am going to use the Amazon Q Developer interface with VS Code (refer
    to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022) for configuration steps for
    Amazon Q Developer with VS Code). Additionally, for information on the Terraform
    Extension for Visual Studio Code, please refer to the *References* section at
    the end of the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨，看看 Amazon Q Developer 如何帮助一位 IaC 开发者。为了说明，我将使用带有 VS Code 的 Amazon Q
    Developer 界面（有关 Amazon Q Developer 与 VS Code 配置的步骤，请参阅[*第 2 章*](B21378_02.xhtml#_idTextAnchor022)）。此外，有关
    Visual Studio Code 的 Terraform 扩展的信息，请参阅本章末尾的“参考文献”部分。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Amazon Q Developer uses LLMs, which, by nature, are non-deterministic, so you
    may not get exactly the same answers/code blocks shown in the code snapshots;
    try to update prompts to get desired recommendations. However, logically, the
    generated answer/code should meet the requirements.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q Developer 使用 LLMs，其本质是非确定性的，因此您可能不会得到与代码快照中显示的完全相同的答案/代码块；尝试更新提示以获取所需的建议。然而，从逻辑上讲，生成的答案/代码应满足要求。
- en: JSON and YAML auto-code generation for AWS CloudFormation using Amazon Q Developer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 为 AWS CloudFormation 自动生成 JSON 和 YAML 代码
- en: Similar to the previous chapter, let’s assume that a new IaC developer plans
    to work with JSON and YAML coding to build infrastructure on the AWS cloud using
    AWS CloudFormation but lacks background knowledge about this service. We will
    use Amazon Q Developer’s chat-style interface to educate IaC developers. They
    can simply ask questions in natural language to learn about AWS CloudFormation
    and its support for JSON and YAML.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章类似，让我们假设一位新的 IaC 开发者计划使用 JSON 和 YAML 编码在 AWS 云上使用 AWS CloudFormation 构建基础设施，但缺乏对该服务的背景知识。我们将使用
    Amazon Q Developer 的聊天式界面来教育 IaC 开发者。他们可以简单地用自然语言提问，以了解 AWS CloudFormation 及其对
    JSON 和 YAML 的支持。
- en: AWS CloudFormation basics
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS CloudFormation 基础
- en: 'Let’s first learn about AWS CloudFormation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解 AWS CloudFormation：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 9.1 – Prompt – IaC AWS CloudFormation basic](img/B21378_09_1.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 提示 – IaC AWS CloudFormation 基础](img/B21378_09_1.jpg)'
- en: Figure 9.1 – Prompt – IaC AWS CloudFormation basic
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 提示 – IaC AWS CloudFormation 基础
- en: 'Amazon Q Developer provided an overview of the AWS CloudFormation service:
    “**AWS CloudFormation is a service provided by Amazon Web Services (AWS) that
    allows you to model and provision a collection of related AWS and third-party
    resources using templates. It enables you to define and manage your infrastructure
    as code, making it easier to create, update, and delete resources in a consistent
    and** **repeatable manner****”****.**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q Developer 提供了 AWS CloudFormation 服务的概述：“**AWS CloudFormation 是由 Amazon
    Web Services (AWS) 提供的一项服务，允许您使用模板来建模和部署一组相关的 AWS 和第三方资源。它使您能够以代码的形式定义和管理您的基础设施，从而更容易以一致和可重复的方式创建、更新和删除资源**。”
- en: Additionally, Amazon Q Developer listed some AWS resources that can be provisioned
    using AWS CloudFormation. Then, it provided the key features of AWS CloudFormation,
    including IaC, automated provisioning, resource orchestration, reusability and
    modularity, change management, rollback, and deletion. Furthermore, it highlighted
    the use of JSON and YAML templates as common programming mechanisms.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Amazon Q Developer 列出了一些可以使用 AWS CloudFormation 部署的 AWS 资源。然后，它提供了 AWS CloudFormation
    的关键特性，包括基础设施即代码 (IaC)、自动化部署、资源编排、可重用性和模块化、变更管理、回滚和删除。此外，它还强调了使用 JSON 和 YAML 模板作为常见的编程机制。
- en: 'So, now, let’s ask Amazon Q Developer to provide more information about the
    AWS resources supported by AWS CloudFormation using JSON and YAML templates:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在，让我们让 Amazon Q Developer 提供更多关于 AWS CloudFormation 支持的 AWS 资源的信息，使用 JSON
    和 YAML 模板：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 9.2 – Prompt – IaC AWS CloudFormation AWS resources](img/B21378_09_2.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 提示 – IaC AWS CloudFormation AWS 资源](img/B21378_09_2.jpg)'
- en: Figure 9.2 – Prompt – IaC AWS CloudFormation AWS resources
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 提示 – IaC AWS CloudFormation AWS 资源
- en: As you can see in the preceding screenshot, Amazon Q Developer gave a well-formatted
    answer with specifications related to categories of resources such as compute,
    networking, storage, databases, analytics, security, application services, and
    management, and sample resources from each of those categories that are supported
    by AWS CloudFormation using JSON and YAML.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，Amazon Q Developer 提供了一个格式良好的答案，其中包含与计算、网络、存储、数据库、分析、安全、应用服务和管理等资源类别相关的规格，以及
    AWS CloudFormation 支持的每个类别的示例资源（使用 JSON 和 YAML）。
- en: JSON auto-code generation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON 自动代码生成
- en: Based on the previous information, an IaC developer now understands the support
    provided by AWS CloudFormation for provisioning resources using JSON. As the next
    step, let’s begin writing a JSON template for AWS CloudFormation to create a simple
    AWS resource.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的信息，一个IaC（基础设施即代码）开发者现在理解了AWS CloudFormation在JSON中配置资源所提供支持。作为下一步，让我们开始编写AWS
    CloudFormation的JSON模板以创建一个简单的AWS资源。
- en: 'Let’s ask Amazon Q Developer to create JSON code for a commonly requested AWS
    resource such as an S3 bucket from a storage resource and a networking component
    such as VPC. For customization, use the specific S3 bucket name, VPC name, and
    the CIDR block as `10.0.0.0/16`. We will use prompts to do the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们要求Amazon Q Developer从一个存储资源（如S3存储桶）和一个网络组件（如VPC）创建一个常用请求的AWS资源（如S3存储桶）的JSON代码。为了定制，使用特定的S3存储桶名称、VPC名称和CIDR块`10.0.0.0/16`。我们将使用提示来完成以下操作：
- en: Create an AWS CloudFormation JSON template to create an S3 bucket named `"MyTestBucket"`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`"MyTestBucket"`的S3存储桶的AWS CloudFormation JSON模板。
- en: Create an AWS CloudFormation JSON template to create a `"MyTestVPC"` VPC with
    a CIDR block of `10.0.0.0/16`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个AWS CloudFormation JSON模板，以创建一个CIDR块为`10.0.0.0/16`的`"MyTestVPC"` VPC。
- en: 'To illustrate, I will use the VS Code script editor integrated with Amazon
    Q Developer. As these are relatively easy requirements, let’s use single-line
    prompts for each of the preceding resources:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我将使用与Amazon Q Developer集成的VS Code脚本编辑器。由于这些要求相对简单，让我们为前面提到的每个资源使用单行提示：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure 9.3 – Prompt – IaC AWS CloudFormation JSON, S3 and VPC](img/B21378_09_3.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 提示 – IaC AWS CloudFormation JSON，S3和VPC](img/B21378_09_3.jpg)'
- en: Figure 9.3 – Prompt – IaC AWS CloudFormation JSON, S3 and VPC
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 提示 – IaC AWS CloudFormation JSON，S3和VPC
- en: As you can see in the preceding screenshot, Amazon Q Developer provided the
    correct end-to-end JSON template syntax for S3 and VPC. It used specific keywords
    supported by AWS CloudFormation to provision these resources, such as `"AWS::S3::Bucket"`
    and `"AWS::EC2::VPC"`, which combine the resource type and the corresponding parent
    service name. Additionally, it used the required properties to meet our requirements,
    such as `"BucketName"` set to `"MyTestBucket"` and `"CidrBlock"` with the value
    `"10.0.0.0/16"`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，Amazon Q Developer为S3和VPC提供了正确的端到端JSON模板语法。它使用了AWS CloudFormation支持的特定关键字来配置这些资源，例如`"AWS::S3::Bucket"`和`"AWS::EC2::VPC"`，这些关键字结合了资源类型和相应的父服务名称。此外，它还使用了满足我们要求的必需属性，例如将`"BucketName"`设置为`"MyTestBucket"`和将`"CidrBlock"`的值设置为`"10.0.0.0/16"`。
- en: YAML auto-code generation
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAML自动代码生成
- en: YAML is another language supported by AWS CloudFormation for provisioning resources.
    As the next step, let’s begin writing a YAML template for AWS CloudFormation to
    create a simple AWS resource. We’ll use the same requirements for the Amazon S3
    bucket and VPC creation as we did for the JSON template. Now, let’s modify our
    prompts to instruct Amazon Q Developer to generate a YAML template.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: YAML是AWS CloudFormation支持用于配置资源的另一种语言。作为下一步，让我们开始编写AWS CloudFormation的YAML模板以创建一个简单的AWS资源。我们将使用与JSON模板相同的创建Amazon
    S3存储桶和VPC的要求。现在，让我们修改我们的提示以指示Amazon Q Developer生成一个YAML模板。
- en: 'Similar to the previous example, I will use the VS Code script editor integrated
    with Amazon Q Developer and utilize single-line prompts for each of these resources:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个示例类似，我将使用与Amazon Q Developer集成的VS Code脚本编辑器，并为这些资源中的每一个使用单行提示：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 9.4 – Prompt – IaC AWS CloudFormation YAML, S3 and VPC](img/B21378_09_4.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 提示 – IaC AWS CloudFormation YAML，S3和VPC](img/B21378_09_4.jpg)'
- en: Figure 9.4 – Prompt – IaC AWS CloudFormation YAML, S3 and VPC
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 提示 – IaC AWS CloudFormation YAML，S3和VPC
- en: Notice in the preceding screenshot that Amazon Q Developer created an end-to-end
    YAML script for S3 and the VPC. It used specific keywords supported by AWS CloudFormation
    to provision these resources, such as `AWS::S3::Bucket` and `AWS::EC2::VPC`, which
    combine the resource type and the corresponding parent service name. Additionally,
    it used the required properties to meet our requirements, such as `BucketName`
    set to `mytestbucket` and `CidrBlock` with the value `10.0.0.0/16`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在前面的屏幕截图中，Amazon Q Developer为S3和VPC创建了一个端到端的YAML脚本。它使用了AWS CloudFormation支持的特定关键字来配置这些资源，例如`AWS::S3::Bucket`和`AWS::EC2::VPC`，这些关键字结合了资源类型和相应的父服务名称。此外，它还使用了满足我们要求的必需属性，例如将`BucketName`设置为`mytestbucket`和将`CidrBlock`的值设置为`10.0.0.0/16`。
- en: If you compare the YAML template screenshot (*Figure 9**.4*) with the JSON template
    screenshot (*Figure 9**.3*), you will notice that Amazon Q Developer included
    additional properties in the YAML version. Due to the non-deterministic nature
    of LLMs, Amazon Q Developer may add extra properties. However, it always includes
    the necessary properties to meet your requirements. If desired, you can adjust
    the prompts to add further requirements and receive recommendations with additional
    properties.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将 YAML 模板截图（*图 9**.4*）与 JSON 模板截图（*图 9**.3*）进行比较，您会注意到 Amazon Q Developer
    在 YAML 版本中包含了额外的属性。由于 LLM 的非确定性特性，Amazon Q Developer 可能会添加额外的属性。然而，它始终包含满足您需求的必要属性。如果您希望，您可以调整提示以添加更多要求，并接收包含额外属性的推荐。
- en: We will revisit the JSON template in the *JSON, YAML, and HCL code explainability
    and optimization using Amazon Q Developer* section to review additional recommendations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 *使用 Amazon Q Developer 进行 JSON、YAML 和 HCL 代码可解释性和优化* 部分重新审视 JSON 模板，以审查额外的建议。
- en: HCL auto-code generation for Terraform using Amazon Q Developer
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 自动生成 Terraform 的 HCL 代码
- en: We’ll follow the theme to start with a basic knowledge of the language in this
    section, too. I’ll first assume the persona of a new IaC developer who is planning
    to work with HCL by Terraform and does not have any background with the tool.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中也遵循主题，从对语言的基本知识开始。我将首先扮演一个新 IaC 开发者的角色，他计划通过 Terraform 使用 HCL，并且对该工具没有任何背景知识。
- en: Terraform basics
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Terraform 基础知识
- en: Let’s use Amazon Q Developer’s chat-style interface to educate IaC developers,
    where they can simply ask questions in natural language to learn about Terraform.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Amazon Q Developer 的聊天式界面来教育 IaC 开发者，他们可以简单地用自然语言提问来学习 Terraform。
- en: 'Let’s first learn about Terraform from Amazon Q Developer:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从 Amazon Q Developer 那里了解 Terraform：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 9.5 – Prompt – IaC Terraform basic partial screenshot](img/B21378_09_5.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5 – 提示 – IaC Terraform 基本部分截图](img/B21378_09_5.jpg)'
- en: Figure 9.5 – Prompt – IaC Terraform basic partial screenshot
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 提示 – IaC Terraform 基本部分截图
- en: 'As you can see in the preceding partial screenshot, Amazon Q Developer provided
    basic information: “**Terraform is an open-source infrastructure as code (IaC)
    tool created by HashiCorp. It is used for provisioning and managing cloud infrastructure
    resources across multiple cloud providers**”. Then, it listed the use cases and
    features supported by Terraform such as infrastructure provisioning, IaC, multi-cloud
    support, resource lifecycle management, state management, dependency handling,
    and more.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的部分截图中所见，Amazon Q Developer 提供了基本信息：“**Terraform 是由 HashiCorp 创建的开源基础设施即代码
    (IaC) 工具。它用于跨多个云提供商部署和管理云基础设施资源**”。然后，它列出了 Terraform 支持的使用案例和功能，如基础设施部署、IaC、多云支持、资源生命周期管理、状态管理、依赖处理等。
- en: Now, based on the information from Amazon Q Developer’s answer, as an IaC developer,
    we understand that it used HCL to create resources across multiple cloud providers
    and on-premises, including AWS resources such as EC2 instances, VPCs, RDS databases,
    and more.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据 Amazon Q Developer 的回答信息，作为一个 IaC 开发者，我们了解到它使用了 HCL 在多个云提供商和本地创建资源，包括
    AWS 资源，如 EC2 实例、VPC、RDS 数据库等。
- en: 'Let’s now ask Amazon Q Developer to list the different AWS resources that are
    supported by HCL:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们让 Amazon Q Developer 列出 HCL 支持的不同 AWS 资源：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure 9.6 – Prompt – IaC Terraform AWS resources](img/B21378_09_6.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – 提示 – IaC Terraform AWS 资源](img/B21378_09_6.jpg)'
- en: Figure 9.6 – Prompt – IaC Terraform AWS resources
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 提示 – IaC Terraform AWS 资源
- en: Notice that Amazon Q Developer provided a categorized list including compute,
    networking, storage, databases, analytics, security, application services, and
    management, and sample resources within each category supported by Terraform HCL.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 Amazon Q Developer 提供了一个包括计算、网络、存储、数据库、分析、安全、应用服务和管理等类别的分类列表，以及每个类别中 Terraform
    HCL 支持的示例资源。
- en: HCL auto-code generation
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HCL 自动代码生成
- en: Based on the preceding basic information from Amazon Q Developer, HCL is the
    language supported by Terraform to provision multiple AWS cloud resources including
    Amazon S3 buckets and VPCs. As the next step, let’s use the same requirements
    for the S3 bucket and VPC creation as we used in the previous section on AWS CloudFormation
    with JSON.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Amazon Q Developer提供的先前基本信息，HCL 是 Terraform 支持的语言，用于部署多个 AWS 云资源，包括 Amazon
    S3 存储桶和 VPC。作为下一步，我们将使用与上一节中 AWS CloudFormation 使用 JSON 相同的要求来创建 S3 存储桶和 VPC。
- en: 'Now, let’s modify our prompts to instruct Amazon Q Developer to generate an
    HCL template. Similar to the previous example, I will use the VS Code script editor
    integrated with Amazon Q Developer and utilize single-line prompts for each of
    these resources:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改我们的提示以指示亚马逊Q开发者生成一个HCL模板。类似于前面的例子，我将使用与亚马逊Q开发者集成的VS Code脚本编辑器，并为这些资源中的每一个使用单行提示：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 9.7 – Prompt – IaC Terraform HCL, S3 and VPC](img/B21378_09_7.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – 提示 – IaC Terraform HCL，S3和VPC](img/B21378_09_7.jpg)'
- en: Figure 9.7 – Prompt – IaC Terraform HCL, S3 and VPC
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – 提示 – IaC Terraform HCL，S3和VPC
- en: Observe that the HCL end-to-end code provided by Amazon Q Developer used Terraform
    modules and corresponding required properties. It used `resource "aws_s3_bucket"`,
    `resource "aws_vpc"`, `bucket = "MyTestBucket"`, and `cidr_block = "10.0.0.0/16"`
    to meet the exact specification provided in the prompt. Feel free to update prompts
    to get specific HCL code recommendations from Amazon Q Developer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到亚马逊Q开发者提供的端到端HCL代码使用了Terraform模块和相应的必需属性。它使用了`resource "aws_s3_bucket"`、`resource
    "aws_vpc"`、`bucket = "MyTestBucket"`和`cidr_block = "10.0.0.0/16"`来满足提示中提供的精确规范。您可以自由地更新提示以从亚马逊Q开发者获取具体的HCL代码建议。
- en: JSON, YAML, and HCL code explainability and optimization using Amazon Q Developer
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用亚马逊Q开发者进行JSON、YAML和HCL代码的可解释性和优化
- en: Amazon Q Developer offers a simple interface for achieving code explainability
    and optimization and supports AWS CloudFormation scripts with JSON and YAML templates
    and Terraform HCL. For more details on explainability and optimization, please
    refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Q开发者提供了一个简单的界面来实现代码的可解释性和优化，并支持带有JSON和YAML模板以及Terraform HCL的AWS CloudFormation脚本。有关可解释性和优化的更多详细信息，请参阅[*第12章*](B21378_12.xhtml#_idTextAnchor181)。
- en: To illustrate, I am going to use the code that was auto-generated during the
    AWS CloudFormation JSON creation task. As shown in the following screenshot, highlight
    the code, right-click to open the pop-up menu, select **Amazon Q**, and choose
    **Explain** for code explainability or **Optimize** for optimization recommendations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我将使用在AWS CloudFormation JSON创建任务期间自动生成的代码。如图下所示，突出显示代码，右键单击以打开弹出菜单，选择**亚马逊Q**，然后选择**解释**以进行代码可解释性或**优化**以获取优化建议。
- en: '![Figure 9.8 – JSON, YAML, and HCL – Amazon Q explainability and optimization](img/B21378_09_8.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8 – JSON、YAML和HCL – 亚马逊Q的可解释性和优化](img/B21378_09_8.jpg)'
- en: Figure 9.8 – JSON, YAML, and HCL – Amazon Q explainability and optimization
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – JSON、YAML和HCL – 亚马逊Q的可解释性和优化
- en: This will pop up Amazon Q Developer’s chat-style interface and move the full
    code for analysis.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出亚马逊Q开发者的聊天风格界面，并将用于分析的完整代码移动到该界面。
- en: 'For explainability, Amazon Q Developer recognizes two distinct templates and
    segregates each block accordingly, offering detailed information that can be utilized
    for documentation and understanding resource specifications. For instance, Amazon
    Q Developer provided the following details for the S3 bucket section: “**This
    template defines a single resource named MyTestBucket of type AWS::S3::Bucket.
    The Properties section specifies the properties for the S3 bucket resource. In
    this case, it sets the BucketName property to “MyTestBucket”, which will be the
    name of the S3** **bucket created**”.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可解释性，亚马逊Q开发者识别出两个不同的模板，并相应地隔离每个块，提供可用于文档和了解资源规范的相关详细信息。例如，亚马逊Q开发者为S3存储桶部分提供了以下详细信息：“**此模板定义了一个名为MyTestBucket的单个资源，类型为AWS::S3::Bucket。属性部分指定了S3存储桶资源的属性。在这种情况下，它将BucketName属性设置为“MyTestBucket”，这将成为创建的S3**
    **存储桶的名称**”。
- en: 'For optimization, Amazon Q Developer recommended several additional properties
    to enhance the security, functionality, and organizational structure of the CloudFormation
    templates, while maintaining their core purpose of creating an S3 bucket and a
    VPC. Here are some key enhancements suggested: “**Enable S3 Bucket Encryption:
    Implement server-side encryption with AES256 for enhanced data security, Configure
    VPC DNS Support: Enable EnableDnsHostnames and EnableDnsSupport to ensure proper
    DNS resolution within the VPC, Set VPC Instance Tenancy: Set the tenancy to default,
    which is recommended for most use cases, and Implement Tagging: Add tags to resources
    for improved identification and** **organization purposes**”.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化，Amazon Q 开发者推荐了几个额外的属性来增强 CloudFormation 模板的安保性、功能性和组织结构，同时保持其核心目的，即创建一个
    S3 存储桶和一个 VPC。以下是一些建议的关键增强功能：“**启用 S3 存储桶加密：通过 AES256 服务器端加密增强数据安全，配置 VPC DNS
    支持：启用 EnableDnsHostnames 和 EnableDnsSupport 以确保 VPC 内的 DNS 正确解析，设置 VPC 实例租户：将租户设置为默认，这对于大多数用例是推荐的，并实施标签：为资源添加标签以改善识别和组织目的**”。
- en: Additionally, Amazon Q Developer generated an updated end-to-end script incorporating
    all the preceding changes, which you can add directly by clicking the **Insert
    at** **cursor** button.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Amazon Q 开发者生成了一个包含所有先前更改的更新后的端到端脚本，您可以直接通过点击 **插入到** **光标** 按钮来添加。
- en: In addition to JSON, YAML, and HCL for IaC, Amazon Q Developer supports **AWS
    Cloud Development Kit** (**CDK**) (TypeScript and Python), and multiple other
    programming languages. There are many enhancements happening in this area, and
    we anticipate further enhancements in support for additional languages (check
    the *References* section at the end of the chapter).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 JSON、YAML 和 HCL 用于 IaC 之外，Amazon Q 开发者还支持 **AWS Cloud Development Kit** (**CDK**)（TypeScript
    和 Python），以及多种其他编程语言。这一领域正在进行许多增强，我们预计将支持更多语言的进一步增强（请参阅本章末尾的 *参考文献* 部分）。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: JSON, YAML, and HCL with AWS CloudFormation and Terraform, enhanced by Amazon
    Q Developer, revolutionize modern infrastructure management through IaC. These
    tools automate deployment workflows, ensuring consistency and adherence to best
    practices, while also providing educational resources to facilitate learning and
    adoption. This comprehensive approach empowers organizations to achieve enhanced
    agility, reliability, and scalability in their cloud environments.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Amazon Q 开发者增强的 JSON、YAML 和 HCL 与 AWS CloudFormation 和 Terraform，通过 IaC 革命性地改变了现代基础设施管理。这些工具自动化了部署工作流程，确保了一致性和遵循最佳实践，同时提供了教育资源以促进学习和采用。这种全面的方法使组织能够在其云环境中实现更高的敏捷性、可靠性和可扩展性。
- en: As illustrated in this chapter, the integration of Amazon Q Developer with AWS
    CloudFormation and Terraform to generate JSON, YAML, and HCL code can significantly
    enhance the efficiency and innovation of infrastructure provisioning and management.
    By leveraging Amazon Q Developer’s capabilities, teams can streamline the development
    of IaC templates, optimize resource utilization, and expedite deployment cycles.
    This not only reduces manual effort but also minimizes the risk of errors during
    infrastructure updates and scaling operations. Furthermore, Amazon Q Developer
    provides insights into advanced configurations and offers recommendations for
    optimizing infrastructure designs. This enables organizations to implement robust,
    scalable architectures that meet evolving business needs effectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章所示，Amazon Q 开发者与 AWS CloudFormation 和 Terraform 集成以生成 JSON、YAML 和 HCL 代码，可以显著提高基础设施供应和管理的高效性和创新性。通过利用
    Amazon Q 开发者的功能，团队能够简化 IaC 模板的开发，优化资源利用，并加快部署周期。这不仅减少了人工工作量，还最小化了在基础设施更新和扩展操作中出错的风险。此外，Amazon
    Q 开发者提供了对高级配置的见解，并就优化基础设施设计提供建议。这使得组织能够实施满足不断变化业务需求的强大、可扩展的架构。
- en: Ultimately, the synergy between Amazon Q Developer, JSON, YAML, and HCL with
    AWS CloudFormation and Terraform empowers enterprises to achieve operational excellence
    in cloud operations, driving continuous improvement and innovation in their IT
    environments.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Amazon Q 开发者、JSON、YAML 和 HCL 与 AWS CloudFormation 和 Terraform 之间的协同作用，使企业能够在云操作中实现卓越的运营，推动其
    IT 环境中的持续改进和创新。
- en: In the next chapter, we will look at how you can use the Amazon Q Developer
    Customizations feature to allow code suggestions that align with the team’s internal
    libraries, proprietary algorithmic techniques, and enterprise code style.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用Amazon Q Developer的自定义功能来允许代码建议与团队的内部库、专有算法技术和企业代码风格保持一致。
- en: References
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Terraform Extension for Visual Studio Code: [https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code的Terraform扩展：[https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform)
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IDE中支持Amazon Q Developer的语言：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)
- en: Part 3:Advanced Assistant Features
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分：高级助手功能
- en: In this part, we will explore some of the advanced features of Amazon Q Developer
    that enhance developer productivity by providing capabilities beyond the basic
    auto-code generation.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，我们将探讨Amazon Q Developer的一些高级功能，这些功能通过提供超出基本自动代码生成能力的功能来提高开发者的生产力。
- en: 'This part contains the following chapters:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 10*](B21378_10.xhtml#_idTextAnchor159), *Customizing Code Recommendations*'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B21378_10.xhtml#_idTextAnchor159), *自定义代码建议*'
- en: '[*Chapter 11*](B21378_11.xhtml#_idTextAnchor174), *Understanding Code References*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B21378_11.xhtml#_idTextAnchor174), *理解代码引用*'
- en: '[*Chapter 12*](B21378_12.xhtml#_idTextAnchor181), *Simplifying Code Explanation,
    Optimization, Transformation, and Feature Development*'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B21378_12.xhtml#_idTextAnchor181), *简化代码解释、优化、转换和功能开发*'
- en: '[*Chapter 13*](B21378_13.xhtml#_idTextAnchor197), *Simplifying Scanning and
    Fixing Security Vulnerabilities in Code*'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B21378_13.xhtml#_idTextAnchor197), *简化代码扫描和修复安全漏洞*'
