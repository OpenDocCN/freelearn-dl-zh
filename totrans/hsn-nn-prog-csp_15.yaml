- en: Object Detection with TensorFlowSharp
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TensorFlowSharp 进行对象检测
- en: In this chapter, we are going to introduce you to an open source package called
    TensorFlowSharp. More specifically, we will be using the TensorFlow[1] Object
    Detection API, which is an open source framework built on top of TensorFlow, which
    makes it easy to construct, train, and deploy various forms of object detection
    models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍一个名为 TensorFlowSharp 的开源软件包。更具体地说，我们将使用 TensorFlow[1] 对象检测 API，这是一个基于
    TensorFlow 的开源框架，它使得构建、训练和部署各种形式的对象检测模型变得容易。
- en: 'For those not familiar with TensorFlow, the following is an excerpt from the
    TensorFlow website[2]:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉 TensorFlow 的人来说，以下是从 TensorFlow 网站摘录的内容[2]：
- en: '"TensorFlow is an open source software library for high performance numerical
    computation. Its flexible architecture allows easy deployment of computation across
    a variety of platforms (such as CPUs, GPUs, and TPUs), and from desktops to clusters
    of servers to mobile and edge devices. Originally developed by researchers and
    engineers from the Google Brain team within Google''s AI organization, it comes
    with strong support for machine learning and deep learning and the flexible numerical
    computation core is used across many other scientific domains."'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '"TensorFlow 是一个用于高性能数值计算的开源软件库。其灵活的架构允许轻松地将计算部署到各种平台（如 CPU、GPU 和 TPU），从桌面到服务器集群，再到移动和边缘设备。最初由
    Google Brain 团队的研究人员和工程师在 Google 人工智能组织内部开发，它提供了强大的机器学习和深度学习支持，并且灵活的数值计算核心被广泛应用于许多其他科学领域。"'
- en: TensorFlowSharp provides .NET bindings to the TensorFlow library, which are
    published here in case you ever need them: [https://github.com/tensorflow/tensorflow](https://github.com/tensorflow/tensorflow).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlowSharp 为 TensorFlow 库提供了 .NET 绑定，这些绑定在此发布，以防您将来需要它们：[https://github.com/tensorflow/tensorflow](https://github.com/tensorflow/tensorflow)。
- en: 'The topics included in this chapter are as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下主题：
- en: Working with Tensors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用张量
- en: TensorFlowSharp
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlowSharp
- en: Developing your own TensorFlow application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发自己的 TensorFlow 应用程序
- en: Detecting images
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测图像
- en: Minimum score for object highlighting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象高亮的最小分数
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will be required to have a basic knowledge of .NET development using Microsoft
    Visual Studio and C#. You will need to download the code for this chapter from
    this book''s website: TensorFlowSharp ([https://github.com/migueldeicaza/TensorFlowSharp](https://github.com/migueldeicaza/TensorFlowSharp)).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要具备使用 Microsoft Visual Studio 和 C# 进行 .NET 开发的基本知识。您需要从本书的网站下载本章的代码：TensorFlowSharp
    ([https://github.com/migueldeicaza/TensorFlowSharp](https://github.com/migueldeicaza/TensorFlowSharp))。
- en: Check out the following video to see Code in Action: [http://bit.ly/2pqEiZ9](http://bit.ly/2pqEiZ9).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际应用：[http://bit.ly/2pqEiZ9](http://bit.ly/2pqEiZ9)。
- en: Working with Tensors
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用张量
- en: Let's set the stage by talking about exactly what a Tensor is. To do so, we
    should also talk a little bit about vectors and matrices as well. You can skip
    this section if you are already familiar, but it is short and if you already know
    about matrices and vectors, who knows, you might remember something you've forgotten!
    So go ahead and read it anyway!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过讨论张量究竟是什么来设定场景。为此，我们也应该稍微谈谈向量和矩阵。如果您已经熟悉这些，您可以跳过这一部分，但它是简短的，如果您已经了解矩阵和向量，谁知道呢，您可能会记得一些您已经忘记的东西！所以，无论如何，都请继续阅读！
- en: 'Now, before we talk, let me show you a graphic that may make things a tad easier
    to visualize:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们交谈之前，让我向您展示一个可能使事情更容易可视化的图形：
- en: '![](img/675f7f29-5fa7-4268-8de1-70d4d722e154.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/675f7f29-5fa7-4268-8de1-70d4d722e154.png)'
- en: 'A vector is an array of numbers, as you can see here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 向量是一个数字数组，正如您在这里可以看到的：
- en: '![](img/72e88d89-376d-4efe-a1a9-a0407314fe14.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/72e88d89-376d-4efe-a1a9-a0407314fe14.png)'
- en: 'A matrix is a grid of *n x m* numbers, a two-dimensional array. We can do all
    kinds of neat operations on a matrix, such as addition and subtraction, so long
    as the sizes are compatible:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵是一个 *n x m* 的数字网格，一个二维数组。只要大小兼容，我们可以在矩阵上执行各种操作，例如加法和减法：
- en: '![](img/67331aa6-3be7-4e38-86b0-61e5f3db8826.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/67331aa6-3be7-4e38-86b0-61e5f3db8826.png)'
- en: 'We can multiply matrices if we so desire, like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，我们可以相乘矩阵，如下所示：
- en: '![](img/d4ac0e9f-3907-417f-925c-ada51d5d6a8d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d4ac0e9f-3907-417f-925c-ada51d5d6a8d.png)'
- en: 'And matrices can be added together, like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 并且矩阵可以相加，如下所示：
- en: '![](img/9855310d-b3b7-46a2-b71f-d4d2f74b268e.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9855310d-b3b7-46a2-b71f-d4d2f74b268e.png)'
- en: In both cases, we are working within a two-dimensional space. So, what can we
    do if our requirement is to work out of an *n* dimensional space to where *n >
    2*? This where Tensors come in.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们都在二维空间内工作。那么，如果我们的需求是在一个*n*维空间（其中*n > 2*）内工作，我们该怎么办？这就是张量发挥作用的地方。
- en: A Tensor is basically a matrix but is not two-dimensional (although it could
    be). It could be a three-dimensional matrix (a vector is a tensor is a matrix)
    or some incredibly crazy dimension that we do not yet know how to visualize. And
    to show you how powerful Tensors really are, a tensor can be covariant in one
    dimension and contravariant in another. The dimension of a tensor is usually called
    its **rank**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 张量基本上是一个矩阵，但它不是二维的（尽管它可以是）。它可能是一个三维矩阵（向量是一个张量，也是一个矩阵）或者是我们尚未学会如何可视化的某些极其疯狂的维度。为了展示张量的真正强大之处，一个张量可以在一个维度上是协变的，而在另一个维度上是反变的。张量的维度通常被称为其**秩**。
- en: More formally, a tensor is really what is called a **mathematical entity**,
    which lives inside a structure and interacts with other entities inside that structure.
    If one of the entities gets transformed, the tensor must obey what is referred
    to as a **related transformation rule**. This is really what differentiates a
    matrix from a tensor. The tensor must allow the entities to shift around when
    transformations occur.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 更正式地说，张量实际上是被称为**数学实体**的东西，它存在于一个结构中，并与该结构内的其他实体相互作用。如果一个实体发生了变换，张量必须遵守所谓的**相关变换规则**。这正是矩阵与张量之间的区别。张量必须允许实体在变换发生时移动。
- en: 'Now that we''ve got that all squared away and under our belts, let''s look
    at how we can work with Tensors by walking through a bit of example code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经把所有这些都整理好了，让我们看看我们如何通过一些示例代码来处理张量：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice the variable type must match the cast in the `TFTensor`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意变量类型必须与`TFTensor`中的转换匹配：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We are going to do addition and multiplication:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要进行加法和乘法操作：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s add two Tensors together (this is the variable type cast mentioned previously):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们相加两个张量（这是之前提到的变量类型转换）：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let''s multiply two Tensors together:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来乘以两个张量：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: TensorFlowSharp
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlowSharp
- en: Now that we've talked about and shown you Tensors, let's look at how we would
    typically use the TensorFlowSharp API itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论并向您展示了张量之后，让我们看看我们通常会如何使用TensorFlowSharp API本身。
- en: 'Your application will typically create a graph (`TFGraph`), set up the operations
    there, then create a session from it (`TFSession`). This session will then use
    the session runner to set up inputs and outputs and execute the pipeline. Let''s
    look at a quick example of how that might flow:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序通常会创建一个图（`TFGraph`），在那里设置操作，然后从它创建一个会话（`TFSession`）。然后这个会话将使用会话运行器来设置输入和输出并执行管道。让我们看看一个快速示例，看看它可能如何流动：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Fetch the results from the output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中获取结果：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In scenarios where you do not need to set up the graph independently, the session
    will create one automatically for you. The following example shows how to use
    TensorFlow to compute the sum of two numbers. We will have the session automatically
    create the graph for us:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在您不需要独立设置图的情况下，会话会自动为您创建一个。以下示例显示了如何使用TensorFlow计算两个数字的和。我们将让会话自动为我们创建图：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add two constants:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 添加两个常数：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Multiply two constants:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 乘以两个常数：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Developing your own TensorFlow application
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发自己的TensorFlow应用程序
- en: Now that we've shown you some preliminary code samples, let's move on to our
    example project—how to use TensorFlowSharp from a console application to detect
    objects within an image. This code is easy enough for you to be able to add into
    your solution if you so desire. Just tweak the input and output names, perhaps
    allow for user adjusted hyperparameters, and you're off!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经向您展示了一些初步的代码示例，让我们继续我们的示例项目——如何从控制台应用程序中使用TensorFlowSharp检测图像中的对象。这段代码足够简单，您可以将其添加到您的解决方案中，如果您愿意的话。只需调整输入和输出名称，也许允许用户调整超参数，然后就可以开始了！
- en: 'To run this solution, you should have the source code for this chapter downloaded from
    the website and open in Microsoft Visual Studio. Please follow the instructions
    for downloading code for this book:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此解决方案，您应该已从网站下载此章节的源代码并在Microsoft Visual Studio中打开。请按照以下说明下载本书的代码：
- en: '![](img/4032a2ef-1c63-4ca2-9984-697fc3b7d01c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4032a2ef-1c63-4ca2-9984-697fc3b7d01c.png)'
- en: 'Before we dive into the code, let''s talk about one very important variable:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入代码之前，让我们讨论一个非常重要的变量：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This variable is our threshold for identifying and highlighting objects in our
    base image. At 0.5, there is a reasonable synchronicity between detection reliability
    and accuracy. As we lower this number, we will find that more objects are identified,
    however, the identification accuracy begins to suffer. The lower we go, the greater
    the chance we have of identifying objects incorrectly. We will identify them,
    but they may not be what we intended, as you will see in a bit.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量是我们识别和突出显示基础图像中物体的阈值。在 0.5 时，检测可靠性和准确性之间有合理的同步性。随着我们降低这个数字，我们会发现识别到的物体更多，然而，识别的准确性开始下降。我们降得越低，错误识别物体的可能性就越大。我们会识别它们，但它们可能不是我们想要的，您很快就会看到。
- en: 'Now, let''s have a quick look at the main function of this sample and walk
    through what it''s doing:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速看一下这个样本的主要功能，并了解一下它在做什么：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Load the default model and data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 加载默认模型和数据：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s create our TensorFlowSharp graph object here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里创建我们的 TensorFlowSharp 图对象：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Read all of the data into our graph object:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有数据读入我们的图对象：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new TensorFlowSharp session to work with:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 TensorFlowSharp 会话来工作：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create our tensor from our image file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的图像文件创建我们的张量：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After all variables are processed, let''s identify and draw the boxes of the
    objects we have detected on our sample image:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理完所有变量后，让我们在我们的样本图像上识别并绘制我们检测到的物体的框：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Well, that is all well and good for a simple operation, but what if what we
    really need to do is a more complicated operation, let''s say multiplying a matrix?
    We can do that as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，对于一个简单的操作来说，这一切都很好，但如果我们真正需要做的是一个更复杂的操作，比如说乘法一个矩阵呢？我们可以这样做：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create our `TFGraph` object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的 `TFGraph` 对象：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create our `TFSession` object:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的 `TFSession` 对象：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a placeholder for our variable for multiplication:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的乘法变量创建一个占位符：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Do the multiplication:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 进行乘法：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Test the results:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 测试结果：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Detecting images
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测图像
- en: Now it's time to move on to a real project. In this example, we are going to
    take our base image (seen as follows) and use it to have the computer detect objects
    in the image. As you can see, there are several instances of people and kites
    in the photograph. This is the same base image used in all TensorFlowSharp examples.
    You are going to see the detection and highlighting progresses changes as we change
    our minimum allowed threshold.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候转向一个真实的项目了。在这个例子中，我们将使用我们的基础图像（如下所示）并让计算机检测图像中的物体。如您所见，照片中有几个人的实例和风筝。这是所有
    TensorFlowSharp 示例中使用的相同基础图像。您将看到随着我们改变我们的最小允许阈值，检测和突出显示的进展如何变化。
- en: 'Here is our base sample image, a photograph:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的基础样本图像，一张照片：
- en: '![](img/cdfdcd84-0e30-46a1-b76a-c466117b725d.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cdfdcd84-0e30-46a1-b76a-c466117b725d.jpg)'
- en: Minimum score for object highlighting
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物体突出显示的最小分数
- en: 'We talked before about the minimum score for highlighting. Let''s see exactly
    what that means by taking a look at what happens when we use different minimum
    scores for object highlighting. Let''s start out with a value of 0.5 and see what
    objects are detected within our photograph:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前谈到了突出显示的最小分数。让我们通过查看当我们使用不同的最小分数进行物体突出显示时会发生什么来确切了解这意味着什么。让我们从一个值为 0.5 的值开始，看看在我们的照片中检测到了哪些物体：
- en: '![](img/e88cc8b7-1447-49a6-abc8-d95be6b31372.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e88cc8b7-1447-49a6-abc8-d95be6b31372.jpg)'
- en: As you can see, we have two kites selected with a fairly good accuracy score
    attached to each. The boxes are drawn in green to indicate high confidence targets.
    Not bad. But there are still a lot of objects out there that I think we should
    be picking up. There are a few more kites and several people that should be easy
    to detect. Why haven't we done so?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已选择了两个风筝，并且每个风筝都附有一个相当好的准确度分数。绿色框表示高置信度目标。不错。但还有很多其他物体我认为我们应该检测到。还有几个风筝和几个人应该很容易检测到。为什么我们没有这样做呢？
- en: 'What if we lowered our minimum threshold to 0.3 instead of 0.5? Let''s see
    the result:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将最小阈值从 0.5 降低到 0.3 呢？让我们看看结果：
- en: '![](img/b74884a5-3af0-4975-8d81-5ac4c665919a.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b74884a5-3af0-4975-8d81-5ac4c665919a.jpg)'
- en: Well, as you can see, we do pick up other kites, albeit with a lower confidence
    score due to their distance in the photograph, but we have also, more importantly,
    now started to recognize people. Any box drawn in red is a low confidence target,
    green is high, and yellow is medium.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，如您所见，我们确实检测到了其他风筝，尽管由于它们在照片中的距离，置信度分数较低，但我们更重要的是，现在已经开始识别人。任何用红色画出的框都是低置信度目标，绿色是高置信度，黄色是中等置信度。
- en: Now, what if we went one step further and lowered our minimum threshold all
    the way down to 0.1? If our pattern follows, we should be able to identify more
    images, albeit with lower confidence scores, of course.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再进一步，将我们的最小阈值降低到 0.1 呢？如果我们的模式遵循，我们应该能够识别更多的图像，当然，置信度分数会较低。
- en: 'If you look at the following version of the photograph, you can see that we
    do, in fact, have many more objects selected. Unfortunately, the accuracy has
    diminished considerably, as we suspected. Kites were confused with people, and
    in one case a tree was confused with a person as well. But the positive note is
    that our recognition changes as we adjust our threshold. Could this be done adaptively
    in a more advanced application? Absolutely, and it''s those kinds of thoughts
    I want to nurture so that you can embellish the code and make truly earth-shaking
    applications:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看照片的以下版本，你会发现我们确实选择了更多的对象。不幸的是，正如我们所怀疑的，准确性大幅下降，风筝被误认为是人，在一种情况下，一棵树也被误认为是人。但积极的方面是，我们的识别会随着我们调整阈值而改变。这能在更高级的应用中自适应地进行吗？绝对可以，这正是我想培养你思考的方式，以便你可以丰富代码并创造出真正震撼的应用：
- en: '![](img/8871d473-738d-42c2-91bd-eeb01046dd72.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8871d473-738d-42c2-91bd-eeb01046dd72.jpg)'
- en: 'OK, there''s one final example that I think you will like. In this example,
    I have dropped the minimum threshold down to 0.01\. If our hunch is right, the
    screen should light up with low confidence targets now. Let''s see whether we''re
    right:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里有一个我认为你会喜欢的最终示例。在这个例子中，我将最小阈值降低到了 0.01。如果我们猜测正确，屏幕现在应该会亮起低置信度目标。让我们看看我们是否猜对了：
- en: '![](img/15f03c40-9a83-4ed9-b873-72c01a3bcbb4.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/15f03c40-9a83-4ed9-b873-72c01a3bcbb4.png)'
- en: It looks like our hunch was right. I know the screen labeling is cluttered,
    but the point is that we have increased our object detection, albeit for a lower
    confidence threshold.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们的猜测是正确的。我知道屏幕上的标记很混乱，但重点是我们的目标检测增加了，尽管是对于较低的置信度阈值。
- en: You should now take some time and consider all of the exciting applications
    for such technology. From face and object detection to autonomous vehicles, Tensors
    are used everywhere today and it's something you should get familiar with.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该花些时间考虑这种技术的所有激动人心的应用。从人脸和物体检测到自动驾驶汽车，张量今天无处不在，这是你应该熟悉的东西。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: TensorFlowSharp is an exciting open source project that makes working with Tensors
    and TensorFlow incredibly easy. In this chapter, we showed you what Tensors are
    and how you can work with them. We also built an incredibly powerful sample application
    that allows you to detect and label images within a picture.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlowSharp 是一个令人兴奋的开源项目，它使得使用张量和 TensorFlow 变得非常容易。在本章中，我们向您展示了张量是什么以及如何使用它们。我们还构建了一个功能强大的示例应用程序，允许您在图片中检测和标记图像。
- en: In our next chapter, we will learn about long short-term memory networks and
    how you can use them to enhance your applications and processes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于长短期记忆网络以及如何使用它们来增强您的应用程序和流程。
- en: References
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1]"Speed/accuracy trade-offs for modern convolutional object detectors."Huang
    J, Rathod V, Sun C, Zhu M, Korattikara A, Fathi A, Fischer I, Wojna Z, Song Y,
    Guadarrama S, Murphy K, CVPR 2017'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1]"现代卷积目标检测器的速度/精度权衡。"Huang J, Rathod V, Sun C, Zhu M, Korattikara A, Fathi
    A, Fischer I, Wojna Z, Song Y, Guadarrama S, Murphy K, CVPR 2017'
- en: '[2] [www.tensorflow.org](http://www.tensorflow.org)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] [www.tensorflow.org](http://www.tensorflow.org)'
- en: '[3] JEAN, Hadrien. *Deep Learning Book Series 2.1 Scalars Vectors Matrices
    and Tensors* Web blog post. [hadrienj.github.io](http://hadrienj.github.io). 26
    Mar. 2018.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3] JEAN, Hadrien. *深度学习书籍系列 2.1 标量、向量、矩阵和张量* 网络博客文章。[hadrienj.github.io](http://hadrienj.github.io).
    26 Mar. 2018.'
