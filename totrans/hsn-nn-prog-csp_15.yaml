- en: Object Detection with TensorFlowSharp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to introduce you to an open source package called
    TensorFlowSharp. More specifically, we will be using the TensorFlow[1] Object
    Detection API, which is an open source framework built on top of TensorFlow, which
    makes it easy to construct, train, and deploy various forms of object detection
    models.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those not familiar with TensorFlow, the following is an excerpt from the
    TensorFlow website[2]:'
  prefs: []
  type: TYPE_NORMAL
- en: '"TensorFlow is an open source software library for high performance numerical
    computation. Its flexible architecture allows easy deployment of computation across
    a variety of platforms (such as CPUs, GPUs, and TPUs), and from desktops to clusters
    of servers to mobile and edge devices. Originally developed by researchers and
    engineers from the Google Brain team within Google''s AI organization, it comes
    with strong support for machine learning and deep learning and the flexible numerical
    computation core is used across many other scientific domains."'
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlowSharp provides .NET bindings to the TensorFlow library, which are
    published here in case you ever need them: [https://github.com/tensorflow/tensorflow](https://github.com/tensorflow/tensorflow).
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics included in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Tensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlowSharp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing your own TensorFlow application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimum score for object highlighting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will be required to have a basic knowledge of .NET development using Microsoft
    Visual Studio and C#. You will need to download the code for this chapter from
    this book''s website: TensorFlowSharp ([https://github.com/migueldeicaza/TensorFlowSharp](https://github.com/migueldeicaza/TensorFlowSharp)).'
  prefs: []
  type: TYPE_NORMAL
- en: Check out the following video to see Code in Action: [http://bit.ly/2pqEiZ9](http://bit.ly/2pqEiZ9).
  prefs: []
  type: TYPE_NORMAL
- en: Working with Tensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's set the stage by talking about exactly what a Tensor is. To do so, we
    should also talk a little bit about vectors and matrices as well. You can skip
    this section if you are already familiar, but it is short and if you already know
    about matrices and vectors, who knows, you might remember something you've forgotten!
    So go ahead and read it anyway!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, before we talk, let me show you a graphic that may make things a tad easier
    to visualize:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/675f7f29-5fa7-4268-8de1-70d4d722e154.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A vector is an array of numbers, as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72e88d89-376d-4efe-a1a9-a0407314fe14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A matrix is a grid of *n x m* numbers, a two-dimensional array. We can do all
    kinds of neat operations on a matrix, such as addition and subtraction, so long
    as the sizes are compatible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67331aa6-3be7-4e38-86b0-61e5f3db8826.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can multiply matrices if we so desire, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4ac0e9f-3907-417f-925c-ada51d5d6a8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And matrices can be added together, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9855310d-b3b7-46a2-b71f-d4d2f74b268e.png)'
  prefs: []
  type: TYPE_IMG
- en: In both cases, we are working within a two-dimensional space. So, what can we
    do if our requirement is to work out of an *n* dimensional space to where *n >
    2*? This where Tensors come in.
  prefs: []
  type: TYPE_NORMAL
- en: A Tensor is basically a matrix but is not two-dimensional (although it could
    be). It could be a three-dimensional matrix (a vector is a tensor is a matrix)
    or some incredibly crazy dimension that we do not yet know how to visualize. And
    to show you how powerful Tensors really are, a tensor can be covariant in one
    dimension and contravariant in another. The dimension of a tensor is usually called
    its **rank**.
  prefs: []
  type: TYPE_NORMAL
- en: More formally, a tensor is really what is called a **mathematical entity**,
    which lives inside a structure and interacts with other entities inside that structure.
    If one of the entities gets transformed, the tensor must obey what is referred
    to as a **related transformation rule**. This is really what differentiates a
    matrix from a tensor. The tensor must allow the entities to shift around when
    transformations occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve got that all squared away and under our belts, let''s look
    at how we can work with Tensors by walking through a bit of example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the variable type must match the cast in the `TFTensor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to do addition and multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add two Tensors together (this is the variable type cast mentioned previously):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s multiply two Tensors together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowSharp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've talked about and shown you Tensors, let's look at how we would
    typically use the TensorFlowSharp API itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your application will typically create a graph (`TFGraph`), set up the operations
    there, then create a session from it (`TFSession`). This session will then use
    the session runner to set up inputs and outputs and execute the pipeline. Let''s
    look at a quick example of how that might flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the results from the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In scenarios where you do not need to set up the graph independently, the session
    will create one automatically for you. The following example shows how to use
    TensorFlow to compute the sum of two numbers. We will have the session automatically
    create the graph for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add two constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiply two constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Developing your own TensorFlow application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've shown you some preliminary code samples, let's move on to our
    example project—how to use TensorFlowSharp from a console application to detect
    objects within an image. This code is easy enough for you to be able to add into
    your solution if you so desire. Just tweak the input and output names, perhaps
    allow for user adjusted hyperparameters, and you're off!
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this solution, you should have the source code for this chapter downloaded from
    the website and open in Microsoft Visual Studio. Please follow the instructions
    for downloading code for this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4032a2ef-1c63-4ca2-9984-697fc3b7d01c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we dive into the code, let''s talk about one very important variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This variable is our threshold for identifying and highlighting objects in our
    base image. At 0.5, there is a reasonable synchronicity between detection reliability
    and accuracy. As we lower this number, we will find that more objects are identified,
    however, the identification accuracy begins to suffer. The lower we go, the greater
    the chance we have of identifying objects incorrectly. We will identify them,
    but they may not be what we intended, as you will see in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s have a quick look at the main function of this sample and walk
    through what it''s doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the default model and data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our TensorFlowSharp graph object here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Read all of the data into our graph object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new TensorFlowSharp session to work with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create our tensor from our image file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After all variables are processed, let''s identify and draw the boxes of the
    objects we have detected on our sample image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, that is all well and good for a simple operation, but what if what we
    really need to do is a more complicated operation, let''s say multiplying a matrix?
    We can do that as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create our `TFGraph` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create our `TFSession` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a placeholder for our variable for multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Do the multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Detecting images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it's time to move on to a real project. In this example, we are going to
    take our base image (seen as follows) and use it to have the computer detect objects
    in the image. As you can see, there are several instances of people and kites
    in the photograph. This is the same base image used in all TensorFlowSharp examples.
    You are going to see the detection and highlighting progresses changes as we change
    our minimum allowed threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our base sample image, a photograph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdfdcd84-0e30-46a1-b76a-c466117b725d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Minimum score for object highlighting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We talked before about the minimum score for highlighting. Let''s see exactly
    what that means by taking a look at what happens when we use different minimum
    scores for object highlighting. Let''s start out with a value of 0.5 and see what
    objects are detected within our photograph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e88cc8b7-1447-49a6-abc8-d95be6b31372.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have two kites selected with a fairly good accuracy score
    attached to each. The boxes are drawn in green to indicate high confidence targets.
    Not bad. But there are still a lot of objects out there that I think we should
    be picking up. There are a few more kites and several people that should be easy
    to detect. Why haven't we done so?
  prefs: []
  type: TYPE_NORMAL
- en: 'What if we lowered our minimum threshold to 0.3 instead of 0.5? Let''s see
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b74884a5-3af0-4975-8d81-5ac4c665919a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well, as you can see, we do pick up other kites, albeit with a lower confidence
    score due to their distance in the photograph, but we have also, more importantly,
    now started to recognize people. Any box drawn in red is a low confidence target,
    green is high, and yellow is medium.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what if we went one step further and lowered our minimum threshold all
    the way down to 0.1? If our pattern follows, we should be able to identify more
    images, albeit with lower confidence scores, of course.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the following version of the photograph, you can see that we
    do, in fact, have many more objects selected. Unfortunately, the accuracy has
    diminished considerably, as we suspected. Kites were confused with people, and
    in one case a tree was confused with a person as well. But the positive note is
    that our recognition changes as we adjust our threshold. Could this be done adaptively
    in a more advanced application? Absolutely, and it''s those kinds of thoughts
    I want to nurture so that you can embellish the code and make truly earth-shaking
    applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8871d473-738d-42c2-91bd-eeb01046dd72.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'OK, there''s one final example that I think you will like. In this example,
    I have dropped the minimum threshold down to 0.01\. If our hunch is right, the
    screen should light up with low confidence targets now. Let''s see whether we''re
    right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15f03c40-9a83-4ed9-b873-72c01a3bcbb4.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks like our hunch was right. I know the screen labeling is cluttered,
    but the point is that we have increased our object detection, albeit for a lower
    confidence threshold.
  prefs: []
  type: TYPE_NORMAL
- en: You should now take some time and consider all of the exciting applications
    for such technology. From face and object detection to autonomous vehicles, Tensors
    are used everywhere today and it's something you should get familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlowSharp is an exciting open source project that makes working with Tensors
    and TensorFlow incredibly easy. In this chapter, we showed you what Tensors are
    and how you can work with them. We also built an incredibly powerful sample application
    that allows you to detect and label images within a picture.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will learn about long short-term memory networks and
    how you can use them to enhance your applications and processes.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1]"Speed/accuracy trade-offs for modern convolutional object detectors."Huang
    J, Rathod V, Sun C, Zhu M, Korattikara A, Fathi A, Fischer I, Wojna Z, Song Y,
    Guadarrama S, Murphy K, CVPR 2017'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2] [www.tensorflow.org](http://www.tensorflow.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3] JEAN, Hadrien. *Deep Learning Book Series 2.1 Scalars Vectors Matrices
    and Tensors* Web blog post. [hadrienj.github.io](http://hadrienj.github.io). 26
    Mar. 2018.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
