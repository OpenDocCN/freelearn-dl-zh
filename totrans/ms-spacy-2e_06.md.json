["```py\nreview_text = 'This Hot chocolate is very good. It has just the right amount of milk chocolate flavor. The price is a very good deal and more than worth it!'\ncategory = 'positive'\n```", "```py\n    import spacy\n    from spacy.training import Example\n    nlp = spacy.blank(\"en\")\n    ```", "```py\n    review_text = 'This Hot chocolate is very good. It has just the right amount of milk chocolate flavor. The price is a very good deal and more than worth it!'\n    doc = nlp(review_text)\n    annotation = {\"cats\": {\"positive\": 1, \"negative\": 0}}\n    ```", "```py\n    example = Example.from_dict(doc, annotation)\n    ```", "```py\n    mkdir data\n    wget -P data https://github.com/PacktPublishing/Mastering-spaCy-Second-Edition/blob/main/chapter_06/data/amazon_food_reviews.csv\n    ```", "```py\n    import pandas as pd\n    import spacy\n    from spacy.training import Example\n    df = pd.read_csv(\"data/amazon_food_reviews.csv\")\n    df_train = df.sample(frac=0.8,random_state=200)\n    df_test = df.drop(df_train.index)\n    df_test.to_json(\"data/df_dev.json\")\n    ```", "```py\n    nlp = spacy.blank(\"en\")\n    TRAIN_EXAMPLES = []\n    for _,row in df_train.iterrows():\n        if row[\"positive_review\"] == 1:\n            annotation = {\"cats\": {\"positive\": 1, \"negative\": 0}}\n        else:\n            annotation = {\"cats\": {\"negative\": 1, \"positive\": 0}}\n        example = Example.from_dict(nlp(row[\"text\"]), annotation)\n        TRAIN_EXAMPLES.append(example)\n    ```", "```py\nimport spacy\nfrom spacy.training import Example\nnlp = spacy.blank(\"en\")\ntextcat = nlp.add_pipe(\"textcat\")\ntextcat.initialize(lambda: TRAIN_EXAMPLES, nlp=nlp)\n```", "```py\n    import spacy\n    from spacy.util import minibatch\n    import random\n    nlp = spacy.blank(\"en\")\n    textcat = nlp.add_pipe(\"textcat\")\n    textcat.initialize(lambda: TRAIN_EXAMPLES, nlp=nlp)\n    ```", "```py\n    optimizer = nlp.resume_training()\n    ```", "```py\n    for epoch in range(40):\n        random.shuffle(TRAIN_EXAMPLES)\n        batches = minibatch(TRAIN_EXAMPLES, size=200)\n        losses = {}\n        for batch in batches:\n            nlp.update(\n                batch,\n                losses=losses,\n                sgd=optimizer,\n            ) \n        if epoch % 10 == 0: \n            print(epoch, \"Losses\", losses) \n        print(epoch, \"Losses\", losses)\n    ```", "```py\ntext = \"Smoke Paprika My mother uses it for allot of dishes, but this particular one, doesn't compare to anything she had.  It is now being used for a decoration on the spice shelf and I will never use it and ruin a dish again. I have tried using just a little bit, thinking it was stronger than her's. And I am a decent cook. But this does not taste like the smoke paprika that I have had in the past.  Sorry I don't recommend this product at all.\"\ndoc = nlp(text)\nprint(\"Example 1\", doc.cats)\ntext = \"Terrible Tasting for me The Teechino Caffeine-Free Herbal Coffee, Mediterranean Vanilla Nut tasted undrinkable to me. It lacked a deep, full-bodied flavor, which Cafix and Pero coffee-like substitute products have. I wanted to try something new, and for me, this substitute coffee drink wasn't my favorite.\"\ndoc = nlp(text)\nprint(\"Example 2\", doc.cats)\ntext = \"Dishwater If I had a choice of THIS or nothing, I'd go with nothing. Of all the K-cups I've tasted - this is the worst. Very weak and if you close your eyes and think really hard about it, maybe you can almost taste cinnamon. Blech.\"\ndoc = nlp(text)\nprint(\"Example 3\", doc.cats)\n```", "```py\n    import spacy\n    nlp = spacy.blank(\"en\")\n    ```", "```py\n    config = {\n        \"model\": {\n            \"@architectures\": \"spacy-transformers.TransformerModel.v3\",\n            \"name\": \"roberta-base\"\n        }\n    }\n    ```", "```py\n    nlp.add_pipe(\"transformer\", config=config)\n    nlp.initialize()\n    doc = nlp(\"Dishwater If I had a choice of THIS or nothing, I'd go with nothing. Of all the K-cups I've tasted - this is the worst. Very weak and if you close your eyes and think really hard about it, maybe you can almost taste cinnamon. Blech.\")\n    print(doc._.trf_data)\n    ```", "```py\n    import pandas as pd\n    import spacy\n    from spacy.tokens import DocBin\n    df = pd.read_csv(\"data/amazon_food_reviews.csv\")\n    df_train = df.sample(frac=0.8,random_state=200)\n    nlp = spacy.blank(\"en\")\n    ```", "```py\n    db = DocBin()\n    for _,row in df_train.iterrows():\n        doc = nlp(row[\"text\"])\n        if row[\"positive_review\"] == 1:\n            doc.cats = {\"positive\": 1, \"negative\": 0}\n        else:\n            doc.cats = {\"positive\": 0, \"negative\": 1}\n        db.add(doc)\n    ```", "```py\n    db.to_disk(\"data/train.spacy\")\n    ```", "```py\n    from pathlib import Path\n    def convert_dataset(lang: str, input_path: Path, \n                        output_path: Path):\n        nlp = spacy.blank(lang)\n        db = DocBin()\n        df = pd.read_json(input_path)\n        for _,row in df.iterrows():\n            doc = nlp.make_doc(row[\"Text\"])\n            if row[\"positive_review\"] == 1:\n                doc.cats = {\"positive\": 1, \"negative\": 0}\n            else:\n                doc.cats = {\"negative\": 1, \"positive\": 0}\n            db.add(doc)\n        db.to_disk(output_path)\n    convert_dataset(\"en\", \"data/df_dev.json\", \"data/dev.spacy\")\n    ```", "```py\npython3 -m spacy init config config_without_transformer.cfg --lang “en” --pipeline “textcat”\n```", "```py\npython3 -m spacy train config_without_transformer.cfg --paths.train \"data/train.spacy\" --paths.dev \"data/dev.spacy\" --output pipeline_without_transformer/\n```", "```py\nimport spacy\nnlp = spacy.load(\"pipeline_without_transformer/model-best\")\ntext = \"Smoke Paprika My mother uses it for allot of dishes, but this particular one, doesn't compare to anything she had.  It is now being used for a decoration on the spice shelf and I will never use it and ruin a dish again. I have tried using just a little bit, thinking it was stronger than her's. And I am a decent cook. But this does not taste like the smoke paprika that I have had in the past.  Sorry I don't recommend this product at all.\"\ndoc = nlp(text)\nprint(\"Example 1\", doc.cats)\ntext = \"Terrible Tasting for me The Teechino Caffeine-Free Herbal Coffee, Mediterranean Vanilla Nut tasted undrinkable to me. It lacked a deep, full-bodied flavor, which Cafix and Pero coffee-like substitute products have. I wanted to try something new, and for me, this substitute coffee drink wasn't my favorite.\"\ndoc = nlp(text)\nprint(\"Example 2\", doc.cats)\ntext = \"Dishwater If I had a choice of THIS or nothing, I'd go with nothing. Of all the K-cups I've tasted - this is the worst. Very weak and if you close your eyes and think really hard about it, maybe you can almost taste cinnamon. Blech.\"\ndoc = nlp(text)\nprint(\"Example 3\", doc.cats)\n```", "```py\nBidirectional: Training on the text data is bi-directional, which means each input sentence is processed from left to right as well as from right to left.\nEncoder: An encoder encodes the input sentence.\nRepresentations: A representation is a word vector.\nTransformers: The architecture is transformer-based.\n```", "```py\nplaying  play, ##ing\nplayed   play, ##ed\ngoing    go, ##ing\nvocabulary = [play, go, ##ing, ##ed]\n```", "```py\n[CLS] Yesterday I [MASK] my friend at [MASK] house [SEP]\n```", "```py\n[CLS] A man robbed a [MASK] yesterday [MASK] 8 o'clock [SEP]\nHe [MASK] the bank with 6 million dollars [SEP]\nLabel = IsNext\n```", "```py\n[CLS] Rabbits like to [MASK] carrots and [MASK] leaves [SEP]\n[MASK] Schwarzenegger is elected as the governor of [MASK] [SEP]\nLabel= NotNext\n```", "```py\npython3 -m spacy init config config_transformer.cfg --lang \"en\" --pipeline \"textcat\" --optimize \"accuracy\" --gpu\n```", "```py\npython3 -m spacy train config_transformer.cfg --paths.train \"data/train.spacy\" --paths.dev \"data/dev.spacy\" --output pipeline_transformer/ --gpu-id 0\n```"]