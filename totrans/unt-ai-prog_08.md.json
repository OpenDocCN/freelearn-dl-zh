["```py\nusing UnityEngine;\npublic class Path : MonoBehaviour {\n    public bool isDebug = true;\n    public Transform[] waypoints;\n    public float Length {\n        get {\n            return waypoints.Length;\n        }\n    }\n    public Vector3 GetPoint(int index) {\n        return waypoints[index].position;\n    }\n    void OnDrawGizmos() {\n        if (!isDebug)\n            return;\n        for (int i = 1; i < waypoints.Length; i++) {\n            Debug.DrawLine(waypoints[i-1].position,\n            waypoints[i].position, Color.red);\n        }\n    }\n}\n```", "```py\nusing UnityEngine;\npublic class VehicleFollowing : MonoBehaviour {\n    public Path path;\n    public float speed = 10.0f;\n    [Range(1.0f, 1000.0f)]\n    public float steeringInertia = 100.0f;\n    public bool isLooping = true;\n    public float waypointRadius = 1.0f;\n    //Actual speed of the vehicle \n    private float curSpeed;\n    private int curPathIndex = 0;\n    private float pathLength;\n    private Vector3 targetPoint;\n    Vector3 velocity;\n```", "```py\nvoid Start () {\n    pathLength = path.Length;\n    velocity = transform.forward;\n}\n```", "```py\n    void Update() {\n        //Unify the speed\n        curSpeed = speed * Time.deltaTime;\n        targetPoint = path.GetPoint(curPathIndex);\n        //If reach the radius of the waypoint then move to\n        //next point in the path\n        if (Vector3.Distance(transform.position,\n            targetPoint) < waypointRadius) {\n            //Don't move the vehicle if path is finished \n            if (curPathIndex < pathLength - 1)\n                curPathIndex++;\n            else if (isLooping)\n                curPathIndex = 0;\n            else\n                return;\n        }\n        //Move the vehicle until the end point is reached \n        //in the path\n        if (curPathIndex >= pathLength)\n            return;\n        //Calculate the next Velocity towards the path\n        if (curPathIndex >= pathLength - 1 && !isLooping)\n            velocity += Steer(targetPoint, true);\n        else\n            velocity += Steer(targetPoint);\n        //Move the vehicle according to the velocity\n        transform.position += velocity;\n        //Rotate the vehicle towards the desired Velocity \n        transform.rotation =\n          Quaternion.LookRotation(velocity); \n    }\n```", "```py\n    public Vector3 Steer(Vector3 target, bool bFinalPoint = \n      false) {\n        //Calculate the directional vector from the current\n        //position towards the target point\n        Vector3 desiredVelocity = \n          (target - transform.position);\n        float dist = desiredVelocity.magnitude;\n        //Normalize the desired Velocity\n        desiredVelocity.Normalize();\n        // \n        if (bFinalPoint && dist < waypointRadius)\n            desiredVelocity *= \n              curSpeed * (dist / waypointRadius);\n        else\n            desiredVelocity *= curSpeed;\n        //Calculate the force Vector\n        Vector3 steeringForce = desiredVelocity - velocity;\n        return steeringForce / steeringInertia;\n    }\n}\n```", "```py\nusing UnityEngine;\npublic class VehicleAvoidance : MonoBehaviour {\n    public float vehicleRadius = 1.2f;\n    public float speed = 10.0f;\n    public float force = 50.0f;\n    public float minimumDistToAvoid = 10.0f;\n    public float targetReachedRadius = 3.0f;\n    //Actual speed of the vehicle \n    private float curSpeed;\n    private Vector3 targetPoint;\n    // Use this for initialization\n    void Start() {\n        targetPoint = Vector3.zero;\n    }\n    void OnGUI() {\n        GUILayout.Label(\"Click anywhere to move the vehicle\n                         to the clicked point\");\n    }\n```", "```py\n    void Update() {\n        //Vehicle move by mouse click\n        var ray = Camera.main.ScreenPointToRay(\n          Input.mousePosition);\n        if (Input.GetMouseButtonDown(0) &&\n            Physics.Raycast(ray, out var hit, 100.0f)) {\n            targetPoint = hit.point;\n        }\n        //Directional vector to the target position\n        Vector3 dir = (targetPoint - transform.position);\n        dir.Normalize();\n        //Apply obstacle avoidance\n        AvoidObstacles(ref dir);\n\n       . . . .\n}\n```", "```py\n    public void AvoidObstacles(ref Vector3 dir) {\n        //Only detect layer 8 (Obstacles)\n        int layerMask = 1 << 8;\n        //Check that the vehicle hit with the obstacles\n        //within it's minimum distance to avoid\n        if (Physics.SphereCast(transform.position,\n            vehicleRadius, transform.forward, out var hit,\n            minimumDistToAvoid, layerMask)) {\n            //Get the normal of the hit point to calculate\n            //the new direction\n            Vector3 hitNormal = hit.normal;\n            //Don't want to move in Y-Space\n            hitNormal.y = 0.0f; \n            //Get the new directional vector by adding\n           //force to vehicle's current forward vector\n            dir = transform.forward + hitNormal * force;\n        }\n    }\n```", "```py\n0000 0000 0000 0000 0000 0000 0000 0000\n```", "```py\n0000 0000 0000 0000 0000 0000 1111 1111\n```", "```py\n0000 0000 0000 0000 0000 0001 0000 0000\n```", "```py\nint layerMask = 1<<8;\n```", "```py\nint layerMask = (1<<8) | (1<<9);\n```", "```py\n    void Update () {\n        //...\n        //Don't move the vehicle when the target point is\n        //reached\n        if (Vector3.Distance(targetPoint,\n            transform.position) < targetReachedRadius)\n            return;\n        //Assign the speed with delta time\n        curSpeed = speed * Time.deltaTime;\n        //Rotate the vehicle to its target directional\n        //vector\n        var rot = Quaternion.LookRotation(dir);\n        transform.rotation = \n          Quaternion.Slerp(transform.rotation, rot, 5.0f *\n                           Time.deltaTime);\n        //Move the vehicle towards\n        transform.position += transform.forward * curSpeed;\n        transform.position = new Vector3(\n          transform.position.x, 0, transform.position.z);\n    }\n```"]