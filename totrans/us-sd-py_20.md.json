["```py\n    pip install gradio\n    ```", "```py\n    pip install -U click\n    ```", "```py\n    pip install -U uvicorn\n    ```", "```py\n    import gradio\n    ```", "```py\n    def greet(name):\n    ```", "```py\n        return \"Hello \" + name + \"!\"\n    ```", "```py\n    demo = gradio.Interface(\n    ```", "```py\n        fn = greet,\n    ```", "```py\n        inputs = \"text\",\n    ```", "```py\n        outputs = \"text\"\n    ```", "```py\n    )\n    ```", "```py\n    demo.launch()\n    ```", "```py\nimport gradio\ndef greet(name):\n    return \"Hello \" + name + \"!\"\ndemo = gradio.Interface(\n    fn = greet,\n    inputs = \"text\",\n    outputs = \"text\"\n)\ngradio.close_all()\ndemo.launch(\n    server_port = 7860\n)\n```", "```py\npython gradio_app.py\n```", "```py\nimport gradio\ngradio.close_all()\ndef greet(name):\n    return f\"hello {name} !\"\nwith gradio.Blocks() as demo:\n    name_input = gradio.Textbox(label = \"Name\")\n    output = gradio.Textbox(label = \"output box\")\n    diffusion_btn = gradio.Button(\"Generate\")\n    diffusion_btn.click(\n        fn = greet,\n        inputs = name_input,\n        outputs = output\n    )\ndemo.launch(server_port = 7860)\n```", "```py\nimport gradio\ngradio.close_all()\ndef greet(name, age):\n    return f\"hello {name} !\", f\"You age is {age}\"\nwith gradio.Blocks() as demo:\n    name_input = gradio.Textbox(label = \"Name\")\n    age_input = gradio.Slider(minimum =0,maximum =100,\n        label =\"age slider\")\n    name_output = gradio.Textbox(label = \"name output box\")\n    age_output = gradio.Textbox(label = \"age output\")\n    diffusion_btn = gradio.Button(\"Generate\")\n    diffusion_btn.click(\n        fn = greet,\n        inputs = [name_input, age_input],\n        outputs = [name_output, age_output]\n    )\ndemo.launch(server_port = 7860)\n```", "```py\nimport gradio, time\ngradio.close_all()\ndef my_function(text, progress=gradio.Progress()):\n    for i in range(10):\n        time.sleep(1)\n        progress(i/10, desc=f\"{i}\")\n    return text\nwith gradio.Blocks() as demo:\n    input = gradio.Textbox()\n    output = gradio.Textbox()\n    btn = gradio.Button()\n    btn.click(\n        fn = my_function,\n        inputs = input,\n        outputs = output\n    )\ndemo.queue().launch(server_port=7860)\n```", "```py\nimport gradio\ngradio.close_all(verbose = True)\nimport torch\nfrom diffusers import StableDiffusionPipeline\ntext2img_pipe = StableDiffusionPipeline.from_pretrained(\n    \"stablediffusionapi/deliberate-v2\",\n    torch_dtype = torch.float16,\n    safety_checker = None\n).to(\"cuda:0\")\ndef text2img(\n    prompt:str,\n    neg_prompt:str,\n    progress_bar = gradio.Progress()\n):\n    return text2img_pipe(\n        prompt = prompt,\n        negative_prompt = neg_prompt,\n        callback = (\n            lambda step,\n            timestep,\n            latents: progress_bar(step/50,desc=\"denoising\")\n        )\n    ).images[0]\nwith gradio.Blocks(\n    theme = gradio.themes.Monochrome()\n) as sd_app:\n    gradio.Markdown(\"# Stable Diffusion in Gradio\")\n    prompt = gradio.Textbox(label=\"Prompt\", lines = 4)\n    neg_prompt = gradio.Textbox(label=\"Negative Prompt\", lines = 2)\n    sd_gen_btn = gradio.Button(\"Generate Image\")\n    output_image = gradio.Image()\n    sd_gen_btn.click(\n        fn = text2img,\n        inputs = [prompt, neg_prompt],\n        outputs = output_image\n    )\nsd_app.queue().launch(server_port = 7861)\n```", "```py\ncallback = (\n    lambda step, timestep, latents:\n        progress_bar(step/50, desc=\"denoising\")\n)\n```", "```py\n...\nwith gradio.Blocks(\n    theme = gradio.themes.Monochrome()\n) as sd_app:\n...\n```"]