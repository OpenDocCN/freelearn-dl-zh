- en: Chapter 1. Simple Classifiers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 简单分类器
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Deserializing and running a classifier
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反序列化和运行分类器
- en: Getting confidence estimates from a classifier
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从分类器中获取置信度估计
- en: Getting data from the Twitter API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Twitter API获取数据
- en: Applying a classifier to a `.csv` file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将分类器应用于`.csv`文件
- en: Evaluation of classifiers – the confusion matrix
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类器的评估——混淆矩阵
- en: Training your own language model classifier
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练你自己的语言模型分类器
- en: How to train and evaluate with cross validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用交叉验证进行训练和评估
- en: Viewing error categories – false positives
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看错误类别——误报
- en: Understanding precision and recall
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解精确度和召回率
- en: How to serialize a LingPipe object – classifier example
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何序列化LingPipe对象——分类器示例
- en: Eliminate near duplicates with the Jaccard distance
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jaccard距离消除近似重复项
- en: How to classify sentiment – simple version
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何进行情感分类——简单版本
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter introduces the LingPipe toolkit in the context of its competition
    and then dives straight into text classifiers. Text classifiers assign a category
    to text, for example, they assign the language to a sentence or tell us if a tweet
    is positive, negative, or neutral in sentiment. This chapter covers how to use,
    evaluate, and create text classifiers based on language models. These are the
    simplest machine learning-based classifiers in the LingPipe API. What makes them
    simple is that they operate over characters only—later, classifiers will have
    notions of words/tokens and even more. However, don't be fooled, character-language
    models are ideal for language identification, and they were the basis of some
    of the world's earliest commercial sentiment systems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章在LingPipe工具包的竞赛背景下介绍它，然后直接深入到文本分类器。文本分类器将类别分配给文本，例如，它们将语言分配给一个句子或告诉我们一条推文是正面、负面还是中性。本章涵盖了如何使用、评估和创建基于语言模型的文本分类器。这些是LingPipe
    API中最简单的基于机器学习的分类器。它们之所以简单，是因为它们仅操作于字符——稍后，分类器将具有单词/标记的概念，甚至更多。然而，不要被误导，字符语言模型非常适合语言识别，它们也是世界上一些最早的商业情感系统的基石。
- en: This chapter also covers crucial evaluation infrastructure—it turns out that
    almost everything we do turns out to be a classifier at some level of interpretation.
    So, do not skimp on the power of cross validation, definitions of precision/recall,
    and F-measure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还涵盖了关键的评价基础设施——结果证明，我们做的几乎所有事情在某种解释层面上都可以被视为分类器。因此，不要忽视交叉验证的力量、精确度/召回率的定义以及F度量。
- en: The best part is that you will learn how to programmatically access Twitter
    data to train up and evaluate your own classifiers. There is a boring bit concerning
    the mechanics of reading and writing LingPipe objects from/to disk, but other
    than that, this is a fun chapter. The goal of this chapter is to get you up and
    running quickly with the basic care and feeding of machine-learning techniques
    in the domain of **natural language processing** (**NLP**).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的部分是，你将学习如何程序化地访问Twitter数据来训练和评估你自己的分类器。有关从/向磁盘读取和写入LingPipe对象的机制有一些枯燥的内容，但除此之外，这是一个有趣的章节。本章的目标是让你快速上手，掌握自然语言处理（**NLP**）领域中机器学习技术的基本维护和培养。
- en: LingPipe is a Java toolkit for NLP-oriented applications. This book will show
    you how to solve common NLP problems with LingPipe in a problem/solution format
    that allows developers to quickly deploy solutions to common tasks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: LingPipe是一个面向NLP应用的Java工具包。本书将向您展示如何以问题/解决方案的格式使用LingPipe解决常见的NLP问题，这允许开发者快速部署常见任务的解决方案。
- en: LingPipe and its installation
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LingPipe及其安装
- en: LingPipe 1.0 was released in 2003 as a dual-licensed open source NLP Java library.
    At the time of writing this book, we are coming up on 2000 hits on Google Scholar
    and have thousands of commercial installs, ranging from universities to government
    agencies to Fortune 500 companies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: LingPipe 1.0于2003年作为双授权的开源NLP Java库发布。在撰写本书时，我们在Google Scholar上的引用接近2000次，并且有数千个商业安装，从大学到政府机构到财富500强公司。
- en: Current licensing is either AGPL ([http://www.gnu.org/licenses/agpl-3.0.html](http://www.gnu.org/licenses/agpl-3.0.html))
    or our commercial license that offers more traditional features such as indemnification
    and non-sharing of code as well as support.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当前许可协议是AGPL ([http://www.gnu.org/licenses/agpl-3.0.html](http://www.gnu.org/licenses/agpl-3.0.html))
    或我们提供的商业许可，它提供更多传统功能，如赔偿、代码不共享以及支持。
- en: Projects similar to LingPipe
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与LingPipe类似的项目
- en: Nearly all NLP projects have awful acronyms so we will lay bare our own. **LingPipe**
    is the short form for **linguistic pipeline**, which was the name of the `cvs`
    directory in which Bob Carpenter put the initial code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有自然语言处理（NLP）项目都有糟糕的缩写，所以我们将公开我们的缩写。**LingPipe**是**linguistic pipeline**的简称，这个名字是Bob
    Carpenter存放初始代码的`cvs`目录的名称。
- en: 'LingPipe has lots of competition in the NLP space. The following are some of
    the more popular ones with a focus on Java:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: LingPipe在NLP领域有很多竞争对手。以下是一些更受欢迎的、专注于Java的：
- en: '**NLTK**: This is the dominant Python library for NLP processing.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NLTK**：这是NLP处理领域占主导地位的Python库。'
- en: '**OpenNLP**: This is an Apache project built by a bunch of smart folks.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenNLP**：这是一个由一群聪明人构建的Apache项目。'
- en: '**JavaNLP**: This is a rebranding of Stanford NLP tools, again built by a bunch
    of smart folks.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaNLP**：这是对斯坦福NLP工具的重新品牌，同样是由一群聪明人构建的。'
- en: '**ClearTK**: This is a University of Boulder toolkit that wraps lots of popular
    machine learning frameworks.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ClearTK**：这是一个博尔德大学的工具包，封装了许多流行的机器学习框架。'
- en: '**DkPro**: Technische Universität Darmstadt from Germany produced this UIMA-based
    project that wraps many common components in a useful manner. UIMA is a common
    framework for NLP.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DkPro**：德国达姆施塔特技术大学生产的这个基于UIMA的项目，以一种有用的方式封装了许多常见组件。UIMA是NLP的一个通用框架。'
- en: '**GATE**: GATE is really more of a framework than competition. In fact, LingPipe
    components are part of their standard distribution. It has a nice graphical "hook
    the components up" capability.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GATE**：GATE实际上更像是一个框架而不是竞争对手。事实上，LingPipe组件是它们标准分布的一部分。它有一个很好的图形化“连接组件”功能。'
- en: '**Learning Based Java** (**LBJ**): LBJ is a special-purpose programming language
    based on Java, and it is geared toward machine learning and NLP. It was developed
    at the Cognitive Computation Group of the University of Illinois at Urbana Champaign.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于学习的Java**（**LBJ**）：LBJ是一种基于Java的特殊用途编程语言，它面向机器学习和NLP。它是在伊利诺伊大学厄巴纳-香槟分校的认知计算组开发的。'
- en: '**Mallet**: This name is the short form of **MAchine Learning for LanguagE
    Toolkit**. Apparently, reasonable acronym generation is short in supply these
    days. Smart folks built this too.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mallet**：这个名字是**MAchine Learning for LanguagE Toolkit**的简称。显然，合理的缩写生成现在是稀缺的。这也是由聪明人构建的。'
- en: 'Here are some pure machine learning frameworks that have broader appeal but
    are not necessarily tailored for NLP tasks:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些纯机器学习框架，它们具有更广泛的吸引力，但并不一定针对NLP任务：
- en: '**Vowpal Wabbit**: This is very focused on scalability around Logistic Regression,
    Latent Dirichelet Allocation, and so on. Smart folks drive this.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vowpal Wabbit**：它非常专注于逻辑回归、潜在狄利克雷分配等可扩展性。由聪明人推动。'
- en: '**Factorie**: It is from UMass, Amherst and an alternative offering to Mallet.
    Initially it focused primarily on graphic models, but now it also supports NLP
    tasks.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Factorie**：它来自美国马萨诸塞大学阿默斯特分校，是Mallet的替代品。最初它主要关注图形模型，但现在也支持NLP任务。'
- en: '**Support Vector Machine** (**SVM**): SVM light and `libsvm` are very popular
    SVM implementations. There is no SVM implementation in LingPipe, because logistic
    regression does this as well.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持向量机**（**SVM**）：SVM light和`libsvm`是非常流行的SVM实现。LingPipe中没有SVM实现，因为逻辑回归也能做到这一点。'
- en: So, why use LingPipe?
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么，为什么使用LingPipe？
- en: 'It is very reasonable to ask why choose LingPipe with such outstanding free
    competition mentioned earlier. There are a few reasons:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 提到前面提到的如此出色的免费竞争，合理地询问为什么选择LingPipe是有道理的。有几个原因：
- en: '**Documentation**: The class-level documentation in LingPipe is very thorough.
    If the work is based on academic work, that work is cited. Algorithms are laid
    out, the underlying math is explained, and explanations are precise. What the
    documentation lacks is a "how to get things done" perspective; however, this is
    covered in this book.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：LingPipe中的类级别文档非常详尽。如果工作基于学术研究，那么这项工作会被引用。算法被列出，底层数学被解释，解释精确。文档缺乏的是“如何完成任务”的视角；然而，这一点在本书中有所涉及。'
- en: '**Enterprise/server optimized**: LingPipe is designed from the ground up for
    server applications, not for command-line usage (though we will be using the command
    line extensively throughout the book).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业/服务器优化**：LingPipe从一开始就是为了服务器应用程序而设计的，而不是为了命令行使用（尽管我们将在整本书中广泛使用命令行）。'
- en: '**Coded in the Java dialect**: LingPipe is a native Java API that is designed
    according to standard Java class design principles (Joshua Bloch''s *Effective
    Java*, by Addison-Wesley), such as consistency checks on construction, immutability,
    type safety, backward-compatible serializability, and thread safety.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用Java方言编写**: LingPipe是一个遵循标准Java类设计原则（Addison-Wesley出版的Joshua Bloch的《Effective
    Java》）的本地Java API，例如在构造时的一致性检查、不可变性、类型安全、向后兼容的序列化以及线程安全。'
- en: '**Error handling**: Considerable attention is paid to error handling through
    exceptions and configurable message streams for long-running processes.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**: 在长时间运行的过程中，通过异常和可配置的消息流对错误处理给予了相当的关注。'
- en: '**Support**: LingPipe has paid employees whose job is to answer your questions
    and make sure that LingPipe is doing its job. The rare bug gets fixed in under
    24 hours typically. They respond to questions very quickly and are very willing
    to help people.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持**: LingPipe有付费员工，他们的工作是回答您的问题并确保LingPipe正在完成其工作。通常，罕见的错误会在24小时内得到修复。他们非常快速地回答问题，并且非常愿意帮助人们。'
- en: '**Consulting**: You can hire experts in LingPipe to build systems for you.
    Generally, they teach developers how to build NLP systems as a byproduct.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**咨询**: 您可以雇佣LingPipe的专家为您构建系统。通常，他们会作为副产品教开发者如何构建NLP系统。'
- en: '**Consistency**: The LingPipe API was designed by one person, Bob Carpenter,
    with an obsession of consistency. While it is not perfect, you will find a regularity
    and eye to design that can be missing in academic efforts. Graduate students come
    and go, and the resulting contributions to university toolkits can be quite varied.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**: LingPipe API是由Bob Carpenter一个人设计的，他对一致性有着近乎狂热的追求。虽然它并不完美，但您会发现其中存在一种规律性和设计上的关注，这在学术努力中可能会缺失。研究生来来去去，因此对大学工具包的贡献可能会有很大的差异。'
- en: '**Open source**: There are many commercial providers, but their software is
    a black box. The open source nature of LingPipe provides transparency and confidence
    that the code is doing what we ask it to do. When the documentation fails, it
    is a huge relief to have access to code to understand it better.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**: 尽管有许多商业供应商，但他们的软件是一个黑盒。LingPipe的开源特性提供了透明度和信心，确保代码正在执行我们所要求的功能。当文档出现问题时，能够访问代码以更好地理解它是一种巨大的安慰。'
- en: Downloading the book code and data
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载书籍代码和数据
- en: 'You will need to download the source code for this cookbook, with supporting
    models and data from [http://alias-i.com/book.html](http://alias-i.com/book.html).
    Untar and uncompress it using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要从[http://alias-i.com/book.html](http://alias-i.com/book.html)下载此食谱的源代码，以及支持模型和数据。使用以下命令解包和解压缩：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)上您购买的所有Packt书籍的账户中下载示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Alternatively, your operating system might provide other ways of extracting
    the archive. All recipes assume that you are running the commands in the resulting
    cookbook directory.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您的操作系统可能提供其他提取存档的方法。所有食谱都假设您在生成的食谱目录中运行命令。
- en: Downloading LingPipe
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载LingPipe
- en: Downloading LingPipe is not strictly necessary, but you will likely want to
    be able to look at the source and have a local copy of the Javadoc.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下载LingPipe不是严格必要的，但您可能希望能够查看源代码并拥有Javadoc的本地副本。
- en: The download and installation instructions for LingPipe can be found at [http://alias-i.com/lingpipe/web/install.html](http://alias-i.com/lingpipe/web/install.html).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: LingPipe的下载和安装说明可以在[http://alias-i.com/lingpipe/web/install.html](http://alias-i.com/lingpipe/web/install.html)找到。
- en: The examples from this chapter use command-line invocation, but it is assumed
    that the reader has sufficient development skills to map the examples to their
    preferred IDE/ant or other environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例使用命令行调用，但假设读者具备足够的开发技能，可以将示例映射到他们首选的IDE/ant或其他环境。
- en: Deserializing and running a classifier
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反序列化和运行分类器
- en: 'This recipe does two things: introduces a very simple and effective language
    ID classifier and demonstrates how to deserialize a LingPipe class. If you find
    yourself here from a later chapter, trying to understand deserialization, I encourage
    you to run the example program anyway. It will take 5 minutes, and you might learn
    something useful.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱做了两件事：介绍一个非常简单且有效的语言ID分类器，并演示如何反序列化LingPipe类。如果你是从后面的章节来到这里，试图理解反序列化，我鼓励你无论如何运行示例程序。这需要5分钟，你可能会学到一些有用的东西。
- en: Our language ID classifier is based on character language models. Each language
    model gives you the probability of the text, given that it is generated in that
    language. The model that is most familiar with the text is the first best fit.
    This one has already been built, but later in the chapter, you will learn to make
    your own.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的语言ID分类器基于字符语言模型。每个语言模型都会给出文本在该语言下生成的概率。与文本最熟悉的模型是最佳匹配。这个模型已经构建好了，但稍后在本章中，你将学习如何创建自己的模型。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to deserialize and run a classifier:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以反序列化和运行分类器：
- en: 'Go to the `cookbook` directory for the book and run the command for OSX, Unix,
    and Linux:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往书的`cookbook`目录并运行OSX、Unix和Linux的命令：
- en: '[PRE1]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For Windows invocation (quote the classpath and use `;` instead of `:`):'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Windows调用（引用类路径并使用`;`代替`:`）：
- en: '[PRE2]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will use the Unix style command line in this book.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在本书中使用Unix风格的命令行。
- en: 'The program reports the model being loaded and a default, and prompts for a
    sentence to classify:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序报告正在加载模型和默认设置，并提示输入一个句子进行分类：
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The classifier is trained on English, Spanish, and Japanese. We have entered
    an example of each—to get some Japanese, go to [http://ja.wikipedia.org/wiki/](http://ja.wikipedia.org/wiki/).
    These are the only languages it knows about, but it will guess on any text. So,
    let''s try some Arabic:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该分类器是在英语、西班牙语和日语上训练的。我们已输入了每种语言的示例——要获取一些日语，请访问[http://ja.wikipedia.org/wiki/](http://ja.wikipedia.org/wiki/)。这些是它所知道的唯一语言，但它会对任何文本进行猜测。所以，让我们尝试一些阿拉伯语：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It thinks it is Japanese because this language has more characters than English
    or Spanish. This in turn leads that model to expect more unknown characters. All
    the Arabic characters are unknown.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它认为它是日语，因为这种语言的字符比英语或西班牙语多。这反过来又导致该模型期望更多的未知字符。所有的阿拉伯文字符都是未知的。
- en: If you are working with a Windows terminal, you might encounter difficulty entering
    UTF-8 characters.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在一个Windows终端中工作，可能会遇到输入UTF-8字符的困难。
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The code in the jar is `cookbook/src/com/lingpipe/cookbook/chapter1/ RunClassifierFromDisk.java`.
    What is happening is that a pre-built model for language identification is deserialized
    and made available. It has been trained on English, Japanese, and Spanish. The
    training data came from Wikipedia pages for each language. You can see the data
    in `data/3LangId.csv`. The focus of this recipe is to show you how to deserialize
    the classifier and run it—training is handled in the *Training your own language
    model classifier* recipe in this chapter. The entire code for the `RunClassifier
    FromDisk.java` class starts with the package; then it imports the start of the
    `RunClassifierFromDisk` class and the start of `main()`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: jar文件中的代码位于`cookbook/src/com/lingpipe/cookbook/chapter1/RunClassifierFromDisk.java`。正在发生的事情是，一个用于语言识别的预构建模型被反序列化并可供使用。它已经在英语、日语和西班牙语上进行了训练。训练数据来自每种语言的维基百科页面。你可以在`data/3LangId.csv`中看到数据。本食谱的重点是向你展示如何反序列化分类器并运行它——训练在本章的“训练你自己的语言模型分类器”食谱中处理。`RunClassifierFromDisk.java`类的整个代码从包开始；然后它导入`RunClassifierFromDisk`类的开始和`main()`的开始：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code is a very standard Java code, and we present it without
    explanation. Next is a feature in most recipes that supplies a default value for
    a file if the command line does not contain one. This allows you to use your own
    data if you have it, otherwise it will run from files in the distribution. In
    this case, a default classifier is supplied if there is no argument on the command
    line:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是一个非常标准的Java代码，我们在此不进行解释。接下来是大多数食谱中的一个特性，它为命令行中不包含的文件提供一个默认值。这允许你使用自己的数据（如果你有），否则它将从分发中的文件运行。在这种情况下，如果没有命令行参数，将提供一个默认分类器：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we will see how to deserialize a classifier or another LingPipe object
    from disk:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何从磁盘反序列化一个分类器或另一个LingPipe对象：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This class is employed throughout LingPipe to carry out a compilation of classes
    for two reasons. First, it allows the compiled objects to have final variables
    set, which supports LingPipe's extensive use of immutables. Second, it avoids
    the messiness of exposing the I/O methods required for externalization and deserialization,
    most notably, the no-argument constructor. This class is used as the superclass
    of a private internal class that does the actual compilation. This private internal
    class implements the required `no-arg` constructor and stores the object required
    for `readResolve()`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类在 LingPipe 中被用于执行类的编译，原因有两个。首先，它允许编译后的对象设置最终变量，这支持 LingPipe 对不可变性的广泛使用。其次，它避免了暴露外部化和反序列化所需的
    I/O 方法所带来的混乱，特别是无参数构造函数。这个类被用作一个私有内部类的超类，该内部类执行实际的编译。这个私有内部类实现了所需的 `no-arg` 构造函数，并存储了
    `readResolve()` 所需的对象。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The reason we use `Externalizable` instead of `Serializable` is to avoid breaking
    backward compatibility when changing any method signatures or member variables.
    `Externalizable` extends `Serializable` and allows control of how the object is
    read or written. For more information on this, refer to the excellent chapter
    on serialization in Josh Bloch's book, *Effective Java, 2nd Edition*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `Externalizable` 而不是 `Serializable` 的原因是避免在更改任何方法签名或成员变量时破坏向后兼容性。`Externalizable`
    扩展了 `Serializable` 并允许控制对象是如何被读取或写入的。有关更多信息，请参阅 Josh Bloch 的书 *Effective Java,
    2nd Edition* 中的优秀章节。
- en: '`BaseClassifier<E>` is the foundational classifier interface, with `E` being
    the type of object being classified in LingPipe. Look at the Javadoc to see the
    range of classifiers that implements the interface—there are 10 of them. Deserializing
    to `BaseClassifier<E>` hides a good bit of complexity, which we will explore later
    in the *How to serialize a LingPipe object – classifier example* recipe in this
    chapter.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseClassifier<E>` 是 LingPipe 的基础分类器接口，其中 `E` 是在 LingPipe 中被分类的对象的类型。查看 Javadoc
    以了解实现该接口的分类器的范围——共有 10 个。将序列化到 `BaseClassifier<E>` 中隐藏了很多复杂性，我们将在本章的 *如何序列化 LingPipe
    对象 – 分类器示例* 菜谱中稍后探讨。'
- en: 'The last line calls a utility method, which we will use frequently in this
    book:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行调用了一个实用方法，我们将在本书中经常使用：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This method handles interactions with the command line. The code is in `src/com/lingpipe/cookbook/Util.java`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法处理与命令行的交互。代码位于 `src/com/lingpipe/cookbook/Util.java`：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once the string is read in from the console, then `classifier.classify(input)`
    is called, which returns `Classification`. This, in turn, provides a `String`
    label that is printed out. That's it! You have run a classifier.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从控制台读取字符串，就会调用 `classifier.classify(input)`，它返回 `Classification`。然后，这会提供一个
    `String` 标签并打印出来。就这样！你已经运行了一个分类器。
- en: Getting confidence estimates from a classifier
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从分类器获取置信度估计
- en: Classifiers tend to be a lot more useful if they give more information about
    how confident they are of the classification—this is usually a score or a probability.
    We often threshold classifiers to help fit the performance requirements of an
    installation. For example, if it was vital that the classifier never makes a mistake,
    then we could require that the classification be very confident before committing
    to a decision.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分类器提供了更多关于它们对分类的置信度的信息，那么它们通常更有用——这通常是一个分数或概率。我们经常设置分类器的阈值，以帮助满足安装的性能要求。例如，如果分类器永远不犯错误至关重要，那么我们可以在做出决定之前要求分类非常自信。
- en: 'LingPipe classifiers exist on a hierarchy based on the kinds of estimates they
    provide. The backbone is a series of interfaces—don''t freak out; it is actually
    pretty simple. You don''t need to understand it now, but we do need to write it
    down somewhere for future reference:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: LingPipe 分类器基于它们提供的估计类型存在一个层次结构。其核心是一系列接口——不要惊慌；实际上它相当简单。你现在不需要理解它，但我们确实需要将其记录下来以供将来参考：
- en: '`BaseClassifier<E>`: This is just your basic classifier of objects of type
    `E`. It has a `classify()` method that returns a classification, which in turn
    has a `bestCategory()` method and a `toString()` method that is of some informative
    use.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BaseClassifier<E>`：这只是你的基本分类器，用于类型为 `E` 的对象。它有一个 `classify()` 方法，该方法返回一个分类，该分类又有一个
    `bestCategory()` 方法和 `toString()` 方法，这些方法具有一定的信息用途。'
- en: '`RankedClassifier<E> extends BaseClassifier<E>`: The `classify()` method returns
    `RankedClassification`, which extends `Classification` and adds methods for `category(int
    rank)` that says what the 1st to *n*th classifications are. There is also a `size()`
    method that indicates how many classifications there are.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RankedClassifier<E> extends BaseClassifier<E>`：`classify()`方法返回`RankedClassification`，它扩展了`Classification`并添加了`category(int
    rank)`方法，该方法说明了第1到*n*个分类是什么。还有一个`size()`方法，表示有多少个分类。'
- en: '`ScoredClassifier<E> extends RankedClassifier<E>`: The returned `ScoredClassification`
    adds a `score(int rank)` method.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ScoredClassifier<E> extends RankedClassifier<E>`：返回的`ScoredClassification`添加了一个`score(int
    rank)`方法。'
- en: '`ConditionalClassifier<E> extends RankedClassifier<E>`: `ConditionalClassification`
    produced by this has the property that the sum of scores for all categories must
    sum to 1 as accessed via the `conditionalProbability(int rank)` method and `conditionalProbability(String
    category)`. There''s more; you can read the Javadoc for this. This classification
    will be the work horse of the book when things get fancy, and we want to know
    the confidence that the tweet is English versus the tweet is Japanese versus the
    tweet is Spanish. These estimates will have to sum to 1.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConditionalClassifier<E> extends RankedClassifier<E>`：由这个产生的`ConditionalClassification`具有这样一个属性，即所有类别的分数之和必须通过`conditionalProbability(int
    rank)`方法和`conditionalProbability(String category)`方法访问，总和为1。还有更多；你可以阅读这个的Javadoc。当事情变得复杂时，这种分类将成为本书的工作马，我们想知道推文是英语、日语还是西班牙语的置信度。这些估计之和必须为1。'
- en: '`JointClassifier<E> extends ConditionalClassifier<E>`: This provides `JointClassification`
    of the input and category in the space of all the possible inputs, and all such
    estimates sum to 1\. This is a sparse space, so values are log based to avoid
    underflow errors. We don''t see a lot of use of this estimate directly in production.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JointClassifier<E> extends ConditionalClassifier<E>`：这提供了输入和类别在所有可能输入空间中的`JointClassification`，并且所有这样的估计之和为1。这是一个稀疏空间，因此值是基于对数来避免下溢错误的。我们在生产中很少直接使用这个估计。'
- en: It is obvious that there has been a great deal of thought put into the classification
    stack presented. This is because huge numbers of industrial NLP problems are handled
    by a classification system in the end.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，对所提出的分类栈进行了大量的思考。这是因为大量的工业级自然语言处理问题最终都是由分类系统处理的。
- en: It turns out that our simplest classifier—in some arbitrary sense of simple—produces
    the richest estimates, which are joint classifications. Let's dive in.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，我们最简单的分类器——在某种任意意义上的简单——产生了最丰富的估计，即联合分类。让我们深入探讨。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In the previous recipe, we blithely deserialized to `BaseClassifier<String>`
    that hid all the details of what was going on. The reality is a bit more complex
    than suggested by the hazy abstract class. Note that the file on disk that was
    loaded is named `3LangId.LMClassifier`. By convention, we name serialized models
    with the type of object it will deserialize to, which, in this case, is `LMClassifier`,
    and it extends `BaseClassifier`. The most specific typing for the classifier is:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，我们轻率地反序列化为`BaseClassifier<String>`，这隐藏了所有正在发生的事情的细节。实际上，情况比模糊的抽象类所暗示的要复杂得多。请注意，加载到磁盘上的文件被命名为`3LangId.LMClassifier`。按照惯例，我们用将要反序列化的对象类型来命名序列化模型，在这种情况下，是`LMClassifier`，它扩展了`BaseClassifier`。对于分类器的最具体类型是：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The cast to `LMClassifier<CompiledNGramBoundaryLM, MultivariateDistribution>`
    specifies the type of distribution to be `MultivariateDistribution`. The Javadoc
    for `com.aliasi.stats.MultivariateDistribution` is quite explicit and helpful
    in describing what this is.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将`LMClassifier<CompiledNGramBoundaryLM, MultivariateDistribution>`转换为类型指定了分布类型为`MultivariateDistribution`。`com.aliasi.stats.MultivariateDistribution`的Javadoc非常明确且有助于描述这是什么。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`MultivariateDistribution` implements a discrete distribution over a finite
    set of outcomes, numbered consecutively from zero.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultivariateDistribution`实现了一个离散分布，该分布覆盖了有限个结果，这些结果从零开始连续编号。'
- en: The Javadoc goes into a lot of detail about `MultivariateDistribution`, but
    it basically means that we can have an n-way assignment of probabilities that
    sum to 1.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc对`MultivariateDistribution`进行了大量的详细说明，但基本上意味着我们可以有一个n路概率分配，这些概率之和为1。
- en: 'The next class in the cast is for `CompiledNGramBoundaryLM`, which is the "memory"
    of the `LMClassifier`. In fact, each language gets its own. This means that English
    will have a separate language model from Spanish and so on. There are eight different
    kinds of language models that could have been used as this part of the classifier—consult
    the Javadoc for the `LanguageModel` interface. Each **language model** (**LM**)
    has the following properties:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The LM will provide a probability that it generated the text provided. It is
    robust against data that it has not seen before, in the sense that it won't crash
    or give a zero probability. Arabic just comes across as a sequence of unknown
    characters for our example.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sum of all the possible character sequence probabilities of any length is
    1 for boundary LMs. Process LMs sum the probability to 1 over all sequences of
    the same length. Look at the Javadoc for how this bit of math is done.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each language model has no knowledge of data outside of its category.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The classifier keeps track of the marginal probability of the category and factors
    this into the results for the category. Marginal probability is saying that we
    tend to see two-thirds English, one-sixth Spanish, and one-sixth Japanese in Disney
    tweets. This information is combined with the LM estimates.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The LM is a compiled version of `LanguageModel.Dynamic` that we will cover in
    the later recipes that discuss training.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LMClassifier` that is constructed wraps these components into a classifier.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, the interface saves the day with a more aesthetic deserialization:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The interface hides the guts of the implementation nicely and this is what we
    are going with in the example program.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is the first time we start peeling away from what classifiers can
    do, but first, let''s play with it a bit:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Get your magic shell genie to conjure a command prompt with a Java interpreter
    and type:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will enter the same data as we did earlier:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As described, `JointClassification` carries through all the classification
    metrics in the hierarchy rooted at `Classification`. Each level of classification
    shown as follows adds to the classifiers preceding it:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`Classification` provides the first best category as the rank 0 category.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RankedClassification` adds an ordering of all the possible categories with
    a lower rank corresponding to greater likelihood of the category. The `rank` column
    reflects this ordering.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ScoredClassification` adds a numeric score to the ranked output. Note that
    scores might or might not compare well against other strings being classified
    depending on the type of classifier. This is the column labeled `Score`. To understand
    the basis of this score, consult the relevant Javadoc.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConditionalClassification` further refines the score by making it a category
    probability conditioned on the input. The probabilities of all categories will
    sum up to 1\. This is the column labeled `P(Category|Input)`, which is the traditional
    way to write *probability of the category given the input*.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConditionalClassification`通过将其作为输入条件下的类别概率来进一步细化分数。所有类别的概率之和为1。这是标记为`P(Category|Input)`的列，这是传统上写*给定输入的类别概率*的方式。'
- en: '`JointClassification` adds the log2 (log base 2) probability of the input and
    the category—this is the joint probability. The probabilities of all categories
    and inputs will sum up to 1, which is a very large space indeed with very low
    probabilities assigned to any pair of category and string. This is why log2 values
    are used to prevent numerical underflow. This is the column labeled `log 2 P(Category,
    Input)`, which is translated as *the log**2* *probability of the category and
    input*.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JointClassification`添加了输入和类别的log2（以2为底的对数）概率——这是联合概率。所有类别和输入的概率之和为1，这实际上是一个非常大的空间，任何一对类别和字符串的概率都分配得非常低。这就是为什么使用log2值来防止数值下溢。这是标记为`log
    2 P(Category, Input)`的列，它被翻译为*类别和输入的对数**2*概率*。'
- en: Look at the Javadoc for the `com.aliasi.classify` package for more information
    on the metrics and classifiers that implement them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 查看关于实现这些度量标准和分类器的`com.aliasi.classify`包的Javadoc以获取更多信息。
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The code is in `src/com/lingpipe/cookbook/chapter1/RunClassifierJoint.java`,
    and it deserializes to a `JointClassifier<CharSequence>`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 代码位于`src/com/lingpipe/cookbook/chapter1/RunClassifierJoint.java`中，并反序列化为`JointClassifier<CharSequence>`：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It makes a call to `Util.consoleInputPrintClassification(classifier)`, which
    minimally differs from `Util.consoleInputBestCategory(classifier)`, in that it
    uses the `toString()` method of classification to print. The code is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 它调用`Util.consoleInputPrintClassification(classifier)`，这与`Util.consoleInputBestCategory(classifier)`最小不同之处在于它使用分类的`toString()`方法来打印。代码如下：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We got a richer output than we expected, because the type is `Classification`,
    but the `toString()` method will be applied to the runtime type `JointClassification`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了比预期的更丰富的输出，因为类型是`Classification`，但`toString()`方法将被应用于运行时类型`JointClassification`。
- en: See also
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: There is detailed information in [Chapter 6](part0075_split_000.html#page "Chapter 6. String
    Comparison and Clustering"), *Character Language Models* of *Text Analysis with
    LingPipe 4*, by *Bob Carpenter* and *Breck Baldwin*, *LingPipe Publishing* ([http://alias-i.com/lingpipe-book/lingpipe-book-0.5.pdf](http://alias-i.com/lingpipe-book/lingpipe-book-0.5.pdf))
    on language models.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Bob Carpenter和Breck Baldwin合著的《使用LingPipe 4进行文本分析》的*第6章*（[part0075_split_000.html#page
    "第6章. 字符语言模型"](part0075_split_000.html#page "第6章. 字符语言模型")）中，有关于语言模型的详细信息，由*LingPipe
    Publishing*出版([http://alias-i.com/lingpipe-book/lingpipe-book-0.5.pdf](http://alias-i.com/lingpipe-book/lingpipe-book-0.5.pdf))。
- en: Getting data from the Twitter API
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Twitter API获取数据
- en: We use the popular `twitter4j` package to invoke the Twitter Search API, and
    search for tweets and save them to disk. The Twitter API requires authentication
    as of Version 1.1, and we will need to get authentication tokens and save them
    in the `twitter4j.properties` file before we get started.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用流行的`twitter4j`包来调用Twitter搜索API，并搜索推文并将它们保存到磁盘。自版本1.1起，Twitter API需要身份验证，在我们开始之前，我们需要获取身份验证令牌并将它们保存到`twitter4j.properties`文件中。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'If you don''t have a Twitter account, go to [twitter.com/signup](http://twitter.com/signup)
    and create an account. You will also need to go to [dev.twitter.com](http://dev.twitter.com)
    and sign in to enable yourself for the developer account. Once you have a Twitter
    login, we''ll be on our way to creating the Twitter OAuth credentials. Be prepared
    for this process to be different from what we are presenting. In any case, we
    will supply example results in the `data` directory. Let''s now create the Twitter
    OAuth credentials:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有Twitter账户，请访问[twitter.com/signup](http://twitter.com/signup)并创建一个账户。你还需要访问[dev.twitter.com](http://dev.twitter.com)并登录以启用开发者账户。一旦你有了Twitter登录，我们就可以开始创建Twitter
    OAuth凭据了。请准备好这个过程可能与我们所展示的不同。无论如何，我们将在`data`目录中提供示例结果。现在让我们创建Twitter OAuth凭据：
- en: Log in to [dev.twitter.com](http://dev.twitter.com).
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到[dev.twitter.com](http://dev.twitter.com)。
- en: Find the little pull-down menu next to your icon on the top bar.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部栏图标旁边找到那个小下拉菜单。
- en: Choose **My Applications**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**我的应用**。
- en: Click on **Create a new application**.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建一个新应用**。
- en: Fill in the form and click on **Create a Twitter application**.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格并点击**创建Twitter应用**。
- en: The next page contains the OAuth settings.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一页包含OAuth设置。
- en: Click on the **Create my access token** link.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建我的访问令牌**链接。
- en: You will need to copy **Consumer key** and **Consumer secret**.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要复制**消费者密钥**和**消费者密钥密钥**。
- en: You will also need to copy **Access token** and **Access token secret**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要复制**访问令牌**和**访问令牌密钥**。
- en: 'These values should go into the `twitter4j.properties` file in the appropriate
    locations. The properties are as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些值应放入`twitter4j.properties`文件中的适当位置。属性如下：
- en: '[PRE17]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now, we''re ready to access Twitter and get some search data using the following
    steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好使用以下步骤访问Twitter并获取一些搜索数据：
- en: 'Go to the directory of this chapter and run the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入本章目录并运行以下命令：
- en: '[PRE18]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code displays the output file (in this case, a default value). Supplying
    a path as an argument will write to this file. Then, type in your query at the
    prompt:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码显示输出文件（在这种情况下，默认值）。提供路径作为参数将写入此文件。然后，在提示符中输入您的查询：
- en: '[PRE19]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The code then queries Twitter and reports every 100 tweets found (output truncated):'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码随后查询Twitter，并报告每找到100条推文（输出被截断）：
- en: '[PRE20]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This program uses the search query, searches Twitter for the term, and writes
    the output (limited to 1500 tweets) to the `.csv` file name that you specified
    on the command line or uses a default.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序使用搜索查询，搜索Twitter中的术语，并将输出（限制为1500条推文）写入您在命令行中指定的`.csv`文件名或使用默认值。
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The code uses the `twitter4j` library to instantiate `TwitterFactory` and searches
    Twitter using the user-entered query. The start of `main()` at `src/com/lingpipe/cookbook/chapter1/TwitterSearch.java`
    is:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用`twitter4j`库实例化`TwitterFactory`，并使用用户输入的查询搜索Twitter。`src/com/lingpipe/cookbook/chapter1/TwitterSearch.java`中`main()`的开始部分如下：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code gets the outfile, supplying a default if none is provided,
    and takes the query from the command line.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码获取输出文件，如果没有提供则使用默认值，并从命令行获取查询。
- en: 'The following code sets up the query according to the vision of the twitter4j
    developers. For more information on this process, read their Javadoc. However,
    it should be fairly straightforward. In order to make our result set more unique,
    you''ll notice that when we create the query string, we will filter out retweets
    using the `-filter:retweets` option. This is only somewhat effective; see the
    *Eliminate near duplicates with the Jaccard distance* recipe later in this chapter
    for a more complete solution:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码根据twitter4j开发者的愿景设置查询。有关此过程的更多信息，请阅读他们的Javadoc。然而，这应该是相当直接的。为了使我们的结果集更加独特，您会注意到，当我们创建查询字符串时，我们将使用`-filter:retweets`选项过滤掉重复推文。这仅是部分有效；请参阅本章后面的**使用Jaccard距离消除近似重复**配方以获得更完整的解决方案：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will get the following result:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下结果：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The list of tweets is then written to a `.csv` file using the `Util.writeCsvAddHeader`
    method:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`Util.writeCsvAddHeader`方法将推文列表写入`.csv`文件：
- en: '[PRE26]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We will be using this `.csv` file to run the language ID test in the next section.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个`.csv`文件在下一节中运行语言ID测试。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more details on using the Twitter API and twitter4j, please go to their
    documentation pages:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用Twitter API和twitter4j的更多详细信息，请访问他们的文档页面：
- en: '[http://twitter4j.org/javadoc/](http://twitter4j.org/javadoc/)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://twitter4j.org/javadoc/](http://twitter4j.org/javadoc/)'
- en: '[https://dev.twitter.com/docs](https://dev.twitter.com/docs)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://dev.twitter.com/docs](https://dev.twitter.com/docs)'
- en: Applying a classifier to a .csv file
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将分类器应用到.csv文件
- en: Now, we can test our language ID classifier on the data we downloaded from Twitter.
    This recipe will show you how to run the classifier on the `.csv` file and will
    set the stage for the evaluation step in the next recipe.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以测试我们从Twitter下载的数据上的语言ID分类器。这个配方将向您展示如何在`.csv`文件上运行分类器，并为下一配方中的评估步骤做好准备。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Applying a classifier to the `.csv` file is straightforward! Just perform the
    following steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将分类器应用到`.csv`文件上非常简单！只需执行以下步骤：
- en: 'Get a command prompt and run:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取命令提示符并运行：
- en: '[PRE27]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will use the default CSV file from the `data/disney.csv` distribution,
    run over each line of the CSV file, and apply a language ID classifier from `models/
    3LangId.LMClassifier` to it:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将使用`data/disney.csv`分布的默认CSV文件，遍历CSV文件的每一行，并对其应用来自`models/ 3LangId.LMClassifier`的语言ID分类器：
- en: '[PRE28]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can also specify the input as the first argument and the classifier as the
    second one.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以指定输入作为第一个参数，分类器作为第二个参数。
- en: How it works…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'We will deserialize a classifier from the externalized model that was described
    in the previous recipes. Then, we will iterate through each line of the `.csv`
    file and call the classify method of the classifier. The code in `main()` is:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将反序列化一个来自之前配方中描述的外部化模型的分类器。然后，我们将遍历`.csv`文件的每一行，并调用分类器的classify方法。`main()`中的代码如下：
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The preceding code builds on the previous recipes with nothing particularly
    new. `Util.readCsvRemoveHeader`, shown as follows, just skips the first line of
    the `.csv` file before reading from disk and returning the rows that have non-null
    values and non-empty strings in the `TEXT_OFFSET` position:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码基于之前的配方，没有特别新的内容。以下所示的`Util.readCsvRemoveHeader`只是跳过了`.csv`文件的第一行，然后从磁盘读取并返回具有非空值和非空字符串的`TEXT_OFFSET`位置的行：
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Evaluation of classifiers – the confusion matrix
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类器的评估 – 混淆矩阵
- en: Evaluation is incredibly important in building solid NLP systems. It allows
    developers and management to map a business need to system performance, which,
    in turn, helps communicate system improvement to vested parties. "Well, uh, the
    system seems to be doing better" does not hold the gravitas of "Recall has improved
    20 percent, and the specificity is holding well with 50 percent more training
    data".
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 评估在构建坚实的NLP系统中至关重要。它允许开发人员和管理人员将业务需求映射到系统性能，反过来，这有助于将系统改进传达给利益相关者。“嗯，嗯，系统似乎做得更好”并不像“召回率提高了20%，并且特异性在50%更多训练数据的情况下保持良好”那样有分量。
- en: This recipe provides the steps for the creation of truth or *gold standard*
    data and tells us how to use this data to evaluate the performance of our precompiled
    classifier. It is as simple as it is powerful.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方提供了创建真实或*黄金标准*数据的步骤，并告诉我们如何使用这些数据来评估我们预编译分类器的性能。它既简单又强大。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: You might have noticed the headers from the output of the CSV writer and the
    suspiciously labeled column, `TRUTH`. Now, we get to use it. Load up the tweets
    we provided earlier or convert your data into the format used in our `.csv` format.
    An easy way to get novel data is to run a query against Twitter with a multilingual
    friendly query such as `Disney`, which is our default supplied data.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了CSV编写器输出中的标题以及可疑标记的列`TRUTH`。现在，我们可以使用它了。加载我们之前提供的推文或将你的数据转换为我们的`.csv`格式。获取新数据的简单方法是对Twitter运行一个多语言友好的查询，例如`Disney`，这是我们默认提供的数据。
- en: 'Open the CSV file and annotate the language you think the tweet is in for at
    least 10 examples each of *e* for English and *n* for non-English. There is a
    `data/disney_e_n.csv` file in the distribution; you can use this if you don''t
    want to deal with annotating data. If you are not sure about a tweet, feel free
    to ignore it. Unannotated data is ignored. Have a look at the following screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 打开CSV文件，为至少10个英语的*e*和非英语的*n*标注你认为推文所使用的语言。在分发中有一个`data/disney_e_n.csv`文件；如果你不想处理标注数据，可以使用这个文件。如果你对某个推文不确定，请随意忽略它。未标注的数据将被忽略。请看下面的截图：
- en: '![Getting ready](img/00002.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/00002.jpeg)'
- en: Screenshot of the spreadsheet with human annotations for English 'e' and non-English
    'n'. It is known as truth data or gold standard data because it represents the
    phenomenon correctly.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 包含对英语'e'和非英语'n'的人类标注的电子表格截图。它被称为真实数据或黄金标准数据，因为它正确地代表了现象。
- en: Often, this data is called **gold standard data**, because it represents the
    truth. The "gold" in "gold standard" is quite literal. Back it up and store it
    with longevity in mind—it is most likely that it is the single-most valuable collection
    of bytes on your hard drive, because it is expensive to produce in any quantity
    and the cleanest articulation of what is being done. Implementations come and
    go; evaluation data lives on forever. The John Smith corpus from the *The John
    Smith problem* recipe, in [Chapter 7](part0085_split_000.html#page "Chapter 7. Finding
    Coreference Between Concepts/People"), *Finding Coreference Between Concepts/People*,
    is the canonical evaluation corpus for that particular problem and lives on as
    the point of comparison for a line of research that started in 1997\. The original
    implementation is long forgotten.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这类数据被称为**黄金标准数据**，因为它代表了真相。在“黄金标准”中的“黄金”字面意思非常明显。备份并存储它时，要考虑到其持久性——它很可能是你硬盘上最有价值的字节集合，因为它以任何数量生产都很昂贵，并且是对正在进行的事情最清晰的阐述。实现方式会来来去去；评估数据将永远存在。来自*《约翰·史密斯问题》*食谱的约翰·史密斯语料库，在[第7章](part0085_split_000.html#page
    "第7章. 找到概念/人物之间的指代关系")*找到概念/人物之间的指代关系*，是该特定问题的标准评估语料库，并且作为始于1997年的研究系列的比较基准而存在。原始实现已经被人遗忘。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to evaluate the classifiers:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以评估分类器：
- en: 'Enter the following in the command prompt; this will run the default classifier
    on the texts in the default gold standard data. Then, it will compare the classifier''s
    best category against what was annotated in the `TRUTH` column:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中输入以下内容；这将运行默认分类器在默认黄金标准数据中的文本。然后，它将比较分类器的最佳类别与`TRUTH`列中标注的内容：
- en: '[PRE31]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This class will then produce the confusion matrix:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此类将生成混淆矩阵：
- en: '[PRE32]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The confusion matrix is aptly named since it confuses almost everyone initially,
    but it is, without a doubt, the best representation of classifier output, because
    it is very difficult to hide bad classifier performance with it. In other words,
    it is an excellent BS detector. It is the unambiguous view of what the classifier
    got right, what it got wrong, and what it thought was the right answer.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 混淆矩阵的命名非常恰当，因为它最初几乎会让人困惑，但毫无疑问，它是分类器输出的最佳表示，因为它很难用它来隐藏糟糕的分类器性能。换句话说，它是一个出色的BS检测器。它明确地展示了分类器正确识别的内容、错误识别的内容以及它认为正确的答案。
- en: The sum of each row represents the items that are known by truth/reference/gold
    standard to belong to the category. For English (e) there were 11 tweets. Each
    column represents what the system thought was in the same labeled category. For
    English (e), the system thought 11 tweets were English and none were non-English
    (n). For the non-English category (n), there are 10 cases in truth, of which the
    classifier thought 1 was English (incorrectly) and 9 were non-English (correctly).
    Perfect system performance will have zeros in all the cells that are not located
    diagonally, from the top-left corner to the bottom-right corner.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 每行的总和代表根据真相/参考/黄金标准已知属于该类别的项目。对于英语（e），有11条推文。每一列代表系统认为属于同一标记类别的内容。对于英语（e），系统认为有11条推文是英语，没有非英语（n）。对于非英语类别（n），在真相中有10个案例，其中分类器认为1个是英语（错误地）和9个是非英语（正确地）。完美系统性能将在非对角线上的所有单元格中为零，从左上角到底右角。
- en: The real reason it is called a confusion matrix is that it is relatively easy
    to see categories that the classifier is confusing. For example, British English
    and American English would likely be highly confusable. Also, confusion matrices
    scale to multiple categories quite nicely, as will be seen later. Visit the Javadoc
    for a more detailed explanation of the confusion matrix—it is well worth mastering.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上被称为混淆矩阵的原因是，它相对容易看出分类器混淆的类别。例如，英国英语和美国英语可能会非常容易混淆。此外，混淆矩阵可以很好地扩展到多个类别，这一点将在后面看到。访问Javadoc以获取对混淆矩阵的更详细解释——掌握它是值得的。
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Next, the language model and the `.csv` data will be loaded. The method differs
    slightly from the `Util.CsvRemoveHeader` explanation, in that it only accepts
    rows that have a value in the `TRUTH` column—see `src/com/lingpipe/cookbook/Util.java`
    if this is not clear:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将加载语言模型和`.csv`数据。与`Util.CsvRemoveHeader`解释略有不同，因为它只接受`TRUTH`列中有值的行——如果这还不清楚，请参阅`src/com/lingpipe/cookbook/Util.java`：
- en: '[PRE33]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, the categories will be found:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将找到类别：
- en: '[PRE34]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The method will accumulate all the category labels from the `TRUTH` column.
    The code is simple and is shown here:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法将累积来自 `TRUTH` 列的所有类别标签。代码很简单，如下所示：
- en: '[PRE35]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The code will be useful when we run arbitrary data, where the labels are not
    known at compile time.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行任意数据，其中标签在编译时未知时，此代码将很有用。
- en: 'Then, we will set up `BaseClassfierEvaluator`. This requires the classifier
    to be evaluated. The categories and a `boolean` value that controls whether inputs
    are stored in the classifier for construction will also be set up:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将设置 `BaseClassfierEvaluator`。这需要评估分类器。还将设置类别和一个 `boolean` 值，该值控制是否在分类器中存储输入以进行构建：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note that the classifier can be null and specified at a later time; the categories
    must exactly match those produced by the annotation and the classifier. We will
    not bother configuring the evaluator to store the inputs, because we are not going
    to use this capability in this recipe. See the *Viewing error categories – false
    positives* recipe for an example in which the inputs are stored and accessed.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，分类器可以是空的，并且可以在稍后指定；类别必须与注释和分类器产生的类别完全匹配。我们不会麻烦配置评估器来存储输入，因为我们在这个配方中不会使用这个功能。有关输入存储和访问的示例，请参阅*查看错误类别
    - 假阳性*配方。
- en: 'Next, we will do the actual evaluation. The loop will iterate over each row
    of the information in the `.csv` file, build a `Classified<CharSequence>`, and
    pass it off to the evaluator''s `handle()` method:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进行实际的评估。循环将遍历 `.csv` 文件中的每一行信息，构建一个 `Classified<CharSequence>`，并将其传递给评估器的
    `handle()` 方法：
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The fourth line will create a classification object with the value from the
    truth annotation—*e* or *n* in this case. This is the same type as the one `BaseClassifier<E>`
    returns for the `bestCategory()` method. There is no special type for truth annotations.
    The next line adds in the text that the classification applies to and we get a
    `Classified<CharSequence>` object.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 第四行将创建一个分类对象，其值来自真实注释——在本例中是 *e* 或 *n*。这与 `BaseClassifier<E>` 为 `bestCategory()`
    方法返回的类型相同。没有为真实注释设置特殊类型。下一行添加了分类所应用的文本，我们得到一个 `Classified<CharSequence>` 对象。
- en: The last line of the loop will apply the handle method to the created classified
    object. The evaluator assumes that data supplied to its handle method is a truth
    annotation, which is handled by extracting the data being classified, applying
    the classifier to this data, getting the resulting `firstBest()` classification,
    and finally noting whether the classification matches that of what was just constructed
    with the truth. This happens for each row of the `.csv` file.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的最后一行将应用处理方法到创建的分类对象上。评估器假定提供给其处理方法的 数据是真实注释，它通过提取正在分类的数据，将分类器应用于这些数据，获取结果
    `firstBest()` 分类，并最终记录分类是否与刚刚用真实数据构造的分类相匹配。这发生在 `.csv` 文件的每一行上。
- en: 'Outside the loop, we will print out the confusion matrix with `Util.createConfusionMatrix()`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环外部，我们将使用 `Util.createConfusionMatrix()` 打印出混淆矩阵：
- en: '[PRE38]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Examining this code is left to the reader. That's it; we have evaluated our
    classifier and printed out the confusion matrix.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 检查此代码留给了读者。就是这样；我们已经评估了我们的分类器并打印出了混淆矩阵。
- en: There's more...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The evaluator has a complete `toString()` method that is a bit of a fire hose
    for information on just how well your classifier did. Those aspects of the output
    will be covered in later recipes. The Javadoc is quite extensive and well worth
    reading.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 评估器有一个完整的 `toString()` 方法，它提供了关于您的分类器表现如何的大量信息。输出中的这些方面将在后面的配方中介绍。Javadoc 非常详尽，值得一读。
- en: Training your own language model classifier
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练自己的语言模型分类器
- en: The world of NLP really opens up when classifiers are customized. This recipe
    provides details on how to customize a classifier by collecting examples for the
    classifier to learn from—this is called training data. It is also called gold
    standard data, truth, or ground truth. We have some from the previous recipe that
    we will use.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当分类器被定制时，NLP 的世界真正地打开了。这个配方提供了如何通过收集分类器学习示例来定制分类器的详细信息——这被称为训练数据。它也被称为黄金标准数据、真实数据或基准数据。我们有一些来自前面的配方，我们将使用它们。
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will create a customized language ID classifier for English and other languages.
    Creation of training data involves getting access to text data and then annotating
    it for the categories of the classifier—in this case, annotation is the language.
    Training data can come from a range of sources. Some possibilities include:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为英语和其他语言创建一个定制的语言 ID 分类器。创建训练数据涉及获取文本数据，然后为分类器的类别进行标注——在这种情况下，标注是语言。训练数据可以来自各种来源。一些可能性包括：
- en: Gold standard data such as the one created in the preceding evaluation recipe.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准数据，如前述评估配方中创建的数据。
- en: Data that is somehow already annotated for the categories you care about. For
    example, Wikipedia has language-specific versions, which make easy pickings to
    train up a language ID classifier. This is how we created the `3LangId.LMClassifier`
    model.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已经为你关心的类别进行标注的数据。例如，维基百科有针对特定语言的版本，这使得训练语言 ID 分类器变得容易。这就是我们创建 `3LangId.LMClassifier`
    模型的方式。
- en: Be creative—where is the data that helps guide a classifier in the right direction?
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要有创意——哪里是帮助分类器正确引导的数据？
- en: Language ID doesn't require much data to work well, so 20 tweets per language
    will start to reliably distinguish strongly different languages. The amount of
    training data will be driven by evaluation—more data generally improves performance.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 语言 ID 不需要太多数据就能很好地工作，因此每种语言 20 条推文就可以可靠地区分不同的语言。训练数据量将由评估驱动——更多的数据通常可以提高性能。
- en: The example assumes that around 10 tweets of English and 10 non-English tweets
    have been annotated by people and put in `data/disney_e_n.csv`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 示例假设大约有 10 条英文推文和 10 条非英文推文由人们标注并放入 `data/disney_e_n.csv`。
- en: How to do it...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In order to train your own language model classifier, perform the following
    steps:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为了训练你自己的语言模型分类器，执行以下步骤：
- en: 'Fire up a terminal and type the following:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个终端并输入以下内容：
- en: '[PRE39]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, type some English in the command prompt, perhaps, a Kurt Vonnegut quotation,
    to see the resulting `JointClassification`. See the *Getting confidence estimates
    from a classifier* recipe for the explanation of the following output:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在命令提示符中输入一些英文，比如，库尔特·冯内古特的引言，以查看生成的 `JointClassification`。请参阅 *从分类器获取置信度估计*
    的配方，以了解以下输出的解释：
- en: '[PRE40]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Type in some non-English, such as the Spanish title of Borge''s *The Garden
    of the Forking Paths*:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一些非英文，例如，博尔赫斯的《分叉之路》的西班牙语标题：
- en: '[PRE41]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The program is in `src/com/lingpipe/cookbook/chapter1/TrainAndRunLMClassifier.java`;
    the contents of the `main()` method start with:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 程序位于 `src/com/lingpipe/cookbook/chapter1/TrainAndRunLMClassifier.java`；`main()`
    方法的内文开始如下：
- en: '[PRE42]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The preceding code gets the contents of the `.csv` file and then extracts the
    list of categories that were annotated; these categories will be all the non-empty
    strings in the annotation column.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码获取 `.csv` 文件的内容，然后提取标注的类别列表；这些类别将是标注列中的所有非空字符串。
- en: 'The following `DynamicLMClassifier` is created using a static method that requires
    the array of categories and `int`, which is the order of the language models.
    With an order of 3, the language model will be trained on all 1 to 3 character
    sequences of the text training data. So "I luv Disney" will produce training instances
    of "I", "I ", "I l", " l", " lu", "u", "uv", "luv", and so on. The `createNGramBoundary`
    method appends a special token to the beginning and end of each text sequence;
    this token can help if the beginnings or ends are informative for classification.
    Most text data is sensitive to beginnings/ends, so we will choose this model:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 `DynamicLMClassifier` 是通过一个静态方法创建的，该方法需要类别数组以及 `int` 类型的语言模型顺序。当顺序为 3 时，语言模型将在所有
    1 到 3 个字符序列的文本训练数据上训练。因此，“I luv Disney”将产生“ I”，“ I ”，“ I l”，“ l”，“ lu”，“ u”，“
    uv”，“ luv”等训练实例。`createNGramBoundary` 方法将一个特殊标记添加到每个文本序列的开始和结束处；如果序列的开始或结束对分类有信息性，这个标记可能会有所帮助。大多数文本数据对开始/结束都很敏感，因此我们将选择这个模型：
- en: '[PRE43]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The following code iterates over the rows of training data and creates `Classified<CharSequence>`
    in the same way as shown in the *Evaluation of classifiers – the confusion matrix*
    recipe for evaluation. However, instead of passing the `Classified` object to
    an evaluation handler, it is used to train the classifier.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码遍历训练数据的行，并创建 `Classified<CharSequence>`，就像在 *分类器的评估——混淆矩阵* 配方中展示的评估方式一样。然而，它不是将
    `Classified` 对象传递给评估处理程序，而是用于训练分类器。
- en: '[PRE44]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'No further steps are necessary, and the classifier is ready for use by the
    console:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要进一步的操作，分类器已经准备好供控制台使用：
- en: '[PRE45]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: There's more...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Training and using the classifier can be interspersed for classifiers based
    on `DynamicLM`. This is generally not the case with other classifiers such as
    `LogisticRegression`, because they use all the data to compile a model that can
    carry out classifications.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于`DynamicLM`的分类器，训练和使用分类器可以交错进行。这通常不适用于其他分类器，如`LogisticRegression`，因为它们使用所有数据来编译一个可以进行分类的模型。
- en: 'There is another method for training the classifier that gives you more control
    over how the training goes. The following is the code snippet for this:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 存在另一种训练分类器的方法，它让你能更多地控制训练过程。以下是这个方法的代码片段：
- en: '[PRE46]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Alternatively, we can have the same effect with:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以用以下方法达到相同的效果：
- en: '[PRE47]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `train()` method allows an extra degree of control for training, because
    it allows for the count to be explicitly set. As we explore LingPipe classifiers,
    we will often see an alternate way of training that allows for some additional
    control beyond what the `handle()` method provides.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`train()`方法允许在训练过程中有额外的控制，因为它允许显式设置计数。当我们探索LingPipe分类器时，我们经常会看到一种允许进行一些额外控制的替代训练方法，这超出了`handle()`方法提供的控制范围。'
- en: Character-language model-based classifiers work very well for tasks where character
    sequences are distinctive. Language identification is an ideal candidate for this,
    but it can also be used for tasks such as sentiment, topic assignment, and question
    answering.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 基于字符语言模型的分类器在处理具有独特字符序列的任务中表现非常好。语言识别是这种任务的理想候选者，但它也可以用于情感分析、主题分配和问答等任务。
- en: See also
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The Javadoc for LingPipe's classifiers are quite extensive on the underlying
    math that drives the technology.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: LingPipe分类器的Javadoc对驱动该技术的底层数学进行了相当广泛的描述。
- en: How to train and evaluate with cross validation
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用交叉验证进行训练和评估
- en: 'The earlier recipes have shown how to evaluate classifiers with truth data
    and how to train with truth data but how about doing both? This great idea is
    called cross validation, and it works as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的食谱已经展示了如何使用真实数据进行分类器的评估和训练，但关于同时进行这两者呢？这个伟大的想法被称为交叉验证，它的工作方式如下：
- en: Split the data into *n* distinct sets or folds—the standard *n* is 10.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据分成*n*个不同的集合或折——标准的*n*是10。
- en: 'For *i* from 1 to *n*:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于从1到*n*的*i*：
- en: Train on the *n - 1* folds defined by the exclusion of fold *i*
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在排除折*i*的情况下，使用*n - 1*个折进行训练
- en: Evaluate on fold *i*
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*i*折上进行评估
- en: Report the evaluation results across all folds *i*.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 报告所有折*i*的评估结果。
- en: 'This is how most machine-learning systems are tuned for performance. The work
    flow is as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是大多数机器学习系统如何调整以获得性能。工作流程如下：
- en: See what the cross validation performance is.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看交叉验证的性能。
- en: Look at the error as determined by an evaluation metric.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看由评估指标确定的错误。
- en: Look at the actual errors—yes, the data—for insights into how the system can
    be improved.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看实际错误——是的，数据——以了解如何改进系统。
- en: Make some changes
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些更改
- en: Evaluate it again.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次评估它。
- en: Cross validation is an excellent way to compare different approaches to a problem,
    try different classifiers, motivate normalization approaches, explore feature
    enhancements, and so on. Generally, a system configuration that shows increased
    performance on cross validation will also show increased performance on new data.
    What cross validation does not do, particularly with active learning strategies
    discussed later, is reliably predict performance on new data. Always apply the
    classifier to new data before releasing production systems as a final sanity check.
    You have been warned.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉验证是对比不同问题解决方法、尝试不同的分类器、推动归一化方法、探索特征增强等的一种优秀方法。通常，在交叉验证中表现出更高性能的系统配置也会在新数据上表现出更高的性能。交叉验证不做的，尤其是在后面讨论的主动学习策略中，是可靠地预测新数据的性能。在发布生产系统之前，始终在新的数据上应用分类器作为最后的合理性检查。你已经收到警告了。
- en: Cross validation also imposes a negative bias compared to a classifier trained
    on all possible training data, because each fold is a slightly weaker classifier,
    in that it only has 90 percent of the data on 10 folds.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 与在所有可能的训练数据上训练的分类器相比，交叉验证施加了负偏差，因为每个折都是一个稍微弱一些的分类器，它在10个折上只有90%的数据。
- en: '*Rinse, lather, and repeat* is the mantra of building state-of-the-art NLP
    systems.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: “清洗、泡沫、重复”是构建最先进的NLP系统的咒语。
- en: Getting ready
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Note how different this approach is from other classic computer-engineering
    approaches that focus on developing against a functional specification driven
    by unit tests. This process is more about refining and adjusting the code to work
    better as determined by the evaluation metrics.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这种方法与其他经典计算机工程方法的不同，后者侧重于针对由单元测试驱动的功能规范进行开发。这个过程更多的是根据评估指标来精炼和调整代码，以使其工作得更好。
- en: How to do it...
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'To run the code, perform the following steps:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行代码，请执行以下步骤：
- en: 'Get to a command prompt and type:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并输入：
- en: '[PRE48]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The result will be:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将是：
- en: '[PRE49]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The preceding output will make more sense in the following section.
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述输出将在下一节中更有意义。
- en: How it works…
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This recipe introduces an `XValidatingObjectCorpus` object that manages cross
    validation. It is used heavily in training classifiers. Everything else should
    be familiar from the previous recipes. The `main()` method starts with:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方介绍了一个用于管理交叉验证的`XValidatingObjectCorpus`对象。它在训练分类器时被大量使用。其他所有内容都应该与之前的配方熟悉。`main()`方法从以下内容开始：
- en: '[PRE50]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The preceding code gets us the data from the default or a user-entered file.
    The next two lines introduce `XValidatingObjectCorpus`—the star of this recipe:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码从默认文件或用户输入的文件中获取数据。接下来的两行介绍了`XValidatingObjectCorpus`——本配方的明星：
- en: '[PRE51]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `numFolds` variable controls how the data that is just loaded will be partitioned—it
    will be in four partitions in this case. Now, we will look at the `Util.loadXValCorpus(truthData,
    numfolds)` subroutine:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`numFolds`变量控制刚刚加载的数据如何分区——在这种情况下，它将分为四个分区。现在，我们将查看`Util.loadXValCorpus(truthData,
    numfolds)`子程序：'
- en: '[PRE52]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`XValidatingObjectCorpus<E>` constructed will contain all the truth data in
    the form of `Objects E`. In this case, we are filling the corpus with the same
    object used to train and evaluate in the previous recipes in this chapter—`Classified<CharSequence>`.
    This will be handy, because we will be using the objects to both train and test
    our classifier. The `numFolds` parameter specifies how many partitions of the
    data to make. It can be changed later.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 构造的`XValidatingObjectCorpus<E>`将包含所有以`Objects E`形式存在的真实数据。在这种情况下，我们正在用本章之前配方中用于训练和评估的相同对象填充语料库—`Classified<CharSequence>`。这将很有用，因为我们将使用这些对象来训练和测试我们的分类器。`numFolds`参数指定要创建多少个数据分区。它可以在以后更改。
- en: The following `for` loop should be familiar, in that, it should iterate over
    all the annotated data and creates the `Classified<CharSequence>` object before
    applying the `corpus.handle()` method, which adds it to the corpus. Finally, we
    will return the corpus. It is worth taking a look at the Javadoc for `XValidatingObjectCorpus<E>`
    if you have any questions.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`for`循环应该很熟悉，因为它应该遍历所有已注释的数据，在应用`corpus.handle()`方法（该方法将其添加到语料库中）之前创建`Classified<CharSequence>`对象。最后，我们将返回语料库。如果您有任何问题，查看`XValidatingObjectCorpus<E>`的Javadoc可能会有所帮助。
- en: 'Returning to the body of `main()`, we will permute the corpus to mix the data,
    get the categories, and set up `BaseClassifierEvaluator<CharSequence>` with a
    null value where we supplied a classifier in a previous recipe:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到`main()`函数的主体，我们将对语料库进行排列以混合数据，获取类别，并在之前配方中提供分类器的地方设置`BaseClassifierEvaluator<CharSequence>`为null值：
- en: '[PRE53]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Now, we are ready to do the cross validation:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已准备好进行交叉验证：
- en: '[PRE54]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: On each iteration of the `for` loop, we will set which fold is being used, which,
    in turn, will select the training and testing partition. Then, we will construct
    `DynamicLMClassifier` and train it by supplying the classifier to `corpus.visitTrain(classifier)`.
    Next, we will set the evaluator's classifier to the one we just trained. The evaluator
    is passed to the `corpus.visitTest(evaluator)` method where the contained classifier
    is applied to the test data that it was not trained on. With four folds, 25 percent
    of the data will be test data at any given iteration, and 75 percent of the data
    will be training data. Data will be in the test partition exactly once and three
    times in the training. The training and test partitions will never contain the
    same data unless there are duplicates in the data.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环的每次迭代中，我们将设置正在使用的折数，这反过来将选择训练和测试分区。然后，我们将构建`DynamicLMClassifier`并通过向`corpus.visitTrain(classifier)`提供分类器来对其进行训练。接下来，我们将评估器的分类器设置为刚刚训练的那个。评估器被传递到`corpus.visitTest(evaluator)`方法中，其中包含的分类器应用于它未训练过的测试数据。有四个折，在任何给定迭代中，25%的数据将是测试数据，75%的数据将是训练数据。数据将在测试分区中恰好一次，在训练中三次。除非数据中有重复，否则训练和测试分区永远不会包含相同的数据。
- en: 'Once the loop has finished all iterations, we will print a confusion matrix
    discussed in the *Evaluation of classifiers – the confusion matrix* recipe:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦循环完成所有迭代，我们将打印一个在 *分类器的评估——混淆矩阵* 配方中讨论的混淆矩阵：
- en: '[PRE55]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: There's more…
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'This recipe introduces quite a few moving parts, namely, cross validation and
    a corpus object that supports it. The `ObjectHandler<E>` interface is also used
    a lot; this can be confusing to developers not familiar with the pattern. It is
    used to train and test the classifier. It can also be used to print the contents
    of the corpus. Change the contents of the `for` loop to `visitTrain` with `Util.corpusPrinter`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方引入了许多移动部件，即交叉验证和支撑它的语料库对象。`ObjectHandler<E>` 接口也被大量使用；这对于不熟悉该模式的开发者来说可能会令人困惑。它用于训练和测试分类器。它还可以用于打印语料库的内容。将
    `for` 循环的内容更改为 `visitTrain` 并使用 `Util.corpusPrinter`：
- en: '[PRE56]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, you will get an output that looks like:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将得到一个看起来像这样的输出：
- en: '[PRE57]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The text is followed by `:` and the category. Printing the training/test folds
    is a good sanity check for whether the corpus is properly populated. It is also
    a nice glimpse into how the `ObjectHandler<E>` interface works—here, the source
    is from `com/lingpipe/cookbook/Util.java`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 文本后面跟着 `:` 和类别。打印训练/测试折是检查语料库是否正确填充的良好合理性检查。这也是了解 `ObjectHandler<E>` 接口工作方式的一个很好的视角——这里，源代码来自
    `com/lingpipe/cookbook/Util.java`：
- en: '[PRE58]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: There is not much to the returned class. There is a single `handle()`method
    that just prints the `toString()` method of `Classified<CharSequence>`. In the
    context of this recipe, the classifier instead invokes `train()` on the text and
    classification, and the evaluator takes the text, runs it past the classifier,
    and compares the result to the truth.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的类别没有多少内容。有一个单一的 `handle()` 方法，它只是打印 `Classified<CharSequence>` 的 `toString()`
    方法。在这个配方中，分类器会调用文本和分类的 `train()` 方法，评估器将文本传递给分类器，并将结果与真实情况进行比较。
- en: Another good experiment to run is to report performance on each fold instead
    of all folds. For small datasets, you will see very large variations in performance.
    Another worthwhile experiment is to permute the corpus 10 times and see the variations
    in performance that come from different partitioning of the data.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得进行的实验是报告每个折的性能而不是所有折的性能。对于小型数据集，你将看到非常大的性能变化。另一个值得进行的实验是将语料库随机排列10次，并观察来自不同数据划分的性能变化。
- en: Another issue is how data is selected for evaluation. To text process applications,
    it is important to not leak information between test data and training data. Cross
    validation over 10 days of data will be much more realistic if each day is a fold
    rather than a 10-percent slice of all 10 days. The reason is that a day's data
    will likely be correlated, and this correlation will produce information about
    that day in training and testing, if days are allowed to be in both train and
    test. When evaluating the final performance, always select data from after the
    training data epoch if possible, to better emulate production environments where
    the future is not known.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是如何选择用于评估的数据。对于文本处理应用来说，重要的是不要在测试数据和训练数据之间泄露信息。如果每一天都是一个折而不是所有10天的10%的切片，那么10天的数据交叉验证将更加现实。原因是某一天的数据可能会相关，如果允许某一天同时出现在训练和测试中，这种相关性将在训练和测试中产生关于该天的信息。在评估最终性能时，如果可能，始终选择训练数据纪元之后的数据，以更好地模拟生产环境，在那里未来是未知的。
- en: Viewing error categories – false positives
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看错误类别——误报
- en: We can achieve the best possible classifier performance by examining the errors
    and making changes to the system. There is a very bad habit among developers and
    machine-learning folks to not look at errors, particularly as systems mature.
    Just to be clear, at the end of a project, the developers responsible for tuning
    the classifier should be very familiar with the domain being classified, if not
    expert in it, because they have looked at so much data while tuning the system.
    If the developer cannot do a reasonable job of emulating the classifiers that
    you are tuning, then you are not looking at enough data.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过检查错误并对系统进行修改来达到最佳可能的分类器性能。开发人员和机器学习人员中存在一个非常不好的习惯，那就是不查看错误，尤其是在系统成熟之后。为了明确起见，在项目结束时，负责调整分类器的开发者应该非常熟悉被分类的领域，如果不是专家，因为他们在调整系统时已经查看了很多数据。如果开发者无法合理地模拟你正在调整的分类器，那么你查看的数据就不够。
- en: This recipe performs the most basic form of looking at what the system got wrong
    in the form of false positives, which are examples from training data that the
    classifier assigned to a category, but the correct category was something else.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱以最基本的形式查看系统出错的地方，即假阳性，这些是从训练数据中分配给某个类别的示例，但正确的类别是其他类别。
- en: How to do it...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps in order to view error categories using false positives:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤执行以使用假阳性查看错误类别：
- en: 'This recipe extends the previous *How to train and evaluate with cross validation*
    recipe by accessing more of what the evaluation class provides. Get a command
    prompt and type:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个食谱通过访问更多评估类提供的内容扩展了之前的*如何使用交叉验证进行训练和评估*食谱。获取命令提示符并输入：
- en: '[PRE59]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This will result in:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将导致：
- en: '[PRE60]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The output starts with a confusion matrix. Then, we will see the actual six
    instances of false positives for `p` from the lower left-hand side cell of the
    confusion matrix labeled with the category that the classifier guessed. Then,
    we will see false positives for `n`, which is a single example. The true category
    is appended with `:`, which is helpful for classifiers that have more than two
    categories.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出从混淆矩阵开始。然后，我们将看到来自混淆矩阵左下角单元格的实际六个假阳性实例，该单元格标记了分类器猜测的类别。然后，我们将看到`n`的假阳性，这是一个单独的示例。真实类别后面附加了`:`，这对于具有两个以上类别的分类器很有帮助。
- en: How it works…
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This recipe is based on the previous one, but it has its own source in `com/lingpipe/cookbook/chapter1/ReportFalsePositivesOverXValidation.java`.
    There are two differences. First, `storeInputs` is set to `true` for the evaluator:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱基于之前的食谱，但其源代码位于`com/lingpipe/cookbook/chapter1/ReportFalsePositivesOverXValidation.java`。有两个不同之处。首先，对于评估器，`storeInputs`被设置为`true`：
- en: '[PRE61]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Second, a `Util` method is added to print false positives:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，添加了一个`Util`方法来打印假阳性：
- en: '[PRE62]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The preceding code works by identifying a category of focus—`e` or English
    tweets—and extracting all the false positives from the classifier evaluator. For
    this category, false positives are tweets that are non-English in truth, but the
    classifier thought they were English. The referenced `Util` method is as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码通过识别一个关注的类别——`e`或英文推文——并从分类器评估器中提取所有假阳性来实现。对于这个类别，假阳性是真实上非英文的推文，但分类器认为它们是英文的。引用的`Util`方法如下：
- en: '[PRE63]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The preceding code takes the corpus that contains all the truth data and populates
    `Map<E,Classification>` to allow for lookup of the truth annotation, given the
    input. If the same input exists in two categories, then this method will not be
    robust but will record the last example seen:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码取包含所有真实数据的语料库，并填充`Map<E,Classification>`以允许根据输入查找真实注释。如果相同的输入存在于两个类别中，那么这个方法将不会很稳健，但会记录最后看到的示例：
- en: '[PRE64]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The code gets the false positives from the evaluator and then iterates over
    all them with a lookup into `truthMap` built in the preceding code and prints
    out the relevant information. There are also methods to get false negatives, true
    positives, and true negatives in `evaluator`.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 代码从评估器获取假阳性，然后遍历所有这些，通过前一段代码中构建的`truthMap`进行查找，并打印出相关信息。`evaluator`中也有获取假阴性、真阳性和真阴性的方法。
- en: The ability to identify mistakes is crucial to improving performance. The advice
    seems obvious, but it is very common for developers to not look at mistakes. They
    will look at system output and make a rough estimate of whether the system is
    good enough; this does not result in top-performing classifiers.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 识别错误的能力对于提高性能至关重要。这个建议看起来很明显，但开发者不查看错误的情况非常普遍。他们只会查看系统输出，并对系统是否足够好做出粗略估计；这不会导致性能最优秀的分类器。
- en: The next recipe works through more evaluation metrics and their definition.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个食谱将更深入地探讨更多评估指标及其定义。
- en: Understanding precision and recall
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解精确率和召回率
- en: 'The false positive from the preceding recipe is one of the four possible error
    categories. All the categories and their interpretations are as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个食谱中的假阳性是四种可能的错误类别之一。所有类别及其解释如下：
- en: 'For a given category X:'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定的类别X：
- en: '**True positive**: The classifier guessed X, and the true category is X'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真阳性**：分类器猜测X，而真实类别也是X'
- en: '**False positive**: The classifier guessed X, but the true category is a category
    that is different from X'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假阳性**：分类器猜测X，但真实类别是不同于X的类别'
- en: '**True negative**: The classifier guessed a category that is different from
    X, and the true category is different from X'
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真正的负例**：分类器猜测的类别与X不同，且真实类别也与X不同'
- en: '**False negative**: The classifier guessed a category different from X, but
    the true category is X'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假负例**：分类器猜测的类别与X不同，但真实类别是X'
- en: 'With these definitions in hand, we can define the additional common evaluation
    metrics as follows:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握这些定义后，我们可以定义以下额外的常见评估度量标准：
- en: Precision for a category X is true positive / (false positive + true positive)
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别X的精度是真正的正例 / (假正例 + 真正例)
- en: The degenerate case is to make one very confident guess for 100 percent precision.
    This minimizes the false positives but will have a horrible recall.
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退化情况是做出一个非常有信心的一百 percent 精度的猜测。这最小化了假正例，但召回率会非常糟糕。
- en: Recall or sensitivity for a category X is true positive / (false negative +
    true positive)
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别X的召回率或灵敏度是真正的正例 / (假负例 + 真正例)
- en: The degenerate case is to guess all the data as belonging to category X for
    100 percent recall. This minimizes false negatives but will have horrible precision.
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退化情况是猜测所有数据都属于类别X以实现100 percent 的召回率。这最小化了假负例，但精度会非常糟糕。
- en: Specificity for a category X is true negative / (true negative + false positive)
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别X的特定性是真正的负例 / (真正的负例 + 假正例)
- en: The degenerate case is to guess that all data is not in category X.
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退化情况是猜测所有数据都不属于类别X。
- en: The degenerate cases are provided to make clear what the metric is focused on.
    There are metrics such as f-measure that balance precision and recall, but even
    then, there is no inclusion of true negatives, which can be highly informative.
    See the Javadoc at `com.aliasi.classify.PrecisionRecallEvaluation` for more details
    on evaluation.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 提供退化情况是为了清楚地说明度量标准关注的是什么。有如f-measure这样的度量标准可以平衡精度和召回率，但即使如此，也没有包含真正的负例，而真正的负例可以提供高度信息。有关评估的更多详细信息，请参阅`com.aliasi.classify.PrecisionRecallEvaluation`的Javadoc。
- en: 'In our experience, most business needs map to one of the three scenarios:'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的经验中，大多数商业需求映射到三种场景之一：
- en: '**High precision** / **high recall**: The language ID needs to have both good
    coverage and good accuracy; otherwise, lots of stuff will go wrong. Fortunately,
    for distinct languages where a mistake will be costly (such as Japanese versus
    English or English versus Spanish), the LM classifiers perform quite well.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高精度** / **高召回率**：语言ID需要同时具有良好的覆盖率和准确性；否则，会出现很多问题。幸运的是，对于错误代价较高的不同语言（如日语与英语或英语与西班牙语），LM分类器表现相当不错。'
- en: '**High precision** / **usable recall**: Most business use cases have this shape.
    For example, a search engine that automatically changes a query if it is misspelled
    better not make lots of mistakes. This means it looks pretty bad to change "Breck
    Baldwin" to "Brad Baldwin", but no one really notices if "Bradd Baldwin" is not
    corrected.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高精度** / **可用的召回率**：大多数商业用例都有这种形状。例如，如果一个搜索引擎在自动更改查询时如果拼写错误，最好不要犯很多错误。这意味着将“Breck
    Baldwin”更改为“Brad Baldwin”看起来很糟糕，但如果“Bradd Baldwin”没有被纠正，没有人会真正注意到。'
- en: '**High recall** / **usable precision**: Intelligence analysis looking for a
    particular needle in a haystack will tolerate a lot of false positives in support
    of finding the intended target. This was an early lesson from our DARPA days.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高召回率** / **可用的精度**：在寻找特定针的稻草堆中的智能分析会容忍大量的假正例以支持找到目标。这是我们DARPA早期的一个教训。'
- en: How to serialize a LingPipe object – classifier example
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何序列化LingPipe对象 – 分类器示例
- en: In a deployment situation, trained classifiers, other Java objects with complex
    configuration, or training are best accessed by deserializing them from a disk.
    The first recipe did exactly this by reading in `LMClassifier` from the disk with
    `AbstractExternalizable`. This recipe shows how to get the language ID classifier
    written out to the disk for later use.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署情况下，训练好的分类器、具有复杂配置的其他Java对象或训练最好通过从磁盘反序列化它们来访问。第一个配方正是这样做的，通过使用`AbstractExternalizable`从磁盘读取`LMClassifier`。这个配方展示了如何将语言ID分类器写入磁盘以供以后使用。
- en: Serializing `DynamicLMClassifier` and reading it back in results in a different
    class, which is an instance of `LMClassifier` that performs the same as the one
    just trained except that it can no longer accept training instances because counts
    have been converted to log probabilities and the backoff smoothing arcs are stored
    in suffix trees. The resulting classifier is much faster.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化`DynamicLMClassifier`并重新读取它会导致不同的类，这是一个`LMClassifier`的实例，其表现与刚刚训练的实例相同，但不再接受训练实例，因为计数已转换为对数概率，后缀树中存储了退避平滑弧。结果分类器要快得多。
- en: In general, most of the LingPipe classifiers, language models, and **hidden
    Marcov models** (**HMM**) implement both the `Serializable` and `Compilable` interfaces.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，大多数LingPipe分类器、语言模型和**隐马尔可夫模型**（HMM）都实现了`Serializable`和`Compilable`接口。
- en: Getting ready
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will work with the same data as we did in the *Viewing error categories –
    false positives* recipe.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与“查看错误类别 - 假阳性”食谱中相同的相同数据。
- en: How to do it...
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to serialize a LingPipe object:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以序列化LingPipe对象：
- en: 'Go to the command prompt and convey:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往命令提示符并传达：
- en: '[PRE65]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The program will respond with the default file values for input/output:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序将以默认的输入/输出文件值响应：
- en: '[PRE66]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Test if the model works by invoking the *Deserializing and running a classifier*
    recipe while specifying the classifier file to be read in:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在调用*反序列化和运行分类器*食谱时指定要读取的分类器文件来测试模型是否工作：
- en: '[PRE67]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The usual interaction follows:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 常规交互方式如下：
- en: '[PRE68]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: How it works…
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The contents of `main()` from `src/com/lingpipe/cookbook/chapter1/ TrainAndWriteClassifierToDisk.java`
    start with the materials covered in the previous recipes of the chapter to read
    the `.csv` files, set up a classifier, and train it. Please refer back to it if
    any code is unclear.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/com/lingpipe/cookbook/chapter1/TrainAndWriteClassifierToDisk.java`中`main()`方法的起始内容涵盖了本章前面食谱中介绍的材料，用于读取`.csv`文件，设置分类器并对其进行训练。如果代码有任何不清楚的地方，请参考它。'
- en: 'The new bit for this recipe happens when we invoke the `AbtractExternalizable.compileTo()`
    method on `DynamicLMClassifier`, which compiles the model and writes it to a file.
    This method is used like the `writeExternal` method from Java''s `Externalizable`
    interface:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的新内容发生在我们调用`DynamicLMClassifier`上的`AbtractExternalizable.compileTo()`方法时，该方法编译模型并将其写入文件。此方法的使用方式类似于Java的`Externalizable`接口中的`writeExternal`方法：
- en: '[PRE69]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: This is all you need to know folks to write a classifier to a disk.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是大家需要知道的所有内容，以便将分类器写入磁盘。
- en: There's more…
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There is an alternate way to serialize that is amenable to more variations
    of data sources for serializations that are not based on the `File` class. An
    alternate way to write a classifier is:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一种替代的序列化方法，它适用于更多基于`File`类之外的序列化数据源变体。编写分类器的另一种方法是：
- en: '[PRE70]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Additionally, `DynamicLM` can be compiled without involving the disk with a
    static `AbstractExternalizable.compile()` method. It will be used in the following
    fashion:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`DynamicLM`可以通过使用静态的`AbstractExternalizable.compile()`方法编译，而不涉及磁盘。它将以以下方式使用：
- en: '[PRE71]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The compiled version is a lot faster but does not allow further training instances.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 编译版本要快得多，但不再允许进一步训练实例。
- en: Eliminate near duplicates with the Jaccard distance
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jaccard距离消除近似重复项
- en: 'It often happens that the data has duplicates or near duplicates that should
    be filtered. Twitter data has lots of duplicates that can be quite frustrating
    to work with even with the `-filter:retweets` option available for the search
    API. A quick way to see this is to sort the text in the spreadsheet, and tweets
    with common prefixes will be neighbors:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 经常发生的情况是数据中存在重复或近似重复的数据，这些数据应该被过滤。Twitter数据有很多重复项，即使有搜索API提供的`-filter:retweets`选项，处理起来也可能相当令人沮丧。快速查看此问题的一种方法是按顺序排列电子表格中的文本，具有常见前缀的推文将相邻：
- en: '![Eliminate near duplicates with the Jaccard distance](img/00003.jpeg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![使用Jaccard距离消除近似重复项](img/00003.jpeg)'
- en: Duplicate tweets that share a prefix
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 具有相同前缀的重复推文
- en: This sort only reveals shared prefixes; there are many more that don't share
    a prefix. This recipe will allow you to find other sources of overlap and threshold,
    the point at which duplicates are removed.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 此排序仅揭示共享前缀；还有许多不共享前缀的更多前缀。此食谱将允许您找到其他重叠来源和阈值，即删除重复项的点。
- en: How to do it…
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to eliminate near duplicates with the Jaccard distance:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用Jaccard距离消除近似重复项：
- en: 'Type in the command prompt:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中输入：
- en: '[PRE72]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'You will be overwhelmed with a torrent of text:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被大量的文本淹没：
- en: '[PRE73]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Two example outputs are shown—the first is a near-exact duplicate with only
    a difference in a final `?`. It has a proximity of `1.0`; the next example has
    proximity of `0.50`, and the tweets are different but have a good deal of word
    overlap. Note that the second case does not share a prefix.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个示例输出被展示出来——第一个是一个几乎完全相同的副本，只有最后的 `?` 有所不同。它的邻近度为 `1.0`；下一个示例的邻近度为 `0.50`，推文不同，但有很多单词重叠。请注意，第二种情况没有共享前缀。
- en: How it works…
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe jumps a bit ahead of the sequence, using a tokenizer to drive the
    deduplication process. It is here because the following recipe, for sentiment,
    really needs deduplicated data to work well. [Chapter 2](part0027_split_000.html#page
    "Chapter 2. Finding and Working with Words"), *Finding and Working with Words*,
    covers tokenization in detail.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方跳过了序列的一小部分，使用分词器驱动去重过程。它在这里是因为接下来的配方，用于情感分析，确实需要去重数据才能良好工作。[第2章](part0027_split_000.html#page
    "第2章. 寻找和操作单词"), *寻找和操作单词*，详细介绍了分词。
- en: 'The source for `main()` is:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()` 的源代码如下：'
- en: '[PRE74]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Briefly, the tokenizer breaks the text into text sequences defined by matching
    the regular expression `\w+` (the first `\` escapes the second one in the preceding
    code—it is a Java thing). It matches contiguous word characters. The string "Hi,
    you here??" produces tokens "Hi", "you", and "here". The punctuation is ignored.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，分词器将文本分解成由正则表达式 `\w+`（前一个代码中的第一个反斜杠转义了第二个反斜杠——这是Java的一个特性）定义的文本序列。它匹配连续的单词字符。字符串
    "Hi, you here??" 产生标记 "Hi"、"you" 和 "here"。标点符号被忽略。
- en: 'Next up, `Util.filterJaccard` is called with a cutoff of `.5`, which roughly
    eliminates tweets that overlap with half their words. Then, the filter data is
    written to disk:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`Util.filterJaccard` 被调用，截止值为 `.5`，这大致消除了与一半单词重叠的推文。然后，过滤器数据被写入磁盘：
- en: '[PRE77]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The `Util.filterJaccard()` method''s source is as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`Util.filterJaccard()` 方法的源代码如下：'
- en: '[PRE78]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The nested `for` loops in the following example explore each row with every
    other row until a higher threshold proximity is found or until all data has been
    looked at. Do not use this for large datasets because it is the O(n²)algorithm.
    If no row is above proximity, then the row is added to `filteredTexts`:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子中的嵌套 `for` 循环探索每一行与每一行其他行，直到找到更高的阈值邻近度或直到查看完所有数据。不要用于大型数据集，因为这个算法是 O(n²)。如果没有行超过邻近度，则该行被添加到
    `filteredTexts`：
- en: '[PRE80]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: There are much better ways to efficiently filter the texts at a cost of extra
    complexity—a simple reverse-word lookup index to compute an initial covering set
    will be vastly more efficient—search for a shingling text lookup for O(n) to O(n
    log(n)) approaches.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多更有效的方法来过滤文本，但代价是额外的复杂性——一个简单的反向单词查找索引来计算初始覆盖集将大大提高效率——搜索具有 O(n) 到 O(n log(n))
    方法的 shingling 文本查找。
- en: Setting the threshold can be a bit tricky, but looking a bunch of data should
    make the appropriate cutoff fairly clear for your needs.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 设置阈值可能有点棘手，但查看大量数据应该会使适当的截止值对您的需求相当清晰。
- en: How to classify sentiment – simple version
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何进行情感分类——简单版本
- en: Sentiment has become the classic business-oriented classification task—what
    executive can resist an ability to know on a constant basis what positive and
    negative things are being said about their business? Sentiment classifiers offer
    this capability by taking text data and classifying it into positive and negative
    categories. This recipe addresses the process of creating a simple sentiment classifier,
    but more generally, it addresses how to create classifiers for novel categories.
    It is also a 3-way classifier, unlike the 2-way classifiers we have been working
    with.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 情感分析已经成为经典的以业务为导向的分类任务——哪位高管能抗拒知道他们业务中不断被说出的正面和负面事情的能力？情感分类器通过将文本数据分类为正面和负面类别来提供这种能力。这个配方解决了创建简单情感分类器的过程，但更普遍地，它解决了如何为新型类别创建分类器的问题。它也是一个三向分类器，与我们所使用的双向分类器不同。
- en: Our first sentiment system was built for BuzzMetrics in 2004 using language
    model classifiers. We tend to use logistic regression classifiers now, because
    they tend to perform better. [Chapter 3](part0036_split_000.html#page "Chapter 3. Advanced
    Classifiers"), *Advanced Classifiers*, covers logistic regression classifiers.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在2004年为BuzzMetrics构建的第一个情感分析系统使用了语言模型分类器。我们现在倾向于使用逻辑回归分类器，因为它们通常表现更好。[第3章](part0036_split_000.html#page
    "第3章. 高级分类器"), *高级分类器*，介绍了逻辑回归分类器。
- en: How to do it…
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The previous recipes focused on language ID—how do we shift the classifier
    over to the very different task of sentiment? This will be much simpler than one
    might think—all that needs to change is the training data, believe it or not.
    The steps are as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配方集中在语言识别——我们如何将分类器转移到完全不同的情感分析任务上？这会比人们想象的简单得多——唯一需要改变的是训练数据，信不信由你。步骤如下：
- en: Use the Twitter search recipe to download tweets about a topic that has positive/negative
    tweets about it. A search on `disney` is our example, but feel free to branch
    out. This recipe will work with the supplied CSV file, `data/disneySentiment_annot.csv`.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Twitter搜索配方下载有关某个主题的推文，该主题有正面/负面的推文。以 `disney` 为例，但请随意扩展。此配方将适用于提供的CSV文件，`data/disneySentiment_annot.csv`。
- en: Load the created `data/disneySentiment_annot.csv` file into your spreadsheet
    of choice. There are already some annotations done.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建的 `data/disneySentiment_annot.csv` 文件加载到您选择的电子表格中。已经有了一些标注。
- en: 'As in the *Evaluation of classifiers – the confusion matrix* recipe, annotate
    the `true class` column for one of the three categories:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同在 *分类器的评估 – 混淆矩阵* 配方中，为三个类别之一标注 `true class` 列：
- en: 'The `p` annotation stands for positive. The example is "Oh well, I love Disney
    movies. #hateonit".'
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p` 标注代表正面。例如：“哦，我真的很喜欢迪士尼电影。#hateonit”。'
- en: The `n` annotation stands for negative. The example is "Disney really messed
    me up yo, this is not the way things are suppose to be".
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n` 标注代表负数。例如：“迪士尼真的让我失望了，事情不应该这样发展”。'
- en: The `o` annotation stands for other. The example is "Update on Downtown Disney.
    [http://t.co/SE39z73vnw](http://t.co/SE39z73vnw).
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`o` 标注代表其他。例如：“关于迪士尼小镇的更新。[http://t.co/SE39z73vnw](http://t.co/SE39z73vnw)”。'
- en: Leave blank tweets that are not in English, irrelevant, both positive and negative,
    or you are unsure about.
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于不是英文、无关、既正面又负面，或者您不确定的推文，请留空。
- en: Keep annotating until the smallest category has at least 10 examples.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续标注，直到最小的类别至少有10个示例。
- en: Save the annotations.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存标注。
- en: 'Run the previous recipe for cross validation, providing the annotated file''s
    name:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行之前的交叉验证配方，提供标注文件的名称：
- en: '[PRE81]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The system will then run a four-fold cross validation and print a confusion
    matrix. Look at the *How to train and evaluate with cross validation* recipe if
    you need further explanation:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统将随后运行四折交叉验证并打印出混淆矩阵。如果您需要进一步的解释，请查看 *如何使用交叉验证进行训练和评估* 配方：
- en: '[PRE82]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: That's it! Classifiers are entirely dependent on training data for what they
    classify. More sophisticated techniques will bring richer features into the mix
    than character ngrams, but ultimately, the labels imposed by training data are
    the knowledge being imparted to the classifier. Depending on your view, the underlying
    technology is magical or astoundingly simple minded.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！分类器完全依赖于训练数据来进行分类。更复杂的技术将比字符n-gram带来更丰富的特征，但最终，训练数据施加的标签是传递给分类器的知识。根据您的观点，底层技术要么神奇，要么令人惊讶地简单。
- en: How it works...
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Most developers are surprised that the only difference between language ID and
    sentiment is the labeling applied to the data for training. The language model
    classifier is applying an individual language model for each category and also
    noting the marginal distribution of the categories in the estimates.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者都会惊讶地发现，语言识别和情感分析之间的唯一区别是用于训练的数据标注。语言模型分类器为每个类别应用一个单独的语言模型，并在估计中记录类别的边缘分布。
- en: There's more…
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Classifiers are pretty dumb but very useful if they are not expected to work
    outside their capabilities. Language ID works great as a classification problem
    because the observed events are tightly tied to the classification being done—the
    words and characters of a language. Sentiment is more difficult because the observed
    events, in this case, are exactly the same as the language ID and are less strongly
    associated with the end classification. For example, the phrase "I love" is a
    good predictor of the sentence being English but not as clear a predictor that
    the sentiment is positive, negative, or other. If the tweet is "I love Disney",
    then we have a positive statement. If the tweet is "I love Disney, not", then
    it is negative. Addressing the complexities of sentiment and other more complex
    phenomenon tends to be resolved in the following ways:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分类器不被期望在其能力之外工作，它们虽然很笨拙但非常有用。语言识别作为分类问题工作得很好，因为观察事件与所进行的分类紧密相关——语言中的单词和字符。情感分析更困难，因为在这种情况下，观察事件与语言识别完全相同，但与最终分类的关联较弱。例如，“我爱”这个短语是句子是英语的良好预测指标，但并不是那么清晰地预测情感是正面、负面或其他。如果推文是“我爱迪士尼”，那么我们有一个积极的陈述。如果推文是“我爱迪士尼，不”，那么它是负面的。处理情感和其他更复杂现象的复杂性通常以下列方式解决：
- en: Create more training data. Even relatively dumb techniques such as language
    model classifiers can perform very well given enough data. Humanity is just not
    that creative in ways to gripe about, or praise, something. The *Train a little,
    learn a little – active learning* recipe of [Chapter 3](part0036_split_000.html#page
    "Chapter 3. Advanced Classifiers"), *Advanced Classifiers*, presents a clever
    way to do this.
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建更多训练数据。即使相对简单的技术，如语言模型分类器，只要有足够的数据，也能表现出色。人类在抱怨或赞扬某事的方式上并不那么有创造力。[第3章](part0036_split_000.html#page
    "第3章. 高级分类器")中提到的“训练一点，学习一点——主动学习”的配方，*高级分类器*，提供了一种巧妙的方式来做到这一点。
- en: Use fancier classifiers that in turn use fancier features (observations) about
    the data to get the job done. Look at the logistic regression recipes for more
    information. For the negation case, a feature that looked for a negative phrase
    in the tweet might help. This could get arbitrarily sophisticated.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更复杂的分类器，这些分类器反过来又使用关于数据更复杂（观察）的特征来完成工作。更多信息请参阅逻辑回归配方。对于否定情况，一个在推文中寻找否定短语的特性可能有所帮助。这可以变得任意复杂。
- en: Note that a more appropriate way to take on the sentiment problem can be to
    create a binary classifier for *positive* and *not positive* and a binary classifier
    for *negative* and *not negative*. The classifiers will have separate training
    data and will allow for a tweet to be both positive and negative.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，处理情感问题的更合适方式可能是创建一个用于*正面*和*非正面*的二分类器，以及一个用于*负面*和*非负面*的二分类器。这些分类器将拥有各自独立的训练数据，并允许一条推文同时具有正面和负面的情感。
- en: Common problems as a classification problem
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见问题作为分类问题
- en: Classifiers form the foundations of many industrial NLP problems. This recipe
    goes through the process of encoding some common problems into a classification-based
    solution. We will pull from real-world examples that we have built whenever possible.
    You can think of them as mini recipes.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 分类器是许多工业级自然语言处理问题的基础。这个配方将一些常见问题编码成基于分类的解决方案。只要可能，我们将从我们所构建的真实世界例子中提取信息。你可以把它们看作是迷你配方。
- en: Topic detection
  id: totrans-444
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主题检测
- en: 'Problem: Take footnotes from financial documents (10Qs and 10Ks) and determine
    whether an **eXtensible Business Reporting Language** (**XBRL**) category is applied
    like "forward looking financial statements". Turns out that foot notes are where
    all the action happens. For example, is the footnote referring to retired debt?
    Performance needed to be greater than 90 percent precision with acceptable recall.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：从财务文件（10Qs和10Ks）中提取脚注，并确定是否应用了**可扩展商业报告语言**（**XBRL**）类别，例如“前瞻性财务报表”。结果证明，脚注是所有活动发生的地方。例如，脚注是否指的是已偿还的债务？需要达到90%以上的精确度，并接受可接受的召回率。
- en: 'Solution: This problem closely mirrors how we approached language ID and sentiment.
    The actual solution involves a sentence recognizer that detects the footnotes—see
    [Chapter 5](part0061_split_000.html#page "Chapter 5. Finding Spans in Text – Chunking"),
    *Finding Spans in Text – Chunking*—and then creates training data for each of
    the XBRL categories. We used the confusion matrix output to help refine the XBRL
    categories that the system was struggling to distinguish. Merging categories was
    a possibility, and we did merge them. This system is based on language model classifiers.
    If done now, we would use logistic regression.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：这个问题与我们处理语言识别和情感分析的方法非常相似。实际的解决方案涉及一个句子识别器，它可以检测脚注——参见[第5章](part0061_split_000.html#page
    "第5章. 文本中的跨度查找——分块")，*文本中的跨度查找——分块*——并为每个XBRL类别创建训练数据。我们使用混淆矩阵输出帮助细化系统难以区分的XBRL类别。合并类别是可能的，我们也确实合并了它们。这个系统基于语言模型分类器。如果现在进行，我们会使用逻辑回归。
- en: Question answering
  id: totrans-447
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: 'Problem: Identify FAQs in a large dataset of text-based customer support data
    and develop the answers and ability to automatically deliver answers with 90 percent
    precision.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：在大量基于文本的客户支持数据集中识别常见问题（FAQs），并开发自动以90%精确度提供答案的能力。
- en: 'Solution: Perform clustering analysis over logs to find FAQs—see [Chapter 6](part0075_split_000.html#page
    "Chapter 6. String Comparison and Clustering"), *String Comparison and Clustering*.
    This will result in a very large set of FAQs that are really **Infrequently Asked
    Questions** (**IAQs**); this means that the prevalence of an IAQ can be as low
    as 1/20000\. Positive data is fairly easy to find for a classifier, but negative
    data is too expensive to create on any kind of balanced distribution—for every
    positive case, one will expect 19999 negative case. The solution is to assume
    that any random sample of a large size will contain very few positives and to
    just use this as negative data. A refinement is to run a trained classifier over
    the negatives to find high-scoring cases and annotate them to pull out the positives
    that might be found.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：对日志进行聚类分析以找到常见问题（FAQs）——参见[第6章](part0075_split_000.html#page "第6章. 字符串比较和聚类")，*字符串比较和聚类*。这将导致一个非常大的常见问题（FAQs）集，实际上是非常**不常见的问题**（**IAQs**）；这意味着IAQ的普遍性可能低至1/20000。对于分类器来说，找到正数据相对容易，但创建负数据成本太高，无法在任何平衡分布上实现——对于每一个正面案例，预期将有19999个负面案例。解决方案是假设任何大样本的随机样本将包含非常少的正样本，并仅将其用作负样本。一个改进的方法是在负样本上运行一个训练好的分类器以找到得分高的案例，并标注它们以提取可能找到的正样本。
- en: Degree of sentiment
  id: totrans-450
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 情感程度
- en: 'Problem: Classify a sentiment on a scale of 1 to 10 based on the degree of
    negativeness to positiveness.'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：根据负面到正面的程度，在1到10的尺度上对情感进行分类。
- en: 'Solution: Even though our classifiers provide a score that can be mapped on
    a 1-to-10 scale, this is not what the background computation is doing. To correctly
    map to a degree scale, one will have to annotate the distinction in training data—this
    tweet is a 1, this tweet is a 3, and so on. We will then train a 10-way classifier,
    and the first best category should, in theory, be the degree. We write *in theory*
    because despite regular customer requests for this, we have never found a customer
    that was willing to support the required annotation.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：尽管我们的分类器提供了一个可以映射到1到10分的分数，但这并不是背景计算所做的事情。为了正确映射到程度尺度，一个人将不得不在训练数据中标注区分——这条推文是1分，这条推文是3分，依此类推。然后我们将训练一个10路分类器，理论上第一个最佳类别应该是程度。我们写*理论上*是因为尽管有定期的客户请求这样做，但我们从未找到愿意支持所需标注的客户。
- en: Non-exclusive category classification
  id: totrans-453
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 非排他性类别分类
- en: 'Problem: The desired classifications are not mutually exclusive. A tweet can
    say both positive and negative things, for example, "Loved Mickey, hated Pluto".
    Our classifiers assume that categories are mutually exclusive.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：所需的分类不是互斥的。一条推文可以同时表达正面和负面内容，例如，“喜欢米奇，讨厌普路托”。我们的分类器假设类别是互斥的。
- en: 'Solution: We regularly use multiple binary classifiers in place of one *n*-way
    or multinomial classifiers. The classifiers will be trained for positive/non-positive
    and negative/non-negative. A tweet can then be annotated `n` and `p`.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：我们经常使用多个二元分类器来代替一个*n*-路或多项式分类器。这些分类器将针对正/非正和负/非负进行训练。然后一条推文可以被标注为`n`和`p`。
- en: Person/company/location detection
  id: totrans-456
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 人物/公司/地点检测
- en: 'Problem: Detect mentions of people in text data.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：在文本数据中检测提及的人。
- en: 'Solution: Believe it or not, this breaks down into a word classification problem.
    See [Chapter 6](part0075_split_000.html#page "Chapter 6. String Comparison and
    Clustering"), *String Comparison and Clustering*.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：信不信由你，这个问题可以分解为一个词分类问题。参见[第6章](part0075_split_000.html#page "第6章. 字符串比较和聚类")，*字符串比较和聚类*。
- en: It is generally fruitful to look at any novel problem as a classification problem,
    even if classifiers don't get used as the underlying technology. It can help clarify
    what the underlying technology actually needs to do.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 通常将任何新问题视为一个分类问题是有益的，即使底层技术并不使用分类器。这有助于明确底层技术实际上需要做什么。
