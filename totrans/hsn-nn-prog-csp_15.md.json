["```py\nvoid BasicVariables ()\n{\nConsole.WriteLine (\"Using placerholders\");\nusing (var g = new TFGraph ())\n{\nvar s = new TFSession (g);\n```", "```py\nvar var_a = g.Placeholder (TFDataType.Int16);\nvar var_b = g.Placeholder (TFDataType.Int16);\n```", "```py\nvar add = g.Add (var_a, var_b);\nvar mul = g.Mul (var_a, var_b);\nvarrunner = s.GetRunner ();\n```", "```py\nrunner.AddInput (var_a, new TFTensor ((short)3));\nrunner.AddInput (var_b, new TFTensor ((short)2));\nConsole.WriteLine (\"a+b={0}\", runner.Run (add).GetValue ());\n```", "```py\nrunner = s.GetRunner ();\nrunner.AddInput (var_a, new TFTensor ((short)3));\nrunner.AddInput (var_b, new TFTensor ((short)2));\nConsole.WriteLine (\"a*b={0}\", runner.Run (mul).GetValue ());\n}\n}\n```", "```py\nusing(var graph = new TFGraph ())\n{\ngraph.Import (File.ReadAllBytes (\"MySavedModel\"));\nvar session = new TFSession (graph);\nvar runner = session.GetRunner ();\nrunner.AddInput (graph [\"input\"] [0], tensor);\nrunner.Fetch (graph [\"output\"] [0]);\nvar output = runner.Run ();\n```", "```py\nTFTensor result = output [0];\n}\n```", "```py\nusing (var session = new TFSession())\n{\nvar graph = session.Graph;\nvar a = graph.Const(2);\nvar b = graph.Const(3);\nConsole.WriteLine(\"a=2 b=3\");\n```", "```py\nvar addingResults = session.GetRunner().Run(graph.Add(a, b));\nvar addingResultValue = addingResults.GetValue();\nConsole.WriteLine(\"a+b={0}\", addingResultValue);\n```", "```py\nvar multiplyResults = session.GetRunner().Run(graph.Mul(a, b));\nvar multiplyResultValue = multiplyResults.GetValue();\nConsole.WriteLine(\"a*b={0}\", multiplyResultValue);\n}\n```", "```py\nprivate static double MIN_SCORE_FOR_OBJECT_HIGHLIGHTING = 0.5;\n```", "```py\nstatic void Main(string[] args)\n{\n```", "```py\n_catalogPath = DownloadDefaultTexts(_currentDir);\n_modelPath = DownloadDefaultModel(_currentDir);\n_catalog = CatalogUtil.ReadCatalogItems(_catalogPath);\nvar fileTuples = new List<(string input, string output)>() { (_input, _output) };\nstring modelFile = _modelPath;\n```", "```py\nusing (var graph = new TFGraph())\n{\n```", "```py\ngraph.Import(new TFBuffer(File.ReadAllBytes(modelFile)));\n```", "```py\nusing (var session = new TFSession(graph))\n{\nConsole.WriteLine(\"Detecting objects\", Color.Yellow);\nforeach (var tuple in fileTuples)\n{\n```", "```py\nvar tensor = ImageUtil.CreateTensorFromImageFile(tuple.input, TFDataType.UInt8);\nvar runner = session.GetRunner();\nrunner.AddInput(graph[\"image_tensor\"][0], tensor).Fetch(graph[\"detection_boxes\"][0],graph[\"detection_scores\"][0],graph[\"detection_classes\"][0],graph[\"num_detections\"][0]);var output = runner.Run();\nvar boxes = (float[,,])output[0].GetValue();\nvar scores = (float[,])output[1].GetValue();\nvar classes = (float[,])output[2].GetValue();\nConsole.WriteLine(\"Highlighting object...\", Color.Green);\n```", "```py\nDrawBoxesOnImage(boxes, scores, classes, tuple.input, tuple.output, MIN_SCORE_FOR_OBJECT_HIGHLIGHTING);\nConsole.WriteLine($\"Done. See {_output_relative}. Press any key\", Color.Yellow);\nConsole.ReadKey();\n}\n}\n}\n```", "```py\nvoid BasicMultidimensionalArray ()\n{\n```", "```py\nusing (var g = new TFGraph ())\n{\n```", "```py\nvar s = new TFSession (g);\n```", "```py\nvar var_a = g.Placeholder (TFDataType.Int32);\nvar mul = g.Mul (var_a, g.Const (2));\n```", "```py\nvar a = new int[,,] { { { 0, 1 } , { 2, 3 } } , { { 4, 5 }, { 6, 7 } } };\nvar result = s.GetRunner ().AddInput (var_a, a).Fetch (mul).Run () [0];\n```", "```py\nvar actual = (int[,,])result.GetValue ();\nvar expected = new int[,,] { { {0, 2} , {4, 6} } , { {8, 10}, {12, 14} } };\nConsole.WriteLine (\"Actual: \" + RowOrderJoin (actual));\nConsole.WriteLine (\"Expected: \" + RowOrderJoin (expected));\nAssert(expected.Cast<int> ().SequenceEqual (actual.Cast<int> ()));\n};\n}\nprivate static string RowOrderJoin(int[,,] array) => string.Join (\", \", array.Cast<int> ());\n```"]