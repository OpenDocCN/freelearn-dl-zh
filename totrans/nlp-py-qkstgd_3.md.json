["```py\n# !conda install -y spacy \n# !pip install spacy\n```", "```py\n!python -m spacy download en_core_web_lg\n```", "```py\nimport spacy\nfrom spacy import displacy # for visualization\nnlp = spacy.load('en_core_web_lg')\nspacy.__version__\n```", "```py\n# !conda install -c conda-forge textacy \n# !pip install textacy\nimport textacy\n```", "```py\ntext = \"Madam Pomfrey, the nurse, was kept busy by a sudden spate of colds among the staff and students. Her Pepperup potion worked instantly, though it left the drinker smoking at the ears for several hours afterward. Ginny Weasley, who had been looking pale, was bullied into taking some by Percy.\"\n```", "```py\ndoc = nlp(text)\n```", "```py\nfor entity in doc.ents:\n    print(f\"{entity.text} ({entity.label_})\")\n```", "```py\nPomfrey (PERSON)\nPepperup (ORG)\nseveral hours (TIME)\nGinny Weasley (PERSON)\nPercy (PERSON)\n```", "```py\ndoc.ents\n> (Pomfrey, Pepperup, several hours, Ginny Weasley, Percy)\n```", "```py\nentity.label, entity.label_\n> (378, 'PERSON')\n\n```", "```py\nspacy.explain('GPE')\n> 'Countries, cities, states'\n```", "```py\ndef redact_names(text):\n    doc = nlp(text)\n    redacted_sentence = []\n    for token in doc:\n        if token.ent_type_ == \"PERSON\":\n            redacted_sentence.append(\"[REDACTED]\")\n        else:\n            redacted_sentence.append(token.string)\n    return \"\".join(redacted_sentence)\n\n```", "```py\nredact_names(text)\n\n> 'Madam [REDACTED], the nurse, was kept busy by a sudden spate of colds among the staff and students. Her Pepperup potion worked instantly, though it left the drinker smoking at the ears for several hours afterward. [REDACTED][REDACTED], who had been looking pale, was bullied into taking some by [REDACTED]\n\n```", "```py\ndef redact_names(text):\n    doc = nlp(text)\n    redacted_sentence = []\n    for ent in doc.ents:\n        ent.merge()\n    for token in doc:\n        if token.ent_type_ == \"PERSON\":\n            redacted_sentence.append(\"[REDACTED]\")\n        else:\n            redacted_sentence.append(token.string)\n    return \"\".join(redacted_sentence)\n```", "```py\nredact_names(text)\n> 'Madam [REDACTED], the nurse, was kept busy by a sudden spate of colds among the staff and students. Her Pepperup potion worked instantly, though it left the drinker smoking at the ears for several hours afterward. [REDACTED], who had been looking pale, was bullied into taking some by [REDACTED].\n```", "```py\ndef explain_text_entities(text):\n    doc = nlp(text)\n    for ent in doc.ents:\n        print(f'{ent}, Label: {ent.label_}, {spacy.explain(ent.label_)}')\n```", "```py\nexplain_text_entities('Tesla has gained 20% market share in the months since')\n\nTesla, Label: ORG, Companies, agencies, institutions, etc.\n20%, Label: PERCENT, Percentage, including \"%\"\nthe months, Label: DATE, Absolute or relative dates or periods\n```", "```py\nexplain_text_entities('Taj Mahal built by Mughal Emperor Shah Jahan stands tall on the banks of Yamuna in modern day Agra, India')\n\nTaj Mahal, Label: PERSON, People, including fictional\nMughal, Label: NORP, Nationalities or religious or political groups\nShah Jahan, Label: PERSON, People, including fictional\nYamuna, Label: LOC, Non-GPE locations, mountain ranges, bodies of water\nAgra, Label: GPE, Countries, cities, states\nIndia, Label: GPE, Countries, cities, states\n```", "```py\nexplain_text_entities('Ashoka was a great Indian king')\nAshoka, Label: PERSON, People, including fictional\nIndian, Label: NORP, Nationalities or religious or political groups\n```", "```py\nexplain_text_entities('The Ashoka University sponsors the Young India Fellowship')\nAshoka University, Label: ORG, Companies, agencies, institutions, etc.\nthe Young India Fellowship, Label: ORG, Companies, agencies, institutions, etc.\n```", "```py\nexample_text = 'Bansoori is an Indian classical instrument. Tom plays Bansoori and Guitar.'\n```", "```py\ndoc = nlp(example_text)\n```", "```py\nfor idx, sentence in enumerate(doc.sents):\n    for noun in sentence.noun_chunks:\n        print(f'sentence{idx+1}', noun)\n\nsentence1 Bansoori\nsentence1 an Indian classical instrument\nsentence2 Tom\nsentence2 Bansoori\nsentence2 Guitar\n```", "```py\nfor token in doc:\n    print(token, token.pos_, token.tag_)\n\nBansoori PROPN NNP\nis VERB VBZ\nan DET DT\nIndian ADJ JJ\nclassical ADJ JJ\ninstrument NOUN NN\n. PUNCT .\nTom PROPN NNP\nplays VERB VBZ\nBansoori PROPN NNP\nand CCONJ CC\nGuitar PROPN NNP\n. PUNCT .\n```", "```py\nruleset = [\n    {\n        'id': 1, \n        'req_tags': ['NNP', 'VBZ', 'NN'],\n    }, \n    {\n        'id': 2, \n        'req_tags': ['NNP', 'VBZ'],\n    }\n    ]\n```", "```py\ndef get_pos_tag(doc, tag):\n    return [tok for tok in doc if tok.tag_ == tag]\n```", "```py\ndef sent_to_ques(sent:str)->str:\n    \"\"\"\n    Return a question string corresponding to a sentence string using a set of pre-written rules\n    \"\"\"\n    doc = nlp(sent)\n    pos_tags = [token.tag_ for token in doc]\n    for idx, rule in enumerate(ruleset):\n        if rule['id'] == 1:\n            if all(key in pos_tags for key in rule['req_tags']): \n                print(f\"Rule id {rule['id']} matched for sentence: {sent}\")\n                NNP = get_pos_tag(doc, \"NNP\")\n                NNP = str(NNP[0])\n                VBZ = get_pos_tag(doc, \"VBZ\")\n                VBZ = str(VBZ[0])\n                ques = f'What {VBZ} {NNP}?'\n                return(ques)\n        if rule['id'] == 2:\n            if all(key in pos_tags for key in rule['req_tags']): #'NNP', 'VBZ' in sentence.\n                print(f\"Rule id {rule['id']} matched for sentence: {sent}\")\n                NNP = get_pos_tag(doc, \"NNP\")\n                NNP = str(NNP[0])\n                VBZ = get_pos_tag(doc, \"VBZ\")\n                VBZ = str(VBZ[0].lemma_)\n                ques = f'What does {NNP} {VBZ}?'\n                return(ques)\n```", "```py\nfor sent in doc.sents:\n    print(f\"The generated question is: {sent_to_ques(str(sent))}\")\n\nRule id 1 matched for sentence: Bansoori is an Indian classical instrument.\nThe generated question is: What is Bansoori?\nRule id 2 matched for sentence: Tom plays Bansoori and Guitar.\nThe generated question is: What does Tom play?\n```", "```py\nfor token in doc:\n    print(token, token.dep_)\n\nBansoori nsubj\nis ROOT\nan det\nIndian amod\nclassical amod\ninstrument attr\n. punct\nTom nsubj\nplays ROOT\nBansoori dobj\nand cc\nGuitar conj\n. punct\n```", "```py\nfor token in doc:\n    print(token, token.dep_, spacy.explain(token.dep_))\n```", "```py\nBansoori nsubj nominal subject\nis ROOT None\nan det determiner\nIndian amod adjectival modifier\nclassical amod adjectival modifier\ninstrument attr attribute\n. punct punctuation\nTom nsubj nominal subject\nplays ROOT None\nBansoori dobj direct object\nand cc coordinating conjunction\nGuitar conj conjunct\n. punct punctuation\n```", "```py\ndisplacy.render(doc, style='dep', jupyter=True)\n```", "```py\nfrom textacy.spacier import utils as spacy_utils\n```", "```py\n??spacy_utils.get_main_verbs_of_sent\n\n# Signature: spacy_utils.get_main_verbs_of_sent(sent)\n# Source:   \n# def get_main_verbs_of_sent(sent):\n#     \"\"\"Return the main (non-auxiliary) verbs in a sentence.\"\"\"\n#     return [tok for tok in sent\n#             if tok.pos == VERB and tok.dep_ not in constants.AUX_DEPS]\n# File:      d:\\miniconda3\\envs\\nlp\\lib\\site-packages\\textacy\\spacier\\utils.py\n# Type:      function\n```", "```py\ntoy_sentence = 'Shivangi is an engineer'\ndoc = nlp(toy_sentence)\n```", "```py\ndisplacy.render(doc, style='ent', jupyter=True)\n```", "```py\ndisplacy.render(nlp(\"Berlin, German pronunciation: [bɛɐ̯ˈliːn]) is the capital and the largest city of Germany, as well as one of its 16 constituent states. With a steadily growing population of approximately 3.7 million, Berlin is the second most populous city proper in the European Union behind London and the seventh most populous urban area in the European Union\"), style='ent', jupyter=True)\n```", "```py\nverbs = spacy_utils.get_main_verbs_of_sent(doc)\nprint(verbs)\n>> [is]\n```", "```py\nfor verb in verbs:\n    print(verb, spacy_utils.get_subjects_of_verb(verb))\n>> is [Shivangi]\n```", "```py\nprint([(token, token.tag_) for token in doc])\n>>[(Shivangi, 'NNP'), (is, 'VBZ'), (an, 'DT'), (engineer, 'NN')]\n```", "```py\nspacy_utils.get_objects_of_verb(verb)\n>> [engineer]\n```", "```py\nfor verb in verbs:\n    print(verb, spacy_utils.get_objects_of_verb(verb))\n>> is [engineer]\n```", "```py\ndoc = nlp(example_text)\nfor sentence in doc.sents:\n    print(sentence, sentence.root, sentence.root.lemma_, spacy_utils.get_subjects_of_verb(sentence.root), spacy_utils.get_objects_of_verb(sentence.root))\n\n>> Bansoori is an Indian classical instrument. is be [Bansoori] [instrument]\n>> Tom plays Bansoori and Guitar. plays play [Tom] [Bansoori, Guitar]\n```", "```py\ndef para_to_ques(eg_text):\n    doc = nlp(eg_text)\n    results = []\n    for sentence in doc.sents:\n        root = sentence.root\n        ask_about = spacy_utils.get_subjects_of_verb(root)\n        answers = spacy_utils.get_objects_of_verb(root)\n\n        if len(ask_about) > 0 and len(answers) > 0:\n            if root.lemma_ == \"be\":\n                question = f'What {root} {ask_about[0]}?'\n            else:\n                question = f'What does {ask_about[0]} {root.lemma_}?'\n            results.append({'question':question, 'answers':answers})\n    return results\n```", "```py\npara_to_ques(example_text)\n>> [{'question': 'What is Bansoori?', 'answers': [instrument]},\n>> {'question': 'What does Tom play?', 'answers': [Bansoori, Guitar]}]\n```", "```py\nlarge_example_text = \"\"\"\nPuliyogare is a South Indian dish made of rice and tamarind. \nPriya writes poems. Shivangi bakes cakes. Sachin sings in the orchestra.\n\nOsmosis is the movement of a solvent across a semipermeable membrane toward a higher concentration of solute. In biological systems, the solvent is typically water, but osmosis can occur in other liquids, supercritical liquids, and even gases.\nWhen a cell is submerged in water, the water molecules pass through the cell membrane from an area of low solute concentration to high solute concentration. For example, if the cell is submerged in saltwater, water molecules move out of the cell. If a cell is submerged in freshwater, water molecules move into the cell.\n\nRaja-Yoga is divided into eight steps. The first is Yama. Yama is nonviolence, truthfulness, continence, and non-receiving of any gifts.\nAfter Yama, Raja-Yoga has Niyama. cleanliness, contentment, austerity, study, and self - surrender to God.\nThe steps are Yama and Niyama. \n\"\"\"\n```", "```py\npara_to_ques(large_example_text)\n\n>> [{'question': 'What is Puliyogare?', 'answers': [dish]},\n {'question': 'What does Priya write?', 'answers': [poems]},\n {'question': 'What does Shivangi bake?', 'answers': [cakes]},\n {'question': 'What is Osmosis?', 'answers': [movement]},\n {'question': 'What is solvent?', 'answers': [water]},\n {'question': 'What is first?', 'answers': [Yama]},\n {'question': 'What is Yama?',\n  'answers': [nonviolence, truthfulness, continence, of]},\n {'question': 'What does Yoga have?', 'answers': [Niyama]},\n {'question': 'What are steps?', 'answers': [Yama, Niyama]}]\n```"]