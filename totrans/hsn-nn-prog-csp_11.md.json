["```py\npublic interface IErrorObserver\n{\nvoid CalculateError(double PError);\n}\n```", "```py\npublic abstract class RestrictedBoltzmannMachineLayer\n{\nprotected double[] state;\nprotected double[] bias;\nprotected double[] biasChange;\nprotected double[] activity;\nprotected int numNeurons = 0;\n}\n```", "```py\npublic class RestrictedBoltzmannMachineWeightSet\n{\nprivate int preSize;\nprivate int postSize;\nprivate double[][] weights;\nprivate double[][] weightChanges;\n}\n```", "```py\npublic struct RestrictedBoltzmannMachineLearningRate\n{\ninternal double weights;\ninternal double biases;\ninternal double momentumWeights;\ninternal double momentumBiases;\n}\n```", "```py\npublic struct TrainingData\n{\npublic double[] posVisible;\npublic double[] posHidden;\npublic double[] negVisible;\npublic double[] negHidden;\n}\n```", "```py\npublic class RestrictedBoltzmannMachine\n{\nprivate RestrictedBoltzmannMachineLayer visibleLayers;\nprivate RestrictedBoltzmannMachineLayer hiddenLayers;\nprivate RestrictedBoltzmannMachineWeightSet weights;\nprivate RestrictedBoltzmannMachineLearningRate learnrate;\nprivate TrainingData trainingdata;\nprivate int numVisibleLayers;\nprivate int numHiddenLayers;\n}\n```", "```py\npublic class Autoencoder\n{\nprivate int numlayers;\nprivate bool pretraining = true;\nprivate RestrictedBoltzmannMachineLayer[] layers;\nprivate AutoencoderLearningRate learnrate;\nprivate AutoencoderWeights recognitionweights;\nprivate AutoencoderWeights generativeweights;\nprivate TrainingData[] trainingdata;\nprivate List<IErrorObserver> errorobservers;\n}\n```", "```py\npublic interface IWeightInitializer\n{\ndouble InitializeWeight();\ndouble InitializeBias();}\n```", "```py\npublic abstract void SetState(int PWhich, double PInput);\npublic abstract object Clone();\n```", "```py\npublic abstract class RestrictedBoltzmannMachineLayer\n{\nprotected double[] state;\nprotected double[] bias;\nprotected double[] biasChange;\nprotected double[] activity;\nprotected int numNeurons = 0;\npublic abstract void SetState(int PWhich, double PInput);\npublic abstract object Clone();\n}\n```", "```py\npublic class AutoencoderBuilder\n{\nprivate List<RestrictedBoltzmannMachineLayer> layers = new List<RestrictedBoltzmannMachineLayer>();\nprivate AutoencoderLearningRate learnrate = new AutoencoderLearningRate();\nprivate IWeightInitializer weightinitializer = new GaussianWeightInitializer();\n}\n```", "```py\nprivate void AddLayer(RestrictedBoltzmannMachineLayer PLayer)\n{\nlearnrate.preLearningRateBiases.Add(0.001);\nlearnrate.preMomentumBiases.Add(0.5);\nlearnrate.fineLearningRateBiases.Add(0.001);\nif (layers.Count >= 1)\n{\nlearnrate.preLearningRateWeights.Add(0.001);\nlearnrate.preMomentumWeights.Add(0.5);\nlearnrate.fineLearningRateWeights.Add(0.001);\n}\nlayers.Add(PLayer);\n}\n```", "```py\npublic void AddBinaryLayer (int size)\n{\nAddLayer (new RestrictedBoltzmannMachineBinaryLayer(size));\n}\npublic void AddGaussianLayer (int size)\n{\nAddLayer (new RestrictedBoltzmannMachineGaussianLayer(size));\n}\n```", "```py\npublic Autoencoder Build()\n{\nreturn new Autoencoder(layers, learnrate, weightinitializer);\n}\n```", "```py\nprivate void InitializeBiases(IWeightInitializer PWInitializer)\n{\nfor (int i = 0; i < numlayers; i++)\n{\nfor (int j = 0; j < layers[i].Count; j++)\n{\nlayers[i].SetBias(j, PWInitializer.InitializeBias());\n}\n}\n}\n```", "```py\nprivate void InitializeTrainingData()\n{\ntrainingdata = new TrainingData[numlayers - 1];\nfor (inti = 0; i < numlayers - 1; i++)\n{\ntrainingdata[i].posVisible = new double[layers[i].Count];\nUtility.SetArrayToZero(trainingdata[i].posVisible);\ntrainingdata[i].posHidden = new double[layers[i + 1].Count];\nUtility.SetArrayToZero(trainingdata[i].posHidden);\ntrainingdata[i].negVisible = new double[layers[i].Count];\nUtility.SetArrayToZero(trainingdata[i].negVisible);\ntrainingdata[i].negHidden = new double[layers[i + 1].Count];\nUtility.SetArrayToZero(trainingdata[i].negHidden);\n}\n}\n```", "```py\nAutoencoderBuilder builder = new AutoencoderBuilder();\nbuilder.AddBinaryLayer(4);\nbuilder.AddBinaryLayer(3);\nbuilder.AddGaussianLayer(3);\nbuilder.AddGaussianLayer(1);\n```", "```py\nbuilder.SetFineTuningLearningRateBiases(0, 1.0);\nbuilder.SetFineTuningLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingLearningRateBiases(0, 1.0);\nbuilder.SetPreTrainingLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingMomentumBiases(0, 0.1);\nbuilder.SetPreTrainingMomentumWeights(0, .05);\n```", "```py\npublic void SetPreTrainingLearningRateWeights(int PWhich, double PLR)\n{\nlearnrate.preLearningRateWeights[PWhich] = PLR;\n}\npublic void SetPreTrainingLearningRateBiases(int PWhich, double PLR)\n{\nlearnrate.preLearningRateBiases[PWhich] = PLR;\n}\npublic void SetPreTrainingMomentumWeights(int PWhich, double PMom)\n{\nlearnrate.preMomentumWeights[PWhich] = PMom;\n}\npublic void SetPreTrainingMomentumBiases(int PWhich, double PMom)\n{\nlearnrate.preMomentumBiases[PWhich] = PMom;\n}\npublic void SetFineTuningLearningRateWeights(int PWhich, double PLR)\n{\nlearnrate.fineLearningRateWeights[PWhich] = PLR;\n}\npublic void SetFineTuningLearningRateBiases(int PWhich, double PLR)\n{\nlearnrate.fineLearningRateBiases[PWhich] = PLR;\n}\n```", "```py\nAutoencoderBuilder builder = new AutoencoderBuilder();\nbuilder.AddBinaryLayer(4);\nbuilder.AddBinaryLayer(3);\nbuilder.AddGaussianLayer(3);\nbuilder.AddGaussianLayer(1);\nbuilder.SetFineTuningLearningRateBiases(0, 1.0);\nbuilder.SetFineTuningLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingLearningRateBiases(0, 1.0);\nbuilder.SetPreTrainingLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingMomentumBiases(0, 0.1);\nbuilder.SetPreTrainingMomentumWeights(0, .05);\n```", "```py\nAutoencoder encoder = builder.Build();\n```", "```py\nRestrictedBoltzmannMachineLayer layer = encoder.GetLayer(0);\nRestrictedBoltzmannMachineLayer layerHidden = encoder.GetLayer(1);\n```", "```py\npublic RestrictedBoltzmannMachineLayer GetLayer(int PWhichLayer)\n{\nUtility.WithinBounds(\"Layer index out of bounds!\", PWhichLayer, numlayers);\nreturn layers[PWhichLayer];\n}\n```", "```py\npublic static class RestrictedBoltzmannMachineTrainer\n{\nprivate static RestrictedBoltzmannMachineLearningRate learnrate;\nprivate static RestrictedBoltzmannMachineWeightSet weightset;\n}\n```", "```py\nprivate static void TrainWeight(int PWhichVis, int PWhichHid, double PTrainAmount);\nprivate static void TrainBias(RestrictedBoltzmannMachineLayer PLayer, int PWhich, double PPosPhase, double PNegPhase);\n```", "```py\nprivate static double CalculateTrainAmount(double PPosVis, double PPosHid, double PNegVis, double PNegHid)\n{\nreturn ((PPosVis * PPosHid) - (PNegVis * PNegHid));\n}\n```", "```py\nAutoencoderBuilder builder = new AutoencoderBuilder();\nbuilder.AddBinaryLayer(4);\nbuilder.AddBinaryLayer(3);\nbuilder.AddGaussianLayer(3);\nbuilder.AddGaussianLayer(1);\nbuilder.SetFineTuningLearningRateBiases(0, 1.0);\nbuilder.SetFineTuningLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingLearningRateBiases(0, 1.0);\nbuilder.SetPreTrainingLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingMomentumBiases(0, 0.1);\nbuilder.SetPreTrainingMomentumWeights(0, .05);\nAutoencoder encoder = builder.Build();\nRestrictedBoltzmannMachineLayer layer = encoder.GetLayer(0);\nRestrictedBoltzmannMachineLayer layerHidden = encoder.GetLayer(1);\n```", "```py\nencoder.PreTrain(0, new double[] {0.1, .05, .03, 0.8});\n```", "```py\nAutoencoderBuilder builder = new AutoencoderBuilder();\nbuilder.AddBinaryLayer(4);\nbuilder.AddBinaryLayer(3);\nbuilder.AddGaussianLayer(3);\nbuilder.AddGaussianLayer(1);\nbuilder.SetFineTuningLearningRateBiases(0, 1.0);\nbuilder.SetFineTuningLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingLearningRateBiases(0, 1.0);\nbuilder.SetPreTrainingLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingMomentumBiases(0, 0.1);\nbuilder.SetPreTrainingMomentumWeights(0, .05);\nAutoencoder encoder = builder.Build();\nRestrictedBoltzmannMachineLayer layer = encoder.GetLayer(0);\nRestrictedBoltzmannMachineLayer layerHidden = encoder.GetLayer(1);\nencoder.PreTrain(0, new double[] {0.1, .05, .03, 0.8});\nencoder.PreTrain(1, new double[] { 0.1, .05, .03, 0.9 });\nencoder.PreTrain(2, new double[] { 0.1, .05, .03, 0.1 });\nencoder.PreTrainingComplete();\n```", "```py\nprivate void PerformPreTraining(int PPreSynapticLayer)\n{\nRestrictedBoltzmannMachineLearningRate sentlearnrate = new RestrictedBoltzmannMachineLearningRate(learnrate.preLearningRateWeights[PPreSynapticLayer],learnrate.preLearningRateBiases[PPreSynapticLayer],learnrate.preMomentumWeights[PPreSynapticLayer],learnrate.preMomentumBiases[PPreSynapticLayer]);RestrictedBoltzmannMachineTrainer.Train(layers[PPreSynapticLayer], layers[PPreSynapticLayer + 1],trainingdata[PPreSynapticLayer], sentlearnrate, recognitionweights.GetWeightSet(PPreSynapticLayer));\n}\n```", "```py\nAutoencoderBuilder builder = new AutoencoderBuilder();\nbuilder.AddBinaryLayer(4);\nbuilder.AddBinaryLayer(3);\nbuilder.AddGaussianLayer(3);\nbuilder.AddGaussianLayer(1);\nbuilder.SetFineTuningLearningRateBiases(0, 1.0);\nbuilder.SetFineTuningLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingLearningRateBiases(0, 1.0);\nbuilder.SetPreTrainingLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingMomentumBiases(0, 0.1);\nbuilder.SetPreTrainingMomentumWeights(0, .05);\nAutoencoder encoder = builder.Build();\nRestrictedBoltzmannMachineLayer layer = encoder.GetLayer(0);\nRestrictedBoltzmannMachineLayer layerHidden = encoder.GetLayer(1);\nencoder.PreTrain(0, new double[] {0.1, .05, .03, 0.8});\nencoder.PreTrain(1, new double[] { 0.1, .05, .03, 0.9 });\nencoder.PreTrain(2, new double[] { 0.1, .05, .03, 0.1 });\nencoder.PreTrainingComplete();\n```", "```py\nencoder.Save(\"testencoder.txt\");\n```", "```py\npublic void Save(string PFilename)\n{\nTextWriter file = new StreamWriter(PFilename);\nlearnrate.Save(file);\nrecognitionweights.Save(file);\ngenerativeweights.Save(file);\nfile.WriteLine(numlayers);\nfor (inti = 0; i < numlayers; i++)\n{\nif(layers[i].GetType() == typeof(RestrictedBoltzmannMachineGaussianLayer))\n{\nfile.WriteLine(\"RestrictedBoltzmannMachineGaussianLayer\");\n}\nelse if (layers[i].GetType() == typeof(RestrictedBoltzmannMachineBinaryLayer))\n{\nfile.WriteLine(\"RestrictedBoltzmannMachineBinaryLayer\");\n}\nlayers[i].Save(file);\n}\nfile.WriteLine(pretraining);\nfile.Close();\n}\n```", "```py\npublic static Autoencoder Load(string PFilename)\n{\nTextReader file = new StreamReader(PFilename);\nAutoencoder retval = new Autoencoder();\nretval.learnrate = new AutoencoderLearningRate();\nretval.learnrate.Load(file);\nretval.recognitionweights = new AutoencoderWeights();\nretval.recognitionweights.Load(file);\nretval.generativeweights = new AutoencoderWeights();\nretval.generativeweights.Load(file);\nretval.numlayers = int.Parse(file.ReadLine());\nretval.layers = new RestrictedBoltzmannMachineLayer[retval.numlayers];\nfor (inti = 0; i < retval.numlayers; i++)\n{\nstring type = file.ReadLine();\nif (type == \"RestrictedBoltzmannMachineGaussianLayer\")\n{\nretval.layers[i] = new RestrictedBoltzmannMachineGaussianLayer();\n}\nelse if (type == \"RestrictedBoltzmannMachineBinaryLayer\")\n{\nretval.layers[i] = new RestrictedBoltzmannMachineBinaryLayer();\n}\nretval.layers[i].Load(file);\n}\nretval.pretraining = bool.Parse(file.ReadLine());\nretval.InitializeTrainingData();\nretval.errorobservers = new List<IErrorObserver>();\nfile.Close();\nreturn retval;\n}\n```", "```py\nAutoencoder newAutoencoder = Autoencoder.Load(\"testencoder.txt\");\n```", "```py\nAutoencoderBuilder builder = new AutoencoderBuilder();\nbuilder.AddBinaryLayer(4);\nbuilder.AddBinaryLayer(3);\nbuilder.AddGaussianLayer(3);\nbuilder.AddGaussianLayer(1);\nbuilder.SetFineTuningLearningRateBiases(0, 1.0);\nbuilder.SetFineTuningLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingLearningRateBiases(0, 1.0);\nbuilder.SetPreTrainingLearningRateWeights(0, 1.0);\nbuilder.SetPreTrainingMomentumBiases(0, 0.1);\nbuilder.SetPreTrainingMomentumWeights(0, .05);\nAutoencoder encoder = builder.Build();\nRestrictedBoltzmannMachineLayer layer = encoder.GetLayer(0);\nRestrictedBoltzmannMachineLayer layerHidden = encoder.GetLayer(1);\nencoder.PreTrain(0, new double[] {0.1, .05, .03, 0.8});\nencoder.PreTrain(1, new double[] { 0.1, .05, .03, 0.9 });\nencoder.PreTrain(2, new double[] { 0.1, .05, .03, 0.1 });\nencoder.PreTrainingComplete();\nencoder.Save(\"testencoder.txt\");\nAutoencoder newAutoencoder = Autoencoder.Load(\"testencoder.txt\");\n```"]