["```py\npublic class Synapse\n{\n    public Guid Id{ get; set; }\n    public Neuron InputNeuron{ get; set; }    \n    public Neuron OutputNeuron{ get; set; }\n    public double Weight{ get; set; }\n    public double WeightDelta{ get; set; }\n}\n```", "```py\npublic class Neuron\n{\n  public Guid Id{ get; set; }\n\nThe synapse that connects to our input side\n  public List<Synapse> InputSynapses{ get; set; }\n\nThe synapse that connects to our output side\n  public List<Synapse> OutputSynapses{ get; set; }\n  public double Bias{ get; set; }\n\nOur bias values\n  public double BiasDelta{ get; set; }\n  public double Gradient{ get; set; }\n\nThe input value to the neuron\n  public double Value{ get; set; }\n\nIs the neuron a mirror neuron\npublic bool IsMirror{ get; set; }\n\nIs the neuron a canonical neuron\npublic bool IsCanonical{ get; set; }\n\n}\n```", "```py\nprivate void ForwardPropagate(params double[] inputs)\n{\n  var i = 0;\n  InputLayer?.ForEach(a =>a.Value = inputs[i++]);\n  HiddenLayers?.ForEach(a =>a.ForEach(b =>b.CalculateValue()));\n  OutputLayer?.ForEach(a =>a.CalculateValue());\n}\n```", "```py\npublic static class Sigmoid\n{\n  public static double Output(double x)\n  {\n    return x < -45.0 ?0.0 : x > 45.0 ? 1.0 : 1.0 / (1.0 + Math.Exp(-x));\n  }\n\n  public static double Derivative(double x)\n  {\n    return x * (1 - x);\n  }\n}\n```", "```py\nprivate void BackPropagate(params double[] targets)\n{\n  var i = 0;\n  OutputLayer?.ForEach(a =>a.CalculateGradient(targets[i++]));\n  HiddenLayers?.Reverse();\n  HiddenLayers?.ForEach(a =>a.ForEach(b =>b.CalculateGradient()));\n  HiddenLayers?.ForEach(a =>a.ForEach(b =>b.UpdateWeights(LearningRate, Momentum)));\n  HiddenLayers?.Reverse();\n  OutputLayer?.ForEach(a =>a.UpdateWeights(LearningRate, Momentum));\n}\n```", "```py\npublic double CalculateError(double target)\n{\n  return target - Value;\n}\n```", "```py\npublic double CalculateGradient(double? target = null)\n{\n  if (target == null)\n    return Gradient = OutputSynapses.Sum(a =>a.OutputNeuron.Gradient * \n    a.Weight) * Sigmoid.Derivative(Value);\n\n  return Gradient = CalculateError(target.Value) * Sigmoid.Derivative(Value);\n}\n```", "```py\npublic void UpdateWeights(double learnRate, double momentum)\n{\n  var prevDelta = BiasDelta;\n  BiasDelta = learnRate * Gradient;\n  Bias += BiasDelta + momentum * prevDelta;\n\n  foreach (var synapse in InputSynapses)\n  {\n    prevDelta = synapse.WeightDelta;\n    synapse.WeightDelta = learnRate * Gradient * synapse.InputNeuron.Value;\n        synapse.Weight += synapse.WeightDelta + momentum * prevDelta;\n  }\n}\n```", "```py\npublic virtual double CalculateValue()\n{\n  return Value = Sigmoid.Output(InputSynapses.Sum(a =>a.Weight * \n  a.InputNeuron.Value) + Bias);\n}\n```", "```py\npublic NNManager SetupNetwork()\n{\n    _numInputParameters = 2;\n\n    int[] hidden = new int[2];\n    hidden[0] = 3;\n    hidden[1] = 1;\n    _numHiddenLayers = 1;\n    _hiddenNeurons = hidden;\n    _numOutputParameters = 1;\n    _network = new Network(_numInputParameters, _hiddenNeurons,         \n    _numOutputParameters);\n    return this;\n}\n```", "```py\nNNManagermgr = new NNManager();\nMgr\n.SetupNetwork()\n.GetTrainingDataFromUser()\n.TrainNetworkToMinimum()\n.TestNetwork();\n```", "```py\npublic static Network ImportNetwork()\n{\n```", "```py\n  var dn = GetHelperNetwork();\n  if (dn == null) \n  return null;\n```", "```py\nvar network = new Network();\n  var allNeurons = new List<Neuron>();\n```", "```py\nnetwork.LearningRate = dn.LearningRate;\n  network.Momentum = dn.Momentum;\n```", "```py\nforeach (var n in dn.InputLayer)\n  {\n    var neuron = new Neuron\n    {\n      Id = n.Id,\n      Bias = n.Bias,\n      BiasDelta = n.BiasDelta,\n      Gradient = n.Gradient,\n      Value = n.Value\n    };\n\n    network.InputLayer?.Add(neuron);\n    allNeurons.Add(neuron);\n  }\n```", "```py\n  foreach (var layer in dn.HiddenLayers)\n  {\n    var neurons = new List<Neuron>();\n    foreach (var n in layer)\n    {\n      var neuron = new Neuron\n      {\n        Id = n.Id,\n        Bias = n.Bias,\n        BiasDelta = n.BiasDelta,\n        Gradient = n.Gradient,\n        Value = n.Value\n      };\n\n      neurons.Add(neuron);\n      allNeurons.Add(neuron);\n    }\n    network.HiddenLayers?.Add(neurons);\n  }\n```", "```py\nforeach (var n in dn.OutputLayer)\n  {\n    var neuron = new Neuron\n    {\n      Id = n.Id,\n      Bias = n.Bias,\n      BiasDelta = n.BiasDelta,\n      Gradient = n.Gradient,\n      Value = n.Value\n    };\n\n    network.OutputLayer?.Add(neuron);\n    allNeurons.Add(neuron);\n  }\n```", "```py\n\n  foreach (var syn in dn.Synapses)\n  {\n    var synapse = new Synapse{ Id = syn.Id };\n    var inputNeuron = allNeurons.First(x =>x.Id==syn.InputNeuronId);\n    var outputNeuron = allNeurons.First(x =>x.Id==syn.OutputNeuronId);\n    synapse.InputNeuron = inputNeuron;\n    synapse.OutputNeuron = outputNeuron;\n    synapse.Weight = syn.Weight;\n    synapse.WeightDelta = syn.WeightDelta;\n\n    inputNeuron?.OutputSynapses?.Add(synapse);\n    outputNeuron?.InputSynapses?.Add(synapse);\n  }\n  return network;\n}\n```", "```py\npublic NNManager GetTrainingDataFromUser()\n{\nvar numDataSets = GetInput(\"\\tHow many datasets are you going to enter? \", 1, int.MaxValue);\n\n  var newDatasets = new List<NNDataSet>();\n  for (var i = 0; i<numDataSets; i++)\n  {\n    var values = GetInputData($\"\\tData Set {i + 1}: \");\n    if (values == null)\n    {\n      return this;\n    }\n\n    var expectedResult = GetExpectedResult($\"\\tExpected Result for Data \n    Set {i + 1}: \");\n    if (expectedResult == null)\n    {\n      return this;\n    }\n\n    newDatasets.Add(newNNDataSet(values, expectedResult));\n  }\n\n  _dataSets = newDatasets;\n  return this;\n}\n```", "```py\npublic static List<DataSet>ImportDatasets()\n{\n  var dialog = new OpenFileDialog\n  {\n    Multiselect = false,\n    Title = \"Open Dataset File\",\n    Filter = \"Text File|*.txt;\"\n  };\n\n  using (dialog)\n  {\n    if (dialog.ShowDialog() != DialogResult.OK) \n    return null;\n\n    using (var file = File.OpenText(dialog.FileName))\n    {\n```", "```py\n      return JsonConvert.DeserializeObject<List<DataSet>>(file.ReadToEnd());\n    }\n  }\n}\n```", "```py\npublic double[] Compute(params double[] inputs)\n{\n```", "```py\n  ForwardPropagate(inputs);\n```", "```py\n  return OutputLayer.Select(a =>a.Value).ToArray();\n}\n```", "```py\npublic NNManager ExportNetwork()\n{\n  Console.WriteLine(\"\\tExporting Network...\");\n  ExportHelper.ExportNetwork(_network);\n  Console.WriteLine(\"\\t**Exporting Complete!**\", Color.Green);\n  return this;\n}\n```", "```py\npublic NNManager TrainNetworkToMinimum()\n{\nvar minError = GetDouble(\"\\tMinimum Error: \", 0.000000001, 1.0);\nConsole.WriteLine(\"\\tTraining...\");\n_network.Train(_dataSets, minError);\nConsole.WriteLine(\"\\t**Training Complete**\", Color.Green);\nreturn this;\n}\n\npublic NNManager TrainNetworkToMaximum()\n{\nvarmaxEpoch = GetInput(\"\\tMax Epoch: \", 1, int.MaxValue);\nif(!maxEpoch.HasValue)\n       {\n  return this;\n       }\n\nConsole.WriteLine(\"\\tTraining...\");\n_network.Train(_dataSets, maxEpoch.Value);\nConsole.WriteLine(\"\\t**Training Complete**\", Color.Green);\nreturn this;\n}\n```", "```py\npublic void Train(List<DataSet>dataSets, int numEpochs)\n{\n  for (var i = 0; i<numEpochs; i++)\n  {\n    foreach (var dataSet in dataSets)\n    {\n      ForwardPropagate(dataSet.Values);\n      BackPropagate(dataSet.Targets);\n    }\n  }\n}\n```", "```py\npublic NNManager TestNetwork()\n{\nConsole.WriteLine(\"\\tTesting Network\", Color.Yellow);\n\n  while (true)\n  {\n```", "```py\n\n    var values = GetInputData($\"\\tType{_numInputParameters} inputs: \");\n    if (values == null)\n    {\n      return this;\n    }\n```", "```py\n    var results = _network?.Compute(values);\n\n```", "```py\n    foreach (var result in results)\n    {\n    Console.WriteLine(\"\\tOutput: \" + \n    DoubleConverter.ToExactString(result), Color.Aqua);\n    }\n\n    return this;\n  }\n}\n```", "```py\npublic double[] Compute(params double[] inputs)\n{\n  ForwardPropagate(inputs);\n  return OutputLayer.Select(a =>a.Value).ToArray();\n}\n```", "```py\npublic NNManager ExportNetwork()\n{\n  Console.WriteLine(\"\\tExporting Network...\");\n  ExportHelper.ExportNetwork(_network);\n  Console.WriteLine(\"\\t**Exporting Complete!**\", Color.Green);\n  return this;\n}\n```", "```py\npublic NNManager ExportDatasets()\n{\n      Console.WriteLine(\"\\tExporting Datasets...\");\n      ExportHelper.ExportDatasets(_dataSets);\n      Console.WriteLine(\"\\t**Exporting Complete!**\", Color.Green);\n      return this;\n}\n```", "```py\npublic class Network\n{\n      public double LearningRate{ get; set; }\n      public double Momentum{ get; set; }\n      public List<Neuron>InputLayer{ get; set; }\n      public List<List<Neuron>>HiddenLayers{ get; set; }\n      public List<Neuron>OutputLayer{ get; set; }\n      public List<Neuron>MirrorLayer {get; set; }\n      public List<Neuron>CanonicalLayer{ get; set; }\n```", "```py\npublic Neuron(IEnumerable<Neuron> inputNeurons) : this()\n{\nEnsure.That(inputNeurons).IsNotNull();\n\n  foreach (var inputNeuron in inputNeurons)\n  {\n    var synapse = new Synapse(inputNeuron, this);\n    inputNeuron?.OutputSynapses?.Add(synapse);\n    InputSynapses?.Add(synapse);\n  }\n}\n```"]