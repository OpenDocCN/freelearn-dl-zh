- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Boost Coding Efficiency for Command-Line and Shell Script with Auto-Code Generation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过自动代码生成提高命令行和 Shell 脚本的编码效率
- en: 'In this chapter, we will look at the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: Overview of command-line and shell script
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行和 Shell 脚本概述
- en: Command-line auto-code generation for system administrators using Amazon Q Developer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 为系统管理员生成命令行自动代码
- en: Shell script auto-code generation for programmers using Amazon Q Developer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 为程序员生成 Shell 脚本自动代码
- en: Shell script explainability and optimization using Amazon Q Developer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 解释和优化 Shell 脚本
- en: 'In the previous chapter, we dived into one of the most dominant database management
    languages in the software industry: **Structured Query Language** (**SQL**). Using
    two user personas—**database administrators** (**DBAs**) and **data engineers**
    (**DEs**)—we introduced how auto-code generation through Amazon Q Developer can
    help understand the basics, learn the syntax, and automatically generate code
    for common DBA and DE activities.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们深入探讨了软件行业中占主导地位的数据库管理语言之一：**结构化查询语言**（**SQL**）。通过两个用户角色——**数据库管理员**（**DBA**）和
    **数据工程师**（**DE**），我们介绍了通过 Amazon Q Developer 自动生成代码如何帮助理解基础知识、学习语法，并自动生成常见的 DBA
    和 DE 活动的代码。
- en: In this chapter, we continue with a similar theme and focus on system administrators
    and shell script programmers. System administrators primarily use the **command-line
    interface** (**CLI**) for various system configuration tasks, and shell script
    programmers use **operating system** (**OS**) commands to automate repetitive
    tasks such as development processes, file transfers, and preprocessing tasks.
    We will introduce how Amazon Q Developer can help these professionals understand
    the basics, learn the syntax, and automatically generate code for common system
    administration and shell script programming activities. Then, we will explore
    code explainability to support documentation and code optimization recommendations
    provided by Amazon Q Developer for shell scripts.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续探讨类似主题，重点关注系统管理员和 Shell 脚本程序员。系统管理员主要使用 **命令行界面**（**CLI**）进行各种系统配置任务，而
    Shell 脚本程序员使用 **操作系统**（**OS**）命令来自动化重复性任务，如开发过程、文件传输和预处理任务。我们将介绍 Amazon Q Developer
    如何帮助这些专业人士理解基础知识、学习语法，并自动生成常见的系统管理和 Shell 脚本编程活动的代码。然后，我们将探讨代码可解释性，以支持 Amazon
    Q Developer 为 Shell 脚本提供的文档和代码优化建议。
- en: Overview of command-line and shell script
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行和 Shell 脚本概述
- en: OS code plays a pivotal role in managing and maintaining the stability, security,
    and efficiency of IT infrastructures. Shell scripting and the command line serve
    as fundamental tools for automating routine tasks, executing system commands,
    and orchestrating complex workflows across Unix-based operating systems such as
    Linux and macOS. As organizations strive to optimize operational processes and
    enhance scalability, the demand for efficient shell scripting and command-line
    solutions becomes increasingly significant.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统代码在管理和维护 IT 基础设施稳定性、安全性和效率方面发挥着关键作用。Shell 脚本和命令行是自动化常规任务、执行系统命令以及在基于 Unix
    的操作系统（如 Linux 和 macOS）上编排复杂工作流程的基本工具。随着组织努力优化运营流程和增强可扩展性，对高效 Shell 脚本和命令行解决方案的需求日益增加。
- en: Auto-code generation has emerged as a transformative approach to streamline
    shell script development using an IDE and/or command line, reduce manual effort,
    and improve productivity for system administrators, programmers, and engineers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自动代码生成已成为通过 IDE 和/或命令行简化 Shell 脚本开发、减少人工努力并提高系统管理员、程序员和工程师生产力的变革性方法。
- en: CLI and shell scripts enable system administrators, programmers, and engineers
    to automate repetitive tasks such as file management, system monitoring, user
    administration, and backup operations. It also facilitates chaining multiple commands
    together for the execution of system commands and complex workflows, ensuring
    consistency and reliability in IT operations. However, writing and maintaining
    complex chained commands and shell scripts can be time-consuming, prone to errors,
    and needs expertise, especially as scripts become more intricate and critical
    to business operations. System administrators, programmers, and engineers can
    leverage different prompting techniques and chat-style integrations (refer to
    [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060)) to get recommendations for the
    automated creation of shell scripts tailored to specific system tasks. This interaction
    model accelerates script development cycles, reduces human error, and ensures
    uniformity in script structure and execution across different OS environments.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行和shell脚本使系统管理员、程序员和工程师能够自动化重复性任务，如文件管理、系统监控、用户管理和备份操作。它还便于将多个命令串联起来执行系统命令和复杂的工作流程，确保IT操作的一致性和可靠性。然而，编写和维护复杂的串联命令和shell脚本可能耗时，容易出错，并且需要专业知识，尤其是当脚本变得更加复杂且对业务运营至关重要时。系统管理员、程序员和工程师可以利用不同的提示技术以及聊天式集成（参考[*第3章*](B21378_03.xhtml#_idTextAnchor060)）来获取针对特定系统任务的定制化shell脚本自动创建的建议。这种交互模型加速了脚本开发周期，减少了人为错误，并确保了在不同操作系统环境中脚本结构和执行的统一性。
- en: Moreover, Amazon Q Developer serves as an educational resource for learning
    shell scripting techniques, available command-line syntax, and best practices.
    It offers interactive tutorials, explanations of shell script concepts, and practical
    examples of automation scripts through its chat interface. This educational aspect
    helps system administrators, programmers, and engineers enhance their scripting
    skills, adopt industry-standard practices, and leverage advanced automation capabilities
    effectively.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Amazon Q 开发者作为学习shell脚本技术、可用命令行语法和最佳实践的教育资源。它通过其聊天界面提供交互式教程、shell脚本概念的说明以及自动化脚本的实用示例。这一教育特性有助于系统管理员、程序员和工程师提升他们的脚本编写技能，采用行业标准实践，并有效地利用高级自动化功能。
- en: For experienced users, Amazon Q Developer provides advanced features such as
    script optimization and error-handling suggestions. It analyzes generated shell
    scripts, identifies potential inefficiencies or pitfalls, and offers recommendations
    to enhance script performance and reliability. These optimization capabilities
    are crucial for maintaining operational efficiency and scalability in dynamic
    IT environments. The integration of Amazon Q Developer with shell scripting also
    facilitates collaborative practices. Teams working on system automation initiatives
    benefit from standardized shell script templates, shared automation workflows,
    and streamlined code review processes. This consistency enhances team productivity,
    fosters collaboration between development and operations teams, and accelerates
    time-to-deployment for critical IT infrastructure changes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经验丰富的用户，Amazon Q 开发者提供了高级功能，如脚本优化和错误处理建议。它分析生成的shell脚本，识别潜在的低效或陷阱，并提供提高脚本性能和可靠性的建议。这些优化能力对于在动态IT环境中保持操作效率和可扩展性至关重要。Amazon
    Q 开发者与shell脚本的集成还促进了协作实践。致力于系统自动化项目的团队从标准化的shell脚本模板、共享的自动化工作流程和简化的代码审查流程中受益。这种一致性提高了团队的生产力，促进了开发和运维团队之间的协作，并加快了关键IT基础设施变更的部署时间。
- en: In the next sections, we’ll explore how Amazon Q Developer can help generate
    OS code using the Unix CLI and shell scripting. To illustrate, I will use an overall
    chain-of-thought prompt technique to mimic a sequence of activities, breaking
    them into single-line and multi-line prompts (refer to [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060)
    for additional details). For the platform, I’ll use the Amazon Q Developer interface
    with VS Code for shell scripts and macOS Terminal for the CLI. For configuration
    steps to integrate Amazon Q Developer with VS Code and the CLI, refer to [*Chapter
    2*](B21378_02.xhtml#_idTextAnchor022) and check the *References* section at the
    end of the chapter for the URLs for *Terminal shell integration*, and *Installing
    Amazon Q for the* *command line*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨 Amazon Q 开发者如何通过 Unix CLI 和 shell 脚本生成操作系统代码。为了说明，我将使用整体思维链提示技术来模拟一系列活动，将它们分解为单行和多行提示（有关更多详细信息，请参阅[*第
    3 章*](B21378_03.xhtml#_idTextAnchor060)）。对于平台，我将使用带有 VS Code 的 Amazon Q 开发者界面和
    macOS 终端 CLI。有关将 Amazon Q 开发者与 VS Code 和 CLI 集成的配置步骤，请参阅[*第 2 章*](B21378_02.xhtml#_idTextAnchor022)，并在章节末尾的*参考文献*部分查看*终端
    shell 集成*和*为命令行安装 Amazon Q*的 URL。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Amazon Q Developer uses **large language models** (**LLMs**), which, by nature,
    are non-deterministic, so you may not get exactly the same answers/code blocks
    shown in the code snapshots; try to update prompts to get desired recommendations.
    However, logically, the generated answer/code should meet the requirements.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q 开发者使用**大型语言模型**（**LLMs**），其本质是非确定性的，因此您可能不会得到代码快照中显示的完全相同的答案/代码块；尝试更新提示以获取所需的建议。然而，从逻辑上讲，生成的答案/代码应满足要求。
- en: Command-line auto-code generation for system administrators using Amazon Q Developer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Q 开发者为系统管理员自动生成命令行代码
- en: I will assume the role of a system administrator who is familiar with responsibilities
    such as disk space management, user management, process management, and library
    management, but requires assistance with writing commands with the correct syntax.
    Using macOS, I will demonstrate how Amazon Q Developer interacts with the CLI.
    This example showcases how Amazon Q Developer can simplify and automate complex
    tasks, even for those with limited command-line experience.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我将扮演一个熟悉磁盘空间管理、用户管理、进程管理和库管理等职责的系统管理员角色，但需要帮助编写具有正确语法的命令。使用 macOS，我将演示 Amazon
    Q 开发者如何与 CLI 交互。这个示例展示了 Amazon Q 开发者如何简化并自动化复杂任务，即使对于那些具有有限命令行经验的人来说也是如此。
- en: By following these steps, you will be able to leverage Amazon Q Developer’s
    powerful features to streamline your command-line tasks and enhance your overall
    productivity as a system administrator.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，您将能够利用 Amazon Q 开发者的强大功能来简化您的命令行任务，并作为系统管理员提高您的整体生产力。
- en: 'To start the interaction with Amazon Q Developer, open the terminal and type
    `q ai`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始与 Amazon Q 开发者的交互，请打开终端并输入 `q ai`：
- en: '![Figure 8.1 – CLI – Amazon Q Developer basics](img/B21378_08_1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – CLI – Amazon Q 开发者基础](img/B21378_08_1.jpg)'
- en: Figure 8.1 – CLI – Amazon Q Developer basics
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – CLI – Amazon Q 开发者基础
- en: Once the integration window is open, let’s ask Amazon Q Developer to provide
    the commands related to common tasks of a system administrator in the following
    sections. These tasks encompass various areas, including disk space management,
    user management, library management, process management, network configuration,
    and system monitoring. By leveraging Amazon Q Developer, system administrators
    can receive detailed, step-by-step commands for a wide range of tasks, ensuring
    efficient and accurate execution. The CLI of Amazon Q Developer allows users to
    execute commands without explicitly typing them in the Terminal prompt.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦集成窗口打开，让我们要求 Amazon Q 开发者提供以下部分中系统管理员常见任务的命令。这些任务包括磁盘空间管理、用户管理、库管理、进程管理、网络配置和系统监控等多个领域。通过利用
    Amazon Q 开发者，系统管理员可以收到针对广泛任务的详细、分步命令，确保高效和准确的执行。Amazon Q 开发者的 CLI 允许用户执行命令而无需在终端提示符中明确输入。
- en: Disk space management CLI auto-code generation
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 磁盘空间管理 CLI 自动代码生成
- en: Disk space management is one of the key responsibilities of system administrators.
    Effective space management helps maintain system stability, performance, and security,
    making it a crucial task for system administrators. Let’s start with some of the
    disk space management-related tasks. Let’s use a chain of thoughts to mimic common
    tasks and break them into simple single-line prompts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘空间管理是系统管理员的关键职责之一。有效的空间管理有助于维护系统稳定性、性能和安全，因此对于系统管理员来说是一项至关重要的任务。让我们从一些与磁盘空间管理相关的任务开始。让我们使用思维链来模拟常见任务，并将它们分解成简单的单行提示。
- en: 'Let’s start with finding out the available disk space:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查找可用的磁盘空间开始：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 8.2 – CLI – Amazon Q Developer available disk space](img/B21378_08_2.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – CLI – Amazon Q Developer可用磁盘空间](img/B21378_08_2.jpg)'
- en: Figure 8.2 – CLI – Amazon Q Developer available disk space
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – CLI – Amazon Q Developer可用磁盘空间
- en: 'Now, let’s determine the utilized disk space and sort the results from highest
    to lowest based on the amount of space occupied on the disk:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确定已使用的磁盘空间，并根据磁盘占用的空间量从高到低排序结果：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 8.3 – CLI – Amazon Q Developer disk usage](img/B21378_08_3.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – CLI – Amazon Q Developer磁盘使用情况](img/B21378_08_3.jpg)'
- en: Figure 8.3 – CLI – Amazon Q Developer disk usage
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – CLI – Amazon Q Developer磁盘使用情况
- en: 'Now, let’s find the sizes of files and sort them from highest to lowest size,
    so system administrators can identify which files contribute most to disk space
    utilization:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们查找文件的大小，并按大小从高到低排序，以便系统管理员可以确定哪些文件对磁盘空间利用率贡献最大：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure 8.4 – CLI – Amazon Q Developer large file](img/B21378_08_4.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – CLI – Amazon Q Developer大文件](img/B21378_08_4.jpg)'
- en: Figure 8.4 – CLI – Amazon Q Developer large file
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – CLI – Amazon Q Developer大文件
- en: Observe in the preceding screenshot that Amazon Q Developer provided a single
    command by chaining multiple commands to achieve the instruction in the prompt.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 观察前一个屏幕截图，可以看到Amazon Q Developer通过链式多个命令提供了一个单一命令，以实现提示中的指令。
- en: 'Now, let’s free up some space by tasking Amazon Q Developer with finding the
    top 10 largest files and archiving them. This may involve a slightly complex process:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过让Amazon Q Developer查找最大的10个文件并将它们存档来释放一些空间。这可能涉及一个稍微复杂的过程：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 8.5 – CLI – Amazon Q Developer archive files](img/B21378_08_5.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – CLI – Amazon Q Developer存档文件](img/B21378_08_5.jpg)'
- en: Figure 8.5 – CLI – Amazon Q Developer archive files
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – CLI – Amazon Q Developer存档文件
- en: As you can see in the preceding screenshot, Amazon Q Developer provided a single
    command by chaining multiple commands to achieve the instruction in the prompt.
    It also used the number of files we specified and passed only those files to archive
    as `tar.gz`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中看到的，Amazon Q Developer通过链式多个命令提供了一个单一命令，以实现提示中的指令。它还使用了我们指定的文件数量，并将这些文件作为`tar.gz`存档。
- en: Now, let’s look at user management, another very important area of responsibility
    for a system administrator.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看用户管理，这是系统管理员另一个非常重要的责任领域。
- en: User management CLI auto-code generation
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统管理员用户管理CLI自动代码生成
- en: User management for system administrators involves tasks related to creating,
    configuring, maintaining, and securing user accounts on a computer system or network.
    Effective user management is crucial for maintaining system security, ensuring
    data integrity, and supporting efficient operations within an organization. Let’s
    use a chain of thoughts to mimic common tasks and break them into simple single-line
    prompts.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员用户管理涉及在计算机系统或网络上创建、配置、维护和保障用户账户的任务。有效的用户管理对于维护系统安全、确保数据完整性和支持组织内高效运作至关重要。让我们使用思维链来模拟常见任务，并将它们分解成简单的单行提示。
- en: 'Let’s begin with basic user management tasks, such as identifying a list of
    all users who have access to the system:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基本的用户管理任务开始，例如识别所有有权访问系统的用户列表：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 8.6 – CLI – Amazon Q Developer user list](img/B21378_08_6.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – CLI – Amazon Q Developer用户列表](img/B21378_08_6.jpg)'
- en: Figure 8.6 – CLI – Amazon Q Developer user list
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – CLI – Amazon Q Developer用户列表
- en: 'Now, let’s identify active users on the system and determine when they last
    logged in:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们识别系统上的活跃用户并确定他们最后一次登录的时间：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure 8.7 – CLI – Amazon Q Developer users’ last login](img/B21378_08_7.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – CLI – Amazon Q Developer用户最后登录](img/B21378_08_7.jpg)'
- en: Figure 8.7 – CLI – Amazon Q Developer users’ last login
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – CLI – Amazon Q Developer用户最后登录
- en: 'Now, let’s identify dormant users on the system who have not logged in recently:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们识别系统上最近未登录的休眠用户：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 8.8 – CLI – Amazon Q Developer user never logged in](img/B21378_08_8.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – CLI – Amazon Q Developer 用户从未登录](img/B21378_08_8.jpg)'
- en: Figure 8.8 – CLI – Amazon Q Developer user never logged in
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – CLI – Amazon Q Developer 用户从未登录
- en: 'To enhance security and reduce vulnerabilities, let’s remove dormant users
    from the system who do not have a recent login date associated with them. This
    process may be somewhat complex so let’s see how Amazon Q Developer can help:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强安全性和减少漏洞，让我们从系统中删除没有最近登录日期的休眠用户。这个过程可能有些复杂，所以让我们看看Amazon Q Developer 如何帮助：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure 8.9 – CLI – Amazon Q Developer dropping users who never logged in](img/B21378_08_9.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – CLI – Amazon Q Developer 删除从未登录的用户](img/B21378_08_9.jpg)'
- en: Figure 8.9 – CLI – Amazon Q Developer dropping users who never logged in
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – CLI – Amazon Q Developer 删除从未登录的用户
- en: Observe in the preceding screenshots that as the complexity of requirements
    increases, Amazon Q Developer chains multiple commands to achieve the instruction
    in the prompt.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图观察中，可以看到随着需求复杂性的增加，Amazon Q Developer 会链式执行多个命令以实现提示中的指令。
- en: Now, let’s look at some of the process management-related tasks and corresponding
    support by Amazon Q Developer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些与进程管理相关的任务以及Amazon Q Developer 的相应支持。
- en: Process management CLI auto-code generation
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程管理CLI自动代码生成
- en: Process management is a critical responsibility for system administrators, involving
    tasks such as monitoring, controlling, and optimizing running processes on a computer
    system to ensure efficient resource utilization and performance. Maintaining the
    health of the servers is one of the important responsibilities of a system administrator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 进程管理是系统管理员的一项关键职责，包括监控、控制和优化计算机系统上运行的进程，以确保资源利用率和性能的效率。维护服务器的健康是系统管理员的重要职责之一。
- en: 'Let’s begin by asking Amazon Q Developer to generate commands for finding all
    active processes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从要求Amazon Q Developer 生成查找所有活跃进程的命令开始：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure 8.10 – CLI – Amazon Q Developer active processes](img/B21378_08_10.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – CLI – Amazon Q Developer 活跃进程](img/B21378_08_10.jpg)'
- en: Figure 8.10 – CLI – Amazon Q Developer active processes
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – CLI – Amazon Q Developer 活跃进程
- en: 'In process management, the CPU plays a vital role, so let’s find the top 10
    CPU-intensive processes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在进程管理中，CPU 在系统中有效执行多个进程方面起着至关重要的作用，因此让我们找出前10个CPU密集型进程：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Figure 8.11 – CLI – Amazon Q Developer top CPU processes](img/B21378_08_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图8.11 – CLI – Amazon Q Developer 顶级CPU进程](img/B21378_08_11.jpg)'
- en: Figure 8.11 – CLI – Amazon Q Developer top CPU processes
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – CLI – Amazon Q Developer 顶级CPU进程
- en: 'Similar to the CPU, memory plays a crucial role in effective multiple-process
    execution across the system, so let’s identify the top 10 memory-intensive processes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与CPU类似，内存在整个系统中的多进程有效执行中起着至关重要的作用，因此让我们确定前10个内存密集型进程：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Figure 8.12 – CLI – Amazon Q Developer top memory processes](img/B21378_08_12.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图8.12 – CLI – Amazon Q Developer 顶级内存进程](img/B21378_08_12.jpg)'
- en: Figure 8.12 – CLI – Amazon Q Developer top memory processes
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – CLI – Amazon Q Developer 顶级内存进程
- en: 'System administrators often need to terminate processes that are consuming
    high memory or CPU resources. To simulate this scenario, let’s use Amazon Q Developer
    to create a command to kill the top two processes consuming the most memory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员通常需要终止消耗大量内存或CPU资源的进程。为了模拟这种情况，让我们使用Amazon Q Developer 创建一个命令来杀死消耗最多内存的前两个进程：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Figure 8.13 – CLI – Amazon Q Developer kill top memory processes](img/B21378_08_13.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图8.13 – CLI – Amazon Q Developer 杀死顶级内存进程](img/B21378_08_13.jpg)'
- en: Figure 8.13 – CLI – Amazon Q Developer kill top memory processes
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – CLI – Amazon Q Developer 杀死顶级内存进程
- en: As you can see in the preceding screenshot, Amazon Q Developer efficiently generated
    the precise command required to free up memory by terminating the top two memory-intensive
    processes. This involved a slightly complex command where multiple commands were
    linked together end to end.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，Amazon Q Developer 高效地生成了精确的命令，通过终止两个内存密集型进程来释放内存。这涉及一个稍微复杂的命令，其中多个命令被端到端地链接在一起。
- en: Now, let’s look at one last area related to library management, which includes
    installing new libraries and upgrading existing ones.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看与库管理相关的一个最后区域，这包括安装新库和升级现有库。
- en: Library management CLI auto-code generation
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库管理CLI自动代码生成
- en: There are relatively fewer activities in library management compared to other
    sections, but many of these tasks are crucial for ensuring that all applications
    run smoothly on the server. Proper library management, including the installation
    of new libraries and the upgrading of existing ones, is essential for maintaining
    the functionality and performance of applications. These tasks, while less frequent,
    play a significant role in preventing software conflicts, enhancing security,
    and ensuring that applications have access to the latest features and optimizations.
    Therefore, even though library management activities might seem less numerous,
    their impact on the overall health and efficiency of the server environment is
    substantial.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他部分相比，图书馆管理中的活动相对较少，但这些任务对于确保所有应用程序在服务器上平稳运行至关重要。适当的图书馆管理，包括安装新库和升级现有库，对于维护应用程序的功能和性能至关重要。这些任务虽然不那么频繁，但在防止软件冲突、增强安全性和确保应用程序能够访问最新功能和优化方面发挥着重要作用。因此，尽管图书馆管理活动可能看起来不多，但它们对服务器环境整体健康和效率的影响是显著的。
- en: 'Let’s start with the basics to get the list of all the libraries and save them
    in a file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基础开始，获取所有库的列表并将它们保存到文件中：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Figure 8.14 – CLI – Amazon Q Developer list of all libraries](img/B21378_08_14.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – CLI – Amazon Q开发者所有库列表](img/B21378_08_14.jpg)'
- en: Figure 8.14 – CLI – Amazon Q Developer list of all libraries
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – CLI – Amazon Q开发者所有库列表
- en: 'It’s standard practice for system administrators to verify the version of an
    installed library. For example, let’s utilize Python and request Amazon Q Developer
    to generate the command that identifies the associated version:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员验证已安装库的版本是标准做法。例如，让我们利用Python并请求Amazon Q开发者生成识别相关版本的命令：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Figure 8.15 – CLI – Amazon Q Developer finding the version](img/B21378_08_15.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图8.15 – CLI – Amazon Q开发者查找版本](img/B21378_08_15.jpg)'
- en: Figure 8.15 – CLI – Amazon Q Developer finding the version
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 – CLI – Amazon Q开发者查找版本
- en: 'Similarly, system administrators often need to upgrade installed libraries.
    For example, let’s use Python and ask Amazon Q Developer to generate the command
    for upgrading the Python version:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，系统管理员通常需要升级已安装的库。例如，让我们使用Python并让Amazon Q开发者生成升级Python版本的命令：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Figure 8.16 – CLI – Amazon Q Developer upgrading the version](img/B21378_08_16.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图8.16 – CLI – Amazon Q开发者升级版本](img/B21378_08_16.jpg)'
- en: Figure 8.16 – CLI – Amazon Q Developer upgrading the version
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – CLI – Amazon Q开发者升级版本
- en: I have illustrated a few commonly used CLI commands that system administrators
    use, demonstrating Amazon Q Developer’s capability to provide commands ranging
    from single commands to chaining multiple ones to achieve the requirements. Additionally,
    try using Amazon Q Developer for other user personas who could benefit from generating
    CLI commands using simple single-line prompts.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经展示了系统管理员常用的几个常用CLI命令，展示了Amazon Q开发者提供从单个命令到链式多个命令以实现要求的命令的能力。此外，尝试使用Amazon
    Q开发者为其他可能从生成CLI命令中受益的用户角色。
- en: In the next section, we’ll explore how Amazon Q Developer can help programmers
    write shell scripts.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨Amazon Q开发者如何帮助程序员编写shell脚本。
- en: Shell script auto-code generation for programmers using Amazon Q Developer
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon Q开发者为程序员生成Shell脚本自动代码
- en: Continuing with the theme of previous chapters, I am going to start with the
    persona of a programmer or an engineer who wishes to learn and develop code using
    shell scripts.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着前几章的主题，我将从一个希望学习和开发使用shell脚本的程序员或工程师的角色开始。
- en: Shell script basics
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shell脚本基础
- en: 'Let’s use Amazon Q Developer’s chat-style interface to educate programmers,
    where they can simply ask questions in natural language to learn about the available
    commands and functions. I’ll use chat-style interaction and single-line and multi-line
    prompt techniques:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Amazon Q开发者的聊天风格界面来教育程序员，他们可以简单地用自然语言提问来了解可用的命令和功能。我将使用聊天风格交互和单行和多行提示技术：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Figure 8.17 – Shell script – basics](img/B21378_08_17.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图8.17 – Shell脚本 – 基础](img/B21378_08_17.jpg)'
- en: Figure 8.17 – Shell script – basics
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – Shell脚本 – 基础
- en: As you can see in the preceding screenshot, for learners, Amazon Q Developer
    pointed out important areas in which shell scripts are effective, such as automation,
    system administration, application deployment, and more. It also provided a `"Hello,
    World !"` example of the shell script with a declaration of the `bash` shell.
    In addition, it provided sources that can be used for additional information.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，对于学习者，Amazon Q Developer指出了Shell脚本有效的关键区域，例如自动化、系统管理、应用部署等。它还提供了一个带有`bash`
    shell声明的`"Hello, World !"` Shell脚本示例。此外，它还提供了可用于获取更多信息的数据源。
- en: 'Now, let’s get more information and ask about commonly used shell script commands
    and corresponding syntax with examples:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们获取更多信息，并询问常用的Shell脚本命令及其对应的语法示例：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Figure 8.18 – Shell – list of commands, partial screenshot](img/B21378_08_18.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图8.18 – Shell – 命令列表，部分截图](img/B21378_08_18.jpg)'
- en: Figure 8.18 – Shell – list of commands, partial screenshot
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 – Shell – 命令列表，部分截图
- en: As you can see in the preceding partial screenshot, Amazon Q Developer offers
    a catalog of shell script commands categorized into file and directory commands,
    text processing commands, system information commands, process management commands,
    network commands, and user and permission commands. Additionally, Bash supports
    control structures, functions, and other features, making it a robust scripting
    language for automating tasks and system administration on Unix-like operating
    systems.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个部分截图所示，Amazon Q Developer提供了一个Shell脚本命令目录，这些命令被分类为文件和目录命令、文本处理命令、系统信息命令、进程管理命令、网络命令以及用户和权限命令。此外，Bash支持控制结构、函数和其他特性，使其成为自动化Unix-like操作系统任务和系统管理的强大脚本语言。
- en: 'Let’s now request Amazon Q Developer to provide the syntax and an example for
    the `"``cat"` command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们请求Amazon Q Developer提供`"``cat"`命令的语法和示例：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Figure 8.19 – Shell – the “cat” command](img/B21378_08_19.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图8.19 – Shell – “cat”命令](img/B21378_08_19.jpg)'
- en: Figure 8.19 – Shell – the “cat” command
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19 – Shell – “cat”命令
- en: As you can see in the preceding screenshots, Amazon Q Developer provided basic
    usage of the command. Then, it provided the syntax, `cat [OPTIONS] [FILE(S)]`,
    and different options such as `-n`, `-b`, `-s`, `-v`, `-E`, and `-T` with examples.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，Amazon Q Developer提供了命令的基本用法。然后，它提供了语法`cat [OPTIONS] [FILE(S)]`以及不同的选项，如`-n`、`-b`、`-s`、`-v`、`-E`和`-T`，并提供了示例。
- en: Shell script generation for programmers
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序员用Shell脚本生成
- en: Now that we understand the basics of shell scripting, let’s use the preceding
    information for a use case.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Shell脚本的基础知识，让我们使用前面的信息来处理一个用例。
- en: 'Here is the use case: Create a shell script to accept a filename as a parameter.
    Check that the file is available and readable. If it is, then copy the file in
    the `/user/input/files` directory and start the `initial_data_load.sh` script.
    Then, check for successful completion of the process.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用案例：创建一个接受文件名作为参数的Shell脚本。检查文件是否存在且可读。如果是，则在`/user/input/files`目录中复制该文件并启动`initial_data_load.sh`脚本。然后，检查进程是否成功完成。
- en: 'Let’s use the chain-of-thought prompt technique to break this use case down
    into smaller tasks that, when combined, will achieve the end-to-end scenario:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用思维链提示技术将这个用例分解成更小的任务，当它们组合在一起时，将实现端到端场景：
- en: Create a shell script to accept a filename as a parameter.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接受文件名作为参数的Shell脚本。
- en: Check that the file is available and readable, then copy the file in the `/``user/input/files`
    directory.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查文件是否存在且可读，然后在`/``user/input/files`目录中复制该文件。
- en: Assume that the programmer has already created a script called `initial_data_load.sh`.
    Let’s start the `initial_data_load.sh` script and check for its successful completion.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设程序员已经创建了一个名为`initial_data_load.sh`的脚本。让我们开始执行`initial_data_load.sh`脚本并检查其是否成功完成。
- en: To illustrate, I am going to use the VS Code script editor window with single
    and multi-line prompts.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我将使用VS Code脚本编辑器窗口的单行和多行提示。
- en: Requirement 1
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需求1
- en: 'This is how we handle the first requirement and create a shell script to accept
    a filename as a parameter:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何处理第一个要求并创建一个接受文件名作为参数的Shell脚本：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Figure 8.20 – Shell – input parameters](img/B21378_08_20.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图8.20 – Shell – 输入参数](img/B21378_08_20.jpg)'
- en: Figure 8.20 – Shell – input parameters
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20 – Shell – 输入参数
- en: Observe that Amazon Q Developer initialized the shell and accepted a parameter.
    Now, let’s handle the next requirements.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到Amazon Q Developer初始化了Shell并接受了一个参数。现在，让我们处理下一个需求。
- en: Requirements 2 and 3
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求2和3
- en: 'heck that the file is available and readable and then copy the file in the
    `/user/input/files` directory. We’ll then start the `initial_data_load.sh` script
    and check for successful completion:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 检查文件是否可用且可读，然后将文件复制到`/user/input/files`目录。然后我们将启动`initial_data_load.sh`脚本并检查其成功完成：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Figure 8.21 – Shell – copy file and run script](img/B21378_08_21.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图8.21 – Shell – 复制文件并运行脚本](img/B21378_08_21.jpg)'
- en: Figure 8.21 – Shell – copy file and run script
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21 – Shell – 复制文件并运行脚本
- en: As illustrated, you can utilize multiple single-line prompts to auto-generate
    code with the help of Amazon Q Developer. Since this is a relatively straightforward
    use case, feel free to try the single and multi-line prompt techniques to observe
    the final code generated by Amazon Q Developer.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，您可以使用多个单行提示符，在Amazon Q Developer的帮助下自动生成代码。由于这是一个相对简单的用例，您可以自由尝试单行和多行提示技术，以观察Amazon
    Q Developer生成的最终代码。
- en: Shell script explainability and optimization using Amazon Q Developer
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon Q Developer进行shell脚本的可解释性和优化
- en: Amazon Q Developer offers a simple interface for achieving code explainability
    and optimization. For more details on explainability and optimization, please
    refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q Developer提供了一个简单的界面来实现代码的可解释性和优化。有关可解释性和优化的更多详细信息，请参阅[*第12章*](B21378_12.xhtml#_idTextAnchor181)。
- en: 'To illustrate, I am going to use the previously auto-generated code during
    the shell script creation task. As shown in the following screenshot, highlight
    the code, right-click to open the pop-up menu, select **Amazon Q**, and choose
    **Explain** for code explainability or **Optimize** for optimization recommendations:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，我将在创建shell脚本任务期间使用之前自动生成的代码。如图所示，突出显示代码，右键单击以打开弹出菜单，选择**Amazon Q**，然后选择**解释**以进行代码可解释性或**优化**以获取优化建议：
- en: '![Figure 8.22 – Shell – Amazon Q explainability and optimization](img/B21378_08_22.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图8.22 – Shell – Amazon Q可解释性和优化](img/B21378_08_22.jpg)'
- en: Figure 8.22 – Shell – Amazon Q explainability and optimization
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22 – Shell – Amazon Q可解释性和优化
- en: This will pop up Amazon Q Developer’s chat-style interface and move the full
    code for analysis.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出Amazon Q Developer的聊天式界面，并将整个代码移动到分析位置。
- en: 'For explainability, Amazon Q Developer provided details for each line of code
    and, at the end, provided a summary: “**In summary, this shell script takes a
    file name as an argument, checks if the file exists and is readable in the current
    directory, copies the file to a specific location (/user/input/files/), runs another
    script (initial_data_load.sh), and prints a success or failure message based on
    the exit status of the** **second script**”.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可解释性，Amazon Q Developer为每一行代码提供了详细信息，并在最后提供了一个总结：“**总的来说，这个shell脚本接受一个文件名作为参数，检查该文件是否存在于当前目录中并且可读，将文件复制到指定位置(/user/input/files/)，运行另一个脚本(initial_data_load.sh)，并根据第二个脚本的退出状态打印成功或失败信息**”。
- en: Since we constructed this script using multiple single-line prompts, for optimization,
    Amazon Q Developer thoroughly analyzed the end-to-end script. It provided several
    recommendations to optimize and enhance the script’s readability, maintainability,
    and error handling. These improvements were made without altering its core functionality.
    Recommendations spanned variable assignment, conditional optimization, error handling,
    path assignment, command substitution, error redirection, exit status, and code
    formatting. Additionally, Amazon Q Developer generated an updated end-to-end shell
    script incorporating these best practices, which you can add directly by clicking
    the **Insert at** **cursor** button.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用多个单行提示符构建了这个脚本，为了优化，Amazon Q Developer彻底分析了整个脚本。它提供了几个优化和增强脚本可读性、可维护性和错误处理的建议。这些改进没有改变其核心功能。建议涵盖了变量赋值、条件优化、错误处理、路径赋值、命令替换、错误重定向、退出状态和代码格式化。此外，Amazon
    Q Developer生成了一个包含这些最佳实践的更新后的端到端shell脚本，您可以通过点击**插入到****光标**按钮直接添加。
- en: In addition to command-line and shell scripts, Amazon Q Developer supports multiple
    other programming languages. There are many enhancements happening in this area,
    and we anticipate further enhancements to support additional languages (check
    the *References* section at the end of the chapter).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 除了命令行和shell脚本之外，Amazon Q Developer还支持多种其他编程语言。在这个领域有许多增强功能正在发生，我们预计将会有更多的增强来支持额外的语言（请参阅本章末尾的*参考文献*部分）。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As illustrated, Amazon Q Developer serves as a valuable assistant for system
    administrators, programmers, and engineers. Amazon Q Developer can be used with
    a CLI to generate complex commands just by using simple prompts. The output commands
    can be simple single commands or a combination of a chain of commands to achieve
    administrative tasks such as disk space management, user management, process management,
    library management, and more.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，Amazon Q 开发者作为系统管理员、程序员和工程师的有价值助手。Amazon Q 开发者可以与 CLI 结合使用，仅通过简单的提示就能生成复杂的命令。输出命令可以是简单的单个命令，也可以是命令链的组合，以实现诸如磁盘空间管理、用户管理、进程管理、库管理等多样的管理任务。
- en: Shell script programmers and engineers can use chain-of-thought prompts, single-line
    prompts, and multi-line prompt techniques to auto-generate end-to-end error-free
    scripts. Moreover, they can use the **Explain** and **Optimize** options to easily
    get the code details and customized code recommendations. Using these options
    encourage adherence to shell scripting best practices and command-line syntaxes,
    promoting code quality and standardization. The tool also verifies script syntax
    and command-line options and recommends secure scripting practices to mitigate
    potential vulnerabilities. This ensures that shell scripts and command-line integrations
    produced by system administrators and DevOps engineers are robust, secure, and
    compliant with organizational standards and regulatory requirements.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Shell 脚本程序员和工程师可以使用思维链提示、单行提示和多行提示技术来自动生成端到端无错误的脚本。此外，他们还可以使用**解释**和**优化**选项来轻松获取代码细节和定制代码建议。使用这些选项鼓励遵循
    shell 脚本最佳实践和命令行语法，促进代码质量和标准化。该工具还验证脚本语法和命令行选项，并推荐安全的脚本实践以减轻潜在的安全漏洞。这确保了系统管理员和
    DevOps 工程师生成的 shell 脚本和命令行集成既稳健又安全，符合组织标准和监管要求。
- en: In the next chapter, we will look at how you can use Amazon Q Developer to suggest
    code in command-line and shell scripts.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用 Amazon Q 开发者工具在命令行和 shell 脚本中建议代码。
- en: References
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Installing Amazon Q for the command line: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Amazon Q 命令行版本：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html)
- en: 'Terminal shell Integration: [https://code.visualstudio.com/docs/terminal/shell-integration](https://code.visualstudio.com/docs/terminal/shell-integration)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端 shell 集成：[https://code.visualstudio.com/docs/terminal/shell-integration](https://code.visualstudio.com/docs/terminal/shell-integration)
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q 开发者在 IDE 中支持的语言：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)
