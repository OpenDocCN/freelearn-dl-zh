- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boost Coding Efficiency for Command-Line and Shell Script with Auto-Code Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of command-line and shell script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line auto-code generation for system administrators using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shell script auto-code generation for programmers using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shell script explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous chapter, we dived into one of the most dominant database management
    languages in the software industry: **Structured Query Language** (**SQL**). Using
    two user personas—**database administrators** (**DBAs**) and **data engineers**
    (**DEs**)—we introduced how auto-code generation through Amazon Q Developer can
    help understand the basics, learn the syntax, and automatically generate code
    for common DBA and DE activities.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we continue with a similar theme and focus on system administrators
    and shell script programmers. System administrators primarily use the **command-line
    interface** (**CLI**) for various system configuration tasks, and shell script
    programmers use **operating system** (**OS**) commands to automate repetitive
    tasks such as development processes, file transfers, and preprocessing tasks.
    We will introduce how Amazon Q Developer can help these professionals understand
    the basics, learn the syntax, and automatically generate code for common system
    administration and shell script programming activities. Then, we will explore
    code explainability to support documentation and code optimization recommendations
    provided by Amazon Q Developer for shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of command-line and shell script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OS code plays a pivotal role in managing and maintaining the stability, security,
    and efficiency of IT infrastructures. Shell scripting and the command line serve
    as fundamental tools for automating routine tasks, executing system commands,
    and orchestrating complex workflows across Unix-based operating systems such as
    Linux and macOS. As organizations strive to optimize operational processes and
    enhance scalability, the demand for efficient shell scripting and command-line
    solutions becomes increasingly significant.
  prefs: []
  type: TYPE_NORMAL
- en: Auto-code generation has emerged as a transformative approach to streamline
    shell script development using an IDE and/or command line, reduce manual effort,
    and improve productivity for system administrators, programmers, and engineers.
  prefs: []
  type: TYPE_NORMAL
- en: CLI and shell scripts enable system administrators, programmers, and engineers
    to automate repetitive tasks such as file management, system monitoring, user
    administration, and backup operations. It also facilitates chaining multiple commands
    together for the execution of system commands and complex workflows, ensuring
    consistency and reliability in IT operations. However, writing and maintaining
    complex chained commands and shell scripts can be time-consuming, prone to errors,
    and needs expertise, especially as scripts become more intricate and critical
    to business operations. System administrators, programmers, and engineers can
    leverage different prompting techniques and chat-style integrations (refer to
    [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060)) to get recommendations for the
    automated creation of shell scripts tailored to specific system tasks. This interaction
    model accelerates script development cycles, reduces human error, and ensures
    uniformity in script structure and execution across different OS environments.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Amazon Q Developer serves as an educational resource for learning
    shell scripting techniques, available command-line syntax, and best practices.
    It offers interactive tutorials, explanations of shell script concepts, and practical
    examples of automation scripts through its chat interface. This educational aspect
    helps system administrators, programmers, and engineers enhance their scripting
    skills, adopt industry-standard practices, and leverage advanced automation capabilities
    effectively.
  prefs: []
  type: TYPE_NORMAL
- en: For experienced users, Amazon Q Developer provides advanced features such as
    script optimization and error-handling suggestions. It analyzes generated shell
    scripts, identifies potential inefficiencies or pitfalls, and offers recommendations
    to enhance script performance and reliability. These optimization capabilities
    are crucial for maintaining operational efficiency and scalability in dynamic
    IT environments. The integration of Amazon Q Developer with shell scripting also
    facilitates collaborative practices. Teams working on system automation initiatives
    benefit from standardized shell script templates, shared automation workflows,
    and streamlined code review processes. This consistency enhances team productivity,
    fosters collaboration between development and operations teams, and accelerates
    time-to-deployment for critical IT infrastructure changes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we’ll explore how Amazon Q Developer can help generate
    OS code using the Unix CLI and shell scripting. To illustrate, I will use an overall
    chain-of-thought prompt technique to mimic a sequence of activities, breaking
    them into single-line and multi-line prompts (refer to [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060)
    for additional details). For the platform, I’ll use the Amazon Q Developer interface
    with VS Code for shell scripts and macOS Terminal for the CLI. For configuration
    steps to integrate Amazon Q Developer with VS Code and the CLI, refer to [*Chapter
    2*](B21378_02.xhtml#_idTextAnchor022) and check the *References* section at the
    end of the chapter for the URLs for *Terminal shell integration*, and *Installing
    Amazon Q for the* *command line*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer uses **large language models** (**LLMs**), which, by nature,
    are non-deterministic, so you may not get exactly the same answers/code blocks
    shown in the code snapshots; try to update prompts to get desired recommendations.
    However, logically, the generated answer/code should meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line auto-code generation for system administrators using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will assume the role of a system administrator who is familiar with responsibilities
    such as disk space management, user management, process management, and library
    management, but requires assistance with writing commands with the correct syntax.
    Using macOS, I will demonstrate how Amazon Q Developer interacts with the CLI.
    This example showcases how Amazon Q Developer can simplify and automate complex
    tasks, even for those with limited command-line experience.
  prefs: []
  type: TYPE_NORMAL
- en: By following these steps, you will be able to leverage Amazon Q Developer’s
    powerful features to streamline your command-line tasks and enhance your overall
    productivity as a system administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the interaction with Amazon Q Developer, open the terminal and type
    `q ai`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – CLI – Amazon Q Developer basics](img/B21378_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – CLI – Amazon Q Developer basics
  prefs: []
  type: TYPE_NORMAL
- en: Once the integration window is open, let’s ask Amazon Q Developer to provide
    the commands related to common tasks of a system administrator in the following
    sections. These tasks encompass various areas, including disk space management,
    user management, library management, process management, network configuration,
    and system monitoring. By leveraging Amazon Q Developer, system administrators
    can receive detailed, step-by-step commands for a wide range of tasks, ensuring
    efficient and accurate execution. The CLI of Amazon Q Developer allows users to
    execute commands without explicitly typing them in the Terminal prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Disk space management CLI auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Disk space management is one of the key responsibilities of system administrators.
    Effective space management helps maintain system stability, performance, and security,
    making it a crucial task for system administrators. Let’s start with some of the
    disk space management-related tasks. Let’s use a chain of thoughts to mimic common
    tasks and break them into simple single-line prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with finding out the available disk space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.2 – CLI – Amazon Q Developer available disk space](img/B21378_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – CLI – Amazon Q Developer available disk space
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s determine the utilized disk space and sort the results from highest
    to lowest based on the amount of space occupied on the disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.3 – CLI – Amazon Q Developer disk usage](img/B21378_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – CLI – Amazon Q Developer disk usage
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s find the sizes of files and sort them from highest to lowest size,
    so system administrators can identify which files contribute most to disk space
    utilization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.4 – CLI – Amazon Q Developer large file](img/B21378_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – CLI – Amazon Q Developer large file
  prefs: []
  type: TYPE_NORMAL
- en: Observe in the preceding screenshot that Amazon Q Developer provided a single
    command by chaining multiple commands to achieve the instruction in the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s free up some space by tasking Amazon Q Developer with finding the
    top 10 largest files and archiving them. This may involve a slightly complex process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.5 – CLI – Amazon Q Developer archive files](img/B21378_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – CLI – Amazon Q Developer archive files
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer provided a single
    command by chaining multiple commands to achieve the instruction in the prompt.
    It also used the number of files we specified and passed only those files to archive
    as `tar.gz`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at user management, another very important area of responsibility
    for a system administrator.
  prefs: []
  type: TYPE_NORMAL
- en: User management CLI auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User management for system administrators involves tasks related to creating,
    configuring, maintaining, and securing user accounts on a computer system or network.
    Effective user management is crucial for maintaining system security, ensuring
    data integrity, and supporting efficient operations within an organization. Let’s
    use a chain of thoughts to mimic common tasks and break them into simple single-line
    prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin with basic user management tasks, such as identifying a list of
    all users who have access to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.6 – CLI – Amazon Q Developer user list](img/B21378_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – CLI – Amazon Q Developer user list
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s identify active users on the system and determine when they last
    logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.7 – CLI – Amazon Q Developer users’ last login](img/B21378_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – CLI – Amazon Q Developer users’ last login
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s identify dormant users on the system who have not logged in recently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.8 – CLI – Amazon Q Developer user never logged in](img/B21378_08_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – CLI – Amazon Q Developer user never logged in
  prefs: []
  type: TYPE_NORMAL
- en: 'To enhance security and reduce vulnerabilities, let’s remove dormant users
    from the system who do not have a recent login date associated with them. This
    process may be somewhat complex so let’s see how Amazon Q Developer can help:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.9 – CLI – Amazon Q Developer dropping users who never logged in](img/B21378_08_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – CLI – Amazon Q Developer dropping users who never logged in
  prefs: []
  type: TYPE_NORMAL
- en: Observe in the preceding screenshots that as the complexity of requirements
    increases, Amazon Q Developer chains multiple commands to achieve the instruction
    in the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at some of the process management-related tasks and corresponding
    support by Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Process management CLI auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Process management is a critical responsibility for system administrators, involving
    tasks such as monitoring, controlling, and optimizing running processes on a computer
    system to ensure efficient resource utilization and performance. Maintaining the
    health of the servers is one of the important responsibilities of a system administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by asking Amazon Q Developer to generate commands for finding all
    active processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.10 – CLI – Amazon Q Developer active processes](img/B21378_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – CLI – Amazon Q Developer active processes
  prefs: []
  type: TYPE_NORMAL
- en: 'In process management, the CPU plays a vital role, so let’s find the top 10
    CPU-intensive processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.11 – CLI – Amazon Q Developer top CPU processes](img/B21378_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – CLI – Amazon Q Developer top CPU processes
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the CPU, memory plays a crucial role in effective multiple-process
    execution across the system, so let’s identify the top 10 memory-intensive processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.12 – CLI – Amazon Q Developer top memory processes](img/B21378_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – CLI – Amazon Q Developer top memory processes
  prefs: []
  type: TYPE_NORMAL
- en: 'System administrators often need to terminate processes that are consuming
    high memory or CPU resources. To simulate this scenario, let’s use Amazon Q Developer
    to create a command to kill the top two processes consuming the most memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.13 – CLI – Amazon Q Developer kill top memory processes](img/B21378_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – CLI – Amazon Q Developer kill top memory processes
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer efficiently generated
    the precise command required to free up memory by terminating the top two memory-intensive
    processes. This involved a slightly complex command where multiple commands were
    linked together end to end.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at one last area related to library management, which includes
    installing new libraries and upgrading existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: Library management CLI auto-code generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are relatively fewer activities in library management compared to other
    sections, but many of these tasks are crucial for ensuring that all applications
    run smoothly on the server. Proper library management, including the installation
    of new libraries and the upgrading of existing ones, is essential for maintaining
    the functionality and performance of applications. These tasks, while less frequent,
    play a significant role in preventing software conflicts, enhancing security,
    and ensuring that applications have access to the latest features and optimizations.
    Therefore, even though library management activities might seem less numerous,
    their impact on the overall health and efficiency of the server environment is
    substantial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the basics to get the list of all the libraries and save them
    in a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.14 – CLI – Amazon Q Developer list of all libraries](img/B21378_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – CLI – Amazon Q Developer list of all libraries
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s standard practice for system administrators to verify the version of an
    installed library. For example, let’s utilize Python and request Amazon Q Developer
    to generate the command that identifies the associated version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.15 – CLI – Amazon Q Developer finding the version](img/B21378_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – CLI – Amazon Q Developer finding the version
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, system administrators often need to upgrade installed libraries.
    For example, let’s use Python and ask Amazon Q Developer to generate the command
    for upgrading the Python version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.16 – CLI – Amazon Q Developer upgrading the version](img/B21378_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – CLI – Amazon Q Developer upgrading the version
  prefs: []
  type: TYPE_NORMAL
- en: I have illustrated a few commonly used CLI commands that system administrators
    use, demonstrating Amazon Q Developer’s capability to provide commands ranging
    from single commands to chaining multiple ones to achieve the requirements. Additionally,
    try using Amazon Q Developer for other user personas who could benefit from generating
    CLI commands using simple single-line prompts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll explore how Amazon Q Developer can help programmers
    write shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Shell script auto-code generation for programmers using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuing with the theme of previous chapters, I am going to start with the
    persona of a programmer or an engineer who wishes to learn and develop code using
    shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Shell script basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s use Amazon Q Developer’s chat-style interface to educate programmers,
    where they can simply ask questions in natural language to learn about the available
    commands and functions. I’ll use chat-style interaction and single-line and multi-line
    prompt techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.17 – Shell script – basics](img/B21378_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Shell script – basics
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, for learners, Amazon Q Developer
    pointed out important areas in which shell scripts are effective, such as automation,
    system administration, application deployment, and more. It also provided a `"Hello,
    World !"` example of the shell script with a declaration of the `bash` shell.
    In addition, it provided sources that can be used for additional information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s get more information and ask about commonly used shell script commands
    and corresponding syntax with examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.18 – Shell – list of commands, partial screenshot](img/B21378_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Shell – list of commands, partial screenshot
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding partial screenshot, Amazon Q Developer offers
    a catalog of shell script commands categorized into file and directory commands,
    text processing commands, system information commands, process management commands,
    network commands, and user and permission commands. Additionally, Bash supports
    control structures, functions, and other features, making it a robust scripting
    language for automating tasks and system administration on Unix-like operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now request Amazon Q Developer to provide the syntax and an example for
    the `"``cat"` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.19 – Shell – the “cat” command](img/B21378_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – Shell – the “cat” command
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshots, Amazon Q Developer provided basic
    usage of the command. Then, it provided the syntax, `cat [OPTIONS] [FILE(S)]`,
    and different options such as `-n`, `-b`, `-s`, `-v`, `-E`, and `-T` with examples.
  prefs: []
  type: TYPE_NORMAL
- en: Shell script generation for programmers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we understand the basics of shell scripting, let’s use the preceding
    information for a use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the use case: Create a shell script to accept a filename as a parameter.
    Check that the file is available and readable. If it is, then copy the file in
    the `/user/input/files` directory and start the `initial_data_load.sh` script.
    Then, check for successful completion of the process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the chain-of-thought prompt technique to break this use case down
    into smaller tasks that, when combined, will achieve the end-to-end scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a shell script to accept a filename as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that the file is available and readable, then copy the file in the `/``user/input/files`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assume that the programmer has already created a script called `initial_data_load.sh`.
    Let’s start the `initial_data_load.sh` script and check for its successful completion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To illustrate, I am going to use the VS Code script editor window with single
    and multi-line prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is how we handle the first requirement and create a shell script to accept
    a filename as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.20 – Shell – input parameters](img/B21378_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Shell – input parameters
  prefs: []
  type: TYPE_NORMAL
- en: Observe that Amazon Q Developer initialized the shell and accepted a parameter.
    Now, let’s handle the next requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements 2 and 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'heck that the file is available and readable and then copy the file in the
    `/user/input/files` directory. We’ll then start the `initial_data_load.sh` script
    and check for successful completion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 8.21 – Shell – copy file and run script](img/B21378_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – Shell – copy file and run script
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated, you can utilize multiple single-line prompts to auto-generate
    code with the help of Amazon Q Developer. Since this is a relatively straightforward
    use case, feel free to try the single and multi-line prompt techniques to observe
    the final code generated by Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Shell script explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer offers a simple interface for achieving code explainability
    and optimization. For more details on explainability and optimization, please
    refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate, I am going to use the previously auto-generated code during
    the shell script creation task. As shown in the following screenshot, highlight
    the code, right-click to open the pop-up menu, select **Amazon Q**, and choose
    **Explain** for code explainability or **Optimize** for optimization recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.22 – Shell – Amazon Q explainability and optimization](img/B21378_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – Shell – Amazon Q explainability and optimization
  prefs: []
  type: TYPE_NORMAL
- en: This will pop up Amazon Q Developer’s chat-style interface and move the full
    code for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'For explainability, Amazon Q Developer provided details for each line of code
    and, at the end, provided a summary: “**In summary, this shell script takes a
    file name as an argument, checks if the file exists and is readable in the current
    directory, copies the file to a specific location (/user/input/files/), runs another
    script (initial_data_load.sh), and prints a success or failure message based on
    the exit status of the** **second script**”.'
  prefs: []
  type: TYPE_NORMAL
- en: Since we constructed this script using multiple single-line prompts, for optimization,
    Amazon Q Developer thoroughly analyzed the end-to-end script. It provided several
    recommendations to optimize and enhance the script’s readability, maintainability,
    and error handling. These improvements were made without altering its core functionality.
    Recommendations spanned variable assignment, conditional optimization, error handling,
    path assignment, command substitution, error redirection, exit status, and code
    formatting. Additionally, Amazon Q Developer generated an updated end-to-end shell
    script incorporating these best practices, which you can add directly by clicking
    the **Insert at** **cursor** button.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to command-line and shell scripts, Amazon Q Developer supports multiple
    other programming languages. There are many enhancements happening in this area,
    and we anticipate further enhancements to support additional languages (check
    the *References* section at the end of the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As illustrated, Amazon Q Developer serves as a valuable assistant for system
    administrators, programmers, and engineers. Amazon Q Developer can be used with
    a CLI to generate complex commands just by using simple prompts. The output commands
    can be simple single commands or a combination of a chain of commands to achieve
    administrative tasks such as disk space management, user management, process management,
    library management, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Shell script programmers and engineers can use chain-of-thought prompts, single-line
    prompts, and multi-line prompt techniques to auto-generate end-to-end error-free
    scripts. Moreover, they can use the **Explain** and **Optimize** options to easily
    get the code details and customized code recommendations. Using these options
    encourage adherence to shell scripting best practices and command-line syntaxes,
    promoting code quality and standardization. The tool also verifies script syntax
    and command-line options and recommends secure scripting practices to mitigate
    potential vulnerabilities. This ensures that shell scripts and command-line integrations
    produced by system administrators and DevOps engineers are robust, secure, and
    compliant with organizational standards and regulatory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how you can use Amazon Q Developer to suggest
    code in command-line and shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing Amazon Q for the command line: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-getting-started-installing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Terminal shell Integration: [https://code.visualstudio.com/docs/terminal/shell-integration](https://code.visualstudio.com/docs/terminal/shell-integration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
