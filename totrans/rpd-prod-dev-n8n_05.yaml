- en: '*Chapter 4*: Learn by Doing: Building Two n8n Apps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn to combine concepts from the previous chapters
    and use them to build multiple projects. Some of these projects will reinforce
    the concepts you learned earlier and others will introduce some new ideas. This
    will help you understand the kinds of products that you can build using n8n. Finally,
    we will learn how to share and discover new workflows as well as participate in
    n8n's active community.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building products with n8n
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Telegram bot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a metrics dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing and discovering workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a list of technical requirements that you''ll need to prepare before
    continuing with the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Install n8n.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure n8n is running and the Editor UI is open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get an account on Telegram.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get an account on GitHub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the completed code examples for the chapter on GitHub at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%204](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%204)
  prefs: []
  type: TYPE_NORMAL
- en: Building products with n8n
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are anything like me, you have no shortage of ideas for building new
    and exciting online services or automating boring tasks that are the same every
    day. Historically, many of these ideas never got any further than that and I didn't
    know how to get to the next step of actually building the solutions or starting
    to work on a prototype.
  prefs: []
  type: TYPE_NORMAL
- en: No code tools provide a much simpler way of producing that early **minimum viable
    product** (**MVP**) or designing the next great web service.
  prefs: []
  type: TYPE_NORMAL
- en: n8n shares this no code philosophy, allowing you to build applications and tools
    in a fraction of the time that it would take to build them with regular programming
    languages. Not only is it faster, but it is also easier since all you need to
    do is understand a bit of JavaScript for the more complicated applications, and
    maybe not even that, depending on what you want to build!
  prefs: []
  type: TYPE_NORMAL
- en: To get you motivated to start building some applications with n8n, here are
    a couple of sample apps that perform some fun functions and demonstrate how quick
    and easy it is to get things up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Telegram bot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Pokémon* was one of my favorite shows when growing up. Even today, I enjoy
    playing *Pokémon Go*. At times, you will come across very tough opponents in the
    game and you have to do some research on what the weakness of the opposing Pokemon
    is. My search history is full of queries like, "How to defeat Tyranitar." Let''s
    create a Telegram bot that gives us information about a Pokemon''s abilities,
    moves, and types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029), *Using the
    Editor UI to Create Workflows*, we learned how to create Telegram bots, as well
    as how to query a REST API. We''ll be using a similar workflow but with some catches:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll have to check whether the user of the bot has entered the name of a Pokemon
    along with the slash command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll query the Pokemon API ([https://pokeapi.co](https://pokeapi.co)) to get
    the data. However, that API is very comprehensive and we'll need to massage the
    data so that it fits the format that we want to consume this information in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s get started by creating a new Telegram bot by following the instructions
    provided in [*Chapter 2*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029)*, Using
    the Editor UI to Create Workflows*. I named my bot `/setcommands`. Choose the
    bot that you just created, and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to see something similar to the following screenshot after
    running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Setting a command for our Telegram bot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Setting a command for our Telegram bot
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have just created the first command for your bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start building the backend for this bot in n8n. To do this, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your n8n Editor UI and add a **Telegram Trigger** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the credentials for your new bot and select ***** from the drop-down list
    for the **Updates** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, save and execute the workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Settings for the Telegram Trigger node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Settings for the Telegram Trigger node
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are running n8n locally, make sure that you are running using tunnel
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: Now, go to your bot and enter `/pokemon ditto`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Sending a command to the Pokemon bot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Sending a command to the Pokemon bot
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the Editor UI and you will see a response there. It is likely that
    the response is `/start`. If it is, press `/pokemon ditto` in the respons
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Receiving /pokemon ditto as a command with the Telegram Trigger
    node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Receiving /pokemon ditto as a command with the Telegram Trigger
    node
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that it is quite likely that someone just clicks on the command
    without entering the name of the Pokemon. We will have to account for the fact
    that someone might make the same mistake while using this bot. To make sure that
    this does not happen, let's add an **IF** node to check whether the user provided
    the name of a Pokemon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an **IF** node to the Editor UI and make sure that it is connected to the
    **Telegram Trigger** node. Enter the Node Editor view, click on the **Add Condition**
    button, and select **String**. Select **Is Empty** for **Operation**. Add an expression
    to the **Value 1** field and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This JavaScript snippet points to `''/pokemon ditto''` using `$json["message"]["text"]`.
    The `.split('' '')` method splits the string at the space and converts it into
    an array, which looks like this: `[''/pokemon'', ''ditto'']`. Then we select the
    item at position 1, which is `''ditto''`. Execute the node.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Executed IF node with no output for true'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Executed IF node with no output for true
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that the output for the **true** section is empty since the
    condition that we specified is false. If you select **false** instead of **true**
    for the **Output** field at the top, you will see one result. Let's now set a
    default message in case the name of the Pokemon has not been specified.
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Telegram** node to the Editor UI and connect it to the true output of
    the **IF** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the credentials for the node, and use the expressions to set the
    value for **Chat ID** (you can get it from the **Telegram Trigger** node). The
    expression should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We used an expression here as compared to the **Telegram** node in [*Chapter
    2*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029)*, Using the Editor UI to Create
    Workflows,* since many people might be using the **Telegram** bot and we want
    to send the answer to the person who queried it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the following in the text field, ![](img/2.png) `Please enter the name
    of a Pokemon. For example, '/pokemon ditto' (without the quotes).` Feel free to
    customize the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's execute the workflow and this time, let's just send `/pokemon` to
    the bot. The response should look something like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Response after sending /pokemon as the command to the bot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Response after sending /pokemon as the command to the bot
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have cleared one of the challenges that we mentioned before, let''s
    focus on getting the data from the API and sending it back to the user. To do
    this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add an **HTTP Request** node to the Editor UI and connect it with the **false**
    output of the **IF** node. The workflow should now look like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Your workflow should look like this after adding the HTTP Request
    node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.07_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Your workflow should look like this after adding the HTTP Request
    node
  prefs: []
  type: TYPE_NORMAL
- en: Before we move forward, execute the workflow again, and send `/pokemon ditto`
    to the bot. This will make the data in the workflow flow toward the false branch
    as we build that branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **HTTP Request** node, add an expression to the **URL** field, and
    enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will ensure that the API returns details about the Pokemon that you asked
    for. Execute the node and you will notice that you get loads of data about Ditto.
    We are specifically interested in the abilities, moves, and types. However, these
    are arrays with objects in them. We'll have to massage the data so that it converts
    into a format that is useful for us. We will use the **Function** node to do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a **Function** node to the Editor UI and connect it to the **HTTP Request**
    node. Open the **JavaScript Code** field and enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s understand what is happening here. We created three new arrays called
    `abilities`, `moves`, and `types`. We then created a loop that will push the name
    of each ability, move, and type into its respective array. Finally, we returned
    the data in a format expected by n8n. Execute the node and it should then look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Output of the Function node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.08_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Output of the Function node
  prefs: []
  type: TYPE_NORMAL
- en: Perfect, we now have just the data that we need. Now we need to send it to the
    Telegram bot.
  prefs: []
  type: TYPE_NORMAL
- en: Add a new Telegram node and connect it with the **Function** node. Configure
    your credentials and **Chat ID** as discussed before. Now, add an expression to
    the **Text** field and format the data as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what my expression looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When adding values to expressions that are an array, such as `abilities`, you
    can click on the gray dot next to the value in the expression editor, and click
    on **Values** as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, I have used the bold HTML tags to bold some text.
    If you would like to include that as well, click on the **Add Field** button,
    select **Parse Mode**, and set it to **HTML**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Adding values from an array in the expression editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.09_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Adding values from an array in the expression editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, save and activate your workflow. Here''s what your workflow should look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Final workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.10_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – Final workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go ahead and enter `/pokemon ditto` in your Telegram bot. Here''s what
    the result looked like for me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Result of the /pokemon ditto command in the Telegram bot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.11_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – Result of the /pokemon ditto command in the Telegram bot
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and try a few more. Here are some names of Pokemons: Meowth, Pikachu,
    Bulbasaur. Gotta catch them all.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's use our knowledge of webhooks from [*Chapter 3*](B17493_03_Final_PD_ePub.xhtml#_idTextAnchor039)*,
    Diving into Core Nodes and Data in n8n*, to build a metrics dashboard with n8n.
  prefs: []
  type: TYPE_NORMAL
- en: Building a metrics dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metrics are a key component of any business. It''s important to keep an eye
    on metrics to measure the health and growth of communities, products, revenue,
    and many other things. Let''s build a metrics dashboard that will show us the
    count for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub stars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub forks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker pulls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It should be straightforward to add or redact any other numbers that you''d
    like to see in there. There are two main components to building this numbers dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Serving the web page for displaying the metrics in an easy-to-read format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the data from different services and inserting it into the web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start off by learning how to serve a web page with n8n. The following
    are the steps for it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Editor UI and add a **Webhook** node. Select **Last Node** from the
    drop-down list for the **Response Mode** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `html` into the **Property Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the workflow and execute the workflow. Copy the test webhook URL and paste
    it into your web browser. The **Webhook** node should look something like this
    now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Configuring the Webhook node to serve web pages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.12_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Configuring the Webhook node to serve web pages
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Set** node to the Editor UI and connect it to the **Webhook** node.
    Toggle the **Keep Only Set** button to true (green).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `html` in the **Name** field and enter the following expression
    in the **Value** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we have added some HTML and used the expressions to point to the host
    and user-agent values that the **Webhook** node provided. Execute your workflow
    and open the test webhook URL again in your browser. You should see something
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Web page served by the n8n workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.13_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – Web page served by the n8n workflow
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know how to serve web pages with n8n, let''s take a look at the
    next piece of the puzzle – getting the data from GitHub and Docker Hub. To do
    this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your current workflow, delete the **Set** node. Add the **GitHub** node to
    the Editor UI and connect it with the **Webhook** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure your credentials for the **GitHub** node by following the steps given
    here: [https://docs.n8n.io/credentials/github](https://docs.n8n.io/credentials/github).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `n8n-io` and `n8n` in the fields respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Execute Node** button and it should return details about the
    repository that you specified. It should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Output from the GitHub node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.14_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – Output from the GitHub node
  prefs: []
  type: TYPE_NORMAL
- en: If you browse through the output from this node, you will notice that we get
    the star and fork counts as a result too. Next, we need to get the number of pulls
    from Docker Hub. We'll use the **HTTP Request** node to do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the **HTTP Request** node to the Editor UI and connect it to the **GitHub**
    node. Enter the following URL in the **HTTP Request** node: [https://hub.docker.com/v2/repositories/n8nio/n8n](https://hub.docker.com/v2/repositories/n8nio/n8n).
    Feel free to replace this with the URL of your repository. Execute the node and
    the output should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Output of the HTTP Request node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.15_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.15 – Output of the HTTP Request node
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have all the information that we need, we just need to create a
    nice HTML template to display all this information and we will be ready.
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Set** node to the Editor UI and connect it to the **HTTP Request** node.
    Toggle the **Keep Only Set** field to true (green).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `html` in the **Name** field and add an expression to the **Value**
    field. Paste this HTML code in the expression editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have used some HTML and CSS to make the metrics dashboard presentable. You
    will notice that we have three different containers for the three different values
    that we are pulling from GitHub and Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save and activate the workflow. Now grab the production webhook URL and open
    it in your browser. It should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Opening the dashboard using the production webhook URL'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.16_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.16 – Opening the dashboard using the production webhook URL
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have built a metrics dashboard that pulls in data from
    two different sources and displays it using a web page that is served from your
    n8n workflow.
  prefs: []
  type: TYPE_NORMAL
- en: As we move forward, you'll be building a lot of different workflows. Let's take
    a look at how you can discover and share workflows with the n8n community.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing and discovering workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it makes sense to share your workflows with the community to showcase
    what you have been building and inspire them. It is also useful to discover workflows
    submitted by the other community members to get inspiration for your next project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The n8n.io website has a page dedicated to sharing and discovering workflows.
    You can access the page here: [https://n8n.io/workflows](https://n8n.io/workflows).
    You can submit workflows with a title, description, and JSON. This is what a submitted
    workflow looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Example of a submitted workflow on n8n.io/workflows'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.17_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – Example of a submitted workflow on n8n.io/workflows
  prefs: []
  type: TYPE_NORMAL
- en: 'The website automatically recognizes the nodes that you have included in the
    workflow and lists them on the right side. When submitting a workflow, make sure
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The specific workflow doesn't already exist.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The title is descriptive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The description has an explanation of what the workflow does and a screenshot
    of it to aid the explanation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is also a great place to discover workflows submitted by other members
    of the community to gain inspiration. While building your workflows, if you run
    into any trouble, you can always post about your problem in the community forum:
    [https://community.n8n.io/](https://community.n8n.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: n8n has a very active community and the forum is very useful for getting timely
    help whenever you are stuck. We, ourselves, also spend a lot of time answering
    questions on the forum, so if you get stuck at any point during the book, tell
    us about it in the community forum and we'll be there to help you out. Our usernames
    in the forum are **@tanay** and **@tephlon**.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about why it makes sense to build products with
    n8n and translated two of our ideas for products into n8n workflows by building
    a Telegram bot and a **metrics dashboard**. Having a product mindset and an understanding
    of which nodes to use to move your project forward will be useful in the next
    chapters, where we will build our own project with n8n and Bubble.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will examine how to build a common way of communicating
    between modern systems: the **application programming interface**, or **API**,
    as it is more commonly known. We will learn how to use n8n to build APIs for both
    exposing and collecting data for systems that do not have this way of accessing
    information already.'
  prefs: []
  type: TYPE_NORMAL
