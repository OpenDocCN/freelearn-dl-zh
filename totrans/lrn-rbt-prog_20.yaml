- en: '*Chapter 17*: Controlling the Robot with a Phone and Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The robot we've been programming has many behaviors, but when you run some of
    them, they result in the robot stopping on the other side of the room. You could
    try to write code to return it back to you, but this may be complicated. We've
    also got a neat camera with some visual feedback available on what the robot is
    doing. Wouldn't it be neat to take control and drive the robot sometimes?
  prefs: []
  type: TYPE_NORMAL
- en: We've been launching commands to drive our robot from a **Secure Shell** (**SSH**)
    terminal, but the robot will be more exciting and more comfortable to demonstrate
    if you could start the commands via a menu. We can build upon the web **application
    programming interface** (**API**) code you made in [*Chapter 15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344),
    *Voice Communication with a Robot Using Mycroft*.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to create a menu system to choose behaviors
    designed for a phone. We will then use the touch surface to build a control system,
    with the camera in view. You will learn about phone-ready web apps and get control
    of the robot.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: When speech control won't work—why we need to drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu modes—choosing your robot's behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a controller—how are going to drive the robot, and why
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the Raspberry Pi for remote driving—get the basic driving system going
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making the robot fully phone-operable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making the menu start when the Pi starts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: Your Raspberry Pi robot with the camera set up and the code from previous chapters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A touchscreen device such as a phone with Wi-Fi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A wireless network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GitHub code for this chapter is at [https://github.com/PacktPublishing/Learn-Robotics-Programming-Second-Edition/tree/master/chapter17](https://github.com/PacktPublishing/Learn-Robotics-Programming-Second-Edition/tree/master/chapter17).
  prefs: []
  type: TYPE_NORMAL
- en: Use the `0_starting_point` folder to find the complete code from the previous
    chapters and the `full_system` folder on GitHub for this chapter's full code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action: [https://bit.ly/2Kb7rp8](https://bit.ly/2Kb7rp8)'
  prefs: []
  type: TYPE_NORMAL
- en: When speech control won't work – why we need to drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344), *Voice Communication
    with a Robot Using Mycroft*, we built a Mycroft system to launch behaviors. If
    you have tried to build intents to make the robot stop in time or drive left or
    right, you will have probably noticed that it takes some time to respond even
    with the clearest speaking.
  prefs: []
  type: TYPE_NORMAL
- en: Speech control also only really works in a quiet room. If your robot is outside
    (you would like to drive it somewhere), this is not useful.
  prefs: []
  type: TYPE_NORMAL
- en: Mycroft is also utterly dependent on having access to the internet. It is one
    thing to have a small shared network for a robot and a controller; it's another
    to always require internet access, which can become tricky when not at your home,
    school, or lab.
  prefs: []
  type: TYPE_NORMAL
- en: Using an SSH session to log in to a robot, then typing commands to start and
    stop behaviors works well during testing stages, but it can be slow and cumbersome.
    In demonstration conditions, mistyping a command or just restarting the SSH session
    is time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: A phone-targeted browser app can be responsive, giving you tight control over
    the robot's movements. With a local network, it won't need external internet access.
    You can use this to drive a robot back to you after a behavior has run and you've
    stopped it, and it can be used to halt errant behavior. And with a bit of thought,
    it can be used to deliver useful—or plain interesting—feedback on what your robot
    is doing.
  prefs: []
  type: TYPE_NORMAL
- en: Menu modes – choosing your robot's behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our book has introduced quite a collection of robot behaviors and invited you
    to create more. We've talked about how SSH can be cumbersome to start robot programs—even
    just remembering the options you have or pressing the *Ctrl* + *C* combination
    to stop can be frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to create a menu system to select them. A convenient
    and phone-friendly way to do this is to serve it to the phone's browser, so we
    take that approach with our robot. We will also use a desktop browser to test
    this code.
  prefs: []
  type: TYPE_NORMAL
- en: We can extend the system we built in the *Starting a behavior remotely* section
    of [*Chapter 15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344), *Voice Communication
    with a Robot Using Mycroft*, adding a **user interface** (**UI**). We'll make
    this UI as templates, with some placeholders replaced by code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look in the following diagram at how this system will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.1 – How the control server and menu system will work
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.1* shows an overview of the system. Here''s how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: The **client browser** (a phone or computer) makes a page request via **Wi-Fi**
    to the **web server** on the robot for a page to display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **web server** uses **robot modes** to get the mode list: a list of scripts
    it can start.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **web server** sends this mode list to a **template** to render it into
    the menu page and send that rendered menu page to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, when you touch or click the menu item links in the page, they
    make control requests to the **web server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `run` and `stop` to the **robot modes** system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **robot modes** system starts/stops the behavior scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **control server** sends a status back to the **client browser** to say
    it's been handled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start by extending the list of scripts (modes) and how the system handles
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Managing robot modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will revisit the code made in [*Chapter 15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344),
    *Voice Communication with a Robot Using Mycroft*, extend the list of modes to
    run, and add a menu configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s expand the number of items our mode system knows about, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the file called `robot_modes.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the `mode_config` variable in this file. We can extend it with a few more
    behaviors, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the `mode_config` variable, we add a list configuring the menu. The order
    will match menu items on a screen. Each item has a `mode_name` setting`—`matching
    the short slug in the `mode_config` variable, and `text`—the human-readable label
    for the menu option, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we want to add a behavior to the menu, we must add it to both the `menu_config`
    and the `mode_config` variables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To allow a menu user to choose a new mode without pressing a `run` method cope
    with this by stopping any existing process, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file will act as a configuration, and you can expand it to run other code.
    We can test this now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upload `robot_modes.py` to the robot. You should already have the [*Chapter
    15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344), *Voice Communication with
    a Robot Using Mycroft*, `control_server.py` file uploaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run this on the Pi with `python3 control_server.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we saw in [*Chapter 15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344),
    *Voice Communication with a Robot Using Mycroft*, we will use the `curl` command
    to make a request, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This should start the **light-emitting diodes** (**LEDs**) flashing on the robot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s change behavior—this should stop the current behavior and start a new
    one. Run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The LEDs should stop, and assuming the motors are turned on, the head should
    start moving.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s stop the robot by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have added some further modes and configuration to `robot_modes.py` to describe
    those modes, and tested them. Let's check for any problems.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When requests to the menu sever fail, it can output error codes in the response.
    There are only three error codes we make use of in our system, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`200`—This means that the server thinks everything is OK. There may still be
    a logic problem, but it''s not caused a failure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`404`—This is shown when the server couldn''t find a route. This means you
    may have a typo either in the request you made or in the routers on the server
    code. Check that they match and try again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`500`—This means that the server failed in some way. It is usually accompanied
    by a traceback/exception on the server. This can then be treated as a normal Python
    error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have the mode configuration lists ready, we need the web service
    to display it.
  prefs: []
  type: TYPE_NORMAL
- en: The web service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344), *Voice Communication
    with a Robot Using Mycroft*, we'd already wired `robot_modes.py` into the `control_server.py`
    Flask web server. We have used Flask in [*Chapter 13*](B15660_13_Final_ASB_ePub.xhtml#_idTextAnchor283),
    *Robot Vision – Using a Pi Camera and OpenCV*, to render templates with a video
    box. In this section, we will make a menu template to show the user their options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the necessary changes to render the template first, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `control_server.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extend the imports of Flask to include `render_template`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we will have a style sheet we are changing, we need to stop devices holding
    a stale, cached copy of the sheet. We can do this by adding a header to all responses,
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to add the route that shows our menu. We will make a template called
    `menu.html`, which uses the `menu_config` variable to display. Most of our modes
    need this. Let''s add the code to render the template, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have code to render the template building on code we already had to handle
    `run` and `stop` requests. However, before we can run this service, we need to
    provide the template, `menu.html`.
  prefs: []
  type: TYPE_NORMAL
- en: The template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our HTML template defines our display and lets us separate how the robot menu
    looks from how to handle the control system. This template combines HTML (seen
    in [*Chapter 13*](B15660_13_Final_ASB_ePub.xhtml#_idTextAnchor283), *Robot Vision
    – Using a Pi Camera and OpenCV*, and [*Chapter 14*](B15660_14_Final_ASB_ePub.xhtml#_idTextAnchor315),
    *Line-Following with a Camera in Python*) and the `templates` folder from [*Chapter
    15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344), *Voice Communication with
    a Robot Using Mycroft*—we will add our menu template here. We could add further
    styling to this template; for now, we'll keep it simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a file called `templates`/`menu.html` and then proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our template starts with a header that sets the page title and uses the same
    jQuery tool we saw before, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The body of our template has the `My Robot Menu` heading. Feel free to change
    this to your robot''s name. The code is shown in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we have a space for a message; it''s empty now though, as you can see
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next section is a list—that is the menu itself. We use the `<ul>` tag and
    then a `for` loop, which creates a list item with a link for each menu item. The
    double brackets `{{ }}` are used to surround a placeholder, that will be replaced
    when run. It uses the `mode_name` setting and `text` to make that link, combining
    `/run` with the mode name, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before closing our list, we need to add one more menu item—the **Stop** button,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We talked about handling the `run` action in some JavaScript code. The following
    code makes POST requests sending data to the web server, and then updates the
    message from the response. We need to put it in `<script>` tags, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can close our HTML document, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The nice thing with a template such as this is that you can preview this code
    in a browser without the server and make sense of how it should look. The following
    screenshot shows it in preview mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.2 – Previewing the template
  prefs: []
  type: TYPE_NORMAL
- en: When you view the preview, as shown in *Figure 17.2*, the template placeholders
    are showing as the browser doesn't know how to render them.
  prefs: []
  type: TYPE_NORMAL
- en: You need to run the app to see it properly rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Running it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Upload the `robot_modes.py` and `control_server.py` files to the robot, and
    then the `templates` folder. On the Raspberry Pi, via SSH, you can start it with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now point your browser at your robot (`http://myrobot.local:5000/`)
    to see the menu. The following screenshot shows how it should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.3 – My Robot Menu in a browser
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.3* now shows the list rendered. We now see all the menu items instead
    of the template placeholders. You should be able to click a mode and see the robot
    start that behavior. Clicking `robot_modes.py` code to send the equivalent of
    a *Ctrl* + *C* action to the running behavior script, making it stop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click a behavior or stop, it shows the output in the message area,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.4 – The stopped message
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.4* shows the menu again. I''ve clicked the **Stop** button, so the
    menu shows the **Stopped** response message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice in the following code snippet that the behavior''s outputs—its `print`
    statements—are coming out in the web server console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You need to press *Ctrl* + *C* on the Pi to exit this menu server app.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This tiny robot web app has no security mechanism, authentication, or passwords.
    It is beyond this book's scope but is a serious consideration worth further research
    if you plan to use this on shared Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: There are ways to get the console output from a script onto the page. I recommend
    looking at the additional reading recommendations in the *Further reading* section
    for Flask.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hopefully, this all works, but if you have any problems try the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The output log shows the return codes from the web system. You can use these
    status codes—as you've seen before—to troubleshoot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`200`—The system thinks everything is OK. If it failed to run something, check
    the `run` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`404`—Not found. Have you matched the routes?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`500`—You should see a Python error with this too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the render shows the display `{ item.text }`, this needs double curly brackets
    for the template system to work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you see an error such as `jinja2.exceptions.TemplateSyntaxError: unexpected
    ''<''`, then you''ll need to verify you have typed out the preceding template—you
    are likely to have missed a closing curly bracket ( `}`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You now have a menu system to start different robot behaviors and stop them.
    You can point your phone at it—although it's not particularly phone-friendly yet.
    We have only scratched the surface of this, and this system is quite rudimentary.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start looking at a more interesting phone interface for driving the robot,
    but we can first look at options other than smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a controller — how we are going to drive the robot, and why
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to be able to control our robot with something that is handheld and
    wireless. Trailing a wire to our robot would make little sense. Having seen how
    our robot drives in [*Chapter 7*](B15660_07_Final_ASB_ePub.xhtml#_idTextAnchor131),
    *Drive and Turn – Moving Motors with Python*, we will want a control system that
    directly affects the wheels.
  prefs: []
  type: TYPE_NORMAL
- en: One way to do this would be to use a Bluetooth joypad. There are a large number
    of these on the market, which may require specialist drivers to read. Bluetooth
    has a habit of dropping pairings at inopportune times.
  prefs: []
  type: TYPE_NORMAL
- en: Some joypads use a custom wireless dongle; these are far more reliable than
    Bluetooth but have a dongle that doesn't fit very nicely on the robot.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you already have a handheld device in your pocket: your phone. It
    has a touchscreen, capable of reading finger movements. With a bit of the right
    code, you can display the video between controller bars, creating a kind of robotic
    *periscope* you can drive around and see (it''s quite tricky to drive on camera—harder
    than overhead). We''ve already been building web applications for our robot to
    access via Wi-Fi, and most phones can connect to that. So, instead of going out
    and buying a new joypad, we will make a web app that your phone can access to
    drive the robot and see a robot''s-eye view of the world.'
  prefs: []
  type: TYPE_NORMAL
- en: Design and overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make a phone web app, a little bit of design on how we would expect this
    to work is needed. This design could be as simple as a pen drawing on a scrap
    of paper or using a drawing tool to get professional-looking results. The next
    screenshot shows a screen mockup of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.5 – Screen mockup of driving web app
  prefs: []
  type: TYPE_NORMAL
- en: The mockup in *Figure 17.5* shows a mobile phone screen in landscape mode. The
    top of the screen has an **Exit** button, and we can set this up to go to our
    menu after instructing the app to exit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The middle of the screen has a video feed from the robot, using the mechanism
    from the *Building a Raspberry Pi camera stream app* in [*Chapter 13*](B15660_13_Final_ASB_ePub.xhtml#_idTextAnchor283),
    *Robot Vision – Using a Pi Camera and OpenCV*. The left and right have sliders.
    The next screenshot shows how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.6 – Slider return to middle behavior
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.6* shows the slider mechanism. As with an analog joystick, you can
    drag the sliders to any position on their track with touches, and when let go,
    they will spring back to the middle.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that they don't immediately drop to the middle when let go but animate
    back to this over a few frames. We'll need a little math to make that happen in
    our code.
  prefs: []
  type: TYPE_NORMAL
- en: These sliders let you drive the robot tank-style (with a joypad, you could use
    two analog sticks for this). Each slider controls the speed of a motor. While
    this sounds tricky (not like driving a car), it is an elegant way to drive a two-wheeled
    robot with a little practice. The further away from the middle you slide a slider,
    the faster the associated motor will go. We will also ensure that the robot motors
    will stop after a second if communication is lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'This control of left speed and right speed is the same control system your
    behaviors have been using throughout the book, but has been made interactive.
    The next diagram shows some of the motions needed for typical moves:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.7 – Common moves on two sliders
  prefs: []
  type: TYPE_NORMAL
- en: The red dots in *Figure 17.7* represent where your thumb is touching the screen.
    By sliding both forward the robot will drive forward, and the further you slide
    them, the faster it will go. A backward action slides them both back. To spin
    the robot, slide them in opposite directions. To drive forward and a little left
    or right, you slide both forward but bring the right slider a little higher than
    the left. You are also able to compensate for veer this way.
  prefs: []
  type: TYPE_NORMAL
- en: We have a nice user interface design. To start building this, we will plan the
    code blocks we will need, and write the code to make them work in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Raspberry Pi for remote driving—get the basic driving system going
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our Raspberry Pi has already been able to run web services, using Flask to
    create a menu server and video servers. We can use image and control queues to
    make a behavior interact with a web server. We are going to reuse these capabilities.
    In the phone app, the slider controls will need to be smart. The next diagram
    shows the parts of our manual drive system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.8 – The system overview of a manual drive app
  prefs: []
  type: TYPE_NORMAL
- en: The dashed boxes in *Figure 17.8* show where the code is running, with the top
    dashed box being code running on the phone, and the lower box being code running
    on the Raspberry Pi in the robot. Inside the dashed boxes, the boxes with solid
    outlines are blocks of code or systems our code will need. At the bottom layer
    of *Figure 17.8*, the **Robot** box accepts the **stop motors** and **set motor
    speed** calls. These are from the **Behavior** box based on timeouts or the **control
    message queue** from the **Flask Web Server**. Meanwhile, the **Behavior** loop
    will also be taking **image frames** from the **camera**, encoding them and pushing
    them onto the **display frame queue**.
  prefs: []
  type: TYPE_NORMAL
- en: The next layer up is the **Flask Web Server**. This server consumes the **display
    frame queue** supplying frames to the multi-part **image feed**. The Flask server
    will handle **control requests** and push them onto the **control message queue**.
  prefs: []
  type: TYPE_NORMAL
- en: A **Page Script** handles **slider updates** and turns them into **control requests**
    using the jQuery library. The **Slider Gadget** turns **touches** into **slider
    updates** (it will be doing animation and converting for this).
  prefs: []
  type: TYPE_NORMAL
- en: The page itself uses an `img` tag to display the **video** feed, as before,
    and places the slider widgets. The **Exit** button makes a control request.
  prefs: []
  type: TYPE_NORMAL
- en: The **Page Script** and **Slider Gadget** will require JavaScript and **Cascading
    Style Sheets** (**CSS**) programming. Before we start that, we need to take the
    image core from [*Chapter 14*](B15660_14_Final_ASB_ePub.xhtml#_idTextAnchor315),
    *Line-Following with a Camera in Python*, and build more features to deliver the
    code to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the image app core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build this, we will start by adding some static file links and reusing the
    image app core we last used in [*Chapter 14*](B15660_14_Final_ASB_ePub.xhtml#_idTextAnchor315),
    *Line-Following with a Camera in Python*.
  prefs: []
  type: TYPE_NORMAL
- en: Static files do not cause the robot to do something; the system passively serves
    them. We will be serving JavaScript and CSS, along with a local copy of the jQuery
    library. Flask does this automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set up the static files folder, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `static` folder. We will put JavaScript and CSS code in this `static`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will make a local copy of the jQuery library. Make a `lib` directory under
    `static`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download jQuery from [https://code.jquery.com/jquery-3.5.1.min.js](https://code.jquery.com/jquery-3.5.1.min.js),
    press the browser `lib` folder. You should have a `static/lib/jquery-3.5.1.min.js`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `image_app_core.py` file, we also need to stop it using cached files
    so that it reloads our CSS and JavaScript files, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The app core now has a static copy of jQuery we can use offline, so our phone
    doesn't have to rely on a good signal to talk to the robot.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the manual drive behavior
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next part we will need is the behavior. It builds on concepts from the code
    seen before in [*Chapter 14*](B15660_14_Final_ASB_ePub.xhtml#_idTextAnchor315),
    *Line-Following with a Camera in Python*, with control messages changing motor
    speeds and a plain video output.
  prefs: []
  type: TYPE_NORMAL
- en: This system will have a timeout—if no control messages arrive for 1 second,
    it will stop driving. It can be quite frustrating to watch a robot drive off into
    the distance or off a desk, so it will revert to stopping if nothing is making
    sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a file called `manual_drive.py` with imports for the camera and control,
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can declare what we want the timeout threshold to be in seconds, as illustrated
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll make a `ManualDriveBehavior` class. In this, we''ll store a `robot`
    object and track time, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, build the control section of this behavior. It resets the last time for
    every instruction. The code can be seen in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our code processes the instruction in `handle_instruction`. This instruction
    is a dictionary, with an instruction name and parameters as its members. We can
    check if this command is `set_left` or `set_right`, as illustrated in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to handle the `exit` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It would be useful, at least when testing, to know whether we have an unknown
    instruction. Let''s handle that case by raising an exception, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our app also needs to make a display, putting the frame on the server image
    queue, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The behavior then has a `run` method to perform the setup and the main loop.
    We start by setting the pan and tilt to look straight ahead, warm up the camera,
    and stop the servos, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then loop over frames from the camera and process control instructions,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We finally make it auto stop based on the timeout, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We add the top-level code to create and start the components, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We still want to ensure we stop the server when we exit or hit an error, so
    we run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The behavior backend is complete but it needs a template to see it, along with
    style and code to run on the phone.
  prefs: []
  type: TYPE_NORMAL
- en: The template (web page)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The template is where we will place our sliders and some of the code to handle
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get into it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `templates/manual_drive.html` file. Start with the HTML preamble,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want the display to fit on a phone, adapting to the display size. We also
    don''t want the user''s touch interactions to accidentally scale the display.
    This line of code tells the browser that this is our intention:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to style this (and potentially our other interfaces). For this, we
    use a `display.css` style sheet, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are going to use the jQuery library to make things interactive, and we''ll
    build a touch-slider system. These are the HTML equivalent of imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are going to place a very specific bit of style here in this file. The rest
    comes from the style sheet. We want this behavior''s view to take up the whole
    screen and not scroll. The code can be seen here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The head ends with a title to go on the top of the tab, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now start the body with the first slider; we define this with `svg` tag,
    which we''ll use to make the slider track, as illustrated in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the container, we will draw a circle. The circle needs a radius `r`,
    which we can give in view box units. The center will be 0 in both directions.
    The code for this is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The circle's color will come from the style sheet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need an `Exit` link to finish the behavior. It has a class and ID
    to style it, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we have our video block. The `img` tag for the video is contained inside
    a `div` tag to preserve our video ratio on any size screen while letting it resize
    to fit the space, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The right slider is a repeat of the left, with only the ID being different.
    You could copy and paste the left code, changing the ID. The code can be seen
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need some JavaScript code in our HTML for the sliders. The code on
    the page will link slider code to the graphics we have and to the motors. First,
    we declare the JavaScript block, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a function to send motor controls to the robot. It takes a name (left or
    right) and a speed, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We POST this control instruction to the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next bit of code must only run after the page has completed loading; we
    want to ensure the preceding JavaScript libraries are fully loaded. jQuery has
    a special function, `$()`, which will run any function passed to it when the page
    has completed loading, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to link the exit button to a POST request, which forwards to the menu
    when done, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We set up the sliders and link them with their `svg` element IDs and `set_motor`
    so that they will update this every time they change, as illustrated in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now end our page by closing all the tags, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This page has no style; by default, the video and sliders have no shape, size,
    or color—so, if you try to load this, it will show a blank page. We've yet to
    tell the browser where we want things on the page or which colors to make them.
    We also don't have the slider code yet.
  prefs: []
  type: TYPE_NORMAL
- en: We've made the code to send the exit button and link sliders with tags. In the
    next section, we'll add a style sheet to make things visible.
  prefs: []
  type: TYPE_NORMAL
- en: The style sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now give our app some style. Style sheets take time to tune and get just
    right, so this is just a taste of what it can do. If you think my color choices
    are terrible, please feel free to substitute your own; I suggest using w3c colors
    at [https://www.w3schools.com/colors/default.asp](https://www.w3schools.com/colors/default.asp).
    You can use named or hex (`#1ab3c5`) colors.
  prefs: []
  type: TYPE_NORMAL
- en: The essence of CSS is to select elements on the page and associate style attributes
    with them. CSS style sections start with a `#` mark. For a comprehensive look
    at CSS selectors, see the *Further reading* section. Each section uses braces
    `{}` to delimit a section of style. A section's styles consist of a property name,
    a colon `:`, and a setting. A semicolon `;` follows these to end each setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the style, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `static/display.css` file to hold this style information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can set our slider track to 10% of the viewport width—that is, 10% as big
    as the screen. CSS has a special unit, `vw`, for this, along with `vh` for percentage
    of the viewport height. See the *Further reading* section for notes on CSS units.
    This code uses the `.slider_track` CSS selector, which applies to all objects
    with that class. Both sliders have this class, so changes here affect both of
    them. The code can be seen here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll give the slider track a solid blue border and a light blue background
    to match our mockups, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To style the tick, the circle we see on the sliders, we can add a light pinkish
    fill color, like our mockups, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we want to position the sliders (by their IDs) to the left and right.
    When making a display match closely to the screen mockup, we can use **absolute
    positioning** with viewport percentages to say exactly where things should be,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can try this now by uploading it, stopping the running behavior, starting
    it again, and then reloading. The sliders look better, but the exit button and
    video are in the wrong place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s make the exit button more like a button. Styles under `.button` will
    apply to all buttons with the same class. We will make it a block—an element that
    uses width and height properties. This block is 10% of the viewport height. The
    code can be seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we align the text in the middle with `line-height` and `text-align`,
    then use `2em` to mean twice normal text size, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to take the underline off the button text, which you normally get with
    a link. We''ll also give it some color, a blue background with white text, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We specify more about the exit button using its ID. We will set its width and
    the top but use `auto` margins to center it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Trying this out, you should now see the exit button in the right place.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we style the video. We want to center the video on the screen. The outer
    video element can do that for us, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then specify the position and size of the inner image block. We want
    it to be 20% from the top of the screen using a `vh` measurement. The `vmin` unit
    is a percentage of the screen''s minimum dimension; it ensures that this block
    is never so large that it would obscure the two slider bars. We make the height
    automatically scale. We select `#video img` to apply this style to the `img` object
    contained in the `video` object, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our page is fully styled. You can try this now to see how it looks. Upload
    the whole folder (including templates) to the robot, and then run `python3 manual_drive.py`.
    Point a desktop browser at `http://myrobot.local:5001/`, substituting your robot''s
    hostname or address to see it. A desktop browser is good to discover errors in
    the HTML or JavaScript code. At the time of writing, Firefox and Chrome support
    emulating mobile devices in the browser and touch events. It should look like
    the mockup with real video, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.9 – Screenshot of app running on the phone
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.9* shows the app running on a real phone. The slider bars still
    don''t do anything yet. Note that you may need to force your browser to reload
    the style sheet.'
  prefs: []
  type: TYPE_NORMAL
- en: We now need to add the slider code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the code for the sliders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sliders need to respond to touch events, moving the circle to match the
    touch location and sending an update message to show how far this movement is
    from the middle. The sliders will automatically return to the center when the
    touch events stop. JavaScript lets us run code in the browser, so we'll create
    a JavaScript `makeSlider` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we want to see how touches translate to slider positions and motor speeds.
    This is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_17_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.10 – Going from touch events to motor positions
  prefs: []
  type: TYPE_NORMAL
- en: Our sliders have some complexity in their positions, shown in *Figure 17.10*.
    When a user touches a screen, the position arrives in terms of screen coordinates.
    We first need to find where it is in the slider by taking away the slider's top
    coordinates. We will need to divide that result by the slider height, multiply
    by 200, and then subtract 100 to give us the viewbox position (the same system
    used to draw the SVG). In viewbox coordinates, the top is -100, but for our motors
    to go forward we need +100, so we must negate the viewbox position to get the
    motor speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our script will set up the data needed to move the slider and internal functions
    to map to the slider events, manage the slider''s movement, and call back the
    `manual_drive.html` code (or any other code) when we move the sliders. Let''s
    make the slider code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We will put this in `static/touch-slider.js`. As we are in a `.js` file, the
    `<script>` tags are not needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We create the `makeSlider`, function, a factory function to make everything
    the sliders need, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first thing we need is some internal data. The code needs to know if we
    are touching the slider so that it won''t try to move back while we''re still
    touching it. We need to know if the touch position has changed and keep track
    of its position. Finally, we''ll find our slider by its ID and keep the found
    object to use, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then need some functions to deal with the slider. We''ll start with a function
    to update the position, ensuring the tick is updated, that we only use whole numbers
    (because the browser won''t accept decimal points here), and that we update the
    `changed` flag, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next thing is handling touch events. Event handlers are functions that
    get called when something happens (such as the exit button handler). Touch events
    have three events: `touchstart`—when someone starts touching a screen, `touchmove`—when
    a touch moves to another area, and `touchend`—when the touch stops. We won''t
    use `touchstart`, so we''ll start with making an anonymous `touchmove` function,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then get the relative position of this touch from the top of the slider,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use this with the height to convert the touch position into a number
    from -100 to +100, matching the SVG viewbox coordinates, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since the code has received a touch event, we should set the `touched` flag
    to `true`. We must also prevent the touch event from having any other effects,
    as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we''ve set a flag to say that the touch event is occurring, we should
    also clear it (set it to `false`) when the touch event ends, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our system is animated, so it needs to have an update cycle to return to the
    middle. The update should only move the tick if we are not touching the slider,
    so it stays where you keep your thumb. When the touch has stopped and it''s still
    not at the zero position, we should update the position, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This next part looks a bit like the **Proportional-Integral-Derivative** (**PID**)
    controller code in that there''s an error multiplied by a proportional component.
    We scale the error by a factor of 0.3 and add/subtract an extra 0.5 to get it
    closer to a 1% minimum. Every time this is updated, it moves the slider closer
    to the middle. The code can be seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code is also a great place to log the position—something we can use when
    it goes wrong.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To run this `update` function frequently, we can use the `setInterval` built-in
    function, which runs a function repeatedly on every interval. This display update
    should be short to keep it responsive. The timings are in milliseconds. The code
    can be seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Besides updating the image, we also need to call the `when_changed` function.
    We only want to do so when something has changed and then reset the `changed`
    flag, so we don''t call it when idle. We''ll call this `update_when_changed`.
    This checks for changes and runs less frequently than the display update, so it
    doesn''t flood the `when_changed` handler and the queue on the robot. The code
    can be seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should now be ready to run the whole system.
  prefs: []
  type: TYPE_NORMAL
- en: Running this
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can now upload the entire set of files to a folder on your robot. As before,
    you can use `python3 manual_drive.py` to run this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use developer mode on a browser to view the web page before trying
    it on a phone, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Point your browser (Chrome or Firefox) at `http://myrobot.local:5001` (using
    your robot's hostname or address).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on your page and click the menu item labeled **Inspect or Inspect
    Element**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the developer tools, there will be buttons for emulating phone devices and
    touch events. Enable the phone emulation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to shake out any problems in a desktop browser first. Check that dragging
    the sliders has the desired results and click on the **Console** button to see
    if there are errors from the JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Common problems in JavaScript and CSS are missing punctuation such as semicolons,
    commas, or brackets. Having class or ID selectors that do not match (or are missing
    the required dot/hash mark syntax) will make styles fail to apply or element lookups
    in JavaScript produce no results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To use on the phone, you will need to use your robot''s IP address, as major
    smartphone brands do not support `.local` addresses. You can find this from your
    desktop with `ping myrobot.local`, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the phone, you should be able to use your thumbs to drive the robot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will take some practice to drive the robot manually. I suggest practicing
    overhead driving first, and when you have got the hang of that, try navigating
    through the camera. The camera frame rate is not very high, and this frame rate
    currently constrains the driving loop.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a fairly complex combination of Python, HTML, JavaScript, and CSS.
    Try these if you''ve run into trouble:'
  prefs: []
  type: TYPE_NORMAL
- en: If you see errors from Python, verify the line of code against the preceding
    code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If things are not working on the web page, try out the phone emulation in browser
    mode, as suggested previously, then select the inspector **Console** tab and try
    the operation again. This will show JavaScript errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the display appears wrong, with parts out of place or in the wrong color,
    verify that the CSS/style sheet sections and the HTML are correct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you receive `404` errors, ensure that the URLs in the HTML match the routes
    in the Flask/Python code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your robot seems to be pausing and then spending a while catching up with
    your events, you could adjust the `update_if_changed` interval time to something
    longer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You now have a robot you can drive remotely with the phone while seeing through
    its camera. You've seen how to handle touch events and use style sheets with SVG
    to make custom widgets. You've used JavaScript to bring the widget to life with
    animation and send control messages back to the robot.
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we'll make the menu more touch-friendly so that we can
    control the robot mostly from the phone.
  prefs: []
  type: TYPE_NORMAL
- en: Making the robot fully phone-operable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal here is to make it so that we can drive the robot completely from the
    phone. We need to ensure that the robot is ready to run when we turn it on, and
    make sure that the menu is usable from a phone. The menu we made earlier doesn't
    seem very touch-friendly. It also will not successfully run any of the behaviors
    with displays using Flask. We will make the menu buttons bigger and more touch-friendly,
    using styles similar to our manual drive behavior. The menu will also load our
    server page after clicking a behavior with a server such as this one or the last
    chapter's visual tracking behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Let's fix the Flask behaviors first.
  prefs: []
  type: TYPE_NORMAL
- en: Making menu modes compatible with Flask behaviors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you've already tried running Flask-based behaviors (such as those with a
    camera) in the control server, you will have noticed some very odd behavior. Your
    behavior will appear to do the right thing with sensors on the robot, but the
    web service fails to do anything useful on port `5001`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Flask uses subprocesses to manage its debug mode, which interferes with our
    use of them. We don''t need debug mode, so the fix is to remove debug mode by
    doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `control_server.py` and jump to the last few lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove `debug=True` from the `app.run` line by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now add the manual drive and color-tracking and face-tracking behaviors
    to the control server, and they will start properly.
  prefs: []
  type: TYPE_NORMAL
- en: Loading video services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we click on a menu option for a video server-based behavior, after it starts
    we need to send our browser to port `5001` on our robot to see its output.
  prefs: []
  type: TYPE_NORMAL
- en: Our `menu.html` file currently takes the response from the `control_server`
    process and puts this into the message box. We can upgrade this to instruct the
    code to do something else. We can start by configuring the items that need to
    show a server page in `mode_config` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each item in the `mode_config` variable holds only the mode script; we can
    update this to have both a script and whether it needs to show a server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `robot_modes.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `mode_config`, we will take the simple text naming the script (such as `"avoid_behavior.py"`)
    and replace it with a dictionary, allowing a simple case (`{"script": "avoid_behavior.py}`)
    or a more complex case (`{"script": "manual_drive.py", "server": True}`). You''ll
    need to change that on all items throughout the `mode_config`. The code is shown
    in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then need to update the server-type scripts in `mode_config` variable using
    the more complex case, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to modify the `run` method to pick the script from this changed structure,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to check if we should redirect if the mode is a server and the
    current process is alive. I''ve added the explicit `is True`, to make it clearer
    that the value is a `True`/`False` flag, as illustrated in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ve prepared `robot_modes.py`. The `control_server.py` file sends responses
    to the web page. Let''s use the same trick we did with the `mode_config` and return
    a dictionary with data instead of just a string, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use `control_server.py` and add `jsonify` to the Flask imports, as
    illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we replace the `run` method so that it creates the `response` dictionary,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This response is the basic message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If we intend to redirect, we should send the `redirect` setting with our response,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to send the response, encoded as JSON. JSON is an easy way to get data
    to JavaScript from Python—it is especially good with dictionary data. Run the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we also sent a message back in the `stop` command, we should wrap it
    in the same way, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The control server is able to send the `response` dictionary, and redirect
    if needed. The other side of this, now receiving the JSON object, requires changes
    in the page scripts to handle the new response. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `templates/menu.html` and find the `run` function, as illustrated in the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The message handling here needs to change. We need to set the message element
    HTML using the message element from our response, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'However, we can also check if we need to redirect. If so, we use the same trick
    we did in the previous *The template* section for the exit button in the manual
    drive behavior, but in a timeout, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you upload this and run `python3 control_server.py`, you'll see the menu
    is now more functional but looks quite plain. You should be able to click on the
    tracking or driving behaviors and, after 3 seconds, be redirected to their page.
    Clicking the exit buttons should take you back to the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Time to give it some style.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've already used a style sheet in the manual drive demo to make the exit button
    look better. This menu is a set of buttons too. We can build on that style and
    make the menu more phone-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Making the menu template into buttons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have an existing style sheet in `static/display.css`. We can make further
    use of this in the menu, perhaps with a few tweaks. Our menu template can be optimized
    to make the most of that style sheet too. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `templates/menu.html`. We will add a link to the style sheet. We can add
    a `charset` definition too, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The menu template uses a list of items for the menu. Adding a `menu` class
    to that list and a `button` class to the links lets us use the existing style
    for them, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open up `static/display.css`, where we will define the style for the `menu`
    class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We make the list container fill the screen width without any extra margins (space
    around the outside of the item) or padding (space between the inside of the item
    and its child list items).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The menu consists of list items. By default, these get a dot: a bullet point.
    We want to set this to `none` (no shape) to remove the bullet point. We can use
    CSS `list-style` properties to change that. The selector here applies to list
    items (`li`) that are children of a `.menu` class object. The code can be seen
    in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make this touch-friendly, we make the buttons the same width. `60vw` (60%
    of the viewport width) should be wide enough. We use the margin `auto` trick to
    center this. We can also add a 1-pixel light blue border to them, as illustrated
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Upload the whole directory and start the menu server with `python3 control_server.py`.
    This menu should now look more phone-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: You've now seen how to make our control server work nicely on a smartphone,
    and you should be getting a little more comfortable with the interactions of JavaScript,
    HTML, and CSS with Python. However, this system has a flaw—we are still starting
    it from an SSH terminal. Let's see how to fix this.
  prefs: []
  type: TYPE_NORMAL
- en: Making the menu start when the Pi starts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have a menu system launching robot behaviors. Using SSH to log in is
    great to debug, see problems, and fix them. However, when you want to demonstrate
    your robot, a SSH session will become inconvenient.
  prefs: []
  type: TYPE_NORMAL
- en: The ideal is to turn on the robot, wait for a light to come on, then point your
    phone browser at it to control it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to do two things to make this useful, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Use an LED to indicate that it's ready (in menu mode) to allow the robot to
    tell us before our phone has linked to the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `systemd` to automatically start the menu Flask server when we turn on the
    robot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get stuck in with the lights.
  prefs: []
  type: TYPE_NORMAL
- en: Adding lights to the menu server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We won''t want the whole robot class loaded in our menu, but it can use the
    lights to indicate our robot is now ready. We will import the LED system, turn
    it on as the server starts, and then turn it off/release it when the first `/run`
    request arrives. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `control_server.py` file and import the LEDs, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to set up our LEDs and turn one LED green by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we run something, we know that someone''s used the menu. In our `run`
    method, we can clear the LED. Since we only want to do it once, we can set the
    global LEDs to `None` and then check this next time. Note in the following code
    snippet that we are inserting the highlighted code into the existing `run` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can test this by uploading the menu server code and rerunning it. The LED
    should light when it starts, and then when you select another behavior, it will
    go out. It should work correctly to move from the menu to the LED test behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Using systemd to automatically start the robot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `systemd` in Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'Registering a service is done by creating a unit file and copying it into the
    right folder on the Pi. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a `menu_server.service` file. Start this with a description, and tell
    `systemd` to start our service after we have networking on our Raspberry Pi, as
    illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we tell `systemd` we want this to start as the Pi is ready for users to
    log in, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Service` section shown in the following snippet configures how to run
    our code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The working directory is where you have copied your robot files to—for example,
    `/home/pi`. We can also set the `pi` user we''ve been using the whole time. The
    working directory is how your code finds its other components. Have a look at
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ExecStart` statement tells `systemd` the command to run the service. However,
    it does not assume a path the way a shell would, so prefix the `python3` command
    with `/usr/bin/env`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You now need to set this up on the Raspberry Pi. Upload this file to your Raspberry
    Pi home directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll need `sudo` to copy it into the system configuration. Type this via
    SSH on the Pi. Note you will see permission errors if you miss the `sudo` command.
    The code can be seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should now ask `systemd` to load our configuration and then enable our service,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The system will confirm you''ve enabled it with this message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can then try starting your service with this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If starting this server is successful, you will see a green light go on, showing
    it is ready. You will then be able to point your browser at the robot and control
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's just check that this has worked.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Things can go wrong here—if so, try these steps to fix it or find out more:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting/enabling the menu server with `systemd` may fail, and you will see
    `Unit menu_server.service is not loaded properly: Invalid argument` if there are
    problems with the `menu_server.service` file. Please verify its content, copy
    it back over, and rerun the `sudo` commands to install the new file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to see more of what the server is doing, you can use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Pi will then respond with something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`systemctl` can show some recent activity, but you may want to follow the output
    of behaviors as they run. To do this, you will need to use the `journalctl` command.
    Use `-u` to specify the service we created, and then `-f` to follow the log, as
    illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will then be able to see servers as they run—perhaps not as convenient for
    debugging, but handy for launching services. Use *Ctrl* + *C* to stop seeing the
    log.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now reboot the robot, wait for the green light, and start driving it.
    The green light will also mean that your Mycroft voice assistant can send requests
    to the robot too.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you upload new code, you will need to restart the service. You can use the
    following command to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations—your robot is now truly headless! It doesn't even need a PC
    or laptop to start doing things.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter added a small menu system to our robot to start different modes
    from a connected web browser.
  prefs: []
  type: TYPE_NORMAL
- en: You've seen how to drive a robot from a mobile phone and how to create interesting-looking
    animated widgets with SVG and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Your robot has now gained the ability to be driven manually. It may take you
    a while to get used to handling it, and manually correcting for veer (motors behaving
    slightly differently) is more challenging than when the PID systems correct themselves.
    Still, you will gain skills in driving it with your phone. You can use the camera
    on the front of the robot to get a robot's-eye view of the world.
  prefs: []
  type: TYPE_NORMAL
- en: You've turned the control server into a menu server and then made that start
    automatically when you turn on the robot. You've also seen how to connect your
    menu server to the video-server apps such as manual driving, color-tracking, or
    face-tracking apps. By making the buttons more touch-friendly on the menu server,
    you can use a phone to launch most behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we gave the menu server a way to indicate being ready on the robot
    with a LED and then set it up to automatically start when you turn on the robot.
    If your robot and phone can connect to the same network (perhaps you can set up
    your phone hotspot in a `wpa_supplicant.conf` file), you will be able to launch
    the behaviors from places outside your lab and demonstrate them to people. You've
    made the robot fully controllable with your phone!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at meeting the robot-making community and
    finding further robot building and programming skills to continue building.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You could enhance the system in many ways. Here are some suggestions for building
    further:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `manual_drive.py` file, the `handle_instruction` function uses a bunch
    of `if` statements to handle the instruction. If this list of command handlers
    exceeds five, you could improve it by using a dictionary (such as `menu_modes`)
    and then calling different handler methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Could you change the touch interface into two circular pads—perhaps so the left
    controls motor movement and the right changes the camera position?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What about creating phone-friendly interfaces for other behaviors to control
    their parameters?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could embellish the CSS by adding round buttons or putting spacing between
    the buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The menu still uses text buttons. Could you find a way to associate an image
    with each behavior and make a button grid?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a `sudo poweroff` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For desktop compatibility, the manual driving system could be enhanced with
    keyboard interactions to drive the robot, which is not quite as fun as the phone
    but is a handy fallback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A seriously advanced improvement to the driving system would be to control motors
    in terms of counts per second, with a PID per wheel, matching the number of pulse
    counts we get with those we expect from the encoders. This improvement would make
    the robot drive straighter and be therefore easier to drive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find out more about the topics covered in this chapter, here are some suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend the Flask API documentation ([http://flask.pocoo.org/docs/1.0/api/](http://flask.pocoo.org/docs/1.0/api/)),
    both to help understand the Flask functions we've used and to learn other ways
    to use this flexible web server library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a more guided look at the Flask web server, I suggest reading *Flask By
    Example*, *Gareth Dwyer*, *Packt Publishing* ([https://www.packtpub.com/product/flask-by-example/9781785286933](https://www.packtpub.com/product/flask-by-example/9781785286933)),
    showing you how to build more involved web applications using Flask.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I also recommend the book *Mastering Flask*, *Jack Stouffer*, *Packt Publishing*
    ([https://www.packtpub.com/web-development/mastering-flask](https://www.packtpub.com/web-development/mastering-flask)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML used in this chapter is elementary. To get a more in-depth look into
    how you could enhance the simple menu system, I recommend the e-learning video
    guide *Beginning Responsive Web Development with HTML and CSS [eLearning]*, *Ben
    Frain*, *Cord Slatton-Valle*, *Joshua Miller*, *Packt Publishing* ([https://www.packtpub.com/web-development/beginning-responsive-web-development-html-and-css-elearning-video](https://www.packtpub.com/web-development/beginning-responsive-web-development-html-and-css-elearning-video)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use CSS selectors throughout HTML, CSS, and JavaScript applications. You
    can find a good combination of reference and tutorials at the *W3C Schools CSS
    Selectors* website ([https://www.w3schools.com/cssref/css_selectors.asp](https://www.w3schools.com/cssref/css_selectors.asp)).
    I would recommend exploring the site for its information on most web application
    technologies. For CSS units, see *W3C Schools CSS Units* ([https://www.w3schools.com/cssref/css_units.asp](https://www.w3schools.com/cssref/css_units.asp))
    to practice and find more types of units to use. *W3C Schools* provides in general
    great reference and learning material for these web technologies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For getting more familiar with the JavaScript, CSS, and HTML technologies used
    here, *freeCodeCamp* ([https://www.freecodecamp.org/](https://www.freecodecamp.org/))
    is a valuable resource with self-learning modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi has handy documentation on user `systemd` files at [https://www.raspberrypi.org/documentation/linux/usage/systemd.md](https://www.raspberrypi.org/documentation/linux/usage/systemd.md).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a chapter on understanding `systemd` in *Mastering Linux Network Administration*,
    *Jay LaCroix*, *Packt Publishing* ([https://www.packtpub.com/product/mastering-linux-network-administration/9781784399597](https://www.packtpub.com/product/mastering-linux-network-administration/9781784399597)),
    published in 2015\.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full reference for `systemd` services can be found on the *freedesktop* manuals
    at [https://www.freedesktop.org/software/systemd/man/systemd.service.html](https://www.freedesktop.org/software/systemd/man/systemd.service.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
