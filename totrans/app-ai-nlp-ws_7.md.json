["```py\n    aws s3 mb s3://lesson1-text-files-20200217\n    ```", "```py\n    I am a test file to verify the s3 trigger was successfully configured on 1/20/2020 at 1:34 PM and tried 3 times!\n    ```", "```py\n    { {'Sentiment': 'NEUTRAL', \n       'SentimentScore': {'Positive': 0.21022377908229828, \n                          'Negative': 0.27646979689598083, \n                          'Neutral': 0.5132954716682434, \n                          'Mixed': 1.0932244549621828e-05},\n    ```", "```py\n    { 'Entities': [{'Score': 0.9891313314437866, \n                    'Type': 'DATE', 'Text': '1/20/2020 at 1:34 PM', \n                    'BeginOffset': 76, 'EndOffset': 96}, \n                   {'Score': 0.9999986290931702, 'Type': 'QUANTITY', \n                    'Text': '3 times', 'BeginOffset': 107, \n                    'EndOffset': 114}], \n    ```", "```py\n    {'KeyPhrases': [{'Score': 0.9992266297340393, \n                     'Text': 'a test file', 'BeginOffset': 8, \n                     'EndOffset': 19}, \n                    {'Score': 0.9999999403953552, \n                     'Text': 'the s3 trigger', 'BeginOffset': 30, \n                     'EndOffset': 44}, \n                    {'Score': 0.9999963045120239, \n                     'Text': '1/20/2020', 'BeginOffset': 76, \n                     'EndOffset': 85}, \n                    {'Score': 0.9960731863975525, \n                     'Text': '1:34 PM', 'BeginOffset': 89, \n                     'EndOffset': 96}, \n                    {'Score': 0.9999966621398926, 'Text': '3 times', \n                     'BeginOffset': 107, 'EndOffset': 114}],\n    ```", "```py\n    import os\n    import boto3\n    ```", "```py\n    # Create an S3 client\n    s3 = boto3.client('s3')\n    ```", "```py\n    BUCKET_NAME = '<insert a unique bucket name>'\n    BUCKET_FOLDER = 'movie_review_files/'\n    ```", "```py\n    LOCAL_PATH = os.getcwd() +'\\\\os.getcwd() command will get the current path. Ensure that the movie review files are in a folder located at the same path. Based on the folder name, you have to change the highlighted value. Alternatively, you can assign a custom path to LOCAL_PATH as well.\n    ```", "```py\n    text_files_list = [f for f in os.listdir(LOCAL_PATH) \\\n                       if f.endswith('.txt')]\n    ```", "```py\n    file_count = 0\n    for filename in text_files_list:\n      # print(filename)\n      file_count += 1\n    s3.upload_file(LOCAL_PATH + filename, BUCKET_NAME, \\\n                   BUCKET_FOLDER + filename)\n    print(F\"Completed uploading {file_count} files.\")\n    ```", "```py\n    import boto3\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    region = 'us-west-2'\n    s3 = boto3.client('s3',region_name = region)\n    ```", "```py\n    #'<insert a unique bucket name>'\n    bucket_name = 'unknown-tm-analysis-20200302'\n    ```", "```py\n    # Create a location Constraint\n    location = {'LocationConstraint': region}\n    # Creates a new bucket \n    s3.create_bucket(Bucket=bucket_name,\\\n                     CreateBucketConfiguration=location)\n    ```", "```py\n    filenames_list = ['doc-topics.csv', 'topic-terms.csv']\n    ```", "```py\n    for filename in filenames_list: \n        s3.upload_file(filename, bucket_name, filename)\n    ```", "```py\n    if filename == 'doc-topics.csv':\n    ```", "```py\n    obj = s3.get_object(Bucket=bucket_name, Key=filename)\n    ```", "```py\n    doc_topics = pd.read_csv(obj['Body']) else:\n    obj = s3.get_object(Bucket=bucket_name, Key=filename) \\\n                        topic_terms = pd.read_csv(obj['Body'])\n    ```", "```py\n    merged_df = pd.merge(doc_topics, topic_terms, on='topic')\n    ```", "```py\n    print(merged_df)\n    ```", "```py\n    import boto3\n    ```", "```py\n    def Lambda_handler(event, context):\n    ```", "```py\n    s3 = boto3.client(\"s3\")\n    ```", "```py\n    # e.g.\" account-balance-202001241911\"\n    bucket = \"<input Bucket name>\"\n    ```", "```py\n    filename = 'balance.txt'\n    print(\"filename: \", filename)\n    ```", "```py\n    file_obj = s3.get_object(Bucket = Bucket, Key = filename)\n    ```", "```py\n    account_balance =  (float(file_obj['Body'].read()))\n    ```", "```py\n    return close('Your balance is ' + str(account_balance))\n    ```", "```py\n    def close(message):\n        return {\n            'sessionAttributes': {},\n            'dialogAction': {\n                'type': 'Close',\n                'fulfillmentState': 'Fulfilled',\n                'message': {\n                    'contentType': 'PlainText',\n                    'content': message\n                }\n            }\n        }\n    ```"]