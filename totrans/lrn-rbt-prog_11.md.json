["```py\n    pi@myrobot:~ $ pip3 install ledshim\n    ```", "```py\n    import ledshim to set the device up.We have set up a property for the number of LEDs in our LED class, called `count`. This property can be read like a variable but is read-only, and our code can't accidentally overwrite it.  \n    ```", "```py\n    (r, g, b), the LED SHIM library expects them to be separate parameters. Python has a trick for expanding a tuple into a set of parameters by using an asterisk with the variable name. This expansion is what *color means on the second line.The LED SHIM code raises `KeyError` if the user attempts to set an LED out of range.\n    ```", "```py\n        def set_range(self, led_range, color):\n            ledshim.set_multiple_pixels(led_range, color)\n    ```", "```py\n        def set_all(self, color):\n            ledshim.set_all(*color)\n    ```", "```py\n        def clear(self):\n            ledshim.clear()\n    ```", "```py\n        def show(self):\n            ledshim.show()\n    ```", "```py\n    from Raspi_MotorHAT import Raspi_MotorHAT\n    from gpiozero import DistanceSensor\n    import atexit\n    import leds_led_shim\n    ```", "```py\n    class Robot:\n        def __init__(self, motorhat_addr=0x6f):\n           # Setup the motorhat with the passed in address\n           self._mh = Raspi_MotorHAT(addr=motorhat_addr)\n           # get local variable for each motor\n           self.left_motor = self._mh.getMotor(1)\n           self.right_motor = self._mh.getMotor(2)\n           # Setup The Distance Sensors\n           self.left_distance_sensor = DistanceSensor(echo=17, trigger=27, queue_len=2)\n            self.right_distance_sensor = DistanceSensor(echo=5, trigger=6, queue_len=2)\n            # Setup the Leds\n            self.leds = leds_led_shim.Leds()\n    ```", "```py\n            # ensure everything gets stopped when the code exits\n            atexit.register(self.stop_all)\n    ```", "```py\n        def stop_all(self):\n            self.stop_motors()\n            # Clear the display\n            self.leds.clear()\n            self.leds.show()\n    ```", "```py\n    pi@myrobot:~ $ python3\n    Python 3.7.3 (default, Apr  3 2019, 05:39:12) \n    [GCC 8.2.0] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>>\n    ```", "```py\n    >>> import robot\n    >>> r = robot.Robot()\n    ```", "```py\n    >>> r.leds.set_one(0, (255, 0, 0))\n    ```", "```py\n    >>> r.leds.show()\n    ```", "```py\n    leds.show to send the colors to the LED device.\n    ```", "```py\n    from robot import Robot\n    from time import sleep\n    ```", "```py\n    bot = Robot()\n    red = (255, 0, 0)\n    blue = (0, 0, 255)\n    ```", "```py\n    set_all method to set all the LEDs to red and call the show method to send it to the device. The code uses sleep to wait for half a second, before switching to blue. Important noteThe complete code is at [https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming-Second-Edition/blob/master/chapter8/leds_test.py](https://github.com/PacktPublishing/Learn-Robotics-Fundamentals-of-Robotics-Programming-Second-Edition/blob/master/chapter8/leds_test.py).\n    ```", "```py\n    pi@myrobot:~ $ python3 leds_test.py\n    ```", "```py\ncyan = colorsys.hsv_to_rgb(0.6, 1.0, 1.0)\n```", "```py\ncyan_rgb = [int(c * 255) for c in cyan]\n```", "```py\nimport colorsys\ndef show_rainbow(leds, led_range):\n    led_range = list(led_range)\n    hue_step = 1.0 / len(led_range)\n    for index, led_address in enumerate(led_range):\n        hue = hue_step * index\n        rgb = colorsys.hsv_to_rgb(hue, 1.0, 0.6)\n        rgb = [int(c*255) for c in rgb]\n        leds.set_one(led_address, rgb)\n```", "```py\nfrom time import sleep\nfrom robot import Robot\nfrom led_rainbow import show_rainbow\nbot = Robot()\nwhile True:\n    print(\"on\")\n    show_rainbow(bot.leds, range(bot.leds.count))\n    bot.leds.show()\n    sleep(0.5)\n    print(\"off\")\n    bot.leds.clear()\n    bot.leds.show()\n    sleep(0.5)\n```", "```py\n            # Calculations for the LEDs\n            self.led_half = int(self.robot.leds.leds_count/2)\n    ```", "```py\n            self.sense_colour = 255, 0, 0\n    ```", "```py\n        def distance_to_led_bar(self, distance):\n    ```", "```py\n    # Invert so closer means more LED's. \n            inverted = max(0, 1.0 - distance)\n    ```", "```py\n            led_bar = int(round(inverted * self.led_half))\n            return led_bar\n    ```", "```py\n        def display_state(self, left_distance, right_distance):\n            # Clear first\n            self.robot.leds.clear()\n    ```", "```py\n            # Left side\n            led_bar = self.distance_to_led_bar(left_distance)\n            self.robot.leds.set_range(range(led_bar), self.sense_colour)\n    ```", "```py\n            # Right side\n            led_bar = self.distance_to_led_bar(right_distance)\n            # Bit trickier - must go from below the leds count up to the leds count.\n            start = (self.robot.leds.count – 1) - led_bar\n            self.robot.leds.set_range(range(start, self.robot.leds.count - 1), self.sense_colour)\n    ```", "```py\n            # Now show this display\n            self.robot.leds.show()\n    ```", "```py\n                # Get the sensor readings in meters\n                left_distance = self.robot.left_distance_sensor.distance\n                right_distance = self.robot.right_distance_sensor.distance\n                # Display this\n                self.display_state(left_distance, right_distance)\n                # Get speeds for motors from distances\n                nearest_speed, furthest_speed, delay = self.get_speeds(min(left_distance, right_distance))\n    ```", "```py\n    from robot import Robot\n    from time import sleep\n    from led_rainbow import show_rainbow\n    ```", "```py\n         # Left side\n         led_bar = self.distance_to_led_bar(left_distance)\n         show_rainbow(self.robot.leds, range(led_bar))\n    ```", "```py\n            start = (self.robot.leds.count – 1) - led_bar\n            right_range = range(self.robot.leds.count - 1, start, -1)\n            show_rainbow(self.robot.leds, right_range)\n    ```"]