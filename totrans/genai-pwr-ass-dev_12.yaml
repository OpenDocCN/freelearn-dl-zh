- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Simplifying Code Explanation, Optimization, Transformation, and Feature Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化代码解释、优化、转换和功能开发
- en: 'In this chapter, we will look at the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: Explaining and updating code
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释和更新代码
- en: Transforming code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换代码
- en: Developing code features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发代码功能
- en: In *Part 2*, we dived deep into how **Amazon Q Developer** can help developers
    be more efficient by assisting them in auto-generating code based on different
    prompting techniques. In this chapter, we will expand on some other key features
    of Amazon Q Developer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在**第2部分**中，我们深入探讨了**Amazon Q Developer**如何通过帮助他们根据不同的提示技术自动生成代码来帮助开发者提高效率。在本章中，我们将扩展Amazon
    Q Developer的一些其他关键功能。
- en: First, we will explore how Q can provide developers with explanations of existing
    code, even without them having prior knowledge of the code they are trying to
    understand. Next, we will examine how Q can help transform an existing code base
    from a lower version of the programming language to the desired upper version.
    In our case, we will focus on how Q transforms Java code. Finally, we will explore
    how Q can assist in developing new code features or making changes to existing
    projects. This is also a powerful component where you instruct Q in plain language
    about the feature you want the code to build, and Q will draw a plan first and
    then help generate code based on that plan.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将探讨Q如何为开发者提供现有代码的解释，即使他们没有关于他们试图理解的代码的先验知识。接下来，我们将检查Q如何帮助将现有代码库从编程语言的较低版本转换为所需的较高版本。在我们的案例中，我们将专注于Q如何转换Java代码。最后，我们将探讨Q如何帮助开发新的代码功能或对现有项目进行更改。这也是一个强大的组件，您可以用普通语言指导Q关于您希望代码构建的功能，Q将首先绘制一个计划，然后根据该计划帮助生成代码。
- en: So, let’s dive straight into these three features of Amazon Q Developer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们直接深入探讨Amazon Q Developer的这三个功能。
- en: Explaining and updating code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释和更新代码
- en: With Amazon Q Developer, you can effortlessly update your code base by requesting
    changes to a particular line or block of code. The tool will then generate new
    code that reflects the desired modifications, which you can seamlessly incorporate
    into the original file. This seamless integration ensures a smooth and efficient
    coding experience, allowing you to focus on writing high-quality code without
    the hassle of manually making intricate changes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Amazon Q Developer，您可以通过请求对特定行或代码块的更改来轻松更新您的代码库。然后，该工具将生成反映所需修改的新代码，您可以无缝地将其合并到原始文件中。这种无缝集成确保了流畅和高效的编码体验，让您能够专注于编写高质量的代码，而无需手动进行复杂的更改。
- en: To better understand this feature, let’s examine some existing code to witness
    the power of Amazon Q Developer firsthand. I’ve selected one of the Python code
    bases for learning from a public GitHub repository at [https://github.com/jassics/learning-python](https://github.com/jassics/learning-python).
    Feel free to experiment with your own code if you have any. This repository contains
    simple Python examples that will make it easier to grasp the capabilities of Amazon
    Q Developer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这个功能，让我们检查一些现有代码，以亲身体验Amazon Q Developer的力量。我已从公共GitHub仓库[https://github.com/jassics/learning-python](https://github.com/jassics/learning-python)中选择了一个用于学习的Python代码库。如果您有任何代码，请随意实验。此仓库包含简单的Python示例，这将使您更容易掌握Amazon
    Q Developer的功能。
- en: To demonstrate this feature, we will use the VS Code IDE to clone this Git repository
    into the IDE workspace. We’ve opened the `two_sum_index.py` file in VS Code. The
    following screenshot displays the code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个功能，我们将使用VS Code IDE将此Git仓库克隆到IDE工作区。我们在VS Code中打开了`two_sum_index.py`文件。以下截图显示了代码。
- en: '![Figure 12.1 – Sample Python code opened in VS Code IDE](img/B21378_12_1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 在VS Code IDE中打开的Python代码示例](img/B21378_12_1.jpg)'
- en: Figure 12.1 – Sample Python code opened in VS Code IDE
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 在VS Code IDE中打开的Python代码示例
- en: We assume that you have followed the instructions provided in [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022)
    for installing the Amazon Q extension for VS Code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已遵循[*第2章*](B21378_02.xhtml#_idTextAnchor022)中提供的说明来安装VS Code的Amazon Q扩展。
- en: To begin using the **Explain** feature, you can select either the full code
    or just a portion of it, depending on what you would like to understand and change.
    The following screenshot shows the different options available for the selected
    code using Amazon Q.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用**解释**功能，您可以选择全部代码或其中一部分，具体取决于您想理解并更改的内容。以下截图显示了使用Amazon Q为所选代码提供的不同选项。
- en: '![Figure 12.2 – Amazon Q – The Explain feature menu](img/B21378_12_2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – Amazon Q – 解释功能菜单](img/B21378_12_2.jpg)'
- en: Figure 12.2 – Amazon Q – The Explain feature menu
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – Amazon Q – 解释功能菜单
- en: Let’s go through each of them and see what exactly they do.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看它们，看看它们具体做了什么。
- en: Explaining code
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释代码
- en: When you click the **Explain** option with the code selected, Amazon Q will
    try to summarize for you what the logic does in the code. This can be extremely
    handy for developers when opening a large code file developed by someone else,
    especially if there is not a lot of documentation related to the code. So, in
    essence, with just a click of a button, Q instantly explains to you what the code
    is all about.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击带有代码选择的**解释**选项时，Amazon Q会尝试为你总结代码中的逻辑功能。这对于开发者来说非常有用，尤其是在打开由他人开发的大型代码文件时，尤其是如果与代码相关的文档不多。因此，本质上，只需点击一下按钮，Q就能立即向你解释代码的内容。
- en: As soon as you hit the **Explain** option, Q will first show you the section
    of the code you selected for explanation, as seen in the following screenshot.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击**解释**选项，Q会首先显示你选择的用于解释的代码部分，如下面的截图所示。
- en: '![Figure 12.3 – Amazon Q – the Explain feature menu](img/B21378_12_3.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – Amazon Q – 解释功能菜单](img/B21378_12_3.jpg)'
- en: Figure 12.3 – Amazon Q – the Explain feature menu
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – Amazon Q – 解释功能菜单
- en: 'If you scroll down a bit in the **AMAZON Q: CHAT** window, the first thing
    you will notice is that Q tries to provide you with a gist of what the logic is
    all about. In this case, it identified that this logic solves the two-sum problem.
    The following screenshot shows the initial explanation.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你稍微向下滚动一下**AMAZON Q: CHAT**窗口，你首先会注意到Q试图为你提供一个关于逻辑大致内容的概要。在这种情况下，它识别出这个逻辑解决了两个数之和的问题。以下截图显示了初始解释。'
- en: '![Figure 12.4 – Amazon Q – A high-level explanation of the code](img/B21378_12_4.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – Amazon Q – 代码的高级解释](img/B21378_12_4.jpg)'
- en: Figure 12.4 – Amazon Q – A high-level explanation of the code
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – Amazon Q – 代码的高级解释
- en: It then provides a further breakdown of the code, explaining every major element
    of the code, as seen in the following screenshot.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它进一步分解了代码，解释了代码的每一个主要元素，如下面的截图所示。
- en: '![Figure 12.5 – Amazon Q – breakdown of the code](img/B21378_12_5.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – Amazon Q – 代码分解](img/B21378_12_5.jpg)'
- en: Figure 12.5 – Amazon Q – breakdown of the code
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – Amazon Q – 代码分解
- en: Finally, it also provides the key aspects of the solution, as seen in the following
    screenshot.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它还提供了解决方案的关键方面，如下面的截图所示。
- en: '![Figure 12.6 – Amazon Q – key aspects of the solution](img/B21378_12_6.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – Amazon Q – 解决方案的关键方面](img/B21378_12_6.jpg)'
- en: Figure 12.6 – Amazon Q – key aspects of the solution
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – Amazon Q – 解决方案的关键方面
- en: As you can see, the task of understanding someone else’s code, which sometimes
    can take days, if not weeks, was accomplished in a matter of seconds by Amazon
    Q Developer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，理解他人代码的任务，有时可能需要几天甚至几周，现在通过Amazon Q开发者只需几秒钟就能完成。
- en: Refactoring code
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码重构
- en: Many developers, in the rush of meeting deadlines, do not follow all the best
    practices of coding—especially code readability and efficiency. The **Refactor**
    option in Amazon Q accomplishes exactly that immediately, without the developer
    having to put much effort into it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者在赶工满足截止日期的压力下，并没有遵循所有最佳编码实践——尤其是代码的可读性和效率。Amazon Q中的**重构**选项可以立即实现这一点，而无需开发者投入太多精力。
- en: When we select the same code that we picked in the *explain* section for refactoring,
    this is the response we receive in the **AMAZON Q:** **CHAT** window.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择在**解释**部分为重构选择的相同代码时，这就是我们在**AMAZON Q:** **CHAT**窗口中收到的响应。
- en: '![Figure 12.7 – Amazon Q – refactored code](img/B21378_12_7.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – Amazon Q – 重构后的代码](img/B21378_12_7.jpg)'
- en: Figure 12.7 – Amazon Q – refactored code
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – Amazon Q – 重构后的代码
- en: It will provide you with a version of the refactored code. Keep in mind it may
    not always meet the standards you have set or what your organization has set.
    It is important for the developer to either accept the whole refactored code as
    is or pick and choose what they feel sets a high bar for them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它会为你提供一个重构后的代码版本。请注意，它可能并不总是符合你设定的标准或你所在组织设定的标准。对于开发者来说，要么接受整个重构后的代码，要么挑选他们认为能设定高标准的内容。
- en: 'If you scroll down the **AMAZON Q: CHAT** window, to make the developer’s life
    easier, it also provides in detail all the changes it made in the refactored code
    so that they get a good handle on why it proposed those changes. The following
    screenshot shows the list of changes Q made for its version of the refactored
    code.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你向下滚动 **AMAZON Q: CHAT** 窗口，为了使开发者的生活更轻松，它还详细提供了它对重构代码所做的所有更改，以便他们能够很好地理解为什么它提出了这些更改。以下截图显示了
    Q 对其重构代码版本所做的更改列表。'
- en: '![Figure 12.8 – Amazon Q – refactored code change list](img/B21378_12_8.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – Amazon Q – 代码重构变更列表](img/B21378_12_8.jpg)'
- en: Figure 12.8 – Amazon Q – refactored code change list
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – Amazon Q – 代码重构变更列表
- en: The next option available is a lifesaver for many developers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个可用的选项对许多开发者来说都是救命稻草。
- en: Fixing code
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复代码
- en: Code and bugs go hand in hand in the field of software development, and developers
    often spend substantial time trying to identify and fix bugs in the code. Amazon
    Q Developer provides an option to fix bugs right within the IDE with just a click
    of a button.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发领域，代码和错误是相伴而生的，开发者经常花费大量时间试图识别和修复代码中的错误。Amazon Q 开发者提供了一个选项，只需点击一下按钮，就可以在
    IDE 中直接修复错误。
- en: In the code that we have used in this chapter so far, let’s introduce a small
    bug. In the code where you see `while index < length`, let’s change it to `while
    index > length` instead. Now, from the Q menu inside the IDE, if you click on
    the **Fix** option, as always, first, Q will show you the code snippet that you
    have asked to find and fix the bug from. The following screenshot shows our code
    with the error we introduced.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章迄今为止使用的代码中，让我们引入一个小错误。在看到 `while index < length` 的代码中，让我们将其更改为 `while index
    > length`。现在，如果在 IDE 内部的 Q 菜单中点击 **修复** 选项，就像往常一样，首先，Q 会显示你要求查找和修复错误的代码片段。以下截图显示了引入错误后的我们的代码。
- en: '![Figure 12.9 – Amazon Q – selected buggy code](img/B21378_12_9.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 – Amazon Q – 选定的错误代码](img/B21378_12_9.jpg)'
- en: Figure 12.9 – Amazon Q – selected buggy code
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – Amazon Q – 选定的错误代码
- en: Amazon Q will analyze the code and look for issues in the logic. Keep in mind
    that syntactical errors are easy to catch, as the IDE itself will highlight and
    prompt you to change the syntax. However, in our case, we introduced a logical
    error, which can be harder to catch, and you may have to go through the entire
    debugging process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q 将分析代码并查找逻辑问题。请记住，语法错误很容易捕捉，因为 IDE 本身会突出显示并提示你更改语法。然而，在我们的情况下，我们引入了一个逻辑错误，这可能更难捕捉，你可能需要经历整个调试过程。
- en: The following screenshot shows that Q caught the logical error and provides
    you with what might be the issue in the code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示 Q 捕获了逻辑错误，并为你提供了可能的问题所在。
- en: '![Figure 12.10 – Amazon Q – bug explained](img/B21378_12_10.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – Amazon Q – 错误解释](img/B21378_12_10.jpg)'
- en: Figure 12.10 – Amazon Q – bug explained
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – Amazon Q – 错误解释
- en: After it provides what the issue was, it goes ahead and provides the fixed code.
    The following screenshot shows the new code that Q provided.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在它提供了问题所在之后，它继续提供修复后的代码。以下截图显示了 Q 提供的新代码。
- en: '![Figure 12.11 – Amazon Q – fixed code](img/B21378_12_11.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – Amazon Q – 固定代码](img/B21378_12_11.jpg)'
- en: Figure 12.11 – Amazon Q – fixed code
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – Amazon Q – 固定代码
- en: 'There are a few things to observe in the fixed code: it also made some other
    recommended changes, as seen in the following screenshot.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在修复的代码中，还有一些需要注意的事项：它还做了一些其他推荐更改，如下面的截图所示。
- en: '![Figure 12.12 – Amazon Q – fixed code explanation](img/B21378_12_12.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.12 – Amazon Q – 固定代码解释](img/B21378_12_12.jpg)'
- en: Figure 12.12 – Amazon Q – fixed code explanation
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – Amazon Q – 固定代码解释
- en: 'Just a reminder again: as the developer, you should read through the change
    summary carefully and only accept the recommendations that align with what you
    are looking for. Not every change or recommendation may be appropriate for your
    case, so it is important to understand and acknowledge that Q is trying to make
    the developer’s life easier, and not necessarily replace the job of the developer.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒：作为开发者，你应该仔细阅读变更摘要，并且只接受与你所寻找的内容相符的建议。并非每个更改或建议都适合你的情况，因此了解并承认 Q 正在尝试使开发者的生活更轻松，而不是取代开发者的工作，这一点很重要。
- en: Optimizing code
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化代码
- en: The code written by developers solves a particular use case; it doesn’t mean
    that this code is the most optimal way to solve the problem. In other words, there
    might be other ways to code a particular logic that would enhance the performance
    when executed. To assist with this, there is also an **Optimize** option in the
    Q menu. So, after we accepted our fixed code from the previous section, we ran
    the **Optimize** option just to see whether there were any better ways to code
    the same problem.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者编写的代码解决了特定的用例；这并不意味着这是解决问题的最优化方式。换句话说，可能还有其他方式来编写特定的逻辑，这可以在执行时提高性能。为此，Q 菜单中还有一个**优化**选项。因此，在我们接受上一节中修复的代码后，我们运行了**优化**选项，看看是否有更好的方式来编写相同的问题。
- en: The following screenshot shows that Q found some tweaks that would enhance the
    performance of our code even further. Keep in mind that you may or may not want
    all recommendations provided.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示，Q 发现了一些可以进一步增强我们代码性能的调整。请注意，你可能希望或不希望接受所有建议。
- en: '![Figure 12.13 – Amazon Q – the code Optimize suggestion](img/B21378_12_13.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.13 – Amazon Q – 代码优化建议](img/B21378_12_13.jpg)'
- en: Figure 12.13 – Amazon Q – the code Optimize suggestion
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – Amazon Q – 代码优化建议
- en: Immediately after the explanation, Q will provide the new optimized code for
    you to review. The following screenshot shows the version Q provided for you to
    consider.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释之后，Q 将为你提供新的优化代码以供审查。以下截图显示了 Q 为你提供的版本供你考虑。
- en: '![Figure 12.14 – Amazon Q – optimized code](img/B21378_12_14.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.14 – Amazon Q – 优化代码](img/B21378_12_14.jpg)'
- en: Figure 12.14 – Amazon Q – optimized code
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – Amazon Q – 优化代码
- en: As always, it will then go ahead and explain why it made those code changes
    so that the developer gets a better handle instead of trying to decipher the new
    logic themselves.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，它将继续解释为什么做出这些代码更改，以便开发者能够更好地掌握，而不是试图自己解析新的逻辑。
- en: The following screenshot highlights the reasons for those optimizations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图突出了那些优化的原因。
- en: '![Figure 12.15 – Amazon Q – optimized code explanation](img/B21378_12_15.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15 – Amazon Q – 优化代码解释](img/B21378_12_15.jpg)'
- en: Figure 12.15 – Amazon Q – optimized code explanation
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – Amazon Q – 优化代码解释
- en: The final option available in the menu is **Send** **to prompt**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单中可用的最后一个选项是**发送到提示**。
- en: Sending code to prompt
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送代码到提示
- en: '`for` loop from our code and asked Q what it was doing, and Q was able to explain
    the logic. Of course, you can continue the chat process to something more meaningful.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环从我们的代码中询问 Q 它在做什么，Q 能够解释逻辑。当然，你可以继续聊天过程，让它更有意义。'
- en: '![Figure 12.16 – Amazon Q – Send to prompt](img/B21378_12_16.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.16 – Amazon Q – 发送到提示](img/B21378_12_16.jpg)'
- en: Figure 12.16 – Amazon Q – Send to prompt
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16 – Amazon Q – 发送到提示
- en: In this section, we were able to see how Amazon Q Developer is easily able to
    explain and update code right from inside the IDE. This feature goes a long way
    in helping developers save time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们能够看到 Amazon Q 开发者如何轻松地从 IDE 内部解释和更新代码。这个功能在帮助开发者节省时间方面发挥了重要作用。
- en: Before we wrap up this section, a new feature was recently released that makes
    it easy for developers to ask questions across the entire project in the IDE.
    Let’s quickly look at this workspace-related feature.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本节之前，最近发布了一个新功能，使开发者能够在 IDE 中轻松地就整个项目提出问题。让我们快速了解一下这个与工作空间相关的功能。
- en: Workspace context code awareness
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作空间上下文代码意识
- en: So far in this section, we have been working with features that helped us explain,
    optimize, refactor, and fix code within a particular file that was open in the
    IDE. However, with this new feature inside Amazon Q Developer, the chat in the
    IDE can answer questions related to the entire workspace, not just for the file
    that’s open in the IDE.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本节中，我们一直在使用有助于我们在 IDE 中打开的特定文件内解释、优化、重构和修复代码的功能。然而，在 Amazon Q 开发者内部的新功能中，IDE
    中的聊天可以回答与整个工作空间相关的问题，而不仅仅是 IDE 中打开的文件。
- en: Q Developer seamlessly ingests and indexes all code files, configurations, and
    project structures, equipping the chat with a thorough understanding of your entire
    application within the IDE. When you open the `@workspace` first, the index related
    to your project is created and locally stored. Initially, it may take up to 20
    minutes for the index to be created. After that, the index is incrementally updated
    as your workspace adds new files or updates existing code files.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Q 开发者无缝地摄取和索引所有代码文件、配置和项目结构，使聊天在 IDE 中对您的整个应用程序有彻底的了解。当您首先打开 `@workspace` 时，与项目相关的索引被创建并本地存储。最初，创建索引可能需要长达
    20 分钟。之后，索引会随着工作空间添加新文件或更新现有代码文件而增量更新。
- en: Before asking workspace-related questions in the chat, you also have the option
    to configure specific workspace settings in the IDE. The following figure highlights
    navigating to the Q Developer settings inside the VS Code IDE.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在聊天中询问工作空间相关的问题之前，您还可以在 IDE 中配置特定的工作空间设置。以下图示强调了导航到 VS Code IDE 中的 Q 开发者设置。
- en: '![Figure 12.17 – Amazon Q Developer settings inside the VS Code IDE](img/B21378_12_17.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.17 – Amazon Q 开发者 – VS Code IDE 中的设置](img/B21378_12_17.jpg)'
- en: Figure 12.17 – Amazon Q Developer settings inside the VS Code IDE
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17 – Amazon Q 开发者 – VS Code IDE 中的设置
- en: Once you open the settings, you can enable the workspace index flag, enable
    the GPU flag, and provide specific threads for indexing, as shown in the following
    figure.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开设置，您可以选择启用工作空间索引标志，启用 GPU 标志，并为索引提供特定的线程，如图所示。
- en: '![Figure 12.18 – Amazon Q Developer – workspace-related settings inside the
    VS Code IDE](img/B21378_12_18.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.18 – Amazon Q 开发者 – VS Code IDE 中的工作空间相关设置](img/B21378_12_18.jpg)'
- en: Figure 12.18 – Amazon Q Developer – workspace-related settings inside the VS
    Code IDE
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18 – Amazon Q 开发者 – VS Code IDE 中的工作空间相关设置
- en: Once the indexing is complete, you can start asking broader questions that span
    across the whole workspace. For the project example we have used in this section
    around Python fundamentals, we want to understand what else is inside this project.
    The following screenshot highlights the use of workspace-level chat.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦索引完成，您就可以开始提出跨越整个工作空间的更广泛的问题。对于本节中我们使用的关于 Python 基础的项目示例，我们想了解这个项目中还包含什么。以下屏幕截图突出显示了工作空间级别聊天的使用。
- en: '![Figure 12.19 – Amazon Q Developer – workspace-related question in the Chat
    tab](img/B21378_12_19.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.19 – Amazon Q 开发者 – 聊天标签中的工作空间相关问题](img/B21378_12_19.jpg)'
- en: Figure 12.19 – Amazon Q Developer – workspace-related question in the Chat tab
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – Amazon Q 开发者 – 聊天标签中的工作空间相关问题
- en: You can also ask specific questions about any implementation that may exist
    in any files across the entire project, and Q Developer will find it and explain
    in detail where the code exists and what it does. The following screenshot highlights
    one such specific question we asked at the workspace level, and Q Developer searched
    through the project and presented us with the information we were looking for.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以就整个项目中任何文件中可能存在的任何实现提出具体问题，Q 开发者会找到它并详细解释代码存在的地方以及它的功能。以下屏幕截图突出显示了我们在一个工作空间级别提出的一个此类特定问题，Q
    开发者搜索了项目并提供了我们所需的信息。
- en: '![Figure 12.20 – Amazon Q Developer – workspace-related specific question in
    the Chat tab](img/B21378_12_20.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.20 – Amazon Q 开发者 – 聊天标签中的工作空间相关特定问题](img/B21378_12_20.jpg)'
- en: Figure 12.20 – Amazon Q Developer – workspace-related specific question in the
    Chat tab
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.20 – Amazon Q 开发者 – 聊天标签中的工作空间相关特定问题
- en: This powerful feature can boost developer productivity by scanning the entire
    project and providing context-aware answers. You can imagine its usefulness in
    large projects that may contain hundreds of modules and thousands of files with
    code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个强大的功能可以通过扫描整个项目并提供上下文感知的答案来提高开发者的生产力。您可以想象它在包含数百个模块和数千个代码文件的大型项目中的有用性。
- en: Now, let’s move to another key feature of Amazon Q, where it can assist developers
    in transforming an entire project from one version of the code base to an updated
    version.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向 Amazon Q 的另一个关键特性，它可以帮助开发者将整个项目从代码库的一个版本转换到更新版本。
- en: Transforming code
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码转换
- en: 'Perhaps one of the most powerful features of Amazon Q Developer is its ability
    to transform your entire project into an upgraded version of the programming language
    used for building the project. The reason is simple. Imagine a large, important
    project in your organization that was built with an older version of the programming
    language. In software engineering, there is a popular saying: *If it isn’t broken,
    don’t fix it*. Many projects tend to prolong upgrading their projects as they’re
    working just fine for the intended business purpose.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Q开发者最强大的功能之一就是能够将您的整个项目转换成用于构建项目的编程语言的升级版本。原因很简单。想象一下，在您的组织中有一个使用较旧版本的编程语言构建的大型、重要项目。在软件工程中，有一句流行的话：*如果它没有坏，就别修它*。许多项目倾向于延长升级项目的时间，因为它们在预期的商业目的上运行得很好。
- en: However, as new versions of programming languages are released, support for
    older APIs starts becoming deprecated. Sometimes, organizations fall so far behind
    in upgrades that they have to spend a significant amount of time, money, and resources
    to create an intermediate upgrade path before they can reach the final version.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着编程语言新版本的发布，对旧API的支持开始变得过时。有时，组织在升级方面落后太多，以至于他们必须花费大量时间、金钱和资源来创建一个中间升级路径，才能达到最终版本。
- en: Now, imagine if instead of spending months to upgrade a project, you could do
    so in just minutes. This is the power of Amazon Q Developer, and we will walk
    you through the whole transformation process with an example in this section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一下，如果你不是花几个月时间来升级一个项目，而是只需几分钟就能完成。这就是亚马逊Q开发者的力量，我们将在本节中通过一个示例向您展示整个转换过程。
- en: Amazon Q Developer provides an agent for code transformation inside the IDE
    when you install the Q extension. The agent is called the **Amazon Q Developer
    Agent for code transformation**, and we will see it in action with the VS Code
    IDE.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装Q扩展时，亚马逊Q开发者提供了一种代码转换代理，在IDE内部使用。这个代理被称为**亚马逊Q代码转换开发代理**，我们将在VS Code IDE中看到它的实际应用。
- en: But first, let’s make sure we understand some of the prerequisites required
    for it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们确保我们理解了它所需的先决条件之一。
- en: Prerequisites for code transformation using Amazon Q
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用亚马逊Q进行代码转换的先决条件
- en: At the time of writing this book, only Java projects written in Java 8 or 11,
    built with Maven, are supported to be upgraded to Java 17\. However, we are at
    the very infancy stage of generative AI-powered assistants, so keep an eye out
    in the future as other programming languages, versions, and build types may also
    come along. AWS has also announced that .NET transformation is coming soon, which
    will enable the migration of such applications from Windows to Linux faster. The
    link in the *References* section captures this announcement.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，只有使用Maven构建的Java 8或11编写的Java项目支持升级到Java 17。然而，我们正处于生成式AI助手发展的初期阶段，所以请关注未来，因为其他编程语言、版本和构建类型也可能随之而来。AWS还宣布.NET转换即将推出，这将使从Windows迁移到Linux的速度更快。*参考文献*部分中的链接捕捉了这一公告。
- en: There are some other nuances on what the current version of the Amazon Q Developer
    Agent for code transformation can and cannot do. Since it’s an ever-evolving topic,
    instead of listing it here, I have added a link to the official documentation
    in the *References* section at the end. Always make sure you understand the prerequisites
    and other limitations of any service before using it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关于当前版本的亚马逊Q代码转换开发代理能做什么和不能做什么，还有一些其他的细微差别。由于这是一个不断发展的主题，而不是在这里列出，我在最后的*参考文献*部分添加了一个链接。在使用任何服务之前，请务必确保您理解其先决条件和其它限制。
- en: How code transformation using Amazon Q works
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊Q代码转换的工作原理
- en: The Amazon Q Developer Agent for code transformation upgrades the code language
    version of your project by generating a transformation plan. This plan includes
    new dependency versions, major code changes, and replacements for deprecated code.
    The process involves building your project locally to create a build artifact,
    which must be under 1 GB. Amazon Q then uses this artifact to generate a customized
    transformation plan in a secure environment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Q代码转换开发代理通过生成一个转换计划来升级您项目的代码语言版本。这个计划包括新的依赖版本、主要代码更改和已弃用代码的替换。这个过程涉及在本地构建您的项目以创建一个构建工件，该工件必须小于1
    GB。然后亚马逊Q使用这个工件在安全环境中生成一个定制的转换计划。
- en: The transformation process involves upgrading popular libraries and frameworks
    to versions compatible with Java 17, updating deprecated code components, and
    iteratively fixing errors by running existing unit tests. After transformation,
    Amazon Q provides a summary detailing the changes made, the status of the final
    build, and any issues encountered.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 转换过程包括将流行的库和框架升级到与 Java 17 兼容的版本，更新已弃用的代码组件，并通过运行现有单元测试迭代修复错误。转换后，Amazon Q 提供了一份总结，详细说明了所做的更改、最终构建的状态以及遇到的任何问题。
- en: You can review a file difference to see the proposed changes before accepting
    them. The transformed code remains available for up to 24 hours after the transformation
    completes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在接受之前，您可以通过查看文件差异来查看建议的更改。转换后的代码在转换完成后最多可用 24 小时。
- en: Now, let’s see this Amazon Q’s code transformation magic in action.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Amazon Q 的代码转换魔法是如何发挥作用的。
- en: Code transformation example
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码转换示例
- en: 'Let’s pick a sample public project hosted on GitHub. The project can be found
    using the following link: [https://github.com/aws-samples/qct-sample-java-8-app](https://github.com/aws-samples/qct-sample-java-8-app).
    This project is built with Java 8 and meets all the prerequisites for transforming
    it to Java 17 using Amazon Q Developer.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择一个托管在 GitHub 上的示例公共项目。您可以使用以下链接找到该项目：[https://github.com/aws-samples/qct-sample-java-8-app](https://github.com/aws-samples/qct-sample-java-8-app)。该项目是用
    Java 8 构建的，并满足使用 Amazon Q 开发者将其转换为 Java 17 的所有先决条件。
- en: The first thing we will do is use a supported IDE. In my case, I am using VS
    Code, to clone this repository to my local folder. If you plan to try this feature
    on your project, it will also be a great learning curve for you.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将使用受支持的 IDE。在我的情况下，我使用 VS Code 将此存储库克隆到我的本地文件夹。如果您计划在您的项目上尝试此功能，这也会是一个很好的学习曲线。
- en: This particular project contains a Maven wrapper (`mvnw` for macOS or `mvnw.cmd`
    for Windows). In this case, Amazon Q will use this wrapper to proceed with the
    transformation process without having to worry about other Maven dependencies.
    However, if you have a Java project with Maven build, make sure your `pom.xml`
    file is available in the root folder of the project and all your `.java` files
    are present in the project directory.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的项目包含一个 Maven 包装器（macOS 上的 `mvnw` 或 Windows 上的 `mvnw.cmd`）。在这种情况下，Amazon
    Q 将使用此包装器来继续转换过程，而无需担心其他 Maven 依赖项。但是，如果您有一个使用 Maven 构建的 Java 项目，请确保您的 `pom.xml`
    文件位于项目的根目录中，并且所有 `.java` 文件都位于项目目录中。
- en: Also, note that it is important that you have the correct version of Java and
    Maven on your local system where you are using the IDE. Many issues arise due
    to incorrect versions or incorrect paths of the required software. Since I am
    building this project on macOS, I exported the Java path directly into the `mvnw`
    wrapper file and tested the build process with the `clean install` command, as
    seen in the following screenshot.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，确保您在本地系统中使用的 IDE 中安装了正确的 Java 和 Maven 版本非常重要。由于许多问题是由不正确的版本或所需软件的不正确路径引起的。由于我在
    macOS 上构建此项目，我直接将 Java 路径导出到 `mvnw` 包装文件中，并使用 `clean install` 命令测试了构建过程，如以下截图所示。
- en: '![Figure 12.21 – Amazon Q code transformation – export Java path and run Maven
    build](img/B21378_12_21.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.21 – Amazon Q 代码转换 – 导出 Java 路径并运行 Maven 构建](img/B21378_12_21.jpg)'
- en: Figure 12.21 – Amazon Q code transformation – export Java path and run Maven
    build
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.21 – Amazon Q 代码转换 – 导出 Java 路径并运行 Maven 构建
- en: Before we start the transformation, always ensure that you can build the existing
    project. The following screenshot shows that I was able to build this project
    successfully. In case of build errors, refer to the troubleshooting link provided
    in the *References* section, which lists common causes of failure and how to fix
    those issues.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始转换之前，始终确保您能够成功构建现有项目。以下截图显示我成功构建了此项目。如果出现构建错误，请参阅 *参考资料* 部分提供的故障排除链接，其中列出了常见的失败原因以及如何修复这些问题。
- en: '![Figure 12.22 – Amazon Q code transformation – build project](img/B21378_12_22.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.22 – Amazon Q 代码转换 – 构建项目](img/B21378_12_22.jpg)'
- en: Figure 12.22 – Amazon Q code transformation – build project
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.22 – Amazon Q 代码转换 – 构建项目
- en: 'After that, open the `/transform` so that you can select the project to transform.
    The following screenshot shows the **AMAZON Q: CHAT** option and the transform
    command highlighted by the red boxes.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '之后，打开 `/transform` 以便您可以选择要转换的项目。以下截图显示了**AMAZON Q: CHAT**选项以及由红色方框突出显示的转换命令。'
- en: '![Figure 12.23 – Amazon Q code transformation – transform](img/B21378_12_23.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图12.23 – 亚马逊Q代码转换 – 转换](img/B21378_12_23.jpg)'
- en: Figure 12.23 – Amazon Q code transformation – transform
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.23 – 亚马逊Q代码转换 – 转换
- en: In the next screen, it will ask you to select the project you want to transform,
    along with the source and target version of the code. The following screenshot
    shows the selections we made for our project.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一屏幕中，它将要求您选择要转换的项目，以及代码的源版本和目标版本。以下截图显示了我们对项目的选择。
- en: '![Figure 12.24 – Amazon Q code transformation – source and target version](img/B21378_12_24.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图12.24 – 亚马逊Q代码转换 – 源代码和目标版本](img/B21378_12_24.jpg)'
- en: Figure 12.24 – Amazon Q code transformation – source and target version
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.24 – 亚马逊Q代码转换 – 源代码和目标版本
- en: Once you hit the **Confirm** button, it will start to analyze the project, as
    seen in the following screenshot.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击**确认**按钮，它将开始分析项目，如下面的截图所示。
- en: '![Figure 12.25 – Amazon Q code transformation – analysis stage](img/B21378_12_25.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图12.25 – 亚马逊Q代码转换 – 分析阶段](img/B21378_12_25.jpg)'
- en: Figure 12.25 – Amazon Q code transformation – analysis stage
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.25 – 亚马逊Q代码转换 – 分析阶段
- en: If you observe the instructions in the window, it tells you that you can monitor
    the progress in the **TRANSFORMATION HUB** panel. The hub panel can be opened
    depending on which IDE you are using. For VS Code, it was one of the options alongside
    the other output windows at the bottom panel.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看窗口中的说明，它告诉您可以在**转换中心**面板中监控进度。根据您使用的IDE，可以打开中心面板。对于VS Code，它是在底部面板的其他输出窗口之一。
- en: The following screenshot shows the progress of the transformation analysis as
    done by the Amazon Q Developer Agent for code transformation.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了亚马逊Q开发者代理进行代码转换时的转换分析进度。
- en: '![Figure 12.26 – Amazon Q code transformation – monitor progress in TRANSFORMATION
    HUB panel](img/B21378_12_26.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图12.26 – 亚马逊Q代码转换 – 在转换中心面板中监控进度](img/B21378_12_26.jpg)'
- en: Figure 12.26 – Amazon Q code transformation – monitor progress in TRANSFORMATION
    HUB panel
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.26 – 亚马逊Q代码转换 – 在转换中心面板中监控进度
- en: Once the analysis is over, the Hub will show you the completion status and will
    also allow you to download the proposed changes in the project for you to upgrade
    the project from Java 8 to 17\. The following screenshot highlights this step.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦分析完成，中心将显示完成状态，并允许您下载项目中的建议更改，以便将项目从Java 8升级到17。以下截图突出了此步骤。
- en: '![Figure 12.27 – Amazon Q code transformation – proposed change complete](img/B21378_12_27.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图12.27 – 亚马逊Q代码转换 – 建议更改完成](img/B21378_12_27.jpg)'
- en: Figure 12.27 – Amazon Q code transformation – proposed change complete
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.27 – 亚马逊Q代码转换 – 建议更改完成
- en: When you hit the **Download Proposed Changes** button, Amazon Q will summarize
    its entire findings and present them in a plan. The preview summary of the plan
    will be opened in the main window for you to review. Firstly, it will present
    you with some statistics of its findings, such as lines of code in the project,
    number of files changed, dependencies, and so forth. It will also provide you
    with a nice table of contents so that you can navigate through the whole plan
    systematically. This aspect of Q is highlighted in the following screenshot.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击**下载建议更改**按钮时，亚马逊Q将总结其所有发现，并以计划的形式呈现。计划的预览摘要将在主窗口中打开供您审查。首先，它将向您展示其发现的一些统计数据，例如项目中的代码行数、更改的文件数、依赖关系等。它还将提供一个很好的目录表，以便您可以系统地浏览整个计划。以下截图突出了Q的这个方面。
- en: '![Figure 12.28 – Amazon Q code transformation – first page of the transformation
    plan summary](img/B21378_12_28.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图12.28 – 亚马逊Q代码转换 – 转换计划摘要的第一页](img/B21378_12_28.jpg)'
- en: Figure 12.28 – Amazon Q code transformation – first page of the transformation
    plan summary
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.28 – 亚马逊Q代码转换 – 转换计划摘要的第一页
- en: After the summary, you can first check out the build log summary, where a link
    to the log file is also provided so that you can look at the entire log of what
    the agent did to come to the transformation proposal. This aspect is highlighted
    in the following screenshot.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在摘要之后，您可以先查看构建日志摘要，其中还提供了一个到日志文件的链接，以便您可以查看代理为提出转换建议所做的一切的完整日志。以下截图突出了这个方面。
- en: '![Figure 12.29 – Amazon Q code transformation – the transformation plan build
    log summary](img/B21378_12_29.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图12.29 – 亚马逊Q代码转换 – 转换计划构建日志摘要](img/B21378_12_29.jpg)'
- en: Figure 12.29 – Amazon Q code transformation – the transformation plan build
    log summary
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.29 – 亚马逊Q代码转换 – 转换计划构建日志摘要
- en: If you scroll down this report further, the next thing you will find is a list
    of all the planned dependencies, as well as other dependencies. It will show what
    action it will take on those dependencies and what version it will be updated
    to. Developers can attest to the fact that solving all the build dependencies
    can be frustrating. However, Q was able to handle all this by itself.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您继续滚动此报告，您将找到所有计划依赖项的列表，以及其他依赖项。它将显示它将对这些依赖项采取什么操作以及将更新到哪个版本。开发者可以证实解决所有构建依赖项可能会令人沮丧。然而，Q能够自行处理所有这些。
- en: The following screenshot highlights this aspect of Q where all the dependencies
    changes for our project are laid out.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图突出了Q的这一方面，其中列出了我们项目的所有依赖关系更改。
- en: '![Figure 12.30 – Amazon Q code transformation – transformation plan dependency
    changes](img/B21378_12_30.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图12.30 – 亚马逊Q代码转换 – 转换计划依赖关系更改](img/B21378_12_30.jpg)'
- en: Figure 12.30 – Amazon Q code transformation – transformation plan dependency
    changes
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.30 – 亚马逊Q代码转换 – 转换计划依赖关系更改
- en: Finally, this plan will list all the files where changes will be made and a
    link is provided so that you can quickly visualize those proposed changes. Also,
    of course, Amazon Q is kind enough to propose the next steps.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，此计划将列出所有将进行更改的文件，并提供链接以便您可以快速可视化这些拟议的更改。当然，亚马逊Q也足够友好地提出了下一步操作。
- en: The following screenshot highlights this aspect of the plan.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图突出了计划的这一方面。
- en: '![Figure 12.31 – Amazon Q code transformation – changed files and next steps](img/B21378_12_31.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图12.31 – 亚马逊Q代码转换 – 更改的文件和下一步操作](img/B21378_12_31.jpg)'
- en: Figure 12.31 – Amazon Q code transformation – changed files and next steps
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.31 – 亚马逊Q代码转换 – 更改的文件和下一步操作
- en: Also, you can see in the IDE, at the bottom panel, a list of proposed file changes
    is presented with an **Accept** or **Reject** button. The following screenshot
    shows this panel in action.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以在IDE的底部面板中看到拟议的文件更改列表，包括**接受**或**拒绝**按钮。下面的截图显示了该面板的实际操作。
- en: '![Figure 12.32 – Amazon Q code transformation – accept or reject the changes](img/B21378_12_32.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图12.32 – 亚马逊Q代码转换 – 接受或拒绝更改](img/B21378_12_32.jpg)'
- en: Figure 12.32 – Amazon Q code transformation – accept or reject the changes
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.32 – 亚马逊Q代码转换 – 接受或拒绝更改
- en: It’s always a good practice to open each file and understand what changes are
    being proposed by Amazon Q. To make it easy to visually compare, when you open
    a changed file from the proposal panel, the IDE will display the old and the new
    files side by side for you to compare the changes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 总是打开每个文件并理解亚马逊Q提出的更改是一个好习惯。为了便于视觉比较，当您从提案面板打开更改的文件时，IDE将显示旧文件和新文件并排，以便您比较更改。
- en: The following screenshot highlights this important aspect of the transformation
    process. You can easily spot all the code changes Q is proposing to upgrade this
    project to Java 17.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图突出了转换过程中的这个重要方面。您可以轻松地找到Q提议升级此项目到Java 17的所有代码更改。
- en: '![Figure 12.33 – Amazon Q code transformation – compare code changes](img/B21378_12_33.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图12.33 – 亚马逊Q代码转换 – 比较代码更改](img/B21378_12_33.jpg)'
- en: Figure 12.33 – Amazon Q code transformation – compare code changes
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.33 – 亚马逊Q代码转换 – 比较代码更改
- en: If you open the Maven `pom.xml` file, you will observe how Q was able to update
    the dependencies too, including the Maven and Java versions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开Maven `pom.xml` 文件，您将观察到Q如何更新依赖项，包括Maven和Java版本。
- en: '![Figure 12.34 – Amazon Q code transformation – compare dependency changes](img/B21378_12_34.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图12.34 – 亚马逊Q代码转换 – 比较依赖关系更改](img/B21378_12_34.jpg)'
- en: Figure 12.34 – Amazon Q code transformation – compare dependency changes
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.34 – 亚马逊Q代码转换 – 比较依赖关系更改
- en: Once you accept all the changes, you can then finally commit the changes and
    eventually push the project back to the main branch of the repository. This is
    highlighted in the following screenshot.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您接受所有更改，您就可以最终提交更改并将项目推回存储库的主分支。以下截图进行了突出显示。
- en: '![Figure 12.35 – Amazon Q code transformation – commit changes](img/B21378_12_35.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图12.35 – 亚马逊Q代码转换 – 提交更改](img/B21378_12_35.jpg)'
- en: Figure 12.35 – Amazon Q code transformation – commit changes
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.35 – 亚马逊Q代码转换 – 提交更改
- en: We have concluded the transformation feature of Amazon Q Developer and hope
    you now have a good sense of how much of a productivity boost it would provide
    for transforming bigger and more complex projects in your organization.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了Amazon Q开发者的转换功能，希望你现在对它能为你的组织在转换更大、更复杂的项目时提供的生产力提升有了一个良好的认识。
- en: 'Let’s move on to another key component of Amazon Q Developer that we had planned
    to cover in this chapter: feature development.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论Amazon Q开发者本章计划涵盖的另一个关键组件：功能开发。
- en: Developing code features
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发代码功能
- en: The Amazon Q Developer Agent assists in developing code features or making changes
    to projects within your IDE. By describing the feature you want to create, Amazon
    Q uses the context of your current project to generate an implementation plan
    and the necessary code. It supports building AWS projects or your own applications.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q开发者代理协助在IDE内开发代码功能或对项目进行更改。通过描述你想要创建的功能，Amazon Q使用你当前项目的上下文来生成实现计划和必要的代码。它支持构建AWS项目或你自己的应用程序。
- en: 'To begin, open a new or existing project in your IDE. Amazon Q uses all files
    in your workspace root for context. Enter `/dev` in the **AMAZON Q: CHAT** panel
    to open a new **Chat** tab, where you can interact with Amazon Q to generate an
    implementation plan and new code for your feature. The best way to understand
    this would be with an example.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '要开始，在你的IDE中打开一个新项目或现有项目。Amazon Q使用你工作区根目录下的所有文件作为上下文。在**AMAZON Q: CHAT**面板中输入`/dev`以打开一个新的**聊天**标签页，在那里你可以与Amazon
    Q互动以生成实现计划和为新功能生成新代码。理解这一点最好的方式是通过一个示例。'
- en: In our previous section, we transformed the Java-8-based project into Java 17
    code. Now, let’s assume that the organization has decided that it will be a good
    time to add some new functionality to the project along with the upgrade rollout.
    To get this done, you can follow the old-fashioned full SDLC process or just call
    Amazon Q Developer to assist.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的章节中，我们将基于Java 8的项目转换成了Java 17代码。现在，假设组织决定在升级推广的同时添加一些新功能到项目中是一个好时机。为了完成这项工作，你可以遵循传统的完整SDLC流程，或者直接调用Amazon
    Q开发者来协助。
- en: So, let’s assume that in the Java project that we earlier upgraded in the transformation
    section, we have been asked to add a new OAuth-based authentication page, where
    the users will be presented with a new logic page and the authentication will
    be triggered at the backend using a REST API endpoint. The objective of this functionality
    is to implement a token-based authentication module for extra protection.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们假设在转换部分中我们之前升级的Java项目中，我们被要求添加一个基于OAuth的新认证页面，用户将看到一个新逻辑页面，认证将在后端通过REST
    API端点触发。这个功能的目标是实现一个基于令牌的认证模块以提供额外的保护。
- en: Developers truly know the difficulty of this task; firstly, they must understand
    all the places in the project that will be affected by this new functionality.
    After that, they need to know all the new logic they have to create and how to
    lay it all out in the project. It takes a lengthy but systematic approach to get
    all the pieces in place before something can be coded.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者真正了解这项任务的难度；首先，他们必须理解项目中所有会受到这个新功能影响的地方。之后，他们需要知道他们必须创建的所有新逻辑以及如何在项目中布局这些逻辑。在开始编码之前，需要采取一个漫长但系统的方法来确保所有部件都到位。
- en: With Amazon Q Developer, an agent is available when you install the Q extension
    in the IDE. The agent is called the **Amazon Q Developer Agent for software development**.
    The sole purpose of the agent is to take on this tedious task of adding a new
    feature in the project, in minutes instead of weeks and months.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Amazon Q开发者，当你将Q扩展安装到IDE中时，就会有一个代理可用。这个代理被称为**Amazon Q开发者软件开发代理**。代理的唯一目的是承担在项目中添加新功能的繁琐任务，只需几分钟而不是几周或几个月。
- en: Let’s look at how we can get started with this task in the VS Code IDE with
    the same Java project we used for code transformation. Hit the `/dev` followed
    by the description of the feature you want to build.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在VS Code IDE中使用我们之前用于代码转换的相同Java项目开始这项任务。输入`/dev`后跟你想构建的功能的描述。
- en: The following screenshot highlights this aspect.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图突出了这一方面。
- en: '![Figure 12.36 – Amazon Q feature development – ask Q what you want to build](img/B21378_12_36.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图12.36 – Amazon Q功能开发 – 询问Q你想构建什么](img/B21378_12_36.jpg)'
- en: Figure 12.36 – Amazon Q feature development – ask Q what you want to build
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.36 – Amazon Q功能开发 – 询问Q你想构建什么
- en: To maximize the benefits of Amazon Q feature development capabilities, some
    best practices need to be followed. Firstly, provide a detailed description of
    the new feature or code changes you want to implement, including specific objectives
    and outcomes. This helps Amazon Q generate a comprehensive implementation plan
    and the necessary code changes. Also, limit your feature to updates affecting
    no more than five files at a time. Requesting Amazon Q to handle larger changes
    might compromise the quality and manageability of the feature’s implementation.
    If the file difference shows modifications to numerous files, consider narrowing
    the scope of your feature description.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大限度地发挥Amazon Q功能开发能力的好处，需要遵循一些最佳实践。首先，提供您想要实施的新功能或代码更改的详细描述，包括具体目标和结果。这有助于Amazon
    Q生成全面的实施计划和必要的代码更改。此外，将您的功能限制在每次更新不超过五个文件。请求Amazon Q处理更大的更改可能会影响功能实施的质量和管理性。如果文件差异显示对多个文件进行了修改，请考虑缩小功能描述的范围。
- en: Once you request what feature you want to develop, Q will create a very detailed
    plan that lays down all the steps, including files where the logic will be created,
    what the logic will do, what functions it will add, different imports it will
    perform, whether the class file will be new or a modification to an existing one,
    and will also provide test case generation.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您请求想要开发的功能，Q将创建一个非常详细的计划，列出所有步骤，包括逻辑将被创建的文件、逻辑将执行的操作、将添加的功能、不同的导入操作、类文件将是新的还是对现有文件的修改，并且还将提供测试用例生成。
- en: The next few series of screenshots will show you the plan the Amazon Q Developer
    Agent for software development came up with. The following screenshot highlights
    the creation of a new class file for implementing the user model along with the
    authentication service.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几组截图将向您展示Amazon Q软件开发代理提出的计划。以下截图突出了创建一个新的类文件以实现用户模型和认证服务。
- en: '![Figure 12.37 – Amazon Q feature development – plan Steps 1 and 2](img/B21378_12_37.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图12.37 – Amazon Q功能开发 – 计划步骤1和2](img/B21378_12_37.jpg)'
- en: Figure 12.37 – Amazon Q feature development – plan Steps 1 and 2
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.37 – Amazon Q功能开发 – 计划步骤1和2
- en: The next screenshot shows the plan for adding a new authentication controller
    file. Additionally, a new file is added to update the security configuration.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了添加新的认证控制器文件的计划。此外，还添加了一个新文件以更新安全配置。
- en: '![Figure 12.38 – Amazon Q feature development – plan Steps 3 and 4](img/B21378_12_38.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图12.38 – Amazon Q功能开发 – 计划步骤3和4](img/B21378_12_38.jpg)'
- en: Figure 12.38 – Amazon Q feature development – plan Steps 3 and 4
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.38 – Amazon Q功能开发 – 计划步骤3和4
- en: The next screenshot shows that the existing download controller file is updated
    to enable the authentication mechanism. It also indicates that the agent will
    create unit test cases for the new logic.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示现有的下载控制器文件被更新以启用认证机制。它还表明代理将为新的逻辑创建单元测试用例。
- en: '![Figure 12.39 – Amazon Q feature development – plan Steps 5 and 6](img/B21378_12_39.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图12.39 – Amazon Q功能开发 – 计划步骤5和6](img/B21378_12_39.jpg)'
- en: Figure 12.39 – Amazon Q feature development – plan Steps 5 and 6
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.39 – Amazon Q功能开发 – 计划步骤5和6
- en: Finally, the following screenshot shows the last step of the plan, where it
    even proposes to add integration test logic. As you have seen from the plan, Q
    does a thorough job of following the best practices of building software. Instead
    of developers spending weeks to come up with this plan, Q did it in minutes.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下截图显示了计划的最后一步，甚至建议添加集成测试逻辑。正如您从计划中看到的，Q在遵循构建软件的最佳实践方面做了彻底的工作。开发者不用花费数周时间来制定这个计划，Q只需几分钟就能完成。
- en: '![Figure 12.40 – Amazon Q feature development – plan Steps 7 and 8](img/B21378_12_40.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图12.40 – Amazon Q功能开发 – 计划步骤7和8](img/B21378_12_40.jpg)'
- en: Figure 12.40 – Amazon Q feature development – plan Steps 7 and 8
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.40 – Amazon Q功能开发 – 计划步骤7和8
- en: The creation of the plan is cool by itself, but what’s even cooler is the fact
    that the Q agent can auto-generate all this logic by itself and place it in the
    project for you to review and accept. The following screenshot shows the **Generate
    code** button offered at the end of the plan in the **AMAZON Q:** **CHAT** window.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 计划的创建本身就很有趣，但更酷的是，Q代理可以自己自动生成所有这些逻辑并将其放置在项目中供您审查和接受。以下截图显示了在**AMAZON Q:** **CHAT**窗口计划末尾提供的**生成代码**按钮。
- en: '![Figure 12.41 – Amazon Q feature development – option to generate code](img/B21378_12_41.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.41 – Amazon Q 功能开发 – 生成代码的选项](img/B21378_12_41.jpg)'
- en: Figure 12.41 – Amazon Q feature development – option to generate code
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.41 – Amazon Q 功能开发 – 生成代码的选项
- en: Once this button is clicked, Q will provide a summary of all the code changes
    in the respective files. The following screenshot highlights this aspect.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击此按钮，Q 将提供相应文件中所有代码更改的摘要。以下截图突出了这一方面。
- en: '![Figure 12.42 – Amazon Q feature development – summarize code changes](img/B21378_12_42.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.42 – Amazon Q 功能开发 – 汇总代码更改](img/B21378_12_42.jpg)'
- en: Figure 12.42 – Amazon Q feature development – summarize code changes
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.42 – Amazon Q 功能开发 – 汇总代码更改
- en: At the end of this summary, you will be presented with an **Insert code** button,
    which will instruct Q to place all this code back in the project. The following
    screenshot shows the **Insert code** option in the **AMAZON Q:** **CHAT** window.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本总结的末尾，你将看到一个**插入代码**按钮，它将指示 Q 将所有这些代码放回项目中。以下截图显示了**AMAZON Q:** **CHAT**窗口中的**插入代码**选项。
- en: '![Figure 12.43 – Amazon Q feature development – insert code changes](img/B21378_12_43.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.43 – Amazon Q 功能开发 – 插入代码更改](img/B21378_12_43.jpg)'
- en: Figure 12.43 – Amazon Q feature development – insert code changes
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.43 – Amazon Q 功能开发 – 插入代码更改
- en: Once the code is inserted into the project, you can see a list of all the changes
    ready for review and commit, as shown in the following screenshot.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码被插入到项目中，你将看到一个所有更改的列表，准备进行审查和提交，如下面的截图所示。
- en: '![Figure 12.44 – Amazon Q feature development – commit code changes](img/B21378_12_44.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.44 – Amazon Q 功能开发 – 提交代码更改](img/B21378_12_44.jpg)'
- en: Figure 12.44 – Amazon Q feature development – commit code changes
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.44 – Amazon Q 功能开发 – 提交代码更改
- en: However, as always, it’s good practice to review the changes before committing.
    When you open the code files, the IDE will present the before and after changes
    side by side, allowing you to compare them. Some files were added as brand new
    in the process, so the agent generated the entire class file based solely on the
    feature development request.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，就像往常一样，在提交更改之前进行审查是个好习惯。当你打开代码文件时，IDE 会将更改前后的内容并排显示，让你可以比较它们。在这个过程中，一些文件作为全新的文件被添加，因此代理根据功能开发请求生成了整个类文件。
- en: The following screenshot shows a side-by-side comparison of the code before
    and after the change. This gives you a chance to review it before committing and
    pushing it to the code repository.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了更改前后代码的并排比较。这给你一个在提交并将其推送到代码仓库之前审查的机会。
- en: '![Figure 12.45 – Amazon Q feature development – compare code changes](img/B21378_12_45.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.45 – Amazon Q 功能开发 – 比较代码更改](img/B21378_12_45.jpg)'
- en: Figure 12.45 – Amazon Q feature development – compare code changes
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.45 – Amazon Q 功能开发 – 比较代码更改
- en: This was just one example of how the feature development component of Amazon
    Q Developer can speed up developer productivity. Give it a try to generate many
    more features for your real-world projects in your organization.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是 Amazon Q 开发者功能开发组件如何提高开发者生产效率的一个例子。尝试一下，为您的组织中的实际项目生成更多功能。
- en: With this, we have come to the end of this important chapter.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们来到了这个重要章节的结尾。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we covered three important components of Amazon Q Developer:
    code explanation and update, code transformation, and feature development.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Amazon Q 开发者的重要三个组成部分：代码解释和更新、代码转换和功能开发。
- en: The code explanation feature allows developers to understand the logic in the
    code by providing explanations. This makes it easier for them to comprehend the
    code and make necessary updates. Additionally, this feature enables developers
    to refactor, optimize, and fix code directly within the IDE. We also looked at
    how Amazon Q Developer can answer questions for the whole project with the workspace
    context-aware feature.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 代码解释功能允许开发者通过提供解释来理解代码中的逻辑。这使得他们更容易理解代码并进行必要的更新。此外，此功能还允许开发者在 IDE 中直接重构、优化和修复代码。我们还探讨了
    Amazon Q 开发者如何利用工作区上下文感知功能为整个项目回答问题。
- en: Next, we explored the code transformation feature, which enables Q to upgrade
    Java projects from version 8 or 11 to version 17 in a matter of minutes. The agent
    responsible for transformation analysis generates a detailed transformation plan
    and implements the necessary changes for developers to accept and commit in the
    code repository.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探讨了代码转换功能，该功能使 Q 能够在几分钟内将 Java 项目从版本 8 或 11 升级到版本 17。负责转换分析的代理生成详细的转换计划，并在代码库中实施必要的更改，以便开发者接受和提交。
- en: Finally, we examined the feature development component of Q, where developers
    can request Q to build new features in the project by describing the use case
    in the chat. The software development agent in Q analyzes and devises a detailed
    plan for updating the existing project to incorporate the new feature.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查了 Q 的功能开发组件，开发者可以通过在聊天中描述用例来请求 Q 在项目中构建新功能。Q 中的软件开发代理分析并制定详细计划，以更新现有项目以包含新功能。
- en: 'All these features of Amazon Q Developer tremendously boost the productivity
    of developers. In the next chapter, we will explore another crucial aspect of
    software development: code scanning for identifying and fixing security vulnerabilities
    in the code.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些 Amazon Q 开发者功能极大地提高了开发者的生产力。在下一章中，我们将探讨软件开发的一个关键方面：代码扫描，用于识别和修复代码中的安全漏洞。
- en: References
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Amazon Q Developer Agent for code transformation: [https://aws.amazon.com/q/developer/code-transformation/](https://aws.amazon.com/q/developer/code-transformation/)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q 开发者代理用于代码转换：[https://aws.amazon.com/q/developer/code-transformation/](https://aws.amazon.com/q/developer/code-transformation/)
- en: 'Upgrading language versions with the Amazon Q Developer Agent for code transformation:
    [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-transformation.html)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q 开发者代理进行代码转换升级语言版本：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-transformation.html)
- en: 'Troubleshooting issues with the Amazon Q Developer Agent for code transformation:
    [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/troubleshooting-code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/troubleshooting-code-transformation.html)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决 Amazon Q 开发者代理代码转换问题：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/troubleshooting-code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/troubleshooting-code-transformation.html)
