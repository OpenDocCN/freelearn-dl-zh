- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simplifying Code Explanation, Optimization, Transformation, and Feature Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Explaining and updating code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing code features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In *Part 2*, we dived deep into how **Amazon Q Developer** can help developers
    be more efficient by assisting them in auto-generating code based on different
    prompting techniques. In this chapter, we will expand on some other key features
    of Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will explore how Q can provide developers with explanations of existing
    code, even without them having prior knowledge of the code they are trying to
    understand. Next, we will examine how Q can help transform an existing code base
    from a lower version of the programming language to the desired upper version.
    In our case, we will focus on how Q transforms Java code. Finally, we will explore
    how Q can assist in developing new code features or making changes to existing
    projects. This is also a powerful component where you instruct Q in plain language
    about the feature you want the code to build, and Q will draw a plan first and
    then help generate code based on that plan.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s dive straight into these three features of Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining and updating code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Amazon Q Developer, you can effortlessly update your code base by requesting
    changes to a particular line or block of code. The tool will then generate new
    code that reflects the desired modifications, which you can seamlessly incorporate
    into the original file. This seamless integration ensures a smooth and efficient
    coding experience, allowing you to focus on writing high-quality code without
    the hassle of manually making intricate changes.
  prefs: []
  type: TYPE_NORMAL
- en: To better understand this feature, let’s examine some existing code to witness
    the power of Amazon Q Developer firsthand. I’ve selected one of the Python code
    bases for learning from a public GitHub repository at [https://github.com/jassics/learning-python](https://github.com/jassics/learning-python).
    Feel free to experiment with your own code if you have any. This repository contains
    simple Python examples that will make it easier to grasp the capabilities of Amazon
    Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this feature, we will use the VS Code IDE to clone this Git repository
    into the IDE workspace. We’ve opened the `two_sum_index.py` file in VS Code. The
    following screenshot displays the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Sample Python code opened in VS Code IDE](img/B21378_12_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Sample Python code opened in VS Code IDE
  prefs: []
  type: TYPE_NORMAL
- en: We assume that you have followed the instructions provided in [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022)
    for installing the Amazon Q extension for VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: To begin using the **Explain** feature, you can select either the full code
    or just a portion of it, depending on what you would like to understand and change.
    The following screenshot shows the different options available for the selected
    code using Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Amazon Q – The Explain feature menu](img/B21378_12_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Amazon Q – The Explain feature menu
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through each of them and see what exactly they do.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you click the **Explain** option with the code selected, Amazon Q will
    try to summarize for you what the logic does in the code. This can be extremely
    handy for developers when opening a large code file developed by someone else,
    especially if there is not a lot of documentation related to the code. So, in
    essence, with just a click of a button, Q instantly explains to you what the code
    is all about.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you hit the **Explain** option, Q will first show you the section
    of the code you selected for explanation, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Amazon Q – the Explain feature menu](img/B21378_12_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Amazon Q – the Explain feature menu
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down a bit in the **AMAZON Q: CHAT** window, the first thing
    you will notice is that Q tries to provide you with a gist of what the logic is
    all about. In this case, it identified that this logic solves the two-sum problem.
    The following screenshot shows the initial explanation.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Amazon Q – A high-level explanation of the code](img/B21378_12_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – Amazon Q – A high-level explanation of the code
  prefs: []
  type: TYPE_NORMAL
- en: It then provides a further breakdown of the code, explaining every major element
    of the code, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Amazon Q – breakdown of the code](img/B21378_12_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – Amazon Q – breakdown of the code
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it also provides the key aspects of the solution, as seen in the following
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Amazon Q – key aspects of the solution](img/B21378_12_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Amazon Q – key aspects of the solution
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the task of understanding someone else’s code, which sometimes
    can take days, if not weeks, was accomplished in a matter of seconds by Amazon
    Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many developers, in the rush of meeting deadlines, do not follow all the best
    practices of coding—especially code readability and efficiency. The **Refactor**
    option in Amazon Q accomplishes exactly that immediately, without the developer
    having to put much effort into it.
  prefs: []
  type: TYPE_NORMAL
- en: When we select the same code that we picked in the *explain* section for refactoring,
    this is the response we receive in the **AMAZON Q:** **CHAT** window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Amazon Q – refactored code](img/B21378_12_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Amazon Q – refactored code
  prefs: []
  type: TYPE_NORMAL
- en: It will provide you with a version of the refactored code. Keep in mind it may
    not always meet the standards you have set or what your organization has set.
    It is important for the developer to either accept the whole refactored code as
    is or pick and choose what they feel sets a high bar for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down the **AMAZON Q: CHAT** window, to make the developer’s life
    easier, it also provides in detail all the changes it made in the refactored code
    so that they get a good handle on why it proposed those changes. The following
    screenshot shows the list of changes Q made for its version of the refactored
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Amazon Q – refactored code change list](img/B21378_12_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Amazon Q – refactored code change list
  prefs: []
  type: TYPE_NORMAL
- en: The next option available is a lifesaver for many developers.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code and bugs go hand in hand in the field of software development, and developers
    often spend substantial time trying to identify and fix bugs in the code. Amazon
    Q Developer provides an option to fix bugs right within the IDE with just a click
    of a button.
  prefs: []
  type: TYPE_NORMAL
- en: In the code that we have used in this chapter so far, let’s introduce a small
    bug. In the code where you see `while index < length`, let’s change it to `while
    index > length` instead. Now, from the Q menu inside the IDE, if you click on
    the **Fix** option, as always, first, Q will show you the code snippet that you
    have asked to find and fix the bug from. The following screenshot shows our code
    with the error we introduced.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Amazon Q – selected buggy code](img/B21378_12_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – Amazon Q – selected buggy code
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q will analyze the code and look for issues in the logic. Keep in mind
    that syntactical errors are easy to catch, as the IDE itself will highlight and
    prompt you to change the syntax. However, in our case, we introduced a logical
    error, which can be harder to catch, and you may have to go through the entire
    debugging process.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows that Q caught the logical error and provides
    you with what might be the issue in the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – Amazon Q – bug explained](img/B21378_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – Amazon Q – bug explained
  prefs: []
  type: TYPE_NORMAL
- en: After it provides what the issue was, it goes ahead and provides the fixed code.
    The following screenshot shows the new code that Q provided.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – Amazon Q – fixed code](img/B21378_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – Amazon Q – fixed code
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things to observe in the fixed code: it also made some other
    recommended changes, as seen in the following screenshot.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Amazon Q – fixed code explanation](img/B21378_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Amazon Q – fixed code explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Just a reminder again: as the developer, you should read through the change
    summary carefully and only accept the recommendations that align with what you
    are looking for. Not every change or recommendation may be appropriate for your
    case, so it is important to understand and acknowledge that Q is trying to make
    the developer’s life easier, and not necessarily replace the job of the developer.'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code written by developers solves a particular use case; it doesn’t mean
    that this code is the most optimal way to solve the problem. In other words, there
    might be other ways to code a particular logic that would enhance the performance
    when executed. To assist with this, there is also an **Optimize** option in the
    Q menu. So, after we accepted our fixed code from the previous section, we ran
    the **Optimize** option just to see whether there were any better ways to code
    the same problem.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows that Q found some tweaks that would enhance the
    performance of our code even further. Keep in mind that you may or may not want
    all recommendations provided.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Amazon Q – the code Optimize suggestion](img/B21378_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Amazon Q – the code Optimize suggestion
  prefs: []
  type: TYPE_NORMAL
- en: Immediately after the explanation, Q will provide the new optimized code for
    you to review. The following screenshot shows the version Q provided for you to
    consider.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Amazon Q – optimized code](img/B21378_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Amazon Q – optimized code
  prefs: []
  type: TYPE_NORMAL
- en: As always, it will then go ahead and explain why it made those code changes
    so that the developer gets a better handle instead of trying to decipher the new
    logic themselves.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights the reasons for those optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Amazon Q – optimized code explanation](img/B21378_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Amazon Q – optimized code explanation
  prefs: []
  type: TYPE_NORMAL
- en: The final option available in the menu is **Send** **to prompt**.
  prefs: []
  type: TYPE_NORMAL
- en: Sending code to prompt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`for` loop from our code and asked Q what it was doing, and Q was able to explain
    the logic. Of course, you can continue the chat process to something more meaningful.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16 – Amazon Q – Send to prompt](img/B21378_12_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Amazon Q – Send to prompt
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we were able to see how Amazon Q Developer is easily able to
    explain and update code right from inside the IDE. This feature goes a long way
    in helping developers save time.
  prefs: []
  type: TYPE_NORMAL
- en: Before we wrap up this section, a new feature was recently released that makes
    it easy for developers to ask questions across the entire project in the IDE.
    Let’s quickly look at this workspace-related feature.
  prefs: []
  type: TYPE_NORMAL
- en: Workspace context code awareness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far in this section, we have been working with features that helped us explain,
    optimize, refactor, and fix code within a particular file that was open in the
    IDE. However, with this new feature inside Amazon Q Developer, the chat in the
    IDE can answer questions related to the entire workspace, not just for the file
    that’s open in the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Q Developer seamlessly ingests and indexes all code files, configurations, and
    project structures, equipping the chat with a thorough understanding of your entire
    application within the IDE. When you open the `@workspace` first, the index related
    to your project is created and locally stored. Initially, it may take up to 20
    minutes for the index to be created. After that, the index is incrementally updated
    as your workspace adds new files or updates existing code files.
  prefs: []
  type: TYPE_NORMAL
- en: Before asking workspace-related questions in the chat, you also have the option
    to configure specific workspace settings in the IDE. The following figure highlights
    navigating to the Q Developer settings inside the VS Code IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.17 – Amazon Q Developer settings inside the VS Code IDE](img/B21378_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – Amazon Q Developer settings inside the VS Code IDE
  prefs: []
  type: TYPE_NORMAL
- en: Once you open the settings, you can enable the workspace index flag, enable
    the GPU flag, and provide specific threads for indexing, as shown in the following
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18 – Amazon Q Developer – workspace-related settings inside the
    VS Code IDE](img/B21378_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – Amazon Q Developer – workspace-related settings inside the VS
    Code IDE
  prefs: []
  type: TYPE_NORMAL
- en: Once the indexing is complete, you can start asking broader questions that span
    across the whole workspace. For the project example we have used in this section
    around Python fundamentals, we want to understand what else is inside this project.
    The following screenshot highlights the use of workspace-level chat.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.19 – Amazon Q Developer – workspace-related question in the Chat
    tab](img/B21378_12_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.19 – Amazon Q Developer – workspace-related question in the Chat tab
  prefs: []
  type: TYPE_NORMAL
- en: You can also ask specific questions about any implementation that may exist
    in any files across the entire project, and Q Developer will find it and explain
    in detail where the code exists and what it does. The following screenshot highlights
    one such specific question we asked at the workspace level, and Q Developer searched
    through the project and presented us with the information we were looking for.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.20 – Amazon Q Developer – workspace-related specific question in
    the Chat tab](img/B21378_12_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.20 – Amazon Q Developer – workspace-related specific question in the
    Chat tab
  prefs: []
  type: TYPE_NORMAL
- en: This powerful feature can boost developer productivity by scanning the entire
    project and providing context-aware answers. You can imagine its usefulness in
    large projects that may contain hundreds of modules and thousands of files with
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move to another key feature of Amazon Q, where it can assist developers
    in transforming an entire project from one version of the code base to an updated
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perhaps one of the most powerful features of Amazon Q Developer is its ability
    to transform your entire project into an upgraded version of the programming language
    used for building the project. The reason is simple. Imagine a large, important
    project in your organization that was built with an older version of the programming
    language. In software engineering, there is a popular saying: *If it isn’t broken,
    don’t fix it*. Many projects tend to prolong upgrading their projects as they’re
    working just fine for the intended business purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: However, as new versions of programming languages are released, support for
    older APIs starts becoming deprecated. Sometimes, organizations fall so far behind
    in upgrades that they have to spend a significant amount of time, money, and resources
    to create an intermediate upgrade path before they can reach the final version.
  prefs: []
  type: TYPE_NORMAL
- en: Now, imagine if instead of spending months to upgrade a project, you could do
    so in just minutes. This is the power of Amazon Q Developer, and we will walk
    you through the whole transformation process with an example in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer provides an agent for code transformation inside the IDE
    when you install the Q extension. The agent is called the **Amazon Q Developer
    Agent for code transformation**, and we will see it in action with the VS Code
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: But first, let’s make sure we understand some of the prerequisites required
    for it.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for code transformation using Amazon Q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing this book, only Java projects written in Java 8 or 11,
    built with Maven, are supported to be upgraded to Java 17\. However, we are at
    the very infancy stage of generative AI-powered assistants, so keep an eye out
    in the future as other programming languages, versions, and build types may also
    come along. AWS has also announced that .NET transformation is coming soon, which
    will enable the migration of such applications from Windows to Linux faster. The
    link in the *References* section captures this announcement.
  prefs: []
  type: TYPE_NORMAL
- en: There are some other nuances on what the current version of the Amazon Q Developer
    Agent for code transformation can and cannot do. Since it’s an ever-evolving topic,
    instead of listing it here, I have added a link to the official documentation
    in the *References* section at the end. Always make sure you understand the prerequisites
    and other limitations of any service before using it.
  prefs: []
  type: TYPE_NORMAL
- en: How code transformation using Amazon Q works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Amazon Q Developer Agent for code transformation upgrades the code language
    version of your project by generating a transformation plan. This plan includes
    new dependency versions, major code changes, and replacements for deprecated code.
    The process involves building your project locally to create a build artifact,
    which must be under 1 GB. Amazon Q then uses this artifact to generate a customized
    transformation plan in a secure environment.
  prefs: []
  type: TYPE_NORMAL
- en: The transformation process involves upgrading popular libraries and frameworks
    to versions compatible with Java 17, updating deprecated code components, and
    iteratively fixing errors by running existing unit tests. After transformation,
    Amazon Q provides a summary detailing the changes made, the status of the final
    build, and any issues encountered.
  prefs: []
  type: TYPE_NORMAL
- en: You can review a file difference to see the proposed changes before accepting
    them. The transformed code remains available for up to 24 hours after the transformation
    completes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s see this Amazon Q’s code transformation magic in action.
  prefs: []
  type: TYPE_NORMAL
- en: Code transformation example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s pick a sample public project hosted on GitHub. The project can be found
    using the following link: [https://github.com/aws-samples/qct-sample-java-8-app](https://github.com/aws-samples/qct-sample-java-8-app).
    This project is built with Java 8 and meets all the prerequisites for transforming
    it to Java 17 using Amazon Q Developer.'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will do is use a supported IDE. In my case, I am using VS
    Code, to clone this repository to my local folder. If you plan to try this feature
    on your project, it will also be a great learning curve for you.
  prefs: []
  type: TYPE_NORMAL
- en: This particular project contains a Maven wrapper (`mvnw` for macOS or `mvnw.cmd`
    for Windows). In this case, Amazon Q will use this wrapper to proceed with the
    transformation process without having to worry about other Maven dependencies.
    However, if you have a Java project with Maven build, make sure your `pom.xml`
    file is available in the root folder of the project and all your `.java` files
    are present in the project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that it is important that you have the correct version of Java and
    Maven on your local system where you are using the IDE. Many issues arise due
    to incorrect versions or incorrect paths of the required software. Since I am
    building this project on macOS, I exported the Java path directly into the `mvnw`
    wrapper file and tested the build process with the `clean install` command, as
    seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.21 – Amazon Q code transformation – export Java path and run Maven
    build](img/B21378_12_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.21 – Amazon Q code transformation – export Java path and run Maven
    build
  prefs: []
  type: TYPE_NORMAL
- en: Before we start the transformation, always ensure that you can build the existing
    project. The following screenshot shows that I was able to build this project
    successfully. In case of build errors, refer to the troubleshooting link provided
    in the *References* section, which lists common causes of failure and how to fix
    those issues.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.22 – Amazon Q code transformation – build project](img/B21378_12_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.22 – Amazon Q code transformation – build project
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, open the `/transform` so that you can select the project to transform.
    The following screenshot shows the **AMAZON Q: CHAT** option and the transform
    command highlighted by the red boxes.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23 – Amazon Q code transformation – transform](img/B21378_12_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.23 – Amazon Q code transformation – transform
  prefs: []
  type: TYPE_NORMAL
- en: In the next screen, it will ask you to select the project you want to transform,
    along with the source and target version of the code. The following screenshot
    shows the selections we made for our project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.24 – Amazon Q code transformation – source and target version](img/B21378_12_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.24 – Amazon Q code transformation – source and target version
  prefs: []
  type: TYPE_NORMAL
- en: Once you hit the **Confirm** button, it will start to analyze the project, as
    seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.25 – Amazon Q code transformation – analysis stage](img/B21378_12_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.25 – Amazon Q code transformation – analysis stage
  prefs: []
  type: TYPE_NORMAL
- en: If you observe the instructions in the window, it tells you that you can monitor
    the progress in the **TRANSFORMATION HUB** panel. The hub panel can be opened
    depending on which IDE you are using. For VS Code, it was one of the options alongside
    the other output windows at the bottom panel.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the progress of the transformation analysis as
    done by the Amazon Q Developer Agent for code transformation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.26 – Amazon Q code transformation – monitor progress in TRANSFORMATION
    HUB panel](img/B21378_12_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.26 – Amazon Q code transformation – monitor progress in TRANSFORMATION
    HUB panel
  prefs: []
  type: TYPE_NORMAL
- en: Once the analysis is over, the Hub will show you the completion status and will
    also allow you to download the proposed changes in the project for you to upgrade
    the project from Java 8 to 17\. The following screenshot highlights this step.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.27 – Amazon Q code transformation – proposed change complete](img/B21378_12_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.27 – Amazon Q code transformation – proposed change complete
  prefs: []
  type: TYPE_NORMAL
- en: When you hit the **Download Proposed Changes** button, Amazon Q will summarize
    its entire findings and present them in a plan. The preview summary of the plan
    will be opened in the main window for you to review. Firstly, it will present
    you with some statistics of its findings, such as lines of code in the project,
    number of files changed, dependencies, and so forth. It will also provide you
    with a nice table of contents so that you can navigate through the whole plan
    systematically. This aspect of Q is highlighted in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.28 – Amazon Q code transformation – first page of the transformation
    plan summary](img/B21378_12_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.28 – Amazon Q code transformation – first page of the transformation
    plan summary
  prefs: []
  type: TYPE_NORMAL
- en: After the summary, you can first check out the build log summary, where a link
    to the log file is also provided so that you can look at the entire log of what
    the agent did to come to the transformation proposal. This aspect is highlighted
    in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.29 – Amazon Q code transformation – the transformation plan build
    log summary](img/B21378_12_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.29 – Amazon Q code transformation – the transformation plan build
    log summary
  prefs: []
  type: TYPE_NORMAL
- en: If you scroll down this report further, the next thing you will find is a list
    of all the planned dependencies, as well as other dependencies. It will show what
    action it will take on those dependencies and what version it will be updated
    to. Developers can attest to the fact that solving all the build dependencies
    can be frustrating. However, Q was able to handle all this by itself.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights this aspect of Q where all the dependencies
    changes for our project are laid out.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.30 – Amazon Q code transformation – transformation plan dependency
    changes](img/B21378_12_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.30 – Amazon Q code transformation – transformation plan dependency
    changes
  prefs: []
  type: TYPE_NORMAL
- en: Finally, this plan will list all the files where changes will be made and a
    link is provided so that you can quickly visualize those proposed changes. Also,
    of course, Amazon Q is kind enough to propose the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights this aspect of the plan.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.31 – Amazon Q code transformation – changed files and next steps](img/B21378_12_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.31 – Amazon Q code transformation – changed files and next steps
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can see in the IDE, at the bottom panel, a list of proposed file changes
    is presented with an **Accept** or **Reject** button. The following screenshot
    shows this panel in action.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.32 – Amazon Q code transformation – accept or reject the changes](img/B21378_12_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.32 – Amazon Q code transformation – accept or reject the changes
  prefs: []
  type: TYPE_NORMAL
- en: It’s always a good practice to open each file and understand what changes are
    being proposed by Amazon Q. To make it easy to visually compare, when you open
    a changed file from the proposal panel, the IDE will display the old and the new
    files side by side for you to compare the changes.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights this important aspect of the transformation
    process. You can easily spot all the code changes Q is proposing to upgrade this
    project to Java 17.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.33 – Amazon Q code transformation – compare code changes](img/B21378_12_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.33 – Amazon Q code transformation – compare code changes
  prefs: []
  type: TYPE_NORMAL
- en: If you open the Maven `pom.xml` file, you will observe how Q was able to update
    the dependencies too, including the Maven and Java versions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.34 – Amazon Q code transformation – compare dependency changes](img/B21378_12_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.34 – Amazon Q code transformation – compare dependency changes
  prefs: []
  type: TYPE_NORMAL
- en: Once you accept all the changes, you can then finally commit the changes and
    eventually push the project back to the main branch of the repository. This is
    highlighted in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.35 – Amazon Q code transformation – commit changes](img/B21378_12_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.35 – Amazon Q code transformation – commit changes
  prefs: []
  type: TYPE_NORMAL
- en: We have concluded the transformation feature of Amazon Q Developer and hope
    you now have a good sense of how much of a productivity boost it would provide
    for transforming bigger and more complex projects in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move on to another key component of Amazon Q Developer that we had planned
    to cover in this chapter: feature development.'
  prefs: []
  type: TYPE_NORMAL
- en: Developing code features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Amazon Q Developer Agent assists in developing code features or making changes
    to projects within your IDE. By describing the feature you want to create, Amazon
    Q uses the context of your current project to generate an implementation plan
    and the necessary code. It supports building AWS projects or your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, open a new or existing project in your IDE. Amazon Q uses all files
    in your workspace root for context. Enter `/dev` in the **AMAZON Q: CHAT** panel
    to open a new **Chat** tab, where you can interact with Amazon Q to generate an
    implementation plan and new code for your feature. The best way to understand
    this would be with an example.'
  prefs: []
  type: TYPE_NORMAL
- en: In our previous section, we transformed the Java-8-based project into Java 17
    code. Now, let’s assume that the organization has decided that it will be a good
    time to add some new functionality to the project along with the upgrade rollout.
    To get this done, you can follow the old-fashioned full SDLC process or just call
    Amazon Q Developer to assist.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s assume that in the Java project that we earlier upgraded in the transformation
    section, we have been asked to add a new OAuth-based authentication page, where
    the users will be presented with a new logic page and the authentication will
    be triggered at the backend using a REST API endpoint. The objective of this functionality
    is to implement a token-based authentication module for extra protection.
  prefs: []
  type: TYPE_NORMAL
- en: Developers truly know the difficulty of this task; firstly, they must understand
    all the places in the project that will be affected by this new functionality.
    After that, they need to know all the new logic they have to create and how to
    lay it all out in the project. It takes a lengthy but systematic approach to get
    all the pieces in place before something can be coded.
  prefs: []
  type: TYPE_NORMAL
- en: With Amazon Q Developer, an agent is available when you install the Q extension
    in the IDE. The agent is called the **Amazon Q Developer Agent for software development**.
    The sole purpose of the agent is to take on this tedious task of adding a new
    feature in the project, in minutes instead of weeks and months.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how we can get started with this task in the VS Code IDE with
    the same Java project we used for code transformation. Hit the `/dev` followed
    by the description of the feature you want to build.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot highlights this aspect.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.36 – Amazon Q feature development – ask Q what you want to build](img/B21378_12_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.36 – Amazon Q feature development – ask Q what you want to build
  prefs: []
  type: TYPE_NORMAL
- en: To maximize the benefits of Amazon Q feature development capabilities, some
    best practices need to be followed. Firstly, provide a detailed description of
    the new feature or code changes you want to implement, including specific objectives
    and outcomes. This helps Amazon Q generate a comprehensive implementation plan
    and the necessary code changes. Also, limit your feature to updates affecting
    no more than five files at a time. Requesting Amazon Q to handle larger changes
    might compromise the quality and manageability of the feature’s implementation.
    If the file difference shows modifications to numerous files, consider narrowing
    the scope of your feature description.
  prefs: []
  type: TYPE_NORMAL
- en: Once you request what feature you want to develop, Q will create a very detailed
    plan that lays down all the steps, including files where the logic will be created,
    what the logic will do, what functions it will add, different imports it will
    perform, whether the class file will be new or a modification to an existing one,
    and will also provide test case generation.
  prefs: []
  type: TYPE_NORMAL
- en: The next few series of screenshots will show you the plan the Amazon Q Developer
    Agent for software development came up with. The following screenshot highlights
    the creation of a new class file for implementing the user model along with the
    authentication service.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.37 – Amazon Q feature development – plan Steps 1 and 2](img/B21378_12_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.37 – Amazon Q feature development – plan Steps 1 and 2
  prefs: []
  type: TYPE_NORMAL
- en: The next screenshot shows the plan for adding a new authentication controller
    file. Additionally, a new file is added to update the security configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.38 – Amazon Q feature development – plan Steps 3 and 4](img/B21378_12_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.38 – Amazon Q feature development – plan Steps 3 and 4
  prefs: []
  type: TYPE_NORMAL
- en: The next screenshot shows that the existing download controller file is updated
    to enable the authentication mechanism. It also indicates that the agent will
    create unit test cases for the new logic.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.39 – Amazon Q feature development – plan Steps 5 and 6](img/B21378_12_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.39 – Amazon Q feature development – plan Steps 5 and 6
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the following screenshot shows the last step of the plan, where it
    even proposes to add integration test logic. As you have seen from the plan, Q
    does a thorough job of following the best practices of building software. Instead
    of developers spending weeks to come up with this plan, Q did it in minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.40 – Amazon Q feature development – plan Steps 7 and 8](img/B21378_12_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.40 – Amazon Q feature development – plan Steps 7 and 8
  prefs: []
  type: TYPE_NORMAL
- en: The creation of the plan is cool by itself, but what’s even cooler is the fact
    that the Q agent can auto-generate all this logic by itself and place it in the
    project for you to review and accept. The following screenshot shows the **Generate
    code** button offered at the end of the plan in the **AMAZON Q:** **CHAT** window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.41 – Amazon Q feature development – option to generate code](img/B21378_12_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.41 – Amazon Q feature development – option to generate code
  prefs: []
  type: TYPE_NORMAL
- en: Once this button is clicked, Q will provide a summary of all the code changes
    in the respective files. The following screenshot highlights this aspect.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.42 – Amazon Q feature development – summarize code changes](img/B21378_12_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.42 – Amazon Q feature development – summarize code changes
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this summary, you will be presented with an **Insert code** button,
    which will instruct Q to place all this code back in the project. The following
    screenshot shows the **Insert code** option in the **AMAZON Q:** **CHAT** window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.43 – Amazon Q feature development – insert code changes](img/B21378_12_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.43 – Amazon Q feature development – insert code changes
  prefs: []
  type: TYPE_NORMAL
- en: Once the code is inserted into the project, you can see a list of all the changes
    ready for review and commit, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.44 – Amazon Q feature development – commit code changes](img/B21378_12_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.44 – Amazon Q feature development – commit code changes
  prefs: []
  type: TYPE_NORMAL
- en: However, as always, it’s good practice to review the changes before committing.
    When you open the code files, the IDE will present the before and after changes
    side by side, allowing you to compare them. Some files were added as brand new
    in the process, so the agent generated the entire class file based solely on the
    feature development request.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows a side-by-side comparison of the code before
    and after the change. This gives you a chance to review it before committing and
    pushing it to the code repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.45 – Amazon Q feature development – compare code changes](img/B21378_12_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.45 – Amazon Q feature development – compare code changes
  prefs: []
  type: TYPE_NORMAL
- en: This was just one example of how the feature development component of Amazon
    Q Developer can speed up developer productivity. Give it a try to generate many
    more features for your real-world projects in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have come to the end of this important chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered three important components of Amazon Q Developer:
    code explanation and update, code transformation, and feature development.'
  prefs: []
  type: TYPE_NORMAL
- en: The code explanation feature allows developers to understand the logic in the
    code by providing explanations. This makes it easier for them to comprehend the
    code and make necessary updates. Additionally, this feature enables developers
    to refactor, optimize, and fix code directly within the IDE. We also looked at
    how Amazon Q Developer can answer questions for the whole project with the workspace
    context-aware feature.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explored the code transformation feature, which enables Q to upgrade
    Java projects from version 8 or 11 to version 17 in a matter of minutes. The agent
    responsible for transformation analysis generates a detailed transformation plan
    and implements the necessary changes for developers to accept and commit in the
    code repository.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we examined the feature development component of Q, where developers
    can request Q to build new features in the project by describing the use case
    in the chat. The software development agent in Q analyzes and devises a detailed
    plan for updating the existing project to incorporate the new feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these features of Amazon Q Developer tremendously boost the productivity
    of developers. In the next chapter, we will explore another crucial aspect of
    software development: code scanning for identifying and fixing security vulnerabilities
    in the code.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon Q Developer Agent for code transformation: [https://aws.amazon.com/q/developer/code-transformation/](https://aws.amazon.com/q/developer/code-transformation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upgrading language versions with the Amazon Q Developer Agent for code transformation:
    [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-transformation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Troubleshooting issues with the Amazon Q Developer Agent for code transformation:
    [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/troubleshooting-code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/troubleshooting-code-transformation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
