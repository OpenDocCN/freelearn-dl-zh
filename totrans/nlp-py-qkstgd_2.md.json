["```py\nurl = 'http://www.gutenberg.org/ebooks/1661.txt.utf-8'\nfile_name = 'sherlock.txt'\n```", "```py\nimport urllib.request\n# Download the file from `url` and save it locally under `file_name`:\nwith urllib.request.urlopen(url) as response:\n    with open(file_name, 'wb') as out_file:\n        data = response.read() # a `bytes` object\n        out_file.write(data)\n```", "```py\n!ls *.txt\n```", "```py\nsherlock.txt\n```", "```py\n!sed -i 1,33d sherlock.txt\n```", "```py\n!head -5 sherlock.txt\n```", "```py\nTHE ADVENTURES OF SHERLOCK HOLMES\n\n   by\n\n   SIR ARTHUR CONAN DOYLE\n```", "```py\n# let's get this data into Python\n\ntext = open(file_name, 'r', encoding='utf-8').read() # note that I add an encoding='utf-8' parameter to preserve information\n\nprint(text[:5])\n```", "```py\nTHE A\n```", "```py\nprint(f'The file is loaded as datatype: {type(text)} and has {len(text)} characters in it')\n```", "```py\nThe file is loaded as datatype: <class 'str'> and has 581204 characters in it\n```", "```py\nfrom collections import Counter\nCounter('Möbelstück')\n\nIn Python 2: Counter({'\\xc3': 2, 'b': 1, 'e': 1, 'c': 1, 'k': 1, 'M': 1, 'l': 1, 's': 1, 't': 1, '\\xb6': 1, '\\xbc': 1})\nIn Python 3: Counter({'M': 1, 'ö': 1, 'b': 1, 'e': 1, 'l': 1, 's': 1, 't': 1, 'ü': 1, 'c': 1, 'k': 1})\n```", "```py\nunique_chars = list(set(text))\nunique_chars.sort()\nprint(unique_chars)\nprint(f'There are {len(unique_chars)} unique characters, including both ASCII and Unicode character')\n```", "```py\n   ['\\n', ' ', '!', '\"', '$', '%', '&', \"'\", '(', ')', '*', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'à', 'â', 'è', 'é']\n   There are 85 unique characters, including both ASCII and Unicode character\n```", "```py\nInput: Friends, Romans, Countrymen, lend me your ears;\nOutput:       .\n```", "```py\nwords = text.split()\nprint(len(words))\n\n   107431\n```", "```py\nprint(words[90:200])  #start with the first chapter, ignoring the index for now\n   ['To', 'Sherlock', 'Holmes', 'she', 'is', 'always', 'THE', 'woman.', 'I', 'have', 'seldom', 'heard', 'him', 'mention', 'her', 'under', 'any', 'other', 'name.', 'In', 'his', 'eyes', 'she', 'eclipses', 'and', 'predominates', 'the', 'whole', 'of', 'her', 'sex.', 'It', 'was', 'not', 'that', 'he', 'felt', 'any', 'emotion', 'akin', 'to', 'love', 'for', 'Irene', 'Adler.', 'All', 'emotions,', 'and', 'that', 'one', 'particularly,', 'were', 'abhorrent', 'to', 'his', 'cold,', 'precise', 'but', 'admirably', 'balanced', 'mind.', 'He', 'was,', 'I', 'take', 'it,', 'the', 'most', 'perfect', 'reasoning', 'and', 'observing', 'machine', 'that', 'the', 'world', 'has', 'seen,', 'but', 'as', 'a', 'lover', 'he', 'would', 'have', 'placed', 'himself', 'in', 'a', 'false', 'position.', 'He', 'never', 'spoke', 'of', 'the', 'softer', 'passions,', 'save', 'with', 'a', 'gibe', 'and', 'a', 'sneer.', 'They', 'were', 'admirable', 'things', 'for']\n```", "```py\n'red-headed woman on the street'.split()\n```", "```py\n['red-headed', 'woman', 'on', 'the', 'street']\n```", "```py\nimport re\nre.split('\\W+', 'Words, words, words.')\n> ['Words', 'words', 'words', '']\n```", "```py\nwords_alphanumeric = re.split('\\W+', text)\nprint(len(words_alphanumeric), len(words))\n```", "```py\nprint(words_alphanumeric[90:200])\n```", "```py\n   ['BOHEMIA', 'I', 'To', 'Sherlock', 'Holmes', 'she', 'is', 'always', 'THE', 'woman', 'I', 'have', 'seldom', 'heard', 'him', 'mention', 'her', 'under', 'any', 'other', 'name', 'In', 'his', 'eyes', 'she', 'eclipses', 'and', 'predominates', 'the', 'whole', 'of', 'her', 'sex', 'It', 'was', 'not', 'that', 'he', 'felt', 'any', 'emotion', 'akin', 'to', 'love', 'for', 'Irene', 'Adler', 'All', 'emotions', 'and', 'that', 'one', 'particularly', 'were', 'abhorrent', 'to', 'his', 'cold', 'precise', 'but', 'admirably', 'balanced', 'mind', 'He', 'was', 'I', 'take', 'it', 'the', 'most', 'perfect', 'reasoning', 'and', 'observing', 'machine', 'that', 'the', 'world', 'has', 'seen', 'but', 'as', 'a', 'lover', 'he', 'would', 'have', 'placed', 'himself', 'in', 'a', 'false', 'position', 'He', 'never', 'spoke', 'of', 'the', 'softer', 'passions', 'save', 'with', 'a', 'gibe', 'and', 'a', 'sneer', 'They', 'were', 'admirable']\n```", "```py\nwords_break = re.split('\\W+', \"Isn't he coming home for dinner with the red-headed girl?\")\nprint(words_break)\n```", "```py\n ['Isn', 't', 'he', 'coming', 'home', 'for', 'dinner', 'with', 'the', 'red', 'headed', 'girl', '']\n```", "```py\n %%time\n import spacy\n # python -m spacy download en\n # uncomment above line to download the model\n nlp = spacy.load('en')\n```", "```py\ndoc = nlp(text)\n```", "```py\nprint(list(doc)[150:200])\n```", "```py\n[whole, of, her, sex, ., It, was, not, that, he, felt,\n   , any, emotion, akin, to, love, for, Irene, Adler, ., All, emotions, ,, and, that,\n   , one, particularly, ,, were, abhorrent, to, his, cold, ,, precise, but,\n   , admirably, balanced, mind, ., He, was, ,, I, take, it, ,]\n```", "```py\nwords = nlp(\"Isn't he coming home for dinner with the red-headed girl?\")\nprint([token for token in words])\n> [Is, n't, he, coming, home, for, dinner, with, the, red, -, headed, girl, ?]\n```", "```py\nsentences = list(doc.sents)\nprint(sentences[14:18])\n```", "```py\n [she is always THE woman., I have seldom heard\n   him mention her under any other name., In his eyes she eclipse\n   and predominates the whole of her sex., It was not that he felt\n   any emotion akin to love for Irene Adler.]\n```", "```py\nsentence_example = \"the AI/AGI uprising cannot happen without the progress of NLP\"\n[(token, token.is_stop, token.is_punct) for token in nlp(sentence_example)]\n\n   [(the, True, False),\n    (AI, False, False),\n    (/, False, True),\n    (AGI, True, False),\n    (uprising, False, False),\n    (can, True, False),\n    (not, True, False),\n    (happen, False, False),\n    (without, True, False),\n    (the, True, False),\n    (progress, False, False),\n    (of, True, False),\n    (NLP, True, False)]\n```", "```py\nfor token in doc[:5]:\n   print(token, token.is_stop, token.is_punct)   \n\nOutput:\n   THE False False\n   ADVENTURES False False\n   OF False False\n   SHERLOCK False False\n   HOLMES False False\n```", "```py\ntext_lower = text.lower()  # native python function\ndoc_lower = nlp(text_lower)\nfor token in doc_lower[:5]:\n   print(token, token.is_stop)\n\nOutput:\n the True\n adventures False\n of True\n sherlock False\n holmes False\n```", "```py\nfrom spacy.lang.en.stop_words import STOP_WORDS\nf'spaCy has a dictionary of {len(list(STOP_WORDS))} stop words'\n\n   'spaCy has a dictionary of 305 stop words'\n```", "```py\ndomain_stop_words = [\"NLP\", \"Processing\", \"AGI\"]\nfor word in domain_stop_words:\n   STOP_WORDS.add(word)\n```", "```py\n[(token, token.is_stop, token.is_punct) for token in nlp(sentence_example)]\n```", "```py\n    [(the, True, False),\n    (AI, False, False),\n    (/, False, True),\n    (AGI, True, False),\n    (uprising, False, False),\n    (can, True, False),\n    (not, True, False),\n    (happen, False, False),\n    (without, True, False),\n    (the, True, False),\n    (progress, False, False),\n    (of, True, False),\n    (NLP, True, False)]\n```", "```py\n[str(token) for token in nlp(sentence_example) if not token.is_stop and not token.is_punct]\n ['AI', 'uprising', 'happen', 'progress']\n```", "```py\n[str(token) for token in nlp(sentence_example) if not token.is_stop]\n['AI'], '/', 'uprising', 'happen', 'progress']\n```", "```py\nlemma_sentence_example = \"Their Apples & Banana fruit salads are amazing. Would you like meeting me at the cafe?\"\n[(token, token.lemma_, token.lemma, token.pos_ ) for token in nlp(lemma_sentence_example)]\n\nPrinting this gives the following output: \n\n   [(Their, '-PRON-', 561228191312463089, 'ADJ'),\n    (Apples, 'apples', 14374618037326464786, 'PROPN'),\n    (&, '&', 15473034735919704609, 'CCONJ'),\n    (Banana, 'banana', 2525716904149915114, 'PROPN'),\n    (fruit, 'fruit', 17674554054627885835, 'NOUN'),\n    (salads, 'salad', 16382906660984395826, 'NOUN'),\n    (are, 'be', 10382539506755952630, 'VERB'),\n    (amazing, 'amazing', 12968186374132960503, 'ADJ'),\n    (., '.', 12646065887601541794, 'PUNCT'),\n    (Would, 'would', 6992604926141104606, 'VERB'),\n    (you, '-PRON-', 561228191312463089, 'PRON'),\n    (like, 'like', 18194338103975822726, 'VERB'),\n    (meeting, 'meet', 6880656908171229526, 'VERB'),\n    (me, '-PRON-', 561228191312463089, 'PRON'),\n    (at, 'at', 11667289587015813222, 'ADP'),\n    (the, 'the', 7425985699627899538, 'DET'),\n    (cafe, 'cafe', 10569699879655997926, 'NOUN'),\n    (?, '?', 8205403955989537350, 'PUNCT')]\n```", "```py\nimport sys\n\n!{sys.executable} -m pip install fuzzywuzzy\n# alternative for 4-10x faster computation: \n\n# !{sys.executable} -m pip install fuzzywuzzy[speedup]\n```", "```py\nfrom fuzzywuzzy import fuzz\n# Trying the ratio and partial_ratio \nfuzz.ratio(\"Electronic City Phase One\", \"Electronic City Phase One, Bangalore\")\n# 82\nfuzz.partial_ratio(\"Electronic City Phase One\", \"Electronic City Phase One, Bangalore\")\n# 100\n```", "```py\nfuzz.ratio('Narendra Modi', 'Narendra D. Modi')\n# 90\nfuzz.partial_ratio('Narendra Modi', 'Narendra D. Modi')\n# 77\n```", "```py\nfuzz.token_sort_ratio('Narendra Modi', 'Narendra D. Modi')\n# 93\nfuzz.token_set_ratio('Narendra Modi', 'Narendra D. Modi')\n# 100\n```", "```py\nfrom fuzzywuzzy import process\nquery = 'Gujrat'\n\nchoices = ['Gujarat', 'Gujjar', 'Gujarat Govt.']\n\n# Get a list of matches ordered by score, default limit to 5\nprint(process.extract(query, choices))\n# [('Gujarat', 92), ('Gujarat Govt.', 75), ('Gujjar', 67)]\n\n# If we want only the top one result to be # returned:\nprocess.extractOne(query, choices)\n# ('Gujarat', 92)\n```", "```py\nquery = 'Banglore'\nchoices = ['Bangalore', 'Bengaluru']\nprint(process.extract(query, choices))\n# [('Bangalore', 94), ('Bengaluru', 59)]\nprocess.extractOne(query, choices)\n# ('Bangalore', 94)\n```", "```py\nquery = 'chili'\nchoices = ['chilli', 'chilled', 'chilling']\nprint(process.extract(query, choices))\n# [('chilli', 91), ('chilling', 77), ('chilled', 67)]\nprocess.extractOne(query, choices)\n# ('chilli', 91)\n```", "```py\nimport sys\n# !{sys.executable} -m pip install jellyfish\n```", "```py\nimport jellyfish\n\ncorrect_example = ('Narendra Modi', 'Narendra Modi')\ndamodardas_example = ('Narendra Modi', 'Narendra D. Modi')\nmodi_typo_example = ('Narendra Modi', 'Narendar Modi')\ngujarat_typo_example = ('Gujarat', 'Gujrat')\n\nexamples = [correct_example, damodardas_example, modi_typo_example, gujarat_typo_example]\n```", "```py\ndef calculate_distance(function, examples=examples):\n    for ele in examples:\n        print(f'{ele}: {function(*ele)}')\n```", "```py\ncalculate_distance(jellyfish.levenshtein_distance) \n# ('Narendra Modi', 'Narendra Modi'): 0\n# ('Narendra Modi', 'Narendra D. Modi'): 3\n# ('Narendra Modi', 'Narendar Modi'): 2\n# ('Gujarat', 'Gujrat'): 1\n```", "```py\ncalculate_distance(jellyfish.damerau_levenshtein_distance)\n# ('Narendra Modi', 'Narendra Modi'): 0\n# ('Narendra Modi', 'Narendra D. Modi'): 3\n# ('Narendra Modi', 'Narendar Modi'): 1\n# ('Gujarat', 'Gujrat'): 1\n```", "```py\ncalculate_distance(jellyfish.hamming_distance)\n# ('Narendra Modi', 'Narendra Modi'): 0\n# ('Narendra Modi', 'Narendra D. Modi'): 7\n# ('Narendra Modi', 'Narendar Modi'): 2\n# ('Gujarat', 'Gujrat'): 4\n```", "```py\ncalculate_distance(jellyfish.jaro_distance)\n# ('Narendra Modi', 'Narendra Modi'): 1.0\n# ('Narendra Modi', 'Narendra D. Modi'): 0.9375\n# ('Narendra Modi', 'Narendar Modi'): 0.9743589743589745\n# ('Gujarat', 'Gujrat'): 0.8968253968253969\n```", "```py\ncalculate_distance(jellyfish.jaro_winkler)\n# ('Narendra Modi', 'Narendra Modi'): 1.0\n# ('Narendra Modi', 'Narendra D. Modi'): 0.9625\n# ('Narendra Modi', 'Narendar Modi'): 0.9846153846153847\n# ('Gujarat', 'Gujrat'): 0.9277777777777778\n```", "```py\njellyfish.soundex('Jellyfish')\n# 'J412'\n```", "```py\njellyfish.nysiis('Jellyfish')\n# 'JALYF'\n```", "```py\njellyfish.metaphone('Jellyfish')\n# 'JLFX'\n```", "```py\njellyfish.match_rating_codex('Jellyfish')\n# 'JLYFSH'\n```", "```py\nMetaphone + Levenshtein\n```", "```py\njellyfish.levenshtein_distance(jellyfish.metaphone('write'), jellyfish.metaphone('right'))# \n# 0\n```", "```py\nexamples+= [('write', 'right'), ('Mangalore', 'Bangalore'), ('Delhi', 'Dilli')] # adding a few examples to show how cool this is\n```", "```py\ndef calculate_phonetic_distance(phonetic_func, distance_func, examples=examples):\n    print(\"Word\\t\\tSound\\t\\tWord\\t\\t\\tSound\\t\\tPhonetic Distance\")\n    for ele in examples:\n        correct, typo = ele[0], ele[1]\n        phonetic_correct, phonetic_typo = phonetic_func(correct), phonetic_func(typo)\n        phonetic_distance = distance_func(phonetic_correct, phonetic_typo)\n        print(f'{correct:<10}\\t{phonetic_correct:<10}\\t{typo:<20}\\t{phonetic_typo:<10}\\t{phonetic_distance:<10}') \n\ncalculate_phonetic_distance(phonetic_func=jellyfish.metaphone, distance_func=jellyfish.levenshtein_distance)        \n```", "```py\nWord               Sound           Word                    Sound           Phonetic Distance\nNarendra Modi   NRNTR MT        Narendra Modi           NRNTR MT        0         \nNarendra Modi   NRNTR MT        Narendra D. Modi        NRNTR T MT      2         \nNarendra Modi   NRNTR MT        Narendar Modi           NRNTR MT        0         \nGujarat         KJRT            Gujrat                  KJRT            0         \nwrite           RT              right                   RT              0         \nMangalore       MNKLR           Bangalore               BNKLR           1         \nDelhi           TLH             Dilli                   TL              1         \n```", "```py\ncalculate_phonetic_distance(phonetic_func=jellyfish.soundex, distance_func=jellyfish.levenshtein_distance)        \n```", "```py\nWord            Sound           Word                    Sound           Phonetic Distance\nNarendra Modi   N653            Narendra Modi           N653            0         \nNarendra Modi   N653            Narendra D. Modi        N653            0         \nNarendra Modi   N653            Narendar Modi           N653            0         \nGujarat         G263            Gujrat                  G263            0         \nwrite           W630            right                   R230            2         \nMangalore       M524            Bangalore               B524            1         \nDelhi           D400            Dilli                   D400            0    \n```", "```py\n# import sys\n# !{sys.executable} -m pip install flashtext\n```", "```py\nfrom flashtext.keyword import KeywordProcessor\nkeyword_processor = KeywordProcessor()\nkeyword_processor.add_keyword('Delhi', 'NCR') # notice we are adding tuples here\nkeyword_processor.add_keyword('Bombay', 'Mumbai')\nkeywords_found = keyword_processor.extract_keywords('I love the food in Delhi and the people in Bombay')\nkeywords_found\n# ['NCR', 'Mumbai']\n```", "```py\nfrom flashtext.keyword import KeywordProcessor\nkeyword_processor = KeywordProcessor()\nkeyword_processor.add_keyword('Delhi', 'NCR')\nkeyword_processor.add_keyword('Bombay', 'Mumbai')\nreplaced_sentence = keyword_processor.replace_keywords('I love the food in Delhi and the people in Bombay')\nreplaced_sentence\n# 'I love the food in NCR and the people in Mumbai'\n```"]