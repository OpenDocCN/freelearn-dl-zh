- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Generation Data Persistence
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成数据持久化
- en: Imagine a Python program generates images but when you go back to the image
    hoping to make improvements or simply generate new images based on the original
    prompt, you can’t find the exact prompt, inference steps, guidance scale, and
    the other things that actually generate the image!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个 Python 程序生成图像，但当你回到图像希望进行改进或简单地根据原始提示生成新图像时，你找不到确切的提示、推理步骤、指导比例以及其他实际上生成图像的东西！
- en: One of the solutions to solve this problem is saving all the metadata in the
    generated image file. The **Portable Network Graphics** (**PNG**) [1] image format
    provides a mechanism for us to store a piece of metadata along with the image
    pixel data. We will explore this solution.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此问题的一个方案是将所有元数据保存到生成的图像文件中。**便携式网络图形**（PNG）[1] 图像格式为我们提供了一个机制，可以存储与图像像素数据一起的元数据。我们将探讨这个解决方案。
- en: 'In this chapter, we are going to look at the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下内容：
- en: Exploring and understanding the PNG file structure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索和理解 PNG 文件结构
- en: Storing the Stable Diffusion generation metadata in the PNG file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PNG 文件中存储稳定扩散生成元数据
- en: Extracting the Stable Diffusion generation metadata from the PNG file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 PNG 文件中提取稳定扩散生成元数据
- en: By employing the solution provided by this chapter, you will be able to maintain
    the generation prompt and parameters in the image file, and also extract the meta
    information for further usage.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用本章提供的解决方案，您将能够保持图像文件中的生成提示和参数，并提取元信息以供进一步使用。
- en: Let’s start.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始。
- en: Exploring and understanding the PNG file structure
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索和理解 PNG 文件结构
- en: Before saving the image metadata and Stable Diffusion generation parameters
    in the image, we’d better have an overall understanding of why we’re choosing
    PNG as the output image format to save the output of Stable Diffusion, and why
    PNG can support unlimited custom metadata, which is useful for writing a large
    amount of data into the image.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存图像元数据和稳定扩散生成参数之前，我们最好对为什么选择 PNG 作为输出图像格式以保存稳定扩散的输出有一个全面的了解，以及为什么 PNG 可以支持无限定制的元数据，这对于将大量数据写入图像非常有用。
- en: By understanding the PNG format, we can confidently write and read data into
    a PNG file as we are going to persist data in the image.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解 PNG 格式，我们可以自信地将数据写入 PNG 文件，因为我们打算将数据持久化到图像中。
- en: PNG is a raster graphics file format, an ideal image format for images generated
    by Stable Diffusion. The PNG file format was created as an improved, non-patented
    lossless image compression format, and is now widely used on the internet.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PNG 是一种光栅图形文件格式，是稳定扩散生成的理想图像格式。PNG 文件格式被创建为一个改进的、非专利的无损图像压缩格式，现在在互联网上广泛使用。
- en: Besides PNG, several other image formats also support saving custom image metadata,
    such as JPEG, TIFF, RAW, DNG, and BMP. However, these formats have their problems
    and limitations. JPEG files can include custom Exif metadata, but JPEG is a loss
    compression image format, reaching its high rate of compression by sacrificing
    image quality. DNG is a proprietary format owned by Adobe. BMP’s custom metadata
    size is limited compared with PNG.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 PNG，还有其他几种图像格式也支持保存自定义图像元数据，例如 JPEG、TIFF、RAW、DNG 和 BMP。然而，这些格式都有它们的问题和限制。JPEG
    文件可以包含自定义的 Exif 元数据，但 JPEG 是一种有损压缩图像格式，通过牺牲图像质量达到高压缩率。DNG 是 Adobe 拥有的专有格式。与 PNG
    相比，BMP 的自定义元数据大小有限。
- en: 'For the PNG format, besides the capability of storing additional metadata,
    there are a lot of advantages that make it an ideal format [1]:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PNG 格式，除了存储额外元数据的能力外，还有很多优点使其成为理想的格式 [1]：
- en: '**Lossless compression**: PNG uses lossless compression, which means the image
    quality is not degraded when compressed'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无损压缩**：PNG 使用无损压缩，这意味着在压缩过程中图像质量不会降低'
- en: '**Transparency support**: PNG supports transparency (alpha channel), allowing
    images to have transparent backgrounds or semi-transparent elements'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**透明度支持**：PNG 支持透明度（alpha 通道），允许图像具有透明背景或半透明元素'
- en: '**Wide color range**: PNG supports 24-bit RGB color, 32-bit RGBA color, and
    grayscale images, providing a wide range of color options'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽色域**：PNG 支持 24 位 RGB 颜色，32 位 RGBA 颜色和灰度图像，提供广泛的颜色选项'
- en: '**Gamma correction**: PNG supports gamma correction, which helps maintain consistent
    colors across different devices and platforms'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**伽玛校正**：PNG 支持伽玛校正，有助于在不同设备和平台之间保持一致的色彩'
- en: '**Progressive display**: PNG supports interlacing, allowing the image to be
    displayed progressively as it is being downloaded'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渐进显示**：PNG 支持交错，允许图像在下载过程中逐步显示。'
- en: 'We also need to be aware that, in some cases, PNG may not be the best choice.
    Here, let me list some:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要意识到，在某些情况下，PNG 可能不是最佳选择。以下是一些例子：
- en: '**Larger file size**: Compared to other formats such as JPEG, PNG files can
    be larger due to its lossless compression'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更大的文件大小**：与 JPEG 等其他格式相比，PNG 文件可能更大，因为其无损压缩。'
- en: '**No native support for animation**: Unlike GIF, PNG does not support animation
    natively'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不支持动画的原生支持**：与 GIF 不同，PNG 不支持原生的动画。'
- en: '**Not suitable for high-resolution photographs**: Due to its lossless compression,
    PNG is not the best choice for high-resolution photographs, as the file size can
    be significantly larger than formats such as JPEG that use lossy compression'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不适用于高分辨率照片**：由于其无损压缩，PNG 不是高分辨率照片的最佳选择，因为文件大小可能比使用有损压缩的 JPEG 等格式大得多。'
- en: Despite these limitations, PNG remains a viable option for image formatting,
    particularly for raw images from Stable Diffusion.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些限制，PNG 仍然是一种可行的图像格式选择，尤其是对于 Stable Diffusion 的原始图像。
- en: The internal data structure of a PNG file is based on a chunk-based structure.
    Each chunk is a self-contained unit that stores specific information about the
    image or metadata. This structure allows PNG files to store additional information,
    such as text, copyright, or any other metadata, without affecting the image data
    itself.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PNG 文件的内部数据结构基于基于块的架构。每个块是一个自包含的单元，它存储有关图像或元数据的特定信息。这种结构允许 PNG 文件存储附加信息，如文本、版权或其他元数据，而不会影响图像数据本身。
- en: 'A PNG file consists of a signature followed by a series of chunks. Here’s a
    brief overview of the main components of a PNG file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PNG 文件由一个签名后跟一系列块组成。以下是 PNG 文件主要组件的简要概述：
- en: '**Signature**: The first 8 bytes of a PNG file are a fixed signature (89 50
    4E 47 0D 0A 1A 0A in hexadecimal) that identifies the file as a PNG.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**：PNG 文件的前 8 个字节是一个固定的签名（十六进制中的 89 50 4E 47 0D 0A 1A 0A），用于标识文件为 PNG。'
- en: '`length` field.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` 字段。'
- en: '**CRC** (4 bytes): A **cyclic redundancy check** (**CRC**) value for error
    detection, calculated based on the chunk’s type and data fields.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRC**（4 字节）：用于错误检测的循环冗余检查（CRC）值，基于块的类型和数据字段计算。'
- en: This structure offers both flexibility and extensibility, as it allows for the
    addition of new chunk types without disrupting the compatibility with existing
    PNG decoders. Moreover, this PNG data structure enables the insertion of nearly
    limitless additional metadata into the image.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构提供了灵活性和可扩展性，因为它允许在不破坏现有 PNG 解码器兼容性的情况下添加新的块类型。此外，这种 PNG 数据结构使得将几乎无限量的附加元数据插入到图像中成为可能。
- en: Next, we will utilize Python to insert some text data into a PNG image file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 Python 将一些文本数据插入到 PNG 图像文件中。
- en: Saving extra text data in a PNG image file
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PNG 图像文件中保存额外的文本数据。
- en: First and foremost, let’s use Stable Diffusion to generate an image for testing.
    Not like the code we used in previous chapters, this time, we are going to use
    a JSON object to store the generation parameters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用 Stable Diffusion 生成一个用于测试的图像。与我们在前几章中使用的代码不同，这次我们将使用 JSON 对象来存储生成参数。
- en: 'Load the model:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模型：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let’s use `gen_meta` in the Python `dict` type:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Python 的 `dict` 类型中的 `gen_meta`：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We should have an image generated with the `input_image` handle – the reference
    to the image object in the Python context.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个使用 `input_image` 处理生成的图像 – 在 Python 上下文中对图像对象的引用。
- en: 'Next, let’s store the `gen_meta` data in the PNG file step by step:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们逐步将 `gen_meta` 数据存储在 PNG 文件中：
- en: 'Install the `pillow` library [2] if you haven’t already:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有安装，请安装 `pillow` 库 [2]：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the following code to add one chunk that stores text information:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码添加一个存储文本信息的块：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now the stringified `gen_meta` is in the `output_image_with_metadata.png` file.
    Please note that we need to first convert `gen_data` from an object to a string
    using `json.dumps(gen_meta)`.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，字符串化的 `gen_meta` 已存储在 `output_image_with_metadata.png` 文件中。请注意，我们首先需要使用 `json.dumps(gen_meta)`
    将 `gen_data` 从对象转换为字符串。
- en: 'The preceding code added one chunk of data to the PNG file. As we learned at
    the beginning of this chapter, the PNG file is stacked in chunks, which means
    we should be able to add any number of text chunks to the PNG file. In the following
    example, we added two chunks instead of just one:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码向 PNG 文件添加了一个数据块。正如我们在本章开头所学的，PNG 文件是按块堆叠的，这意味着我们应该能够向 PNG 文件中添加任意数量的文本块。在下面的示例中，我们添加了两个块而不是一个：
- en: '[PRE15]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Simply by calling another `add_text()function`, we can add a second text chunk
    to the PNG file. Next, let’s extract the added data from the PNG image.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只需调用另一个 `add_text()` 函数，我们就可以向 PNG 文件中添加第二个文本块。接下来，让我们从 PNG 图像中提取添加的数据。
- en: 'Extracting text data from a PNG image is straightforward. We will use the `pillow`
    package again for the extraction task:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 PNG 图像中提取文本数据是直接的。我们将再次使用 `pillow` 包来完成提取任务：
- en: '[PRE34]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We should see an output like this:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们应该看到如下输出：
- en: '[PRE40]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With the code provided in this section, we should be able to save and retrieve
    custom data to and from a PNG image file.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本节提供的代码，我们应该能够将自定义数据保存到 PNG 图像文件中，并从中检索。
- en: PNG extra data storage limitation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PNG 额外数据存储限制
- en: You may wonder whether there are any limitations on text data size. There is
    no specific limit on the amount of metadata that can be written to a PNG file.
    However, there are practical constraints based on the PNG file structure and the
    limitations of the software or libraries used to read and write the metadata.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道文本数据大小是否有任何限制。写入 PNG 文件的元数据量没有具体的限制。然而，基于 PNG 文件结构和用于读取和写入元数据的软件或库的限制，存在实际上的约束。
- en: A PNG file, as we discussed in the first section, is stored in chunks. Each
    chunk has a maximum size of 2 31 − 1 bytes (approximately 2 GB). While it is theoretically
    possible to include multiple metadata chunks within a single PNG file, storing
    excessive or overly large data within these chunks can lead to errors or slow
    loading times when attempting to open the image using other software.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在第一部分所讨论的，PNG 文件是按块存储的。每个块的最大大小为 2^31 - 1 字节（约 2 GB）。虽然理论上可以在单个 PNG 文件中包含多个元数据块，但在这些块中存储过多或过大的数据可能导致使用其他软件打开图像时出现错误或加载时间变慢。
- en: In practice, metadata in PNG files is usually small, containing information
    such as copyright, author, description, or the software used to create the image.
    In our case, it is the Stable Diffusion parameters that are used to generate the
    image. It is not recommended to store large amounts of data in PNG metadata, as
    it may cause performance issues and compatibility problems with some software.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，PNG 文件中的元数据通常很小，包含诸如版权、作者、描述或用于创建图像的软件等信息。在我们的案例中，是用于生成图像的稳定扩散参数。不建议在 PNG
    元数据中存储大量数据，因为这可能会导致性能问题和与某些软件的兼容性问题。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we introduced a solution to store the image generation prompt
    and relative parameters in the PNG image file, so that the generation data will
    go with the file wherever it goes and we can extract the parameters, using Stable
    Diffusion to enhance it or extend the prompt for other usage.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一种将图像生成提示和相对参数存储在 PNG 图像文件中的解决方案，这样生成数据就会随着文件移动，我们可以使用稳定扩散提取参数，以增强或扩展提示以供其他用途使用。
- en: This chapter introduced the file structure of a PNG file and provided sample
    code to store multiple chunks of text data in a PNG file and then use Python code
    to extract the metadata from the PNG file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 PNG 文件的文件结构，并提供了示例代码，用于在 PNG 文件中存储多个文本数据块，然后使用 Python 代码从 PNG 文件中提取元数据。
- en: With the solution’s sample code, you will be able to extract the metadata from
    an image generated by A1111’s Stable Diffusion web UI too.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解决方案的示例代码，您也将能够从 A1111 的稳定扩散网页界面生成的图像中提取元数据。
- en: In the next chapter, we will build an interactive web UI for a Stable Diffusion
    application.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为稳定扩散应用程序构建一个交互式网页界面。
- en: References
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Portable Network Graphics (PNG) specification: [https://www.w3.org/TR/png/](https://www.w3.org/TR/png/)'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可移植网络图形 (PNG) 规范：[https://www.w3.org/TR/png/](https://www.w3.org/TR/png/)
- en: 'Pillow package: [https://pillow.readthedocs.io/en/stable/](https://pillow.readthedocs.io/en/stable/)'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pillow 包：[https://pillow.readthedocs.io/en/stable/](https://pillow.readthedocs.io/en/stable/)
