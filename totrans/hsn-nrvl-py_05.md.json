["```py\n# XOR inputs and expected output values\nxor_inputs = [(0.0, 0.0), (0.0, 1.0), (1.0, 0.0), (1.0, 1.0)]\nxor_outputs = [ (0.0,), (1.0,), (1.0,), (0.0,)]\n\ndef eval_fitness(net):\n    error_sum = 0.0\n    for xi, xo in zip(xor_inputs, xor_outputs):\n        output = net.activate(xi)\n        error_sum += abs(output[0] - xo[0])\n    # Calculate amplified fitness\n    fitness = (4 - error_sum) ** 2\n    return fitness\n```", "```py\n[DefaultGenome]\n# The network parameters\nnum_hidden = 0\nnum_inputs = 2\nnum_outputs = 1\n\n# node bias options\nbias_init_mean = 0.0\nbias_init_stdev = 1.0\n```", "```py\n[DefaultGenome]\n# node activation options\nactivation_default = sigmoid\n\n# node aggregation options\naggregation_default = sum\n```", "```py\n[DefaultGenome]\nfeed_forward = True\ninitial_connection = full_direct\n```", "```py\n[DefaultGenome]\n# node add/remove rates\nnode_add_prob = 0.2\nnode_delete_prob = 0.2\n\n# connection add/remove rates\nconn_add_prob = 0.5\nconn_delete_prob = 0.5\n```", "```py\n[DefaultGenome]\n# connection enable options\nenabled_default = True\nenabled_mutate_rate = 0.01\n```", "```py\n[DefaultGenome]\n# genome compatibility options\ncompatibility_disjoint_coefficient = 1.0\ncompatibility_weight_coefficient = 0.5\n```", "```py\n[DefaultStagnation]\nspecies_fitness_func = max\nmax_stagnation = 20\nspecies_elitism = 2\n```", "```py\n[DefaultReproduction]\nelitism = 2\nsurvival_threshold = 0.2\nmin_species_size = 2\n```", "```py\n[DefaultSpeciesSet]\ncompatibility_threshold = 3.0\n```", "```py\n[NEAT]\nfitness_criterion = max\nfitness_threshold = 15.5\npop_size = 150\nreset_on_extinction = False\n```", "```py\n$ conda create --name XOR_neat python=3.5\n```", "```py\n$ conda activate XOR_neat\n```", "```py\n$ pip install neat-python==0.92 \n```", "```py\n$ conda install matplotlib\n$ conda install graphviz\n$ conda install python-graphviz\n```", "```py\n$ mkdir Chapter3\n```", "```py\n# The Python standard library import\nimport os\n# The NEAT-Python library imports\nimport neat\n# The helper used to visualize experiment results\nimport visualize\n```", "```py\n# The XOR inputs and expected corresponding outputs for \n# fitness evaluation\nxor_inputs = [(0.0, 0.0), (0.0, 1.0), (1.0, 0.0), (1.0, 1.0)]\nxor_outputs = [ (0.0,), (1.0,), (1.0,), (0.0,)]\n\ndef eval_fitness(net):\n    \"\"\"\n    Evaluates fitness of the genome that was used to generate \n    provided net\n    Arguments:\n        net: The feed-forward neural network generated from genome\n    Returns:\n        The fitness score - the higher score the means \n        the better fit organism. Maximal score: 16.0\n    \"\"\"\n    error_sum = 0.0\n    for xi, xo in zip(xor_inputs, xor_outputs):\n        output = net.activate(xi)\n        error_sum += abs(xo[0] - output[0])\n    # Calculate amplified fitness\n    fitness = (4 - error_sum) ** 2\n    return fitness\n```", "```py\ndef eval_genomes(genomes, config):\n    \"\"\"\n    The function to evaluate the fitness of each genome in \n    the genomes list. \n    The provided configuration is used to create feed-forward \n    neural network from each genome and after that created\n    the neural network evaluated in its ability to solve\n    XOR problem. As a result of this function execution, the\n    fitness score of each genome updated to the newly\n    evaluated one.\n    Arguments:\n        genomes: The list of genomes from population in the \n                current generation\n        config: The configuration settings with algorithm\n                hyper-parameters\n    \"\"\"\n    for genome_id, genome in genomes:\n        genome.fitness = 4.0\n        net = neat.nn.FeedForwardNetwork.create(genome, config)\n        genome.fitness = eval_fitness(net)\n```", "```py\n    # Load configuration.\n    config = neat.Config(neat.DefaultGenome, \n           neat.DefaultReproduction, neat.DefaultSpeciesSet, \n           neat.DefaultStagnation, config_file)\n\n    # Create the population, which is the top-level object \n    # for a NEAT run.\n    p = neat.Population(config)\n```", "```py\n    # Add a stdout reporter to show progress in the terminal.\n    p.add_reporter(neat.StdOutReporter(True))\n    stats = neat.StatisticsReporter()\n    p.add_reporter(stats)\n    p.add_reporter(neat.Checkpointer(5, \n                   filename_prefix='out/neat-checkpoint-'))\n```", "```py\n    # Run for up to 300 generations.\n    best_genome = p.run(eval_genomes, 300)\n```", "```py\n    # Check if the best genome is an adequate XOR solver\n    best_genome_fitness = eval_fitness(net)\n    if best_genome_fitness > config.fitness_threshold:\n        print(\"\\n\\nSUCCESS: The XOR problem solver found!!!\")\n    else:\n        print(\"\\n\\nFAILURE: Failed to find XOR problem solver!!!\")\n```", "```py\n    # Visualize the experiment results\n    node_names = {-1:'A', -2: 'B', 0:'A XOR B'}\n    visualize.draw_net(config, best_genome, True, \n       node_names=node_names, directory=out_dir)\n    visualize.plot_stats(stats, ylog=False, view=True, \n       filename=os.path.join(out_dir, 'avg_fitness.svg'))\n    visualize.plot_species(stats, view=True, \n       filename=os.path.join(out_dir, 'speciation.svg'))\n```", "```py\n$ python xor_experiment.py\n```", "```py\n ****** Running generation 43 ****** \n\nPopulation's average fitness: 6.01675 stdev: 2.53269\nBest fitness: 14.54383 - size: (4, 7) - species 2 - id 5368\nAverage adjusted fitness: 0.238\nMean genetic distance 2.482, standard deviation 0.991\nPopulation of 151 members in 5 species:\n ID age size fitness adj fit stag\n ==== === ==== ======= ======= ====\n 1  43   28     9.0   0.241    0\n 2  33   42    14.5   0.274    7\n 3  20   39     9.0   0.306    0\n 4   4   34     9.0   0.221    0\n 5   1    8     8.4   0.149    0\nTotal extinctions: 0\nGeneration time: 0.045 sec (0.038 average)\n```", "```py\n ****** Running generation 44 ****** \n\nPopulation's average fitness: 6.04705 stdev: 2.67702\nBest fitness: 15.74620 - size: (3, 7) - species 2 - id 6531\n\nBest individual in generation 44 meets fitness threshold - complexity: (3, 7)\n```", "```py\nBest genome:\nKey: 6531\nFitness: 15.74619841601669\nNodes:\n 0 DefaultNodeGene(key=0, bias=-3.175506745721987, response=1.0, activation=sigmoid, aggregation=sum)\n 224 DefaultNodeGene(key=224, bias=-2.5796785460461154, response=1.0, activation=sigmoid, aggregation=sum)\n 612 DefaultNodeGene(key=612, bias=-1.626648521448398, response=1.0, activation=sigmoid, aggregation=sum)\nConnections:\n DefaultConnectionGene(key=(-2, 224), weight=1.9454770276940339, enabled=True)\n DefaultConnectionGene(key=(-2, 612), weight=2.1447044917213383, enabled=True)\n DefaultConnectionGene(key=(-1, 0), weight=-2.048078253002224, enabled=True)\n DefaultConnectionGene(key=(-1, 224), weight=3.6675667680178328, enabled=True)\n DefaultConnectionGene(key=(224, 0), weight=6.1133731818187655, enabled=True)\n DefaultConnectionGene(key=(612, 0), weight=-2.1334321035742474, enabled=True)\n DefaultConnectionGene(key=(612, 224), weight=1.5435290073038443, enabled=True)\n```", "```py\nOutput:\ninput (0.0, 0.0), expected output (0.0,), got [1.268084297765355e-07]\ninput (0.0, 1.0), expected output (1.0,), got [0.9855287279878023]\ninput (1.0, 0.0), expected output (1.0,), got [0.9867962503269723]\ninput (1.0, 1.0), expected output (0.0,), got [0.004176868376596405]\n```"]