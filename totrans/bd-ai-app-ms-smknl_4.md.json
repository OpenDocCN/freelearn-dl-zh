["```py\nfrom dotenv import load_dotenv\nfrom openai import OpenAI\nimport os\nfrom semantic_kernel.skill_definition import kernel_function\nclass Dalle3:\n    @kernel_function(\n        description=\"Generates an with DALL-E 3 model based on a prompt\",\n        name=\"ImageFromPrompt\",\n        input_description=\"The prompt used to generate the image\",\n    )\n    def ImageFromPrompt(self, input: str) -> str:\n        load_dotenv()\n        client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n```", "```py\n        response = client.images.generate(\n            model=\"dall-e-3\",\n            prompt=input,\n            size=\"1024x1024\",\n            quality=\"standard\",\n            n=1,\n        )\n        image_url = response.data[0].url\n        return image_url\n```", "```py\nimport asyncio\nimport semantic_kernel as sk\nfrom OpenAiPlugins import Dalle3\nasync def main():\n    kernel = sk.Kernel()\n    animal_str = \"A painting of a cat sitting in a sofa in the impressionist style\"\n    dalle3 = kernel.import_skill(Dalle3())\n    animal_pic_url = await kernel.run_async(\n        dalle3['ImageFromPrompt'],\n        input_str=animal_str\n    )\n    print(animal_pic_url)\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```", "```py\nusing System.ComponentModel;\nusing System.Net.Http.Headers;\nusing System.Net.Http.Json;\nusing Microsoft.SemanticKernel;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nnamespace Plugins;\npublic class Dalle3\n{\n    [KernelFunction, Description(\"Generate an image from a prompt\")]\n    async public Task<string> ImageFromPrompt([Description(\"Prompt describing the image you want to generate\")] string prompt)\n    {\n```", "```py\n        HttpClient client = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://api.openai.com/v1/\")\n        };\n        var (apiKey, orgId) = Settings.LoadFromFile();\n        client.DefaultRequestHeaders\n            .Accept\n            .Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiKey);\n        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n```", "```py\n        var obj = new {\n            model = \"dall-e-3\",\n            prompt = prompt,\n            n = 1,\n            size = \"1024x1024\"};\n        var content = new StringContent(JsonSerializer.Serialize(obj), Encoding.UTF8, \"application/json\");\n        var response  = await client.PostAsync(\"images/generations\", content);\n```", "```py\n        if (!response.IsSuccessStatusCode)\n        {\n            return $\"Error: {response.StatusCode}\";\n        }\n        string jsonString = await response.Content.ReadAsStringAsync();\n        using JsonDocument doc = JsonDocument.Parse(jsonString);\n        JsonElement root = doc.RootElement;\n        return root.GetProperty(\"data\")[0]!.GetProperty(\"url\")!.GetString()!;\n    }\n}\n```", "```py\nusing Microsoft.SemanticKernel;\nusing Plugins;\nvar (apiKey, orgId) = Settings.LoadFromFile();\nvar builder = Kernel.CreateBuilder();\nbuilder.Plugins.AddFromType<Dalle3>();\nvar kernel = builder.Build();\nstring prompt = \"A cat sitting on a couch in the style of Monet\";\nstring? url = await kernel.InvokeAsync<string>(\n    \"Dalle3\", \"ImageFromPrompt\", new() {{ \"prompt\", prompt }}\n);\nConsole.Write(url);\n```", "```py\n{\n    \"schema\": 1,\n    \"name\": \"GuessAnimal\",\n    \"type\": \"completion\",\n    \"description\": \"Given a text with clues, guess the animal\",\n    \"execution_settings\": {\n        \"default\": {\n            \"temperature\": 0.8,\n            \"number_of_responses\": 1,\n            \"top_p\": 1,\n            \"max_tokens\": 4000,\n            \"presence_penalty\": 0.0,\n            \"frequency_penalty\": 0.0\n        }\n    },\n    \"input_variables\": [\n        {\n            \"name\": \"input\",\n            \"description\": \"CLues about an animal\",\n            \"required\": true\n        }\n    ]\n}\n```", "```py\nBelow, there's a list of clues about an animal.\n{{$input}}\nFrom the clues above, guess what animal it is.\nProvide your answer in a single line, containing just the name of the animal.\n```", "```py\nusing Microsoft.SemanticKernel;\nusing Plugins;\nvar (apiKey, orgId) = Settings.LoadFromFile();\nvar builder = Kernel.CreateBuilder();\nbuilder.Plugins.AddFromType<Dalle3>();\nbuilder.AddOpenAIChatCompletion(\"gpt-3.5-turbo\", apiKey, orgId);\nvar kernel = builder.Build();\nKernelPlugin animalGuesser = kernel.ImportPluginFromPromptDirectory(\"../../../plugins/AnimalGuesser\");\nstring clues = \"It's a mammal. It's a pet. It meows. It purrs.\";\n```", "```py\nKernelFunction guessAnimal = animalGuesser[\"GuessAnimal\"];\nKernelFunction generateImage = kernel.Plugins[\"Dalle3\"][\"ImageFromPrompt\"];\nKernelFunction pipeline = KernelFunctionCombinators.Pipe(new[] {\n    guessAnimal,\n    generateImage\n}, \"pipeline\");\n```", "```py\nKernelArguments context = new() { { \"input\", clues } };\nConsole.WriteLine(await pipeline.InvokeAsync(kernel, context));\n```", "```py\nasync def pipeline(kernel, function_list, input):\n    for function in function_list:\n        args = KernelArguments(input=input)\n        input = await kernel.invoke(function, args)\n    return input\n```", "```py\nimport asyncio\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nimport semantic_kernel as sk\nfrom OpenAiPlugins import Dalle3\nasync def main():\n    kernel = sk.Kernel()\n    api_key, org_id = sk.openai_settings_from_dot_env()\n    gpt35 = OpenAIChatCompletion(\"gpt-3.5-turbo\", api_key, org_id)\n    kernel.add_chat_service(\"gpt35\", gpt35)\n    generate_image_plugin = kernel.import_skill(Dalle3())\n    animal_guesser = kernel.import_semantic_skill_from_directory(\"../../plugins\", \"AnimalGuesser\")\n```", "```py\n    clues = \"\"\"\n    I am thinking of an animal.\n    It is a mammal.\n    It is a pet.\n    It is a carnivore.\n    It purrs.\"\"\"\n    function_list = [\n        animal_guesser['GuessAnimal'],\n        generate_image_plugin['ImageFromPrompt']\n    ]\n    animal_pic_url = await pipeline(kernel, function_list, clues)\n    print(animal_pic_url)\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```", "```py\n└───data\n    └───proposals\n    |   |───correct\n    |   |    ├───correct.docx\n    |   |    └───correct.xlsx\n    |   ├───incorrect01\n    |   |    ├───missing_experience.docx\n    |   |    └───incorrect_template.xlsx\n    |   ├───incorrect02\n    |   |    ├───missing_qualifications.docx\n    |   |    └───over_budget.xlsx\n    |   └───(...)\n    |   ├─── incorrect10\n    └───plugins\n         └───ProposalCheckerV2\n              ├───CheckDatesV2\n              |     ├───skprompt.txt\n              |     └───config.json\n              ├───CheckPreviousProjectV2\n              |     ├───skprompt.txt\n              |     └───config.json\n              └───CheckTeamV2\n                    ├───skprompt.txt\n                    └───config.json\n└───ch4\n    └───code\n          ├───python\n          |    ├───ch4.py\n          |    ├───ParseWordDocument.py\n          |    └───CheckSpreadsheet.py\n          └───dotnet\n               ├───Program.cs\n               ├───ParseWordDocument.cs\n              └───CheckSpreadsheet.cs\n```", "```py\nusing Microsoft.SemanticKernel;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\npublic class Helpers\n{\n    [KernelFunction, Description(\"Checks that the folder contains one Word and one Excel file\")]\n    public static string ProcessProposalFolder([Description(\"Folder potentially containing\")] string folderPath)\n    {\n```", "```py\n        string result = folderPath;\n        if (!Directory.Exists(folderPath))\n        {\n            return \"Error: Folder does not exist\";\n        }\n        var files = Directory.GetFiles(folderPath);\n        int wordCount = files.Count(f => Path.GetExtension(f).ToLower() == \".docx\");\n        int excelCount = files.Count(f => Path.GetExtension(f).ToLower() == \".xlsx\");\n        if (wordCount == 1 && excelCount == 1)\n        {\n            return result;\n        }\n        else if (wordCount == 0 && excelCount == 0)\n        {\n            return \"Error: Folder does not contain one Word and one Excel file\";\n        }\n        else if (wordCount == 0)\n        {\n            return \"Error: Folder missing Word file\";\n        }\n        else if (excelCount == 0)\n        {\n            return \"Error: Folder missing Excel file\";\n        }\n        return \"Error: Folder contains more than one Word or Excel file\";\n    }\n}\n```", "```py\nfrom typing_extensions import Annotated\nfrom semantic_kernel.functions.kernel_function_decorator import kernel_function\nimport os\nclass Helpers:\n    @kernel_function(\n        description=\"Checks that the folder contains the expected files, an Excel spreadsheet and a Word document\",\n        name=\"ProcessProposalFolder\"\n    )\n    def ProcessProposalFolder(self, input: Annotated[str, \"The file path to the folder containing the proposal files\"]) -> str:\n```", "```py\n    def ProcessProposalFolder(self, folder_path: str) -> str:\n        xlsx_count = 0\n        docx_count = 0\n        for file in os.listdir(folder_path):\n            if file.endswith(\".xlsx\"):\n                xlsx_count += 1\n            elif file.endswith(\".docx\"):\n                docx_count += 1\n        if xlsx_count == 1 and docx_count == 1:\n            return \"Success\"\n        elif xlsx_count == 0 and docx_count == 0:\n            return \"Error: No files found\"\n        elif xlsx_count == 0:\n            return \"Error: No Excel spreadsheet found\"\n        elif docx_count == 0:\n            return \"Error: No Word document found\"\n        else:\n            return \"Error: multiple files found\"\n```", "```py\n    [KernelFunction, Description(\"Checks that the spreadsheet contains the correct tabs, 2024 and 2025\")]\n    public string CheckTabs([Description(\"The file path to the spreadsheet\")] string folderPath)\n    {\n        if (folderPath.StartsWith(\"Error\"))\n        {\n            return folderPath;\n        }\n```", "```py\n        string filePath = GetExcelFile(folderPath);\n        try\n        {\n            FileInfo fileInfo = new FileInfo(filePath);\n            if (!fileInfo.Exists)\n            {\n                return \"Error: File does not exist.\";\n            }\n```", "```py\n            using (var package = new ExcelPackage(fileInfo))\n            {\n                ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;\n                var workbook = package.Workbook;\n                if (workbook.Worksheets.Count != 2)\n                {\n                    return \"Error: Spreadsheet does not contain 2 tabs.\";\n                }\n                if (workbook.Worksheets.Any(sheet => sheet.Name == \"2024\") && workbook.Worksheets.Any(sheet => sheet.Name == \"2025\"))\n                {\n                    return folderPath;\n                }\n```", "```py\n                else\n                {\n                    return \"Error: Spreadsheet does not contain 2024 and 2025 tabs.\";\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            return $\"Error: An error occurred: {ex.Message}\";\n        }\n    }\n```", "```py\n        @kernel_function(\n        description=\"Checks that the spreadsheet contains the correct tabs, 2024 and 2025\",\n        name=\"CheckTabs\",\n    )\n    def CheckTabs(self,\n                  input: Annotated[str, \"The path to the spreadsheet\"]) -> Annotated[str, \"The result of the check\"]:\n        if path.startswith(\"Error\"):\n            return path\n```", "```py\n        try:\n            filePath = self.GetExcelFile(path)\n            workbook = openpyxl.load_workbook(filePath)\n            sheet_names = workbook.sheetnames\n            if sheet_names == ['2024', '2025']:\n                return path\n```", "```py\n            else:\n                return \"Error: the spreadsheet does not contain the correct tabs\"\n        except Exception as e:\n            return f\"Error: an exception {e} occurred when trying to open the spreadsheet\"\n```", "```py\n    [KernelFunction, Description(\"Extracts the text under the Team heading in the Word document\")]\n    public static string ExtractTeam(string folderPath)\n    {\n        if (folderPath.Contains(\"Error\"))\n        {\n            return folderPath;\n        }\n        string text = ExtractTextUnderHeading(folderPath, \"Team\");\n        return $\"FolderPath: {folderPath}\\n\"  + text;\n    }\n```", "```py\n    def ExtractTeam(self, folder_path: str) -> str:\n        if folder_path.startswith(\"Error\"):\n            return folder_path\n        doc_path = self.get_first_docx_file(folder_path)\n        text = self.ExtractTextUnderHeading(doc_path, 'Team')\n        return f\"FolderPath: {folder_path}\\n{text}\"\n```", "```py\n=====\n {{$input}}\n=====\nCheck the contents of the text between the ===== and =====.\nIf the contents are an error message, respond with the error message, including the word \"Error:\" at the beginning.\nOtherwise, the first line of the text between the ===== and ===== will contain the FolderPath.\nThe other lines will contain the team's experience.\nWe require the team's experience to have at least one person with a Ph.D. and at least one person with a degree in the medical sciences.\nThink carefully about the team's experience.\nIf the team fulfills the requirements, your answer should be the contents of the FolderPath field, nothing more.\nIf the team does not fulfill the requirements, reply with \"Error: Team does not meet requirements.\"\n```", "```py\n=====\n {{$input}}\n=====\nCheck the contents of the text between the tags ===== and =====.\nIf the contents are an error message, respond with the error message, including the word \"Error:\" at the beginning.\nOtherwise, the text between the tags ===== and ===== will contain\na line starting with FolderPath and the rest of the field will contain\na description of a timeline for vaccine implementation.\nThink carefully about the following question:\nIgnoring the FolderPath line, does the timeline contain dates?\nIf there are no dates listed, say \"Error: No dates listed\" .\nIf the dates are outside of the 2024-2025 range, say \"Error: dates out of range\".\nIf there are dates between 2024 and 2025, respond only with the contents of the FolderPath field, nothing more.\n```", "```py\n=====\n {{$input}}\n=====\nCheck the contents of the text between the ===== and =====.\nIf the contents are an error message, respond with the error message, including the word \"Error:\" at the beginning.\nOtherwise, the text between the ===== and ===== will contain a line starting with FolderPath and the rest of the field will contain a description of the teams experience.\nIgnoring the FolderPath line, does the description of the teams experience\nindicate they have enough experience to conduct a massive vaccination campaign in a new country?\nIf they have had a successful experience in Atlantis or another large country, respond only with the\ncontents of the FolderPath field, nothing more.\nOtherwise, respond with \"Error: Not enough experience.\"\n```", "```py\nusing Microsoft.SemanticKernel;\nusing Plugins.ProposalChecker;\nusing System;\nusing System.IO;\nvar (apiKey, orgId) = Settings.LoadFromFile();\nvar builder = Kernel.CreateBuilder();\nbuilder.AddOpenAIChatCompletion(\"gpt-4\", apiKey, orgId);\nbuilder.Plugins.AddFromPromptDirectory(\"../../../plugins/ProposalCheckerV2\");\nbuilder.Plugins.AddFromType<Helpers>();\nbuilder.Plugins.AddFromType<ParseWordDocument>();\nbuilder.Plugins.AddFromType<CheckSpreadsheet>();\nvar kernel = builder.Build();\n```", "```py\nKernelFunction processFolder = kernel.Plugins[\"Helpers\"][\"ProcessProposalFolder\"];\nKernelFunction checkTabs = kernel.Plugins[\"CheckSpreadsheet\"][\"CheckTabs\"];\nKernelFunction checkCells = kernel.Plugins[\"CheckSpreadsheet\"][\"CheckCells\"];\nKernelFunction checkValues = kernel.Plugins[\"CheckSpreadsheet\"][\"CheckValues\"];\nKernelFunction extractTeam = kernel.Plugins[\"ParseWordDocument\"][\"ExtractTeam\"];\nKernelFunction checkTeam = kernel.Plugins[\"ProposalCheckerV2\"][\"CheckTeamV2\"];\nKernelFunction extractExperience = kernel.Plugins[\"ParseWordDocument\"][\"ExtractExperience\"];\nKernelFunction checkExperience = kernel.Plugins[\"ProposalCheckerV2\"][\"CheckPreviousProjectV2\"];\nKernelFunction extractImplementation = kernel.Plugins[\"ParseWordDocument\"][\"ExtractImplementation\"];\nKernelFunction checkDates = kernel.Plugins[\"ProposalCheckerV2\"][\"CheckDatesV2\"];\n```", "```py\nKernelFunctionCombinators.Pipe(new[] {\n    processFolder,\n    checkTabs}\n```", "```py\nKernelFunctionCombinators.Pipe(new[] {\nkernel.Plugins[\"ProposalCheckerV2\"][\"ProcessProposalFolder\"]}\n    kernel.Plugins[\"ProposalCheckerV2\"][\"CheckTabs\"]}\n```", "```py\nKernelFunction pipeline = KernelFunctionCombinators.Pipe(new[] {\n    processFolder,\n    checkTabs,\n    checkCells,\n    checkValues,\n    extractTeam,\n    checkTeam,\n    extractExperience,\n    checkExperience,\n    extractImplementation,\n    checkDates\n}, \"pipeline\");\n```", "```py\nvar proposals = Directory.GetDirectories(\"../../../data/proposals\");\n// print each directory\nforeach (var proposal in proposals)\n{\n    // convert to absolute path\n    string absolutePath = Path.GetFullPath(proposal);\n    Console.WriteLine($\"Processing {absolutePath}\");\n    KernelArguments context = new() { { \"folderPath\", absolutePath } };\n    string result = await pipeline.InvokeAsync<string>(kernel, context);\n    Console.WriteLine(result);\n    if (result == absolutePath)\n    {\n        Console.WriteLine(\"Success!\");\n    }\n    Console.WriteLine();\n}\n```", "```py\nimport asyncio\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\nimport semantic_kernel as sk\nfrom CheckSpreadsheet import CheckSpreadsheet\nfrom ParseWordDocument import ParseWordDocument\nfrom Helpers import Helpers\nimport os\nasync def pipeline(kernel, function_list, input):\n    for function in function_list:\n        args = KernelArguments(input=input)\n        input = await kernel.invoke(function, args)\n    return input\nasync def main():\n    kernel = sk.Kernel()\n    api_key, org_id = sk.openai_settings_from_dot_env()\n    gpt4 = OpenAIChatCompletion(\"gpt-4\", api_key, org_id)\n    kernel.add_chat_service(\"gpt4\", gpt4)\n    parse_word_document = kernel.import_skill(ParseWordDocument())\n    check_spreadsheet = kernel.import_skill(CheckSpreadsheet())\n    helpers = kernel.import_skill(Helpers())\n    interpret_document = kernel.import_semantic_skill_from_directory(\"../../plugins\", \"ProposalCheckerV2\")\n```", "```py\n    data_path = \"../../data/proposals/\"\n    for folder in os.listdir(data_path):\n        if not os.path.isdir(os.path.join(data_path, folder)):\n            continue\n        print(f\"\\n\\nProcessing folder: {folder}\")\n        function_list = [\n            helpers['ProcessProposalFolder'],\n            check_spreadsheet['CheckTabs'],\n            check_spreadsheet['CheckCells'],\n            check_spreadsheet['CheckValues'],\n            parse_word_document['ExtractTeam'],\n            interpret_document['CheckTeamV2'],\n            parse_word_document['ExtractExperience'],\n            interpret_document['CheckPreviousProjectV2'],\n            parse_word_document['ExtractImplementation'],\n            interpret_document['CheckDatesV2']\n        ]\n        process_result = await pipeline(kernel, function_list, os.path.join(data_path, folder))\n        result = (str(process_result))\n        if result.startswith(\"Error\"):\n            print(result)\n            continue\n        else:\n            print(\"Success\")\n```", "```py\nProcessing folder: correct\nSuccess\nProcessing folder: incorrect01\nError: the spreadsheet does not contain the correct tabs\nProcessing folder: incorrect02\nError: Sum of values in year 2025 exceeds 1,000,000.\nProcessing folder: incorrect03\nError: More than 10% growth found from B2 to B3 in sheet 2024.\nProcessing folder: incorrect04\nError: non-numeric inputs\nProcessing folder: incorrect05\nError: No Word document found\nProcessing folder: incorrect06\nError: No Excel spreadsheet found\nProcessing folder: incorrect07\nError: Not enough experience.\nProcessing folder: incorrect08\nError: Team does not meet requirements.\nProcessing folder: incorrect09\nError: dates out of range\nProcessing folder: incorrect10\nError: multiple files found\n```"]