- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boost Coding Efficiency for SQL with Auto-Code Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of database management languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL auto-code generation for **d****atabase** **a****dministrators** (**DBAs**)
    using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL auto-code generation for **d****ata** **e****ngineers** (**DEs**) using
    Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL code explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our previous chapter, we discussed an overview of web programming languages
    before focusing on two dominant ones used in the software industry – **JavaScript**
    (**JS**) and PHP. We demonstrated how auto-code generation, especially Amazon
    Q Developer, is integrated and can be used by JS and PHP developers to understand
    the basics, learn syntax, and automatically generate code.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on database management languages. We’ll dive
    into one of the most dominant database management languages in the software industry,
    **Structured Query Language** (**SQL**). Using two user personas, DBAs and DEs,
    we will introduce how auto-code generation through Amazon Q Developer can help
    you understand the basics, learn syntax, and automatically generate code for common
    DBA and DE activities. Then, we will explore code explainability to support documentation
    and code optimization recommendations provided by Amazon Q Developer for SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of database management languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s dive into another widely used area of systems across industries – database
    management – and explore SQL, a crucial language for handling large datasets,
    tables, views, users, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the dynamic landscape of database management, SQL serves as the fundamental
    language for interacting with relational databases. SQL enables DBAs and DEs to
    retrieve, manipulate, and manage data efficiently across various **Database Management
    Systems** (**DBMs**). SQL is vital when working on projects that interact with
    relational and/or columnar databases, such as MySQL, PostgreSQL, Oracle Database,
    SQL Server, Teradata, and Amazon RedShift. As databases become increasingly complex
    and critical to business operations, the ability to write efficient and reliable
    SQL code is paramount. Auto-code generation has emerged as a transformative approach
    to streamline SQL development processes, automate routine tasks, and enhance productivity
    for DBAs and DEs alike. Amazon Q Developer, leveraging advanced artificial intelligence
    and machine learning capabilities, offers robust support for SQL code generation.
    This section explores how Amazon Q Developer revolutionizes SQL development, empowers
    DBAs and DEs, and facilitates efficient database management and data manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: For DBAs, SQL plays a pivotal role in database administration and application
    development by enabling tasks such as defining database structures, managing access
    control, monitoring log tables, and ensuring data integrity. For DEs, SQL is key
    for tasks such as loading data in tables, querying data by joining multiple tables,
    manipulating data using store procedures, and unloading data. However, writing
    SQL queries and maintaining database schemas can be time-consuming and prone to
    errors, particularly in environments with extensive data requirements and complex
    relationships. Amazon Q Developer simplifies SQL development by automating the
    generation of SQL queries, database schema definitions, and data manipulation
    scripts. Through its intuitive chat-style interface, DBAs and DEs can interact
    with Amazon Q Developer to request specific SQL queries or tasks using natural
    language prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, Amazon Q Developer serves as an educational resource for SQL learners
    and novice DE. It offers interactive tutorials, explanations of SQL concepts,
    and practical examples of SQL queries through its chat interface. This educational
    aspect helps DBAs and DEs grasp SQL fundamentals more effectively and apply them
    to real-world database management and data manipulation scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Experienced DBAs and DEs can use Amazon Q Developer’s advanced features, such
    as query optimization and performance tuning suggestions. It analyzes SQL queries
    generated by users, identifies potential performance bottlenecks or inefficiencies,
    and offers recommendations to enhance query execution speed and resource utilization.
    These optimization capabilities are crucial for maintaining optimal database performance
    and scalability in production environments. Teams working on database-driven applications
    can benefit from standardized SQL code templates, shared best practices, and streamlined
    code review processes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s dive deep to see how Amazon Q Developer can help a DBA and DE. To
    illustrate, I will use Amazon **Relational Database Service** (**RDS**) for MySQL,
    which is an offering from **Amazon Web Services** (**AWS**), and the Amazon Q
    Developer interface with VS Code (refer to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022)
    for configuration steps for Amazon Q Developer with VS Code).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer uses **large language models** (**LLMs**), which by nature
    are non-deterministic, so you may not get exactly the same answers/code blocks
    shown in the code snapshots. Try to update prompts to get your desired recommendations.
    However, logically, the generated answer/code should meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: SQL auto-code generation for DBAs using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, assume a new DBA is planning to work with Amazon RDS for MySQL and does
    not have any background in this service offering. Let’s use Amazon Q Developer’s
    chat-style interface to educate DBAs, where they can simply ask questions in natural
    language to learn about DBA activities and best practices when it comes to Amazon
    RDS for MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon RDS for MySQL basics for DBAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s first learn about Amazon RDS for MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.1 – Chat style – DBA Amazon RDS for MySQL basic](img/B21378_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Chat style – DBA Amazon RDS for MySQL basic
  prefs: []
  type: TYPE_NORMAL
- en: Note that Amazon Q Developer provided the key information about Amazon RDS for
    MySQL, related to important topics such as **Managed Service**, **Scalability**,
    **High** **Availability**, **Read Replicas**, and **Automated Backups**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s dive deep to understand DBA-specific information related to Amazon
    RDS for MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.2 – Chat style – Amazon RDS for basic MySQL DBA activities](img/B21378_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Chat style – Amazon RDS for basic MySQL DBA activities
  prefs: []
  type: TYPE_NORMAL
- en: We will not dive deep into each DBA activity suggested by Amazon Q Developer;
    just note that Amazon Q Developer utilized the key areas of responsibilities of
    a DBA, such as creating and managing databases, monitoring and optimizing performance,
    backup and recovery, high availability and replication, security management, and
    upgrading and patching to provide Amazon RDS with MySQL-specific information.
    In addition, it also provided resources that can be used for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: Security management is one of the most important responsibilities of DBAs. Managed
    AWS services such as Amazon RDS have mechanisms that differ from on-premises databases,
    so it’s essential that DBAs understand these differences. Let’s ask Amazon Q Developer
    to provide more information to help DBAs understand specific details and best
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the best practice recommendations, we’ll ask Amazon Q Developer
    about key security resource configurations, such as security groups for Amazon
    RDS for MySQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.3 – Chat style – Amazon RDS for MySQL security group best practices](img/B21378_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Chat style – Amazon RDS for MySQL security group best practices
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, Amazon Q Developer provided the top 10
    best practices that DBAs can follow to configure security groups for Amazon RDS
    for MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: SQL generation for DBAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s ask Amazon Q Developer about the common SQL commands used by Amazon
    RDS for MySQL DBAs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.4 – Chat style – an Amazon RDS for MySQL common SQL command](img/B21378_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Chat style – an Amazon RDS for MySQL common SQL command
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the Amazon Q Developer chat-style interface
    provides multiple commonly used SQL commands with syntax to make it easy to understand.
    New Amazon RDS for MySQL DBAs will realize that while some traditional DBA activities
    are managed by Amazon RDS, activities such as creating databases and schemas,
    simple tables, and database users with specific access permissions still require
    DBA attention.
  prefs: []
  type: TYPE_NORMAL
- en: So, based on the preceding information for DBAs, let’s start writing SQL commands
    to carry out common DBA tasks with Amazon Q Developer’s help. To illustrate, I
    am going to use the VS Code script editor window with single-line and multi-line
    prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s ask Amazon Q Developer to provide a SQL command to create a database
    and schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.5 – A prompt for Amazon RDS for MySQL to create a database and schema](img/B21378_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – A prompt for Amazon RDS for MySQL to create a database and schema
  prefs: []
  type: TYPE_NORMAL
- en: Note that Amazon Q Developer provided complete, error-free SQL code to create
    the database and schema, as per the names provided in the prompt following MySQL
    specifics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s ask Amazon Q Developer to create a simple table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.6 – A prompt for Amazon RDS for MySQL to create a table](img/B21378_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – A prompt for Amazon RDS for MySQL to create a table
  prefs: []
  type: TYPE_NORMAL
- en: Note that, as prompted, Amazon Q Developer provided table DDL with a primary
    key constraint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s ask Amazon Q Developer to create a database user and grant specific
    access permission to the user in the preceding table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We get the SQL code for this as shown in *Figure 7**.7*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – A prompt for Amazon RDS for MySQL to create a user and grant
    user access](img/B21378_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – A prompt for Amazon RDS for MySQL to create a user and grant user
    access
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create SQL to remove the previously granted `update` privilege:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.8 – A prompt for Amazon RDS for MySQL to revoke access](img/B21378_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – A prompt for Amazon RDS for MySQL to revoke access
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s carry out the clean-up tasks to drop the user, table, schema, and
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We get the SQL code for this as shown in *Figure 7**.9*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – A prompt for Amazon RDS for MySQL to drop objects](img/B21378_07_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – A prompt for Amazon RDS for MySQL to drop objects
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated here, by using Amazon RDS for MySQL, a DBA can simply use a chat-style
    and/or prompt-style interface to interact with Amazon Q Developer, receiving error-free
    SQL code to carry out daily activities. To explore further, feel free to use additional
    prompts to get SQL code from Amazon Q Developer related to DBA activities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s see how Amazon Q Developer can help a DE who is mainly
    responsible for writing SQL code to understand data, join multiple tables, manipulate
    data, and load data into tables.
  prefs: []
  type: TYPE_NORMAL
- en: SQL auto-code generation for DEs using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let’s assume that a new DE is planning to work with Amazon RDS for MySQL
    and does not have any background in the SQL command offerings. In the next sections,
    we will explore how Amazon Q Developer can support DEs with common **Data Manipulation
    Language** (**DML**) support, syntaxes, and basic SQL queries. Let’s start with
    basic DML support.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon RDS for MySQL basics for DEs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s use Amazon Q Developer’s chat-style interface to educate DEs, where they
    can simply ask questions in a natural language to learn about the available commands
    and functions for Amazon RDS for MySQL. Since data manipulation is a crucial activity
    for DEs, which falls under a DML, let’s ask Amazon Q Developer to provide information
    on the support offered by Amazon RDS for DML operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the following screenshot, Amazon Q Developer provides commonly
    used available SQL commands such as **SELECT**, **INSERT**, **UPDATE**, and **DELETE**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Chat style – Amazon RDS for MySQL DMLs for a DE](img/B21378_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Chat style – Amazon RDS for MySQL DMLs for a DE
  prefs: []
  type: TYPE_NORMAL
- en: SQL generation for DEs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s dive deeper and ask about the SQL commands, working with some of the common
    SQL operations to understand how Amazon Q Developer can help DEs learn more, as
    well as auto-generate SQL code using different prompting techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s ask one more question about SQL syntax before we start writing SQL code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.11 – Chat style – an Amazon RDS for MySQL SELECT command for a DE](img/B21378_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Chat style – an Amazon RDS for MySQL SELECT command for a DE
  prefs: []
  type: TYPE_NORMAL
- en: Note that Amazon Q Developer provided detailed clauses and a sample example
    at the end to help users understand the usage of the `select` command.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s start writing SQL commands to carry out common DE tasks with Amazon
    Q Developer’s help. To illustrate, I am going to use the VS Code script editor
    window with single-line and multi-line prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with simple `select` commands from tables, assuming that tables
    are already present and the user has access to select from them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.12 – A prompt for an Amazon RDS for MySQL select SQL command for
    a DE](img/B21378_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – A prompt for an Amazon RDS for MySQL select SQL command for a
    DE
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s join these two tables to de-normalize the data, by using `join`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.13 – A prompt for an Amazon RDS for MySQL join SQL command for a
    DE](img/B21378_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – A prompt for an Amazon RDS for MySQL join SQL command for a DE
  prefs: []
  type: TYPE_NORMAL
- en: Note the `pull all records from table_emp` instruction in our prompt, which
    Amazon Q Developer correctly converted to `LEFT OUTER JOIN` between two tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s use prompts to create a “store procedure” with output from the preceding
    join to load into an existing table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 7.14 – A prompt for an Amazon RDS for MySQL join SQL command for DE](img/B21378_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – A prompt for an Amazon RDS for MySQL join SQL command for DE
  prefs: []
  type: TYPE_NORMAL
- en: Note that Amazon Q Developer created error-free code to create a “procedure”
    based on our instructions, and it also added the appropriate function to handle
    uppercase instructions for `emp_id`.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding examples, we just scratched the surface of Amazon Q Developer’s
    integration for SQL code development. Feel free to try different questions in
    chat-style prompts and interactive coding to explore further.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore how the Amazon Q Developer supports code explainability and
    optimization for SQL.
  prefs: []
  type: TYPE_NORMAL
- en: SQL code explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer offers a simple interface to achieve code explainability
    and optimization. For more details on the explainability and optimization topic,
    refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate, I am going to use the previously auto-generated code during the
    store procedure creation task. As shown in the following screenshot, highlight
    the code section generated during the store procedure, right-click to open the
    pop-up menu, select **Amazon Q**, and then choose **Explain** for code explainability
    or **Optimize** for optimization recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 –SQL code explainability and optimization](img/B21378_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 –SQL code explainability and optimization
  prefs: []
  type: TYPE_NORMAL
- en: This will pop up Amazon Q Developer’s chat-style interface and use the full
    code for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'For explainability, Amazon Q Developer provides details for almost every line
    of code and at the end provides a summary, such as the following: “**When the
    join_emp_dept stored procedure is called, it will execute the SELECT statement,
    which performs a left outer join between the table_emp and table_dept tables based
    on the emp_id column. The resulting data, including the employee ID in uppercase,
    employee name, and department name, will be inserted into the** **derom_data table****”**.'
  prefs: []
  type: TYPE_NORMAL
- en: For optimization, even though we had a small code fragment with relatively simple
    logic, Amazon Q Developer still provided recommendations to improve the code and
    rewrite it, following the best practices on `join` implementation, added column
    listing to the `insert` statement, added `coalesce`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the preceding topics, Amazon Q Developer provides meaningful
    inputs for DBAs and Des, with auto-generated SQL for relational databases such
    as Amazon RDS MySQL. Additionally, Amazon Q Developer seamlessly integrates with
    columnar databases such as Amazon Redshift. AWS has integrated Amazon Redshift,
    a fully managed AI-powered data warehouse service, with a code assistant that
    allows users to use **natural language processing** (**NLP**) to generate complete
    SQL queries. We will explore this topic in [*Chapter 14*](B21378_14.xhtml#_idTextAnchor210)
    in the *Code assistance integration with Amazon* *Redshift* section.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to SQL, Amazon Q Developer supports several other programming languages.
    There are many developments happening in this area, and we anticipate several
    of these in support of additional languages (check the *References* section at
    the end of the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer represents a groundbreaking innovation in SQL code generation
    and database management for DBAs and DEs. Through various prompting techniques
    and chat-style interactions, professionals can obtain SQL code from Amazon Q Developer.
    This capability helps automate routine SQL tasks, improve code consistency, and
    offer advanced optimization capabilities. It empowers database professionals to
    focus on strategic initiatives, innovation, and delivering superior database-driven
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The integration of Amazon Q Developer with SQL also facilitates collaborative
    database development. Teams working on database-driven applications benefit from
    standardized SQL code templates, shared best practices, and streamlined code review
    processes. This consistency enhances team productivity, reduces the risk of errors
    during database schema modifications or data migrations, and accelerates the time-to-market
    for database-driven applications.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Amazon Q Developer offers insights into SQL code optimization,
    ensuring efficient query performance and resource utilization. By continuously
    improving its recommendations, Amazon Q Developer adapts to the evolving needs
    of database professionals, providing cutting-edge solutions to complex database
    challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, Amazon Q Developer not only automates routine SQL tasks but also fosters
    collaboration and innovation within database teams, ultimately leading to higher
    quality and more efficient database-driven applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we scratched the surface of Amazon Q Developer’s support for
    DBAs and DEs. Feel free to explore other SQL options related to creating common
    database objects, such as views, materialized views, functions, and complex SQL
    queries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce how Amazon Q Developer benefits system
    administration and automation using shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  prefs: []
  type: TYPE_NORMAL
