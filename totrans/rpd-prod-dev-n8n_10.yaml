- en: '*Chapter 8*: Utilizing the Bubble API in n8n'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of how hard we try, we can't be good at everything! Some people are
    great organizers, others are fantastic planners, while still others excel at public
    speaking. When we notice that we are good at something, we tend to focus on that
    thing and pursue it, making us even better at it.
  prefs: []
  type: TYPE_NORMAL
- en: No-code tools are like that as well. They discover what they are really good
    at and focus on it. n8n is really good at connecting systems and automating their
    tasks, which is the major focus of this tool.
  prefs: []
  type: TYPE_NORMAL
- en: And sometimes, just as with people, if no-code tools want to get something accomplished
    but need a little help, they will turn to a friend.
  prefs: []
  type: TYPE_NORMAL
- en: For us, we have turned to Bubble to be n8n's partner. Bubble is designed to
    be a really good web app development tool, allowing us to create a web frontend
    for n8n. It allows no-code builders to design web pages for submitting information
    to n8n or even complete web applications so that n8n can then connect the data
    to other systems and automate the processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Bubble **application programming interface** (**API**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Bubble's data structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Bubble's workflow engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bubble's Data API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bubble's Workflow API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving events and data from Bubble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have completed this chapter, you will know how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Communicate between Bubble and n8n.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access Bubble's data using the Data API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Bubble's workflows and interact with them using the Workflow API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receive events and data from Bubble in n8n.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the completed code examples for the chapter on GitHub at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%208](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%208).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Bubble API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have worked with other APIs in the past, you should feel entirely comfortable
    working with the Bubble API. It follows relatively standard API design practices,
    such as using regular **HyperText Transfer Protocol** (**HTTP**) responses and
    **HTTP Secure** (**HTTPS**) for over-the-wire encryption.
  prefs: []
  type: TYPE_NORMAL
- en: However, some specifics about the API will make it easier for you to find success
    early if you learn them upfront.
  prefs: []
  type: TYPE_NORMAL
- en: Bubble API endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The primary endpoint for your app depends on a few factors, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Are you using a custom domain?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you using the live or development environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which version of the API are you using?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base URL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first item to look at is whether you are using a custom domain or not for
    your Bubble app. This is used to figure out your base **Uniform Resource Locator**
    (**URL**). You can determine whether or not you are using a custom domain by opening
    up your Bubble app, going to the **Settings** menu, and then clicking on the **Domain
    / email** tab, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Bubble domain settings without a custom domain'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Bubble domain settings without a custom domain
  prefs: []
  type: TYPE_NORMAL
- en: If you have a custom domain, it is registered in this location. Otherwise, it
    displays the default settings, as shown in *Figure 8.1*.
  prefs: []
  type: TYPE_NORMAL
- en: For default domain settings, the base URL is `https://<appname>.bubbleapps.io`,
    where `<appname>` is the name you have provided for your app. For example, if
    you named your application `fancyApp`, then the base URL is [https://fancyApp.bubbleapps.io](https://fancyApp.bubbleapps.io).
  prefs: []
  type: TYPE_NORMAL
- en: If you have a custom domain for your app, then the URL is your custom domain.
  prefs: []
  type: TYPE_NORMAL
- en: Live or development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next factor used to determine your API endpoint is whether you are using
    the live or development version of your Bubble application. By default, you will
    be in the development version. Once you are ready to make your application public,
    you can then switch it to the live version.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that the API endpoints change when you go from the development version
    to the live version.
  prefs: []
  type: TYPE_NORMAL
- en: If you use the live version of the application, then the path after the base
    URL is `/api`, but if you are performing some testing on the development version
    of your application, then this subdirectory is `/version-test/api`.
  prefs: []
  type: TYPE_NORMAL
- en: API version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chances are, you are using the latest version of the API. Version 1.1 was released
    on January 19, 2017, and if you created your application after January 19, 2017,
    you are probably using version 1.1.
  prefs: []
  type: TYPE_NORMAL
- en: The path after specifying your environment is your API version. This is either
    `/1.0` or `/1.1`, based on when your application was created.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow or data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bubble can be broken into two different pieces: workflow and data. Workflow
    deals with events that occur within Bubble (for example, a button is clicked),
    and then it performs specific actions based on how you have configured Bubble.'
  prefs: []
  type: TYPE_NORMAL
- en: The data piece refers to the built-in database that Bubble uses (for example,
    information about a newsletter). It is all about saving, changing, and deleting
    data within the Bubble environment.
  prefs: []
  type: TYPE_NORMAL
- en: Once your API version is specified, you need to indicate whether you access
    the Workflow or Data API. This is done in the next part of the path. If you are
    accessing the Workflow data, the next part of the path is `/wf`. Meanwhile, if
    you want to access the Data portion of the API, this part of the path is `/obj`.
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final part of the endpoint is to specify the name of the item you are accessing.
    Depending on whether you are accessing a workflow or a data item, this value specifies
    that item.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you are accessing a data item named `users`, the path portion
    after `/obj` is `/users`.
  prefs: []
  type: TYPE_NORMAL
- en: Building your API endpoint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have a solid understanding of how the API endpoints are put together,
    let's demonstrate how to build an API endpoint using an example.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume we are accessing the development version of the newsletter information
    collected by the `myApp` application we created in May 2019\. There is a plan
    to use a custom domain for this application, but it hasn't been deployed yet.
  prefs: []
  type: TYPE_NORMAL
- en: Since this application doesn't have a custom domain, the base URL is https://myApp.bubbleapps.io.
    We are accessing the development environment, so we add `/version-test/api` to
    the path. This application uses version 1.1 of the API as it was created after
    January 19, 2017, and this portion of the path is `/1.1`. We then add `/obj` to
    the path followed by the `/newsletter` data item name to access the Data API.
  prefs: []
  type: TYPE_NORMAL
- en: Our final API endpoint in this example is `https://myApp.bubbleapps.io/version-test/api/1.1/obj/newsletter`.
  prefs: []
  type: TYPE_NORMAL
- en: Bubble API settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can control several aspects of the Bubble API for your application. By
    going to **Settings** in the application and selecting the **API** tab, as illustrated
    in the following screenshot, you can make several changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Bubble API setting options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Bubble API setting options
  prefs: []
  type: TYPE_NORMAL
- en: Enabling/disabling API access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can enable or disable API access by selecting or deselecting the checkbox
    next to **Enable Workflow API and backend workflows** or **Enable Data API**.
  prefs: []
  type: TYPE_NORMAL
- en: You can also specify workflows or data items by selecting or deselecting the
    checkbox next to their name.
  prefs: []
  type: TYPE_NORMAL
- en: API tokens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To secure your API access, it is essential to create a private API key. You
    can regenerate an API token in this section or create a new token altogether.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can authenticate using the API token by adding a header with a key of `Bearer
    <API key>`, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Bubble API header authentication'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Bubble API header authentication
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better understanding of how Bubble's API works so that we
    can access data from other systems, let's delve a bit deeper into the actual structure
    of that data. This is important so that you know exactly what you are retrieving
    when using the API and you will be able to properly navigate around the API to
    retrieve specific data.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Bubble's data structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To properly use the Bubble API to access and modify data, it is crucial to understand
    how data is stored in Bubble.
  prefs: []
  type: TYPE_NORMAL
- en: Data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Bubble, a data type is essentially the equivalent of a **JavaScript Object
    Notation** (**JSON**) object. It is defined in Bubble under the **Data** section
    for the application and provides a list of fields (represented by a key in JSON).
    Each field is a property of the data type. You can see a sample Bubble data type
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Sample Bubble data type'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – Sample Bubble data type
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the **Newsletter** data type in the preceding screenshot has six
    fields, two of which are custom, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Content** —The actual body of the newsletter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Title** —The newsletter''s title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Four of the fields are default fields, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creator**—The username of the person who created the record/newsletter entry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modified Date**—The date the record was last created, changed, or updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Created Date**—The date the record was initially created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slug**—Shortcut used for accessing the record, usually when using a URL form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data security (privacy)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two general privacy or data security settings for data types, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Public** privacy setting gives everyone access to read the data in the
    data type. This is generally frowned upon unless the data is truly public and
    you do not care who can read the information.
  prefs: []
  type: TYPE_NORMAL
- en: The **Private** privacy setting prevents anyone but the creator of the data
    type from actually interacting with the data. This is the preferred security setting
    for data types.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows Bubble private permissions with API access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Bubble private permissions with API access'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – Bubble private permissions with API access
  prefs: []
  type: TYPE_NORMAL
- en: 'To access secured data via the API, you need to do a few things, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable access to the data type in the **Settings API** tab for the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select at least one of the API settings (**Modify by API**, **Delete via API**,
    and **Create via API**) in the **Privacy** tab for the data type in the **Data**
    section of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authenticate using the API key from the **Settings API** tab for the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding Bubble's data structure is a crucial step to enabling automation.
    While n8n is our preferred tool for automation, Bubble has its own workflow engine
    built into the system, which we will summarize next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Bubble's workflow engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bubble has its own version of automation built into the system. It is not as
    robust or functional as n8n, as it is designed to automate and communicate with
    itself and excels at this. Each workflow executes one or more steps to perform
    actions supported by the Bubble application.
  prefs: []
  type: TYPE_NORMAL
- en: There are two different kinds of workflows in the Bubble environment. The first
    kind is frontend workflows. These are workflows designed to interact with users
    when they perform an action on one of Bubble's application pages. For example,
    when you click on the **Submit** button in Bubble, this executes a frontend workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, there are also backend workflows. These workflows are designed to
    be non-interactive with the user and perform automated tasks based on various
    triggers such as time of day, changes to data, or input/requests from an API.
  prefs: []
  type: TYPE_NORMAL
- en: When interacting with Bubble's workflow engine, n8n specifically talks with
    backend API workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on how the API workflow is configured, you can send data to the API,
    which will be used in the workflow. For example, the `send-email` workflow will
    accept the following inputs from the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subject`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Sample backend API workflow configuration screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – Sample backend API workflow configuration screen
  prefs: []
  type: TYPE_NORMAL
- en: So, now that we have a general understanding of the workflow engine, let's begin
    using the actual Bubble APIs, starting with the Data API.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bubble's Data API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessing Bubble's data with n8n is relatively trivial using the Data API. Depending
    upon the endpoint accessed and the HTTP method used, you can manipulate the data
    in the Bubble application in any way that you want.
  prefs: []
  type: TYPE_NORMAL
- en: To load some sample n8n nodes to work with the Data API, please see the `Bubble_API.json`
    workflow at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Data_API.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Data_API.json).
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you can work with the Bubble Data API in n8n, you will need to create
    proper credentials. We will be using the **HTTP Request** node for all of our
    API interactions, so we need to create a **Header Auth** credential, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Header Auth credential for accessing Bubble APIs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.07_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – Header Auth credential for accessing Bubble APIs
  prefs: []
  type: TYPE_NORMAL
- en: It is important that the **Name** field under **Credential Data** be populated
    with **Authorization**, and the **Value** field must be populated with **Bearer**,
    followed by your API private key, which can be found in the **Settings** section
    under the **API** tab.
  prefs: []
  type: TYPE_NORMAL
- en: You must also make certain that you provide access to the **HTTP Request** node.
  prefs: []
  type: TYPE_NORMAL
- en: Data manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have created your credentials, you can now use them to work with Bubble
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the different ways in which you can retrieve and manipulate
    data in Bubble using the Data API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Table_8.01_B17493.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In each of the endpoints, two special words represent actual unique values
    from your Bubble application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`typename`—This is the actual name of the data type in Bubble. This is generally
    the name of the data type in lowercase with all spaces removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`—The **unique identifier** (**UID**) number for the record in Bubble.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, if you had a data type of `1626690254917x279129440443256930`, you
    would be able to retrieve this record using the `https://appname.bubbleapps.io/api/1.1/obj/newsletter/1626690254917x279129440443256930`
    endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: We now have all the information we need to start working with the data in the
    Bubble application.
  prefs: []
  type: TYPE_NORMAL
- en: 'n8n uses the **HTTP Request** node to perform all data manipulation, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Using the n8n HTTP Request node to manipulate Bubble data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – Using the n8n HTTP Request node to manipulate Bubble data
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the information provided in the previous table, we can configure the
    **HTTP Request** node to work with the data however we wish. In the following
    screenshot, you can see the general settings for the **HTTP Request** node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – General HTTP Request node settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – General HTTP Request node settings
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, all of the **HTTP Request** nodes will have the following settings
    in common:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header Auth**—Select the Bubble API credentials that you created earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**—**Header Auth**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore SSL Issues**—**False**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Format**—**JSON**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON/RAW Parameters**—**False**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once these are set, you can now go on to the custom settings for each action.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read all data from the API, set the `GET` and the URL to the endpoint of
    the data type (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename`).
    This will generate a JSON object containing an array of all the records in the
    data type. The output will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will return up to 100 records at a time.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to just get the information from a specific record, you can specify
    the ID by appending it to the end of the URL (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`).
    This will only return a single record.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new record, set the `POST` and the URL to the endpoint of the data
    type (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename`). Then,
    create a body parameter for each custom field along with the value you would like
    the field value to be. The process is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Body parameters for creating, updating, or replacing record
    data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Body parameters for creating, updating, or replacing record data
  prefs: []
  type: TYPE_NORMAL
- en: The API will return a status value and the ID of the new record in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: You can also update a specific record in the data type by setting the `PATCH`
    and then submitting the request to the record's endpoint (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`),
    along with one or more body parameters with the field information that needs to
    be updated. If this update is successful, it will not return any data and will
    respond with a `204` status code.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing an entire record is similar to updating a record with two exceptions.
    First, the value in the `PUT`, and second, the body must contain all custom field
    values. It also returns no data and a `204` reply code when successful.
  prefs: []
  type: TYPE_NORMAL
- en: The last action that you can do with the API is delete a record. Much as with
    returning a single record, you use the record's endpoint (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`)
    and set the `DELETE`.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, there are too many records to work through when requesting data using
    the `GET` request method when you don't know the record ID. Fortunately, there
    are a number of additional search options that will allow you to reduce the number
    of records returned in each API request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The search criteria are entered as query parameters in the **HTTP Request**
    node as name-value pairs, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Setting search limits using query parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.11 – Setting search limits using query parameters
  prefs: []
  type: TYPE_NORMAL
- en: The first way of reducing the number of records returned is to use the `limit`
    parameter. For example, setting the `limit` parameter to `2` will only return
    one record at a time.
  prefs: []
  type: TYPE_NORMAL
- en: This is all fine and good if the record you want is in the first set of records
    (referred to as a `cursor` parameter comes into play. The `cursor` parameter,
    you can start your search from a specific record. The record index counts up by
    one and starts at zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting the `cursor` parameter can be useful when you determine its value by
    using the three key/value pairs returned by a previous `GET` query. These three
    pairs are described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursor`—The record index of the first item in the results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remaining`—The number of records that are remaining after this page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count`—The number of items returned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also control the order in which the data is returned by using the `sort_field`
    parameter and setting it to the name of one of the data fields. Adding the `descending`
    parameter and setting it to either `true` or `false` will also control whether
    the data is sorted in descending or ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: If you set the `sort_field` parameter to `_random_sorting`, it will return the
    records in random order. So, to receive a single random record, you can set the
    `limit` parameter to `1` and the `sort_field` parameter to `_random_sorting`!
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to limit the number of records that are returned from the API is
    to use the `contraints` parameter. This contains an array of one or more JSON
    objects that tells the API how to limit the incoming data. Each JSON object has
    three key-value pairs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key`—The name of the field to use for the constraint. You can use the `_all`
    keyword to check all fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`constraint_type`—The type of constraint to apply, which can be one of the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`equals`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not equal`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_empty`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_not_empty`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text contains`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not text contains`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`greater than`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`less than`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not in`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contains`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not contains`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`empty`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not empty`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geographic_search`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`—The value that is used to constrain the search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if we wanted to only return records where the `title_text` field
    has the word `Newsletter` in it, we would set the `constraints` parameter to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can have as many JSON records as you wish in this array.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should have a good understanding of how the Bubble Data API works,
    so let's take a closer look at the Workflow API.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bubble's Workflow API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Workflow API is generally used to activate a Bubble workflow and sometimes
    to pass information to the Bubble app. You will use the same credentials and the
    **HTTP Request** node to activate workflows and send data.
  prefs: []
  type: TYPE_NORMAL
- en: Activating a workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `POST` request method to activate the workflow and will receive a `"status":
    "success"` response if it runs correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **URL** field for the **HTTP Request** node will be made up of the following
    two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://<appname>.bubbleapps.io/api/1.1/wf`, where `<appname>` is the name
    of your Bubble application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflow name**—This is the name of your workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, for example, to activate the `send-email` workflow in my `n8n-book` app,
    I would use `https://n8n-book.bubbleapps.io/version-test/api/1.1/wf/send-email`
    for the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Sending data to a workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to send data to a workflow, the workflow needs to have the parameters
    defined in the API workflow (see *Figure 8.6*), and then the parameters need to
    be defined in the action as dynamic data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the three parameters that can be sent to the `send-email` workflow
    via the API are these:'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subject`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Sample workflow action with dynamic data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – Sample workflow action with dynamic data
  prefs: []
  type: TYPE_NORMAL
- en: 'To send this information to the workflow via the Workflow API using the n8n
    **HTTP Request** node, add a body parameter for each of the values, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Body parameters to send to the Workflow API'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.13_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – Body parameters to send to the Workflow API
  prefs: []
  type: TYPE_NORMAL
- en: 'When the **HTTP Request** node is executed, it will send the information to
    the workflow and use it as inputs to be processed accordingly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Email sent using Bubble Workflow API and submitted data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.14_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – Email sent using Bubble Workflow API and submitted data
  prefs: []
  type: TYPE_NORMAL
- en: You can get a copy of this sample workflow from the GitHub repository at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Workflow_API.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Workflow_API.json).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to activate workflows and send data to Bubble, let's flip
    things around and get Bubble to activate workflows and send data to n8n.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving events and data from Bubble
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bubble can send events to n8n and even send data. By designing n8n to receive
    this information, Bubble can directly execute n8n workflows and extend its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring n8n
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To do this, first create a simple **Webhook** node with the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication**—**None**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bubble`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`200`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Mode**—**Last Node**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Data**—**First Entry JSON**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also copy the test **Webhook** URL as you will need this information
    when configuring Bubble.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add a `n8n received the following data on {{new Date().toDateString()}}
    at {{new Date().toTimeString()}}: {{$json["body"]["data"]}}`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, save the workflow so that the Webhook initializes.
  prefs: []
  type: TYPE_NORMAL
- en: You can get a copy of this workflow on GitHub from [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Events.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Events.json).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Bubble
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that n8n is ready to go, it's time to prepare Bubble.
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure that the **API Connector** plugin is installed in your Bubble
    application. If it isn't, install it now. You can read more about the **API Connector**
    plugin at [https://manual.bubble.io/core-resources/bubble-made-plugins/api-connector](https://manual.bubble.io/core-resources/bubble-made-plugins/api-connector).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to configure the **API Connector** plugin. On the **API Connector**
    plugin page, click on the **Add another API** button. Set the **API Name** field
    to **n8n Workflow**.
  prefs: []
  type: TYPE_NORMAL
- en: To configure the API call, click on `GET` to `POST` and then pass the test **Webhook**
    URL into the field next to it.
  prefs: []
  type: TYPE_NORMAL
- en: Add a parameter to send to n8n by clicking on the **Add parameter** button.
    Then, for the **Key** value, enter **data**, and for **Value**, enter **Running
    Sloth Festival**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin should now be ready to initialize by sending information to n8n
    and looking at the response that it sends back. To initialize the plugin, first,
    go back to your n8n workflow and click the **Execute Workflow** button to start
    the Webhook listening for input. You should then see a screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Initializing a response from n8n'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.15_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – Initializing a response from n8n
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, return to the Bubble plugin and click the **Initialize call** button.
    A pop-up window should appear with the response sent by n8n. Click the **Show
    raw data** text to see the exact response sent by n8n. This should match the information
    shown in the n8n **Set** node, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Completed Bubble API Connector plugin'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.16_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – Completed Bubble API Connector plugin
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, whenever you are working on a workflow in Bubble, you can use the **n8n
    Workflow - Send n8n Data** action in the **Plugins** section, as illustrated in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – New n8n action in the Bubble workflow editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.17_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – New n8n action in the Bubble workflow editor
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have configured both n8n and Bubble to work in harmony, you can
    extend Bubble however you wish with all the power of n8n, its nodes, and any of
    the services that n8n can access. This opens up your Bubble application to do
    almost anything that you can dream of.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Bubble API. We worked with the Data API
    to manipulate information in Bubble and the Workflow API to execute workflows.
    We also learned how to do all of this using n8n, primarily with the **HTTP Request**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to use Bubble to activate Webhooks in n8n and pass information
    between the two systems.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, using Bubble, we are going to be learning how to build
    the frontend of an application that will use n8n on the backend to process information.
  prefs: []
  type: TYPE_NORMAL
