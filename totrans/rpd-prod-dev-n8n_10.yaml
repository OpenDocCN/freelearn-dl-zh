- en: '*Chapter 8*: Utilizing the Bubble API in n8n'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 8 章*：在 n8n 中利用 Bubble API'
- en: Regardless of how hard we try, we can't be good at everything! Some people are
    great organizers, others are fantastic planners, while still others excel at public
    speaking. When we notice that we are good at something, we tend to focus on that
    thing and pursue it, making us even better at it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们多么努力，我们不可能在所有事情上都做得很好！有些人擅长组织，有些人擅长规划，而有些人擅长公共演讲。当我们注意到我们在某件事上做得很好时，我们往往会专注于那件事并追求它，使我们在这方面变得更加出色。
- en: No-code tools are like that as well. They discover what they are really good
    at and focus on it. n8n is really good at connecting systems and automating their
    tasks, which is the major focus of this tool.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无代码工具也是如此。它们发现它们真正擅长的事情并专注于它。n8n 真的很擅长连接系统和自动化它们的任务，这是这个工具的主要焦点。
- en: And sometimes, just as with people, if no-code tools want to get something accomplished
    but need a little help, they will turn to a friend.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，就像人一样，如果无代码工具想要完成某事但需要一点帮助，它们会转向朋友。
- en: For us, we have turned to Bubble to be n8n's partner. Bubble is designed to
    be a really good web app development tool, allowing us to create a web frontend
    for n8n. It allows no-code builders to design web pages for submitting information
    to n8n or even complete web applications so that n8n can then connect the data
    to other systems and automate the processes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们来说，我们已经转向 Bubble 成为 n8n 的合作伙伴。Bubble 被设计成一款非常好的网络应用程序开发工具，使我们能够为 n8n 创建网络前端。它允许无代码构建者设计网页以提交信息到
    n8n，甚至完整的网络应用程序，以便 n8n 可以将数据连接到其他系统并自动化流程。
- en: 'This chapter covers the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Introducing the Bubble **application programming interface** (**API**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Bubble **应用程序编程接口**（**API**）
- en: Understanding Bubble's data structure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Bubble 的数据结构
- en: Understanding Bubble's workflow engine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Bubble 的工作流引擎
- en: Using Bubble's Data API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bubble 的 Data API
- en: Using Bubble's Workflow API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bubble 的 Workflow API
- en: Receiving events and data from Bubble
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Bubble 接收事件和数据
- en: 'Once you have completed this chapter, you will know how to do the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成本章，您将知道如何做以下事情：
- en: Communicate between Bubble and n8n.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Bubble 和 n8n 之间进行通信。
- en: Access Bubble's data using the Data API.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据 API 访问 Bubble 的数据。
- en: Use Bubble's workflows and interact with them using the Workflow API.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Bubble 的工作流并通过 Workflow API 与它们交互。
- en: Receive events and data from Bubble in n8n.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 n8n 中接收来自 Bubble 的事件和数据。
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the completed code examples for the chapter on GitHub at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%208](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%208).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章的完整代码示例，链接为 [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%208](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%208)。
- en: Introducing the Bubble API
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Bubble API
- en: If you have worked with other APIs in the past, you should feel entirely comfortable
    working with the Bubble API. It follows relatively standard API design practices,
    such as using regular **HyperText Transfer Protocol** (**HTTP**) responses and
    **HTTP Secure** (**HTTPS**) for over-the-wire encryption.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前使用过其他 API，您应该会完全舒适地使用 Bubble API。它遵循相对标准的 API 设计实践，例如使用常规 **超文本传输协议**（**HTTP**）响应和
    **HTTP 安全**（**HTTPS**）进行线上加密。
- en: However, some specifics about the API will make it easier for you to find success
    early if you learn them upfront.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您提前了解一些关于 API 的具体信息，这将使您更容易早期取得成功。
- en: Bubble API endpoints
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bubble API 端点
- en: 'The primary endpoint for your app depends on a few factors, such as the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您应用程序的主要端点取决于几个因素，如下所示：
- en: Are you using a custom domain?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否正在使用自定义域名？
- en: Are you using the live or development environment?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是在使用实时环境还是开发环境？
- en: Which version of the API are you using?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在使用哪个版本的 API？
- en: Base URL
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础 URL
- en: 'The first item to look at is whether you are using a custom domain or not for
    your Bubble app. This is used to figure out your base **Uniform Resource Locator**
    (**URL**). You can determine whether or not you are using a custom domain by opening
    up your Bubble app, going to the **Settings** menu, and then clicking on the **Domain
    / email** tab, as illustrated in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要考虑的是，您是否为您的 Bubble 应用程序使用了自定义域名。这用于确定您的基 **统一资源定位符**（**URL**）。您可以通过打开 Bubble
    应用程序，转到 **设置** 菜单，然后点击 **域名/电子邮件** 选项卡来确定您是否正在使用自定义域名，如下面的截图所示：
- en: '![Figure 8.1 – Bubble domain settings without a custom domain'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – 无自定义域的Bubble域设置'
- en: '](img/Figure_8.01_B17493.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.01_B17493.jpg)'
- en: Figure 8.1 – Bubble domain settings without a custom domain
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 无自定义域的Bubble域设置
- en: If you have a custom domain, it is registered in this location. Otherwise, it
    displays the default settings, as shown in *Figure 8.1*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个自定义域，它将注册在这个位置。否则，它将显示默认设置，如图*图8.1*所示。
- en: For default domain settings, the base URL is `https://<appname>.bubbleapps.io`,
    where `<appname>` is the name you have provided for your app. For example, if
    you named your application `fancyApp`, then the base URL is [https://fancyApp.bubbleapps.io](https://fancyApp.bubbleapps.io).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于默认域设置，基础URL是`https://<appname>.bubbleapps.io`，其中`<appname>`是你为你的应用程序提供的名称。例如，如果你将你的应用程序命名为`fancyApp`，那么基础URL是[https://fancyApp.bubbleapps.io](https://fancyApp.bubbleapps.io)。
- en: If you have a custom domain for your app, then the URL is your custom domain.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为你的应用程序有自定义域，那么URL是你的自定义域。
- en: Live or development
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时或开发
- en: The next factor used to determine your API endpoint is whether you are using
    the live or development version of your Bubble application. By default, you will
    be in the development version. Once you are ready to make your application public,
    you can then switch it to the live version.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 确定你的API端点的下一个因素是你在使用Bubble应用的实时版本还是开发版本。默认情况下，你将在开发版本中。一旦你准备好将你的应用程序公开，你就可以将其切换到实时版本。
- en: Be aware that the API endpoints change when you go from the development version
    to the live version.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你从开发版本切换到实时版本时，API端点会发生变化。
- en: If you use the live version of the application, then the path after the base
    URL is `/api`, but if you are performing some testing on the development version
    of your application, then this subdirectory is `/version-test/api`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用应用程序的实时版本，那么基础URL之后的路径是`/api`，但如果你正在对你的应用程序的开发版本进行一些测试，那么这个子目录是`/version-test/api`。
- en: API version
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API版本
- en: Chances are, you are using the latest version of the API. Version 1.1 was released
    on January 19, 2017, and if you created your application after January 19, 2017,
    you are probably using version 1.1.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你正在使用API的最新版本。版本1.1于2017年1月19日发布，如果你是在2017年1月19日之后创建的应用程序，那么你很可能正在使用版本1.1。
- en: The path after specifying your environment is your API version. This is either
    `/1.0` or `/1.1`, based on when your application was created.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 指定你的环境之后的路径是你的API版本。这取决于你的应用程序是在何时创建的，要么是`/1.0`要么是`/1.1`。
- en: Workflow or data
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作流或数据
- en: 'Bubble can be broken into two different pieces: workflow and data. Workflow
    deals with events that occur within Bubble (for example, a button is clicked),
    and then it performs specific actions based on how you have configured Bubble.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Bubble可以分为两个不同的部分：工作流和数据。工作流处理在Bubble中发生的事件（例如，按钮被点击），然后根据您对Bubble的配置执行特定的操作。
- en: The data piece refers to the built-in database that Bubble uses (for example,
    information about a newsletter). It is all about saving, changing, and deleting
    data within the Bubble environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 数据块指的是Bubble使用的内置数据库（例如，关于通讯录的信息）。它主要涉及在Bubble环境中保存、更改和删除数据。
- en: Once your API version is specified, you need to indicate whether you access
    the Workflow or Data API. This is done in the next part of the path. If you are
    accessing the Workflow data, the next part of the path is `/wf`. Meanwhile, if
    you want to access the Data portion of the API, this part of the path is `/obj`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦指定了API版本，你需要指出你是否访问工作流或数据API。这将在路径的下一部分完成。如果你正在访问工作流数据，路径的下一部分是`/wf`。同时，如果你想访问API的数据部分，这部分路径是`/obj`。
- en: Name
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 名称
- en: The final part of the endpoint is to specify the name of the item you are accessing.
    Depending on whether you are accessing a workflow or a data item, this value specifies
    that item.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 端点的最后一部分是指定你要访问的项目名称。根据你是否访问工作流或数据项，这个值指定了那个项目。
- en: For example, if you are accessing a data item named `users`, the path portion
    after `/obj` is `/users`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你正在访问一个名为`users`的数据项，那么`/obj`之后的路径部分是`/users`。
- en: Building your API endpoint
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建你的API端点
- en: Now that we have a solid understanding of how the API endpoints are put together,
    let's demonstrate how to build an API endpoint using an example.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对API端点的构建有了稳固的理解，让我们通过一个示例来展示如何构建一个API端点。
- en: Let's assume we are accessing the development version of the newsletter information
    collected by the `myApp` application we created in May 2019\. There is a plan
    to use a custom domain for this application, but it hasn't been deployed yet.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在访问2019年5月创建的`myApp`应用程序收集的新闻稿信息开发版本。有一个计划为该应用程序使用自定义域名，但尚未部署。
- en: Since this application doesn't have a custom domain, the base URL is https://myApp.bubbleapps.io.
    We are accessing the development environment, so we add `/version-test/api` to
    the path. This application uses version 1.1 of the API as it was created after
    January 19, 2017, and this portion of the path is `/1.1`. We then add `/obj` to
    the path followed by the `/newsletter` data item name to access the Data API.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此应用程序没有自定义域名，基础URL是https://myApp.bubbleapps.io。我们正在访问开发环境，因此我们在路径中添加`/version-test/api`。此应用程序使用API的1.1版本，因为它是在2017年1月19日之后创建的，因此路径的这一部分是`/1.1`。然后我们在路径中添加`/obj`，后面跟着`/newsletter`数据项名称，以访问数据API。
- en: Our final API endpoint in this example is `https://myApp.bubbleapps.io/version-test/api/1.1/obj/newsletter`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们的最终API端点是`https://myApp.bubbleapps.io/version-test/api/1.1/obj/newsletter`。
- en: Bubble API settings
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bubble API设置
- en: 'You can control several aspects of the Bubble API for your application. By
    going to **Settings** in the application and selecting the **API** tab, as illustrated
    in the following screenshot, you can make several changes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以控制Bubble API的多个方面。通过访问应用程序中的**设置**并选择**API**选项卡，如图下所示，您可以进行多项更改：
- en: '![Figure 8.2 – Bubble API setting options'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 – Bubble API设置选项'
- en: '](img/Figure_8.02_B17493.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.02_B17493.jpg)'
- en: Figure 8.2 – Bubble API setting options
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – Bubble API设置选项
- en: Enabling/disabling API access
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用/禁用API访问
- en: You can enable or disable API access by selecting or deselecting the checkbox
    next to **Enable Workflow API and backend workflows** or **Enable Data API**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过选择或取消选择**启用工作流API和后端工作流**或**启用数据API**旁边的复选框来启用或禁用API访问。
- en: You can also specify workflows or data items by selecting or deselecting the
    checkbox next to their name.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过选择或取消选择其名称旁边的复选框来指定工作流或数据项。
- en: API tokens
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API令牌
- en: To secure your API access, it is essential to create a private API key. You
    can regenerate an API token in this section or create a new token altogether.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您的API访问安全，创建一个私有的API密钥是至关重要的。您可以在本节中重新生成API令牌，或者完全创建一个新的令牌。
- en: 'You can authenticate using the API token by adding a header with a key of `Bearer
    <API key>`, as illustrated in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过添加一个键为`Bearer <API key>`的头部来使用API令牌进行认证，如图下所示：
- en: '![Figure 8.3 – Bubble API header authentication'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3 – Bubble API头部认证'
- en: '](img/Figure_8.03_B17493.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.03_B17493.jpg)'
- en: Figure 8.3 – Bubble API header authentication
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – Bubble API头部认证
- en: Now that we have a better understanding of how Bubble's API works so that we
    can access data from other systems, let's delve a bit deeper into the actual structure
    of that data. This is important so that you know exactly what you are retrieving
    when using the API and you will be able to properly navigate around the API to
    retrieve specific data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Bubble的API工作方式有了更好的理解，以便我们可以从其他系统访问数据，让我们更深入地了解数据的实际结构。这很重要，这样您在使用API时就能确切知道您正在检索什么，您将能够正确地导航API以检索特定数据。
- en: Understanding Bubble's data structure
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Bubble的数据结构
- en: To properly use the Bubble API to access and modify data, it is crucial to understand
    how data is stored in Bubble.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确使用Bubble API访问和修改数据，了解数据在Bubble中的存储方式至关重要。
- en: Data types
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型
- en: 'In Bubble, a data type is essentially the equivalent of a **JavaScript Object
    Notation** (**JSON**) object. It is defined in Bubble under the **Data** section
    for the application and provides a list of fields (represented by a key in JSON).
    Each field is a property of the data type. You can see a sample Bubble data type
    in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bubble中，数据类型本质上等同于**JavaScript对象表示法**（**JSON**）对象。它在应用程序的**数据**部分下定义，并提供了一个字段列表（在JSON中表示为键）。每个字段都是数据类型的属性。您可以在以下屏幕截图中看到一个示例Bubble数据类型：
- en: '![Figure 8.4 – Sample Bubble data type'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 – 示例Bubble数据类型'
- en: '](img/Figure_8.04_B17493.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.04_B17493.jpg)'
- en: Figure 8.4 – Sample Bubble data type
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 示例Bubble数据类型
- en: 'For example, the **Newsletter** data type in the preceding screenshot has six
    fields, two of which are custom, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如图所示的**Newsletter**数据类型有六个字段，其中两个是自定义的，如下所示：
- en: '**Content** —The actual body of the newsletter'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容** —新闻稿的实际正文'
- en: '**Title** —The newsletter''s title'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题** —通讯录的标题'
- en: 'Four of the fields are default fields, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 其中四个字段是默认字段，如下所示：
- en: '**Creator**—The username of the person who created the record/newsletter entry'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建者**—创建记录/通讯录条目的用户的用户名'
- en: '**Modified Date**—The date the record was last created, changed, or updated'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修改日期**—记录最后创建、更改或更新的日期'
- en: '**Created Date**—The date the record was initially created'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建日期**—记录最初创建的日期'
- en: '**Slug**—Shortcut used for accessing the record, usually when using a URL form'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**别名**—用于访问记录的快捷方式，通常在URL形式中使用'
- en: Data security (privacy)
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据安全（隐私）
- en: 'There are two general privacy or data security settings for data types, as
    follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据类型，存在两种一般的隐私或数据安全设置，如下所示：
- en: '**Public**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共**'
- en: '**Private**'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有**'
- en: The **Public** privacy setting gives everyone access to read the data in the
    data type. This is generally frowned upon unless the data is truly public and
    you do not care who can read the information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共**隐私设置允许每个人访问读取数据类型中的数据。这通常是不被推荐的，除非数据确实是公共的，并且你不在乎谁可以读取信息。'
- en: The **Private** privacy setting prevents anyone but the creator of the data
    type from actually interacting with the data. This is the preferred security setting
    for data types.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**私有**隐私设置阻止除数据类型创建者之外的人实际与数据交互。这是数据类型的首选安全设置。'
- en: 'The following screenshot shows Bubble private permissions with API access:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Bubble具有API访问权限的私有权限：
- en: '![Figure 8.5 – Bubble private permissions with API access'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.5 – Bubble具有API访问权限的私有权限'
- en: '](img/Figure_8.05_B17493.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.05_B17493.jpg)'
- en: Figure 8.5 – Bubble private permissions with API access
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – Bubble具有API访问权限的私有权限
- en: 'To access secured data via the API, you need to do a few things, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过API访问受保护的数据，你需要做几件事情，如下所示：
- en: Enable access to the data type in the **Settings API** tab for the application.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的**设置API**选项卡中启用对数据类型的访问。
- en: Select at least one of the API settings (**Modify by API**, **Delete via API**,
    and **Create via API**) in the **Privacy** tab for the data type in the **Data**
    section of the application.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的**数据**部分的**隐私**选项卡中选择至少一个API设置（**通过API修改**、**通过API删除**和**通过API创建**）。
- en: Authenticate using the API key from the **Settings API** tab for the application.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用应用程序的**设置API**选项卡中的API密钥进行身份验证。
- en: Understanding Bubble's data structure is a crucial step to enabling automation.
    While n8n is our preferred tool for automation, Bubble has its own workflow engine
    built into the system, which we will summarize next.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Bubble的数据结构是实现自动化的关键步骤。虽然n8n是我们首选的自动化工具，但Bubble在系统中集成了自己的工作流引擎，我们将在下文中总结。
- en: Understanding Bubble's workflow engine
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Bubble的工作流引擎
- en: Bubble has its own version of automation built into the system. It is not as
    robust or functional as n8n, as it is designed to automate and communicate with
    itself and excels at this. Each workflow executes one or more steps to perform
    actions supported by the Bubble application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Bubble在系统中集成了自己的自动化版本。它不如n8n强大或功能丰富，因为它旨在自动化并与自身通信，在这方面表现卓越。每个工作流执行一个或多个步骤以执行Bubble应用程序支持的操作。
- en: There are two different kinds of workflows in the Bubble environment. The first
    kind is frontend workflows. These are workflows designed to interact with users
    when they perform an action on one of Bubble's application pages. For example,
    when you click on the **Submit** button in Bubble, this executes a frontend workflow.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bubble环境中存在两种不同类型的工作流。第一种是前端工作流。这些工作流旨在用户在Bubble的应用程序页面上执行操作时与用户交互。例如，当你在Bubble中点击**提交**按钮时，这会执行一个前端工作流。
- en: Similarly, there are also backend workflows. These workflows are designed to
    be non-interactive with the user and perform automated tasks based on various
    triggers such as time of day, changes to data, or input/requests from an API.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也存在后端工作流。这些工作流旨在与用户非交互式地工作，并根据各种触发器自动执行任务，例如一天中的时间、数据的变化或API的输入/请求。
- en: When interacting with Bubble's workflow engine, n8n specifically talks with
    backend API workflows.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当与Bubble的工作流引擎交互时，n8n专门与后端API工作流进行通信。
- en: 'Depending on how the API workflow is configured, you can send data to the API,
    which will be used in the workflow. For example, the `send-email` workflow will
    accept the following inputs from the API:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据API工作流的配置，你可以向API发送数据，这些数据将在工作流中使用。例如，`发送电子邮件`工作流将从API接受以下输入：
- en: '`to`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`收件人`'
- en: '`subject`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`主题`'
- en: '`body`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`正文`'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下截图中得到了说明：
- en: '![Figure 8.6 – Sample backend API workflow configuration screen'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.6 – 示例后端 API 工作流程配置屏幕'
- en: '](img/Figure_8.06_B17493.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_8.06_B17493.jpg](img/Figure_8.06_B17493.jpg)'
- en: Figure 8.6 – Sample backend API workflow configuration screen
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 示例后端 API 工作流程配置屏幕
- en: So, now that we have a general understanding of the workflow engine, let's begin
    using the actual Bubble APIs, starting with the Data API.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们已经对工作流程引擎有了基本的了解，让我们开始使用实际的 Bubble API，从数据 API 开始。
- en: Using Bubble's Data API
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bubble 的数据 API
- en: Accessing Bubble's data with n8n is relatively trivial using the Data API. Depending
    upon the endpoint accessed and the HTTP method used, you can manipulate the data
    in the Bubble application in any way that you want.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据 API 通过 n8n 访问 Bubble 的数据相对简单。根据访问的端点和使用的 HTTP 方法，您可以以任何您想要的方式操作 Bubble
    应用程序中的数据。
- en: To load some sample n8n nodes to work with the Data API, please see the `Bubble_API.json`
    workflow at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Data_API.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Data_API.json).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载一些示例 n8n 节点以与数据 API 一起工作，请参阅 [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Data_API.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Data_API.json)
    中的 `Bubble_API.json` 工作流程。
- en: Authentication
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证
- en: 'Before you can work with the Bubble Data API in n8n, you will need to create
    proper credentials. We will be using the **HTTP Request** node for all of our
    API interactions, so we need to create a **Header Auth** credential, as illustrated
    in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以在 n8n 中使用 Bubble 数据 API 之前，您需要创建适当的凭据。我们将使用 **HTTP 请求** 节点进行所有 API 交互，因此我们需要创建一个
    **头部认证** 凭据，如下面的截图所示：
- en: '![Figure 8.7 – Header Auth credential for accessing Bubble APIs'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.7 – 访问 Bubble API 的头部认证凭据'
- en: '](img/Figure_8.07_B17493.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_8.07_B17493.jpg](img/Figure_8.07_B17493.jpg)'
- en: Figure 8.7 – Header Auth credential for accessing Bubble APIs
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 访问 Bubble API 的头部认证凭据
- en: It is important that the **Name** field under **Credential Data** be populated
    with **Authorization**, and the **Value** field must be populated with **Bearer**,
    followed by your API private key, which can be found in the **Settings** section
    under the **API** tab.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **凭据数据** 下的 **名称** 字段中填写 **授权** 是很重要的，并且 **值** 字段必须填写 **Bearer**，后跟您的 API
    私钥，该私钥可以在 **API** 选项卡下的 **设置** 部分找到。
- en: You must also make certain that you provide access to the **HTTP Request** node.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须确保您提供了对 **HTTP 请求** 节点的访问权限。
- en: Data manipulation
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据操作
- en: Once you have created your credentials, you can now use them to work with Bubble
    data.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了凭据，现在您就可以使用它们来操作 Bubble 数据。
- en: 'Here is a list of the different ways in which you can retrieve and manipulate
    data in Bubble using the Data API:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一份您可以使用数据 API 在 Bubble 中检索和操作数据的不同方式的列表：
- en: '![](img/Table_8.01_B17493.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![img/Table_8.01_B17493.jpg](img/Table_8.01_B17493.jpg)'
- en: 'In each of the endpoints, two special words represent actual unique values
    from your Bubble application, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个端点中，两个特殊词汇代表来自您的 Bubble 应用程序的实际唯一值，如下所示：
- en: '`typename`—This is the actual name of the data type in Bubble. This is generally
    the name of the data type in lowercase with all spaces removed.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typename`—这是 Bubble 中数据类型的实际名称。这通常是移除了所有空格的小写数据类型名称。'
- en: '`id`—The **unique identifier** (**UID**) number for the record in Bubble.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`—Bubble 中记录的唯一标识符（**UID**）号码。'
- en: For example, if you had a data type of `1626690254917x279129440443256930`, you
    would be able to retrieve this record using the `https://appname.bubbleapps.io/api/1.1/obj/newsletter/1626690254917x279129440443256930`
    endpoint.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个数据类型为 `1626690254917x279129440443256930`，您将能够使用 `https://appname.bubbleapps.io/api/1.1/obj/newsletter/1626690254917x279129440443256930`
    端点检索此记录。
- en: We now have all the information we need to start working with the data in the
    Bubble application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了开始处理 Bubble 应用程序中的数据所需的所有信息。
- en: 'n8n uses the **HTTP Request** node to perform all data manipulation, as illustrated
    in the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: n8n 使用 **HTTP 请求** 节点执行所有数据操作，如下面的截图所示：
- en: '![Figure 8.8 – Using the n8n HTTP Request node to manipulate Bubble data'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.8 – 使用 n8n HTTP 请求节点操作 Bubble 数据'
- en: '](img/Figure_8.08_B17493.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_8.08_B17493.jpg](img/Figure_8.08_B17493.jpg)'
- en: Figure 8.8 – Using the n8n HTTP Request node to manipulate Bubble data
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 使用 n8n HTTP 请求节点操作 Bubble 数据
- en: 'Using the information provided in the previous table, we can configure the
    **HTTP Request** node to work with the data however we wish. In the following
    screenshot, you can see the general settings for the **HTTP Request** node:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前表中提供的信息，我们可以配置**HTTP请求**节点以按我们的意愿处理数据。在以下屏幕截图中，您可以看到**HTTP请求**节点的常规设置：
- en: '![Figure 8.9 – General HTTP Request node settings'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.9 – 一般HTTP请求节点设置]'
- en: '](img/Figure_8.09_B17493.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.09_B17493.jpg)'
- en: Figure 8.9 – General HTTP Request node settings
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 8.9 – 一般HTTP请求节点设置
- en: 'In general, all of the **HTTP Request** nodes will have the following settings
    in common:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，所有**HTTP请求**节点都将具有以下共同设置：
- en: '**Header Auth**—Select the Bubble API credentials that you created earlier.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头部认证**—选择您之前创建的Bubble API凭证。'
- en: '**Authentication**—**Header Auth**.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证**—**头部认证**。'
- en: '**Ignore SSL Issues**—**False**.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**忽略SSL问题**—**False**。'
- en: '**Response Format**—**JSON**.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应格式**—**JSON**。'
- en: '**JSON/RAW Parameters**—**False**.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON/RAW参数**—**False**。'
- en: Once these are set, you can now go on to the custom settings for each action.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好，您现在可以继续进行每个操作的定制设置。
- en: 'To read all data from the API, set the `GET` and the URL to the endpoint of
    the data type (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename`).
    This will generate a JSON object containing an array of all the records in the
    data type. The output will look something like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要从API读取所有数据，请设置`GET`和URL到数据类型的端点（例如，`https://appname.bubbleapps.io/api/1.1/obj/typename`）。这将生成一个包含该数据类型中所有记录数组的JSON对象。输出将类似于以下内容：
- en: '[PRE0]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will return up to 100 records at a time.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将一次返回最多100条记录。
- en: If you want to just get the information from a specific record, you can specify
    the ID by appending it to the end of the URL (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`).
    This will only return a single record.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想获取特定记录的信息，可以通过将其附加到URL的末尾来指定ID（例如，`https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`）。这将仅返回单个记录。
- en: 'To create a new record, set the `POST` and the URL to the endpoint of the data
    type (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename`). Then,
    create a body parameter for each custom field along with the value you would like
    the field value to be. The process is illustrated in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新记录，请设置`POST`和URL到数据类型的端点（例如，`https://appname.bubbleapps.io/api/1.1/obj/typename`）。然后，为每个自定义字段创建一个正文参数，并附带您希望字段值具有的值。该过程在以下屏幕截图中进行说明：
- en: '![Figure 8.10 – Body parameters for creating, updating, or replacing record
    data'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.10 – 创建、更新或替换记录数据的正文参数]'
- en: '](img/Figure_8.10_B17493.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.10_B17493.jpg)'
- en: Figure 8.10 – Body parameters for creating, updating, or replacing record data
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 8.10 – 创建、更新或替换记录数据的正文参数
- en: The API will return a status value and the ID of the new record in JSON format.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: API将返回状态值和新的记录ID，格式为JSON。
- en: You can also update a specific record in the data type by setting the `PATCH`
    and then submitting the request to the record's endpoint (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`),
    along with one or more body parameters with the field information that needs to
    be updated. If this update is successful, it will not return any data and will
    respond with a `204` status code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过设置`PATCH`并将请求提交到记录的端点（例如，`https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`）来更新数据类型中的特定记录，同时附带一个或多个包含需要更新的字段信息的正文参数。如果此更新成功，它将不会返回任何数据，并以`204`状态代码响应。
- en: Replacing an entire record is similar to updating a record with two exceptions.
    First, the value in the `PUT`, and second, the body must contain all custom field
    values. It also returns no data and a `204` reply code when successful.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 替换整个记录类似于使用两个例外来更新记录。首先，`PUT`中的值，其次，正文必须包含所有自定义字段值。成功时，它也不会返回数据，并返回`204`响应代码。
- en: The last action that you can do with the API is delete a record. Much as with
    returning a single record, you use the record's endpoint (for example, `https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`)
    and set the `DELETE`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用API执行的最后一个操作是删除记录。与返回单个记录类似，您使用记录的端点（例如，`https://appname.bubbleapps.io/api/1.1/obj/typename/1627217777235x670007482175516000`）并设置`DELETE`。
- en: Searching for data
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索数据
- en: Sometimes, there are too many records to work through when requesting data using
    the `GET` request method when you don't know the record ID. Fortunately, there
    are a number of additional search options that will allow you to reduce the number
    of records returned in each API request.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当你不知道记录ID时，使用`GET`请求方法请求数据时，记录太多以至于无法处理。幸运的是，有一些额外的搜索选项可以让你减少每次API请求返回的记录数。
- en: 'The search criteria are entered as query parameters in the **HTTP Request**
    node as name-value pairs, as illustrated in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索条件作为**HTTP请求**节点中的查询参数以名称-值对的形式输入，如下面的截图所示：
- en: '![Figure 8.11 – Setting search limits using query parameters'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.11 – 使用查询参数设置搜索限制'
- en: '](img/Figure_8.11_B17493.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.11 – 使用查询参数设置搜索限制'
- en: Figure 8.11 – Setting search limits using query parameters
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 使用查询参数设置搜索限制
- en: The first way of reducing the number of records returned is to use the `limit`
    parameter. For example, setting the `limit` parameter to `2` will only return
    one record at a time.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`limit`参数减少返回的记录数是第一种方法。例如，将`limit`参数设置为`2`将每次只返回一条记录。
- en: This is all fine and good if the record you want is in the first set of records
    (referred to as a `cursor` parameter comes into play. The `cursor` parameter,
    you can start your search from a specific record. The record index counts up by
    one and starts at zero.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要的记录在第一组记录中（称为`cursor`参数开始发挥作用。`cursor`参数，你可以从特定的记录开始搜索。记录索引从零开始，每次增加一个。
- en: 'Setting the `cursor` parameter can be useful when you determine its value by
    using the three key/value pairs returned by a previous `GET` query. These three
    pairs are described here:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过使用之前`GET`查询返回的三个键/值对来确定其值时，设置`cursor`参数可能会有用。这三个对在此处描述：
- en: '`cursor`—The record index of the first item in the results'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cursor`—结果中第一个条目的记录索引'
- en: '`remaining`—The number of records that are remaining after this page'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remaining`—此页面之后剩余的记录数'
- en: '`count`—The number of items returned'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count`—返回的项目数'
- en: You can also control the order in which the data is returned by using the `sort_field`
    parameter and setting it to the name of one of the data fields. Adding the `descending`
    parameter and setting it to either `true` or `false` will also control whether
    the data is sorted in descending or ascending order.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用`sort_field`参数并设置为其中的一个数据字段名称来控制返回数据的顺序。添加`descending`参数并将其设置为`true`或`false`也将控制数据是按降序还是升序排序。
- en: If you set the `sort_field` parameter to `_random_sorting`, it will return the
    records in random order. So, to receive a single random record, you can set the
    `limit` parameter to `1` and the `sort_field` parameter to `_random_sorting`!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将`sort_field`参数设置为`_random_sorting`，它将以随机顺序返回记录。因此，为了接收一条随机记录，你可以将`limit`参数设置为`1`并将`sort_field`参数设置为`_random_sorting`！
- en: 'Another way to limit the number of records that are returned from the API is
    to use the `contraints` parameter. This contains an array of one or more JSON
    objects that tells the API how to limit the incoming data. Each JSON object has
    three key-value pairs, as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 限制从API返回的记录数的另一种方法是使用`constraints`参数。它包含一个或多个JSON对象数组，告诉API如何限制传入的数据。每个JSON对象有三个键值对，如下所示：
- en: '`key`—The name of the field to use for the constraint. You can use the `_all`
    keyword to check all fields.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`—用于约束的字段名称。你可以使用`_all`关键字来检查所有字段。'
- en: '`constraint_type`—The type of constraint to apply, which can be one of the
    following:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constraint_type`—要应用的约束类型，可以是以下之一：'
- en: '`equals`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals`'
- en: '`not equal`'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not equal`'
- en: '`is_empty`'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_empty`'
- en: '`is_not_empty`'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_not_empty`'
- en: '`text contains`'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text contains`'
- en: '`not text contains`'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not text contains`'
- en: '`greater than`'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`greater than`'
- en: '`less than`'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`less than`'
- en: '`in`'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in`'
- en: '`not in`'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not in`'
- en: '`contains`'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contains`'
- en: '`not contains`'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not contains`'
- en: '`empty`'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty`'
- en: '`not empty`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not empty`'
- en: '`geographic_search`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geographic_search`'
- en: '`value`—The value that is used to constrain the search.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`—用于约束搜索的值。'
- en: 'For example, if we wanted to only return records where the `title_text` field
    has the word `Newsletter` in it, we would set the `constraints` parameter to the
    following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们只想返回`title_text`字段包含单词`Newsletter`的记录，我们会将`constraints`参数设置为以下内容：
- en: '[PRE1]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can have as many JSON records as you wish in this array.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个数组中包含任意数量的JSON记录。
- en: By now, you should have a good understanding of how the Bubble Data API works,
    so let's take a closer look at the Workflow API.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经很好地理解了Bubble Data API的工作方式，因此让我们更深入地看看Workflow API。
- en: Using Bubble's Workflow API
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bubble的Workflow API
- en: The Workflow API is generally used to activate a Bubble workflow and sometimes
    to pass information to the Bubble app. You will use the same credentials and the
    **HTTP Request** node to activate workflows and send data.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程API通常用于激活Bubble工作流程，有时也用于向Bubble应用程序传递信息。您将使用相同的凭据和**HTTP请求**节点来激活工作流程和发送数据。
- en: Activating a workflow
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活工作流程
- en: 'The `POST` request method to activate the workflow and will receive a `"status":
    "success"` response if it runs correctly.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '激活工作流程的`POST`请求方法将正确运行时接收`"status": "success"`响应。'
- en: 'The **URL** field for the **HTTP Request** node will be made up of the following
    two parts:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP请求**节点的**URL**字段将由以下两部分组成：'
- en: '`https://<appname>.bubbleapps.io/api/1.1/wf`, where `<appname>` is the name
    of your Bubble application.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://<appname>.bubbleapps.io/api/1.1/wf`，其中`<appname>`是您Bubble应用程序的名称。'
- en: '**Workflow name**—This is the name of your workflow.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流程名称**—这是您工作流程的名称。'
- en: So, for example, to activate the `send-email` workflow in my `n8n-book` app,
    I would use `https://n8n-book.bubbleapps.io/version-test/api/1.1/wf/send-email`
    for the URL.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，为了在我的`n8n-book`应用程序中激活`send-email`工作流程，我会使用`https://n8n-book.bubbleapps.io/version-test/api/1.1/wf/send-email`作为URL。
- en: Sending data to a workflow
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向工作流程发送数据
- en: In order to send data to a workflow, the workflow needs to have the parameters
    defined in the API workflow (see *Figure 8.6*), and then the parameters need to
    be defined in the action as dynamic data.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将数据发送到工作流程，工作流程需要定义API工作流程中的参数（见*图8.6*），然后这些参数需要在操作中定义为动态数据。
- en: 'In our example, the three parameters that can be sent to the `send-email` workflow
    via the API are these:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，可以通过API将以下三个参数发送到`send-email`工作流程：
- en: '`to`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to`'
- en: '`subject`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subject`'
- en: '`body`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body`'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这在下面的屏幕截图中有说明：
- en: '![Figure 8.12 – Sample workflow action with dynamic data'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.12 – 带有动态数据的示例工作流程操作'
- en: '](img/Figure_8.12_B17493.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.12_B17493.jpg)'
- en: Figure 8.12 – Sample workflow action with dynamic data
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – 带有动态数据的示例工作流程操作
- en: 'To send this information to the workflow via the Workflow API using the n8n
    **HTTP Request** node, add a body parameter for each of the values, as illustrated
    in the following screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过n8n的**HTTP请求**节点将此信息发送到工作流程，为每个值添加一个正文参数，如下面的截图所示：
- en: '![Figure 8.13 – Body parameters to send to the Workflow API'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.13 – 发送到工作流程API的正文参数'
- en: '](img/Figure_8.13_B17493.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.13_B17493.jpg)'
- en: Figure 8.13 – Body parameters to send to the Workflow API
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – 发送到工作流程API的正文参数
- en: 'When the **HTTP Request** node is executed, it will send the information to
    the workflow and use it as inputs to be processed accordingly, as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当**HTTP请求**节点执行时，它将信息发送到工作流程，并使用它作为相应处理的输入，如下所示：
- en: '![Figure 8.14 – Email sent using Bubble Workflow API and submitted data'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.14 – 使用Bubble工作流程API和提交的数据发送的电子邮件'
- en: '](img/Figure_8.14_B17493.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.14_B17493.jpg)'
- en: Figure 8.14 – Email sent using Bubble Workflow API and submitted data
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 使用Bubble工作流程API和提交的数据发送的电子邮件
- en: You can get a copy of this sample workflow from the GitHub repository at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Workflow_API.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Workflow_API.json).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub存储库中获取此示例工作流程的副本，网址为[https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Workflow_API.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Workflow_API.json)。
- en: Now that we know how to activate workflows and send data to Bubble, let's flip
    things around and get Bubble to activate workflows and send data to n8n.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何激活工作流程并向Bubble发送数据，让我们反过来，让Bubble激活工作流程并向n8n发送数据。
- en: Receiving events and data from Bubble
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Bubble接收事件和数据
- en: Bubble can send events to n8n and even send data. By designing n8n to receive
    this information, Bubble can directly execute n8n workflows and extend its capabilities.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Bubble可以向n8n发送事件，甚至发送数据。通过设计n8n接收这些信息，Bubble可以直接执行n8n工作流程并扩展其功能。
- en: Configuring n8n
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置n8n
- en: 'To do this, first create a simple **Webhook** node with the following settings:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，首先创建一个简单的**Webhook**节点，设置如下：
- en: '**Authentication**—**None**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**—**无**'
- en: '`POST`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`'
- en: '`bubble`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bubble`'
- en: '`200`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200`'
- en: '**Response Mode**—**Last Node**'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应模式**—**最后一个节点**'
- en: '**Response Data**—**First Entry JSON**'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应数据**—**第一个条目JSON**'
- en: You can also copy the test **Webhook** URL as you will need this information
    when configuring Bubble.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以复制测试**Webhook** URL，因为配置Bubble时你需要这些信息。
- en: 'Next, add a `n8n received the following data on {{new Date().toDateString()}}
    at {{new Date().toTimeString()}}: {{$json["body"]["data"]}}`.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加`n8n在{{new Date().toDateString()}}于{{new Date().toTimeString()}}接收了以下数据：{{$json["body"]["data"]}}`。
- en: Now, save the workflow so that the Webhook initializes.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存工作流以便初始化Webhook。
- en: You can get a copy of this workflow on GitHub from [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Events.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Events.json).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从GitHub上获取此工作流的副本，链接为[https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Events.json](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/blob/main/Chapter%208/Bubble_Events.json)。
- en: Configuring Bubble
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Bubble
- en: Now that n8n is ready to go, it's time to prepare Bubble.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在n8n已经准备就绪，是时候准备Bubble了。
- en: First, make sure that the **API Connector** plugin is installed in your Bubble
    application. If it isn't, install it now. You can read more about the **API Connector**
    plugin at [https://manual.bubble.io/core-resources/bubble-made-plugins/api-connector](https://manual.bubble.io/core-resources/bubble-made-plugins/api-connector).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保**API连接器**插件已安装在你的Bubble应用程序中。如果没有，现在就安装它。你可以在[https://manual.bubble.io/core-resources/bubble-made-plugins/api-connector](https://manual.bubble.io/core-resources/bubble-made-plugins/api-connector)上了解更多关于**API连接器**插件的信息。
- en: Next, we are going to configure the **API Connector** plugin. On the **API Connector**
    plugin page, click on the **Add another API** button. Set the **API Name** field
    to **n8n Workflow**.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将配置**API连接器**插件。在**API连接器**插件页面上，点击**添加另一个API**按钮。将**API名称**字段设置为**n8n工作流**。
- en: To configure the API call, click on `GET` to `POST` and then pass the test **Webhook**
    URL into the field next to it.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置API调用，点击`GET`到`POST`，然后将测试**Webhook** URL传递到旁边的字段中。
- en: Add a parameter to send to n8n by clicking on the **Add parameter** button.
    Then, for the **Key** value, enter **data**, and for **Value**, enter **Running
    Sloth Festival**.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**添加参数**按钮向n8n发送一个参数。然后，对于**键**值，输入**data**，对于**值**，输入**Running Sloth Festival**。
- en: 'The plugin should now be ready to initialize by sending information to n8n
    and looking at the response that it sends back. To initialize the plugin, first,
    go back to your n8n workflow and click the **Execute Workflow** button to start
    the Webhook listening for input. You should then see a screen like this:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 插件现在应该已经准备好通过向n8n发送信息并查看它发送回的响应来初始化。要初始化插件，首先，返回到你的n8n工作流并点击**执行工作流**按钮以启动监听输入的Webhook。你应该会看到一个类似这样的屏幕：
- en: '![Figure 8.15 – Initializing a response from n8n'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.15 – 从n8n初始化响应'
- en: '](img/Figure_8.15_B17493.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.15_B17493.jpg](img/Figure_8.15_B17493.jpg)'
- en: Figure 8.15 – Initializing a response from n8n
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 – 从n8n初始化响应
- en: 'Next, return to the Bubble plugin and click the **Initialize call** button.
    A pop-up window should appear with the response sent by n8n. Click the **Show
    raw data** text to see the exact response sent by n8n. This should match the information
    shown in the n8n **Set** node, as illustrated in the following screenshot:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，返回到Bubble插件并点击**初始化调用**按钮。应该会出现一个弹出窗口，显示n8n发送的响应。点击**显示原始数据**文本以查看n8n发送的确切响应。这应该与n8n
    **设置**节点中显示的信息相匹配，如下面的截图所示：
- en: '![Figure 8.16 – Completed Bubble API Connector plugin'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.16 – 完成的Bubble API连接器插件'
- en: '](img/Figure_8.16_B17493.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.16_B17493.jpg](img/Figure_8.16_B17493.jpg)'
- en: Figure 8.16 – Completed Bubble API Connector plugin
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – 完成的Bubble API连接器插件
- en: 'Now, whenever you are working on a workflow in Bubble, you can use the **n8n
    Workflow - Send n8n Data** action in the **Plugins** section, as illustrated in
    the following screenshot:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，无论你在Bubble中工作在哪个工作流上，你都可以在**插件**部分使用**n8n工作流 - 发送n8n数据**操作，如下面的截图所示：
- en: '![Figure 8.17 – New n8n action in the Bubble workflow editor'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17 – Bubble工作流编辑器中的新n8n操作'
- en: '](img/Figure_8.17_B17493.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17_B17493.jpg](img/Figure_8.17_B17493.jpg)'
- en: Figure 8.17 – New n8n action in the Bubble workflow editor
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – Bubble工作流编辑器中的新n8n操作
- en: Now that you have configured both n8n and Bubble to work in harmony, you can
    extend Bubble however you wish with all the power of n8n, its nodes, and any of
    the services that n8n can access. This opens up your Bubble application to do
    almost anything that you can dream of.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经配置了n8n和Bubble协同工作，你可以利用n8n的所有功能，包括其节点和它可以访问的任何服务，来扩展Bubble。这将为你的Bubble应用程序打开几乎可以实现你所有梦想的功能。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Bubble API. We worked with the Data API
    to manipulate information in Bubble and the Workflow API to execute workflows.
    We also learned how to do all of this using n8n, primarily with the **HTTP Request**
    node.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Bubble API。我们使用数据API在Bubble中操作信息，并使用工作流API执行工作流。我们还学习了如何使用n8n来完成所有这些操作，主要使用**HTTP请求**节点。
- en: We also learned how to use Bubble to activate Webhooks in n8n and pass information
    between the two systems.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用Bubble激活n8n中的Webhooks，并在两个系统之间传递信息。
- en: In the next chapter, using Bubble, we are going to be learning how to build
    the frontend of an application that will use n8n on the backend to process information.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Bubble来学习如何构建一个应用的前端，该应用将在后端使用n8n来处理信息。
