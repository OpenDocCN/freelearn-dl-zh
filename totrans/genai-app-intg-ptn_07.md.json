["```py\n#In this case we will simulate the input from a chat interface\nmessage = \"I want to open an account\" \n```", "```py\n#In this section we define the prompt, as the task is to perform intent \n#classification we will identify the intent by exposing\n#the possible values to the LLM\nprompt_template = \"\"\"\nYou are a helpful assistant for an online financial services company that allows users to check their balances, invest in certificates of deposit (CDs), and perform other financial transactions.\nYour task is to identify what your customers are trying to do and return a well formed JSON object.\n1\\. Carefully analyze the content of the message.\n2\\. Classify what the user is trying to do within these options:\n   * New Account: The user is trying to sign up. Return {{\"intent\": \"signup\", \"content\":\"null\"}}\n   * Change Password: The user needs to reset their password. Return {{\"intent\":\"change_password\", \"content\":\"null\"}}\n   * Check Balance: The user needs to check their balance. Return {{\"intent\": \"check_balance\", \"content\":\"null\"}}\n   * Invest in CD: The user wants to invest in a certificate of deposit. Return {{\"intent\": \"invest_cd\", \"content\": \"Extract relevant information such as investment amount and term\"}}\n   * Withdraw Funds: The user wants to withdraw money. Return {{\"intent\": \"withdraw_funds\", \"content\": \"Extract information like amount and withdrawal method\"}}\n   * Transfer Funds: The user wants to transfer money between accounts. Return {{\"intent\": \"transfer_funds\", \"content\": \"Extract information like amount, source account, and destination account\"}}\n   * Account Information: The user wants to access or update their account information. Return {{\"intent\": \"account_info\", \"content\": \"Identify the specific information the user needs\"}}\n   * Lost/Stolen Card: The user wants to report a lost or stolen card. Return {{\"intent\": \"lost_card\", \"content\": \"null\"}}\n   * Support: The user needs help and is not sure what to do. Return {{\"intent\": \"support\", \"content\": \"null\"}}\n   * Other: For other queries, politely decline to answer and clarify what you can help with.\n3\\. Only return the proper JSON result from your classification.\n4\\. Always think step by step.\nUser question: {query}\nJSON:\n\"\"\" \n```", "```py\n{\n   \"intent\": \"invest_cd\",\n   \"content\": \"Extract relevant information such as investment amount and term\"\n} \n```", "```py\ngeneration_config = {\n   \"max_output_tokens\": 8192,\n   \"temperature\": 0,\n   \"top_p\": 0.95,\n}\nsafety_settings = {\n   generative_models.HarmCategory.HARM_CATEGORY_HATE_SPEECH: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,\n   generative_models.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,\n   generative_models.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,\n   generative_models.HarmCategory.HARM_CATEGORY_HARASSMENT: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,\n}\ndef generate(prompt):\n vertexai.init(project=PROJECT, location=LOCATION)\n model = GenerativeModel(MODEL)\n responses = model.generate_content(\n     [prompt],\n     generation_config=generation_config,\n     safety_settings=safety_settings,\n     stream=False,\n )\n return(responses)\nresult = generate(prompt_template.format(query=message)) \n```", "```py\n### Sometimes model return markdown friendly content, in this case we will implement a function to filter this.\ndef extract_json(text):\n \"\"\"\n Extracts the JSON portion from a string containing backticks.\n Args:\n   text: The string containing JSON data within backticks.\n Returns:\n   A dictionary representing the extracted JSON, or None if no valid JSON is found.\n \"\"\"\n start_index = text.find(\"```", "```py\", start_index + 7)  # +7 to skip \"```", "```py. This is a common practice in Markdown-friendly environments, where backticks are used to delineate code blocks or structured data.\n```", "```py`\"```", "```py` in the input text using the `find` method. This is the marker that indicates the start of a JSON block.\n2.  If the `start` marker is found, the function then looks for the closing `\"\"` marker by searching for it from the end of the `json` marker (`start_index + 7`). If both the start and end markers are found, the function extracts the JSON string by slicing the input text between these markers. If no start or end markers are found, the function assumes that the entire input text is the JSON string.\n3.  The function then attempts to parse the extracted JSON string using the `json.loads` method from the `json` module. If the parsing is successful, the function returns the resulting JSON data as a dictionary. If the parsing fails (for example, due to invalid JSON syntax), the function returns `None`. By incorporating this function into the post-processing stage, the system can handle cases where the language model’s output contains JSON data wrapped in backticks. This functionality can be particularly useful when working with Markdown-friendly environments or when integrating the intent classification system with other components that expect JSON-formatted data.\n4.  The post-processing stage can then proceed to format the extracted JSON data into a suitable response format, apply filtering or ranking mechanisms, and render the final response for display to the user.\n\nThe `process_intent` function is designed to handle the JSON data returned by the intent classification model. It takes a dictionary intent as input, which is expected to have an “intent” key with a value representing the predicted intent category.\n\n```", "```py\n\nThe `process_intent` function checks the value of the `\"intent\"` key in the input dictionary. Depending on the intent category, the function performs a specific action or returns a corresponding message.\n\nFor example, if the intent is `\"signup\"`, the function returns the string `\"Sign up process\"`, which could be used to redirect the user to a sign-up page or initiate the sign-up process. Similarly, if the intent is `\"change_password\"`, the function returns `\"Change password\"`, which could trigger a password reset process or redirect the user to a password change page.\n\nFor intents like `\"check_balance\"`, `\"invest_cd\"`, `\"withdraw_funds\"`, `\"transfer_funds\"`, `\"account_info\"`, `\"lost_card\"`, and `\"support\"`, the function returns corresponding messages that could be used to initiate the relevant processes or provide instructions to the user.\n\nIf the intent is `\"other\"`, the function returns `\"Other kind of intent\"`, indicating that the user’s query did not match any of the predefined intent categories.\n\nIf the intent does not match any of the cases handled by the function, it returns a message suggesting that further investigation is needed to understand the intent.\n\nFinally, the last line of code `intent = process_intent(extract_json(result.text))` combines the `extract_json` and `process_intent` functions. It first extracts the JSON data from the `result.text` string using `extract_json`. Then, it passes the extracted JSON data to the `process_intent` function, which processes the intent and returns an appropriate message or action.\n\n```", "```py\n\n## Result presentation\n\nThe result presentation stage for real-time applications demands instantaneous updates, often server-rendered or via data-binding frameworks.\n\nIn our use case, the formatted response containing the predicted intent can be sent back to the customer through the channel from which the inquiry originated (for example, web form, chat interface, or API response). This response can then be used to route the inquiry to the appropriate downstream system or provide an automated response for common intents.\n\nIn this example, we will use a Gradio interface to render the replies in a visually appealing UI. Gradio ([https://www.gradio.app/](https://www.gradio.app/)) is an open-source Python package that allows you to quickly create easy-to-use, customizable UI components for your ML model, any API, or even an arbitrary Python function using a few lines of code.\n\nYou can find more information about Gradio using the following links:\n\nDocs: [https://www.gradio.app/docs](https://www.gradio.app/docs%0D%0A)\n\nGitHub: [https://github.com/gradio-app/gradio](https://github.com/gradio-app/gradio)\n\nThe following code provides an example that creates a Gradio interface:\n\n```"]