- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Generative AI-Powered Assistants
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成式AI助手简介
- en: 'In this chapter, we will look at the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: What is generative AI?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是生成式AI？
- en: Common challenges faced by developers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者面临的常见挑战
- en: Generative AI-powered assistants for developers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成式AI为开发者提供的助手
- en: How developers benefit from assistants
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者从助手中受益
- en: Types of assistants for developers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者助手的类型
- en: When ChatGPT came out, it revolutionized the way we interact with AI-based systems
    to seek the answers we need. ChatGPT opened the doors for **generative AI** (**GenAI**),
    a category of **artificial intelligence** (**AI**) that utilizes machine learning
    models to autonomously create new content, such as text, images, or other forms
    of data, based on patterns and information learned from existing datasets.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当ChatGPT问世时，它彻底改变了我们与基于AI的系统互动以寻求所需答案的方式。ChatGPT为**生成式AI**（**GenAI**），一类利用机器学习模型根据从现有数据集中学习到的模式和信息的**人工智能**（**AI**），自主创建新内容（如文本、图像或其他形式的数据）打开了大门。
- en: GenAI has disrupted multiple industries by transforming how they solve use cases.
    One of the areas that GenAI has revolutionized is the software development process.
    Instead of writing all the code by hand, GenAI can auto-generate a significant
    portion of the code, drastically improving the productivity of software engineers
    and developers who build applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GenAI通过改变解决用例的方式，颠覆了多个行业。GenAI彻底改变的一个领域是软件开发过程。不是手动编写所有代码，GenAI可以自动生成大量代码，极大地提高了构建应用程序的软件工程师和开发者的生产力。
- en: GenAI not only auto-generates new code but also assists in many other tasks
    of the software development life cycle, including planning, analysis, design,
    testing, debugging, deployment, maintenance, and review. We will slowly unfold
    all aspects of it in this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: GenAI不仅能够自动生成新代码，还协助软件开发生命周期的许多其他任务，包括规划、分析、设计、测试、调试、部署、维护和审查。我们将逐步在本书中展开所有这些方面。
- en: This chapter will dive deep into how different GenAI-based assistants have emerged
    to help developers create software applications faster. But before we get into
    the details, we will explore the journey of generative AI, the challenges developers
    face on a daily basis, and how GenAI-based assistants can assist them. Let’s begin
    by briefly understanding the power of generative AI.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将深入探讨不同基于GenAI的助手如何出现，以帮助开发者更快地创建软件应用程序。但在我们深入细节之前，我们将探索生成式AI的旅程、开发者每天面临的挑战以及基于GenAI的助手如何帮助他们。让我们先简要了解生成式AI的力量。
- en: What is generative AI?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是生成式AI？
- en: Generative AI is a type of AI that can create new content, such as text, images,
    or even music, by learning from existing examples. It’s like teaching a computer
    to understand patterns and styles from a huge amount of data, and then using that
    knowledge to produce something new and original, much like how a human might create
    a story or a painting based on their experiences and imagination. For instance,
    it can write articles, generate realistic pictures, or even help develop software
    code by predicting what comes next based on what it has learned.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 生成式AI是一种可以通过学习现有示例来创建新内容（如文本、图像甚至音乐）的AI。它就像教计算机从大量数据中理解模式和风格，然后利用这些知识来产生新颖和原创的内容，就像人类可能会根据他们的经验和想象力创作故事或绘画一样。例如，它可以撰写文章、生成逼真的图片，甚至通过根据其学习到的内容预测接下来会发生什么来帮助开发软件代码。
- en: 'Here are some key things to know about generative AI:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关于生成式AI，以下是一些关键信息：
- en: '**Generation versus analysis**: Generative AI can create brand new artifacts
    such as text, code, images, video, and so on, rather than just classify or extract
    insights from existing artifacts. For example, synthetic data generation is a
    brand-new generation of new artifacts.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成与分析**：生成式AI可以创建全新的艺术品，如文本、代码、图像、视频等，而不仅仅是分类或从现有艺术品中提取见解。例如，合成数据生成是新一代的新艺术品。'
- en: '**Self-learning**: Many generative AI systems train themselves on large datasets
    to learn patterns and relationships. This allows them to generalize to new contexts.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自学习**：许多生成式AI系统在大数据集上自我训练，以学习模式和关系。这使得它们能够推广到新的上下文中。'
- en: '**Probabilistic models**: Generative AI build probabilistic models to generate
    new outputs that conform to patterns in the training data. Outputs are sampled
    from the learned probability distribution.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概率模型**：生成式AI构建概率模型以生成符合训练数据中模式的新输出。输出是从学习到的概率分布中采样的。'
- en: '**Varied applications**: Use cases include generating text (for example, articles,
    code, dialogue), images, audio, video game content, molecule designs, and much
    more.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多样化的应用**：用例包括生成文本（例如，文章、代码、对话）、图像、音频、视频游戏内容、分子设计等等。'
- en: '**Output diversity**: Generative models can produce a wide range of diverse,
    original outputs by capturing high-level patterns rather than copying verbatim.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出多样性**：通过捕捉高级模式而不是逐字复制，生成式模型可以产生广泛多样的原创输出。'
- en: '**Cutting-edge field** - Generative AI is an extremely active area of ML research,
    with innovations in models such as DALL-E, AlphaCode, and MuseNet demonstrating
    its rapid progress.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前沿领域** - 生成式人工智能是机器学习研究中的一个极其活跃的领域，DALL-E、AlphaCode 和 MuseNet 等模型在创新方面的进展展示了其快速的发展。'
- en: To put into perspective where in the AI stack generative AI fits, the following
    figure helps us understand the concept better.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解生成式人工智能在人工智能堆栈中的位置，以下图表有助于我们更好地理解这一概念。
- en: '![Figure 1.1 – AI stack](img/B21378_01_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 人工智能堆栈](img/B21378_01_01.jpg)'
- en: Figure 1.1 – AI stack
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 人工智能堆栈
- en: We want to keep the generative AI discussion brief as there is abundant material
    available to dive deeper into this field. The focus of this book is helping developers
    use GenAI to accelerate software development and improve their productivity. But
    before that, we also need to understand some of the challenges developers face.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将生成式人工智能的讨论保持简短，因为关于这个领域有大量的资料可以深入研究。本书的重点是帮助开发者使用生成式人工智能来加速软件开发并提高他们的生产力。但在那之前，我们还需要了解开发者面临的一些挑战。
- en: Common challenges faced by developers/builders
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者/构建者面临的常见挑战
- en: 'If you look at what a typical day of a software developer looks like, you will
    realize that the bulk of the time is consumed by analyzing, creating, testing,
    and debugging code specific to a particular functionality required from the application.
    Many of the common challenges faced by developers are related to these themes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看一个典型的软件开发者的日常，你会意识到大部分时间都花在分析、创建、测试和调试特定于应用程序所需功能的代码上。许多开发者面临的常见挑战都与这些主题相关：
- en: '**Repetitive coding**: Manually implementing repetitive code or boilerplate
    without auto-complete or generation tools. This is not only time-consuming but
    also error-prone.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复编码**：在没有自动完成或生成工具的情况下手动实现重复代码或模板代码，这不仅耗时，而且容易出错。'
- en: '**Understanding unfamiliar code**: Difficulty ramping up and understanding
    complex legacy code bases without AI explanations or summaries.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解不熟悉的代码**：在没有人工智能解释或总结的情况下，难以快速提升并理解复杂的遗留代码库。'
- en: '**Finding code examples**: Tedious to manually search for and identify the
    right code examples to learn from or reuse without AI code search.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**寻找代码示例**：在没有人工智能代码搜索的情况下手动搜索和识别合适的代码示例来学习或重用是繁琐的。'
- en: '**Diagnosing issues**: Debugging issues takes longer without AI assistance
    pinpointing potential causes and solutions for bugs.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**诊断问题**：没有人工智能协助定位潜在原因和解决方案，调试问题会花费更长的时间。'
- en: '**Lack of standardization**: Code quality and consistency suffer without AI
    recommendations to standardize code patterns and styles.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏标准化**：没有人工智能的建议来标准化代码模式和风格，代码质量和一致性会受到影响。'
- en: '**Documentation**:– It is time consuming to manually write code documentation
    without AI automated documentation generation.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档编写**：在没有人工智能自动文档生成的情况下手动编写代码文档非常耗时。'
- en: '**Reimplementing solutions**: Failing to discover and leverage existing solutions
    within a code base leads to redundant work.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新实现解决方案**：未能发现和利用代码库中现有的解决方案会导致重复工作。'
- en: '**Suboptimal efficiency**: Less guidance on improving code structure, performance,
    and efficiency without AI optimization.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率低下**：没有人工智能优化，在改进代码结构、性能和效率方面缺乏指导。'
- en: '**Context switching**: Constant task switching disrupts developer flow without
    AI handling trivial tasks and lookups.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务切换**：没有人工智能处理琐碎的任务和查找，频繁的任务切换会打断开发者的工作流程。'
- en: '**Knowledge gaps**: Beginners need guidance and intermediate developers have
    knowledge gaps without AI coding insights.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**知识差距**：初学者需要指导，而中级开发者在没有人工智能编码洞察的情况下存在知识空白。'
- en: '**Creative limits**: Lack of idea stimulation and expanded solution search
    space without generative code suggestions.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创意限制**：没有生成式代码建议，缺乏灵感刺激和解决方案搜索空间的扩展。'
- en: '**Pace of technology changes**: New open source tools, libraries, and functionalities
    are getting added constantly so it’s difficult to keep up to date with all new
    innovations and use them during application development.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术变革的速度**：新的开源工具、库和功能不断添加，因此很难跟上所有新创新并在应用程序开发中使用它们。'
- en: Overall, generative coding AIs alleviate many pain points and augment human
    abilities at all skill levels. Developers stand to benefit greatly from adopting
    these rapidly emerging technologies.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，生成式编码人工智能缓解了许多痛点，并在所有技能水平上增强了人类的能力。开发者从采用这些快速发展的技术中可以受益匪浅。
- en: Not everyone is tasked with coding applications. Many other technical personas
    exist in the organization who also assist in building applications by leveraging
    cloud-based services and tools. Typically, we refer to them as builders. Builders
    who solve use cases using AWS services are referred to as AWS builders. The kind
    of challenges these builders face also varies depending on their role and the
    tools they use. One of the most time-consuming challenges builders face is troubleshooting
    errors within a specific service or tool they use. Console errors and networking
    errors are the most prominent ones AWS builders encounter, for which they have
    to comb through log files to identify and fix the issues. AWS builders also need
    assistance with solution architecture, best practices, documentation, and support.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个人都负责编写应用程序的代码。在组织中还有许多其他技术角色，他们通过利用基于云的服务和工具来协助构建应用程序。通常，我们称他们为构建者。使用AWS服务解决用例的构建者被称为AWS构建者。这些构建者面临的具体挑战也因他们的角色和使用的工具而异。构建者面临的最耗时挑战之一是在他们使用的特定服务或工具中调试错误。控制台错误和网络错误是AWS构建者遇到的最突出的错误，他们必须检查日志文件以识别和修复问题。AWS构建者还需要在解决方案架构、最佳实践、文档和支持方面获得帮助。
- en: We will dive deep into solving each of these challenges in this book, but first,
    let’s look at some areas of the software development process in which generative
    AI-powered assistants help developers and builders.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中深入探讨解决这些挑战的每个方面，但首先，让我们看看生成式人工智能助手在软件开发过程中帮助开发者和构建者的某些领域。
- en: Generative AI-powered assistants for developers/builders
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者/构建者使用的生成式人工智能助手
- en: Generative AI-powered assistants work by leveraging advanced machine learning
    models, primarily trained on vast amounts of code and natural language data. Under
    the hood, these models analyze patterns and structures in existing code to predict
    and generate new code snippets. When a developer inputs a prompt or a partially
    written piece of code, the AI processes this input using deep learning techniques,
    understanding the context, syntax, and semantics. It then generates relevant code
    completions, suggestions, or even entire functions, mimicking the style and conventions
    of the existing code base.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 生成式人工智能助手通过利用先进的机器学习模型工作，这些模型主要在大量的代码和自然语言数据上训练。在底层，这些模型分析现有代码中的模式和结构，以预测和生成新的代码片段。当开发者输入一个提示或部分编写的代码时，人工智能使用深度学习技术处理这个输入，理解上下文、语法和语义。然后，它生成相关的代码补全、建议，甚至整个函数，模仿现有代码库的风格和约定。
- en: Additionally, these assistants continuously learn and improve from user interactions,
    adapting to specific coding styles and preferences, thereby providing increasingly
    accurate and context-aware assistance over time. This intricate process of pattern
    recognition, contextual understanding, and continuous learning allows generative
    AI-powered coding assistants to significantly enhance developer productivity and
    efficiency.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些助手通过用户交互不断学习和改进，适应特定的编码风格和偏好，从而随着时间的推移提供越来越准确和上下文感知的辅助。这种复杂的模式识别、上下文理解和持续学习的过程，使得生成式人工智能编码助手能够显著提高开发者的生产力和效率。
- en: 'Here are some examples of what they can do:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些它们能做什么的例子：
- en: '**Code completion**: Predict and autocomplete code as the developer is typing
    based on the context. Similar to autocomplete but more powerful and contextual.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码补全**：根据上下文预测并自动完成代码，随着开发者的输入。类似于自动完成，但更强大且更具上下文性。'
- en: '**Code synthesis**: Generate entire code snippets or functions given a description
    of what the code should do. Saves developers time writing boilerplate or repetitive
    code.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码合成**：根据代码应执行的操作的描述生成整个代码片段或函数。节省开发者编写样板或重复代码的时间。'
- en: '**Code explanation**: Provide plain language explanations of what a section
    of code is doing to help developers understand code bases.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码解释**：提供对代码部分所做工作的简单语言解释，以帮助开发者理解代码库。'
- en: '**Code summarization**: Summarize the overall purpose and flow of a code module
    at a high level. Useful for understanding legacy code.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码摘要**：在较高层次上总结代码模块的整体目的和流程。对于理解遗留代码很有用。'
- en: '**Code error diagnosis**: Analyze error messages and stack traces to provide
    guidance on potential causes and fixes for bugs.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码错误诊断**：分析错误信息和堆栈跟踪，提供有关潜在原因和修复错误的指导。'
- en: '**Code optimization**: Suggest improved ways to structure, consolidate, or
    streamline code to make it faster, more efficient, and so on.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码优化**：建议改进代码的结构、整合或简化方法，使其更快、更高效等。'
- en: '**Documentation generation**: Automatically generate code documentation and
    comments from code context.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档生成**：从代码上下文自动生成代码文档和注释。'
- en: '**Troubleshooting and issue resolution**: Understand the cause of the issue
    and provide possible solutions to builders.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障排除和问题解决**：理解问题的原因，并为构建者提供可能的解决方案。'
- en: '**Architecture and best practices**: Provide recommendations for builders on
    how to best architect a use case and also recommend the type of infrastructure
    to use to solve it.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构和最佳实践**：为构建者提供如何最佳架构一个用例的建议，并推荐用于解决该问题的基础设施类型。'
- en: The main value of these AI assistants is alleviating repetitive or rote aspects
    of coding to allow developers to focus on more high-value, creative parts of software
    development. They aim to increase developer productivity and software quality.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些AI助手的主要价值是减轻编码中的重复或例行方面，使开发者能够专注于软件开发中更有价值、更具创造性的部分。他们的目标是提高开发者的生产力和软件质量。
- en: How developers/builders benefit from assistants
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者/构建者从助手中获益
- en: 'Generative AI assistants for developers are useful for several key reasons:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者用的生成式AI助手有以下几个关键原因：
- en: '**Improved productivity**: They automate repetitive coding tasks and workflows,
    allowing developers to get more done in less time. Things such as autocomplete,
    code generation, and debugging assistance directly save developers time and effort.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高生产力**：它们自动化重复的编码任务和工作流程，使开发者能够在更短的时间内完成更多的工作。自动完成、代码生成和调试辅助等直接节省了开发者的时间和精力。'
- en: '**Reduce cognitive load**: By handling rote tasks and providing context-aware
    recommendations, AI assistants reduce the burden on a developer’s working memory.
    This frees up mental bandwidth for more complex problem-solving.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少认知负荷**：通过处理例行任务和提供上下文感知的建议，AI助手减轻了开发者工作记忆的负担。这为更复杂的问题解决腾出更多的脑力。'
- en: '**Code discoverability**: Features such as natural language code search and
    summaries improve the discoverability of code bases. Developers can more easily
    find and understand relevant code examples.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码可发现性**：自然语言代码搜索和摘要等特性提高了代码库的可发现性。开发者可以更容易地找到和理解相关的代码示例。'
- en: '**Knowledge sharing**: AI models can encode programming best practices and
    patterns. This makes it easier to share knowledge across developer teams.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**知识共享**：AI模型可以编码编程最佳实践和模式。这使得在开发团队之间共享知识变得更加容易。'
- en: '**Consistency**: Code generated or optimized by AI tools adheres to consistent
    style and patterns. This improves code maintainability.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：由AI工具生成或优化的代码遵循一致的风格和模式。这提高了代码的可维护性。'
- en: '**Beginner skill improvement**: Less experienced developers can leverage AI-powered
    completions, explanations, and recommendations to improve their skills faster.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初学者技能提升**：经验较少的开发者可以利用AI驱动的补全、解释和建议来更快地提高他们的技能。'
- en: '**Focus on creativity**: With rote coding work automated, developers can spend
    more time on creative problem-solving and optimizing algorithms.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专注于创造力**：通过自动化例行编码工作，开发者可以花更多的时间在创造性问题解决和优化算法上。'
- en: '**Reduced errors**: Bugs and antipatterns can be automatically detected and
    fixed in real time as developers code. This improves software quality and reliability.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少错误**：错误和反模式可以在开发者编码时实时自动检测和修复。这提高了软件质量和可靠性。'
- en: '**Latest technology integration**: Ease of usage of newer libraries, open source
    tools, and functionalities to improve the end-to-end code.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最新技术集成**：使用新库、开源工具和功能的便捷性，以改善端到端代码。'
- en: Overall, by augmenting human capabilities, generative AI enables developers
    to be more productive, write higher-quality code, discover new solutions, and
    focus their efforts on where humans add the most value. The potential for these
    tools to transform software development is very significant.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，通过增强人类能力，生成式人工智能使开发者能够更高效地工作，编写更高质量的代码，发现新的解决方案，并将精力集中在人类最能发挥价值的地方。这些工具在改变软件开发方面的潜力非常巨大。
- en: Types of assistants for developers/builders
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者/构建者助手类型
- en: 'Even though the list of generative AI-powered assistants keeps growing, here
    are some of the top generative AI-powered assistants for developers:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管生成式人工智能驱动的助手列表不断增长，以下是一些为开发者提供的顶级生成式人工智能助手：
- en: '**Amazon Q Developer**: A generative AI-powered assistant proficient in helping
    developers throughout the software development life cycle. When integrated into
    the IDE, Amazon Q offers comprehensive software development support, including
    code generation, explanation, optimization, and transformation, among many other
    automation features. When used by AWS builders, it provides comprehension support
    for building faster solutions using various AWS services and assists with architecture,
    best practices, documentation, troubleshooting issues, and support.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Q 开发者**：一个由生成式人工智能驱动的助手，擅长在整个软件开发生命周期中帮助开发者。当集成到集成开发环境（IDE）中时，Amazon
    Q 提供全面的软件开发支持，包括代码生成、解释、优化和转换，以及其他许多自动化功能。当由 AWS 构建者使用时，它提供使用各种 AWS 服务构建更快解决方案的理解支持，并协助架构、最佳实践、文档、故障排除问题和支持。'
- en: '**GitHub Copilot**: A plugin from GitHub and OpenAI that provides context-aware
    code completions inside development environments.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub Copilot**：GitHub 和 OpenAI 提供的一个插件，在开发环境中提供上下文感知的代码补全。'
- en: '**DeepCode**: A code review assistant that identifies bugs, security issues,
    performance problems, and so on and suggests fixes.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DeepCode**：一个代码审查助手，可以识别错误、安全问题、性能问题等，并提出修复建议。'
- en: '**Kite**: Autocompletion with documentation and code explainers to enhance
    code understanding.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kite**：带有文档和代码解释器的自动补全，以增强代码理解。'
- en: '**Codex**: An API from OpenAI to generate code snippets from natural language
    descriptions.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Codex**：OpenAI 的一个 API，可以从自然语言描述中生成代码片段。'
- en: '**TabNine**: A code completion tool that uses deep learning to suggest relevant
    code snippets in real time as developers type.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TabNine**：一个使用深度学习在开发者键入时实时建议相关代码片段的代码补全工具。'
- en: '**Pythia**: Facebook’s IDE plugin that suggests code edits and transformations
    to fix issues.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pythia**：Facebook 的 IDE 插件，建议代码编辑和转换以修复问题。'
- en: '**Sourcery**: An AI tool that automatically refactors Python code, suggesting
    improvements and optimizations for cleaner and more efficient code.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sourcery**：一个自动重构 Python 代码的人工智能工具，建议改进和优化以实现更干净和更高效的代码。'
- en: The list keeps expanding as more start-ups, big tech companies, and open source
    projects integrate generative AI into the software development process. The goal
    is to augment productivity and software quality. Every GenAI assistant is different
    and assists developers in a variety of ways; however, in this book, we will go
    into detail about how developers and builders can use Amazon Q Developer to accelerate
    software development and boost their productivity on a daily basis.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 随着更多初创公司、大型科技公司和开源项目将生成式人工智能集成到软件开发过程中，该列表不断扩展。目标是增强生产力和软件质量。每个 GenAI 助手都不同，并以各种方式协助开发者；然而，在这本书中，我们将详细介绍开发者如何使用
    Amazon Q 开发者来加速软件开发并提高他们日常的生产力。
- en: Before we wrap up this chapter, here’s a very important note about generative
    AI-powered assistants used by developers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，这里有一个关于开发者使用的生成式人工智能助手的非常重要笔记。
- en: Always keep this in mind
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 总是记住这一点
- en: Generative AI-powered assistants used for code generation exhibit a non-deterministic
    nature by producing different outputs for the same input under varying conditions.
    This variability arises from the underlying probabilistic models, which consider
    a range of possible solutions and select one based on factors such as context,
    learned patterns, and randomness. While this can introduce creativity and adaptability
    in code suggestions, it may also lead to inconsistent results, making it important
    for developers to review and validate the generated code to ensure it meets specific
    project requirements and standards.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代码生成的生成式AI辅助工具表现出非确定性，因为在不同的条件下，对于相同的输入会产生不同的输出。这种可变性源于潜在的随机模型，这些模型考虑了一系列可能的解决方案，并根据诸如上下文、学习到的模式和随机性等因素选择一个。虽然这可以在代码建议中引入创造性和适应性，但它也可能导致结果不一致，因此对于开发者来说，审查和验证生成的代码以确保其满足特定项目需求和标准非常重要。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we had a quick introduction to generative AI and how it has
    revolutionized many industries. Specifically in the software development industry,
    we examined some of the common challenges faced by developers. We then introduced
    various areas of the development process where generative AI-powered assistants
    can help developers and how they can benefit from such assistants.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了生成式AI及其如何革命性地改变了许多行业。特别是在软件开发行业中，我们考察了开发者面临的一些常见挑战。然后，我们介绍了开发过程中的各个领域，其中生成式AI辅助工具可以帮助开发者，以及他们如何从这些辅助工具中受益。
- en: Finally, we looked at some of the assistants available in the market today and
    how they help solve day-to-day challenges. We specifically highlighted Amazon
    Q Developer, a service provided by AWS that can help developers and builders.
    The rest of the book will revolve around Amazon Q Developer as the go-to assistant
    for software development.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了市场上一些可用的辅助工具以及它们如何帮助解决日常挑战。我们特别强调了Amazon Q Developer，这是由AWS提供的一项服务，可以帮助开发者和构建者。本书的其余部分将围绕Amazon
    Q Developer作为软件开发的首选辅助工具展开。
- en: In our next chapter, we will look at what Amazon Q Developer is and how it helps
    developers. We will also look at how to set it up in a variety of **integrated
    development environments** (**IDEs**) and other development tools typically used.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们接下来的章节中，我们将探讨Amazon Q Developer是什么以及它如何帮助开发者。我们还将探讨如何在各种**集成开发环境**（**IDEs**）和其他通常使用的开发工具中设置它。
- en: References
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Generative AI: [https://en.wikipedia.org/wiki/Generative_artificial_intelligence](https://en.wikipedia.org/wiki/Generative_artificial_intelligence)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '生成式AI: [https://zh.wikipedia.org/wiki/生成式人工智能](https://zh.wikipedia.org/wiki/生成式人工智能)'
