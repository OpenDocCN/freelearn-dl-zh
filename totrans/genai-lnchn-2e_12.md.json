["```py\n    gcloud auth application-default login\n    ```", "```py\n    gcloud config set project my-project\n    ```", "```py\ndef test(a: int, b: int = 2, c: int = 3):\n print(f\"a={a}, b={b}, c={c}\")\n pass\ntest(1, 2, 3)\ntest(1, 2, c=3)\ntest(1, b=2, c=3)\ntest(1, c=3)\n```", "```py\ndef test(a: int, b: int = 2, *, c: int = 3):\n print(f\"a={a}, b={b}, c={c}\")\n pass\n# this doesn't work any more: test(1, 2, 3)\n```", "```py\nfrom langchain_core.runnables import RunnableLambda\ncreate_inputs_chain = RunnableLambda(lambda x: _create_input_\nmessages(**x))\nmap_step_chain = create_inputs_chain | RunnableLambda(lambda x: map_chain.\nbatch(x, config={\"max_concurrency\": 3}))\nsummaries = map_step_chain.invoke({\"video_uri\": video_uri})\n```", "```py\ndef _merge_summaries(summaries: list[str], interval_secs: int = 600, **kwargs) -> str:\n    sub_summaries = []\n for i, summary in enumerate(summaries):\n        sub_summary = (\n f\"Summary from sec {i*interval_secs} to sec {(i+1)*interval_secs}:\"\n f\"\\n{summary}\\n\"\n        )\n        sub_summaries.append(sub_summary)\n return \"\".join(sub_summaries)\nreduce_prompt = PromptTemplate.from_template(\n \"You are given a list of summaries that\"\n \"of a video splitted into sequential pieces.\\n\"\n \"SUMMARIES:\\n{summaries}\"\n \"Based on that, prepare a summary of a whole video.\"\n)\nreduce_chain = RunnableLambda(lambda x: _merge_summaries(**x)) | reduce_prompt | llm | StrOutputParser()\nfinal_summary = reduce_chain.invoke({\"summaries\": summaries})\n```", "```py\nfrom langchain_core.runnables import RunnablePassthrough\nfinal_chain = (\n    RunnablePassthrough.assign(summaries=map_step_chain).assign(final_ summary=reduce_chain)\n    | RunnableLambda(lambda x: x[\"final_summary\"])\n)\nresult = final_chain.invoke({\n \"video_uri\": video_uri,\n \"interval_secs\": 300,\n \"chunks\": 9\n})\n```"]