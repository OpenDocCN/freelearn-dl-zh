- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boost Coding Efficiency for C and C++ with Auto-Code Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of programming language categories and foundational languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C auto-code generation using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C++ auto-code generation using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C and C++ code explainability and optimization Using Amazon Q Developer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at how you can use Amazon Q Developer to
    suggest code in VS Code and PyCharm IDEs. We used the two most prominent programming
    languages used by developers, Python and Java, to demonstrate how auto-code can
    be generated using prompt techniques and leveraging a chat-with-code-assistant
    technique.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will first explore some of the categories of programming
    languages. We will then discuss an overview of foundational programming languages
    before focusing on two dominant ones used in the software industry: C and C++.
    We will introduce how auto-code generation, especially in Amazon Q Developer,
    is integrated and can be used by C and C++ developers to understand, learn the
    syntax of, and automatically generate code. As a side benefit, by standardizing
    code across different programming languages, these tools can enhance code readability,
    maintainability, and interoperability across large-scale projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of programming language categories and foundational languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The landscape of software development has undergone a dramatic transformation
    over the past few decades. As the demand for robust, efficient, and scalable applications
    has grown, the complexity of the coding process has increased. Consequently, various
    categories of coding languages have emerged to meet these diverse needs.
  prefs: []
  type: TYPE_NORMAL
- en: Foundational languages, such as C and C++, provide the essential constructs
    for many systems. Web development languages, including HTML, CSS, and JavaScript,
    power dynamic and interactive web experiences. Database management languages,
    such as SQL, are crucial for handling large datasets. System administration and
    automation languages, such as Python and Bash, streamline repetitive tasks and
    enhance operational efficiency. **Infrastructure as Code** (**IaC**) languages,
    such as Terraform and AWS CloudFormation, allow developers to manage and provision
    computing infrastructure through code.
  prefs: []
  type: TYPE_NORMAL
- en: Each category addresses specific challenges, reflecting the multifaceted nature
    of modern technology ecosystems. Understanding these categories helps developers
    choose the right tools for their projects, leading to more effective solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Foundational languages C and C++, and auto-code generation support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C and C++ are foundational programming languages that have shaped the landscape
    of software development. Known for their performance and control over system resources,
    these languages are crucial in various domains, including system programming,
    game development, and real-time processing applications. However, the very strengths
    that make C and C++ powerful also contribute to their complexity. Manual memory
    management, low-level operations, and intricate syntax can make coding in these
    languages error-prone and time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate these challenges and enhance productivity, auto-code generation
    has emerged as a transformative solution. Auto-code generation involves using
    advanced tools to automatically produce source code based on predefined templates
    or specifications. This automation can significantly reduce the manual effort
    required in coding, minimize errors, and standardize code quality. Among the leading
    tools in this domain is Amazon Q Developer, which brings powerful capabilities
    to the table for C and C++ code generation. As discussed in previous chapters,
    Amazon Q Developer is an innovative tool that leverages artificial intelligence
    and machine learning to assist developers in writing code. By integrating Amazon
    Q Developer into the development workflow, programmers can benefit from its sophisticated
    code generation features tailored specifically for C and C++.
  prefs: []
  type: TYPE_NORMAL
- en: One of the primary advantages of using Amazon Q Developer for C and C++ code
    generation is the significant reduction in development time. Writing boilerplate
    code, such as memory management routines, data structures, and error handling,
    can be tedious and repetitive. Amazon Q Developer can provide recommendations
    to automate these tasks, allowing developers to focus on learning and implementing
    the more complex and creative aspects of their projects. This not only accelerates
    the development process but also enhances the overall code quality by ensuring
    that repetitive tasks are handled consistently and correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, Amazon Q aids in bridging the knowledge gap for developers who
    are new to C and C++. The learning curve for these languages can be steep, given
    their complexity and need for meticulous attention to detail. By providing auto-generated
    code examples and templates, Amazon Q serves as an educational tool, helping developers
    understand and adopt the proper syntax and coding conventions more quickly. This
    feature is particularly beneficial in educational settings and for onboarding
    new team members, as it provides concrete examples of how theoretical concepts
    are applied in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Amazon Q Developer is equipped with advanced debugging and optimization
    capabilities. It can identify potential issues in the code and suggest optimizations,
    ensuring that the generated code is not only correct but also efficient. This
    feature is crucial in performance-critical applications where even minor inefficiencies
    can have significant impacts.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s dive deep to see how Amazon Q Developer can help a programmer. To
    illustrate this, I will be using the Amazon Q Developer interface with VS Code
    (refer to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022) for the configuration
    steps for Amazon Q Developer with VS Code and the *References* section at the
    end of this chapter for C/C++ for VS Code).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer uses LLMs, which, by nature, are non-deterministic, so you
    may not get exactly the same answers or code blocks shown in the code snapshots.
    Try to update your prompts to get the desired recommendations. However, logically,
    the generated answer or code should meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: C auto-code generation using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, assume a new programmer is planning to work with C and does not have
    a background in this language. Let’s use Amazon Q Developer’s chat-style interface
    to educate the programmer.
  prefs: []
  type: TYPE_NORMAL
- en: C language basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn about C programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.1 – Learning about the C language in chat style](img/B21378_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Learning about the C language in chat style
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer provided historical
    information about the original developers of the C language. It then summarized
    the common use cases by categorizing where the C language excels. Additionally,
    it offered sources for further reference and learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s ask for commands that are commonly used by C programmers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.2 – Learning about common C programmer commands](img/B21378_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Learning about common C programmer commands
  prefs: []
  type: TYPE_NORMAL
- en: We will not be going through each command in detail, but for illustration, as
    shown in the preceding partial screenshots, Amazon Q Developer provided several
    examples of common commands and constructs in the C programming language. To make
    it easy to follow, it categorized them into groups such as conditional constructs,
    looping constructs, functions, and more. Additionally, you can see that it provided
    references at the end for users to obtain further detailed information on the
    topics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s ask Amazon Q Developer for the syntax and an example of a `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.3 – Learning about the for loop](img/B21378_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Learning about the for loop
  prefs: []
  type: TYPE_NORMAL
- en: Observe, in the preceding and following screenshots, that Amazon Q Developer
    provided the syntax, details, and an example of a `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – A for loop example](img/B21378_05_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – A for loop example
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end C language use case development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s move to the sample use case to show the power of Amazon Q Developer’s
    ability to recommend code. To illustrate this, I am going to use the VS Code script
    editor window with single and multi-line prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that we want to write a C program to read a list of integers from
    a file, sort them, and write the sorted list to another file. This is a very common
    use case to see multiple functionalities of C language.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the multi-line prompt technique to achieve the preceding use case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.5 – A C program sample snapshot](img/B21378_05_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – A C program sample snapshot
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows a partial code suggested by Amazon Q Developer.
    The end-to-end generated C code by Amazon Q Developer demonstrates several fundamental
    and advanced concepts in C programming, including functions, arrays, pointers,
    and file I/O operations. It also added error handling related to `"Error` `opening
    file"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s use an interactive inline prompt with the chain-of-thought technique
    to enhance the code. As you can see in the `readIntegersFromFile()` function,
    Amazon Q Developer already added `"Error opening file"`. Now, let’s instruct it
    to check for zero-byte files as well. Just go inside the function and use the
    single-line prompt technique as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.6 – A C program inline function enhancement](img/B21378_05_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – A C program inline function enhancement
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the screenshot, based on our prompt, Amazon Q Developer added an
    `if` condition to check whether the input file is zero bytes. If the file is empty,
    the code gracefully exits with a `File is empty` message and a non-zero exit code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s explore the functionality of Amazon Q Developer with
    C++.
  prefs: []
  type: TYPE_NORMAL
- en: C++ auto-code generation using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the preceding section, let’s first assume that a new programmer is
    planning to work with C++ and does not have a background in this language. We
    will use similar chat-style interface prompts from the C language section to learn
    the basics of the C++ language with the help of Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: C++ language basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn about C++ programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.7 – Learning about C++ programming](img/B21378_05_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Learning about C++ programming
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Amazon Q Developer provided historical
    information about the original developers. It then summarized the common use cases
    by categorizing where the C++ language excels. Additionally, it offered sources
    for further reference and learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s ask for commands that are commonly used by C++ programmers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.8 – Learning about common programmer C++ commands](img/B21378_05_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Learning about common programmer C++ commands
  prefs: []
  type: TYPE_NORMAL
- en: We will not be going through each command but just for illustration, as you
    can see in the following partial screenshots, Amazon Q Developer provided several
    categories of the common commands and constructs in the C++ programming language.
    To make it easy to follow, it also included some of the common key commands for
    each sample command. Additionally, you can see that it provided references at
    the end for users to obtain further detailed information on the topics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the information provided you can observe that C++ shines in the area
    of **Object-Oriented Programming** (**OOP**), so let’s ask Amazon Q Developer
    to provide details and examples related to C++ support for OOP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.9 – Learning about C++ OOP](img/B21378_05_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Learning about C++ OOP
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, Amazon Q provided an overview of OOP basics
    and key concepts such as classes, objects, inheritance, encapsulation, and abstraction.
    It also included corresponding C++ constructs such as `class`, `public`, `private`,
    and `protected`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s ask Amazon Q Developer for the syntax and example of the `do...`
    `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.10 – Learning about the do…while loop](img/B21378_05_10_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Learning about the do…while loop
  prefs: []
  type: TYPE_NORMAL
- en: Observe, in the preceding and following screenshots, that Amazon Q Developer
    provided the syntax, details, and an example for the `do...` `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end C++ language use case development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s move to the sample use case to show the power of Amazon Q Developer’s
    ability to recommend code. To illustrate, I am going to use the VS Code script
    editor window with single and multi-line prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that we want to write a C++ program to develop a new operating system
    kernel, which can control system resources and has the ability to handle complex
    memory management tasks. The kernel must interact with hardware, manage processes,
    and ensure stability across different hardware architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the multi-line prompt technique to achieve the preceding use case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.11 – Writing a C++ program with Amazon Q Developer](img/B21378_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Writing a C++ program with Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows partial code suggested by Amazon Q Developer.
    You can observe that end-to-end code demonstrates several fundamental and advanced
    concepts in C++ programming, including OOP, classes, vectors, functions, error
    handling, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s use an interactive inline prompt with the chain-of-thought technique
    to enhance the code. As you can see, the `loadProcess()` function does not have
    exception handling, so let’s instruct it to add an exception handle for the null
    process with the single-line prompt technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.12 – Prompt – C++ program sample snapshot](img/B21378_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Prompt – C++ program sample snapshot
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the screenshot, based on our prompt, Amazon Q Developer added a
    `nullptr` condition to check the process load exception. If it encounters a null
    pointer, then the code gracefully exits with a `Error: process is` `null` message.'
  prefs: []
  type: TYPE_NORMAL
- en: C and C++ code explainability and optimization using Amazon Q Developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q provides options for achieving code explainability and optimization
    and is applicable to both C and C++. For more details on explainability and optimization,
    please refer to [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate code explainability and optimization, I will use the end-to-end
    code generated for the C language. As shown in the following screenshot, simply
    highlight the entire code, right-click to open the pop-up menu, then select **Amazon
    Q** and choose **Explain** for code explainability or **Optimize** for optimization
    recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 –C and C++ program explainability and optimization](img/B21378_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 –C and C++ program explainability and optimization
  prefs: []
  type: TYPE_NORMAL
- en: This will bring up Amazon Q Developer’s chat-style interface and move the full
    code for analysis. For explainability, Amazon Q Developer offers detailed information
    about each function and the overall code logic. Regarding optimization, Amazon
    Q Developer provides end-to-end optimized code that can be directly inserted into
    your editor by clicking the **Insert at** **cursor** button.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to C and C++, Amazon Q Developer supports multiple other programming
    languages such as C#, Go, Rust, and more. There are many enhancements happening
    in this area, and we anticipate further enhancements in support for additional
    languages (check the *References* section at the end of the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that Amazon Q Developer stands at the forefront
    of auto-code generation for foundational languages such as C and C++, offering
    developers a streamlined approach to software development. Through intuitive chat-style
    interfaces, programmers engage with Amazon Q Developer to explore these languages
    comprehensively. Furthermore, we learned that the platform leverages advanced
    prompting techniques to assist in generating code fragments or complete solutions,
    automating repetitive tasks, and ensuring uniformity in code structure. With robust
    support for C and C++ programming, Amazon Q Developer effectively handles a wide
    range of tasks including functions, loops, data structures, and memory management.
    It maintains adherence to industry best practices in error handling, indentation,
    naming conventions, and utilization of standard libraries. We learned that this
    meticulous approach enhances overall code quality and facilitates easier maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: A notable feature of Amazon Q Developer is its Explain functionality, enabling
    developers to gain deeper insights into the functionality of existing code, as
    we learned in this chapter. This tool not only aids in understanding but also
    promotes learning and proficiency enhancement. By automating routine coding tasks
    and providing optimization suggestions, Amazon Q Developer accelerates development
    cycles while fostering code consistency and quality, as we explored in this chapter.
    Furthermore, the platform serves as an educational resource, offering tutorials
    and practical examples to support developers in honing their skills and staying
    updated with industry standards.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, Amazon Q Developer empowers developers to focus more on innovation
    and less on mundane coding tasks, as mentioned in this chapter. It enhances productivity
    across projects, making it a valuable tool in modern software development environments
    where efficiency and agility are paramount; this was the main point learned in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how you can use Amazon Q Developer to suggest
    code in web development languages such as JavaScript and PHP.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'C/C++ for Visual Studio Code: [https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supported languages for Amazon Q Developer in the IDE: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
