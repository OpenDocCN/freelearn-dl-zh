["```py\n#include \"Perception/AIPerceptionComponent.h\"\n#include \"Perception/AISense_Sight.h\"\n#include \"Perception/AISenseConfig_Sight.h\"\n#include \"Perception/AISense_Hearing.h\"\n#include \"Perception/AISenseConfig_Hearing.h\"\n```", "```py\n  UPROPERTY(VisibleDefaultsOnly, Category = AI)\n  UAIPerceptionComponent* PerceptionComponent;\n```", "```py\nPerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT(\"SightPerceptionComponent\"));\n```", "```py\nUAISenseConfig_Sight* SightConfig;\nUAISenseConfig_Hearing* HearingConfig;\n```", "```py\n//Create the Senses\nSightConfig = CreateDefaultSubobject<UAISenseConfig_Sight>(FName(\"Sight Config\"));\nHearingConfig = CreateDefaultSubobject<UAISenseConfig_Hearing>(FName(\"Hearing Config\"));\n\n//Configuring the Sight Sense\nSightConfig->SightRadius = 600;\nSightConfig->LoseSightRadius = 700;\n\n//Configuration of the Hearing Sense\nHearingConfig->HearingRange = 900;\n```", "```py\n//Assigning the Sight and Hearing Sense to the AI Perception Component\nPerceptionComponent->ConfigureSense(*SightConfig);\nPerceptionComponent->ConfigureSense(*HearingConfig);\nPerceptionComponent->SetDominantSense(SightConfig->GetSenseImplementation());\n```", "```py\n//Binding the OnTargetPerceptionUpdate function\nPerceptionComponent->OnTargetPerceptionUpdated.AddDynamic(this, &ASightAIController::OnTargetPerceptionUpdate);\n```", "```py\n    // Assign to Team 1\n    SetGenericTeamId(FGenericTeamId(1));\n```", "```py\n[/Script/AIModule.AISense_Sight]\nbAutoRegisterAllPawnsAsSources=false\n```", "```py\n#include \"Perception/AIPerceptionStimuliSourceComponent.h\"\n```", "```py\nUAIPerceptionStimuliSourceComponent* PerceptionStimuliSourceComponent;\n```", "```py\nPerceptionStimuliSourceComponent = CreateDefaultSubobject<UAIPerceptionStimuliSourceComponent>(TEXT(\"PerceptionStimuliComponent\"));\n```", "```py\nPerceptionStimuliSourceComponent->RegisterForSense(TSubclassOf<UAISense_Sight>());\n```", "```py\n#pragma once\n#include \"CoreMinimal.h\"\n#include \"AIController.h\"\n#include \"Perception/AIPerceptionComponent.h\"\n#include \"Perception/AISense_Sight.h\"\n#include \"Perception/AISenseConfig_Sight.h\"\n#include \"SightAIController.generated.h\"\n```", "```py\n //Components Variables\n UAIPerceptionComponent* PerceptionComponent;\n UAISenseConfig_Sight* SightConfig;\n```", "```py\n//Constructor\n ASightAIController();\n\n//Binding function\n UFUNCTION()\n void OnTargetPerceptionUpdate(AActor* Actor, FAIStimulus Stimulus);\n```", "```py\nASightAIController::ASightAIController() {\n //Creating the AI Perception Component\n PerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT(\"SightPerceptionComponent\"));\n SightConfig = CreateDefaultSubobject<UAISenseConfig_Sight>(FName(\"Sight Config\"));\n\n}\n```", "```py\nASightAIController::ASightAIController() {\n  //Creating the AI Perception Component\n  PerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT(\"SightPerceptionComponent\"));\n  SightConfig = CreateDefaultSubobject<UAISenseConfig_Sight>(FName(\"Sight Config\"));\n\n //Configuring the Sight Sense\n SightConfig->SightRadius = 600;\n SightConfig->LoseSightRadius = 700;\n}\n```", "```py\nASightAIController::ASightAIController() {\n  //Creating the AI Perception Component\n  PerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT(\"SightPerceptionComponent\"));\n  SightConfig = CreateDefaultSubobject<UAISenseConfig_Sight>(FName(\"Sight Config\"));\n\n  //Configuring the Sight Sense\n  SightConfig->SightRadius = 600;\n  SightConfig->LoseSightRadius = 700;\n SightConfig->DetectionByAffiliation.bDetectEnemies = true;\n SightConfig->DetectionByAffiliation.bDetectNeutrals = true;\n SightConfig->DetectionByAffiliation.bDetectFriendlies = true;\n}\n```", "```py\nASightAIController::ASightAIController() {\n  //Creating the AI Perception Component\n  PerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT(\"SightPerceptionComponent\"));\n  SightConfig = CreateDefaultSubobject<UAISenseConfig_Sight>(FName(\"Sight Config\"));\n\n  //Configuring the Sight Sense\n  SightConfig->SightRadius = 600;\n  SightConfig->LoseSightRadius = 700;\n  SightConfig->DetectionByAffiliation.bDetectEnemies = true;\n  SightConfig->DetectionByAffiliation.bDetectNeutrals = true;\n  SightConfig->DetectionByAffiliation.bDetectFriendlies = true;\n\n //Assigning the Sight Sense to the AI Perception Component\n PerceptionComponent->ConfigureSense(*SightConfig);\n PerceptionComponent->SetDominantSense(SightConfig->GetSenseImplementation());\n\n //Binding the OnTargetPerceptionUpdate function\n PerceptionComponent->OnTargetPerceptionUpdated.AddDynamic(this, &ASightAIController::OnTargetPerceptionUpdate);\n}\n```", "```py\nvoid ASightAIController::OnTargetPerceptionUpdate(AActor* Actor, FAIStimulus Stimulus)\n{\n //Retrieving Perceived Actors\n TArray<AActor*> PerceivedActors;\n PerceptionComponent->GetPerceivedActors(TSubclassOf<UAISense_Sight>(), PerceivedActors);\n\n}\n```", "```py\nvoid ASightAIController::OnTargetPerceptionUpdate(AActor* Actor, FAIStimulus Stimulus)\n{\n  //Retrieving Perceived Actors\n  TArray<AActor*> PerceivedActors;\n  PerceptionComponent->GetPerceivedActors(TSubclassOf<UAISense_Sight>(), PerceivedActors);\n\n //Calculating the Number of Perceived Actors and if the current target Left or Entered the field of view.\n bool isEntered = PerceivedActors.Contains(Actor);\n int NumberObjectSeen = PerceivedActors.Num();\n\n}\n```", "```py\nvoid ASightAIController::OnTargetPerceptionUpdate(AActor* Actor, FAIStimulus Stimulus)\n{\n  //Retrieving Perceived Actors\n  TArray<AActor*> PerceivedActors;\n  PerceptionComponent->GetPerceivedActors(TSubclassOf<UAISense_Sight>(), PerceivedActors);\n\n  //Calculating the Number of Perceived Actors and if the current target Left or Entered the field of view.\n  bool isEntered = PerceivedActors.Contains(Actor);\n  int NumberObjectSeen = PerceivedActors.Num();\n\n //Formatting the string and printing it\n FString text = FString(Actor->GetName() + \" has just \" + (isEntered ? \"Entered\" : \"Left\") + \" the field of view. Now \" + FString::FromInt(NumberObjectSeen) + \" objects are visible.\");\n if (GEngine) {\n GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Turquoise, text);\n }\n UE_LOG(LogTemp, Warning, TEXT(\"%s\"), *text);\n\n}\n```"]