["```py\n    import time\n    from numpy import mean\n    import matplotlib.pyplot as plt\n    import math\n    #\n    ```", "```py\n    # set our frame rate - how many cycles per second to run our loop?\n    FRAMERATE = 30\n    # how long does each frame take in seconds?\n    FRAME = 1.0/FRAMERATE\n    # initialize myTimer\n    # This is one of our timer variables where we will store the clock time from the operating system.\n    myTimer = 0.0\n    ```", "```py\n    # how many cycles to test? counter*FRAME = runtime in seconds\n    counter = 2000\n    ```", "```py\n    # factor for our timing loop computations\n    TIME_CORRECTION= 0.0\n    ```", "```py\n    # place to store data\n    dataStore = []\n    # Operator information ready to go\n    # We create a heading to show that the program is starting its test\n    print \"START COUNTING: FRAME TIME\", FRAME, \"RUN TIME:\",FRAME*counter\n    ```", "```py\n    # initialize the precision clock\n     myTime = newTime = time.time()\n     # save the starting time for later\n     masterTime=myTime\n     # begin our timing loop\n     for ii in range(counter):\n    ```", "```py\n        # we start our frame - this represents doing some detailed \n        math calculations\n        # this is just to burn up some CPU cycles\n        for jj in range(1000):\n              x = 100\n              y = 23 + ii\n              z = math.cos(x)\n              z1 = math.sin(y)\n        #\n        # read the clock after all compute is done\n        # this is our working frame time\n        #\n    ```", "```py\n        newTime = time.time()\n        # how much time has elapsed so far in this frame\n        # time = UNIX clock in seconds\n        # so we have to subract our starting time to get the elapsed\n        time\n        myTimer = newTime-myTime\n        # what is the time left to go in the frame?\n        timeError = FRAME-myTimer\n    ```", "```py\n    # OK time to sleep\n    # the TIME CORRECTION helps account for all of this clock\n    reading\n    # this also corrects for sleep timer errors\n    # we are using a porpotional control to get the system to\n    converge\n    # if you leave the divisor out, then the system oscillates\n    out of control\n    sleepTime = timeError + (TIME_CORRECTION/2.0)\n    # quick way to eliminate any negative numbers\n    # which are possible due to jitter\n    # and will cause the program to crash\n    sleepTime=max(sleepTime,0.0)\n```", "```py\n        # put this process to sleep\n        time.sleep(sleepTime)\n    ```", "```py\n        #print timeError,TIME_CORRECTION\n        # set our timer up for the next frame\n        time2=time.time()\n        measuredFrameTime = time2-myTime\n        ##print measuredFrameTime,\n        TIME_CORRECTION=FRAME-(measuredFrameTime)\n        dataStore.append(measuredFrameTime*1000)\n        #TIME_CORRECTION=max(-FRAME,TIME_CORRECTION)\n        #print TIME_CORRECTION\n        myTime = time.time()\n    ```", "```py\n    # Timing loop test is over - print the results\n    #\n    # get the total time for the program\n    endTime = time.time() - masterTime\n    # compute the average frame time by dividing total time by our number of frames\n    avgTime = endTime / counter\n    #print report\n     print \"FINISHED COUNTING\"\n     print \"REQUESTED FRAME TIME:\",FRAME,\"AVG FRAME TIME:\",avgTime\n     print \"REQUESTED TOTAL TIME:\",FRAME*counter,\"ACTUAL TOTAL TIME:\", endTime\n     print \"AVERAGE ERROR\",FRAME-avgTime, \"TOTAL_ERROR:\",(FRAME*counter) - endTime\n     print \"AVERAGE SLEEP TIME: \",mean(dataStore),\"AVERAGE RUN TIME\",(FRAME*1000)-mean(dataStore)\n     # loop is over, plot result\n     # this lets us see the \"jitter\" in the result\n     plt.plot(dataStore)\n     plt.show()\n    ```", "```py\n    START COUNTING: FRAME TIME 0.0333333333333 RUN TIME: 66.6666666667\n    FINISHED COUNTING\n    REQUESTED FRAME TIME: 0.0333333333333 AVG FRAME TIME: 0.0331549999714\n    REQUESTED TOTAL TIME: 66.6666666667 ACTUAL TOTAL TIME: 66.3099999428\n    AVERAGE ERROR 0.000178333361944 TOTAL_ERROR: 0.356666723887\n    AVERAGE SLEEP TIME: 33.1549999714 AVERAGE RUN TIME 0.178333361944\n    ```"]