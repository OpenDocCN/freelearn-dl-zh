["```py\n    import spacy\n    from spacy import displacy\n    ```", "```py\n    %run -i \"../util/lang_utils.ipynb\"\n    ```", "```py\n    input_text = \"I shot an elephant in my pajamas.\"\n    doc = small_model(input_text)\n    ```", "```py\n    options = {\"add_lemma\": True,\n            \"compact\": True,\n            \"color\": \"green\",\n            \"collapse_punct\": True,\n            \"arrow_spacing\": 20,\n            \"bg\": \"#FFFFE6\",\n            \"font\": \"Times\",\n            \"distance\": 120}\n    displacy.render(doc, style='dep', options=options, jupyter=True)\n    ```", "```py\n    from pathlib import Path\n    path = \"../data/dep_parse_viz.svg\"\n    output_path = Path(path)\n    svg = displacy.render(doc, style=\"dep\", jupyter=False)\n    output_path.open(\"w\", encoding=\"utf-8\").write(svg)\n    ```", "```py\n    input_text_list = \"I shot an elephant in my pajamas. I hate it \n        when elephants wear my pajamas.\"\n    doc = small_model(input_text_list)\n    ```", "```py\n    displacy.render(list(doc.sents), style='dep', options=options, \n        jupyter=True)\n    ```", "```py\n    import spacy\n    import matplotlib.pyplot as plt\n    ```", "```py\n    %run -i \"../util/lang_utils.ipynb\"\n    %run -i \"../util/file_utils.ipynb\"\n    ```", "```py\n    text_file = \"../data/sherlock_holmes.txt\"\n    text = read_text_file(text_file)\n    ```", "```py\n    past_tags = [\"VBD\", \"VBN\"]\n    present_tags = [\"VBG\", \"VBP\", \"VBZ\"]\n    ```", "```py\n    def visualize_verbs(text, nlp):\n        doc = nlp(text)\n        verb_dict = {\"Inf\":0, \"Past\":0, \"Present\":0}\n        for token in doc:\n            if (token.tag_ == \"VB\"):\n                verb_dict[\"Inf\"] = verb_dict[\"Inf\"] + 1\n            if (token.tag_ in past_tags):\n                verb_dict[\"Past\"] = verb_dict[\"Past\"] + 1\n            if (token.tag_ in present_tags):\n                verb_dict[\"Present\"] = verb_dict[\"Present\"] + 1\n        plt.bar(range(len(verb_dict)),\n            list(verb_dict.values()), align='center',\n            color=[\"red\", \"green\", \"blue\"])\n        plt.xticks(range(len(verb_dict)),\n            list(verb_dict.keys()))\n        plt.show()\n    ```", "```py\n    visualize_verbs(text, small_model)\n    ```", "```py\n    import spacy\n    from spacy import displacy\n    ```", "```py\n    %run -i \"../util/lang_utils.ipynb\"\n    ```", "```py\n    text = \"\"\"iPhone 12: Apple makes jump to 5G\n    Apple has confirmed its iPhone 12 handsets will be its first to work on faster 5G networks.\n    The company has also extended the range to include a new \"Mini\" model that has a smaller 5.4in screen.\n    The US firm bucked a wider industry downturn by increasing its handset sales over the past year.\n    But some experts say the new features give Apple its best opportunity for growth since 2014, when it revamped its line-up with the iPhone 6.\n    \"5G will bring a new level of performance for downloads and uploads, higher quality video streaming, more responsive gaming,\n    real-time interactivity and so much more,\" said chief executive Tim Cook.\n    There has also been a cosmetic refresh this time round, with the sides of the devices getting sharper, flatter edges.\n    The higher-end iPhone 12 Pro models also get bigger screens than before and a new sensor to help with low-light photography.\n    However, for the first time none of the devices will be bundled with headphones or a charger.\"\"\"\n    ```", "```py\n    doc = small_model(text)\n    doc.user_data[\"title\"] = \"iPhone 12: Apple makes jump to 5G\"\n    ```", "```py\n    colors = {\"ORG\": \"green\", \"PERSON\":\"yellow\"}\n    options = {\"colors\": colors}\n    displacy.render(doc, style='ent', options=options, jupyter=True)\n    ```", "```py\n    path = \"../data/ner_vis.html\"\n    html = displacy.render(doc, style=\"ent\",\n        options=options, jupyter=False)\n    html_file= open(path, \"w\", encoding=\"utf-8\")\n    html_file.write(html)\n    html_file.close()\n    ```", "```py\n    from sklearn.svm import SVC\n    from sentence_transformers import SentenceTransformer\n    from sklearn.metrics import confusion_matrix\n    import matplotlib.pyplot as plt\n    from sklearn.metrics import ConfusionMatrixDisplay\n    ```", "```py\n    %run -i \"../util/util_simple_classifier.ipynb\"\n    ```", "```py\n    train_df = pd.read_json(\"../data/bbc_train.json\")\n    test_df = pd.read_json(\"../data/bbc_test.json\")\n    train_df.sample(frac=1)\n    ```", "```py\n    model = SentenceTransformer('all-MiniLM-L6-v2')\n    def get_sentence_vector(text, model):\n        sentence_embeddings = model.encode([text])\n        return sentence_embeddings[0]\n    ```", "```py\n    def train_classifier(X_train, y_train):\n        clf = SVC(C=0.1, kernel='rbf')\n        clf = clf.fit(X_train, y_train)\n        return clf\n    ```", "```py\n    target_names=[\"tech\", \"business\", \"sport\",\n        \"entertainment\", \"politics\"]\n    vectorize = lambda x: get_sentence_vector(x, model)\n    (X_train, X_test, y_train, y_test) = create_train_test_data(\n        train_df, test_df, vectorize,\n        column_name=\"text_clean\")\n    clf = train_classifier(X_train, y_train)\n    print(classification_report(train_df[\"label\"],\n            y_train, target_names=target_names))\n    test_classifier(test_df, clf, target_names=target_names)\n    ```", "```py\n                   precision    recall  f1-score   support\n             tech       1.00      1.00      1.00       321\n         business       1.00      1.00      1.00       408\n            sport       1.00      1.00      1.00       409\n    entertainment       1.00      1.00      1.00       309\n         politics       1.00      1.00      1.00       333\n         accuracy                           1.00      1780\n        macro avg       1.00      1.00      1.00      1780\n     weighted avg       1.00      1.00      1.00      1780\n                   precision    recall  f1-score   support\n             tech       0.97      0.95      0.96        80\n         business       0.98      0.97      0.98       102\n            sport       0.98      1.00      0.99       102\n    entertainment       0.96      0.99      0.97        77\n         politics       0.98      0.96      0.97        84\n         accuracy                           0.98       445\n        macro avg       0.97      0.97      0.97       445\n     weighted avg       0.98      0.98      0.98       445\n    ```", "```py\n    num_to_text_mapping = {0:\"tech\", 1:\"business\",\n        2:\"sport\", 3:\"entertainment\", 4:\"politics\"}\n    test_df[\"pred_label\"] = test_df[\"prediction\"].apply(\n        lambda x: num_to_text_mapping[x])\n    ```", "```py\n    cm = confusion_matrix(\n        test_df[\"label_text\"],\n        test_df[\"pred_label\"], labels=target_names)\n    disp = ConfusionMatrixDisplay(\n        confusion_matrix=cm,\n        display_labels=target_names)\n    disp.plot()\n    plt.show()\n    ```", "```py\n    import matplotlib.pyplot as plt\n    from wordcloud import WordCloud, STOPWORDS\n    ```", "```py\n    %run -i \"../util/file_utils.ipynb\"\n    ```", "```py\n    text_file = \"../data/sherlock_holmes.txt\"\n    text = read_text_file(text_file)\n    ```", "```py\n    def create_wordcloud(text, stopwords, filename, \n        apply_mask=None):\n        if (apply_mask is not None):\n            wordcloud = WordCloud(\n                background_color=\"white\", max_words=2000,\n                mask=apply_mask, stopwords=stopwords,\n                min_font_size=10, max_font_size=100)\n            wordcloud.generate(text)\n            wordcloud.to_file(filename)\n            plt.figure()\n            plt.imshow(wordcloud, interpolation='bilinear')\n            plt.axis(\"off\")\n            plt.show()\n        else:\n            wordcloud = WordCloud(min_font_size=10,\n                max_font_size=100, stopwords=stopwords,\n                width=1000, height=1000, max_words=1000,\n                background_color=\"white\").generate(text)\n            wordcloud.to_file(filename)\n            plt.figure()\n            plt.imshow(wordcloud, interpolation=\"bilinear\")\n            plt.axis(\"off\")\n            plt.show()\n    ```", "```py\n    create_wordcloud(text, set(STOPWORDS), \n        \"../data/sherlock_wc.png\")\n    ```", "```py\n    import numpy as np\n    from PIL import Image\n    ```", "```py\n    sherlock_data = Image.open(\"../data/sherlock.png\")\n    sherlock_mask = np.array(sherlock_data)\n    ```", "```py\n    create_wordcloud(text, set(STOPWORDS),\n        \"../data/sherlock_mask.png\",\n        apply_mask=sherlock_mask)\n    ```", "```py\n    import gensim\n    import pyLDAvis.gensim\n    ```", "```py\n    model_path = \"../models/bbc_gensim/lda.model\"\n    dict_path = \"../models/bbc_gensim/id2word.dict\"\n    corpus_path = \"../models/bbc_gensim/corpus.mm\"\n    ```", "```py\n    dictionary = gensim.corpora.Dictionary.load(dict_path)\n    corpus = gensim.corpora.MmCorpus(corpus_path)\n    lda = gensim.models.ldamodel.LdaModel.load(model_path)\n    ```", "```py\n    lda_prepared = pyLDAvis.gensim.prepare(lda, corpus, dictionary)\n    pyLDAvis.save_html(lda_prepared, '../data/lda-gensim.html')\n    ```", "```py\n    pyLDAvis.enable_notebook()\n    pyLDAvis.display(lda_prepared)\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    from bertopic import BERTopic\n    from bertopic.representation import KeyBERTInspired\n    ```", "```py\n    %run -i \"../util/lang_utils.ipynb\"\n    ```", "```py\n    bbc_df = pd.read_csv(\"../data/bbc-text.csv\")\n    ```", "```py\n    docs = bbc_df[\"text\"].values\n    representation_model = KeyBERTInspired()\n    topic_model = BERTopic(\n        representation_model=representation_model)\n    topics, probs = topic_model.fit_transform(docs)\n    ```", "```py\n    topic_model.visualize_topics()\n    ```", "```py\n    hierarchical_topics = topic_model.hierarchical_topics(\n        bbc_df[\"text\"])\n    topic_model.visualize_hierarchy(\n        hierarchical_topics=hierarchical_topics)\n    ```", "```py\n    topic_model.visualize_barchart(top_n_topics=15)\n    ```", "```py\n    topic_model.visualize_documents(docs)\n    ```"]