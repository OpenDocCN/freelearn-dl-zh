- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upgrading the GenAISys with Data Security and Moderation for Customer Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will open up our GenAISys by integrating it with real-world
    online services—specifically, by connecting it to an online weather API. This
    will enable the fictional online travel agency that we’ve been supporting throughout
    the book to access real-time weather data. Weather reports for a specific location
    serve as an entry point for various tasks essential to the agency’s operations,
    such as marketing initiatives, recommendations for tourist activities, and coordinating
    product deliveries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connecting our GenAISys to external online resources transitions our system
    from a controlled internal environment to the unpredictable realm of real-time
    data interactions. This transition, however, introduces critical security concerns.
    Opening a system without adequate protections can inadvertently expose sensitive
    data or cause security breaches, posing genuine risks both to users and the organization
    itself. As such, robust security measures are a prerequisite before fully integrating
    external services. Therefore, this chapter presents a threefold challenge: implementing
    the weather service using the OpenWeather API, building a moderation system leveraging
    OpenAI’s moderation capabilities, and developing a RAG-based data security function
    with Pinecone, which will detect and prevent sensitive-topic breaches. We will
    rely heavily on the flexible and powerful handler selection mechanism of our existing
    GenAISys architecture to seamlessly integrate these new functionalities. Our objective
    remains clear—minimal code enhancements with maximum functional impact.'
  prefs: []
  type: TYPE_NORMAL
- en: The chapter begins by detailing how these additional components—moderation,
    data security, and real-time weather—fit into the overall architecture of the
    GenAISys. Then, we’ll dive under the surface to build the moderation function
    using OpenAI’s moderation endpoint. We will then construct a RAG-powered data
    security module, using Pinecone, to proactively detect and filter out sensitive
    or inappropriate inputs. By integrating these two security layers directly into
    the GenAISys’s handler selection mechanism, we ensure comprehensive protection
    against unwanted interactions.
  prefs: []
  type: TYPE_NORMAL
- en: With security firmly in place, we will then implement the OpenWeather API. This
    integration allows us to retrieve live, real-time weather information to power
    a range of engaging, user-centric tasks. Finally, we will demonstrate the capabilities
    of the enhanced GenAISys through practical, multimodal, multi-user scenarios—such
    as generating weather-based activity recommendations, crafting customized promotional
    images for travel merchandise, and dynamically creating personalized weather-aware
    messages for travelers. By the end of this chapter, you’ll be fully equipped to
    adapt the core architecture and concepts we’ve explored in the GenAISys to real-world
    applications, confidently delivering a comprehensive, secure, and highly functional
    **proof of concept**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the GenAISys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a security function to the handler selection mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the weather forecast component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running use cases in the GenAISys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by clearly mapping out how the new moderation, data security, and
    weather functions integrate into our GenAISys.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the GenAISys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating moderation, data security, and real-time weather functionalities
    into our GenAISys will affect all three architectural layers, as illustrated in
    *Figure 9.1*. We will rely on the framework built around our handler selection
    mechanism to make this three-level, three-function implementation seamless.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1: Moderation, data security, and weather report integration](img/B32304_09_1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Moderation, data security, and weather report integration'
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation will impact all three layers as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Layer 1 (IPython interface)**: We’ll introduce a new **Weather** option within
    the **Reasoning** drop-down menu of the IPython interface. Why place it here?
    Because in real-world project settings, the weather report function could easily
    be expanded into a more complex, multi-step **chain-of-thought** (**CoT**) pipeline,
    enabling the generation of sophisticated, context-aware outputs based on weather
    conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 2 (AI agent)**: The central orchestrator of our GenAISys, the handler
    selection mechanism, will now manage an additional component—the real-time weather
    forecasting capability. More critically, we’ll enhance the handler with an integrated
    moderation and data security mechanism that will function as an immediate *kill
    switch*, instantly terminating the process and returning a security warning to
    the user when inappropriate or sensitive content is detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 3 (functions and agents)**: Three new key functions—moderation, data
    security, and weather forecast retrieval—will be implemented at this level. The
    moderation and data security checks will reside outside the handler registry since
    their roles are not optional. As depicted in *Figure 9.2*, these two functions
    will form a mandatory global security barrier directly controlled by the handler
    selection mechanism, protecting users and company data before initiating any further
    tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 9.2: Security and moderation checks are directly managed within the
    handler selection mechanism](img/B32304_09_2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Security and moderation checks are directly managed within the
    handler selection mechanism'
  prefs: []
  type: TYPE_NORMAL
- en: This security system will proactively intercept and evaluate each user input,
    blocking further processing and immediately alerting the user via the IPython
    interface if inappropriate or sensitive content is detected.
  prefs: []
  type: TYPE_NORMAL
- en: 'While building and showcasing your GenAISys as a flexible proof of concept,
    remember to demonstrate its scalability clearly. Highlight its potential for integration
    with additional AI functions, further security features, or alternative generative
    models. However, exercise caution: avoid prematurely adding functionalities without
    concrete project requirements, as this can lead to unnecessary complexity or overdeveloping
    your project. The goal is to clearly show the project’s potential without investing
    resources in unrequested developments.'
  prefs: []
  type: TYPE_NORMAL
- en: With this strategic clarity in mind, we will begin by constructing the security
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a security function to the handler selection mechanism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will build the **security function**, the **moderation
    function**, and the **data security function**, as illustrated in *Figure 9.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3: The handler selection mechanism directly calls the security function](img/B32304_09_3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: The handler selection mechanism directly calls the security function'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll implement these functions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The security function will call the moderation function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security function will also call the data security function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The moderation function will contain subfunctions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data security function will ensure compliance with security standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s first build the security function along with its calls.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the security function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The security function is directly integrated with the handler selection mechanism,
    as illustrated in *Figure 9.4*. It receives the user message directly, prior to
    any handler selection in the handler registry. If the user message violates the
    GenAISys content policy, the security function returns a `False` flag (indicating
    a content violation) to the IPython interface.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4: The security function is directly connected to the handler selection
    mechanism](img/B32304_09_4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: The security function is directly connected to the handler selection
    mechanism'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `GenAISys_Customer_Service.ipynb` and go to the *Security* section within
    the Chapter09 directory on GitHub ([https://github.com/Denis2054/Building-Business-Ready-Generative-AI-Systems/tree/main](https://github.com/Denis2054/Building-Business-Ready-Generative-AI-Systems/tree/main)).
    We first create the function that sets the `securitym` flag to `True`, signifying
    the content does not violate content policies. Also in this function, `securityd=True`
    shows that no sensitive topic has been detected and that the message is data security-compliant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/3-PPMUMLAP0325.png)**Quick tip**: Enhance your coding experience with
    the **AI Code Explainer** and **Quick Copy** features. Open this book in the next-gen
    Packt Reader. Click the **Copy** button'
  prefs: []
  type: TYPE_NORMAL
- en: (**1**) to quickly copy code into your coding environment, or click the **Explain**
    button
  prefs: []
  type: TYPE_NORMAL
- en: (**2**) to get the AI assistant to explain a block of code to you.
  prefs: []
  type: TYPE_NORMAL
- en: '![A white background with a black text  AI-generated content may be incorrect.](img/image_%282%29.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/4.png)**The next-gen Packt Reader** is included for free with the purchase
    of this book. Scan the QR code OR visit [packtpub.com/unlock](http://packtpub.com/unlock),
    then use the search bar to find this book by name. Double-check the edition shown
    to make sure you get the right one.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A qr code on a white background  AI-generated content may be incorrect.](img/Unlock_Code1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The function begins by calling the moderation and content acceptability functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`moderation(user_message)` invokes the OpenAI moderation API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_acceptable(user_message, response)` processes the moderation response'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The debugging line (`print(securitym)`) can be uncommented during testing or
    troubleshooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, the security function calls the data security function, which checks
    for sensitive topics within the user message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `securityd` variable will store either `True` or `False`, depending on whether
    the message meets the data security criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final part of the function evaluates both flags (`securitym` and `securityd`)
    and returns the security status accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you prefer not to activate the moderation or data security checks, you can
    comment out the relevant lines in the security function—specifically, the code
    between the assignments of `securitym=True` and `securityd=True`, and the `if
    securitym==False` or `securityd==False` conditional statement. This way, the function
    defaults to always returning `True`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now examine how the handler selection mechanism interacts with the IPython
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Handler selection mechanism interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The handler selection mechanism and IPython interface interact closely, as shown
    in *Figure 9.5*. When the IPython interface sends a user message to the handler
    selection mechanism, it determines whether the message complies with security
    policies.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5: Handler selection mechanism and IPython interactions](img/B32304_09_5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Handler selection mechanism and IPython interactions'
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary structure of the handler selection mechanism function remains unchanged
    from previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'However, at the start of this function, we now call the security function.
    It returns a security status (`True` for compliant or `False` for non-compliant):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the message is flagged as non-compliant, a clear message will be immediately
    returned to the user interface. We will test security function examples thoroughly
    in the *Running security checks* section later. Before that, let’s move forward
    by implementing the moderation function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the moderation function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use OpenAI Omni, which has a comprehensive range of categorization
    options, as the moderation model: [https://platform.openai.com/docs/guides/moderation](https://platform.openai.com/docs/guides/moderation).'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `GenAISys_Customer_Service.ipynb` notebook and navigate to the *Moderation*
    subsection within the *Security* section. The moderation function will be directly
    invoked by the handler selection mechanism, as illustrated in *Figure 9.6*. It
    classifies user messages and provides details about any inappropriate content
    flagged during processing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: Calling the moderation function](img/B32304_09_6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Calling the moderation function'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement the moderation function with OpenAI Omni as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This function processes the user message and returns a moderation response.
    Once received by the security function, the response is sent to another function,
    `is_acceptable`, to evaluate whether the message is acceptable or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The response contains `response.results[0].flagged`, which provides a `True`
    value if the content is flagged or a `False` status if the response is acceptable.
    If the content is flagged, the details of the response will be saved in a timestamped
    JSON file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the function returns the flagged status as `not_flagged`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If the message is flagged, details are saved in a timestamped JSON file located
    within the `/logs` subdirectory. The resulting JSON file contains a unique ID,
    the model used, and the status of a wide range of categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the `harassment` category has been flagged, for example. The
    file also contains a score for each category, as shown in this excerpt from the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform a quick quality control check or evaluate specific user messages
    manually, uncomment and use the following lines in your notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The file containing the information can be processed further with other functions
    as required for your project. We could add the user to the file. We can also view
    the details of the dialogue to find which user entered the flagged message in
    the *Load and display the conversation history* section of the notebook. We will
    go through these features in the *Running security checks* section later.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now build the data security function.
  prefs: []
  type: TYPE_NORMAL
- en: Building the data security function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now build a data security function designed to detect whether a user
    message contains sensitive topics. This function covers a wide spectrum of security-related
    concerns, from safeguarding confidential information to preventing inappropriate
    or sensitive discussions through the GenAISys interface. The data security function
    comprises two components, as shown in *Figure 9.7*: the first component populates
    a Pinecone index with sensitive topics, and the second component queries this
    index to detect sensitive topics within user messages.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: The two components of the data security function](img/B32304_09_7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: The two components of the data security function'
  prefs: []
  type: TYPE_NORMAL
- en: Populating the Pinecone index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will first populate the Pinecone index with sensitive topics. Open `Pinecone_Security.ipynb`.
    This notebook mirrors the structure of the earlier notebook from [*Chapter 3*](Chapter_3.xhtml#_idTextAnchor085)(`Chapter03/Pinecone_instruction_scenarios.ipynb`).
    We will simply adapt it here to accommodate sensitive topics. Feel free to revisit
    `Pinecone_instruction_scenarios.ipynb` for a detailed refresher if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll briefly cover the code sections specifically adapted for this domain.
    The first step involves downloading our `sensitive_topics` dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The file, `sensitive_topics.csv`, contains 100 sensitive topics structured
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: A unique identifier ranging from `1000` to `1099`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values`: Text descriptions of sensitive topics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the first topic is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If a user message contains content similar to this topic, for example, it will
    be flagged. Vector-based similarity searches provide more nuanced detection than
    traditional methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to chunk the data from the `sensitive_topics.csv` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create a namespace within Pinecone to hold this sensitive data. We
    will call this namespace `security`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The upserting function remains unchanged, retaining the same column names as
    in the `.csv` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With the data now populated in Pinecone, we’ll proceed to implement the query
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Querying the Pinecone index
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open `GenAISys_Customer_Service.ipynb` and navigate to the *Data security* subsection
    in the *Security* section. The goal here is to determine whether a user message
    matches any sensitive topics stored in the Pinecone security index. If a match
    is found, the message will be flagged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, we set default security indicators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The default value, `sec`, is set to `True`, meaning that the user message is
    secure until found otherwise. Additionally, `target_id` is set to `0` to show
    that no record in the Pinecone index has been found yet. Additionally, we have
    a security level threshold, `security_level`, that can be set to the value deemed
    necessary in production. You can modify it here in the code or create a security
    interface once your strategy has been decided with your team. In this case, `security_level`
    is set to `0.30` to avoid filtering low-level security items in this educational
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then define our namespace for querying:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We then query the Pinecone index to detect sensitive topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We now extract the score, which we will use as our security level threshold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can display the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If a similar sensitive topic is found (indicated by a score that exceeds the
    threshold), we have a security logic process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The query results are tracked and the details are recorded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The result, `True` (non-sensitive) or `False` (sensitive), is returned to the
    security function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To manually evaluate messages, you can uncomment the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Let’s now run security checks for moderation and sensitive data classification.
  prefs: []
  type: TYPE_NORMAL
- en: Running security checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll perform two security evaluations: one for moderation (harassment) and
    another for sensitive data. Let’s first begin with a moderation user message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a user message that contains harassment content, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8: A harassing message](img/B32304_09_8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: A harassing message'
  prefs: []
  type: TYPE_NORMAL
- en: 'The moderation function detects the inappropriate content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'A JSON file containing the flagged message is created in the `/logs` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The file contains the moderation categories and has flagged the user message
    as `harassment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The probability is also logged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a data security function. When we run a security check for a sensitive
    topic, such as referring to mismanaged client funds, the output confirms the detection
    of a sensitive topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'A file containing the flagged message is created :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This file contains a record of the flagged message in the Pinecone index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Both moderation and sensitive data checks have created detailed records. These
    logs can be further expanded with user profiles or additional data as your project
    needs evolve. Additionally, the GenAISys stores full dialogue histories (`conversation_history.json`)
    and summarizations for future reference and auditing. The conversation history
    is activated when we enter `exit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The *Load and display the conversation history* outputs contain the log of
    the conversation with the usernames and security flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The raw log of the conversation is saved in `/content/conversation_history.json`
    for further use. The *Load and summarize the conversation history* section contains
    a summary of the dialogue, which includes the username, user messages, and assistant’s
    responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: With these core functionalities in place, our system’s moderation and security
    measures can be easily adapted or expanded to meet your project-specific requirements.
    We’re now ready to move forward by integrating an external weather forecast component.
  prefs: []
  type: TYPE_NORMAL
- en: Building a weather forecast component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll cautiously open up the GenAISys by integrating a weather
    forecast library and building a dedicated weather forecast function using an external
    API. This integration allows our GenAISys to interact directly with real-time
    weather information, providing a pathway to more controlled interactions with
    external web services. After successfully implementing this functionality, the
    GenAISys could be authorized to interact with other websites as needed.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll implement real-time weather forecasts for specific locations (cities in
    this case) to support marketing, production planning, deliveries, and customer
    service, as illustrated in the upcoming *Running the GenAISys* section.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `GenAISys_Customer_Service.ipynb` notebook. The notebook uses the OpenWeather
    API, available at [https://home.openweathermap.org/](https://home.openweathermap.org/).
    OpenWeather provides a wide range of weather forecasting services, but we will
    focus specifically on real-time forecasts suitable for our use case.
  prefs: []
  type: TYPE_NORMAL
- en: To use the OpenWeather API, sign up for an account, obtain your API key, and
    carefully review their pricing plans at [https://openweathermap.org/price](https://openweathermap.org/price).
    At the time of writing, the API calls required for our examples are available
    under their free tier, subject to request limits. Please confirm the cost and
    limits before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will seamlessly integrate our weather forecast function into the GenAISys
    framework using the handler selection mechanism, as depicted in *Figure 9.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9: Integrating a weather forecast API in the GenAISys framework](img/B32304_09_9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Integrating a weather forecast API in the GenAISys framework'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we set the OpenWeather environment up, we will integrate the weather forecast
    function seamlessly with the handler selection mechanism framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IPython interface**: Add a **Weather forecast** option to the interface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Handler selection mechanism**: No change.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Handler registry**: Include a dedicated weather forecast handler.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**AI functions**: Develop a specific weather forecast function.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s first set up the OpenWeather environment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the OpenWeather environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `GenAISys_Customer_Service.ipynb`, go to the *Weather* subsection under the
    *Setting up the environment* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, download the script for retrieving your OpenWeather API key from Google
    Secrets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The notebook then runs the API key initialization function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, initialize the API key using this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set the API key with another method, depending on the environment
    you are running the notebook in. We begin by double-checking that `api_key` is
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This double-check is not obligatory; it just ensures that the code is robust
    if the session is interrupted by micro web interruptions, for example. Feel free
    to remove the redundant check if your environment is stable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenWeather call is remarkably simple. It requires only your API key and
    the city name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note that `metric` is a specific keyword defined by the OpenWeatherMap API,
    meaning degrees **Celsius** (**C**), and also provides the wind speed in **meters
    per second** (**m/s**). If you want US customary units, change metric to imperial,
    `&units=imperial`, and you will obtain degrees **Fahrenheit** (**°F**) and windspeed
    in **miles per hour** (**mph**).
  prefs: []
  type: TYPE_NORMAL
- en: 'We now just have to make the request and retrieve the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now extract and return the real-time weather information we need for
    our use case. We will use the current temperature, a brief weather description,
    and the wind speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note that we only provided the name of the city, not the country. The OpenWeatherMap
    API has a smart system for handling requests for cities with the same name in
    different locations. When it searches for “Paris,” it defaults to the most prominent
    and well-known location, which is Paris, France.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the API receives a request with just a city name (`q={city_name}`), it
    uses an internal algorithm to determine the most likely intended location. This
    algorithm prioritizes several factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Population**: Larger, more populous cities are often ranked higher'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Significance**: Capital cities and major cultural or economic hubs are given
    preference'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal Ranking**: OpenWeatherMap maintains its own database and ranking
    system for locations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because Paris, France, is a major global capital with a significantly larger
    population and international recognition than Paris, Texas, the API defaults to
    the French capital.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are building an educational example using major tourist locations,
    such as Paris, the algorithm easily defaults to Paris, France. If needed in production,
    you could modify the function to include the country and country code, as in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The information that we are returning is sufficient for a generative AI model
    to interpret the real-time weather forecast and make decisions based on it. With
    that, we are now ready to add a weather forecast option to the IPython interface.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a weather widget to the interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now add a **Weather** option to the instruction drop-down list as shown
    in *Figure 9.10*. Why add a weather forecast option to a reasoning list? The motivation
    comes from the fact that we are building a GenAISys proof of concept. We could
    imagine several CoT scenarios based on the use cases we will run in our GenAISys.
    However, if we write these pipelines before having workshops with the end users,
    they might find the system too rigid.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10: Add a weather forecast option to the IPython interface](img/B32304_09_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: Add a weather forecast option to the IPython interface'
  prefs: []
  type: TYPE_NORMAL
- en: The best approach is to have some CoT and pipeline scenarios to demonstrate
    the capabilities of the GenAISys, but leave room for flexibility until the users
    suggest that we automate some of the CoT scenarios they performed while running
    the GenAISys.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will thus add the option to the IPython interface, in `instruct_selector`,
    leaving the way it is used open to discussion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: When running forecasts, users select **Weather** and simply enter a city name.
    Although adding a city selector or location autocomplete could improve the user
    experience, a simple text input is more practical for this real-time use case,
    especially since tourists typically know their exact destination names.
  prefs: []
  type: TYPE_NORMAL
- en: That is all we need at **Layer 1** in the IPython interface. The handler selection
    mechanism remains unchanged, so we move directly on to the handler registry.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a handle to the handler registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The weather handler in our registry only requires a one-word location in the
    user message and the `"Weather"` instruction in this implementation of OpenWeather:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Why not use keywords? Using `"weather"` as a keyword instead of an instruction
    could be confused with a follow-up question in the following context, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'User 1 could ask: `What is the weather in Paris?` The assistant would answer:
    `20°C, clear skies, 5m/s wind speed`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User 2 could ask: `What can I visit in this weather?` In this case, `weather`
    could trigger an API weather call that would fail because no location is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the time of writing this chapter, even ChatGPT Plus has options before submitting
    a request, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The choice between multiple models such as GPT-4o for general purpose tasks,
    DALL-E for images, o1-mini for reasoning, o3-mini for high reasoning, GPT-4.5,
    and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button to activate web search and another one for **Deep Research**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual file uploads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These multiple interactive choices make the interface flexible. However, as
    we work on user interfaces, we will see a progressive automation of many of these
    options, along with new generative AI models that encompass the functionality
    of several former models. It’s an ongoing accelerated generative AI evolution!
  prefs: []
  type: TYPE_NORMAL
- en: We will now add the weather function to the AI functions library.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the weather forecast function to AI functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The real-time weather forecast function first checks whether `api_key` is still
    active during the session. This additional check ensures that the API call remains
    stable with no disconnection if there is a micro-interruption of the session in
    the VM we are using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The city name is the user message; the weather forecast will be requested;
    and the temperature, description, and wind speed will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We could add a keyword search to a longer user message.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, the constraint is that the user message must only contain the
    city’s name. However, the functionality can be expanded in various ways based
    on user feedback gathered during project workshops, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan a user message for the location if the weather option is activated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Limitation: Only the name of the city is necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: Have a drop-down list of all the possible city locations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Limitation: The list could contain hundreds of cities.'
  prefs: []
  type: TYPE_NORMAL
- en: Have a country selection list, then choose a region (or administrative name
    for a region), then choose the city.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Limitation: A customer might not know the name of the region or state. Also,
    this takes longer than just entering the city.'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically detect where the customer is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Limitation: The query might be for another city and not the one the customer
    is in.'
  prefs: []
  type: TYPE_NORMAL
- en: Just enter the city and nothing else, as we are doing now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Limitation: We might need to enhance the function with a city keyword search
    just in case the user enters more words than just the name of the city. Also,
    the customer might misspell the name of the location.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are several ways to implement the real-time weather forecast
    request at the user level. The best approach is to initially showcase the basic
    capabilities of the system clearly and then adapt and extend the interface based
    on the feedback you receive from workshops with a customer panel.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve built and integrated the weather forecast functionality into
    the handler selection mechanism framework, we’re ready to demonstrate real-world
    use cases within the GenAISys.
  prefs: []
  type: TYPE_NORMAL
- en: Running the GenAISys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will run multi-user, cross-domain, multimodal interactions
    using the GenAISys for real-time tourism-related services. Typically, when tourists
    visit a city, they check weather forecasts in one app and decide on their activities
    in another. Here, we’re merging these domains into one seamless experience. Users
    will request real-time weather forecasts, and the GenAISys will suggest suitable
    activities—indoor, outdoor, or both—based on the current weather conditions. This
    integrated, cross-domain approach can be extended beyond tourism into areas such
    as construction planning, delivery scheduling, and nearly any scenario where multiple
    applications are traditionally needed to support user decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main objective of this section is to demonstrate the cross-domain capabilities
    of the GenAISys in a flexible manner, illustrating how the system can adapt to
    various domain-specific scenarios. Specifically, we will focus on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Activating and deactivating the weather forecast functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating and deactivating the file display option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We aim to present a clear and practical proof of concept, highlighting potential
    workflows before automation decisions are finalized in user workshops. By not
    prematurely automating too many scenarios, the GenAISys maintains flexibility,
    allowing actual users first to experiment freely and determine which features
    should be automated. Remember, the more automation you introduce, the less flexibility
    you retain in user interactions—though, with careful planning, it is possible
    to balance both automation and interactivity.
  prefs: []
  type: TYPE_NORMAL
- en: As emphasized earlier, an effective strategy begins with supporting interactive,
    manual workflows, then progressively automating some or all tasks as users gain
    familiarity and provide feedback. *Time is not the objective; user maturity is*.
    Interactive scenarios can transition into fully automated pipelines or CoT processes
    at the users’ pace. By letting user feedback shape development, adoption rates
    naturally improve.
  prefs: []
  type: TYPE_NORMAL
- en: Generative AI systems rely on probabilistic responses, meaning outputs can vary
    slightly with each run. This stochastic behavior ensures responses remain dynamic
    rather than rigid or repetitive.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of the notebook (`GenAISys_Customer_Service.ipynb`), you have
    the option to activate or deactivate the DeepSeek model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: For this chapter, `deepseek` is set to `False`, and we will rely on OpenAI for
    running our use cases.
  prefs: []
  type: TYPE_NORMAL
- en: With all necessary functions ready for weather-based decision-making, let’s
    now explore interactive use cases in the GenAISys.
  prefs: []
  type: TYPE_NORMAL
- en: A multi-user, cross-domain, and multimodal dialogue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll run an interactive scenario with the GenAISys, simulating a tourist seeking
    real-time, weather-based recommendations in a specific city—whether the weather
    is cloudy with possible rain or clear. The GenAISys must thus adapt its suggestions
    to real-time weather forecasts in that specific location.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dialogue will be multi-user between the following users:'
  prefs: []
  type: TYPE_NORMAL
- en: '`User01`: A tourist who expects weather-dependent suggestions on what to do'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`User02`: A customer service agent who provides support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`User03`: A decision-maker who coordinates marketing, product design, production,
    deliveries, and customer service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each interaction in this dialogue is clearly labeled, indicating the user initiating
    the request. If a new session starts, it will be prefixed by `New Session`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interface actions will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing and submitting a prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating or deactivating the weather forecast function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating or deactivating file displays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many enhancements, improvements, additional functions, CoT processes,
    and pipelines we could add to expand our GenAISys. However, this should be done
    in collaboration with a customer/user panel.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start the dialogue in Paris.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The customer activated the **Weather** function and entered **Paris**, knowing
    that in this proof of concept, those are the instructions to follow, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11: Asking for a real-time weather forecast](img/B32304_09_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: Asking for a real-time weather forecast'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GenAISys agent provides the requested information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the weather response will continually change, and thus, the whole
    dialogue that follows will take a different turn. Different locations, different
    weather conditions, and different points of interest for the customer will take
    this dialogue in unique directions. The customer now asks for recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'With the **Reasoning** option set to **None**, the GenAI provides personalized
    suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12: Asking what activities to do in this weather](img/B32304_09_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.12: Asking what activities to do in this weather'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GenAI suggests some engaging activities based on the weather:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The user finds the response useful but would also like to visit a museum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Without changing the interface configuration, the agent provides a tailored
    itinerary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the customer service agent steps in to augment the personalized experience
    of the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This kind of multi-user interface could easily be built into a website with
    features such as text and image generation, customer profiles, and conversation
    history—your imagination is the only limit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, ensure **Files** is checked to display the image, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13: Creating a custom image for the visit](img/B32304_09_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: Creating a custom image for the visit'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GenAISys generates a captivating image representing the recommended custom
    visit, as displayed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14: A custom image for a customized visit](img/B32304_09_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: A custom image for a customized visit'
  prefs: []
  type: TYPE_NORMAL
- en: Our GenAISys could be expanded to send the image to the tourist’s smartphone,
    or even better, the GenAISys could be developed as a smartphone app connecting
    with the GenAISys server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The image is great and the weather fine. Pleased, `User02` requests a promotional
    offer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '**Files** is unchecked so the GenAI can craft a text-based promotional message,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15: A custom image for a customized visit](img/B32304_09_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: A custom image for a customized visit'
  prefs: []
  type: TYPE_NORMAL
- en: 'The model generates an engaging message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The river cruise offer is great, but now `User03` steps in with a cutting-edge
    idea to enhance customer engagement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '**Files** is checked again so the agent can produce the requested image, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16: Checking files to display an image](img/B32304_09_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: Checking files to display an image'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is the eye-catching design displayed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17: A customized travel bag image](img/B32304_09_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: A customized travel bag image'
  prefs: []
  type: TYPE_NORMAL
- en: The manager forwards this custom design immediately to a local printing partner
    that maintains travel bag stock and specialized printing equipment. The travel
    bag will be printed and delivered to the customer’s hotel within half an hour—a
    service as convenient and timely as ordering a pizza! This represents the future
    of real-time customer service.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a final touch, the manager asks for an engaging email to be sent to the
    customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The message could be a notification in an app, a text message, and/or part of
    the online conversation on a cutting-edge, multi-user, cross-domain, multimodal
    website!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, **Files** is unchecked to make room for the GenAI to generate
    the text, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18: Unchecking files to send a message](img/B32304_09_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: Unchecking files to send a message'
  prefs: []
  type: TYPE_NORMAL
- en: If the manager wished, **Files** could have remained checked, and the image
    could have been processed to be attached to the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The message is engaging and highlights the exceptional level of customer service
    offered by the travel agency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The “P.S.” message is important in a real-time delivery context, as it encourages
    customers to share their positive experiences on social media. This kind of user-generated
    content helps brands extend their reach and strengthen their market differentiation
    as competition intensifies across nearly every industry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s move to another location, using a different approach. Restart the
    session by entering `Exit` and rerunning the notebook’s cell. The customer service
    agent will now explore options for customers visiting Tokyo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In this session, `User02`, the customer service agent, and `User03`, the manager,
    are trying to figure out what to suggest to their customers who have arrived in
    Tokyo. They want to customize the experience to make sure they keep ahead of the
    competition. They first want to know the weather for that day, so they select
    **Weather** (as in *Figure 9.19*) and enter `Tokyo`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19: Files is unchecked, and Weather is selected](img/B32304_09_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: Files is unchecked, and Weather is selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GenAISys returns the weather in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `User02` would like to know what to suggest for this weather:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The **Weather** function is deactivated (see *Figure 9.11*). The GenAI must
    analyze the weather and then suggest activities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20: Files is unchecked, and Reasoning is set to None](img/B32304_09_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.20: Files is unchecked, and Reasoning is set to None'
  prefs: []
  type: TYPE_NORMAL
- en: 'The agent takes the weather into account and makes interesting suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the GenAISys is adapting to different scenarios in an acceptable
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Now, `User02` is getting some ideas from the response. Since the weather is
    rainy, why not suggest a bus tour?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration (**Files** unchecked, **Reasoning** set to **None**) does
    not change. The GenAISys makes an engaging offer for a bus tour:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '`User03` steps in and asks the GenAISys to write an engaging message for food
    and beverages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The configuration (**Files** unchecked, **Reasoning** set to **None**) does
    not change. The GenAISys makes an engaging offer for food and beverages during
    the bus tour. The idea is to show the customers that the travel agency is taking
    care of them in great detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GenAISys understands the situation and provides an engaging message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the GenAISys is flexible and leverages the generative AI models
    efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s end our travelling journey experience in New York. Exit the session and
    rerun the IPython cell.
  prefs: []
  type: TYPE_NORMAL
- en: '`User02` wants to anticipate activities in New York:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'In this session, `User02` (customer service agent) and `User03` (manager) are
    brainstorming personalized recommendations for tourists arriving in Tokyo. They
    want to tailor the experience to stay ahead of competitors. First, they check
    the current weather by selecting the **Weather** option (*Figure 9.21*) and entering
    `Tokyo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21: Files is unchecked and Weather is selected](img/B32304_09_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.21: Files is unchecked and Weather is selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'The agent provides the weather in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '`User02` thinks that misty weather is not the best day to take customers on
    a tour of Central Park. What can the GenAISys come up with?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '`User02` runs the GenAISys with **Files** unchecked and no **Reasoning** instruction
    (*Figure 9.22*). The situation is not that easy because we want the customers
    to visit new places and possibly surprise them a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.22: Files is unchecked and Weather is not selected](img/B32304_09_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.22: Files is unchecked and Weather is not selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GenAISys finds an interesting program that can add a cultural touch to
    the trip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the trip to New York, `User03`, the manager, steps in to offer
    the customers a souvenir T-shirt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '`User03` decides to activate a full-scale GenAISys CoT generation to analyze
    customer feedback and produce a nice T-shirt. **Files** is checked and **Generation**
    is activated, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23: Files is checked and Generation is selected](img/B32304_09_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.23: Files is checked and Generation is selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our GenAISys begins the generation process step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'It first performs a memory and sentiment analysis of the feedback the tour
    guide detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'It then extracts the scores from the content it analyzed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'It then performs a statistical analysis to provide an overall rating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The score is not 4 or 5 because they would like a souvenir, a T-shirt, and
    they don’t have it yet! So, the GenAISys now creates a prompt for image generation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The GenAISys now creates an image for the prompt (*Figure 9.24*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 9.24: A custom T-shirt](img/B32304_09_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.24: A custom T-shirt'
  prefs: []
  type: TYPE_NORMAL
- en: 'The GenAISys now creates a message for the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: For the New York trip, the manager will now instruct the local printer to print
    the custom image onto a batch of T-shirts already stocked at the printer’s site.
    The shirts will be produced and delivered to the tourist’s hotel within the hour.
  prefs: []
  type: TYPE_NORMAL
- en: The travel agency is extremely satisfied with the GenAISys proof of concept
    and is now preparing to organize workshops with all team members to take the system
    to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now summarize our journey—and get ready to explore what’s next!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The acceleration of modern markets has led to the extinction of waiting times.
    *Real-time responsiveness is now the default*. The use case explored in this chapter
    demonstrates that a business-ready GenAISys proof of concept must be able to provide
    immediate, real-world services. We implemented a real-time travel agency scenario—one
    that can easily be adapted to other domains once you enter project mode.
  prefs: []
  type: TYPE_NORMAL
- en: To make our proof of concept suitable for live demonstration to a team, customer,
    or investor, we first integrated a moderation component into GenAISys. We implemented
    OpenAI’s Omni model to detect and flag multiple categories of content policy violations.
    This moderation function is embedded at the handler selection mechanism level,
    ensuring that inappropriate user messages are flagged and rejected before any
    further processing. To further reassure stakeholders, we added a data security
    layer. Using vector similarity search, we built a function that detects whether
    a user message aligns with sensitive topics. We created a dedicated Pinecone namespace
    to store these topics and queried it against every incoming user message. If a
    match was found, the system flagged the content, displayed a warning, and rejected
    the request.
  prefs: []
  type: TYPE_NORMAL
- en: All flagged moderation and security violations were logged in separate files,
    and the full conversation history can be traced to individual users. With these
    essential safeguards in place, we proceeded to implement a real-time weather forecasting
    feature using OpenWeather—tightly integrated into GenAISys for weather-aware decision-making.
    Finally, we walked through a complete GenAISys dialogue, showcasing the system’s
    ability to support real-time, multi-user, cross-domain, multimodal interactions—a
    powerful illustration of what generative AI can achieve in production settings.
  prefs: []
  type: TYPE_NORMAL
- en: The next step? Presenting your GenAISys proof of concept to secure the resources
    needed to expand and scale the system. But such a presentation must be carefully
    crafted—and that’s exactly what we’ll focus on in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sensitive topics can be detected with vector similarity searches. (True or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A flagged user message containing a sensitive topic in the GenAISys does not
    stop the dialogue. (True or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The OpenAI moderation tool only has one category for foul language. (True or
    False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A flagged user message containing content that violates the content policy of
    the GenAISys does not stop the dialogue. (True or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Weather forecasting in real time to automatically suggest activities can give
    a company a competitive advantage. (True or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A multi-user, cross-domain, multimodal GenAISys is the future of apps. (True
    or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multi-user, cross-domain, multimodal apps don’t exist yet. (True or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding GenAISys to apps will significantly boost productivity and engage users.
    (True or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A GenAISys should be developed with a customer panel. (True or False)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenAI moderation: [https://platform.openai.com/docs/guides/moderation](https://platform.openai.com/docs/guides/moderation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The OpenAI Moderation object: [https://platform.openai.com/docs/api-reference/moderations/object](https://platform.openai.com/docs/api-reference/moderations/object)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenWeather: [https://openweathermap.org/](https://openweathermap.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenWeather’s solar radiance research: [https://home.openweathermap.org/solar_irradiance_history_bulks/new](https://home.openweathermap.org/solar_irradiance_history_bulks/new)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Unlock this book’s exclusive benefits now
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Scan this QR code or go to [packtpub.com/unlock](http://packtpub.com/unlock),
    then search for this book by name. | ![A qr code on a white background  AI-generated
    content may be incorrect.](img/Unlock.png) |
  prefs: []
  type: TYPE_NORMAL
- en: '| *Note: Keep your purchase invoice ready before you start.* |'
  prefs: []
  type: TYPE_TB
