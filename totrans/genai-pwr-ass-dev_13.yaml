- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simplifying Scanning and Fixing Security Vulnerabilities in Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of code-security scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of code scans using Amazon Q
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initiating security scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addressing vulnerability findings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter is short; however, one could argue that anything related to software
    security is never brief and takes top priority over everything else. Before we
    explore the features related to code-security scanning using Amazon Q Developer,
    let’s reiterate the importance of this subject.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of code-security scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code-security scanning is a critical practice in software development, aimed
    at identifying and mitigating potential security vulnerabilities in the code base
    before they can be exploited. Here are several reasons why code-security scanning
    is essential:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preventing security breaches**: Regular code-security scanning helps in identifying
    vulnerabilities that could be exploited by attackers. By catching these issues
    early in the development process, organizations can prevent data breaches, financial
    losses, and damage to their reputation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compliance with regulations**: Many industries are subject to strict regulatory
    requirements regarding data protection and security, such as the **General Data
    Protection Regulation** (**GDPR**), the **Health Insurance Portability and Accountability
    Act** (**HIPAA**), and the **Payment Card Industry Data Security Standard** (**PCI-DSS**).
    Code-security scanning ensures that the software complies with these regulations,
    thereby avoiding legal penalties and ensuring customer trust.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protecting sensitive information**: Applications often handle sensitive information
    such as personal data, financial records, and proprietary business information.
    Security vulnerabilities in the code can lead to unauthorized access to this data.
    Regular scanning helps to safeguard this sensitive information by identifying
    and addressing security flaws.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reducing costs**: Fixing security vulnerabilities early in the development
    cycle is significantly less costly than addressing them after deployment. Post-deployment
    fixes can involve not only code changes but also compensations, legal fees, and
    damage control measures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintaining software integrity**: Code-security scanning helps maintain the
    integrity of the software by ensuring that no malicious code or backdoors are
    present. This is particularly important for software that is distributed to end
    users, as it helps maintain trust and reliability in the product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Facilitating continuous improvement**: By integrating code-security scanning
    into the development process, organizations can continuously improve their security
    posture. Scanning tools can provide feedback and recommendations, allowing developers
    to learn from past mistakes and avoid introducing similar vulnerabilities in the
    future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supporting secure development practices**: Regular security scanning reinforces
    the importance of secure coding practices among developers. It encourages a security-first
    mindset, making developers more aware of common security pitfalls and best practices
    to avoid them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enhancing customer confidence**: Customers and clients are increasingly aware
    of cybersecurity threats. Demonstrating a commitment to security through regular
    code scanning can enhance customer confidence and trust in the organization’s
    products and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code-security scanning for vulnerabilities is a proactive measure that plays
    a crucial role in the overall security strategy of any software development organization.
    By identifying and addressing security issues early, companies can protect sensitive
    data, comply with regulations, reduce costs, and maintain the integrity and trustworthiness
    of their software products.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s shift our focus to what Amazon Q Developer can assist with when it
    comes to code scanning and fixing vulnerabilities in the code.
  prefs: []
  type: TYPE_NORMAL
- en: Types of code scans using Amazon Q
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q scans utilize security detectors built on years of Amazon standards
    and security best practices. As security policies evolve and new detectors are
    introduced, scans automatically integrate these updates to ensure your code remains
    compliant with the latest policies.
  prefs: []
  type: TYPE_NORMAL
- en: The security detectors are powered by Amazon CodeGuru, a developer tool that
    analyzes code and offers smart recommendations to enhance code security and quality.
    A link to all the different detector libraries for different programming languages
    is provided in the *References* section at the end of this chapter. Note that
    the detectors cover hundreds of code recommendations for each of the supported
    programming languages. For the purpose of understanding the security scan feature
    of Amazon Q Developer, we will just pick a couple of vulnerabilities detected
    in our sample code in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Q ensures your code’s security by identifying policy violations and
    vulnerabilities through **static application security testing** (**SAST**), secrets
    detection, and **infrastructure as code** (**IaC**) scanning. The AWS documentation
    also highlights this list, the link to which is provided in the *References* section.
    This list may expand to other types of scans in the future, so keep a close eye
    on the official documentation for updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SAST scanning**: This type of scan is done before the code complication stage
    and is used by the application security team to catch vulnerabilities in the source
    code itself. It is also referred to as white-box testing. Amazon Q uncovers issues
    in the source code, such as resource leaks, SQL injection, and cross-site scripting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secrets scanning**: Safeguard sensitive information from exposure in your
    code base. Amazon Q checks your code and text files for secrets such as hardcoded
    passwords, database connection strings, and usernames, providing details about
    the vulnerabilities and recommendations for securing them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IaC scanning**: Assess the security of your infrastructure files. Amazon
    Q reviews your IaC files to identify misconfigurations, compliance issues, and
    security vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let’s jump into how you can start using the security scan features of Amazon
    Q.
  prefs: []
  type: TYPE_NORMAL
- en: Initiating security scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer provides two variations of the code-security scans.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning while coding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some developers prefer the IDE to warn them of any security vulnerabilities
    in their code as they type. Amazon Q’s auto-scan feature continuously monitors
    the file you’re actively working on, generating findings immediately as they are
    detected in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This feature is only available for use in the Pro tier and is enabled by default
    when using Amazon Q Developer. If you have subscribed to the Pro tier of Amazon
    Q Developer, then the auto-scan feature will appear in the Amazon Q menu option,
    where you can even pause it if you prefer to run the entire scan at once at the
    project level.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot illustrates this feature in the VS Code IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Amazon Q security scan – auto-scan settings](img/B21378_13_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Amazon Q security scan – auto-scan settings
  prefs: []
  type: TYPE_NORMAL
- en: If the auto-scan feature is running, as soon as you code something that would
    be considered a security vulnerability, Q will immediately flag it and let you
    know the issue, providing an explanation for it.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows an obvious security violation we introduced in
    our code, and Q immediately flagged it and provided us with the reason on the
    spot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Amazon Q security scan – auto-scan detected an issue](img/B21378_13_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Amazon Q security scan – auto-scan detected an issue
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at the open scan option Amazon Q provides.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning the whole project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the developer prefers to scan the project after it’s complete, then they
    can use this option provided by Amazon Q, which scans the entire project and provides
    all the security vulnerabilities at once. This option is available in both tiers
    of Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: To initiate this, open the project and simply run the **Run Project Scan** option
    for Amazon Q, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Amazon Q security scan – scan whole project](img/B21378_13_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Amazon Q security scan – scan whole project
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the scan is complete, Amazon Q will provide a summary of all the security
    problems for the developer to review and take action to address them. The following
    screenshot shows all the issues we found in the Python project we used in [*Chapter
    12*](B21378_12.xhtml#_idTextAnchor181). In case you skipped that chapter, here
    is the GitHub link to the project for you to try it out again in this chapter:
    [https://github.com/jassics/learning-python](https://github.com/jassics/learning-python).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Amazon Q security scan – security scan findings](img/B21378_13_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Amazon Q security scan – security scan findings
  prefs: []
  type: TYPE_NORMAL
- en: Getting a report of issues in the code is one thing, but taking appropriate
    action to address them is the main reason we discovered them in the first place.
    Amazon Q Developer can also help address the vulnerability findings, so let’s
    take a look at the options we have.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing vulnerability findings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Q Developer provides a few options once it identifies the issue. It can
    either provide you with further details about the issue or you can use the Q chat
    feature to explain the finding along with recommendations to fix it. Or sometimes,
    you will also see an automatic fix option when Q is able to resolve it on its
    own.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the actions we can take for the issues we discussed
    in the project from the previous section. Of course, in this case, the printing
    of the password was done on purpose to showcase the password generation feature,
    but Q’s scan was able to detect the issue and present actions you can take on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Amazon Q security scan – options to address findings](img/B21378_13_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Amazon Q security scan – options to address findings
  prefs: []
  type: TYPE_NORMAL
- en: Viewing security findings in detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looking at *Figure 13**.5*, if you choose the **View details** option, Amazon
    Q will describe in detail what the issue is and how you can approach coming up
    with a resolution. It basically lets you make an informed decision to improve
    your code. The following screenshot shows this option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Amazon Q security scan – detailed view of the finding](img/B21378_13_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Amazon Q security scan – detailed view of the finding
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at the Q explanation option you can choose.
  prefs: []
  type: TYPE_NORMAL
- en: Seeking an explanation of the issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looking again at *Figure 13**.5*, if you choose the **Explain** option, Amazon
    Q will let you seek an interactive explanation for the issue, where Q will invoke
    its chat feature and provide you with the explanation along with recommended fixes
    that you can insert back into your code. The following screenshot shows the explanation
    for the same issue we just looked at in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Amazon Q security scan – explain finding](img/B21378_13_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Amazon Q security scan – explain finding
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of this important chapter. Feel free to try this feature
    on your own projects to see what you discover. The mechanism for detecting and
    viewing issues using Amazon Q Developer, along with seeking explanations and fixing
    them, remains the same across all types of security issues, hence we will keep
    this chapter short.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered why code security scans are vital for every project.
    No software project can be put into production without a clear strategy for finding
    security issues in the code and addressing them.
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at the different types of scans that Amazon Q Developer provides.
    We also explored how to initiate security scans in Amazon Q, either with the auto-scan
    option or by scanning at the project level. Finally, we examined how Amazon Q
    can help address all the findings.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will pivot toward using Amazon Q Developer to create
    solutions in AWS environments.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Amazon CodeGuru Detector Library: [https://docs.aws.amazon.com/codeguru/detector-library/](https://docs.aws.amazon.com/codeguru/detector-library/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Types of security scans by Amazon Q Developer: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/security-scans.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/security-scans.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 4:Accelerate Build on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will look at how Amazon Q Developer can assist in building
    applications faster on AWS. Amazon Q integrates with various AWS services and
    tools to provide a holistic assistant experience. Amazon Q not only boosts the
    productivity of AWS builders but also provides an integrated and seamless working
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B21378_14.xhtml#_idTextAnchor210), *Accelerate Data Engineering
    on AWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B21378_15.xhtml#_idTextAnchor239), *Accelerate Building Solutions
    on AWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B21378_16.xhtml#_idTextAnchor254), *Accelerate the DevOps Process
    on AWS*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
