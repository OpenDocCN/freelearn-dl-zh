- en: Possibility and Probability Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可能性和概率图
- en: In this chapter, we'll be talking about possibility and probability maps, understanding
    how and where they are used. We'll also be learning the best practices for creating
    an AI that reacts to the player and that also chooses the best options, as we
    look to create a character that can make decisions as a human would.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论可能性和概率图，了解它们如何以及在哪里被使用。我们还将学习创建能够对玩家做出反应并选择最佳选项的AI的最佳实践，因为我们致力于创建一个能够像人类一样做出决策的角色。
- en: As we saw previously, video games used to rely heavily on predetermining the
    behavior of what the AI could do in different scenarios that were either created
    by the game itself or by the player's actions. This method has been present since
    day one and is still being used today, making it an extremely valuable method
    for creating quality AI characters. Before explaining, in detail, what each of
    the maps do, and before demonstrating how to create them in order to develop good
    AI behavior, it's always good to have a general idea of what possibility and probability
    maps are and where or when they are applied.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所看到的，电子游戏过去一直依赖于预先确定AI在不同场景中的行为，这些场景要么是由游戏本身创建的，要么是由玩家的行为创建的。这种方法从第一天开始就存在，并且至今仍在使用，使其成为创建高质量AI角色的极其有价值的方法。在详细解释每张图的作用之前，在演示如何创建它们以开发良好的AI行为之前，了解可能性和概率图是什么以及它们在哪里或何时被应用，总是好的。
- en: As gamers, we tend to enjoy the product as a whole, experiencing every part
    of the game with enthusiasm and dedication, forgetting about the technical aspects
    of the game. For that reason, we sometimes forget that even simple things that
    happen while we play were already destined to occur that way, and that there is
    a lot of thought and planning behind that moment. Everything happens for a reason,
    as we often hear, and this can also be applied to video games. From the moment
    you clicked the start button to begin the game to the last awesome combo that
    you performed to defeat the final boss of the game, everything was planned to
    happen and it was necessary for a programmer to input all of those possibilities
    within the game. If you clicked the A button and your character jumped, that happened
    because it was determined to be that way. The same thing is valid for AI enemies
    or allies on the game; when they do something to defeat or help you, it was necessary
    for that behavior to be programmed, and to do that we use states.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为玩家，我们倾向于整体享受产品，以热情和专注的态度体验游戏的每一个部分，而忘记了游戏的技术方面。因此，我们有时会忘记，即使在玩游戏时发生的简单事情，也早已注定要以这种方式发生，并且在这背后有很多思考和规划。正如我们经常听到的，每件事都有其原因，这也适用于电子游戏。从你点击开始按钮开始游戏的那一刻起，到你所执行的最后一个令人惊叹的连招击败游戏中的最终Boss，所有这一切都是计划好的，并且程序员需要在游戏中输入所有这些可能性。如果你点击了A按钮，你的角色跳了起来，那是因为它被设定成这样。对于游戏中的AI敌人或盟友也是如此；当它们做某事来击败或帮助你时，这种行为被编程是必要的，而为了做到这一点，我们使用状态。
- en: Game states
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏状态
- en: To understand how to create possibility or probability maps we need to first
    acknowledge the principle aspect necessary to create them, which is called game
    states, or simply states. We call game states to the actions that are predetermined
    throughout different occasions in the game, and those actions can be applied to
    both the player or to the enemy character. Some examples can be simple behavior,
    such as run, jump, or attack, and those states can be expanded a little more,
    for example when the character is in the air and cannot attack or if the character
    has low magical energy and cannot perform a magic attack. In these cases, the
    character goes from one state to another or can't perform one if it's doing another.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何创建可能性或概率图，我们首先需要承认创建它们所需的原则性方面，这被称为游戏状态，或简称状态。我们将游戏状态称为在游戏的不同场合预先设定的动作，这些动作可以应用于玩家或敌人角色。一些例子可以是简单的行为，如跑、跳或攻击，这些状态可以进一步扩展，例如当角色在空中时无法攻击，或者当角色魔法能量低时无法进行魔法攻击。在这些情况下，角色从一个状态转换到另一个状态，或者如果它在做另一件事，就无法执行。
- en: '![](img/f20164ce-777f-4a79-b420-8764519d357a.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f20164ce-777f-4a79-b420-8764519d357a.jpg)'
- en: Possibility maps
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可能性图
- en: Now let's take a deeper look at the possibility maps that we encountered in
    the examples in the first chapter, from the chess machine to the Metal Gear Solid
    video game. As we can see, it's a technique that is still being used today, and
    it is almost impossible to create a game AI without it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更深入地看看我们在第一章的例子中遇到的那些可能性图，从棋盘游戏到《合金装备》电子游戏。正如我们所见，这是一种至今仍在使用的技巧，没有它几乎不可能创建游戏AI。
- en: As the name suggests, possibility maps allow the programmer to define the possibilities
    available to the player or the AI character within the game. Everything that is
    possible inside the game needs to be planned and coded, but what happens when
    you allow the character to do a lot of things can they do them all at the same
    time? If played during different stages of the game, can they react in the same
    way at all of the stages? To allow, and restrain, the possible actions, we also
    need to think about the possible scenarios that can occur in the game, and when
    you put all of that together it's called a possibility map.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，可能性图允许程序员定义玩家或游戏中的AI角色可用的可能性。游戏内部所有可能的事情都需要被计划和编码，但当你允许角色做很多事情时，他们能同时做所有这些事情吗？如果在游戏的各个阶段进行，他们能在所有阶段都以相同的方式反应吗？为了允许和限制可能的行为，我们还需要考虑游戏中可能发生的情景，当你把这些都放在一起时，就称为可能性图。
- en: How to use possibility maps
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用可能性图
- en: Let's take a look at a simple example of a common FPS game, and for that we'll
    be using the states demonstrated in the preceding image.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个常见的FPS游戏的简单例子，为此我们将使用前一张图片中展示的状态。
- en: 'Imagine that we are the enemy character of the game and our goal is to shoot
    and kill the player using only the states walk, run, cover, jump, fire, and defend.
    We need to take into consideration that the player will do his best to kill us,
    and therefore a lot of possible scenarios may arrive. Let''s start with the basics
    we are walking from one point to another while protecting our space and as the
    player goes near that space, our goal changes from protecting our space to the
    definitive goal, that is, killing the player. What should we do next? Fire? Run
    towards the player and fire from close range? Cover and wait until the player
    is nearby? What if the player saw us first and is preparing to fire at us? A lot
    of things could happen, and a lot of things can be done with just a few states.
    So, let''s map every possible situation and plan how we should act or react in
    each individual situation. Examples that I would choose for my game are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们是游戏中的敌人角色，我们的目标是仅使用行走、奔跑、掩护、跳跃、开火和防御这些状态来射击并杀死玩家。我们需要考虑玩家会尽力杀死我们，因此可能会出现很多可能的情景。让我们从基础开始，我们从一个点到另一个点行走，同时保护我们的空间，当玩家接近那个空间时，我们的目标从保护我们的空间转变为最终目标，即杀死玩家。接下来我们应该怎么做？开火？向玩家跑过去并近距离开火？掩护并等待玩家靠近？如果玩家先看到我们并准备向我们开火怎么办？很多事情都可能发生，而且只需要几个状态就可以做很多事情。所以，让我们绘制每一个可能的情景，并计划我们在每种具体情况中应该如何行动或反应。我会在我的游戏中选择的例子如下：
- en: Walk slowly to a cover position, wait for the player, and shoot him
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 慢慢走到掩护位置，等待玩家，然后射击他
- en: Run for cover and then fire from that position
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速躲避并从那个位置开火
- en: Defend (moving away from the bullets) while running to a cover position
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在跑向掩护位置的同时防御（远离子弹）
- en: Fire against the player, running towards him, and keep firing
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向玩家开火，向他跑过去，并持续开火
- en: Depending on the type of game that we want to create, we can use the same states
    to shape it into a different genre. We also need to take into consideration the
    personality of the character that we are programming. If it's a robot, it probably
    won't be afraid to keep firing against the player, even if the chances of getting
    destroyed are 99%. On the other hand, if it's an inexperienced soldier, it might
    feel reluctant to get shot and will run for cover instantly. The list goes on
    and on just by changing the personality of the character.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们想要创建的游戏类型，我们可以使用相同的状态来将其塑造成不同的流派。我们还需要考虑我们正在编程的角色性格。如果它是一个机器人，它可能不会害怕对玩家持续开火，即使被摧毁的可能性是99%。另一方面，如果它是一个没有经验的士兵，它可能会犹豫不决，并立即寻找掩护。仅通过改变角色的性格，就可以有无数的变化。
- en: '![](img/9f529c32-3f20-45ac-acc6-e2a21ea8a524.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9f529c32-3f20-45ac-acc6-e2a21ea8a524.jpg)'
- en: Preparing a possibility map (FPS)
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备可能性图（FPS）
- en: At this point, we are able to understand what a possibility map is and how it
    can be used to create an AI character that behaves accordingly to different situations
    in the game. Now that we understand how to use a possibility map, let's create
    a practical example where we programmed our AI character to successfully defeat
    the player. For this example, I'll be using two models, one represents the AI
    enemy that we are programming and the other one represents the player.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们能够理解什么是可能性图以及它是如何被用来创建一个根据游戏中的不同情况做出相应行为的AI角色的。现在我们了解了如何使用可能性图，让我们创建一个实际例子，其中我们编写的AI角色成功地击败了玩家。对于这个例子，我将使用两个模型，一个代表我们正在编写的AI敌人，另一个代表玩家。
- en: 'We''ll create a common example, where the AI is protecting the entrance of
    a building that the player needs to enter in order to deactivate a bomb and complete
    the level. Let''s imagine that we already have the player fully programmed and
    that we now need to focus on our AI enemy, as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个常见例子，其中AI正在保护玩家需要进入以解除炸弹并完成关卡的建筑入口。让我们想象我们已经完全编写了玩家的代码，现在我们需要专注于我们的AI敌人，如下面的截图所示：
- en: '![](img/24955dfe-2bb8-4c0e-8882-d1bcea3aa25a.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24955dfe-2bb8-4c0e-8882-d1bcea3aa25a.jpg)'
- en: Before writing any line of code we need to think about the possible situations
    that can occur and how our AI will react to them. First, we'll be simplifying
    the situation by breaking down our stages into a simple 2D visualization that
    will be used as a reference to determinate distances and other relevant parameters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何代码行之前，我们需要考虑可能发生的情况以及我们的AI将如何对这些情况做出反应。首先，我们将通过将我们的阶段分解成一个简单的2D可视化来简化情况，这将作为确定距离和其他相关参数的参考。
- en: '![](img/149af240-03a2-49ea-a485-6ad61c15d8af.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/149af240-03a2-49ea-a485-6ad61c15d8af.jpg)'
- en: After simplifying the situation, we are ready to start planning the possibilities.
    The player is allowed to move around the building. Note that there's only one
    entrance, and that entrance is protected by our enemy AI. The arrows represents
    the direction that the characters are facing, and this will be an important aspect
    to our planning.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在简化了情况之后，我们就可以开始规划可能性了。玩家被允许在建筑周围移动。请注意，这里只有一个入口，而且这个入口被我们的敌人AI保护。箭头表示角色面向的方向，这将是我们规划的一个重要方面。
- en: Creating a possibility map (FPS)
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可能性图（FPS）
- en: We'll learn how to create an awareness behavior for the AI character later,
    so for now we will just be using simple Boolean variables to determine if the
    player is near our position and what direction it is facing. Taking that into
    consideration, let's break our image into trigger zones to define when our enemy
    AI should react.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后学习如何为AI角色创建意识行为，所以现在我们只是使用简单的布尔变量来确定玩家是否靠近我们的位置以及它面向哪个方向。考虑到这一点，让我们将我们的图像分解成触发区域，以定义我们的敌人AI何时应该做出反应。
- en: '![](img/01e2e023-d664-4bd9-bbc0-dc7ea838a5b4.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/01e2e023-d664-4bd9-bbc0-dc7ea838a5b4.jpg)'
- en: The YES zones represents the area that triggers our AI to change its behavior
    from the passive to offensive state. The NO zones represent the area that doesn't
    have an impact on our AI behavior. I've divided the YES zones into three because
    we want our AI character to react differently according to the player's position.
    If the player comes from the right side (YES R), the enemy has a wall that can
    be used for cover; if it comes from the left side (YES L), we can't use that wall
    anymore, and once the player is in the middle (YES M), the AI can only move backwards
    inside of the building.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: YES区域代表触发我们的AI从被动状态转变为攻击状态的区域。NO区域代表对AI行为没有影响的区域。我将YES区域分为三个，因为我们希望我们的AI角色根据玩家的位置做出不同的反应。如果玩家从右侧（YES
    R）来，敌人有一堵可以作为掩护的墙；如果从左侧（YES L）来，我们就不能再使用那堵墙了，一旦玩家处于中间（YES M），AI只能在建筑内向后移动。
- en: 'Let''s prepare our script for the enemy AI. In this example, we will use the
    C# language, but you can adapt the script to any programming language that you
    prefer, as the principles remains the same. The variables that we''ll be using
    for now are `Health`, `statePassive`, `stateAggressive`, and `stateDefensive`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为敌人AI准备脚本。在这个例子中，我们将使用C#语言，但你可以将脚本适应到你喜欢的任何编程语言，因为原则是相同的。我们现在将使用的变量是`Health`、`statePassive`、`stateAggressive`和`stateDefensive`：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we know the basic information required for the AI, we need to think
    about when those states will be used and how the AI will choose between the three
    available options. For this, we'll use a possibility map. We already know the
    areas that trigger our character, and we have already chosen the three behavior
    states, so it's time to plan the transitions and reactions according to the player's
    position and behavior.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了AI所需的基本信息，我们需要考虑这些状态将在何时使用以及AI将如何在这三个可用选项之间进行选择。为此，我们将使用可能性图。我们已经知道了触发我们角色的区域，并且已经选择了三个行为状态，因此现在是根据玩家的位置和行为规划转换和反应的时候。
- en: '![](img/698e2d58-eabe-4ef8-9a74-7cab089b3652.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/698e2d58-eabe-4ef8-9a74-7cab089b3652.jpg)'
- en: Our enemy AI can go from **PASSIVE** to **DEFENSIVE** or **AGGRESSIVE**, from
    **AGGRESSIVE** to **DEFENSIVE**, and from **DEFENSIVE** to **AGGRESSIVE**, but
    once our AI knows that the player is around, it will never go back to the passive
    behavior.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的敌人AI可以从**被动**状态转换为**防御**状态或**攻击**状态，从**攻击**状态转换为**防御**状态，从**防御**状态转换为**攻击**状态，但一旦我们的AI知道玩家在附近，它将永远不会回到被动行为。
- en: Defining the states
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义状态
- en: 'Let''s define what triggers each state and how the AI should choose the correct
    state in different scenarios. The PASSIVE state will be the default state, and
    the game will start in that position until the player comes across our character.
    The DEFENSIVE state will be used in two different situations if the player comes
    from the right side and if he has already confronted the player and has low HP.
    Finally, the AGGRESSIVE state will be activated if the player comes from the left
    side or has already arrived at the middle area:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义触发每个状态的条件以及AI在不同场景中如何选择正确的状态。被动状态将是默认状态，游戏将从这个位置开始，直到玩家遇到我们的角色。如果玩家从右侧来，并且已经与玩家交战且血量较低，将使用防御状态。最后，如果玩家从左侧来或已经到达中间区域，将激活攻击状态：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We added the trigger variables `triggerL`, `trigger,` and `triggerM` and also
    defined when the AI should change from one behavior state to another. At this
    point, our enemy already knows what to do in different situations that may occur
    during gameplay according to the player's position.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了触发变量 `triggerL`、`trigger` 和 `triggerM`，并定义了AI何时应该从一个行为状态转换到另一个状态。此时，我们的敌人已经根据玩家的位置知道在游戏过程中可能出现的不同情况应该怎么做。
- en: Now we just need to determine what will happen on each state, because that is
    what differentiates a DEFENSIVE state from an AGGRESSIVE one. For this specific
    enemy, where his main function is to protect the entrance of the building, we
    want him to stay put at all times and to never run after the player. This is because
    the AI doesn't know that it is just one person and can't take the risk of going
    after just one soldier if there's a possibility of being greeted by several. This
    will help to give a little realism to the actions of the enemy. We'll also use
    the defensive behavior state for the moment where the enemy feels that it is losing
    the battle and is about to die, or when it has the advantage of using the building
    to protect itself while the player doesn't. Finally, the aggressive state will
    be used when the AI sees a clear advantage to kill or if it doesn't have any other
    options.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要确定每个状态会发生什么，因为这就是防御状态和攻击状态的区别。对于这个特定的敌人，他的主要功能是保护建筑入口，我们希望他始终待在原地，永远不要追击玩家。这是因为AI不知道只有一个人，如果有可能遇到几个敌人，它就不能冒险只追击一个士兵。这将有助于使敌人的行为更具现实感。我们还将使用防御行为状态，当敌人感觉到即将战败和死亡，或者当它利用建筑保护自己而玩家没有时。最后，当AI看到明显的优势可以杀死玩家或没有其他选择时，将使用攻击状态。
- en: DEFENSIVE state
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防御状态
- en: So, let's start with the situation where the player comes from the right side
    and our enemy has already spotted him. We want our AI to take advantage of the
    wall that protects him, making it difficult for the player as well as demonstrating
    a human-like intention, rather than simply opening fire. The enemy will move towards
    the wall and stay there firing on the corner until the player arrives to that
    position.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们从玩家从右侧来并且我们的敌人已经发现他的情况开始。我们希望我们的AI利用保护他的墙壁，使玩家难以接近，同时展现出类似人类的意图，而不是简单地开火。敌人将朝向墙壁移动并停留在那里，对角落进行射击，直到玩家到达那个位置。
- en: '![](img/3cbaedea-1d79-4feb-846e-a9dcccc70426.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cbaedea-1d79-4feb-846e-a9dcccc70426.jpg)'
- en: 'The enemy will change from the PASSIVE state into the DEFENSIVE state, instead
    of OFFENSIVE, only because doing that gives him a slightly better advantage over
    the player. Being defensive on the first encounter shows some personality to the
    AI, which is very important when making the behavior of the computer character
    believable. In future chapters we''ll learn how to use the environment to help
    define our AI character in depth:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 敌人将从被动状态转变为防御状态，而不是进攻状态，仅仅是因为这样做能给他相对于玩家的略微优势。在第一次遭遇时采取防御姿态向AI展示了一些个性，这在使计算机角色的行为看起来可信时非常重要。在未来的章节中，我们将学习如何利用环境来深入定义我们的AI角色：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We added the core for the `Defensive` state that we want to implement on our
    enemy AI when the player is coming from the right side. We also added new variables,
    such as `speed`, `cover`, `playerSoldier,` and `coverFire.` First, we need to
    check if the player is currently positioned in the `triggerR` zone; if the result
    is positive, the character should move towards the cover position. Once the enemy
    AI is at the cover position, he can start firing against the player (`coverFire`).
    Now let's input the following situation if the player is still alive, our enemy
    needs to move to another situation, otherwise it will be cornered, which isn't
    a good scenario for the character we are creating. Let's add that situation to
    our script.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家从右侧来临时，我们在我们的敌人AI中添加了想要实现的`防御`状态的核心。我们还添加了新的变量，例如`速度`、`掩护`、`playerSoldier`和`coverFire`。首先，我们需要检查玩家是否目前位于`triggerR`区域；如果结果是正面的，角色应该移动到掩护位置。一旦敌人AI到达掩护位置，他就可以开始向玩家开火（`coverFire`）。现在，如果玩家仍然存活，我们的敌人需要移动到另一个情况，否则它将被逼入死角，这对我们正在创建的角色来说不是一个好场景。让我们将这种情况添加到我们的脚本中。
- en: 'We want our character to walk back and get inside the building, while always
    facing the player and firing at the same time. We could use another tactic, or
    decide to be more aggressive and confront the player directly, but for now let''s
    stick to a simple strategy. We can add more complex behavior later:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的角色走回建筑物内，同时始终面向玩家并开火。我们可以使用另一种策略，或者决定更加激进并直接面对玩家，但现阶段让我们坚持简单的策略。我们可以在以后添加更复杂的行为：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/03cc7346-5cc8-4368-af96-0a436bfab0ed.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03cc7346-5cc8-4368-af96-0a436bfab0ed.jpg)'
- en: In this part of the code we added a situation where the player comes from the
    right side and is still alive going to the middle, so we needed to change the
    previous behavior to a new one. Our AI character goes from the cover position
    to a newer position that is inside the building, firing at the player the whole
    time. At this point, the enemy will keep getting back until one of the two characters
    die either the player or the AI character. We close the situation where the player
    comes from the right side. Now that we have completed this part, we need to complete
    the scenario and add the last situation, which is where the player goes around
    the building and comes from the left side. Our AI will need to adapt to these
    circumstances and behave differently, so let's work on that part and complete
    the example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们添加了一个玩家从右侧来并且仍然存活，前往中间的情况，因此我们需要将之前的行为更改为新的行为。我们的AI角色从掩护位置移动到一个新的位置，这个位置在建筑物内，并且一直向玩家开火。在这个时候，敌人将继续撤退，直到两个角色中的任何一个死亡，无论是玩家还是AI角色。我们现在关闭玩家从右侧来的情况。现在我们已经完成了这一部分，我们需要完成场景，并添加最后一个情况，即玩家绕过建筑物并从左侧来。我们的AI需要适应这些情况并表现出不同的行为，所以让我们着手处理这部分并完成示例。
- en: AGGRESSIVE state
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进攻状态
- en: 'Before we started programming, we defined how many states we would need for
    this enemy AI, and we chose three different states: PASSIVE, DEFENSIVE, and AGGRESSIVE.
    Now that we already have the two behavior states in place (passive and defensive),
    there is just one more needed to complete our enemy AI, that is, to protect the
    building.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编程之前，我们定义了我们需要为这个敌人AI多少个状态，我们选择了三个不同的状态：被动、防御和进攻。现在我们已经有了两个行为状态（被动和防御）就位，我们只需要一个状态来完成我们的敌人AI，那就是保护建筑物。
- en: We previously decided that the character would only directly confront the player
    if he couldn't use the wall as cover, and that moment is where the player comes
    from the left and the enemy is surprised with its presence.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前决定，如果角色无法使用墙壁作为掩护，他才会直接面对玩家，而玩家从左侧出现，敌人对其出现感到惊讶的那一刻正是如此。
- en: '![](img/7626b687-89fb-4680-8d7b-f657d9c0a1cc.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7626b687-89fb-4680-8d7b-f657d9c0a1cc.jpg)'
- en: 'Once again, we need to first check if the player triggered the left area, as
    that will activate our enemy AI from the PASSIVE state into the AGGRESSIVE state
    we intended. Then, we need to define what he should do in that case. Let''s start
    writing it in our script:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们首先需要检查玩家是否触发了左侧区域，因为这将激活我们的敌人AI从被动状态变为我们期望的攻击状态。然后，我们需要定义在这种情况下他应该做什么。让我们开始在脚本中编写它：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This time we added our two possible situations when attacking a player that
    comes from the left; the first is if the player comes from the left and continues
    towards the enemy, or remains in the same position. The second situation that
    could occur is if the player soon retreats as soon as he sees the enemy, and in
    that scenario we have chosen to make the enemy search for the player, going towards
    the `triggerL` position where initially the player appeared.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们添加了两种可能的情况，当攻击从左侧来的玩家时；第一种情况是如果玩家从左侧来并继续向敌人前进，或者保持在同一位置。第二种可能发生的情况是如果玩家一看到敌人就立即撤退，在这种情况下，我们选择让敌人寻找玩家，朝向`triggerL`位置前进，这是玩家最初出现的位置。
- en: 'This is the completed script, written using the possibility map example that
    we''ve been working on in this chapter. Let''s take a look at the full script:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完成后的脚本，使用了我们在本章中一直在工作的可能性图示例。让我们看一下完整的脚本：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the previous block of code, we can see all of the variables that have been
    used in our script so far. The rest of the script is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码块中，我们可以看到到目前为止在我们的脚本中已经使用过的所有变量。脚本的其他部分如下：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Possibility map conclusion
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可能性图结论
- en: We have finally completed our first possibility map example. The principles
    that were shared in this chapter can be used in a wide range of game genres. In
    fact, almost any game that you plan to create in the future can greatly benefit
    from a possibility map. As we saw, this technique is used to plan every situation
    that the player can create, and how the character AI should behave according to
    that. By planning this carefully we can avoid a lot of issues in gameplay, as
    well as a lack of diversity regarding the character AI behavior. Another interesting
    point that is worth mentioning is to try to create a different Possibility Map
    for different characters of the game, as not all humans react equally. A computer
    AI should follow that same rule.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于完成了第一个可能性图示例。本章中分享的原则可以应用于广泛的游戏类型。事实上，几乎你计划在未来创建的任何游戏都可以从可能性图中获得很大的好处。正如我们所见，这项技术用于规划玩家可能创建的每一种情况，以及角色AI应该如何根据这些情况行动。通过精心规划，我们可以避免游戏中的许多问题，以及角色AI行为缺乏多样性。另一个值得注意的有趣点是，尝试为游戏中的不同角色创建不同的可能性图，因为并非所有人类都会以相同的方式反应。计算机AI应该遵循同样的规则。
- en: Probability maps
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概率图
- en: A probability map is a more complex and detailed version of a possibility map
    because it relies on probabilities in order to change the behavior of the character,
    rather than a simple on or off trigger. Its similarity with the possibility map
    is that it's also required for planning ahead the possible states for our character.
    This time, however, we add to it a percentage, using which the AI will calculate
    what behavior he will be using. Imagine the next example using the situation that
    we previously created for the possibility map our enemy AI could be more aggressive
    in the daytime than at night. For that, we create a statement that explains to
    our enemy that if it's night time, there is a lesser chance of seeing the player
    character, and for that reason it will choose a more defensive approach instead
    of an aggressive one. Or, simply, we could define that our enemy calculates the
    probability of killing the player simply based on the distance between the two
    characters. If the player gets closer to the enemy, the probability of the AI
    getting back and surviving are lesser than if he keeps firing against the player,
    so we can add that equation into the AI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 概率图是可能性图的一个更复杂和详细的版本，因为它依赖于概率来改变角色的行为，而不是简单的开或关触发。它与可能性图的相似之处在于，它也用于提前规划我们角色的可能状态。然而，这一次，我们添加了一个百分比，AI将根据这个百分比计算他将使用的行为。想象一下下一个例子，使用我们之前为可能性图创建的情况，我们的敌人AI在白天可能比在夜晚更具攻击性。为此，我们创建了一个说明，告诉我们的敌人如果现在是夜晚，看到玩家角色的机会较小，因此它将选择更防御性的策略而不是攻击性的策略。或者，简单地说，我们可以定义敌人根据两个角色之间的距离来计算杀死玩家的概率。如果玩家靠近敌人，AI返回并生存的概率将小于如果他继续对玩家开火的情况，因此我们可以将这个方程添加到AI中。
- en: Let's take a look at our human behavior, the choices we make; usually, we make
    our decision by taking into consideration past events and what we've done before.
    When we feel hungry and we decide to go out for dinner, can our friend guess which
    restaurant we have chosen? Our friend may have calculated the probability of our
    choice and given their answer by taking into consideration the higher percentage
    chance. That's exactly what we need to do to our AI friend; we need to assign
    some probabilities to his choices, such as what's the probability of the AI character
    falling asleep while protecting the building during the day and during the night?
    What's the probability of the enemy running if he has low hp? If we apply probability
    to our AI character, it helps to create that unpredictable behavior that humans
    have and makes the game more engaging and natural.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看人类行为，我们的选择；通常，我们会通过考虑过去的事件和我们之前所做的事情来做出决定。当我们感到饥饿并决定外出吃饭时，我们的朋友能猜到我们选择了哪家餐厅吗？我们的朋友可能会计算我们选择的概率，并通过考虑更高的百分比来给出他们的答案。这正是我们需要对我们的人工智能朋友所做的事情；我们需要为他选择分配一些概率，例如，AI角色在白天和夜间保护建筑时入睡的概率是多少？如果敌人的生命值低，他逃跑的概率是多少？如果我们将概率应用于我们的AI角色，这有助于创建人类具有的不可预测行为，使游戏更加吸引人和自然。
- en: How to use probability maps
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用概率地图
- en: In this example, we'll continue using the same scenario that we created before,
    where our AI guard is protecting a building that contains an atomic that the player
    needs to deactivate. The only entrance to the building is protected by our AI
    character.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将继续使用我们之前创建的相同场景，其中我们的AI守卫正在保护一个包含玩家需要关闭的原子弹的建筑。建筑唯一的入口被我们的AI角色所保护。
- en: Let's imagine that we are the guard and we have orders to stay there for 16
    hours straight we would probably need to eat, drink, and move a little bit to
    be able to stay active and alert the whole time. We will therefore add that to
    our character, making it more unpredictable for the player. If the AI decides
    to eat or drink, he will be inside the building, and if he decides to walk a little
    bit he will be patrolling from the `triggerL` to `triggerR` position. Most of
    the time, he will be just standing on his guard position.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一下，我们是守卫，并且我们接到命令要连续16小时待在那里，我们可能需要吃东西、喝水，并且稍微活动一下，以便能够保持活跃并保持警惕。因此，我们将这一点添加到我们的角色中，使玩家更加不可预测。如果AI决定吃东西或喝水，他将在建筑内，如果他决定稍微走动一下，他将在`triggerL`到`triggerR`位置巡逻。大多数时候，他只是站在他的守卫位置上。
- en: '![](img/152524bc-c191-41d3-878d-bcd6318ef28e.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/152524bc-c191-41d3-878d-bcd6318ef28e.jpg)'
- en: This is a probability map, and here we define the percentage of each state that
    our character exists in. It means that every time the player sees the enemy AI,
    the enemy can be doing one of those things. This will differ greatly when you
    take into consideration the time of day at which the player decided to appear.
    If the player arrives in the morning, it has an **0.87** chance of finding the
    enemy in a guard position in front of the building, a **0.10** chance of finding
    him eating or drinking inside the building, and finally a **0.03** chance of finding
    him walking outside from one point to another. If the player arrives in the afternoon,
    it has a **0.48** chance of finding the enemy in a guard position in front of
    the building, a **0.32** chance of finding him eating or drinking inside the building,
    and finally a **0.2** chance of finding him walking around from one point to another.
    At night, the player has a **0.35** chance of finding the enemy in the guard position,
    a **0.40** chance of finding him eating or drinking inside the building, and a
    **0.25** chance of finding the enemy walking around.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个概率地图，在这里我们定义了我们的角色存在于每个状态中的百分比。这意味着每次玩家看到敌人AI时，敌人可能正在做这些事情中的任何一件。当考虑到玩家决定出现的具体时间时，这会有很大的不同。如果玩家在早上到达，有**0.87**的概率在建筑前发现敌人处于守卫位置，有**0.10**的概率在建筑内发现他正在进食或饮水，最后有**0.03**的概率发现他正在从一个点到另一个点散步。如果玩家在下午到达，有**0.48**的概率在建筑前发现敌人处于守卫位置，有**0.32**的概率在建筑内发现他正在进食或饮水，最后有**0.2**的概率发现他正在从一个点到另一个点闲逛。在夜间，玩家有**0.35**的概率在守卫位置发现敌人，有**0.40**的概率在建筑内发现他正在进食或饮水，有**0.25**的概率发现敌人正在闲逛。
- en: '![](img/c25d3452-5650-45ae-9c47-5ce7ca04030c.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c25d3452-5650-45ae-9c47-5ce7ca04030c.jpg)'
- en: This will help to create that unpredictable aspect to our character by not making
    it as obvious that he will be in the same position every time you play the level.
    We can also update this probability every five minutes or so, in case the player
    stays still, waiting for our enemy to change position. This technique is used
    in a lot of games, but especially in stealth games, where observation is key.
    This is because the player has the opportunity to stay in a safe position and
    observe the enemy behavior, similar to heist movies, where actors wait for the
    guards to change shifts before getting inside the bank. Because of this popular
    behavior that we're used to seeing in movies, players like to feel that same sensation
    in games, and so probability maps have changed the way how we play.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助我们的角色具有不可预测性，不会让他在每次玩关卡时都处于相同的位置。我们还可以大约每五分钟更新这个概率，以防玩家保持静止，等待我们的敌人改变位置。这种技术在很多游戏中都有使用，尤其是在潜行游戏中，观察是关键。这是因为玩家有机会待在一个安全的位置，观察敌人的行为，类似于他抢电影，演员在进入银行之前等待守卫换班。正因为这种我们在电影中习惯看到的行为，玩家喜欢在游戏中感受到同样的感觉，因此概率图改变了我们玩游戏的方式。
- en: 'An example of how probability can be used in a script is as follows. For this,
    I''ve used the `Passive` state and added the probability that we previously decided
    to use:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在脚本中使用概率的一个例子。为此，我使用了 `Passive` 状态，并添加了我们之前决定使用的概率：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To calculate the percentage, we first need to create a random number from `0`
    to `100`, and then we create a statement that will use that number to check to
    which statement it belongs. On the first statement, for example, we have an `87%`
    chance of the AI staying in the guard position, so if the random number is higher
    than `13`, it fits within this category and the character is made to stay in the
    guard position. A number higher than `3` and equal or less than `13`, gives us
    a `10%` of chance, and a number equal or less than `3` gives us a `3%` chance.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算百分比，我们首先需要从 `0` 到 `100` 创建一个随机数，然后我们创建一个将使用该数字来检查它属于哪个陈述的语句。例如，在第一个陈述中，我们有
    `87%` 的机会让AI保持在守卫位置，所以如果随机数高于 `13`，它就属于这个类别，角色将被设定为保持在守卫位置。一个高于 `3` 且等于或小于 `13`
    的数字，给我们 `10%` 的机会，而一个等于或小于 `3` 的数字给我们 `3%` 的机会。
- en: Where to go from here
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来该去哪里
- en: Now that we understand how to use a probability and possibility map, a pertinent
    question that we might question ourselves is, what can we do with this? Well we
    saw how important is to use a possibility map to define the behaviors of a character
    and how the probability helps to make those behaviors unpredictable, but we can
    do a lot more with what we learned depending on the type of game that we are creating
    or the type of AI that we want. Remember that flaws makes part of what we are
    as humans and we are surrounded by probabilities, even if it's just *0*,*000001%*
    the probability of happening the unexpected exists that's why no one is perfect,
    so it's a fun fact to remember when creating an AI character, giving them some
    probability of human stuff happening, or simply making good or bad decisions,
    that builds a personality to the computer character that you are creating.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用概率和可能性图，一个可能我们自己也会问的问题就是，我们能用这个做什么呢？嗯，我们看到了使用可能性图来定义角色的行为是多么重要，以及概率是如何帮助使这些行为不可预测的，但我们可以根据我们正在创建的游戏类型或我们想要的AI类型做更多的事情。记住，缺陷是我们作为人类的一部分，我们周围充满了概率，即使只是
    *0*，*000001%* 的意外发生的概率存在，这就是为什么没有人是完美的，所以当创建AI角色时，给他们一些人类行为发生的概率，或者简单地做出好或坏的决策，这将为你在创建的电脑角色中构建一个个性，这是一个有趣的事实。
- en: Another special thing that we can do with probability maps, is giving the AI
    the opportunity to learn from himself, making him smarter every time the player
    decides to play the game. Both the player and the enemy AI will learn, making
    the challenge always updated according to the hours spent on the game. If the
    player has the tendency to use the same weapon or coming from the same direction,
    the computer should update that information and use it on future events. If the
    player confronted the computer *100* times and *60%* of those times he used a
    grenade, the AI should have that in mind and react according to that probability.
    That will push the player to think in other strategies, also not being so obvious
    exploring other ways of defeating the enemy.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以用概率图做的特别之处，就是给AI提供自我学习的机会，每次玩家决定玩游戏时，都会让AI变得更聪明。玩家和敌方AI都会学习，挑战会根据玩家在游戏上花费的时间不断更新。如果玩家倾向于使用同一武器或从同一方向来，计算机应该更新那条信息，并在未来的事件中使用它。如果玩家与计算机对抗了*100*次，其中有*60%*的时间使用了手榴弹，AI应该记住这一点，并根据那个概率做出反应。这将促使玩家思考其他策略，并且不会那么明显地探索击败敌人的其他方法。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has described possibility and probability maps and we have learned
    how to let the AI make decisions for itself according to the player actions. Possibility
    and probability maps is the foundation of an AI character and now we can explore
    this technique to create new and unique artificial intelligence for our games.
    In the next chapter, we'll learn how the AI should behave according to the different
    options that it has on that moment instead of using a possibility map. We want
    the character to analyze the situation and think about what to do, taking in consideration
    many factors, such as health, distance, weapon, bullets, and any other relevant
    factors.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了可能性与概率图，我们学习了如何让AI根据玩家的行为自行做出决策。可能性和概率图是AI角色的基础，现在我们可以探索这项技术，为我们的游戏创造新的和独特的人工智能。在下一章中，我们将学习AI应该如何根据它在那一刻的不同选项来表现，而不是使用可能性图。我们希望角色能够分析情况，思考要做什么，同时考虑许多因素，如健康、距离、武器、子弹以及其他相关因素。
