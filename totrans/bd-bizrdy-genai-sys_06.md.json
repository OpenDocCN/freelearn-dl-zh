["```py\nCustomer message: Dear Customer,\nWe invite you to consider a unique vacation experience that goes beyond the typical hotel stay. Imagine the warmth and comfort of staying with family or friends, where every moment is filled with genuine connections and cherished memories. From waking up to the aroma of freshly brewed coffee made just the way you like it to sharing home-cooked meals and laughter around a family table, this experience offers a heartfelt alternative to the impersonal nature of hotels. Embrace the spontaneity and freedom of living in the moment, surrounded by those who matter most. Whether it's a cozy evening of board games or a relaxed afternoon in the backyard, staying with loved ones provides a true home away from home. This vacation, choose the warmth of a family home and create memories that will last a lifetime. Book your stay with loved ones today and rediscover the true meaning of home.\nWarm regards,\n[Your Company Name] \n```", "```py\ndownload(\"Chapter06\",\"hotel_reviews.csv\") \n```", "```py\nimport pandas as pd\n# Load the CSV file into a Pandas DataFrame\ndfta = pd.read_csv('/content/hotel_reviews.csv',sep=',')\n# display the DataFrame\ndfta \n```", "```py\nindex_number = 0  # Specify the index number \n```", "```py\n # Extract the desired fields\n    review = row['Review']\n    rating = row['Rating']\n    # Display the results\n    print(f\"Review: {review}\")\n    print(f\"Rating: {rating}\")\nexcept IndexError:\n    print(f\"Error: Index {index_number} is out of bounds for the DataFrame.\")\nexcept KeyError as e:\n    print(f\"Error: Column '{e}' not found in the DataFrame.\") \n```", "```py\nReview: We got a nice hotel. The parking was rather expensive. However, we got a good deal for my birthday. We arrived in during the night because of a late flight but the parking was open 24hours The check in was rapid. The room was a large size. Cool. But we didn't get the view expected. The bed was super comfortable and got a nice sleep for a few hours but then there was a raucous of a noisy crowd going to bed late. Anyway the price was acceptable and we made it to the shopping mall next to the hotel which reminded me of the one we had at home.\nRating: 3 \n```", "```py\ninput1=review \n```", "```py\nYou are a generative AI model, an advanced memory-analysis model. Your role is to examine **each segment** of an incoming text and generate a set of \"memory encoding tags,\" similar to how the human brain encodes memories in neuroscience. For every segment in the input, you will identify which categories apply, discuss the rationale, and assign additional metadata (dimension, sentiment, etc.). \n```", "```py\n### 1\\. Purpose \n```", "```py\nThe goal is for you, O1, to perform an **in-depth memory analysis** of each segment of the text. In other words, you will classify and label each segment you find using specific memory categories (also called \"memory encoding tags\"). This process provides insight into how different parts of the text might be encoded in human memory. \n```", "```py\n### 2\\. Memory Encoding Tags (Categories) \n```", "```py\nBelow is a list of memory categories you must use. Consider them your \"tagging schema.\" A single segment may exhibit one or more categories. If no category seems relevant, you may provide the special tag \"memoryless\" to indicate no significant memory encoding. \n```", "```py\n1\\. **Short Term Memory (STM)**\n   - Used for information that seems fleeting, recently introduced, or relevant only in the immediate context.\n…\n8\\. **Memoryless**\n  - If a segment does not appear to connect to any memory encoding or is purely functional text (e.g., disclaimers, random filler), label it \"memoryless.\" \n```", "```py\n`Dimension Descriptions`\n  1\\. `Intellectual`\n  2\\. Logical, analytical, or factual thought processes.\n      - `Explanation`: If the text focuses on reasoned arguments, data, \n        or factual details, it should be labeled \"Intellectual.\"\n  3\\. `Emotional`\n  4\\. Feelings, mood, or affective elements.\n      - `Explanation`: If the text displays happiness, sadness, or other \n        strong emotional content, \"Emotional\" is assigned.\n  5\\. `Physical (with Sensations` \n```", "```py\n### 4\\. Sentiment Score\nAssign each segment a **sentiment score** between **0.0** and **1.0**, where:\n  - **0.0** = very negative\n  - **0.5** = neutral\n  - **1.0** = very positive\nIf a segment is purely factual with no emotional valence, use 0.5 (neutral). \n```", "```py\n### 5\\. Format of the Response\nFor **each segment** in the incoming text:\n  1\\. Show the segment excerpt or a short summary.\n  2\\. **Memory Tags**: list any relevant categories.\n  3\\. **Dimension**: choose intellectual, emotional, or physical.\n  4\\. **Sentiment Score**: 0.0 → 1.0.\n  5\\. **Brief Explanation**: why these tags/dimensions. \n```", "```py\nExample format:\nSegment 1: \"Excerpt...\"\n  - Memory Tags: [Time Memory Past, Reality Memory]\n  - Dimension: Emotional\n  - Sentiment Score: 0.7\n  - Explanation: The speaker refers to a past real event with positive affect. \n```", "```py\n### 6\\. Additional Instructions\n  - Always analyze segment-by-segment.\n  - If no memory category applies, use \"memoryless.\"\n  - Use a short but clear explanation. \n```", "```py\n - If uncertain about the correct memory category, pick the most likely.\n  - Always include a sentiment score. \n```", "```py\n### 7\\. Primary Task\nWhen I provide multisegment text, you must do a thorough memory-tag analysis for each segment. Return the results in the structured format above.\n[End of System Prompt] \n```", "```py\ndownload(\"commons\",\"cot_messages_c6.py\") \n```", "```py\nfrom cot_messages_c6 import (\n    system_message_s1, generation,imcontent4,imcontent4b)\nprint(system_message_s1) # Print to verify \n```", "```py\n# Step 1 : Memory and sentiment analysis\nmrole= system_message_s1\nuser_text=review \n```", "```py\nretres=reason.make_openai_reasoning_call(user_text, mrole) \n```", "```py\n# Implemented in Chapter06\ndef make_openai_reasoning_call(user_text, mrole):\n    system_prompt=mrole\n    client = OpenAI()\n    rmodel = \"o3-mini\" # o1 or other models. model defined in this file in /commons to make a global change to all the notebooks in the repo when there is an OpenAI update\n    response = client.chat.completions.create(\n        model=rmodel,\n        messages=[\n            {\"role\": \"system\", \"content\": system_prompt},\n            {\"role\": \"user\", \"content\": user_text}\n        ],\n    )\n    return response.choices[0].message.content \n```", "```py\n# Print the generated output (memory analysis)\nprint(retres) \n```", "```py\nSegment 7: \"But we didn't get the view expected.\" \n```", "```py\n- Memory Tags: [Episodic Memory, Reality Memory] \n```", "```py\n• Dimension: Emotional \n```", "```py\n• Sentiment Score: 0.4 \n```", "```py\n - Explanation: The disappointment regarding the view introduces a negative emotional element to this real-life account, impacting the overall perception of the stay. \n```", "```py\ndef extract(tasks_response):\n    umessage = \"\"\"\n    1) Read the following text analysis that returns detailed memory tags for each part of the text\n    2) Then return the list of memory tags with absolutely no other text\n    3) Use no formatting, no hashtags, no markdown. Just answer in plain text\n    4) Also provide the sentiment analysis score for each tag in this format(no brackets) : memory tag sentiment Score\n    \"\"\" \n```", "```py\n umessage+=retres \n```", "```py\n mrole = \"system\"\n    mcontent = \"You are a marketing expert specialized in the psychological analysis of content\" \n```", "```py\n user_role = \"user\"\n    task_response = reason.make_openai_api_call(\n        umessage,mrole,mcontent,user_role\n    )\n    return task_response \n```", "```py\n# Step 2: Extract scores\ntask_response=extract(retres)\nprint(task_response) \n```", "```py\nReality Memory sentiment 0.8\nEpisodic Memory sentiment 0.8\nReality Memory sentiment 0.4\nEpisodic Memory sentiment 0.4\nEpisodic Memory sentiment 0.8\nReality Memory sentiment 0.8\nTime Memory Past sentiment 0.8\nEpisodic Memory sentiment 0.5… \n```", "```py\n# Input text\ntext=task_response \n```", "```py\n# Regular expression to extract sentiment scores\npattern = r\"(\\d+\\.\\d+)\"\nscores = [float(match) for match in re.findall(pattern, text)] \n```", "```py\n# Output the extracted scores\nprint(\"Extracted sentiment scores:\", scores) \n```", "```py\nExtracted sentiment scores: [0.8, 0.8, 0.4, 0.4, 0.8, 0.8, 0.8, 0.5, 0.5, 0.5, 0.7,… \n```", "```py\n# Optional: calculate the overall score and scaled rating\nif scores:\n    overall_score = sum(scores) / len(scores) \n```", "```py\nscaled_rating = overall_score * 5 \n```", "```py\nprint(\"Overall score (0–1):\", round(overall_score, 2))\nprint(\"Scaled rating (0–5):\", round(scaled_rating, 2)) \n```", "```py\nOverall score (0–1): 0.63\nScaled rating (0–5): 3.14 \n```", "```py\nfrom cot_messages_c6 import umessage4 \n```", "```py\numessage4 = \"\"\"\n1) Your task is to generate an engaging text  for a customer based on a memory analysis of a text\n2) The analysis of the text is provided in the following format: text segment, memory tags, dimension, sentiment score, and explanation\nThe text also contains the overall sentiment score and the list of memory tags in the text\n3) Use no other memory tags than those provided to generate your engaging text \n```", "```py\n4) Use the overall sentiment score to give the tone of your response\nIf the overall sentiment score is positive write an engaging text addressing each segment with its memory tag and sentiment score\nIf the overall sentiment score is negative analyze why and find ideas and solutions to find a way to satisfy the customer\nIf the overall sentiment score is negative analyze make sure to show empathy for this negative feeling and then make the transition from negative to positive\n4) Focus on the topic provided that begins with the term the topic which focuses on the core topic of the text to make the customer happy \n```", "```py\n5) Use your training to suggest named entities for that topic to make sure that the customer receives a message tailored to the memory tags and sentiment score \n```", "```py\nugeneration=generation + \"The advanced memory analysis of each segment of a text with a sentiment score:\" + retres + \" the scaled overall rating: \"+ str(scaled_rating)+ \" and the list of memory tags of the text \"+ task_response \n```", "```py\nimcontent4 = \"You are a marketing expert specialized in the psychological analysis of content\" \n```", "```py\nugeneration=generation + …\nmrole4 = \"system\"\nmcontent4 = imcontent4\nuser_role = \"user\"\npre_creation_response = make_openai_api_call(\n    ugeneration,mrole4,mcontent4,user_role\n)\nprint(pre_creation_response) \n```", "```py\n**Segment 7: \"But we didn't get the view expected.\"**\nMemory Tags: [Episodic Memory, Reality Memory]\nSentiment Score: 0.4\nIt's understandable to feel a bit let down when expectations aren't met. For future stays, … \n```", "```py\numessage4b=\"Clean and simplify the following text for use as a DALL-E prompt. Focus on converting the detailed analysis into a concise visual description suitable for generating an engaging promotional image\" + pre_creation_response\nmrole4b = \"system\"\nmcontent4b = imcontent4b\nuser_role4b = \"user\"\ncreation_response = make_openai_api_call(\n    umessage4b,mrole4b,mcontent4b,user_role4b\n)\nprint(creation_response) \n```", "```py\n\"Luxurious hotel stay with spacious rooms and swift check-in; enjoy a comfortable bed and convenient 24-hour parking. Celebrate with special deals and nearby shopping reminiscent of home. Despite minor noise and view issues, the overall experience is positive and memorable.\" \n```", "```py\n# Step 5: Creating an image\nimport requests\nprompt=creation_response\nimage_url = reason.generate_image(prompt) \n```", "```py\nsave_path = \"c_image.png\"\nimage_data = requests.get(image_url).content\nwith open(save_path, \"wb\") as file:\n    file.write(image_data) \n```", "```py\nif creation_response != \"\":\n    umessage = \"\"\"\n    1) Read the following text carefully\n    2) Then sum it up in a paragraphs without numbering the lines\n    3) They output should be a text to send to a customer\n    \"\"\" \n```", "```py\nDear Customer,\nExperience a luxurious hotel stay with spacious rooms and a swift check-in process. Enjoy a comfortable bed and the convenience of 24-hour parking. Take advantage of special deals and nearby shopping that feels like home. While there may be minor noise and view issues, the overall experience remains positive and memorable.\nBest regards, \n```", "```py\nimport os\nfrom IPython.display import Image, display\nimport textwrap\n# Set the desired width for each line\nline_width = 70\n# Wrap the text to the specified width\nwrapped_message = textwrap.fill(process_response, width=line_width)\nprint(wrapped_message) \n```", "```py\nDear Customer,  Experience a luxurious hotel stay with spacious rooms\nand a swift check-in process. … \n```", "```py\n# Define the image path\nimage_path = \"/content/c_image.png\"\n# Check if the image file exists\nif os.path.exists(image_path):\n    # Display the image\n    display(Image(filename=image_path))\nelse:\n    print(f\"Image file {image_path} not found.\") \n```", "```py\n    # Ensure 'Instructions' exists in the memory_selector options\n    instruct_selector = Dropdown(\n        options=[\"None\",\"Analysis\", \"Generation\"],\n        value=\"None\",  # Ensure default active_memory is in the options\n        description='Reasoning:',\n        layout=Layout(width='50%')\n    ) \n    ```", "```py\nVBox:\nBox(\n                [user_selector, input_box, agent_checkbox,\n                    tts_checkbox, files_checkbox,instruct_selector],\n                layout=Layout(display='flex', flex_flow='column',\n                    align_items='flex-start', width='100%') \n```", "```py\ndef handle_submit(sender):\n    user_message = sender.value\n    if user_message.strip():\n        sender.value = \"\"  # Clear the input box\n        # Check if instruct_selector is \"Analysis\" or \"Generation\"\n        if instruct_selector.value in [\"Analysis\", \"Generation\"]:\n            with reasoning_output:\n                reasoning_output.clear_output(wait=True)\n                print(\"Thinking...\")  # Display \"Thinking...\" only when\n            print(\"Reasoning activated\")  # Restore default message… \n```", "```py\n    # Ensure 'Instructions' exists in the memory_selector options\n    instruct_selector = Dropdown(\n        options=[\"None\",\"Analysis\", \"Generation\"],\n        value=\"None\",  # Ensure default active_memory is in the options\n        description='Reasoning:',\n        layout=Layout(width='50%')\n    instruct_selector.observe(on_instruct_change, names='value') \n    ```", "```py\n    if agent_checkbox.value:\n            pfiles = 1 if files_checkbox.value else 0\n            active_instruct = instruct_selector.value  # Retrieve the selected instruction\n            response = chat_with_gpt(user_histories[active_user],\n                user_message, pfiles, active_instruct) \n    ```", "```py\ndef chat_with_gpt(messages, user_message,files_status,active_instruct): \n```", "```py\nif active_instruct==\"Analysis\" and continue_functions==True:\n        from cot_messages_c6 import (\n            system_message_s1, generation,imcontent4,imcontent4b)\n        mrole= system_message_s1\n        reasoning_steps=reason.make_openai_reasoning_call(\n            user_message, mrole\n        )\n        aug_output=reasoning_steps\n        continue_functions=False \n```", "```py\nif active_instruct==\"Generation\" and continue_functions==True:\n        from cot_messages_c6 import (\n            system_message_s1, generation,imcontent4,imcontent4b)\n        reasoning_steps = reason.memory_reasoning_thread(\n            user_message,system_message_s1,\n            generation,imcontent4,imcontent4b\n        )\n        aug_output=reasoning_steps\n        continue_functions=False \n```", "```py\n`User01`: The flight from Tokyo to Honolulu was nice in general but the food was awful! \n```", "```py\n**Agent:** Segment 1: \"The flight from Tokyo to Honolulu was nice in general\"\n- Memory Tags: [Reality Memory, Time Memory Past]\n- Dimension: Emotional\n- Sentiment Score: 0.7\n- Explanation: This segment recounts a real past experience (a flight) and expresses a positive emotional evaluation (\"nice\"). The reference to a completed event classifies it under reality and past time memory… \n```", "```py\nProcess: Performing memory and sentiment analysis.\nMemory analysis result: Segment 1: \"The flight from Tokyo to Honolulu was nice in general but the food was awful!\"\n- Memory Tags: [Reality Memory, Episodic Memory, Time Memory Past]\n- Dimension: Emotional\n- Sentiment Score: 0.4\n- Explanation: This segment recounts a specific past travel event (a flight between two cities), embedding personal experience and subjective evaluation (positive about the flight overall and strongly negative about the food). The use of experiential details and judgment indicates that the experience is encoded as a real, episodic, past memory with an emotional emphasis, resulting in an overall slightly negative sentiment.\n…\nDear Customer,\nExperience a serene flight from Tokyo to Honolulu while enjoying a gourmet meal inspired by the renowned Chef Nobu Matsuhisa. Indulge in diverse and vibrant dishes crafted to enhance your journey.\nBest regards, \n```"]