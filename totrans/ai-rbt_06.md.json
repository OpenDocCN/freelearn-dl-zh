["```py\n    git clone https://github.com/MycroftAI/mycroft-core.git cd Mycroft-core\n    bash dev_setup.sh\n    ```", "```py\n    sudo rm -R -/.virtualenvs/Mycroft\n    cd ~/mycroft-core\n    mycroft-core directory.\n    ```", "```py\n    Time skill is totally self-contained inside the Jetson Nano. The robot should give you a voice response that is replicated on the debug console.\n    ```", "```py\n    cleanroomrobot-skill.\n    ```", "```py\n    Cleanroomrobot-skill\n       Git\n       __pycache__\n      Locale\n        En-us\n            cleanroomrobot.dialog\n            cleanroomrobot.intent\n    __init__.py\n    LISCENSE.md\n    Manifest.yml\n    README.md\n    init.py file in the skill_pickup_toys directory that we copied from the template.\n    ```", "```py\n    from mycroft import MycroftSkill, intent_handler, intent_file_handler\n    import rclpy\n    from rclpy.node import Node\n    from std_msgs.msg import String, Int32MultiArray, Int32\n    from adapt.intent import IntentBuilder\n    from mycroft.util.log import getLogger\n    ```", "```py\n    Cleanroomrobot to match what we defined previously:\n\n    ```", "```py\n\n    ```", "```py\n    pub = rospy.Publisher('/syscommand', String, queue_size=1000)\n    # define our service for publishing commands to the robot control system # all our robot commands go out on the topic syscommand\n    def pubMessage(str):\n    pub.publish(str)\n    ```", "```py\n    class CleanRoomSkill(MycroftSkill):\n    def   init  (self):\n    super(CleanRoomSkill, self).  init  (name=\"PickupToys\")\n    ```", "```py\n    def initialize(self):\n            clean_room_intent = IntentBuilder(\"cleanroomrobot\").require(\"cleanroomrobot\").build()\n            self.register_intent(clean_room_intent, self.handle_cleanroomrobot)\n    ```", "```py\n        @intent_file_handler('cleanroomrobot.intent')\n        ##@intent_handler('cleanroomrobot.intent')\n        def handle_cleanroomrobot(self, message):\n            self.speak_dialog('cleanroomrobot')\n            self.interface.cmdPublisher(\"CleanRoom\")\n    ```", "```py\n        def stop(self):\n            self.interface.cmdPublisher(\"STOPCleanRoom\")\n            pass\n    ```", "```py\n    def create_skill():\n        newSkill = Cleanroomrobot()\n        newSkill.setRobotInterface(rosInterface())\n        return newSkill\n    ```", "```py\n    class rosInterface(Node):\n        def __init__(self):\n            super().__init__('mycroftROS') # node name\n            self.cmdSubscribe = self.create_subscription(String, 'RobotCmd', self.cmdCallback,10)\n            self.cmdPublisher = self.create_publisher(String, 'RobotCmd', 10)\n        def cmdCallback(self,msg):\n            robotCmd = msg.data\n    ```", "```py\n    ## main ###\n    rclpy.init()\n    LOGGER = getLogger(__name__)\n    interface = rosInterface()\n    cleanSkill = Cleanroomrobot()\n    cleanSkill.setRobotInterface(interface)\n    rclpy.spin(interface)\n    rosInterface.destroy_node()\n    rclpy.shutdown()\n    ```", "```py\ntarzan / tarzan stripes forever\norange / orange you glad I can tell jokes?\n```", "```py\n    Tell me a knock-knock joke Can I have a knock-knock joke Give me a knock-knock joke Play me a knock-knock joke\n    ```", "```py\n    from mycroft import MycroftSkill, intent_file_handler\n    ```", "```py\n    class Knockknock(MycroftSkill):\n      def __init__(self):\n         MycroftSkill.__init__(self)\n    ```", "```py\n    @intent_file_handler('knockknock.intent') \n    def handle_knockknock(self, message):\n    name,punchline = self.pick_joke()\n    ```", "```py\n    response=self.get_response(announcement=\"knock, knock\") \n    # response will always be \"who's there\" \n    response=self.get_response(announcement=name)\n    ```", "```py\n    # response will be \"name who\"\n    # if end of respose is not the word who, we can re-prompt \n    if \"who\" not in response:\n      prompt = \"You are supposed to say \"+name+\" who\" \n      response=self.get_response(announcement=prompt)\n    ```", "```py\n    self.speak(punchline)\n    ```", "```py\n    def pick_joke(): \n      jokeFile=\"knockknock.jokes\" \n      jfile = open(jokeFile,\"r\") \n      jokes = []\n      for jokeline in jfile:\n        jokes.append(jokeline)\n      joke = choice(jokes) \n      jokeParts = joke.split(\"/\") \n      name = jokeParts[0] \n      punchline = jokeParts[1] \n      return name, punchline\n    ```", "```py\n    def create_skill():\n      return Knockknock()\n    ```", "```py\n    $ msk create\n    Enter a short unique skill name (ie. \"siren alarm\" or \"pizza orderer\"): receiveKnock\n    Class name: ReceiveKnockSkill\n    Repo name: receive-knock-skill\n    Looks good? (Y/n) y\n    Enter some example phrases to trigger your skill:\n    knock knock\n    -\n    Enter what your skill should say to respond:\n    who's there\n    Enter a one line description for your skill (ie. Orders fresh pizzas from the store): This skill receives a knock knock joke from the user\n    Enter a long description:\n    This is the other half of the Knock Knock joke continuum - we are giving the robot the ability to receive knock knock jokes. The user says knock knock, the robot responds whos there and so on\n    >\n    Enter author: Francis Govers\n    Would you like to create a GitHub repo for it? (Y/n) Y\n    === GitHub Credentials === Username: ********** Password:*********\n    Counting objects: 12, done.\n    Delta compression using up to 4 threads. Compressing objects: 100% (5/5), done.\n    Writing objects: 100% (12/12), 1.35 KiB | 0 bytes/s, done. Total 12 (delta 0), reused 0 (delta 0)\n    To https://github.com/FGovers/receive-knock-skill\n    * [new branch] master -> master\n    /opt/Mycroft/skills/receive-knock-skill. The program is still the init.py file.\n    ```", "```py\n    from mycroft import MycroftSkill, intent_file_handler import time\n    ```", "```py\n    class ReceiveKnock(MycroftSkill):\n      def __init__(self):\n           MycroftSkill.__init__(self)\n    ```", "```py\n    @intent_file_handler('knock.receive.intent') \n    def handle_knock_receive(self, message):\n      response =self.get_response('who.is.there')\n    ```", "```py\n    response2= response + \" who?\"\n    response3 =self.get_response(announcement=response2)\n    self.speak_dialog('veryfunny') \n    time.sleep(3)\n    def stop(self):\n      pass\n    def create_skill():\n      return ReceiveKnock()\n    ```", "```py\nreceive-knock-skill directory:\ninit .py README.md\nsettingsmeta.json\n./dialog/en-us:\nknock.receive.dialog veryfunny.dialog\n./vocab/en-us:\nknock.receive.intent\n```"]