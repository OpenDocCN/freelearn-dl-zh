- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accelerate Building Solutions on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Key steps for building solutions on AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use case for leveraging Amazon Q features during the build process on AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awareness of AWS account resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this time, it’s no secret that organizations are moving their IT infrastructure
    to the cloud at a rapid pace, with AWS being a market leader in offering cloud
    computing services for building their technology stack. When transitioning existing
    applications to AWS or creating new ones natively using many of the AWS services,
    there are certain steps that all builders need to take. A builder is a key persona
    in every organization, and those who leverage AWS services for their IT needs
    utilize AWS builders to address their business use cases.
  prefs: []
  type: TYPE_NORMAL
- en: An AWS builder is an individual who uses AWS to design, develop, deploy, and
    manage applications and solutions on the AWS cloud platform. These individuals
    may be developers, engineers, architects, data scientists, or other professionals
    working with AWS services to build innovative and scalable solutions for their
    organizations or clients. AWS builders leverage the wide array of tools and services
    provided by AWS to create robust and efficient applications that meet the specific
    needs and requirements of their projects. They are responsible for understanding
    AWS services, implementing best practices, and continuously improving their skills
    to drive innovation and success in their projects.
  prefs: []
  type: TYPE_NORMAL
- en: There is no denying that cloud computing has accelerated the IT build process
    compared to the on-premises world. However, large and complex projects still require
    significant time and effort before they can be brought into the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s quickly look at some of the key steps builders need to take to build projects
    on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Key steps for building solutions on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process builders typically go through to solve a use case using AWS services
    involves several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding requirements**: Builders first need to understand the requirements
    of the use case, including the problem to be solved, desired outcomes, and any
    constraints or limitations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Selection of AWS services**: Based on the requirements, builders select the
    appropriate AWS services that best fit the use case. This may involve researching
    and evaluating various AWS services to determine which ones provide the required
    features and capabilities.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Designing the solution architecture**: Builders design the architecture of
    the solution, including the overall system design, data flow, integration points,
    and scalability considerations. This involves creating diagrams, such as architecture
    diagrams or data flow diagrams, to visualize the solution.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Setting up AWS resources**: Builders provision and configure the necessary
    AWS resources to implement the solution. This may include setting up compute instances
    (e.g., EC2), storage (e.g., S3), databases (e.g., RDS), networking (e.g., VPC),
    and other services as required.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Developing application code**: Builders develop the application code or scripts
    needed to implement the solution. This may involve writing code in programming
    languages such as Python, Java, or Node.js, as well as creating configuration
    files or scripts for **infrastructure as code** (**IaC**) tools such as AWS CloudFormation
    or AWS **Cloud Development** **Kit** (**CDK**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Testing and debugging**: Builders test the solution to ensure that it functions
    as expected and meets the requirements. This includes unit testing, integration
    testing, and end-to-end testing to validate the functionality and performance
    of the solution. Builders also debug any issues or errors that arise during testing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deployment and rollout**: Once testing is complete, builders deploy the solution
    to the production environment. This may involve deploying application code to
    compute instances, configuring load balancers and auto-scaling groups, and configuring
    DNS settings. Builders carefully plan and execute the deployment to minimize downtime
    and disruptions to users.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Monitoring and optimization**: After deployment, builders monitor the solution
    to ensure that it continues to operate smoothly and meets performance objectives.
    This involves monitoring metrics, logs, and alarms using AWS CloudWatch and other
    monitoring tools. Builders also optimize the solution for cost, performance, and
    scalability as needed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Documentation and knowledge sharing**: Builders document the solution architecture,
    configuration, and deployment process to facilitate knowledge sharing and future
    maintenance. This documentation helps other team members understand how the solution
    works and how to troubleshoot issues if they arise.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, there are many steps involved in building a solution for a given
    use case using many of the AWS purpose-built services. Each step presents its
    own challenges, and every builder has their own approach to navigating through
    them. The key point here is that, often, building complex solutions takes time,
    with much of it devoted to research. This research may involve looking into similar
    use cases solved previously, weighing the pros and cons of specific AWS services,
    exploring design patterns and their implementation, and likely troubleshooting
    issues and errors encountered during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive right into how you can accelerate the process of building solutions
    on AWS using Amazon Q, which focuses on the area where builders often spend a
    significant amount of time – research.
  prefs: []
  type: TYPE_NORMAL
- en: Use case for leveraging Amazon Q features during the build process on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To better understand how Amazon Q can help accelerate the build process on AWS,
    we will introduce a use case and then go through the steps of solving it. Along
    the way, we will highlight the many features of Amazon Q that can reduce the time
    a builder would otherwise spend.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that, for simplicity, we are presenting a straightforward use case
    that can be solved in many different ways. However, once you go through the flow
    of the use case, it will help you understand the various features of Amazon Q
    when it comes to building solutions using AWS services. These features can be
    applied to any other complex use case an AWS builder might encounter in their
    organization. The key takeaway is to understand how these features save time and
    improve productivity, ultimately enhancing the experiences of AWS builders. Repeat
    after me – no AWS builder should be unhappy. Let’s jump straight into the use
    case.
  prefs: []
  type: TYPE_NORMAL
- en: A company wants to build a web application where users can upload images for
    various purposes, such as profile pictures, product images, or content illustrations.
    To ensure optimal performance and user experience, the company aims to implement
    a scalable and efficient image processing pipeline to resize and optimize these
    images before storing them in the backend storage system.
  prefs: []
  type: TYPE_NORMAL
- en: Since AWS is their preferred cloud services provider, the business wants the
    IT team to create a simple and cost-effective solution in a short time using AWS
    services.
  prefs: []
  type: TYPE_NORMAL
- en: The use case may be simple here, but often, AWS builders in the organization
    receive complex requirements from the business that require methodical planning,
    research, and execution. The assumption is that AWS builders have a general sense
    of many of the AWS services, their features, and how they can help solve a use
    case. However, not every builder is the same, and not everyone has the same level
    of expertise. Some are entry-level builders who rely heavily on research and guidance
    from senior builders, while others know how to solve a use case but may not be
    familiar with all the best practices and alternative design patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important reminder: LLM-based solutions do not always return the same results'
  prefs: []
  type: TYPE_NORMAL
- en: 'LLMs do not inherently produce idempotent results when deployed in applications.
    There are a few reasons for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stochasticity**: Most LLMs use some element of randomness when generating
    outputs, such as sampling from a probability distribution. This means each invocation
    will produce slightly different results.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous learning**: Many deployed LLMs continue training on new data,
    constantly updating their parameters. The model is essentially continuously changing,
    so results will evolve.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interactivity**: Conversational AI systems based on LLMs accumulate context
    and history, which impacts subsequent responses. The results depend on prior interactions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**External dependencies**: Applications may pull in external data that influences
    the LLM’s outputs. If that data changes, the outputs will as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multimodal inputs**: For LLMs that process images, audio, and so on, in addition
    to text, variations in those inputs lead to different outputs.'
  prefs: []
  type: TYPE_NORMAL
- en: Since Amazon Q is also an LLM-based service, the results you see for this use
    case, as well as any use case you solve, may not always return the same output.
    Therefore, it is important to have a human in the loop to prompt it appropriately
    and also test and verify before deploying solutions in production.
  prefs: []
  type: TYPE_NORMAL
- en: Hope you didn’t skip the preceding reminder note! Now, let’s jump straight into
    how Amazon Q will help expedite solving this use case.
  prefs: []
  type: TYPE_NORMAL
- en: Conversational Q&A capability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The conversational ability of Amazon Q will help us through the initial steps
    to better understand the use case. You can ask Amazon Q different questions, and
    it will try to understand what you want to do. If you are an AWS builder with
    some knowledge of AWS services relevant to solving this use case, you can start
    with a broad question to Amazon Q and then narrow down options by prompting. For
    example, in the following screenshot, we ask for a solution to the use case without
    going into too much detail about what it should look like on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Amazon Q conversational capability – general question](img/B21378_15_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – Amazon Q conversational capability – general question
  prefs: []
  type: TYPE_NORMAL
- en: Since there weren’t specific instructions in the question, Amazon Q provided
    a general outline of what the solution might look like. This is where you can
    further prompt the system to narrow down a possible solution. Since the use case
    requires us to build and host a simple website, we prompt Amazon Q to refine its
    recommendation further. The following screenshot shows this prompt and Q’s response.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Amazon Q conversational capability – prompt 1](img/B21378_15_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Amazon Q conversational capability – prompt 1
  prefs: []
  type: TYPE_NORMAL
- en: Q understood the prompt, and it provided a recommendation to use the **AWS Amplify**
    service as a simple way to host the website. As you can see through this simple
    example, prompting the system is a crucial step in obtaining results that are
    customized to the use case you are trying to solve. Since the use case requires
    us to build a website and it will not just be a static web page, the prompt in
    the following screenshot further refines the output from Q.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Amazon Q conversational capability – prompt 2](img/B21378_15_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Amazon Q conversational capability – prompt 2
  prefs: []
  type: TYPE_NORMAL
- en: You can continue along this path of prompting until you receive enough recommendations
    to help solve a particular use case. Amazon Q also provides sources of information
    so that you can read more about it.
  prefs: []
  type: TYPE_NORMAL
- en: If you happen to have an idea of which AWS services you want to use for the
    use case, you can directly construct the very first question you ask Amazon Q
    with all the relevant considerations the system should make when coming up with
    a recommended solution. For example, in our use case, if we know that we could
    host the website on EC2 and then use S3 as a store to store the original and resized
    images, then we can prompt the system all at once, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Amazon Q conversational capability – well-defined requirements](img/B21378_15_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Amazon Q conversational capability – well-defined requirements
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the recommendation, Amazon Q was able to come up with a
    solution using some of the AWS services you would like to use to solve the use
    case.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the sake of a clear solution, let’s assume that with the assistance of
    Amazon Q, we were able to nail down the flow of the solution as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user uploads an image through the web application interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web application sends the uploaded image to an Amazon S3 bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An S3 event notification triggers an AWS Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Lambda function retrieves the uploaded image from the S3 bucket and initiates
    the image processing directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image processing tasks, such as resizing and compression, are performed
    within the Lambda function using libraries such as OpenCV or PIL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the image processing is complete, the Lambda function saves the processed
    image back to the S3 bucket or a designated location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, metadata about the processed image can be stored in a database or
    logging system for monitoring and analytics purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The processed image is now ready for retrieval and display within the web application
    or any other downstream systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following diagram shows the solution architecture for this particular use
    case.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Image processing pipeline – solution architecture](img/B21378_15_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Image processing pipeline – solution architecture
  prefs: []
  type: TYPE_NORMAL
- en: Since we are highlighting features of Amazon Q that would help fast-track building
    solutions on AWS, not all the steps will be covered in detail here. Also, the
    responses you receive from Q may be different from what we are getting, so we
    may not be able to show all the step-by-step instructions in this chapter for
    you to build this use case. The idea here is to show you how you can leverage
    these features of Q for your own use case, and at the end of the process, you
    will be able to quantify how much time Amazon Q saved you in the whole process
    based on all the steps you took, including design, development, building, testing,
    debugging, deployment, and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now understand how the conversational feature of Q was able to help narrow
    the general flow of the solution along with its architecture. Let’s understand
    the next feature of Amazon Q: optimally selecting the correct EC2 instance for
    the use case – something builders often have to decide based on the use case,
    taking into consideration the pros and cons of each such instance.'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the optimal Amazon EC2 instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To host the website, we need to get an Amazon EC2 instance up and running with
    an Apache HTTP server. The next question for the builder would be which EC2 instance
    should they select? Let’s see how Amazon Q can help.
  prefs: []
  type: TYPE_NORMAL
- en: When you go to the EC2 console to launch an EC2 instance, there is now an advisor
    link in the **Instance type** section. The following screenshot shows the **Get**
    **advice** link.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Amazon Q – EC2 instance selection advisor](img/B21378_15_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Amazon Q – EC2 instance selection advisor
  prefs: []
  type: TYPE_NORMAL
- en: For our use case, we need a low-cost EC2 instance for hosting the website. We
    will pick the appropriate use case option, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Amazon Q – EC2 instance selection for web hosting](img/B21378_15_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Amazon Q – EC2 instance selection for web hosting
  prefs: []
  type: TYPE_NORMAL
- en: Based on our criteria, Q responds with optimal EC2 instances that we can start
    with for our use case. Q just helps narrow down the choices; the actual benchmarking
    of cost/performance still needs to be done as part of the process.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the recommended EC2 instances for web hosting,
    keeping costs low.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Amazon Q – EC2 instance type recommendation for web hosting](img/B21378_15_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – Amazon Q – EC2 instance type recommendation for web hosting
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we demonstrated how Amazon Q helped select the correct type
    of EC2 instance based on the use case. The remaining setup to enable a website
    on an EC2 instance can vary depending on how the HTTP server is set up. The web
    server can either be bootstrapped and started when the EC2 instance is being booted
    or, in many cases, an **Amazon Machine Image** (**AMI**) that has all the necessary
    setup is used to start the web server. Implementation details are out of the scope
    of this book as they may vary for individual use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next feature of Amazon Q addresses a topic that frustrates builders the
    most: networking issues. Builders are passionate about building applications.
    When they are ready to test or deploy something, networking issues can strike
    and derail the progress. The most frustrating part about networking is that, often,
    it’s very difficult to know the exact issue just based on the error message. Getting
    to the root cause of the issue requires networking knowledge and troubleshooting
    skills. This process sometimes takes a lot of time.'
  prefs: []
  type: TYPE_NORMAL
- en: To assist with this topic, Amazon Q provides a network troubleshooting feature
    that allows fast resolution of such issues in the AWS Management Console itself.
    Let’s get into the details of this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Network troubleshooting assistance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most times, especially in production environments, all the infrastructure required
    for the project is configured and maintained via IaC. If the developer is tasked
    with setting up the networking themselves, preferably in a dev account, then they
    can start by asking Amazon Q about the steps required to set up networking for
    our use case.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the steps listed by Q for setting up networking
    for a public-facing website.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Amazon Q – networking recommendation for web hosting](img/B21378_15_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.9 – Amazon Q – networking recommendation for web hosting
  prefs: []
  type: TYPE_NORMAL
- en: Once you set up all the networking elements such as a VPC, a subnet, route tables,
    and so forth, you can then verify whether the setup is correct or not. For specific
    network analysis, Amazon Q relies on VPC Reachability Analyzer to provide explanations
    and detailed path analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, Amazon Q’s network troubleshooting feature checked
    whether the VPC we set up can connect to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.10 – Amazon Q – networking recommendation for web hosting](img/B21378_15_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.10 – Amazon Q – networking recommendation for web hosting
  prefs: []
  type: TYPE_NORMAL
- en: The ability of Amazon Q to work in tandem with VPC Reachability Analyzer saves
    countless hours spent trying to troubleshoot what went wrong in the networking
    configuration. Once you fix the issues, you can also confirm whether the desired
    networking state is achieved by asking Amazon Q simple questions.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the following screenshot shows the builder checking whether the
    EC2 instance has connectivity to the internet, and Q will provide the result along
    with the networking path details.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.11 – Amazon Q – internet connection check for web hosting](img/B21378_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.11 – Amazon Q – internet connection check for web hosting
  prefs: []
  type: TYPE_NORMAL
- en: 'We just showed a couple of questions to showcase the capability of Amazon Q;
    however, in real scenarios, you can ask it many more networking questions, such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Can you help me figure out why I can’t connect from the bastion host to my private
    instance in the application subnet?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of my security groups are preventing access to my Amazon Aurora database?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why am I not able to SSH into EC2 instance i-xxxx?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes problems are not easy to solve or there might be some other issues
    with the service you are using. In such instances, you can also use Amazon Q to
    quickly raise a support case with AWS. Let’s quickly look at this aspect.
  prefs: []
  type: TYPE_NORMAL
- en: Chatting with AWS Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If at any point you are not able to troubleshoot an issue, you can ask Amazon
    Q to help you talk to someone in support, by asking Q to engage support directly.
    The following screenshot shows the options provided if you have just a basic support
    plan. When you have premium plans, it will allow you to create a support case
    right from the Q console. A link to different AWS Support plans is provided in
    the *References* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.12 – Amazon Q – support case](img/B21378_15_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.12 – Amazon Q – support case
  prefs: []
  type: TYPE_NORMAL
- en: The other option is to first see if Q can assist with the issue. If the response
    provided by Q does not seem to help, you can also click the thumbs-down icon in
    Q, and it will help you create a support case, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.13 – Amazon Q –support case by clicking the thumbs-down icon](img/B21378_15_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.13 – Amazon Q –support case by clicking the thumbs-down icon
  prefs: []
  type: TYPE_NORMAL
- en: This way, it will also allow you to create a support case from the Q chat itself,
    with the issue context auto-populating support case fields. This saves time as
    you don’t have to leave the screen to fill out a separate support case.
  prefs: []
  type: TYPE_NORMAL
- en: Our use case can now move forward with the next building block. Let’s continue,
    and while solving the next portion of our use case, we will also introduce another
    key feature of Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting console errors with Amazon Q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate the next feature of Amazon Q, let’s move on to the next step
    of the solution, which involves creating a Lambda function. This function will
    be triggered when an image is uploaded to the S3 bucket from the website. The
    Lambda function will utilize an image processing library to resize the image and
    then place it in another S3 bucket. Additionally, the Lambda function will update
    the metadata for the resized image in a database, enabling the website to reference
    it and retrieve the correct image from the S3 bucket to display on certain web
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, we demonstrated how Amazon Q can accelerate AWS Lambda
    code generation. Using the same techniques, you can auto-generate the Lambda function
    logic for this use case as well. The following is a sample Lambda function for
    our use case. It highlights the core image processing part without all the necessary
    additional features. The code is for your reference only and you can use Amazon
    Q to help generate the code on your behalf. The output may vary if we try to regenerate
    it, so care should be taken to validate its correctness:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will set up this Lambda function and add a trigger for invocation whenever
    an object is created in the source S3 bucket. So, every time the website uploads
    an image to this bucket, the “create object” event in S3 will trigger the Lambda
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the Lambda trigger that we added.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.14 – AWS Lambda function – event trigger](img/B21378_15_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.14 – AWS Lambda function – event trigger
  prefs: []
  type: TYPE_NORMAL
- en: During the build lifecycle, builders often spend a significant amount of time
    debugging and fixing issues encountered during testing. Before Amazon Q, builders
    had to do their own research to understand what an error was and how to fix it.
    But now, with Amazon Q, builders can troubleshoot errors directly from the AWS
    Management Console. Let’s explore this feature and understand how we can use it
    to troubleshoot issues for our use case.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Lambda errors with Amazon Q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the AWS Management Console, Amazon Q can diagnose and address errors encountered
    while utilizing AWS services, including instances of insufficient permissions,
    misconfigurations, and exceeding service limits. This functionality is accessible
    for errors occurring within services such as Amazon EC2, Amazon ECS, Amazon S3,
    and AWS Lambda. While Amazon Q can resolve many common console errors, it does
    not handle basic validation errors, and it does not retain a record of previous
    troubleshooting sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s understand how we can use this feature for our use case. Now, to test
    whether our Lambda function is working correctly, we will use the test option
    available in the AWS Lambda console. For the test, we will pre-upload a sample
    image in the source bucket and then execute the following test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This test simply simulates the event message the Lambda function would receive
    when an image is uploaded to the source bucket. The test feature in the Lambda
    console allows builders to verify whether the lambda is working as intended before
    the code is put into production.
  prefs: []
  type: TYPE_NORMAL
- en: When we click the **Test** button in the AWS Lambda console, we immediately
    encounter an error, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.15 – AWS Lambda function – error during test](img/B21378_15_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.15 – AWS Lambda function – error during test
  prefs: []
  type: TYPE_NORMAL
- en: As seen from this error, it appears that the PIL module is not being recognized.
    The **Troubleshoot with Amazon Q** option appears next to the error. When you
    click that option, Amazon Q will first analyze the issue and provide an analysis
    of the issue, as seen in this case in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.16 – Amazon Q – troubleshoot AWS Lambda error](img/B21378_15_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.16 – Amazon Q – troubleshoot AWS Lambda error
  prefs: []
  type: TYPE_NORMAL
- en: When you select the **Help me resolve** option, Amazon Q will provide a possible
    resolution to the problem. This way, builders don’t have to conduct external research
    on how to fix the error. The following screenshot shows the resolution steps for
    our Lambda function error.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.17 – Amazon Q – resolution for AWS Lambda error](img/B21378_15_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.17 – Amazon Q – resolution for AWS Lambda error
  prefs: []
  type: TYPE_NORMAL
- en: So basically, the Python Imaging Library was missing, and Amazon Q suggested
    steps to add it to the Lambda function. At the beginning of this use case, I added
    an important note regarding solutions provided by LLM-based assistants such as
    Amazon Q. The solution offered may vary for different invocations of Amazon Q.
    To demonstrate this point, I closed the resolution window and requested that Q
    troubleshoot the same issue again. This time, Amazon Q came up with a different
    recommendation to solve this problem.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.18 – Amazon Q – resolution for AWS Lambda error – variation 1](img/B21378_15_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.18 – Amazon Q – resolution for AWS Lambda error – variation 1
  prefs: []
  type: TYPE_NORMAL
- en: If I seek another instance of troubleshooting, this time, I receive another
    recommendation to solve the same issue, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.19 – Amazon Q – resolution to AWS Lambda error – variation 2](img/B21378_15_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.19 – Amazon Q – resolution to AWS Lambda error – variation 2
  prefs: []
  type: TYPE_NORMAL
- en: Now, you may wonder why this happened in this case. Firstly, a problem may have
    multiple solutions, and each solution has its own steps. Which solution would
    be the best fit for our problem is up to the builders to try and decide. Not every
    solution may be the best fit, as Amazon Q may not be aware of any external dependencies
    your team or specific implementation of the project may have. Builders need to
    do their due diligence in how they implement the final solution. Amazon Q just
    assists you in narrowing down options that may have taken you longer to research
    on your own.
  prefs: []
  type: TYPE_NORMAL
- en: To keep moving, I adopted the recommendation provided by Amazon Q in *Figure
    15**.14*. To get a quick resolution to the library issue, I added an external
    ARN, `'arn:aws:lambda:us-west-2:770693421928:layer:Klayers-p312-Pillow:1'`, as
    a reference to the PIL library in my Lambda function layer section.
  prefs: []
  type: TYPE_NORMAL
- en: I reran the test to see if that resolved my issue. But, immediately, I encountered
    a different error, as seen in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.20 – Amazon Q – another AWS Lambda error](img/B21378_15_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.20 – Amazon Q – another AWS Lambda error
  prefs: []
  type: TYPE_NORMAL
- en: Looks like the library issue got resolved, but the function timed out. Instead
    of combing through the logs for the reason for this issue, I clicked the **Troubleshoot
    with Amazon Q** button again. The following screenshot shows the analysis of the
    issue along with the resolution provided by Amazon Q.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.21 – Amazon Q – analysis and resolution for the AWS Lambda timeout
    error](img/B21378_15_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.21 – Amazon Q – analysis and resolution for the AWS Lambda timeout
    error
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, simple issues cause frustration and waste time trying to figure out
    the cause. Amazon Q understood the issue and provided exact steps to resolve the
    problem in seconds. This example may be simple but it highlights the productivity
    gains all AWS builders will experience once they start leveraging Amazon Q to
    troubleshoot issues in the AWS Management Console.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after increasing the timeout, the Lambda test was completed successfully,
    and the following screenshot confirms that the image was resized.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.22 – Amazon Q – successful execution of the AWS Lambda function](img/B21378_15_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.22 – Amazon Q – successful execution of the AWS Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: You can check the destination S3 bucket to find a resized image in there.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of our use case; however, another feature of Q can
    help you understand what resources exist in your account. In other words, Amazon
    Q is also aware of the AWS resources that are being used in your accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Awareness of AWS account resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have seen how Amazon Q assists builders in creating
    solutions on AWS by generating architecture patterns, best practices, and also
    code. But what if the builders need assistance with AWS resources that are already
    built in their AWS account and want to know more details about them without having
    to find this information individually? Amazon Q is now not only aware of the AWS
    resources in your account but can also answer questions about costs, helping you
    better understand and create optimization strategies. Let’s quickly look at these
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing resources with Amazon Q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you ask Q to analyze your resources, ensure that IAM permissions are
    granted for the action you are asking Q to perform. For example, if you are asking
    Q to list all S3 buckets in your account, then the `s3:ListAllMyBuckets` IAM permission
    must be granted.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows all the EC2 instances I used for my use case.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.23 – Amazon Q – AWS resource analysis](img/B21378_15_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.23 – Amazon Q – AWS resource analysis
  prefs: []
  type: TYPE_NORMAL
- en: You can ask refined questions to get many such insights into the AWS resources
    that you have provisioned. In the following screenshot, we are checking the encryption
    settings for the bucket we provisioned for our use case in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.24 – Amazon Q – AWS resource setting analysis](img/B21378_15_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.24 – Amazon Q – AWS resource setting analysis
  prefs: []
  type: TYPE_NORMAL
- en: Before we conclude this chapter, we definitely want to know the costs associated
    with the use case. In fact, all teams using AWS for their workloads explore costs
    along with their management to ensure expenses do not proliferate due to unnecessary
    actions. Amazon Q can help with this aspect too.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing costs with Amazon Q
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Q enables seamless cost management by retrieving, explaining, and analyzing
    your cost data, allowing you to understand your expenses.
  prefs: []
  type: TYPE_NORMAL
- en: When you inquire about your costs, Amazon Q provides detailed responses that
    include specific cost figures, associated metrics, time periods, and granular
    details, along with any applied groups or filters. Additionally, it offers a link
    to an AWS Cost Explorer view with the same specifications, enabling you to visualize
    or download the data for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a simple example of asking Q for costs for our EC2 instances
    for a particular month of the year.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.25 – Amazon Q – AWS cost analysis](img/B21378_15_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.25 – Amazon Q – AWS cost analysis
  prefs: []
  type: TYPE_NORMAL
- en: 'For Amazon Q to analyze the costs, AWS Cost Explorer needs to be enabled. After
    that, you can chat with Q and ask any variation of cost exploration questions,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How much did we spend on EC2 in 2024?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What were my EC2 costs by instance types for the past 6 months?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which linked accounts spent the most on Redshift last month?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This brings us to the end of the chapter; however, we are just scratching the
    surface in terms of what Amazon Q can do. With generative AI rapidly evolving,
    expect many more new features and capabilities in Amazon Q pertaining to solving
    use cases in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how Amazon Q can assist in building solutions on
    AWS. Amazon Q helps with many aspects of the build process, including providing
    architecture patterns and best practices, diagnosing AWS console errors, troubleshooting
    networking issues, creating support cases, and understanding all provisioned AWS
    resources along with their costs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we will look at another key aspect for DevOps
    builders and how Amazon Q can help fast-track many aspects of it.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS support plans: [https://aws.amazon.com/premiumsupport/plans/](https://aws.amazon.com/premiumsupport/plans/)'
  prefs: []
  type: TYPE_NORMAL
