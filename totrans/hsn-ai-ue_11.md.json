["```py\n UPROPERTY(EditAnywhere, Category = Blackboard)\n  FBlackboardKeySelector CanSeePlayerKey;\n\n  UPROPERTY(EditAnywhere, Category = Blackboard)\n  FBlackboardKeySelector PlayerKey;\n\n  UPROPERTY(EditAnywhere, Category = Blackboard)\n  FBlackboardKeySelector LastKnownPositionKey;\n\nprivate:\n\n  bool bLastCanSeePlayer;\n```", "```py\n  UPROPERTY(EditAnywhere, Category = PlayerClass)\n  TSubclassOf<AActor> PlayerClass;\n```", "```py\nprotected:\n\n  virtual void OnBecomeRelevant(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) override;\n\n  virtual void TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds) override;\n```", "```py\n UBTService_UpdateChasing(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get());\n```", "```py\nUBTService_UpdateChasing::UBTService_UpdateChasing(const FObjectInitializer& ObjectInitializer)\n  : Super(ObjectInitializer)\n{\n bNotifyBecomeRelevant = true;\n bNotifyCeaseRelevant = false;\n}\n```", "```py\nvoid UBTService_UpdateChasing::OnBecomeRelevant(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n //Get Blackboard Component\n UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n if (BlackboardComp == NULL)\n {\n return;\n }\n\n *//[REST OF THE CODE]* \n}\n```", "```py\nvoid UBTService_UpdateChasing::OnBecomeRelevant(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n  //Get Blackboard Component\n  UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n  if (BlackboardComp == NULL)\n  {\n    return;\n  }\n\n //Retrieve Player and Update the Blackboard\n TArray<AActor*> FoundActors;\n UGameplayStatics::GetAllActorsOfClass(GetWorld(), PlayerClass, FoundActors);\n\n *//[REST OF THE CODE]* \n}\n```", "```py\nvoid UBTService_UpdateChasing::OnBecomeRelevant(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n  //Get Blackboard Component\n  UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n  if (BlackboardComp == NULL)\n  {\n    return;\n  }\n\n  //Retrieve Player and Update the Blackboard\n  TArray<AActor*> FoundActors;\n  UGameplayStatics::GetAllActorsOfClass(GetWorld(), PlayerClass, FoundActors);\n if (FoundActors[0]) {\n BlackboardComp->SetValueAsObject(PlayerKey.SelectedKeyName, FoundActors[0]);\n }\n}\n```", "```py\nvoid UBTService_UpdateChasing::OnBecomeRelevant(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory)\n{\n\n  //Get Blackboard Component\n  UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n  if (BlackboardComp == NULL)\n  {\n    return;\n  }\n\n if (!PlayerKey.IsSet()) {\n    //Retrieve Player and Update the Blackboard\n    TArray<AActor*> FoundActors;\n    UGameplayStatics::GetAllActorsOfClass(GetWorld(), PlayerClass, FoundActors);\n    if (FoundActors[0]) {\n      UE_LOG(LogTemp, Warning, TEXT(\"Found Player\"));\n      BlackboardComp->SetValueAsObject(PlayerKey.SelectedKeyName, FoundActors[0]);\n    }\n }\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n //Get Blackboard Component\n UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n if (BlackboardComp == NULL)\n {\n return;\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n *//[PREVIOUS CODE]*\n\n //Get AI Controller\n AAIController* AIController = OwnerComp.GetAIOwner();\n if (!AIController) {\n return;\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n *//[PREVIOUS CODE]*\n\n //Get ChasingAIController (the controller we have created in the previous chapter)\n AChasingAIController* ChasingController = Cast<AChasingAIController>(AIController);\n if (!ChasingController) {\n return;\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n *//[PREVIOUS CODE]*\n\n //Update the Blackboard with the current value of CanSeePlayer from the Chasing Controller\n BlackboardComp->SetValueAsBool(CanSeePlayerKey.SelectedKeyName, ChasingController->bCanSeePlayer);\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n *//[PREVIOUS CODE]*\n\n //If the LastCanSeePlayer is different from the current one, then update the LastKnownPlayerPosition\n if (ChasingController->bCanSeePlayer != bLastCanSeePlayer) {\n BlackboardComp->SetValueAsVector(LastKnownPositionKey.SelectedKeyName, ChasingController->LastKnownPlayerPosition);\n }\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n *//[PREVIOUS CODE]*\n\n //Update the LastCanSeePlayer with the current CanSeePlayer\n bLastCanSeePlayer = ChasingController->bCanSeePlayer;\n\n *//[REST OF THE CODE]*\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n *//[PREVIOUS CODE]*\n\n //Call to the parent TickNode\n Super::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n}\n```", "```py\nvoid UBTService_UpdateChasing::TickNode(UBehaviorTreeComponent & OwnerComp, uint8 * NodeMemory, float DeltaSeconds)\n{\n\n  //Get Blackboard Component\n  UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n  if (BlackboardComp == NULL)\n  {\n    return;\n  }\n\n  //Get AI Controller\n  AAIController* AIController = OwnerComp.GetAIOwner();\n  if (!AIController) {\n    return;\n  }\n\n  //Get ChasingAIController (the controller we have created in the previous chapter)\n  AChasingAIController* ChasingController = Cast<AChasingAIController>(AIController);\n  if (!ChasingController) {\n    return;\n  }\n\n  //Update the Blackboard with the current value of CanSeePlayer from the Chasing Controller\n  BlackboardComp->SetValueAsBool(CanSeePlayerKey.SelectedKeyName, ChasingController->bCanSeePlayer);\n\n  //If the LastCanSeePlayer is different from the current one, then update the LastKnownPlayerPosition\n  if (ChasingController->bCanSeePlayer != bLastCanSeePlayer) {\n    BlackboardComp->SetValueAsVector(LastKnownPositionKey.SelectedKeyName, ChasingController->LastKnownPlayerPosition);\n  }\n\n  //Update the LastCanSeePlayer with the current CanSeePlayer\n  bLastCanSeePlayer = ChasingController->bCanSeePlayer;\n\n  //Call to the parent TickNode\n  Super::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n}\n```", "```py\nprotected:\n\n virtual FString GetStaticDescription() const override;\n```", "```py\nFString UBTService_UpdateChasing::GetStaticDescription() const\n{\n  return FString::Printf(TEXT(\"%s: '%s'\"), TEXT(\"Player Class\"), PlayerClass ? *PlayerClass->GetName() : TEXT(\"\"))\n    .Append(FString::Printf(TEXT(\"\\n%s: '%s'\"), TEXT(\"PlayerKey\"), PlayerKey.IsSet() ? *PlayerKey.SelectedKeyName.ToString() : TEXT(\"\")))\n    .Append(FString::Printf(TEXT(\"\\n%s: '%s'\"), TEXT(\"LastKnownPositionKey\"), LastKnownPositionKey.IsSet() ? *LastKnownPositionKey.SelectedKeyName.ToString() : TEXT(\"\")))\n    .Append(FString::Printf(TEXT(\"\\n%s: '%s'\"), TEXT(\"CanSeePlayerKey\"), CanSeePlayerKey.IsSet() ? *CanSeePlayerKey.SelectedKeyName.ToString() : TEXT(\"\")));\n}\n```"]