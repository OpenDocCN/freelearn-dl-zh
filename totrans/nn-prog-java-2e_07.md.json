["```py\npublic double DBIndex(){\n  int numberOfClusters = this.neuralNet.getNumberOfOutputs();\n  double sum=0.0;\n  for(int i=0;i<numberOfClusters;i++){\n    double[] index = new double[numberOfClusters];\n    for(int j=0;j<numberOfClusters;j++){\n      if(i!=j){\n        //calculate the average distance for cluster i\n        Double Sigmai=averageDistance(i,trainingDataSet);\n        Double Sigmaj=averageDistance(j,trainingDataSet);\n        Double[] Centeri=neuralNet.getOutputLayer().getNeuron(i).getWeights();\n        Double[] Centerj=neuralNet.getOutputLayer().getNeuron(j).getWeights();\n        Double distance = getDistance(Centeri,Centerj);\n        index[j]=((Sigmai+Sigmaj)/distance);\n      }\n    }\n    sum+=ArrayOperations.max(index);\n  }\n  return sum/numberOfClusters;\n}\n\npublic double Dunn(){\n  int numberOfClusters = this.neuralNet.getNumberOfOutputs();\n  ArrayList<double> interclusterDistance;\n  for(int i=0;i<numberOfClusters;i++){\n    for(int j=i+1;j<numberOfClusters;j++){\n      interClusterDistance.add(minInterClusterDistance (i,j,trainingDataSet);\n    }\n  }\n  ArrayList<double> intraclusterDistance;\n  for(int k=0;k<numberOfClusters;k++){\n    intraclusterDistance.add(maxIntraClusterDistance(k, trainingDataSet);\n  }\n  return ArrayOperations.Min(interclusterDistance)/ ArrayOperations.Max(intraclusterDistance);\n}\n```", "```py\n// enter neural net parameter via keyboard (omitted)\n\n// load dataset from external file (omitted)\n\n// data normalization (omitted)\n\n// create ANN and define parameters to TRAIN:\nCompetitiveLearning cl = new CompetitiveLearning(kn1, neuralDataSetToTrain, LearningAlgorithm.LearningMode.ONLINE);\n  cl.show2DData=false;\n  cl.printTraining=false;\n  cl.setLearningRate( typedLearningRate );\n  cl.setMaxEpochs( typedEpochs );\n  cl.setReferenceEpoch( 200 );\n  cl.setTestingDataSet(neuralDataSetToTest);\n\n// train ANN\ntry {\nSystem.out.println(\"Training neural net... Please, wait...\");\n  cl.train();\n  System.out.println(\"Winner neurons (clustering result [TRAIN]):\");\n  System.out.println( Arrays.toString( cl.getIndexWinnerNeuronTrain() ) );\n\n} catch (NeuralException ne) {\n  ne.printStackTrace();\n}\n```"]