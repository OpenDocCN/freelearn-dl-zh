- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Introducing the Unreal Engine AI System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍虚幻引擎AI系统
- en: Welcome to the exciting world of AI programming with Unreal Engine! In this
    chapter, I’ll be introducing you to Unreal Engine’s powerful tools that will bring
    life and intelligence to your virtual worlds. By exploring various aspects of
    the Unreal Engine AI system, such as moving agents using the **Navigation System**
    , implementing semi-intelligent behaviors through **behavior trees** and **Blackboards**
    , and incorporating features such as smart objects and **mass entities** , you
    will gain a comprehensive understanding of the remarkable capabilities offered
    by this robust framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到使用虚幻引擎进行AI编程的激动人心的世界！在本章中，我将向您介绍虚幻引擎的强大工具，这些工具将为您的虚拟世界带来生命和智能。通过探索虚幻引擎AI系统的各个方面，例如使用**导航系统**移动代理、通过**行为树**和**黑板**实现半智能行为，以及整合智能对象和**大量实体**等功能，您将全面了解这个强大框架提供的卓越能力。
- en: Mastering these skills will elevate you to the ranks of elite game programmers
    – and who wouldn’t want to be one of those?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握这些技能将使你跻身精英游戏程序员的行列——谁不想成为其中的一员呢？
- en: By the end of this chapter, you will have a sharp vision of what can be accomplished
    using the Unreal Engine AI system, empowering you to create advanced AI pawns
    in your projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将清晰地了解使用虚幻引擎AI系统可以完成什么，这将赋予你在项目中创建高级AI角色的能力。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting to know the Unreal Engine Gameplay Framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解虚幻引擎游戏框架
- en: Presenting the Unreal Engine AI system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示虚幻引擎AI系统
- en: Understanding advanced AI features
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解高级AI功能
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are no technical requirements to follow for this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求需要遵循。
- en: Getting to know the Unreal Engine Gameplay Framework
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解虚幻引擎游戏框架
- en: As you may already know, Unreal Engine provides an out-of-the-box system called
    **Gameplay Framework** ( **GF** ) that includes many features necessary for developing
    a game; this spans from having an advanced input system to common entry points
    that will allow you to easily access data or game state.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经知道，虚幻引擎提供了一个现成的系统，称为**游戏框架**（**GF**），它包含了许多开发游戏所需的功能；这包括从拥有先进的输入系统到常见的入口点，这些入口点将允许您轻松访问数据或游戏状态。
- en: 'Here are some key points explaining why the GF is so important:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关键点，解释为什么GF如此重要：
- en: '**Structure and organization** : The GF provides a structured and organized
    approach to developing games. It offers a collection of systems, classes, and
    interfaces that work together to create the core structure of a game.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构和组织**：GF提供了一种结构化和组织化的游戏开发方法。它提供了一套系统、类和接口，它们协同工作以创建游戏的核心结构。'
- en: '**Game logic and progression** : This framework includes predefined concepts
    that help define the logic, progression, and organization of a game.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏逻辑和进度**：该框架包含预定义的概念，有助于定义游戏的逻辑、进度和组织结构。'
- en: '**Player and AI control** : The GF includes systems for handling player input
    and decision-making for characters within the game world. This encompasses player
    and AI control, which are essential for creating interactive and immersive gaming
    experiences.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**玩家和AI控制**：GF包括处理玩家输入和游戏世界中角色决策的系统。这包括玩家和AI控制，这对于创建交互性和沉浸式游戏体验至关重要。'
- en: '**Utility functions** : The framework provides a library of utility functions
    that assist with common gameplay operations and interactions. These functions
    can streamline gameplay logic and enhance efficiency in implementing various functionalities.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实用函数**：该框架提供了一组实用函数库，这些函数有助于处理常见的游戏操作和交互。这些函数可以简化游戏逻辑，并提高实现各种功能的效率。'
- en: '**Flexibility and integration** : The GF is highly flexible and integrates
    deeply with the Unreal Engine. It uses common game programming patterns and performs
    heavy lifting, allowing developers to focus on building their games rather than
    creating their own game framework.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性和集成**：GF非常灵活，与虚幻引擎深度集成。它使用常见的游戏编程模式，并执行大量工作，使开发者能够专注于构建游戏，而不是创建自己的游戏框架。'
- en: As a personal reflection, I have found that using and comprehending the GF over
    the years has significantly enhanced my overall understanding of game programming
    best practices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为个人反思，我发现多年来使用和理解GF显著提高了我对游戏编程最佳实践的总体理解。
- en: Quite obviously, managing an AI system is also part of the GF job, so, in the
    next subsections, I will provide you with a concise introduction to the key AI
    features available in the GF, enabling you to be prepared for their use.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，管理AI系统也是GF工作的一部分，因此，在接下来的小节中，我将为您提供一个关于GF中可用的关键AI功能的简要介绍，使您能够为使用它们做好准备。
- en: Actors and components
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演员（Actors）和组件（components）
- en: I’m pretty sure you’re already familiar with **actors** and **components** in
    Unreal Engine, but just in case, let’s do a quick refresher on both of them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我很确定您已经熟悉Unreal Engine中的**演员**和**组件**，但以防万一，让我们对这两个概念进行快速复习。
- en: In Unreal Engine, an **Actor** class refers to any entity that can be placed
    within a level, whether it’s a camera, a static mesh, or the player’s character.
    An actor can undergo transformations such as translation, rotation, and scaling.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unreal Engine中，**Actor**类指的是可以放置在关卡中的任何实体，无论是摄像机、静态网格还是玩家的角色。演员可以经历变换，如平移、旋转和缩放。
- en: 'Actors serve as containers for specialized classes known as **components**
    that play various roles in controlling a movement, rendering, and more. There
    are three types of components that serve different purposes within an actor:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 演员充当着称为**组件**的专用类的容器，这些组件在控制移动、渲染等方面发挥着各种作用。在演员内部有三种类型的组件，它们各自发挥着不同的作用：
- en: '**Actor components** : These primarily contain code logic for an actor. They
    handle various functionalities and interactions without any visual representation.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**演员组件**（Actor components）: 这些主要包含演员的代码逻辑。它们处理各种功能和交互，但没有任何视觉表示。'
- en: '**Scene components** : These are used to position and orient other components
    within the actor. They serve as reference points for transformations such as translation,
    rotation, and scaling but do not have any visible presence and are mainly used
    for organizational purposes.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景组件**（Scene components）: 这些用于在演员内定位和定位其他组件。它们作为变换（如平移、旋转和缩放）的参考点，但没有任何可见的存在，主要用于组织目的。'
- en: '**Primitive components** : These are responsible for the visual representation
    of an actor within a level. They can be rendered and interacted with by players
    or other objects.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原始组件**（Primitive components）: 这些负责在关卡内表示演员的视觉表现。它们可以被玩家或其他对象渲染和交互。'
- en: By combining these components, a game developer can create complex and interactive
    actors with both functional and visual aspects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合这些组件，游戏开发者可以创建具有功能和视觉方面的复杂和交互式演员。
- en: Main GF elements
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要GF元素（Main GF elements）
- en: The Unreal Engine GF is a comprehensive collection of classes that serves as
    a modular foundation for constructing gameplay experiences. Within this framework,
    game developers have the freedom to handpick specific elements that best suit
    the game, while being assured that these classes are intricately designed to seamlessly
    work together and enhance one another.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine的GF是一个综合性的类集合，它作为构建游戏体验的模块化基础。在这个框架中，游戏开发者可以自由选择最适合游戏的特定元素，同时确保这些类被精心设计，可以无缝协作并相互增强。
- en: In the upcoming subsections, we will present the main elements involved to have
    a clear view of how things work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的小节中，我们将介绍涉及的主要元素，以便您对事物的工作原理有一个清晰的了解。
- en: GameInstance
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游戏实例（GameInstance）
- en: The **GameInstance** class serves as a manager that operates behind the scenes
    (i.e., it is not an Unreal Engine actor); a single instance is created when the
    engine launches and the instance remains active until the engine shuts down. Its
    primary purpose is to track data and execute code as needed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**GameInstance**类充当后台操作的管理器（即，它不是一个Unreal Engine演员）；当引擎启动时创建一个实例，并且实例在引擎关闭前保持活动状态。其主要目的是跟踪数据和按需执行代码。'
- en: A game instance provides a handy central hub for managing persistent data, such
    as save game systems, and acts as a manager for other subsystems, offering convenient
    control over the flow of your game.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏实例提供了一个方便的中心枢纽，用于管理持久数据，例如保存游戏系统，并作为其他子系统的管理器，提供对游戏流程的便捷控制。
- en: GameMode
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游戏模式（GameMode）
- en: Different from the **GameInstance** class, the **GameModeBase** or its direct
    descendant, **GameMode** , instance only exists in a single level and is created
    right after the level itself has been loaded and the world has been constructed.
    This class serves as a manager to handle a gameplay session, and each level can
    have its own different game mode logic. Its main role is to create the remaining
    framework actors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与 **GameInstance** 类不同，**GameModeBase** 或其直接后代 **GameMode** 实例仅在单个关卡中存在，并在关卡本身加载和世界构建后立即创建。这个类作为管理器来处理游戏会话，每个关卡都可以有自己的不同游戏模式逻辑。其主要作用是创建剩余的框架角色。
- en: GameState and PlayerState
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GameState 和 PlayerState
- en: '**GameState** and **PlayerState** are specialized actors that play a key role
    in tracking the state of the game and the players involved. The game state is
    responsible for storing and handling data pertinent to all players in a game,
    while the player state focuses on a specific player. Given their inherent characteristics,
    these classes find their primary application in multiplayer games, regardless
    of whether they are played online or locally.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**GameState** 和 **PlayerState** 是专门的角色，在跟踪游戏状态和参与玩家的状态中扮演着关键角色。游戏状态负责存储和处理游戏中所有玩家相关的数据，而玩家状态则专注于特定玩家。鉴于它们固有的特性，这些类在多人游戏中找到其主要应用，无论这些游戏是在线上还是本地进行。'
- en: Pawn and Character
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物品和角色
- en: A **pawn** refers to the base class of all actors that can be controlled by
    players or AI entities within the game world. It serves as the physical representation
    of an entity, handling its involvement within the game world, including collisions
    and other physical interactions. It is also usually used to determine the visual
    appearance of an entity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**pawn** 指的是所有可以在游戏世界中由玩家或AI实体控制的角色的基类。它作为实体的物理表示，处理其实体在游戏世界中的参与，包括碰撞和其他物理交互。它还通常用于确定实体的视觉外观。'
- en: The **Pawn** class gains additional functionality through the more advanced
    **Character** class. The character class is specifically designed to represent
    players in a vertically oriented manner, enabling them to perform a wide range
    of actions such as walking, running, jumping, and swimming within a level. As
    a side note, the character class incorporates essential features for multiplayer
    handling.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pawn** 类通过更高级的 **Character** 类获得了额外的功能。角色类专门设计用来以垂直方式表示玩家，使他们能够在关卡内执行广泛的动作，如行走、奔跑、跳跃和游泳。顺便提一下，角色类还包含了用于多人处理的基本功能。'
- en: Controller
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器
- en: The **Controller** class is responsible for governing the logic that determines
    a player’s actions within the game world. Two widely used types of controller
    classes are **PlayerController** and **AIController** ; the second option is something
    we eagerly anticipate, for obvious reasons.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Controller** 类负责管理决定玩家在游戏世界中行为的逻辑。两种广泛使用的控制器类是 **PlayerController** 和 **AIController**；第二个选项是我们热切期待的，原因很明显。'
- en: The player controller class acts as a managerial entity, capable of processing
    input from a human player, enabling interaction with the game environment and
    facilitating their overall gameplay experience. On the other hand, the AI controller
    governs the actions of an AI entity by using behavior trees, state trees, navigation,
    and more.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家控制器类作为一个管理实体，能够处理来自人类玩家的输入，使他们能够与游戏环境互动，并促进他们的整体游戏体验。另一方面，AI控制器通过使用行为树、状态树、导航等来管理AI实体的行为。
- en: The player controller and the AI controller classes can manage a character or
    a pawn by possessing them at runtime.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家控制器和AI控制器类可以在运行时通过拥有角色或pawn来管理它们。
- en: GameplayStatics
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GameplayStatics
- en: Unreal Engine provides a really helpful function library called **GameplayStatics**
    , which provides various utility functions for gameplay-related tasks. These functions
    can be used to perform common gameplay operations and interactions within the
    engine.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 提供了一个非常有用的函数库，称为 **GameplayStatics**，它为游戏相关的任务提供了各种实用函数。这些函数可以用于在引擎内执行常见的游戏操作和交互。
- en: Some examples of these functions are spawning and destroying actors, retrieving
    information about the game world, managing gameplay tags, manipulating game instances,
    and more. These functions can be accessed and used from both Blueprint visual
    scripting and C++ programming and can streamline gameplay logic and serve as a
    valuable tool for managing and manipulating game elements during runtime.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数的一些例子包括生成和销毁演员、检索有关游戏世界的信息、管理游戏标签、操作游戏实例等。这些函数可以从蓝图可视化脚本和C++编程中访问和使用，可以简化游戏逻辑，并在运行时作为管理和操作游戏元素的有价值工具。
- en: 'Now that I have dished out some Unreal Engine GF knowledge, get ready for the
    juiciest part (at least in the context of this book): how AI dives into the intricate
    workings of the engine, equipping you with the knowledge to embark on the marvelous
    journey of crafting your own game logics!'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经分享了一些虚幻引擎GF知识，准备好进入本书中最精彩的部分（至少在这个书的背景下）：AI如何深入引擎的复杂运作，为你提供踏上创造自己游戏逻辑的奇妙旅程的知识！
- en: Presenting the Unreal Engine AI system
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示虚幻引擎AI系统
- en: Given the power of the previously described framework at your disposal, it should
    come as no surprise that Unreal Engine provides a comprehensive and robust AI
    system.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到您可利用的先前描述框架的强大功能，虚幻引擎提供全面且强大的AI系统可能不会令人惊讶。
- en: In this section, we will show the comprehensive array of tools available for
    Unreal Engine AI programmers along with a short description of their main features.
    To begin, let us examine the Navigation System and its functionality.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示可用于虚幻引擎AI程序员的工具全面系列，以及它们主要功能的简要描述。首先，让我们检查导航系统及其功能。
- en: Navigation System
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航系统
- en: The Unreal Engine **Navigation System** allows for AI entities, called **agents**
    , to move on a level by using pathfinding algorithms.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虚幻引擎**导航系统**允许AI实体，称为**代理**，通过路径查找算法在关卡中移动。
- en: The Navigation System will create a **nav mesh** derived from the geometry present
    within the level by using collisions. This mesh is subsequently divided into tiles,
    which are further partitioned into polygons, thereby forming a graph. Agents within
    the system use this graph to navigate toward their intended destinations. Polygons
    have a designated cost, which helps agents determine the most optimal path based
    on the lowest overall cost. Also, the Navigation System includes a range of components
    and settings that can be adjusted to modify the nav mesh generation process. These
    modifications can include alterations to the costs of polygons, influencing the
    navigation behavior of agents within the level. Finally, the system allows for
    the connection of non-contiguous areas within the nav mesh, such as platforms
    and bridges, thereby facilitating seamless navigation across these spatial elements.
    *Figure 2* *.1* shows a level available in the **Content Examples** project freely
    available on the Epic Games Launcher; the green area is the nav mesh and the character
    on the left is the AI agent.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 导航系统将通过使用碰撞来从关卡中现有的几何形状创建一个**导航网格**。这个网格随后被分割成瓦片，这些瓦片进一步被分割成多边形，从而形成一个图。系统内的代理使用这个图来导航到它们的目标地点。多边形有一个指定的成本，这有助于代理根据最低的总成本确定最优化路径。此外，导航系统包括一系列可调整的组件和设置，可以修改导航网格生成过程。这些修改可能包括对多边形成本的调整，影响关卡内代理的导航行为。最后，系统允许连接导航网格中的非连续区域，例如平台和桥梁，从而在这些空间元素之间实现无缝导航。*图2.1*
    *.1* 展示了在Epic Games Launcher上免费提供的**内容示例**项目中的一个关卡；绿色区域是导航网格，左侧的角色是AI代理。
- en: '![Figure 2.1 – Navigation System](img/B31016_02_1.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 导航系统](img/B31016_02_1.jpg)'
- en: Figure 2.1 – Navigation System
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 导航系统
- en: '*Part 2* of this book will be devoted to understanding the Unreal Navigation
    System and how to optimize and debug it.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本书*第2部分*将致力于理解虚幻引擎导航系统以及如何对其进行优化和调试。
- en: Behavior trees
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行为树
- en: In Unreal Engine, behavior trees serve as a valuable tool for creating AI for
    NPCs in your games. The primary function of a behavior tree asset is to execute
    branches containing logical instructions. In Unreal Engine, behavior trees are
    created in a pretty similar way to Blueprints – this means you will be using some
    kind of visual scripting method – where a sequence of nodes with specific functionality
    attached to them is added and connected to form a behavior tree graph.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unreal Engine中，行为树是创建游戏中NPC AI的有价值工具。行为树资产的主要功能是执行包含逻辑指令的分支。在Unreal Engine中，行为树以与蓝图非常相似的方式创建——这意味着您将使用某种类型的可视化脚本方法——在这里，将具有特定功能附加的节点序列添加并连接起来，形成一个行为树图。
- en: '*Figure 2* *.2* depicts a portion of a behavior tree from the **Lyra Starter
    Game** project available on the Epic Games Launcher:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.2*描绘了来自Epic Games Launcher上可用的**Lyra入门游戏**项目的一部分行为树：'
- en: '![Figure 2.2 – Behavior tree example](img/B31016_02_2.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – 行为树示例](img/B31016_02_2.jpg)'
- en: Figure 2.2 – Behavior tree example
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 行为树示例
- en: 'To determine which branches should be executed, the behavior tree relies on
    another asset known as a Blackboard, which acts as the *brain* for the behavior
    tree itself. *Figure 2* *.3* shows the Blackboard corresponding to the previous
    behavior tree:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定哪些分支应该执行，行为树依赖于另一个称为黑板的资产，它作为行为树本身的*大脑*。*图2.3*显示了与之前行为树相对应的黑板：
- en: '![Figure 2.3 – Blackboard example](img/B31016_02_3.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3 – 黑板示例](img/B31016_02_3.jpg)'
- en: Figure 2.3 – Blackboard example
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – 黑板示例
- en: Behavior trees and Blackboards are pretty important in AI game programming;
    that’s why I have dedicated *Part 3* of this book to this topic.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 行为树和黑板在AI游戏编程中非常重要；这就是为什么我将本书的*第3部分*专门用于这个主题。
- en: Mass Entity
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量实体
- en: The **Mass Entity** system is a gameplay-focused framework for data-oriented
    calculations and provides a paradigm for staging elements with behavior in the
    game; it is designed to handle large numbers of **entities** and facilitate behavior
    controls for both skeletal and static meshes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**质量实体**系统是一个以游戏玩法为中心的计算框架，为游戏中的行为元素提供了一种范式；它旨在处理大量**实体**并便于对骨骼和静态网格进行行为控制。'
- en: '*Figure 2* *.4* shows a screenshot from the **City Sample** project – available
    on the Epic Games Launcher – that makes use of Mass Entity for both crowd and
    traffic control:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.4* 显示了来自**城市样本**项目（可在Epic Games Launcher上获取）的屏幕截图，该项目利用质量实体进行人群和交通控制：'
- en: '![Figure 2.4 – Mass Entity in action](img/B31016_02_4.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4 – 质量实体应用](img/B31016_02_4.jpg)'
- en: Figure 2.4 – Mass Entity in action
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 质量实体应用
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, Mass Entity is still marked as experimental;
    consequently, it should be used cautiously as things may break or change as time
    goes by.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，质量实体仍被标记为实验性；因此，应谨慎使用，因为随着时间的推移，事物可能会出现故障或发生变化。
- en: Mass Entity will be presented in *Part 4* of this book.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本书*第4部分*将介绍质量实体。
- en: State tree
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态树
- en: 'A **state tree** is a versatile hierarchical state machine that integrates
    some features from behavior trees with some others from state machines. With this
    system – organized in a tree structure – developers will be able to create highly
    performant logic that remains structured and adaptable. *Figure 2* *.5* shows
    a state tree from the aforementioned **City** **Sample** project:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态树**是一种多功能的分层状态机，它将行为树的一些功能与状态机的一些功能相结合。使用这个系统（以树状结构组织）开发者将能够创建高度可执行的逻辑，同时保持结构化和适应性。*图2.5*显示了上述**城市****样本**项目中的状态树：'
- en: '![Figure 2.5 – State tree example](img/B31016_02_5.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5 – 状态树示例](img/B31016_02_5.jpg)'
- en: Figure 2.5 – State tree example
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 状态树示例
- en: I’ll be showing you how state trees work in *Part 4* of this book.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本书的*第4部分*中向您展示状态树是如何工作的。
- en: Smart objects
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能对象
- en: 'In Unreal Engine, **smart objects** represent a set of activities in the level
    that can be used through a reservation system that ensures that only one AI agent
    can use a smart object at a time, preventing other agents from using it until
    it becomes available again. These objects are placed on a level and can be interacted
    with by AI agents and players. Smart objects contain all the information needed
    for these interactions and can be queried at runtime using dedicated filters.
    *Figure 2* *.6* shows a smart object asset from the **City** **Sample** project:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unreal Engine 中，**智能对象**代表可以在级别中通过预留系统使用的一组活动，该系统确保一次只有一个 AI 代理可以使用智能对象，防止其他代理使用它，直到它再次可用。这些对象放置在级别上，可以被
    AI 代理和玩家交互。智能对象包含进行这些交互所需的所有信息，并且可以在运行时使用专用过滤器查询。*图 2.6*显示了来自**City Sample**项目的智能对象资产：
- en: '![Figure 2.6 – Smart object example](img/B31016_02_6.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 智能对象示例](img/B31016_02_6.jpg)'
- en: Figure 2.6 – Smart object example
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 智能对象示例
- en: Smart objects will be presented in *Part 4* of this book.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 智能对象将在本书的*第 4 部分*中介绍。
- en: Environment Query System
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境查询系统
- en: The **Environment Query System** ( **EQS** ) collects data from the environment,
    enabling AIs to inquire about the data using various tests. This process results
    in selecting an item that best matches the question posed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境查询系统**（**EQS**）从环境中收集数据，使 AI 能够通过各种测试来查询数据。这个过程导致选择一个与提出的问题最匹配的项目。'
- en: Queries can be called from a behavior tree and used to make decisions on how
    to proceed based on the results of the executed tests. *Figure 2* *.7* depicts
    an environment query from the **Lyra Starter** **Game** project.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 查询可以从行为树中调用，并用于根据执行测试的结果做出如何继续的决定。*图 2.7*展示了来自**Lyra Starter Game**项目的环境查询。
- en: '![Figure 2.7 – An environment query example](img/B31016_02_7.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 环境查询示例](img/B31016_02_7.jpg)'
- en: Figure 2.7 – An environment query example
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 环境查询示例
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, the EQS is still marked as experimental so
    you should use it cautiously as things may break or change as development goes
    on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，EQS 仍被标记为实验性，因此您应谨慎使用，因为随着开发进程的进行，事物可能会出错或改变。
- en: I will be presenting you EQS by the end of *Part 4* of this book, just after
    you have gained a solid understanding of how behavior trees work.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本书*第 4 部分*的末尾向您介绍 EQS，就在您对行为树的工作原理有了扎实理解之后。
- en: AI Perception System
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI 感知系统
- en: The **AI Perception System** provides another way for pawns to receive data
    from the environment, such as where noises are coming from or if the AI sees something.
    It allows for the generation of awareness for AI by providing sensory data for
    it. The system allows data sources to create stimuli so that data listeners can
    be periodically updated about them. This system is used to enable AI sensing within
    games and can react to an array of customizable sensors.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**AI 感知系统**为 pawns 提供了从环境中接收数据的另一种方式，例如声音从哪里传来或 AI 是否看到了什么。它通过为 AI 提供感官数据来允许
    AI 产生意识。该系统允许数据源创建刺激，以便数据监听器可以定期更新它们。该系统用于在游戏中启用 AI 感知，并可以响应一系列可定制的传感器。'
- en: '*Figure 2* *.8* shows a character from the **Lyra Starter Game** with a stimuli
    source component attached:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.8*显示了一个带有刺激源组件的**Lyra Starter Game**中的角色：'
- en: '![Figure 2.8 – AI perception example](img/B31016_02_8.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – AI 感知示例](img/B31016_02_8.jpg)'
- en: Figure 2.8 – AI perception example
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – AI 感知示例
- en: AI Perception will be presented along with behavior trees in *Part 4* of this
    book to make your AI characters aware of their surroundings.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本书*第 4 部分*将介绍 AI 感知，以及行为树，使您的 AI 角色能够意识到其周围的环境。
- en: AI debugging
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI 调试
- en: No serious framework would be complete without a debugging system. **Debugging**
    is an essential aspect of software development, allowing developers to identify
    and fix errors or bugs in their code. It plays a crucial role in ensuring the
    reliability and functionality of the framework.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一个严肃的框架会没有调试系统。**调试**是软件开发的一个基本方面，允许开发者识别和修复其代码中的错误或缺陷。它在确保框架的可靠性和功能方面发挥着关键作用。
- en: That’s why Unreal Engine offers a full arsenal of tools and features to assist
    developers in debugging AI, including visual debugging tools, behavior tree visualization,
    and AI simulation modes. These tools allow developers to inspect and modify AI
    behavior in real time, identify issues such as pathfinding errors or erratic decision-making,
    and make necessary adjustments to improve the overall AI performance within the
    game environment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，虚幻引擎提供了一套完整的工具和功能，以帮助开发者调试AI，包括可视化调试工具、行为树可视化以及AI模拟模式。这些工具允许开发者实时检查和修改AI行为，识别诸如路径查找错误或决策异常等问题，并在游戏环境中对AI性能进行必要的调整。
- en: '*Figure 2* *.9* shows the **City Sample** project in action with the AI debugging
    tools enabled:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.9* 显示了启用AI调试工具时的**城市样本**项目操作：'
- en: '![Figure 2.9 – The debugging tools enabled in a level](img/B31016_02_9.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图2.9 – 在关卡中启用的调试工具](img/B31016_02_9.jpg)'
- en: Figure 2.9 – The debugging tools enabled in a level
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 在关卡中启用的调试工具
- en: Throughout the book, I will be showing different techniques for debugging your
    game, depending on the tools you will be using. These techniques will empower
    you to efficiently track down and address bugs, errors, and other issues within
    your game’s code logic.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我将展示根据你将使用的工具，调试游戏的不同技术。这些技术将赋予你高效追踪和解决游戏代码逻辑中错误、bug和其他问题的能力。
- en: In this section, I showed you the main AI features available in the Unreal Engine
    GF; in the following section, I will present some of the latest technologies that
    have been implemented in the engine involving **machine learning** ( **ML** )
    systems.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我向您展示了虚幻引擎GF中可用的主要AI功能；在下一节中，我将介绍一些在引擎中实现的新技术，这些技术涉及**机器学习**（**ML**）系统。
- en: Understanding advanced AI features
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解高级AI功能
- en: Now that you have a basic understanding of the main AI features available in
    Unreal Engine, I’d like to present to you some of the most experimental and, to
    some extent, non-gameplay-related features.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对虚幻引擎中可用的主要AI功能有了基本的了解，我想向你介绍一些最实验性和在一定程度上与游戏玩法无关的功能。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that these features are still in experimental or beta release,
    so they need to be handled with care.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这些功能目前仍处于实验或beta版本，因此需要谨慎处理。
- en: Learning Agents
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习代理
- en: '**Learning Agents** is an experimental plugin designed specifically to enable
    you to train AI characters using ML. This plugin offers a unique opportunity to
    enhance or even replace traditional game AI systems, such as behavior trees or
    state machines. With learning agents, you can leverage reinforcement learning
    and imitation learning approaches to create intelligent and adaptive AI characters.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**学习代理**是一个专门设计的实验性插件，旨在使你能够使用机器学习训练AI角色。此插件提供了一个独特的机会，可以增强或甚至取代传统的游戏AI系统，如行为树或状态机。通过学习代理，你可以利用强化学习和模仿学习的方法来创建智能和自适应的AI角色。'
- en: The primary goal of this plugin is to provide a robust solution for character
    decision-making in Unreal Engine. However, its potential applications extend beyond
    game development. As an example, Learning Agents can be used to automate testing
    processes by creating AI characters that perform specific actions and scenarios
    repeatedly. This helps identify potential issues and ensures the robustness of
    your game.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件的主要目标是提供一套强大的解决方案，用于在虚幻引擎中实现角色决策。然而，其潜在应用范围远超游戏开发。例如，学习代理可以通过创建执行特定动作和场景的AI角色来自动化测试流程。这有助于识别潜在问题并确保游戏的健壮性。
- en: Although still in development, this is an impressive plugin, and you should
    expect more and more improvements as time goes by.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管仍在开发中，这个插件已经相当令人印象深刻，随着时间的推移，你应当期待更多改进。
- en: Neural network engine
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 神经网络引擎
- en: The **neural network engine** ( **NNE** ) plugin provides developers with an
    API that allows unified access to different neural network inference engines.
    This enables programmers to seamlessly switch between inference runtimes as needed,
    optimizing their use case and targeting specific platforms effectively.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**神经网络引擎**（**NNE**）插件为开发者提供了一个API，允许统一访问不同的神经网络推理引擎。这使得程序员可以根据需要无缝地在推理运行时之间切换，优化他们的用例并有效地针对特定平台。'
- en: If you are familiar with the Unreal Engine **Rendering Hardware Interface**
    ( **RHI** ), you can think about the NNE as similar; it is a tool whose main purpose
    is to abstract from different inference runtimes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉虚幻引擎的**渲染硬件接口**（**RHI**），你可以将NNE视为类似；它是一个主要目的是从不同的推理运行时抽象出来的工具。
- en: ML Deformer
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML Deformer
- en: The **ML Deformer** is a plugin that provides an API for accessing different
    implementations of ML inference runtimes, allowing developers to approximate complex
    deformation models and improve the quality of characters’ mesh deformations.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**ML Deformer** 是一个插件，它提供了一个API来访问不同的ML推理运行时实现，允许开发者近似复杂的变形模型并提高角色网格变形的质量。'
- en: 'The ML Deformer is specifically designed for creating accurate non-linear deformer
    systems for characters in real-time game engines. It leverages some inner Unreal
    Engine tools to perform computations on the GPU, optimizing performance. A sample
    project – called **ML Sample Project** – is available on the Unreal Engine marketplace
    and the results are pretty amazing; *Figure 2* *.10* shows a lighting test made
    by my fellow teacher, Giovanni Visai, starting from the aforementioned sample
    project:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ML Deformer专门设计用于在实时游戏引擎中为角色创建精确的非线性变形系统。它利用一些内部虚幻引擎工具在GPU上执行计算，优化性能。一个名为**ML
    Sample Project**的示例项目可在虚幻引擎市场上找到，其结果相当惊人；*图2.10*展示了我的同事Giovanni Visai从上述示例项目开始的照明测试：
- en: '![Figure 2.10 – The ML Deformer plugin in action](img/B31016_02_10.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图2.10 – ML Deformer插件在行动中](img/B31016_02_10.jpg)'
- en: Figure 2.10 – The ML Deformer plugin in action
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – ML Deformer插件在行动中
- en: ML cloth simulation
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML布料模拟
- en: The **ML cloth simulation** system offers developers a high-fidelity and highly
    performant solution for real-time cloth simulation. This system excels in producing
    clothing meshes of comparable quality to pre-simulated data while maintaining
    fast and efficient performance with minimal memory usage.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**ML布料模拟**系统为开发者提供了一个高保真和高性能的实时布料模拟解决方案。该系统在产生与预模拟数据相当质量的服装网格的同时，保持快速高效的性能，并使用最少的内存。'
- en: In conclusion, the integration of ML capabilities in Unreal Engine opens up
    a world of possibilities for developers. By leveraging these technologies, developers
    will be able to create more immersive, intelligent, and dynamic experiences within
    their projects.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，将ML功能集成到虚幻引擎中为开发者打开了无限可能。通过利用这些技术，开发者将能够在他们的项目中创建更沉浸式、智能和动态的体验。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, I introduced you to the key features available in the Unreal
    Engine GF. After that, I provided an overview of the main AI systems, beginning
    with the Navigation System and progressing to behavior trees. Additionally, I
    discussed more advanced systems such as Mass Entity and state trees. Finally,
    I introduced you to experimental features such as the Learning Agents and NNE
    plugins.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我向你介绍了虚幻引擎GF中可用的关键功能。之后，我概述了主要的AI系统，从导航系统开始，逐步到行为树。此外，我还讨论了更高级的系统，如Mass
    Entity和状态树。最后，我向你介绍了实验性功能，如学习代理和NNE插件。
- en: Congratulations! You’ve reached the end of *Part 1* of this book. In the upcoming
    chapter, get ready to take a deep dive into the Navigation System and how to create
    basic AI characters that will navigate through it. So, get ready to roll up your
    sleeves, and let’s start creating something amazing!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经到达了本书*第1部分*的结尾。在接下来的章节中，准备好深入探索导航系统以及如何创建基本的AI角色，它们将在这个系统中导航。所以，卷起袖子，让我们开始创造一些惊人的东西吧！
- en: 'Part 2: Understanding the Navigation System'
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2部分：理解导航系统
- en: In the second part of this book, you will delve into the essential features
    of Unreal Engine’s Navigation System. From there, you will create your own project
    and learn how to implement a fully working environment that is navigable by AI
    agents.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第二部分，你将深入了解虚幻引擎导航系统的基本功能。从那里，你将创建自己的项目并学习如何实现一个由AI代理可导航的完整工作环境。
- en: 'This part includes the following chapters:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 3*](B31016_03.xhtml#_idTextAnchor058) , *Presenting the Unreal Engine
    Navigation System*'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B31016_03.xhtml#_idTextAnchor058) ，*展示虚幻引擎导航系统*'
- en: '[*Chapter 4*](B31016_04.xhtml#_idTextAnchor073) , *Setting Up a Navigation
    Mesh*'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B31016_04.xhtml#_idTextAnchor073) ，*设置导航网格*'
- en: '[*Chapter 5*](B31016_05.xhtml#_idTextAnchor099) , *Improving Agent Navigation*'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B31016_05.xhtml#_idTextAnchor099) ，*改进代理导航*'
- en: '[*Chapter 6*](B31016_06.xhtml#_idTextAnchor116) , *Optimizing the Navigation
    System*'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B31016_06.xhtml#_idTextAnchor116) ，*优化导航系统*'
