- en: Debugging Methods for AI - Navigation, EQS, and Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AI调试方法 - 导航、EQS和性能分析
- en: Welcome to [Chapter 12](a60155c1-2bb0-403f-bdcf-dbd6a9c67824.xhtml), *Debugging
    Methods for AI – Navigation, EQS, and Profiling*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到[第12章](a60155c1-2bb0-403f-bdcf-dbd6a9c67824.xhtml)，*AI调试方法 - 导航、EQS和性能分析*。
- en: Here, we are going to explore some more specific tools for the AI systems that
    are built-in within Unreal Engine. We will focus on **Navigation** and **EQS**,
    covering what we have left out (because it was debugging and/or visualization
    related) respectively from [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml), *Navigation*
    and [Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml), *Environment Querying
    System*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将探索Unreal Engine内置的一些针对AI系统的特定工具。我们将重点关注**导航**和**EQS**，分别涵盖我们在[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)，*导航*和[第4章](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)，*环境查询系统*中未涵盖的内容。
- en: At the end of the chapter, we will see some more tools for analyzing performance
    related to AI code. In the next chapter, we will complete the discussion by exploring
    the **Gameplay Debugger** as a way to have a quick real-time feedback for our
    AI.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将看到一些与AI代码性能分析相关的更多工具。在下一章中，我们将通过探索**游戏调试器**来完善讨论，以便为我们的AI提供快速实时反馈。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Checking the execution of a behavior tree
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查行为树的执行情况
- en: Visualizing environmental queries with the EQS testing pawn and exploring how
    its settings can help to better understand the query
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用EQS测试代理可视化环境查询，并探索其设置如何帮助更好地理解查询
- en: How to use the EQS profiler to spot queries that have performance issues and
    how to dive deeper to understand what causes the bad performance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用EQS性能分析器来识别存在性能问题的查询，以及如何深入了解以了解导致性能不佳的原因
- en: Visualizing the navigation mesh and how it works under the hood
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化导航网格及其内部工作原理
- en: Using the navigation test actor to check the path between two points of the
    navigation mesh
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用导航测试代理检查导航网格中两点之间的路径
- en: Profiling by using **AI Stat Groups** to gather useful information regarding
    the performance of the AI systems
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**AI统计组**进行性能分析以收集有关AI系统性能的有用信息
- en: Creating a **Custom Stat Group**, to be able to analyze performance of your
    customized AI systems
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个**自定义统计组**，以便分析您自定义AI系统的性能
- en: So, let's get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧！
- en: Debugging behavior trees
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试行为树
- en: Before jumping into the rest of the chapter, we should learn how to debug behavior
    trees. Actually, there are many methods, and some we will explore later in this
    chapter (with stats) and in the next one (such as the gameplay debugger).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入本章的其余部分之前，我们应该学习如何调试行为树。实际上，有许多方法，其中一些我们将在本章（与统计数据相关）和下一章（如游戏调试器）中探讨。
- en: 'However, I wanted to point out that it is possible to see the execution of
    a behavior tree. If you leave the behavior tree editor open while you play the
    game, you will see highlighted the current branch being executed on the behavior
    tree, and which decorators are blocked. Also, in the blackboard panel, it is possible
    to check the current values for each of the blackboard values. Here is an example
    from the designing behavior trees project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我想指出，可以看到行为树的执行情况。如果您在玩游戏时保持行为树编辑器打开，您将看到行为树上正在执行的当前分支，以及哪些装饰器被阻塞。此外，在黑板面板中，可以检查每个黑板值的当前值。以下是从设计行为树项目中的一个示例：
- en: '![](img/42ab7ec3-d0c3-401a-8896-78021f9433e7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42ab7ec3-d0c3-401a-8896-78021f9433e7.png)'
- en: 'Also, if you have more than one **enemy** running a behavior tree, you can
    change which one to view from the top menu, as shown:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您有多个**敌人**正在运行行为树，您可以通过顶部的菜单更改要查看的敌人，如图所示：
- en: '![](img/040c6342-c15c-4a20-978e-067a8eb6c95f.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/040c6342-c15c-4a20-978e-067a8eb6c95f.png)'
- en: In the same way, it is possible to see the execution of blueprints as well.
    This is not strictly related to AI, but it was worthwhile mentioning it in an
    infobox.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也可以看到蓝图执行的流程。这虽然与AI没有直接关系，但值得在信息框中提及。
- en: Profiling and visualizing environmental queries
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析并可视化环境查询
- en: In this section, we will explore how to visualize and profile **Environmental
    Queries**. In fact, we will gain a better understanding of how the EQS testing
    pawn can visualize an **Environment Query**, and we will explore the **Profiler**
    tool, which allows us to check the performance for each query.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何可视化和分析**环境查询**。实际上，我们将更好地理解EQS测试棋子如何可视化**环境查询**，并且我们将探索**分析器**工具，该工具允许我们检查每个查询的性能。
- en: Visualizing environmental queries with the EQS testing pawn
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EQS测试棋子可视化环境查询
- en: As anticipated back in [Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml),
    *Environment Querying System*, there is a simple built-in way to visualize environment
    queries within the game world, directly from the viewport; the game doesn't even
    have to be running. In fact, there is a special pawn that it is able to do that.
    However, this pawn cannot be brought directly into the level, because, to ensure
    that it is not misused, it has been declared virtual within the code base. This
    means that in order to use it, we need to create our own blueprint pawn that inherits
    directly from this special pawn.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[第4章](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)，*环境查询系统*中预期的那样，有一个简单内置的方法可以在游戏世界中可视化环境查询，直接从视图中；游戏甚至不需要运行。事实上，有一个特殊的棋子能够做到这一点。然而，这个棋子不能直接带入关卡，因为它已被在代码库中声明为虚拟，以确保它不会被滥用。这意味着为了使用它，我们需要创建自己的蓝图棋子，该棋子直接从这个特殊棋子继承。
- en: Thankfully, after this step, the pawn is fully featured, and it doesn't need
    any more code, just the parameters to work with (for example, the environmental
    query you want to visualize).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，完成此步骤后，棋子功能齐全，不需要更多的代码，只需与参数一起工作（例如，您想要可视化的环境查询）。
- en: You will need the environment-querying system to be enabled, check [Chapter
    4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml), Environment Querying System, to
    see how to do this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要启用环境查询系统，查看[第4章](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)，环境查询系统，了解如何做到这一点。
- en: If you already have created the EQS testing pawn back in [Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml),
    *Environment Querying System*, feel free to skip the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在[第4章](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)，*环境查询系统*中创建了EQS测试棋子，请随意跳过下一节。
- en: Creating the EQS testing pawn
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建EQS测试棋子
- en: 'To start, create a new blueprint; the class to inherit from is **EQSTestingPawn**,
    as shown in this screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的蓝图；要继承的类是**EQSTestingPawn**，如下面的截图所示：
- en: '![](img/19340aa3-643f-44ec-99ca-70510d0c24aa.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/19340aa3-643f-44ec-99ca-70510d0c24aa.png)'
- en: Then, you can rename it **MyEQSTestingPawn**, or if you already have done this
    in [Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml), *Environment Querying
    System*, you can either skip this part, or give it another name.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将其重命名为**MyEQSTestingPawn**，或者如果您已经在[第4章](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)，*环境查询系统*中这样做，您可以跳过这部分，或者给它另一个名字。
- en: 'If you just drag it into the map from the **Details** panel, you can change
    the EQS settings, as shown in the next screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只是从**详细信息**面板将其拖入地图，您可以更改EQS设置，如下一个截图所示：
- en: '![](img/daed137f-9ebd-460d-b793-8d9d69e2d505.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/daed137f-9ebd-460d-b793-8d9d69e2d505.png)'
- en: In [Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml), *Environment Querying
    System*, we got this far, but now that we have some more time for debugging, let's
    dive in deeper.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)，*环境查询系统*中，我们已走到这一步，但现在我们有一些更多的时间进行调试，让我们深入探讨。
- en: Creating a test environmental query
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试环境查询
- en: 'We need an **Environmental Query** to perform, in order to visualize what''s
    going on with the different settings. As such, we need to prepare a simple query
    that generates points in a grid, and then score them based on the distance from
    the **Querier**. So, let''s build the environmental query, as shown in the following
    screenshot (within the EQS editor):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个**环境查询**来执行，以便可视化不同设置中的情况。因此，我们需要准备一个简单的查询，它在网格中生成点，然后根据与**查询者**的距离进行评分。所以，让我们构建环境查询，如下面的截图所示（在EQS编辑器内）：
- en: '![](img/767467e2-d6c6-4bf9-bf33-a33f67fefdfa.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/767467e2-d6c6-4bf9-bf33-a33f67fefdfa.png)'
- en: 'We are going to leave the default settings, but for your convenience, this
    is how a simple grid generator looks in the **Details**panel:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留默认设置，但为了您的方便，这是简单网格生成器在**详细信息**面板中的样子：
- en: '![](img/b5ef130e-95d6-4f36-8660-3d6435f8ad1e.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b5ef130e-95d6-4f36-8660-3d6435f8ad1e.png)'
- en: 'For the **Distance Test**, instead, we are going to leave mainly the default
    values, but for showcase purposes, we can change the **Filter **settings, so that
    **Float Value Min** and **Float Value Max** are respectively 200 and 1,000\. As
    a result, we will be able to filter out the points that are too close to the querier,
    and see how the EQS testing pawn visualizes these points:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**距离测试**，我们将主要保留默认值，但为了展示目的，我们可以更改**过滤**设置，使**浮点值最小**和**浮点值最大**分别为200和1,000。结果，我们将能够过滤掉离询问者太近的点，并查看EQS测试棋子如何可视化这些点：
- en: Settings of the EQS testing pawn to visualize environmental queries
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于可视化环境查询的EQS测试棋子的设置
- en: 'Now let''s explore the settings we have seen in the **Details**panel of our **MyEQSTestingPawn**.
    For your convenience, here is the screenshot of the settings:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们探索我们在**详细信息**面板中看到的**MyEQSTestingPawn**的设置。为了您的方便，以下是设置截图：
- en: '![](img/acb1aad9-0eb8-4a63-b4c6-2a235497b4b9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/acb1aad9-0eb8-4a63-b4c6-2a235497b4b9.png)'
- en: Remember that you need to select the testing pawn in the level in order to visualize
    the query (and also a query template must be set).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，您需要在该级别中选择测试棋子以可视化查询（并且必须设置查询模板）。
- en: '**Query Template**: As the name suggests, it is the **Environmental Query**
    that we want to visualize.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询模板**：正如其名所示，这是我们想要可视化的**环境查询**。'
- en: '**QueryParams_DEPRECATED**: (*don''t use this*) This was the old way to set
    parameters for the environmental query; now please use **Query Config**.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QueryParams_DEPRECATED**：（*不要使用此选项*）这是设置环境查询参数的旧方法；现在请使用**查询配置**。'
- en: '**Query Config**: It is an array that allows you to quickly change the settings
    of the **Environmental Query** for rapidly testing and debugging.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询配置**：这是一个数组，允许您快速更改**环境查询**的设置，以便快速测试和调试。'
- en: '**Highlight Mode**: It determines which locations (or items) should have a
    visual representation that is highlighted, which means having a big sphere, instead
    of a small one. The possible values that can assume are the following:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高亮模式**：它决定了哪些位置（或项目）应该有一个高亮显示的视觉表示，这意味着有一个大球体，而不是小球体。可能假设的值如下：'
- en: '**All**: This means that all the locations or items are highlighted, and it
    is the default option; so it appears exactly as shown in the following screenshot,
    which is also how it appears by default once we set the **Query Template**:'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部**：这意味着所有位置或项目都会被突出显示，这是默认选项；因此，它将正好如以下截图所示，这也是我们设置**查询模板**后的默认显示方式：'
- en: '![](img/2cb8774a-4889-4385-ae15-703afeaa9609.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cb8774a-4889-4385-ae15-703afeaa9609.png)'
- en: Viewport. This is an image of the viewport. The other (overlapped) information
    is not important here
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的图像。其他（重叠）信息在这里并不重要
- en: '**Best 5%**: As the name suggests, it shows just the points that have a score
    so that it is within the best 5% score of all the points. All the other points
    will have a smaller sphere:'
  id: totrans-51
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最佳5%**：正如其名所示，它仅显示那些得分在所有点中最佳5%范围内的点。所有其他点将有一个更小的球体：'
- en: '![](img/e2e05b1f-7b2d-4c97-bbe1-8c9552936257.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2e05b1f-7b2d-4c97-bbe1-8c9552936257.png)'
- en: Viewport. This is an image of the viewport. The other (overlapped) information
    is not important here
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的图像。其他（重叠）信息在这里并不重要
- en: '**Best 25%**: As the previous option does, it shows just the points that have
    a score so that it is within the best 25% scores of all the points. All the other
    points will have a smaller sphere:'
  id: totrans-54
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最佳25%**：与上一个选项一样，它仅显示那些得分在所有点中最佳25%范围内的点。所有其他点将有一个更小的球体：'
- en: '![](img/643ab23a-c080-4d09-96b7-103976a2babc.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/643ab23a-c080-4d09-96b7-103976a2babc.png)'
- en: Viewport. This is an image of the viewport. The other (overlapped) information
    is not important here
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的图像。其他（重叠）信息在这里并不重要
- en: '**Draw Labels**: If checked, it shows next to the point its score. If a point
    has been filtered out instead, it shows which test has filtered that point out.
    In our example, the points closer to the querier have been filtered out by the
    **Distance Test**. This option is enabled by default; if we turn it off.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制标签**：如果选中，它会在点旁边显示其分数。如果一个点已被过滤掉，它将显示哪个测试过滤掉了该点。在我们的例子中，靠近询问者的点已被**距离测试**过滤掉。此选项默认启用；如果我们将其关闭。'
- en: '**Draw Failed Items**: If checked, it shows also the points that have been
    filtered out. It is enabled by default, and if we turn it off, in our example,
    we would see the following:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制失败的项目**：如果选中，它还会显示那些已被过滤掉的点。默认情况下是启用的，如果我们将其关闭，在我们的例子中，我们会看到以下内容：'
- en: '![](img/a33ec4d8-10a2-4eb8-a824-915b17e0ec84.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a33ec4d8-10a2-4eb8-a824-915b17e0ec84.png)'
- en: '**Rerun Query Only on Finished Move**: If checked, it will perform the query
    only when this testing pawn stops moving, and not all the time. It is enabled
    by default, and for performance reasons, you should keep this on, unless you need
    to visualize the query also when the testing pawn moves:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅重跑完成移动的查询**: 如果勾选，则仅在测试棋子停止移动时执行查询，而不是一直执行。默认情况下启用，出于性能原因，你应该保持开启状态，除非你需要当测试棋子移动时也可视化查询：'
- en: '![](img/d836529e-48c5-47f0-8d11-da79274e0913.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d836529e-48c5-47f0-8d11-da79274e0913.png)'
- en: '**Should Be Visible In Game**: if checked, it will show the testing pawn as
    a small icon in the game, as in this screenshot; it is disabled by default:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在游戏中应可见**: 如果勾选，则将在游戏中以小图标的形式显示测试棋子，如这个截图所示；默认情况下是禁用的：'
- en: '![](img/bf91cc9b-7c30-447c-9265-323ef6daa805.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf91cc9b-7c30-447c-9265-323ef6daa805.png)'
- en: '**Tick During Game**: As the name suggests, if it is checked, it allows ticking
    during the execution of the game.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏过程中勾选**: 如其名所示，如果勾选，则允许在游戏执行过程中勾选。'
- en: '**Querying Mode**: Determines which is the final result of the query, and it
    has many possible options:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询模式**: 确定查询的最终结果，并且有许多可能的选项：'
- en: '**All Matching**: This is the default option; it shows all the points that
    match the query (the ones in blue have been filtered out). Moreover, the points
    are color-coded from orange to green based on the score, with green being the
    highest score of 1:'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部匹配**: 这是默认选项；它显示所有与查询匹配的点（蓝色已被过滤掉）。此外，点根据分数从橙色到绿色着色，绿色代表最高分数1：'
- en: '![](img/5e31d31c-0e5a-443b-93d0-07da2c9c51bd.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e31d31c-0e5a-443b-93d0-07da2c9c51bd.png)'
- en: Viewport. This is an image of the viewport. The other (overlapped) information
    is not important here
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的图像。其他（重叠）信息在此处不重要
- en: '**Single Best Item**: Shows the point that has the highest score (hence the
    best one) in green, and all the others in a darker shade of green (the ones that
    have been filtered out are still in blue):'
  id: totrans-69
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最佳单个项目**: 以绿色显示得分最高的点（因此是最佳点），其他所有点以较深的绿色阴影显示（已被过滤的点仍然以蓝色显示）：'
- en: '![](img/4666fd57-8cb2-4f83-a53b-18cec5c794cb.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4666fd57-8cb2-4f83-a53b-18cec5c794cb.png)'
- en: Viewport. This is an image of the viewport. The other (overlapped) information
    is not important here
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的图像。其他（重叠）信息在此处不重要
- en: '**Single Random Item from Best 5%**: It shows (or returns) a random point among
    the best 5% of the points that have scored the highest. In the next example, a
    random one has been picked:'
  id: totrans-72
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从最佳5%中随机选择一个项目**: 它显示（或返回）最佳5%中得分最高的点的随机一个。在下一个示例中，随机选择了一个点：'
- en: '![](img/beffb16f-3f05-4f6b-b996-558eec866529.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/beffb16f-3f05-4f6b-b996-558eec866529.png)'
- en: Viewport. This is an image of the viewport. The other (overlapped) information
    is not important here
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的图像。其他（重叠）信息在此处不重要
- en: '**Single Random Item from Best 25%**: It shows (or returns) a random point
    among the best 25% of the points that have scored the highest. In the next example,
    a random one has been picked:'
  id: totrans-75
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从最佳25%中随机选择一个项目**: 它显示（或返回）最佳25%中得分最高的点的随机一个。在下一个示例中，随机选择了一个点：'
- en: '![](img/e91ebb2f-1b07-49b5-9642-d3fb8bb856d5.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e91ebb2f-1b07-49b5-9642-d3fb8bb856d5.png)'
- en: Viewport. This is an image of the viewport. The other (overlapped) information
    is not important here
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的图像。其他（重叠）信息在此处不重要
- en: '**Nav Agent Properties**: Since some **Environmental Queries** depend on the
    navigation system, as we have seen, then this set of options let you tweak how
    the agent that performs the query appears to the navigation system. We are not
    going into detail regarding those, but here are the possible options:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航代理属性**: 由于一些**环境查询**依赖于导航系统，正如我们所见，因此这组选项允许您调整执行查询的代理在导航系统中的外观。我们不会深入探讨这些，但以下是可能的选项：'
- en: '![](img/916d3bd3-03ec-4fab-bd50-a5abe5621277.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/916d3bd3-03ec-4fab-bd50-a5abe5621277.png)'
- en: And that concludes our discussion about visualizing environmental queries with
    the testing pawn. However, there is more about EQS in the next section, where
    we will see how we can profile an environmental query to check its performance,
    and in the next chapter, we will see how to visualize an environmental query at
    run time with the gameplay debugger.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就结束了关于使用测试棋子可视化环境查询的讨论。然而，下一节将介绍更多关于EQS的内容，我们将看到如何分析环境查询以检查其性能，而在下一章中，我们将看到如何在游戏调试器运行时可视化环境查询。
- en: Profiling environmental queries
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境查询分析
- en: In this section, we will learn how we can quickly profile environmental queries.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何快速分析环境查询。
- en: 'You may have noticed that in the EQS editor, next to the **Details** panel,
    there is a **Profile** tab, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，在EQS编辑器中，**详细信息**面板旁边有一个**分析**选项卡，如下面的截图所示：
- en: '![](img/37808d96-dcc5-41f0-b091-bf6bf0ba457a.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/37808d96-dcc5-41f0-b091-bf6bf0ba457a.png)'
- en: 'If we click on it, we will have a whole new section in which we will be able
    to quickly profile environmental queries. At the moment, it is empty, because
    the game is not running, and no environmental query is performed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击它，我们将有一个全新的部分，其中我们可以快速分析环境查询。目前，它是空的，因为游戏没有运行，没有执行任何环境查询：
- en: '![](img/2002efa5-2284-4dad-8b88-eec81cafcdaa.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/2002efa5-2284-4dad-8b88-eec81cafcdaa.png)'
- en: If we have already have some queries running in the game, we could just press
    **Play** and come back to this menu with all the queries that are currently running.
    However, if you don't have any in your game, we could quickly create a behavior
    tree to run some queries, making this behavior tree run on an AI controller and
    finally assign this AI controller to some AI agent in the game. Since we have
    done this many times in the book, I'm not going to guide you step by step. However,
    the next section will provide an overview of the process, if you want to follow
    along. Otherwise, feel free to skip the next section, and go directly to the *Environmental
    query profiler* section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果游戏中已经有一些查询正在运行，我们只需按**Play**并返回此菜单，其中包含所有当前正在运行的查询。然而，如果您游戏中没有任何查询，我们可以快速创建一个行为树来运行一些查询，使此行为树在AI控制器上运行，并将此AI控制器分配给游戏中的某个AI代理。由于我们在书中已经多次这样做，所以我就不会一步步指导您了。但是，下一节将概述这个过程，如果您想跟随，请随意。否则，您可以跳过下一节，直接进入**环境查询分析器**部分。
- en: Setting up the test assets for EQS profiling
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置EQS分析测试资产
- en: 'First, we need to create the environmental queries; you should already have
    these in the game since you would have been using them, but if you just want to
    test this profiling tool, create a couple of queries, for instance, **EnvQueryA**
    and **EnvQueryB**. I made the first query heavier than usual (many points generated)
    so that it stood out in the Profiler later on:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建环境查询；您应该在游戏中已经有了这些，因为您一直在使用它们，但如果您只想测试这个分析工具，创建几个查询，例如，**EnvQueryA**和**EnvQueryB**。我使第一个查询比平常更重（生成许多点），以便在分析器中突出显示：
- en: '![](img/df3b2491-299e-4253-bcff-a63d2369b80e.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/df3b2491-299e-4253-bcff-a63d2369b80e.png)'
- en: 'Then, we need to create a blackboard asset for the behavior tree; we can name
    it **BB_EQSTesting** and we just need a vector key inside it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要为行为树创建一个黑板资产；我们可以将其命名为**BB_EQSTesting**，并在其中只需要一个向量键：
- en: '![](img/7eef7c9a-bc24-41b1-a952-b06f9bd3f7b4.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/7eef7c9a-bc24-41b1-a952-b06f9bd3f7b4.png)'
- en: 'Next, we can create the behavior tree that runs the queries. Name it `BT_EQSTesting`,
    and assign within it the blackboard. Then, we can run the two queries one after
    another with a sequence node (along with a little delay). Remember to assign the
    query to the `Run Query` node, and use the vector key from the blackboard (so
    the query doesn''t fail). The run mode should be by default set to `Single Best
    Item`; be sure that it is the option you have. Here is the behavior tree:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以创建一个运行查询的行为树。将其命名为`BT_EQSTesting`，并在其中分配黑板。然后，我们可以通过序列节点（附带一点延迟）依次运行两个查询。请记住将查询分配给`Run
    Query`节点，并使用黑板中的向量键（这样查询就不会失败）。默认情况下，运行模式应设置为`Single Best Item`；请确保这是您选择的选项。以下是行为树：
- en: '![](img/76c1f3d4-9dae-4798-9bfa-753a2926f473.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/76c1f3d4-9dae-4798-9bfa-753a2926f473.png)'
- en: 'Now we need an AI controller; for simplicity, we can create it in Blueprint
    and name it **B***P_EQSTestingAIController*. Override the **On Possess** function,
    and run the b*ehavior tree*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个AI控制器；为了简单起见，我们可以在蓝图创建它，并将其命名为**B***P_EQSTestingAIController**。重写**On
    Possess**函数，并运行**行为树**：
- en: '![](img/dd15afe8-1463-42ef-baa0-9748355642d7.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/dd15afe8-1463-42ef-baa0-9748355642d7.png)'
- en: 'Finally, create an AI agent in the level (you can duplicate the player if you
    start form the **Third-Person** **Example Map**) and assign the freshly created
    AI controller:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在关卡中创建一个AI代理（如果您从**第三人称****示例地图**开始，可以复制玩家）并分配新创建的AI控制器：
- en: '![](img/fe4edd70-3fa6-4e88-bcaa-a695837da3d9.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/fe4edd70-3fa6-4e88-bcaa-a695837da3d9.png)'
- en: Now we are ready to see the profiler in action!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备看到分析器在行动中的效果！
- en: The environmental query profiler
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境查询分析器
- en: 'If you reach this far, you should press Play and have an environmental query running
    in your game. If so, when the game is running, the Profiler tab of the EQS editor
    will get filled with all the environmental query  running, and it shows stats
    for them:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经走到这一步，您应该按播放按钮，并在您的游戏中运行环境查询。如果是这样，当游戏运行时，EQS编辑器的分析器标签将填充所有正在运行的环境查询，并显示它们的统计数据：
- en: '![](img/029c04ca-1423-48f6-8d7d-8a0eaa212241.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/029c04ca-1423-48f6-8d7d-8a0eaa212241.png)'
- en: For each query type, the profiler shows the number of times it got executed,
    the maximum time taken from the worst of these queries, and their average time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种查询类型，分析器都会显示其执行的次数、从最糟糕的查询中取出的最大时间以及它们的平均时间。
- en: As you can see, **EnvQueryA **is very heavy (because I designed it so), and
    the profiler helps you understand which one needs to be changed/improved or even
    removed. Also, we will see red because it's run time is very bad. For **EnvQueryB**,
    we would see any of these things.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，**EnvQueryA**非常重（因为我就是这样设计的），分析器可以帮助您了解哪些需要更改/改进或甚至删除。此外，我们会看到红色，因为它的运行时间非常糟糕。对于**EnvQueryB**，我们会看到任何这些情况。
- en: 'Moreover, the profiler divides the queries based also on the run mode. In the
    following screenshot, **EnvQueryB** has two entries, based on whether the run
    mode was **Single Result** or **All Matching**:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，分析器还会根据运行模式对查询进行分类。在下面的屏幕截图中，**EnvQueryB**有两个条目，基于运行模式是**单个结果**还是**所有匹配**：
- en: '![](img/537d7993-557e-4691-bdf2-6160b603cf37.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/537d7993-557e-4691-bdf2-6160b603cf37.png)'
- en: Of course, when you see the Profiler tab, you have the EQS editor opened on
    a specific query. Thus, at the bottom of the profiler, there is some more information
    about the query whose EQS editor is currently opened. In fact, we can see a graph
    showing the **Load of EQS tick budget** (how heavy was its tick) for the query.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当您看到分析器标签时，您已经在特定查询上打开了EQS编辑器。因此，在分析器的底部有一些关于当前打开EQS编辑器的查询的更多信息。实际上，我们可以看到一个显示查询的**EQS滴答预算负载**（其滴答有多重）的图表。
- en: 'Finally, at the top, there is the number of how many types of queries have
    been recorded so far and a checkbox named **Show details for current query**.
    If we check this box, we will be able to see directly on the environmental query
    tree the worst andthe average time for each generator (and its pick rate), and
    for each test, we have the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在最上方，显示了迄今为止记录了多少种查询类型，以及一个名为**显示当前查询的详细信息**的复选框。如果我们勾选此框，我们就能直接在环境查询树中看到每个生成器（及其选择率）的最坏和平均时间，以及对于每个测试，我们有以下内容：
- en: '![](img/5887d2de-4d32-4599-a7b1-d5a4aa0f08f0.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5887d2de-4d32-4599-a7b1-d5a4aa0f08f0.png)'
- en: 'It is color-coded here as well:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里也是用颜色编码的：
- en: '**Red** means a very bad performance.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**红色**表示非常糟糕的性能。'
- en: '**Yellow** means an intermediate performance.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**黄色**表示中间性能。'
- en: '**Green** means that the performance is good.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绿色**表示性能良好。'
- en: 'Again, the **EnvQueryA **has been designed to perform badly to showcase the
    profiler*.* If we pick **EnvQueryB**, we see that it performs much better:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，**EnvQueryA**被设计成表现不佳，以展示分析器。如果我们选择**EnvQueryB**，我们会看到它表现得好得多：
- en: '![](img/8fcdf660-d092-41ed-b118-86128ffcd1c5.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fcdf660-d092-41ed-b118-86128ffcd1c5.png)'
- en: As a result, this peak into each single generator and each test allows you to
    dive deeper into which part of your environmental query is actually performing
    badly. So, you can use the profiler to identify which queries have problems, and
    then dive deeper into those that need to be optimized.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这种深入到每个单个生成器和每个测试的做法，让您能够深入了解您的环境查询中哪些部分实际上表现不佳。因此，您可以使用分析器来识别有问题的查询，然后深入到需要优化的那些查询中。
- en: Saving and loading EQS stats
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和加载EQS统计信息
- en: Another cool feature of profiling environmental queries is that you can save
    your stats and load them again. This gives you powerful and flexible tools to
    share your findings with the rest of your team.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 分析环境查询的另一个酷特性是您可以保存您的统计信息并再次加载它们。这为您提供了强大且灵活的工具，可以与您的团队分享您的发现。
- en: 'In order to save an EQS stat, you just need to press the **Save Stats** button
    in the top menu, as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存EQS统计信息，您只需按顶部菜单中的**保存统计信息**按钮，如以下屏幕截图所示：
- en: '![](img/478ac278-3c34-43e6-a7a4-f7b6c93cb47a.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/478ac278-3c34-43e6-a7a4-f7b6c93cb47a.png)'
- en: You will be prompted to choose a location to save the file containing your stats.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示选择一个位置来保存包含您统计信息的文件。
- en: 'Loading is easy as well. Just press the **Load Stats** button in the top menu,
    as shown in the next screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 加载也很简单。只需按顶部菜单中的**加载统计信息**按钮，如下一张屏幕截图所示：
- en: '![](img/df3d41fc-2b3e-4280-b688-2dfc43d43ebe.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/df3d41fc-2b3e-4280-b688-2dfc43d43ebe.png)'
- en: You will be prompted to choose a file containing your EQS stats, and after that,
    all your stats will be loaded.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被提示选择一个包含你的EQS统计数据的文件，之后，所有你的统计数据将被加载。
- en: Testing and visualizing the navigation mesh
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和可视化导航网格
- en: In this section, we will explore some built-in tools to test and visualize the
    **Navigation Mesh**.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索一些内置工具来测试和可视化**导航网格**。
- en: In particular, we will see how it is possible to visualize the navigation mesh
    under the hood and how the navigation test actor can quickly show us "the way"
    (the path generated by the pathfinding algorithm).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是我们将看到如何在底层可视化导航网格，以及导航测试演员如何快速显示“路线”（由路径查找算法生成的路径）。
- en: Visualizing the navigation mesh
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化导航网格
- en: 'As we mentioned back in [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml),
    *Navigation*, when we generated a **Navigation Mesh**, for instance, by bringing
    into the map the **Nav Mesh Bounds Volume**, we also created a **RecastNavMesh-Default**
    actor in the level. If we select it, we can see many options there are to generate
    the navigation mesh, and some of them we already explored. However, we have a
    whole section about **Display Settings** that back in [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml),
    *Navigation*, we didn''t have the time to explore properly. Thus, let''s quickly
    go through these settings; here, for your convenience, is a screenshot of the
    display settings in the **Details **panel:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)中提到的，*导航*，当我们通过将**导航网格边界体积**引入地图来生成**导航网格**时，我们也在这个级别中创建了一个**RecastNavMesh-Default**演员。如果我们选择它，我们可以看到有很多选项可以生成导航网格，其中一些我们已经探索过。然而，我们有一个关于**显示设置**的整个章节，在[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)的*导航*中，我们没有时间进行适当的探索。因此，让我们快速浏览这些设置；这里，为了你的方便，是**详细信息**面板中显示设置的截图：
- en: '![](img/dc289894-ff12-4a2f-b1ba-503b765764b0.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc289894-ff12-4a2f-b1ba-503b765764b0.png)'
- en: 'With the default settings, this is how it looks like (in our example map):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认设置，它看起来是这样的（在我们的示例地图中）：
- en: '![](img/ea96938b-bbf6-4bc8-87c6-2e5f14011bd2.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea96938b-bbf6-4bc8-87c6-2e5f14011bd2.png)'
- en: 'We have a lot of them, so without going too much into the details, let''s dive
    in:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多设置，所以不深入细节，让我们直接进入：
- en: To fully understand all of the options, you should be familiar with how the
    navigation mesh is generated. However, covering this is outside the scope of this
    book. In any case, you can still play with the settings and learn some more about
    the navigation system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解所有选项，你应该熟悉导航网格是如何生成的。然而，这部分内容超出了本书的范围。无论如何，你仍然可以尝试调整设置，并了解更多关于导航系统的情况。
- en: '**Draw Triangle Edge**: Shows the triangles of which the nav mesh is made.
    Ultimately, the connections of these triangles will generate a graph on which
    **Pathfinding** algorithms will run (actually, it is more complicated than that,
    since the system needs to scale for bigger worlds, and a hierarchical pathfinding
    is used on different graphs at different levels). By enabling this option, you
    can actually see the nodes of this graph:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制三角形边**：显示构成导航网格的三角形。最终，这些三角形的连接将在图上生成，路径查找算法将在其上运行（实际上，这比这更复杂，因为系统需要根据更大的世界进行缩放，并在不同级别的不同图上使用分层路径查找）。通过启用此选项，你可以实际看到这个图上的节点：'
- en: '![](img/0368e37f-5dca-4204-b91e-ba92b472cdf6.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0368e37f-5dca-4204-b91e-ba92b472cdf6.png)'
- en: '**Draw Poly Edges**: Shows the edges of the polygons. In fact, the nav mesh
    is generated starting from sectioning the level in polygons, and if a polygon
    contains complex geometry (for example, there are static meshes), the algorithm
    subdivides the polygon into smaller polygons based on the geometry. Then, these
    polygons get divided into triangles (the one we have seen before). With this option
    enabled, you are able to see which are the polygons for this static mesh, and
    if you leave the previous option on, you can see clearly see how all of these
    polygons have been divided into triangles:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制多边形边**：显示多边形的边。实际上，导航网格是从将级别分割成多边形开始的，如果一个多边形包含复杂的几何形状（例如，有静态网格），算法将根据几何形状将多边形细分为更小的多边形。然后，这些多边形被分割成三角形（我们之前看到的）。启用此选项后，你可以看到哪些多边形属于这个静态网格，如果你保持上一个选项开启，你可以清楚地看到所有这些多边形是如何被分割成三角形的：'
- en: '![](img/20598dbc-d040-4005-bb0c-e58d4593a1d9.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/20598dbc-d040-4005-bb0c-e58d4593a1d9.png)'
- en: '**Draw Filled Polys**: If checked, it shows the polygon filled with the usual
    green we have already seen; in fact, this option is on by default. However, if
    we disable it, we can have a clearer look at the *bare bones* of the nav mesh:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制填充多边形**：如果勾选，它会显示用我们已看到的常规绿色填充的多边形；实际上，此选项默认是开启的。但是，如果我们禁用它，我们可以更清楚地看到导航网格的“骨架”：'
- en: '![](img/98e9b333-1c82-46d4-a3cc-3a321e9b7d3b.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98e9b333-1c82-46d4-a3cc-3a321e9b7d3b.png)'
- en: '**Draw Nav Mesh Edges**: If checked (and it is by default), it shows the edge
    of the nav mesh. In the following screenshot, this is how it looks with this option
    turned off:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制导航网格边缘**：如果勾选（默认情况下是勾选的），它会显示导航网格的边缘。在下面的屏幕截图中，这是关闭此选项时的样子：'
- en: '![](img/50567abc-8024-4577-ae41-badaef44103e.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/50567abc-8024-4577-ae41-badaef44103e.png)'
- en: '**Draw Tile Bound**: If enabled, it shows the bounds of the tiles of the navigation
    mesh:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制瓦片边界**：如果启用，它会显示导航网格瓦片的边界：'
- en: '![](img/817941b1-de44-43c3-a49e-4bc339738950.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/817941b1-de44-43c3-a49e-4bc339738950.png)'
- en: '**Draw Path-Colliding Geometry**: By enabling this option, it is possible to
    visualize the geometry that has been passed as input to the** Navigation Mesh
    Generator**, so it is basically all the geometry that the navigation system "is
    aware of." This is useful to check whether something is considered by the navigation
    system, so you can include or exclude what you don''t want (remember that there
    is an option for actors and objects to influence the navigation mesh, and this
    option allows you to spot the one that is currently being considered by the navigation
    system). By checking this option, this is what it is possible to see:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制路径碰撞几何形状**：通过启用此选项，可以可视化传递给**导航网格生成器**的几何形状，这基本上是导航系统“知道”的所有几何形状。这有助于检查是否被导航系统考虑，因此您可以包括或排除不需要的内容（请记住，有一个选项可以让演员和对象影响导航网格，此选项允许您找到当前被导航系统考虑的内容）。通过勾选此选项，可以看到以下内容：'
- en: '![](img/7b5c80db-ab02-4475-8c6c-2ac09f2d1b55.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7b5c80db-ab02-4475-8c6c-2ac09f2d1b55.png)'
- en: 'However, keep in mind that Unreal renders this geometry independently from
    the rest. So, you can also use other views in the engine to isolate this geometry
    to better check what it is like. For instance, you can turn on the Wireframe View*,* and
    it is still possible to see the geometry passed to the navigation mesh generator,
    and this is how it looks:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，请注意，虚幻引擎独立渲染这个几何形状。因此，您也可以在引擎中使用其他视图来隔离这个几何形状，以便更好地检查其外观。例如，您可以打开线框视图*，*仍然可以看到传递给导航网格生成器的几何形状，如下所示：
- en: '![](img/64878787-d708-4418-bfb8-dc296dbe9145.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64878787-d708-4418-bfb8-dc296dbe9145.png)'
- en: '**Draw Tile Labels**: If enabled, these options show the label (expressed as
    a coordinate) of each tile of the navigation mesh:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制瓦片标签**：如果启用，这些选项显示导航网格每个瓦片的标签（以坐标表示）：'
- en: '![](img/83fd4f02-d462-4a79-ae78-1508d05167eb.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/83fd4f02-d462-4a79-ae78-1508d05167eb.png)'
- en: Viewport. This is a screenshot of the viewport. The other (blurred out) information
    is not important here
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的屏幕截图。其他（模糊显示）的信息在这里并不重要
- en: '**Draw Polygon Labels**: If enabled, this option shows a label (that also express
    how many iterations that polygon went through before being generated) for each
    polygon generated in the navigation mesh:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制多边形标签**：如果启用，此选项为导航网格中生成的每个多边形显示一个标签（也表达了这个多边形在生成前经过了多少次迭代），：'
- en: '![](img/5e4c53c6-d0cf-4a51-a5f2-1ec3d02457b4.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5e4c53c6-d0cf-4a51-a5f2-1ec3d02457b4.png)'
- en: Viewport. This is a screenshot of the viewport. The other (blurred out) information
    is not important here
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的屏幕截图。其他（模糊显示）的信息在这里并不重要
- en: '**Draw Default Polygon Cost**: If this option is enabled, it shows all the
    costs for the different parts of the navigation mesh. This is very useful for
    checking which parts are more expensive to traverse. By enabling it in our example,
    this is how it looks:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制默认多边形成本**：如果此选项启用，它会显示导航网格不同部分的全部成本。这对于检查哪些部分更难穿越非常有用。通过在我们的示例中启用它，它看起来是这样的：'
- en: '![](img/e5afe432-0b64-432c-b8f6-65fa2b94a072.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5afe432-0b64-432c-b8f6-65fa2b94a072.png)'
- en: Viewport. This is a screenshot of the viewport. The other (blurred out) information
    is not important here
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的屏幕截图。其他（模糊显示）的信息在这里并不重要
- en: 'As you can see, all the costs are just 1, and this is because we don''t have
    any other type of nav areas than the default ones. If we bring a nav modifier
    and we set a custom nav area (different than null), for instance, the **Desert**
    (or **Jungle**) **Area**, as we did back in [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml),
    *Navigation*, this would be the result (you will notice a change in how the navigation
    mesh is generated, and how in the desert area the cost is higher):'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如你所见，所有成本都是1，这是因为我们没有其他类型的导航区域，只有默认的。如果我们引入一个导航修改器，并设置一个自定义的导航区域（不同于null），例如，**沙漠**（或**丛林**）**区域**，就像我们在[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)中做的，*导航*，这将得到这样的结果（你会注意到导航网格生成方式的变化，以及在沙漠区域成本更高）：
- en: '![](img/8bee4bb2-67c9-456f-a191-78561e1af250.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8bee4bb2-67c9-456f-a191-78561e1af250.png)'
- en: Viewport. This is a screenshot of the viewport. The other (blurred out) information
    is not important here
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 视口。这是视口的截图。其他（模糊显示）的信息在这里并不重要
- en: '**Draw Labels on Path Nodes**: If this option is on, it will draw labels on
    the path nodes.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在路径节点上绘制标签**：如果这个选项开启，它将在路径节点上绘制标签。'
- en: '**Draw Nav Links**: As the name suggests, if the option is on, it will draw
    nav links. It is enabled by default, since usually, you want to be able to see
    the nav links. If we disable it, this is how it would look in our example:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制导航链接**：如名称所示，如果这个选项开启，它将绘制导航链接。它默认开启，因为通常你希望能够看到导航链接。如果我们禁用它，在我们的示例中它将看起来像这样：'
- en: '![](img/a8981c28-b286-47bb-8941-d38eafd5091b.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a8981c28-b286-47bb-8941-d38eafd5091b.png)'
- en: '**Draw Failed Nav Links**: This is the same as the previous option, but on
    **Failed Nav Links**, it is disabled by default.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制失败的导航链接**：这与前面的选项相同，但在**失败的导航链接**上默认是禁用的。'
- en: '**Draw Clusters**: If enabled, it allows you to see the clusters. I''m not
    going into detail, but as we mentioned earlier, the pathfinding needs to be optimized
    to scale on large worlds (for example, **Hierarchical Pathfinding**); thus, with
    this option, you can see which regions of the navigation mesh are connected (meaning
    that it is guaranteed that between those two regions a path exists in some way),
    and so the pathfinding can first find the connected region, before refining the
    search of the path. If this option is enabled, here is how it looks:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制簇**：如果启用，它允许你看到簇。我不会深入细节，但正如我们之前提到的，路径查找需要优化以适应大型世界（例如，**分层路径查找**）；因此，使用这个选项，你可以看到导航网格的哪些区域是连接的（这意味着在两个区域之间以某种方式存在路径的保证），因此路径查找可以先找到连接的区域，然后再细化路径的搜索。如果这个选项被启用，这里就是它的样子：'
- en: '![](img/c9eb6fab-0aed-4344-ad92-ed124f0cdf71.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c9eb6fab-0aed-4344-ad92-ed124f0cdf71.png)'
- en: '**Draw Octree and Draw Octree Details**: If enabled, it allows you to see the **Octrees**.
    Octrees are mathematical structures (trees with eight children) used to partition
    a 3D space. In fact, the navigation mesh is only on the same surface, but it lives
    in (and needs to work with) a 3D space. Just as in our example map, we have some
    stairs and some regions of the navigation mesh that are not at the same level;
    and also **Nav Links** connects regions from above the stairs to down below. If
    we enable it, here is how it should look (you will be able to notice that the
    octrees are mainly in the parts of the navigation mesh that needs to develop in
    height):'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制八叉树和绘制八叉树细节**：如果启用，它允许你看到**八叉树**。八叉树是数学结构（有八个子节点的树），用于划分3D空间。实际上，导航网格只位于同一表面上，但它存在于（并且需要与）3D空间中。就像在我们的示例地图中，我们有一些楼梯和一些导航网格的区域不在同一水平面上；还有**导航链接**将楼梯上方的区域连接到楼梯下方的区域。如果我们启用它，这里就是它应该的样子（你将能够注意到八叉树主要位于需要发展高度的导航网格部分）：'
- en: '![](img/cd4d33b9-fa61-4be3-b308-2f2fb9974c5d.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cd4d33b9-fa61-4be3-b308-2f2fb9974c5d.png)'
- en: '**Draw Offset**: As you may have already noticed, the navigation mesh is not
    drawn at the same level of the geometry of the level, but there is a small offset.
    The **Draw Offset** parameter controls this offset from the ground where the navigation
    mesh is drawn. The default value is 10 (which means 10 centimeters if we keep
    the convention with the Unreal units). If we change this value (I also enabled **Draw
    Filled Polys** to better see the offset), for example, to a higher value, this
    is what we would end up with:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘制偏移量**：正如你可能已经注意到的，导航网格不是绘制在关卡几何形状的同一水平面上，但存在一个小的偏移。**绘制偏移量**参数控制导航网格绘制地面上的这个偏移。默认值是10（如果我们保持虚幻单位的惯例，这意味着10厘米）。如果我们改变这个值（我还启用了**绘制填充多边形**以更好地查看偏移），例如，到一个更高的值，这就是我们最终得到的结果：'
- en: '![](img/2ecfd667-b4ce-4428-a881-84daea0a1086.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ecfd667-b4ce-4428-a881-84daea0a1086.png)'
- en: '**Enabling Drawing**: As the name suggests, if this is enabled, it is possible
    to see the navigation mesh along with all the previous settings.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用绘制**：正如其名所示，如果启用此功能，就可以看到导航网格以及所有之前的设置。'
- en: Of course, all of these options are better combined when we start playing with
    the other settings that determine how the navigation mesh is generated. In fact,
    by tweaking the display settings, you can better understand how the generation
    settings work, and actually "see" how they affect the generation of the navigation
    mesh.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当我们开始调整其他决定导航网格如何生成的设置时，所有这些选项结合使用会更好。实际上，通过调整显示设置，您可以更好地理解生成设置的工作方式，并实际上“看到”它们如何影响导航网格的生成。
- en: Navigation test actor
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航测试演员
- en: As we have seen for the **EQS Testing Pawn**, there is a built-in **Navigation
    Test Actor** that we can use.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在**EQS 测试棋子**中看到的那样，有一个内置的**导航测试演员**我们可以使用。
- en: 'This actor is not declared virtual (as the EQS counterpart is), so it can be
    directly placed in the map. Actually, we can access it from the **Modes** panel,
    as shown:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演员没有被声明为虚拟（就像EQS的对应物那样），因此它可以直接放置在地图上。实际上，我们可以从**模式**面板访问它，如图所示：
- en: '![](img/2780f85c-e050-4aa8-9493-7acb4e7a5374.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2780f85c-e050-4aa8-9493-7acb4e7a5374.png)'
- en: 'Once placed in the level, this is how it looks:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦放置在关卡中，它看起来就是这样：
- en: '![](img/4e1a5afa-37c6-4be2-bcb5-7da8eae869c6.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e1a5afa-37c6-4be2-bcb5-7da8eae869c6.png)'
- en: 'If we place another one in the level, then in the **Details** panel, we can
    assign under the Pathfind section the as shown:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在关卡中放置另一个，那么在**详细信息**面板中，我们可以在路径查找部分分配如下所示：
- en: '![](img/aea8c754-f98c-4302-8bed-9899fb8bb16b.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aea8c754-f98c-4302-8bed-9899fb8bb16b.png)'
- en: 'This will result in a preview of the path between the two navigation test actors:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成两个导航测试演员之间的路径预览：
- en: '![](img/85dbf698-7a97-4fdc-af97-919236733e74.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85dbf698-7a97-4fdc-af97-919236733e74.png)'
- en: 'Here is a different example from a different viewpoint:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个从不同角度的例子：
- en: '![](img/6db189b4-dabf-474a-b724-a5083205803c.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6db189b4-dabf-474a-b724-a5083205803c.png)'
- en: 'Also, you can "smooth" the edges of the path if we modify the **Offset From
    Corner Distance**, always in the pathfinding section of the navigation test actor.
    For instance, a value of 150 will produce this path:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们修改**偏移角距离**，我们还可以在导航测试演员的路径查找部分“平滑”路径的边缘。例如，150的值将产生以下路径：
- en: '![](img/720d6b8b-9d62-4f9f-95f0-2d227f37210a.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/720d6b8b-9d62-4f9f-95f0-2d227f37210a.png)'
- en: 'Of course, this pathfinding test can be used with **Nav Areas** as well. If
    we drop a **Desert Area** (created back in [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml), *Navigation*)
    in the level, the pathfinder will try to avoid it, since it has a higher cost.
    In the following example (the highlighted volume is the desert area), the desert
    area is small, and passing through it is still the shortest path:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个路径查找测试也可以与**导航区域**一起使用。如果我们在一个关卡中放置一个**沙漠区域**（在[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)，*导航*中创建的），路径查找器将尝试避开它，因为它有更高的成本。在下面的例子中（高亮显示的体积是沙漠区域），沙漠区域很小，穿过它仍然是最近的路径：
- en: '![](img/66da78af-1dec-4f86-9dd5-2e1882764d58.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66da78af-1dec-4f86-9dd5-2e1882764d58.png)'
- en: 'However, if we expand the area, then going from the other side has a cheaper
    cost:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们扩大区域，那么从另一侧走会更便宜：
- en: '![](img/bbb96cb6-0745-47d7-ba9c-29fdd1a48f05.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbb96cb6-0745-47d7-ba9c-29fdd1a48f05.png)'
- en: 'Finally, it''s worthwhile mentioning that we can also use nav filters within
    the navigation test actor, always in the pathfinding section in its **Details**
    panel. For instance, we can place the **NavFilter_DesertAnimal** (that we created
    in [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml), *Navigation*,), then
    the desert area is even preferred, producing this other path:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，值得一提的是，我们还可以在导航测试演员中使用导航过滤器，始终在其**详细信息**面板的路径查找部分。例如，我们可以放置**NavFilter_DesertAnimal**（我们在[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)，*导航*中创建的），然后沙漠区域甚至更受欢迎，产生这条其他路径：
- en: '![](img/91194937-b1b5-4ad5-bd54-07e89fa5d809.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91194937-b1b5-4ad5-bd54-07e89fa5d809.png)'
- en: This navigation test actor has more functionalities, as you can see from its
    **Details** panel, but, unfortunately, they are outside the scope of this book.
    However, we have seen its basic use.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个导航测试演员有更多功能，正如您可以从其**详细信息**面板中看到的那样，但不幸的是，它们超出了本书的范围。然而，我们已经看到了它的基本用法。
- en: Profiling AI
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AI 性能分析
- en: When it comes to profiling, Unreal offers many solutions and tools. This section
    explores some that are related to AI.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到性能分析时，虚幻引擎提供了许多解决方案和工具。本节探讨了其中一些与AI相关的工具。
- en: In particular, we will see how it is possible to visualize stats directly from
    the console and how to create a custom stat group. At the end of this section,
    we will mention the **Session Frontend** tool.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将特别介绍如何直接从控制台可视化统计信息以及如何创建自定义统计组。在本节结束时，我们将提及**会话前端**工具。
- en: Profiling with the console
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过控制台进行性能分析
- en: 'The most used profiling tool is activating stats through the console, because
    it is very quick and you can track performance in real time. In fact, just typing
    `stats game` into the console makes a whole page of stats appear on the screen:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的性能分析工具是通过控制台激活统计信息，因为它非常快速，你可以实时跟踪性能。实际上，只需在控制台中输入`stats game`，就会在屏幕上显示一整页的统计信息：
- en: '![](img/f180301e-7a83-47ad-bb20-232562dec587.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/f180301e-7a83-47ad-bb20-232562dec587.png)'
- en: 'Here are all the stats that appear:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了所有出现的统计信息：
- en: '![](img/20902974-2273-4d27-b2f2-2c53205cc3ca.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/20902974-2273-4d27-b2f2-2c53205cc3ca.png)'
- en: As you can see, there's a lot of information, but it is quite general, since
    it tracks the general performance of your game. This is a perfect starting point
    to start optimizing your game; however, as an AI Developer, you will need more
    specific tools.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有很多信息，但它相当通用，因为它跟踪了游戏的整体性能。这是一个开始优化游戏的完美起点；然而，作为一个AI开发者，你需要更具体的工具。
- en: 'If we start typing just `Stat`, a series of options (as a suggestion) appears
    on the screen (86!):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只输入`Stat`，屏幕上会显示一系列选项（作为建议）（86!）：
- en: '![](img/17f4dddd-3df4-47ce-b441-981f128a7fca.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/17f4dddd-3df4-47ce-b441-981f128a7fca.png)'
- en: 'But we can refine our search even more by typing `Stat AI`, and we can have
    the AI-related stats (after all, these options were the first ones on the list,
    since they are in alphabetical order):'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以通过输入`Stat AI`进一步细化我们的搜索，并获取与AI相关的统计信息（毕竟，这些选项是列表中的第一个，因为它们按字母顺序排列）：
- en: '![](img/ce976ad8-7120-4460-ab8a-8a569cc532af.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/ce976ad8-7120-4460-ab8a-8a569cc532af.png)'
- en: These are very useful when it comes down to quickly tracking the performance
    of your AI.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要快速跟踪你的AI性能时，这些功能非常有用。
- en: In order to close the stats, just retype the same command as you did when closing
    those specific stats.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了关闭统计信息，只需重新输入你关闭那些特定统计信息时使用的相同命令。
- en: 'If we type `Stat AI`, we get a generic AI performance track (it depends also
    on which AI systems you have active). On the right, you are also able to check
    how many AIs there are in the level, and how many are currently rendered:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入`Stat AI`，我们会得到一个通用的AI性能跟踪（这还取决于你激活了哪些AI系统）。在右侧，你还可以检查当前级别中有多少AI，以及有多少AI正在渲染：
- en: '![](img/ab6620d3-a996-43af-8a71-2c1758b937cc.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/ab6620d3-a996-43af-8a71-2c1758b937cc.png)'
- en: 'Typing `Stat AI_EQS` gives us more information about EQS. Of course, by using
    a level that has five AIs performing the `EnvQueryA` and `EnvQueryB` that we have
    created before, this has a huge impact on how EQS performs in this specific example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`Stat AI_EQS`会给我们更多关于EQS的信息。当然，通过使用包含五个AI执行我们之前创建的`EnvQueryA`和`EnvQueryB`的关卡，这将对EQS在这个特定示例中的性能产生巨大影响：
- en: '![](img/6959453f-f7a4-423a-833a-0a98468d410c.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/6959453f-f7a4-423a-833a-0a98468d410c.png)'
- en: 'Typing `Stat AIBehaviorTree` gives us informational about the behavior trees
    that are running. Currently, in our example, we have very simple behavior trees,
    so performance- and memory-wise they are very easy:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`Stat AIBehaviorTree`会给我们关于正在运行的行为树的信息。目前，在我们的示例中，我们拥有非常简单的行为树，因此在性能和内存方面都非常容易：
- en: '![](img/7536304e-eab7-48c0-825c-d282a0badc38.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/7536304e-eab7-48c0-825c-d282a0badc38.png)'
- en: 'Finally, typing `Stat AICrowd` gives us information about the crowd that is
    handled at the current stage. Since we are not using a crowd in this example,
    the category is empty:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输入`Stat AICrowd`会给我们关于当前阶段处理的群众的信息。由于在这个示例中我们没有使用群众，因此该类别为空：
- en: '![](img/70d5f585-581b-47b0-b01e-5c044c8ca169.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/70d5f585-581b-47b0-b01e-5c044c8ca169.png)'
- en: 'Of course, if you need to keep track of more than one category at the time,
    you can do it, just by inserting console commands, and they will stack up together,
    as shown in this screenshot:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你需要同时跟踪多个类别，你可以通过插入控制台命令来实现，它们会一起堆叠，如图所示：
- en: '![](img/1bf970f0-ce65-4566-a3ec-6c5b44e21693.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/1bf970f0-ce65-4566-a3ec-6c5b44e21693.png)'
- en: Creating a custom stat group
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义统计组
- en: If you are programming a complex AI, you might want to keep track of more specific
    functions and how they perform. Of course, this can be useful not only for AI
    programming, but for any part of your game. Unreal offers some simple Macros to
    add to your C++ code to quickly start outputting stats for those functions to
    check their performance.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写复杂的AI，你可能想跟踪更具体的函数及其性能。当然，这不仅仅对AI编程有用，对你的游戏任何部分都很有用。虚幻引擎提供了一些简单的宏，可以添加到你的C++代码中，以便快速输出这些函数的性能统计信息以进行检查。
- en: 'To create a **Custom Stat Group**, you need to declare this within a header
    file (or if your system uses inheritance, you can declare it at the highest level
    of the headers file, so the same stat group is available for all the classes that
    inherit from this):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个**自定义状态组**，你需要在头文件中声明它（或者如果你的系统使用继承，你可以在头文件的最高级别声明它，这样相同的统计组就可以供所有继承自这个类的类使用）：
- en: '[PRE0]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, inside the header (`.h`) file of the class that contains the function
    you want to track, we need to add this macro (one for each function we need to
    track):'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在包含你想要跟踪的函数的类的头文件（`.h`）内部，我们需要添加这个宏（每个需要跟踪的函数一个）：
- en: '[PRE1]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, in the implementation (`.cpp`) file, you need to add this macro at
    the beginning of the function we want to track:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在包含我们想要跟踪的函数的实现（`.cpp`）文件中，我们需要在函数的开始处添加这个宏：
- en: '[PRE2]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's start with a practical example, so that you can have a better idea of
    how it works. I'm going to create a simple actor, create the stat group within
    this actor, and start tracking the performance of its `tick` function.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从实际例子开始，这样你可以更好地了解它是如何工作的。我将创建一个简单的演员，在这个演员内部创建状态组，并开始跟踪其`tick`函数的性能。
- en: 'Let''s create a new C++ class that inherits from **Actor**:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的从**Actor**继承的C++类：
- en: '![](img/74d2173e-9157-4d1e-8a34-7f6d321acf07.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74d2173e-9157-4d1e-8a34-7f6d321acf07.png)'
- en: 'We can rename it ***TestingStatActor*** and place it within the `Chapter12 `folder:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其重命名为`***TestingStatActor***`并将其放置在`Chapter12 `文件夹中：
- en: '![](img/9fc6faf9-a9ad-4748-9b41-47b11c63dab6.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fc6faf9-a9ad-4748-9b41-47b11c63dab6.png)'
- en: 'Next, in its header (`.h`) file, we need to declare the stat group (just below
    the include statements):'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在其头文件（`.h`）中，我们需要声明统计组（在包含语句下面）：
- en: '[PRE3]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, since we want to track a function in this very class, we can declare
    the intention to track a function just below the previous line:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，因为我们想要跟踪这个类中的函数，我们可以在上一行下面声明跟踪函数的意图：
- en: '[PRE4]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, in the C++ file, we can add the following macro at the beginning of
    the `Tick` function (even before `Super::Tick()` if you want to track that part
    as well), and maybe we can add a log (which is a heavy task, especially for a
    `Tick` function, so we can better see its spike in performance):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在C++文件中，我们可以在`Tick`函数的开始处添加以下宏（如果你想要跟踪`Super::Tick()`部分，甚至可以在它之前），也许我们还可以添加一个日志（这是一个繁重的任务，尤其是对于`Tick`函数，这样我们可以更好地看到其性能的峰值）：
- en: '[PRE5]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now you can compile your code, and when it is finished, you can drag the **TestingStatActor**
    directly into the level (remember that it doesn't have a scene component, so it
    exists in the level, but it cannot be positioned).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以编译你的代码了，当编译完成后，你可以直接将**TestingStatActor**拖入场景（记住，它没有场景组件，所以它存在于场景中，但不能定位）。
- en: 'If we type in the console, we are now able to access our **AI_MyCustomGroup**:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在控制台中输入，我们现在能够访问我们的**AI_MyCustomGroup**：
- en: '![](img/9b06379f-dc5d-43ef-a53e-973609fda064.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b06379f-dc5d-43ef-a53e-973609fda064.png)'
- en: 'If we enable it, we are able to check on screen the performance of our `Tick`
    function for each TestingStatActor in the game (in this case, just one):'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们启用它，我们就能在屏幕上检查游戏中每个TestingStatActor的`Tick`函数的性能（在这个例子中，只有一个）：
- en: '![](img/149de11b-c5a7-476e-97b3-b2b8f2eebc4a.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/149de11b-c5a7-476e-97b3-b2b8f2eebc4a.png)'
- en: This concludes how to create a custom stat group. This is indeed a very powerful
    tool that allows you to quickly start profiling your C++ functions.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了自定义状态组的创建。这确实是一个非常强大的工具，它允许你快速开始对C++函数进行性能分析。
- en: Session frontend
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话前端
- en: '**Session frontend** is a very powerful profiling tool within Unreal. It allows
    you to check the performance of specific parts of the game, record and save profiling
    sessions, and much, much more (including automatic tests! We will not touch those
    in this book).'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话前端**是虚幻引擎中一个非常强大的性能分析工具。它允许你检查游戏特定部分的表现，记录和保存性能分析会话，以及更多（包括自动测试！在这本书中我们不会涉及这些）。'
- en: 'You can activate it by navigating from the top menu **Window | Developer Tools
    | Session Frontend**, as shown in the following screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从顶部菜单**窗口 | 开发者工具 | 会话前端**导航来激活它，如下面的屏幕截图所示：
- en: '![](img/349b4b2e-7507-42ad-89dd-fa7cc8aeef81.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/349b4b2e-7507-42ad-89dd-fa7cc8aeef81.png)'
- en: 'Once opened, this is how it looks (it should be in the **Console** tab):'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开，它看起来是这样的（它应该在**控制台**标签页中）：
- en: '![](img/de93d471-f75e-4d49-8933-2598fbfa5118.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/de93d471-f75e-4d49-8933-2598fbfa5118.png)'
- en: Console tab. This is an image of Console tab. The other (blurred out) information
    is not important here
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台标签页。这是控制台标签页的图片。其他（模糊显示）信息在这里并不重要
- en: In the **Profiler** tab, you will find all of what you need to dive deeper into
    profiling.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在**分析器**标签页中，你可以找到所有深入分析所需的信息。
- en: 'When you start profiling, here, you will find even more information about AI
    performance (actually, you can find the performance of every part of your game).
    For instance, in the next screenshot, you can see that I''m profiling some AI
    systems:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始分析时，这里你会找到更多关于AI性能的信息（实际上，你可以找到你游戏每个部分的表现）。例如，在下一张屏幕截图中，你可以看到我正在分析一些AI系统：
- en: '![](img/7cfd4696-fb1c-48ef-8b0a-2353ee5f8662.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7cfd4696-fb1c-48ef-8b0a-2353ee5f8662.png)'
- en: Profiler tab. This is an image of Profiler tab. The other (blurred out) information
    is not important here
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器标签页。这是分析器标签页的图片。其他（模糊显示）信息在这里并不重要
- en: If you have created a custom stat group before, you will be able to profile
    that as well in the session frontend! So, keep in mind that creating a stat group
    is very important, as later on, you will need to check the performance of your
    system.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前创建了一个自定义统计组，你将能够在会话前端对其进行性能分析！所以，请记住，创建一个统计组非常重要，因为稍后你将需要检查你系统的性能。
- en: Unfortunately, we don't have the time to explore the **Session Frontend** tool,
    since it would require a whole chapter and it is outside the scope of this book
    (since it would require digging really deeply into performance profiling). However,
    I mentioned this tool not just because it is very important, but because you should
    definitely be aware of its existence, and it is worthwhile exploring it more on
    your own. In fact, you can find more information about this tool in the official
    documentation here: [https://docs.unrealengine.com/en-us/Engine/Performance/Profiler](https://docs.unrealengine.com/en-us/Engine/Performance/Profiler),
    which provides a good starting point for learning more about this tool.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们没有时间探索**会话前端**工具，因为它需要整整一章的内容，并且超出了本书的范围（因为它需要深入挖掘性能分析）。然而，我提到这个工具不仅仅是因为它非常重要，还因为你应该绝对了解它的存在，并且值得你自己进一步探索。实际上，你可以在官方文档中找到更多关于这个工具的信息：[https://docs.unrealengine.com/en-us/Engine/Performance/Profiler](https://docs.unrealengine.com/en-us/Engine/Performance/Profiler)，它为学习更多关于这个工具提供了良好的起点。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have explored some debugging tools for our AI. Of course,
    this was not comprehensive, and there is much more that we haven't covered. However,
    we learned about the most important ones and how to use them.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了我们AI的一些调试工具。当然，这并不全面，还有更多我们没有涉及的内容。然而，我们了解了最重要的工具及其使用方法。
- en: In particular, we have further explored the options available to an EQS testing
    pawn, and how they can help us visualize an environmental query running. We also
    learned about using EQS Profiler as a way to identify how our environmental queries
    perform, and we dived deeper into those that need optimization.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是进一步探索了EQS测试兵可用的选项，以及它们如何帮助我们可视化环境查询的运行。我们还了解了如何使用EQS Profiler来识别我们的环境查询性能，并深入研究了那些需要优化的部分。
- en: We also looked at the display settings for the navigation system in more detail,
    to have a better idea of how our navigation mesh is generated. Also, we discussed
    the navigation-testing actor, which is really useful to visually query the navigation
    system and quickly receive feedback regarding how the Pathfinder performs; but
    we didn't have the time to go into detail about the available options.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还更详细地查看导航系统的显示设置，以便更好地了解我们的导航网格是如何生成的。此外，我们还讨论了导航测试演员，它对于直观查询导航系统并快速获得关于路径查找器性能的反馈非常有用；但我们没有时间详细说明可用的选项。
- en: Finally, we learned more about profiling our game AI, especially with the use
    of `stat` commands in the console. In fact, we have explored what the built-in
    stat groups are and how to create a customized one. We also mentioned the session
    frontend, a powerful tool for profiling our game.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了更多关于分析我们的游戏AI的方法，尤其是在控制台中使用`stat`命令。实际上，我们已经探讨了内置的stat组以及如何创建一个自定义的组。我们还提到了会话前端，这是分析我们的游戏的一个强大工具。
- en: In the next chapter, we will cover the gameplay debugger, which is another important
    tool for debugging AI.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍游戏玩法调试器，这是调试AI的另一个重要工具。
