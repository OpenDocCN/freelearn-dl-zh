- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Understanding Auto-Code Generation Techniques
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解自动代码生成技术
- en: 'In this chapter, we will look at the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: What is a prompt?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是提示词？
- en: Single-line prompts for auto-code generation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单行提示词用于自动代码生成
- en: Multi-line prompts for auto-code generation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多行提示词用于自动代码生成
- en: Chain-of-thought prompts for auto-code generation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思维链提示词用于自动代码生成
- en: Chat with code assistant for auto-code generation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与代码助手聊天进行自动代码生成
- en: Common building methods of auto-code generation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动代码生成的常见构建方法
- en: With the growth in **large language model** (**LLM**) applications, one of the
    interesting use cases, auto-code generation based on user comments, has become
    popular. The last few years have given rise to multiple code assistants for developers,
    such as GitHub Copilot, Codex, Pythia, and Amazon Q Developer, among many others.
    These code assistants can be used to get code recommendations and, in many cases,
    generate error-free code from scratch, just by passing a few plain text comments
    that describe what the user requires from the code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着大型语言模型（**LLM**）应用的增长，其中一种有趣的使用案例，基于用户评论的自动代码生成，已经变得流行。在过去的几年里，出现了多个针对开发者的代码助手，例如GitHub
    Copilot、Codex、Pythia和Amazon Q Developer等。这些代码助手可以用来获取代码推荐，在许多情况下，只需通过传递一些描述用户对代码要求的简单文本注释，就能从头生成无错误的代码。
- en: Many of these code assistants are now backed by LLMs. LLMs are pretrained on
    large publicly available datasets, including public code bases. This training
    on large corpora of data helps code assistants generate more accurate, relevant
    code recommendations. To improve the developer’s code-writing experience, these
    code assistants can not only easily integrate with different **integrated development
    environments** (**IDE**) and code editors but are also readily available with
    different services offered by most of the cloud providers, with minimal configuration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些代码助手现在由LLM支持。LLM是在包括公共代码库在内的公共大型数据集上预训练的。这种对大量数据集的训练有助于代码助手生成更准确、相关的代码推荐。为了提高开发者的代码编写体验，这些代码助手不仅可以轻松集成到不同的**集成开发环境**（**IDE**）和代码编辑器中，而且还可以通过大多数云提供商提供的服务轻松获得，配置简单。
- en: Overall, auto-code generation is a process in which the developer has the ability
    to interact with different code assistants from any supported code editor, using
    simple plain text comments, to get code recommendations in real time for different
    supported coding languages.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，自动代码生成是一个过程，其中开发者能够使用任何支持的代码编辑器，通过简单的纯文本注释与不同的代码助手进行交互，以实时获取不同支持编程语言的代码推荐。
- en: Before we go deeper into auto-code generation with the help of code assistants
    later in this chapter, let’s look at the key concept of prompts related to generative
    AI.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面我们将更深入地探讨使用代码助手进行自动代码生成之前，让我们先看看与生成式AI相关的提示词的关键概念。
- en: What is a prompt?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是提示词？
- en: As specified earlier, LLMs are pretrained on publicly available large datasets,
    which makes them very powerful and versatile. These LLMs typically have billions
    of parameters that can be used to solve multiple tasks out of the box, without
    the need for additional training.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，LLM是在公开可用的大型数据集上预训练的，这使得它们非常强大和多功能。这些LLM通常具有数十亿个参数，可以用于解决多种任务，无需额外训练。
- en: Users just need to ask the right question with relevant context to get the best
    output from an LLM. The plain text comments/questions that act as an instruction
    to an LLM are called **prompts** and the technique of asking the right questions
    with corresponding context is called **prompt engineering**. While interacting
    with LLMs, providing prompts with precise information and, if required, supplementing
    with additional relevant context, is very important in order to get the most accurate
    results. The same is true while interacting with code assistants as most of the
    code assistants are integrated with an LLM. As a user, while interacting with
    a code assistant, you should provide prompts with simple, specific, and relevant
    context, which helps to generate quality code with high accuracy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用户只需提出相关上下文中的正确问题，就可以从LLM中获得最佳输出。作为LLM指令的纯文本注释/问题被称为**提示**，而用相应上下文提出正确问题的技术被称为**提示工程**。在与LLM交互时，提供精确的信息，并在需要时补充相关上下文，这对于获得最准确的结果非常重要。与代码助手交互也是如此，因为大多数代码助手都集成了LLM。作为用户，在与代码助手交互时，您应提供简单、具体且相关的上下文提示，这有助于生成高精度的高质量代码。
- en: The following diagram shows the integration of a code assistant with an LLM.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示显示了代码助手与LLM的集成。
- en: '![Figure 3.1 – Overview of code assistant integration with an LLM](img/B21378_03_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 代码助手与LLM集成的概述](img/B21378_03_01.jpg)'
- en: Figure 3.1 – Overview of code assistant integration with an LLM
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 代码助手与LLM集成的概述
- en: There are multiple ways to interact with code assistants to get the desired
    outcomes. In the following sections, we will explore a few of those techniques.
    To illustrate these techniques, we will leverage the Python programming language
    inside JetBrains’ PyCharm IDE that has been set up to work with Amazon Q Developer
    (refer [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022) for the setup).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与代码助手交互以获得所需结果有多种方式。在以下章节中，我们将探讨其中的一些技术。为了说明这些技术，我们将利用在JetBrains的PyCharm IDE中设置的Python编程语言，该IDE已配置与亚马逊Q开发者一起使用（有关设置，请参阅[*第2章*](B21378_02.xhtml#_idTextAnchor022)）。
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Amazon Q Developer uses LLMs in the background to generate the code. LLMs, by
    nature, are non-deterministic, so you may not get exactly the same code blocks
    as shown in the code snapshots. However, logically, the generated code should
    meet the requirements.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Q开发者使用LLM在后台生成代码。LLM本质上是非确定性的，因此您可能不会得到与代码快照中显示的完全相同的代码块。然而，从逻辑上讲，生成的代码应该满足要求。
- en: Single-line prompts for auto-code generation
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单行提示符自动生成代码
- en: A single-line prompt for auto-code generation refers to the technique in which
    the user, using a code assistant, specifies requirements in a single line of plain
    text, with the expectation of getting relevant lines of code generated in an automated
    manner.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 单行提示符自动生成代码是指用户使用代码助手，在单行纯文本中指定要求，期望以自动化的方式生成相关的代码行。
- en: 'Here are some key points about single-line prompts for auto-code generation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于单行提示自动生成代码的一些关键点：
- en: In the single-line prompt technique, instead of specifying complex technical
    details, the user needs to effectively summarize the requirements at a high level
    in plain text.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单行提示技术中，用户不需要指定复杂的技术细节，而需要有效地以纯文本形式总结高层次的要求。
- en: Code assistants integrated with LLMs are trained to understand these single-line
    prompts in order to translate them into executable and mostly error-free code.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成LLM的代码助手经过训练，能够理解这些单行提示，并将它们转换为可执行且几乎无错误的代码。
- en: Based on the single-line prompt with instructions, context, and specific requirements,
    code assistants will generate code that can range from a single line to multiple
    lines to more complex functions and classes to meet the intended functional requirements.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据带有指令、上下文和具体要求的单行提示，代码助手将生成从单行到多行，再到更复杂的函数和类，以满足预期的功能需求。
- en: A single-line prompt for auto-code generation is useful when the code requirement
    is relatively simple and can easily be described in a sentence.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当代码需求相对简单且可以容易地用一句话描述时，单行提示符自动生成代码非常有用。
- en: A single-line prompt for auto-code generation can significantly reduce time,
    compared to manually writing the same code.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与手动编写相同的代码相比，单行提示符自动生成代码可以显著减少时间。
- en: Since a single-line prompt for auto-code generation does not need much prompt-engineering
    experience, it is most commonly used by users who have little to no coding experience.
    In plain text, they can provide *what* the code should do instead of *how* to
    make it happen using actual code.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于自动代码生成的单行提示不需要太多的提示工程经验，它通常被那些几乎没有编码经验的用户使用。在纯文本中，他们可以提供代码应该做什么，而不是如何使用实际代码来实现它。
- en: In most cases, as simple requirements are used in a single-line prompt, the
    generated code may not require extensive reviews.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数情况下，由于单行提示中使用了简单的要求，生成的代码可能不需要广泛的审查。
- en: Summary – single-line prompts for auto-code generation
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总结 – 自动代码生成的单行提示
- en: In summary, a single-line prompt for auto-code generation is a technique where
    the user describes relatively simple code requirements using natural language
    in plain text format; the code assistant then uses LLMs to auto-generate single
    or multiple lines of code. It makes coding much simpler and accessible to more
    people, especially users who have relatively little or no coding experience or
    may be new to a specific coding language.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，自动代码生成的单行提示是一种技术，用户使用纯文本格式的自然语言描述相对简单的代码要求；然后代码助手使用 LLM 自动生成单行或多行代码。这使得编码变得更加简单，并且更容易让更多人使用，特别是那些相对较少或没有编码经验或可能对特定编程语言新手的用户。
- en: 'The following is an example of a single-line prompt for auto-code generation
    in a PyCharm IDE with Amazon Q Developer enabled as the code assistant, followed
    by the response:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个在 PyCharm IDE 中使用 Amazon Q Developer 作为代码助手启用时的单行提示自动代码生成示例，后面是响应：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 3.2 – Auto-code generation with a single-line prompt in PyCharm IDE
    with Amazon Q Developer](img/B21378_03_002.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 使用 PyCharm IDE 和 Amazon Q Developer 开发者工具的单行提示自动代码生成](img/B21378_03_002.jpg)'
- en: Figure 3.2 – Auto-code generation with a single-line prompt in PyCharm IDE with
    Amazon Q Developer
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 使用 PyCharm IDE 和 Amazon Q Developer 开发者工具的单行提示自动代码生成
- en: Observe that Amazon Q Developer generated a single line of code as our requirement
    was simple and could be easily achieved within a single-line prompt. We will look
    at more complex examples in our next chapters. In this chapter, we are just explaining
    the different techniques of auto-code generation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 Amazon Q Developer 生成了单行代码，因为我们的要求很简单，并且可以很容易地在单行提示中实现。我们将在下一章中查看更复杂的示例。在这一章中，我们只是解释自动代码生成的不同技术。
- en: Important note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You may find typos in a few prompts and screenshots in *Part 2* of the book.
    We have purposely not corrected them to highlight that Amazon Q Developer understands
    the underlying meaning of what's being asked, even with incorrect grammar in the
    prompts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能在书的第二部分中的一些提示和截图中发现错别字。我们故意没有纠正它们，以突出显示 Amazon Q Developer 即使在提示中的语法错误的情况下，也能理解所请求内容的潜在含义。
- en: Multi-line prompts for auto-code generation
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动代码生成的多行提示
- en: Multi-line prompts for auto-code generation refer to the technique where a user
    can define requirements using natural language text in a single prompt, which
    can span multiple sentences. Based on the information provided in each of the
    sentences, the code assistant then tries to understand the correlation among them
    in order to grasp the requirements and generate the desired code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自动代码生成的多行提示是指用户可以在单个提示中使用自然语言文本定义要求，这些文本可以跨越多个句子。基于每个句子提供的信息，代码助手然后尝试理解它们之间的相关性，以便掌握要求并生成所需的代码。
- en: The code assistant will mainly rely on key phrases from each of the sentences;
    it will then use each of those key phrases to form a relationship among all the
    sentences. This guides code assistants to use LLMs to form a sequence of code
    lines to meet the requirement. In most cases, code assistants will generate multiple
    lines of code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 代码助手将主要依赖于每个句子的关键短语；然后它将使用这些关键短语在所有句子之间形成关系。这指导代码助手使用 LLM 形成一系列代码行以满足要求。在大多数情况下，代码助手将生成多行代码。
- en: 'Here are some key points about multi-line prompts for auto-code generation:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些关于自动代码生成多行提示的关键点：
- en: Multi-line prompts for auto-code generation are useful when the code requirement
    is relatively complex, has multiple steps, and cannot be easily described in one
    simple sentence, as it may require more context.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当代码要求相对复杂、有多个步骤且不能简单地在一句中描述时，多行提示自动代码生成非常有用，因为它可能需要更多的上下文。
- en: Code assistants use each sentence from the multi-line prompt to extract key
    phrases, then use an LLM to understand the relationship across sentences and key
    phrases. This generates the interpretation of the code fragments and corresponding
    correlations to define end-to-end code requirements.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码助手使用多行提示中的每个句子来提取关键短语，然后使用LLM来理解句子和关键短语之间的关系。这生成了代码片段的解释和相应的相关性，以定义端到端代码需求。
- en: Due to the complexity of the requirements, better quality and more targeted
    code is usually achieved by providing context in multiple simple, concise sentences.
    These sentences can provide details such as functionality requirements, architectural
    constraints, and platform specifications.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于需求复杂，通过提供多个简单、简洁的句子来提供上下文，通常可以更有效地实现更好的质量和更针对性的代码。这些句子可以提供如功能需求、架构约束和平台规范等详细信息。
- en: Code generated by multi-line prompts is more customized, elaborative, and relatively
    complex versus single-line prompts.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由多行提示生成的代码更加定制化、详细且相对复杂，与单行提示相比。
- en: Generated code may require code review and thorough testing, and, depending
    on the complexity of the requirements, some code refinement may be needed before
    being promoted to the next project life cycle.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的代码可能需要代码审查和彻底测试，并且根据需求复杂度，在升级到下一个项目生命周期之前可能需要进行一些代码优化。
- en: Multi-line prompts for auto-code generation require a good grasp of prompt engineering.
    It’s important to include key details without being overly verbose or ambiguous
    and to understand the generated code. As a result, this technique is typically
    used by users with coding experience.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多行提示用于自动代码生成需要很好地掌握提示工程。重要的是要包括关键细节，同时避免过于冗长或含糊不清，并理解生成的代码。因此，这项技术通常由有编码经验的用户使用。
- en: The accuracy of the code is highly dependent on the maturity/training of the
    code assistants and LLM used to generate the code.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的准确性高度依赖于用于生成代码的代码助手和LLM的成熟度/训练水平。
- en: Summary – multi-line prompts for auto-code generation
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要 – 多行提示用于自动代码生成
- en: In summary, multi-line prompts for auto-code generation is a technique where
    users describe relatively complex code goals in plain natural language text with
    multiple sentences. Then, the code assistant can use the key phrases from those
    sentences to form relationships around them, which helps understand the user requirements
    and turn them into multiple lines of code. It requires some degree of experience
    in prompt engineering, code reviews, and in some cases, rewriting the generated
    code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，多行提示用于自动代码生成是一种技术，用户使用多个句子用普通自然语言文本描述相对复杂的代码目标。然后，代码助手可以使用这些句子中的关键短语来形成它们之间的关系，这有助于理解用户需求并将它们转化为多行代码。这需要一定程度的提示工程、代码审查经验，在某些情况下，还需要重写生成的代码。
- en: The following is an example of a multi-line prompt for auto-code generation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个多行提示用于自动代码生成的示例。
- en: 'We will use an auto-generated code block for the following requirements:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为以下需求使用自动生成的代码块：
- en: The code needs to be generated with a specific language version – in this case,
    Python 3.6.0.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码需要生成特定语言版本 – 在这种情况下，Python 3.6.0。
- en: The code needs to read the `/``user/data/input/sample.csv` file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码需要读取`/user/data/input/sample.csv`文件。
- en: The code needs to load data in a pandas DataFrame with a specific name, `csv_data.`
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码需要以特定名称`csv_data.`将数据加载到pandas DataFrame中。
- en: The code needs to display a sample of 50 rows with a column header.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码需要显示包含列标题的50行样本。
- en: 'We write the prompt as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提示写成如下：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We get the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: "![Figure 3.3 – Auto-code generation with a multi\uFEFF-line prompt in the PyCharm\
    \ IDE with Amazon Q Developer](img/B21378_03_003.jpg)"
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 – 在PyCharm IDE中使用Amazon Q Developer的多行提示进行自动代码生成](img/B21378_03_003.jpg)'
- en: Figure 3.3 – Auto-code generation with a multi-line prompt in the PyCharm IDE
    with Amazon Q Developer
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 在PyCharm IDE中使用Amazon Q Developer的多行提示进行自动代码生成
- en: Observe that Amazon Q Developer generated multiple lines of code with two functions
    – `read_csv_file()` to read the CSV file and `display_sample_records()` to display
    50 records. Then, it created `__main__` to call both functions to generate an
    end-to-end script.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到Amazon Q Developer在PyCharm IDE中使用了多行提示生成了多行代码，其中包含两个函数 – `read_csv_file()`用于读取CSV文件和`display_sample_records()`用于显示50条记录。然后，它创建了`__main__`来调用这两个函数以生成端到端脚本。
- en: Overall, the preceding code does meet the requirements but, based on user/corporate
    preferences, may need some modification and/or tuning. In the next section, we
    will learn about another technique suitable for experienced developers. This technique
    is particularly beneficial when developers are familiar with the code flow and
    require assistance in generating the code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，前面的代码确实满足要求，但根据用户/企业偏好，可能需要一些修改和/或调整。在下一节中，我们将了解另一种适合经验丰富开发者的技术。当开发者熟悉代码流程并需要生成代码的帮助时，这项技术尤其有益。
- en: Chain-of-thought prompts for auto-code generation
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 思路链提示用于自动代码生成
- en: Chain-of-thought prompts for auto-code generation refer to a technique where
    the user employs a combination of single-line or multi-line prompts to provide
    step-by-step instructions. Code assistants then use an LLM to automatically generate
    code for each step individually. Users can use multiple natural language prompts
    that can link together to solve complex requirements. These prompts can be chained
    together to guide the model to produce relevant targeted code. It’s an effective
    technique to divide complex coding tasks into smaller code fragments by providing
    simple prompts to the code assistant one at a time. The code assistant can use
    each prompt to generate more tailored code fragments. Ultimately, all the code
    fragments can be used as building blocks to solve the complex requirement.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 自动代码生成的思路链提示是指用户使用单行或多行提示的组合来提供逐步指令的技术。代码助手随后使用LLM为每个步骤自动生成代码。用户可以使用多个自然语言提示，这些提示可以链接在一起来解决复杂需求。这些提示可以串联起来，引导模型生成相关的针对性代码。这是一种有效的技术，通过向代码助手逐个提供简单提示，将复杂的编码任务分解成更小的代码片段。代码助手可以使用每个提示生成更定制的代码片段。最终，所有代码片段都可以作为构建块来解决复杂需求。
- en: 'Here are some key points about chain-of-thought prompts for auto-code generation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于自动代码生成思路链提示的一些关键点：
- en: Chain-of-thought prompts are a technique in which users divide complex requirements
    into smaller, more manageable single-line or multi-line prompts.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思路链提示是一种技术，其中用户将复杂需求分解成更小、更易于管理的单行或多行提示。
- en: Chain-of-thought prompts can also be useful for code customization. Users can
    effectively use this technique to obtain customized code by providing specific
    information in a prompt, such as generating code with relevant variable names,
    specific function names, step-by-step logic flow, and so on.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思路链提示对于代码定制也很有用。用户可以通过在提示中提供特定信息，如生成具有相关变量名、特定函数名、逐步逻辑流程等的代码，有效地使用这项技术来获取定制代码。
- en: Code assistants leverage advances in LLMs to generate the code fragments to
    meet each individual prompt, which acts as a part of the final end-to-end code.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码助手利用LLM（大型语言模型）的进步来生成满足每个单独提示的代码片段，这些片段作为最终端到端代码的一部分。
- en: Chain-of-thought prompts can be used to generate code for a wide range of tasks,
    such as creating a new project, implementing a specific feature, customizing the
    code to meet custom standards, improving flexibility, accuracy of the code, and
    code organization.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思路链提示可用于生成各种任务的代码，例如创建新项目、实现特定功能、定制代码以满足定制标准、提高灵活性、代码准确性以及代码组织。
- en: Generated code may require code review and integration testing to verify whether
    all the individual code fragments combined meet the end-to-end requirements. Depending
    on the outcome of test cases, users may need to readjust the prompts or rewrite
    some of the code blocks before being promoted to the next project life cycle.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的代码可能需要代码审查和集成测试，以验证所有单独的代码片段组合是否满足端到端需求。根据测试用例的结果，用户可能需要在晋升到下一个项目生命周期之前重新调整提示或重写一些代码块。
- en: This technique can be used by more experienced users as they are mainly responsible
    for tracking the code generation flow to meet the final goal.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种技术可以由经验更丰富的用户使用，因为他们主要负责追踪代码生成流程以实现最终目标。
- en: The accuracy of the overall code is highly dependent on the prompts provided
    by users, due to which users need to have some background in prompt engineering
    to generate accurate end-to-end code.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整体代码的准确性高度依赖于用户提供的提示，因此用户需要具备一些提示工程背景，以生成准确的端到端代码。
- en: Summary – chain-of-thought prompts for auto-code generation
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要 – 思路链提示用于自动代码生成
- en: In summary, chain-of-thought prompts for auto-code generation are a technique
    in which users describe complex code requirements in smaller, easier, and more
    manageable single-line or multi-line prompts of plain, natural language text.
    The code assistant uses each of these prompts to generate specific code based
    on the information provided in a prompt. In the end, the output from all these
    individual prompts combined generates the final code. This technique is effective
    in creating highly tailored code. User needs to carry out integration tests to
    verify that the code meets the end-to-end functionality; based on the test case
    results, users may need to adjust the prompts and/or rewrite some of the code
    fragments of the final code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，用于自动代码生成的思维链提示是一种技术，用户可以用更小、更简单、更易于管理的单行或多行纯自然语言文本提示来描述复杂的代码要求。代码助手使用每个提示根据提示中提供的信息生成特定的代码。最终，所有这些单个提示的输出组合生成最终的代码。这种技术在创建高度定制的代码方面非常有效。用户需要执行集成测试以验证代码是否满足端到端功能；根据测试用例的结果，用户可能需要调整提示和/或重写最终代码的一些代码片段。
- en: The following is an example of chain-of-thought prompts for auto-code generation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是自动代码生成思维链提示的示例。
- en: 'We will use an auto-generated code block with multiple prompts for the following
    requirements:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用自动生成的代码块和多个提示来完成以下要求：
- en: Use the Python coding language.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Python 编程语言。
- en: The code must check whether the `/user/data/input/sample.csv` file is present.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码必须检查 `/user/data/input/sample.csv` 文件是否存在。
- en: Create a function named `read_csv_file()` to read the CSV files. Also, try to
    use a specific `read_csv` from pandas to read records.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `read_csv_file()` 的函数来读取 CSV 文件。同时，尝试使用 pandas 的特定 `read_csv` 来读取记录。
- en: Use the `read_csv_file()` function to read the `/``user/data/input/sample.csv`
    file.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `read_csv_file()` 函数读取 `/user/data/input/sample.csv` 文件。
- en: Display a sample of 50 records with corresponding column details from the file.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示文件中的50条记录的样本，包括相应的列详细信息。
- en: Let’s break down the preceding requirements into three separate prompts.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前面的要求分解为三个单独的提示。
- en: Note that, for simplicity, in this example, we will use single-line prompts
    for auto-code generation but based on the complexity of your requirements, you
    can have a combination of single-line and multi-line prompts to achieve chain-of-thought
    prompts. The code assistant generates multiple lines of code based on the prompts,
    accompanied by corresponding inline comments. This simplifies the understanding
    of the code for users.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了简化，在这个例子中，我们将使用单行提示进行自动代码生成，但根据您的要求的复杂性，您可以组合单行和多行提示来实现思维链提示。代码助手根据提示生成多行代码，并附带相应的内联注释。这简化了用户对代码的理解。
- en: 'Here is the first prompt followed by the output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是第一个提示和相应的输出：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure 3.4 – Prompt 1: auto-code generation with a chain-of-thought prompt
    in the PyCharm IDE with Amazon Q Developer](img/B21378_03_004.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – 提示1：在 PyCharm IDE 中使用 Amazon Q 开发者进行带有思维链提示的自动代码生成](img/B21378_03_004.jpg)'
- en: 'Figure 3.4 – Prompt 1: auto-code generation with a chain-of-thought prompt
    in the PyCharm IDE with Amazon Q Developer'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 提示1：在 PyCharm IDE 中使用 Amazon Q 开发者进行带有思维链提示的自动代码生成
- en: Observe that Amazon Q Developer created multiple lines of code that included
    a function called `check_file_exists()` with one parameter to get `file_path`,
    which checks whether the file exists or not and returns `True`/`False`. It also
    added the next `file_path` variable with an assigned value as the `/``user/data/input/sample.csv`
    path.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 Amazon Q 开发者编写了多行代码，其中包括一个名为 `check_file_exists()` 的函数，该函数有一个参数 `file_path`，用于获取文件路径，检查文件是否存在并返回
    `True`/`False`。它还添加了下一个 `file_path` 变量，并赋予其 `/user/data/input/sample.csv` 路径的值。
- en: 'Here is the second prompt followed by the output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是第二个提示和相应的输出：
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure 3.5 – Prompt 2: auto-code generation with a chain-of-thought prompt
    in the PyCharm IDE with Amazon Q Developer](img/B21378_03_005.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 提示2：在 PyCharm IDE 中使用 Amazon Q 开发者进行带有思维链提示的自动代码生成](img/B21378_03_005.jpg)'
- en: 'Figure 3.5 – Prompt 2: auto-code generation with a chain-of-thought prompt
    in the PyCharm IDE with Amazon Q Developer'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 提示2：在 PyCharm IDE 中使用 Amazon Q 开发者进行带有思维链提示的自动代码生成
- en: Here, also observe that Amazon Q Developer created multiple lines of code. As
    instructed, it created a function called `read_csv_file_file_exists()` with one
    parameter to get `file_path` and used the `read_csv` method to read the file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，也观察 Amazon Q Developer 创建了多行代码。按照指示，它创建了一个名为 `read_csv_file_file_exists()`
    的函数，该函数有一个参数用于获取 `file_path`，并使用 `read_csv` 方法读取文件。
- en: 'Here is the third prompt followed by the output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是第三个提示及其输出：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 3.6 – Prompt 3: auto-code generation with a chain-of-thought prompt
    in the PyCharm IDE with Amazon Q Developer](img/B21378_03_006.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 提示 3：在 PyCharm IDE 中使用 Amazon Q Developer 的思维链提示进行自动代码生成](img/B21378_03_006.jpg)'
- en: 'Figure 3.6 – Prompt 3: auto-code generation with a chain-of-thought prompt
    in the PyCharm IDE with Amazon Q Developer'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 提示 3：在 PyCharm IDE 中使用 Amazon Q Developer 的思维链提示进行自动代码生成
- en: Finally, here, observe how Amazon Q Developer created multiple lines of code
    with a `display_sample_records()` function to display the 50 sample records.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这里，观察 Amazon Q Developer 如何使用 `display_sample_records()` 函数创建多行代码以显示 50
    个样本记录。
- en: Let’s move on to the next technique for auto-code generation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续介绍自动代码生成的下一个技术。
- en: Chat with code assistant for auto-code generation
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与代码助手聊天进行自动代码生成
- en: Many of the code assistants allow users to use a chat-style interaction technique
    to get code recommendations and auto-generate error-free code. Some of the code
    assistant examples include but are not limited to Amazon Q Developer, ChatGPT,
    and Copilot. Just like asking questions to your teammates to get recommendations,
    users can interact with code assistants to ask questions and get recommendations/suggestions
    related to your questions. In addition, many of the code assistants will also
    provide the details in a step-by-step walk-through for the information associated
    with the answer, and will also provide some reference links to get more context.
    Users can review the details and can choose to integrate the code into the main
    program and/or update existing code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 许多代码助手允许用户使用聊天式交互技术来获取代码推荐和自动生成无错误的代码。一些代码助手示例包括但不限于 Amazon Q Developer、ChatGPT
    和 Copilot。就像向队友提问以获取推荐一样，用户可以与代码助手互动，提出问题并获得与问题相关的推荐/建议。此外，许多代码助手还会提供有关答案的逐步说明，并提供一些参考链接以获取更多上下文。用户可以查看详细信息，并可选择将代码集成到主程序中，或更新现有代码。
- en: 'Here are some key points about chatting with a code assistant for auto-code
    generation:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 关于与代码助手聊天进行自动代码生成的一些关键点如下：
- en: Chatting with a code assistant helps users to engage in a question-and-answer
    style interaction in real time.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与代码助手聊天可以帮助用户实时进行问答式互动。
- en: Chatting with a code assistant allows users to receive suggestions and recommendations
    by directly asking questions and stating their requirements in natural language.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与代码助手聊天允许用户通过直接提问和用自然语言表达他们的需求来接收建议和推荐。
- en: This technique can be used by users of any experience level to obtain information
    and suggestions, but it requires some experience to understand and review the
    recommended code. It can be utilized to obtain responses for a variety of complex
    code issues, learn new technology, generate detailed designs, retrieve overall
    architecture details, discover coding best practices and code documentation, perform
    debugging tasks, and future support for the generated code.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种技术可以被任何经验水平的用户用来获取信息和建议，但理解并审查推荐代码需要一些经验。它可以用来获取各种复杂代码问题的响应，学习新技术，生成详细设计，检索整体架构细节，发现编码最佳实践和代码文档，执行调试任务，以及为生成的代码提供未来支持。
- en: During coding, similar to other prompting techniques, it allows users to describe
    complex requirements in smaller, more manageable step-by-step questions to generate
    code. Additionally, the code assistant tracks the questions and corresponding
    answers to improve responses for future questions by recommending the most relevant
    options.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编码过程中，类似于其他提示技术，它允许用户通过描述更小、更易于管理的逐步问题来生成代码，以描述复杂的需求。此外，代码助手跟踪问题和相应的答案，通过推荐最相关的选项来改善未来问题的回答。
- en: In most cases, users are responsible for reviewing and testing to verify that
    the recommended code truly meets the overall needs and integrates within the overall
    code base.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数情况下，用户负责审查和测试，以验证推荐的代码确实满足整体需求并集成到整体代码库中。
- en: To help users understand the code, the code assistant also provides a detailed
    flow associated with the answer and reference links to obtain additional context.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了帮助用户理解代码，代码助手还提供了与答案相关的详细流程以及获取更多上下文的参考链接。
- en: Many of the advanced code assistants, such as Amazon Q Developer, also gather
    context from current files open in the IDE. They automatically retrieve information
    related to the coding language used and the location of the file to provide more
    relevant answers. This assists the code assistant in handling questions related
    to updating existing code, software support, software development, best practices,
    and so on.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多高级代码助手，如 Amazon Q Developer，也会从当前在 IDE 中打开的文件中收集上下文。它们自动检索有关所使用的编程语言和文件位置的信息，以提供更相关的答案。这有助于代码助手处理与更新现有代码、软件支持、软件开发、最佳实践等相关的问题。
- en: The accuracy of the overall code is highly dependent on the user’s ability to
    ask relevant and accurate questions with specific details.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的整体准确性高度依赖于用户提出相关且准确的问题的能力，并包含具体细节。
- en: Summary – chatting with a code assistant for auto-code generation
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要 – 使用代码助手进行自动代码生成聊天
- en: In summary, users at any level of experience can utilize chatting with the code
    assistant for auto-code generation. This technique involves interacting with the
    code assistant in a question-and-answer style in real time to receive suggestions
    and/or recommendations for a wide variety of use cases, including complex code,
    detailed designs, overall architecture, coding best practices, code documentation,
    future support, code updates, and understanding the code, among others. In most
    cases, users are responsible for reviewing and integrating the suggested code
    into the main code base during the coding phase. To assist users, code assistants
    can provide details related to the flow associated with the answer and reference
    links to obtain more context.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，任何经验水平的用户都可以利用与代码助手的聊天进行自动代码生成。这项技术涉及在实时中以问答方式与代码助手互动，以接收各种用例的建议和/或推荐，包括复杂代码、详细设计、整体架构、编码最佳实践、代码文档、未来支持、代码更新以及理解代码等。在大多数情况下，用户负责在编码阶段审查并将建议的代码集成到主代码库中。为了协助用户，代码助手可以提供与答案相关的流程细节以及获取更多上下文的参考链接。
- en: The following is a generic example of chatting with a code assistant for auto-code
    generation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与代码助手进行自动代码生成聊天的通用示例。
- en: 'The requirement is to get generic help from Amazon Q Developer to understand
    the approaches to debug issues with a Python function and, more specifically,
    for `read_csv_file()`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 需求是获取 Amazon Q Developer 的通用帮助，以了解如何调试 Python 函数的问题，特别是对于 `read_csv_file()`
    函数：
- en: '[PRE5]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We get the following result:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下结果：
- en: '![Figure 3.7 – Chatting with a code assistant technique for auto-code generation
    using Amazon Q Developer](img/B21378_03_007.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 使用 Amazon Q Developer 与代码助手进行聊天以实现自动代码生成技术](img/B21378_03_007.jpg)'
- en: Figure 3.7 – Chatting with a code assistant technique for auto-code generation
    using Amazon Q Developer
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 使用 Amazon Q Developer 与代码助手进行聊天以实现自动代码生成
- en: 'Here is the response with step-by-step details related to our question:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是有关我们问题的逐步详细响应：
- en: '![Figure 3.8 – Chatting with a code assistant for auto-code generation – Amazon
    Q Developer response](img/B21378_03_008.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 使用 Amazon Q Developer 与代码助手进行聊天以实现自动代码生成 – Amazon Q Developer 的响应](img/B21378_03_008.jpg)'
- en: Figure 3.8 – Chatting with a code assistant for auto-code generation – Amazon
    Q Developer response
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 使用 Amazon Q Developer 与代码助手进行聊天以实现自动代码生成 – Amazon Q Developer 的响应
- en: 'At the bottom of the response, observe that Amazon Q Developer also provided
    the sources used to provide the details:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应的底部，注意 Amazon Q Developer 还提供了用于提供详细信息的来源：
- en: '![Figure 3.9 – Chatting with a code assistant for auto-code generation – Amazon
    Q Developer sources](img/B21378_03_009.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 使用 Amazon Q Developer 与代码助手进行聊天以实现自动代码生成 – Amazon Q Developer 的来源](img/B21378_03_009.jpg)'
- en: Figure 3.9 – Chatting with a code assistant for auto-code generation – Amazon
    Q Developer sources
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 使用 Amazon Q Developer 与代码助手进行聊天以实现自动代码生成 – Amazon Q Developer 的来源
- en: 'To make it easy for the user, if you just hover over the sources, Amazon Q
    Developer will show exact details from the source in the same window:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用户更方便，如果您只需将鼠标悬停在来源上，Amazon Q Developer 就会在同一窗口中显示来源的确切详细信息：
- en: '![Figure 3.10 – Chatting with a code assistant for auto-code generation – Amazon
    Q Developer source details](img/B21378_03_010.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 使用 Amazon Q Developer 与代码助手进行聊天以实现自动代码生成 – Amazon Q Developer 的来源细节](img/B21378_03_010.jpg)'
- en: Figure 3.10 – Chatting with a code assistant for auto-code generation – Amazon
    Q Developer source details
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 与代码助手聊天以实现自动代码生成 – 亚马逊Q开发者源细节
- en: Now, let’s get into the topic of different building methods of auto-code generation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨自动代码生成的不同构建方法。
- en: Common building methods of auto-code generation
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动代码生成的常见构建方法
- en: As described in the previous sections, different levels of experienced users
    can make use of code assistants to generate the desired code to meet functional
    requirements. In this section, we will walk through some common building methods
    useful for auto-code generation, depending on the complexity of the requirements.
    We will use Amazon Q Developer integration with JetBrains’ PyCharm IDE to illustrate
    how a code assistant can help users automate the generation of code fragments
    and/or get recommendations from the system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，不同经验水平的用户可以利用代码助手生成满足功能需求的代码。在本节中，我们将介绍一些有用的常见构建方法，这些方法取决于需求复杂度。我们将使用亚马逊Q开发者与JetBrains的PyCharm
    IDE的集成来展示代码助手如何帮助用户自动化生成代码片段和/或从系统中获取建议。
- en: Now, let’s begin with each of the code-building methods used in the auto-code
    generation technique.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始介绍在自动代码生成技术中使用的每种代码构建方法。
- en: Single-line code completion
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单行代码补全
- en: Code assistants that leverage LLMs can keep track of all the prompts provided
    as input by a user. At runtime, code assistants use all the input information
    to suggest relevant code. Here is a simple demonstration of how Amazon Q Developer
    helps users with single-line code completion.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 利用LLM的代码助手可以跟踪用户提供的所有输入提示。在运行时，代码助手使用所有输入信息来建议相关的代码。这里是一个简单的演示，说明亚马逊Q开发者如何帮助用户实现单行代码补全。
- en: 'When users start typing code in an Amazon Q Developer-enabled environment,
    it can understand the context of the current and previous inputs. It will start
    suggesting the next code block to complete the existing line or recommend the
    next line that may follow after the current one. The following screenshot highlights
    this method:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在亚马逊Q开发者启用的环境中开始编写代码时，它可以理解当前和之前输入的上下文。它将开始建议下一个代码块以完成现有行，或者推荐当前行之后可能跟随的下一行。以下截图突出了这种方法：
- en: '![Figure 3.11 – Single-line code completion in the PyCharm IDE using Amazon
    Q Developer](img/B21378_03_011.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图3.11 – 使用亚马逊Q开发者实现PyCharm IDE中的单行代码补全](img/B21378_03_011.jpg)'
- en: Figure 3.11 – Single-line code completion in the PyCharm IDE using Amazon Q
    Developer
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 – 使用亚马逊Q开发者实现PyCharm IDE中的单行代码补全
- en: Observe that when the user starts typing the DataFrame name, `csv_data`, Amazon
    Q Developer suggests using the `read_csv_file()` function, which is defined in
    the script.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当用户开始输入DataFrame名称`csv_data`时，亚马逊Q开发者建议使用在脚本中定义的`read_csv_file()`函数。
- en: Full function generation
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整功能生成
- en: One of the basic building blocks of programming is functions. Typically, a function
    is a reusable multi-line block of code, defined anywhere in the program, to perform
    a specific task. Functions do not run unless called. A function can accept parameters
    or arguments that can be passed when being called in your script. Optionally,
    a function can return data to the calling statement. Code assistants can help
    users write an entire function body. Users just need to provide the information
    about the functionality they need from a function, and optionally, the programming
    language, using any of the previous auto-code generation techniques.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 编程的基本构建块之一是函数。通常，函数是在程序中定义的、可重用的多行代码块，用于执行特定任务。除非被调用，否则函数不会运行。函数可以接受参数或参数，在脚本中调用时可以传递。可选地，函数可以返回数据给调用语句。代码助手可以帮助用户编写整个函数体。用户只需提供他们从函数中需要的功能信息，以及可选的编程语言，使用任何之前的自动代码生成技术即可。
- en: Now, let’s look at an example of how users can auto-generate a function.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看用户如何自动生成一个函数的例子。
- en: 'The following is a simple demonstration of how Amazon Q Developer helps users
    with the generation of a full function:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的演示，说明亚马逊Q开发者如何帮助用户生成一个完整的功能：
- en: The user needs to write a simple Python function named `read_csv()` that takes
    `file_path` as a parameter and returns a sample of 50 records
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户需要编写一个名为`read_csv()`的简单Python函数，该函数以`file_path`为参数，并返回50条记录的样本
- en: Call the `read_csv()` function to read a CSV file from the `/``user/data/input/sample.csv`
    path
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`read_csv()`函数从`/user/data/input/sample.csv`路径读取CSV文件
- en: 'We will use the chain-of-thought prompt technique to generate the preceding
    code. Here is the first prompt followed by the output:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用思维链提示技术来生成前面的代码。以下是第一个提示及其输出：
- en: '[PRE6]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 3.12 – Function generation in the PyCharm IDE using Amazon Q Developer
    – generating the function](img/B21378_03_012.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – 在 PyCharm IDE 中使用 Amazon Q Developer 生成函数 – 生成函数](img/B21378_03_012.jpg)'
- en: Figure 3.12 – Function generation in the PyCharm IDE using Amazon Q Developer
    – generating the function
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 在 PyCharm IDE 中使用 Amazon Q Developer 生成函数 – 生成函数
- en: Observe, as instructed in the single-line prompt, that Amazon Q Developer has
    created a Python function named `read_csv()` that takes `file_path` as a parameter
    and returns a sample of 50 records.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察，正如单行提示中所述，Amazon Q Developer 创建了一个名为 `read_csv()` 的 Python 函数，该函数接受 `file_path`
    作为参数，并返回 50 条记录的样本。
- en: 'Now, let’s look at how you can get the function statement logic auto-generated,
    followed by the output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何自动生成函数语句逻辑，然后是输出：
- en: '[PRE7]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure 3.13 – Full function generation in PyCharm IDE using Amazon Q Developer
    – calling the function](img/B21378_03_013.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 在 PyCharm IDE 中使用 Amazon Q Developer 完成完整函数生成 – 调用函数](img/B21378_03_013.jpg)'
- en: Figure 3.13 – Full function generation in PyCharm IDE using Amazon Q Developer
    – calling the function
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 在 PyCharm IDE 中使用 Amazon Q Developer 完成完整函数生成 – 调用函数
- en: Observe, as instructed in Amazon Q Developer, that the call logic is generated
    for the `read_csv()` function to read data from the `/``user/data/input/sample.csv`
    file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察，正如 Amazon Q Developer 指示的那样，为 `read_csv()` 函数生成了调用逻辑，用于从 `/``user/data/input/sample.csv`
    文件中读取数据。
- en: Block completion
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块完成
- en: During the logical flow of a program, users need to run certain code blocks
    based on conditions and/or need to run certain lines in loops. The most common
    code blocks to achieve these functionalities are `if` conditions, `for` loops,
    `while` conditions, and `try` blocks. Code assistants are trained to complete
    and suggest possible code to write these conditional and loop statements.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的逻辑流程中，用户需要根据条件运行某些代码块，或者需要在循环中运行某些行。实现这些功能最常用的代码块是 `if` 条件、`for` 循环、`while`
    条件和 `try` 块。代码助手被训练来完成并建议编写这些条件和循环语句的代码。
- en: 'Now, let’s see how Amazon Q Developer can help users suggest possible `if`
    conditions in the previously created function in the *Full function generation*
    example (reference *Figure 3**.13*). As Amazon Q Developer understands the context
    of the code, it’s able to understand the functionality associated with the `read_csv()`
    function. So, start typing `if` inside the `read_csv()` function to show our intent
    to write a conditional block:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Amazon Q Developer 如何帮助用户在 *完整函数生成* 示例中（参考 *图 3**.13*）建议可能的 `if` 条件。由于
    Amazon Q Developer 理解代码的上下文，它能够理解与 `read_csv()` 函数相关的功能。因此，在 `read_csv()` 函数内开始输入
    `if` 以显示我们编写条件块的意图：
- en: '![Figure 3.14 – Block completion in the IDE using Amazon Q Developer](img/B21378_03_014.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – 在 IDE 中使用 Amazon Q Developer 完成块](img/B21378_03_014.jpg)'
- en: Figure 3.14 – Block completion in the IDE using Amazon Q Developer
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 在 IDE 中使用 Amazon Q Developer 完成块
- en: Observe that, once the user starts typing `if`, Amazon Q Developer understands
    that `file_path` is a mandatory parameter for the `read_csv()` function and expects
    to have a `.csv` file; based on this understanding, it suggests adding an error
    handling condition to check whether the passed parameter has a `.``csv` file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一旦用户开始输入 `if`，Amazon Q Developer 就理解 `file_path` 是 `read_csv()` 函数的强制参数，并期望有一个
    `.csv` 文件；基于这种理解，它建议添加一个错误处理条件来检查传递的参数是否具有 `.``csv` 文件扩展名。
- en: Line-by-line recommendations
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行内推荐
- en: Generally, user requirements can be complex and users may not be able to define
    all of them using a combination of multiple prompts. In a few cases, code assistants
    may not be able to generate the script as expected by the user in a single code
    generation. In addition, if the user decides to update the existing code, then
    Amazon Q Developer provides line-by-line recommendations. Amazon Q Developer tries
    to understand the context of the script and predict relevant next lines that might
    be logically useful.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，用户需求可能很复杂，用户可能无法通过组合多个提示来定义所有需求。在某些情况下，代码助手可能无法一次性生成用户期望的脚本。此外，如果用户决定更新现有代码，那么
    Amazon Q Developer 提供逐行推荐。Amazon Q Developer 尝试理解脚本的上下文并预测可能逻辑上有用的相关下一行。
- en: 'Now, let’s use the previous script from the *Block completion* section (reference
    *Figure 3**.14*) to check whether Amazon Q Developer can recommend the next line
    of code. To illustrate the functionality, let’s delete the last line, `print(data)`.
    Then, go to the last line of the script and press *Enter*; now, Amazon Q Developer
    will try to predict the next logical functionality for the script:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用上一节“块完成”中的脚本（参考图3.14）来检查亚马逊Q开发者是否可以推荐下一行代码。为了说明功能，让我们删除最后一行`print(data)`。然后，转到脚本的最后一行并按*Enter*；现在，亚马逊Q开发者将尝试预测脚本的下一个逻辑功能：
- en: '![Figure 3.15 – Line-by-line recommendations in the IDE using Amazon Q Developer](img/B21378_03_015.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图3.15 – 使用亚马逊Q开发者IDE中的逐行推荐](img/B21378_03_015.jpg)'
- en: Figure 3.15 – Line-by-line recommendations in the IDE using Amazon Q Developer
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15 – 使用亚马逊Q开发者IDE中的逐行推荐
- en: Observe that, in this script, Amazon Q Developer is suggesting the print DataFrame
    statement, `print(data)`, which makes logical sense as we read the data from the
    `sample.csv` file in a DataFrame named `data`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到，在这个脚本中，亚马逊Q开发者建议打印DataFrame语句，`print(data)`，这在我们从名为`data`的DataFrame中读取`sample.csv`文件时是有逻辑意义的。
- en: Cross-reference existing code
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考现有代码
- en: One of the common best coding practices is to use existing functions from different
    files in the same repository of code. Many developers like to create reusable
    functions and save them in a common file that can be referenced in other scripts.
    Code assistants understand existing scripts and functions present across the repository.
    This allows them to help users recommend new code referencing functions from existing
    files. Users can write simple single-line prompts to suggest Code assistants to
    generate the code referencing existing functions from a particular program file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的最佳编码实践之一是使用同一代码库中不同文件中的现有函数。许多开发者喜欢创建可重用函数并将它们保存在一个公共文件中，以便在其他脚本中引用。代码助手理解库中现有的脚本和函数。这使得他们能够帮助用户推荐引用现有文件中函数的新代码。用户可以编写简单的单行提示，建议代码助手生成引用特定程序文件中现有函数的代码。
- en: 'For example, Amazon Q Developer has functionalities available that can cross-reference
    the existing code during new code generation. Let’s assume the user already has
    the function saved in the `prompt-Fullfunctiongeneration.py` file (reference *Figure
    3**.14*) and wants to use the existing function, `read_csv`, in a new script.
    Here is the prompt followed by the output:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，亚马逊Q开发者有一些功能可以在生成新代码时交叉引用现有代码。假设用户已经将函数保存在`prompt-Fullfunctiongeneration.py`文件中（参考图3.14）并想在新的脚本中使用现有的`read_csv`函数。以下是提示和输出：
- en: '[PRE8]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure 3.16 – Cross-referencing the existing code in the IDE using Amazon
    Q Developer](img/B21378_03_016.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图3.16 – 使用亚马逊Q开发者IDE中的现有代码交叉引用](img/B21378_03_016.jpg)'
- en: Figure 3.16 – Cross-referencing the existing code in the IDE using Amazon Q
    Developer
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16 – 使用亚马逊Q开发者IDE中的现有代码交叉引用
- en: Observe that Amazon Q Developer imported all the functions from `prompt_fullfunctiongeneration`
    and then used the `read_csv()` function and generated code to read the `test.csv`
    file.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到亚马逊Q开发者导入了`prompt_fullfunctiongeneration`中的所有功能，然后使用了`read_csv()`函数并生成代码来读取`test.csv`文件。
- en: Generating sample data
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成样本数据
- en: During the development process, developers commonly need sample data that may
    or may not be readily available. Code assistants can help users generate sample
    data in different ways. We will explore a couple of methods by which Amazon Q
    Developer can help users generate the sample data.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，开发者通常需要样本数据，这些数据可能或可能不是现成的。代码助手可以帮助用户以不同的方式生成样本数据。我们将探讨亚马逊Q开发者帮助用户生成样本数据的几种方法。
- en: 'Let’s assume that a user already has some sample data and wants to create additional
    records to bump up the volume of data. Just like many other code assistants, Amazon
    Q Developer understands the structure and format of the existing sample data to
    generate the next sample record. In the following sample example, the user has
    one record in JSON format with `sr_nbr`, `name`, `age`, and `city` as attributes.
    Once the user hits *Enter* at the end of the first record, Amazon Q Developer
    will start generating sample records. The following screenshot highlights this
    feature:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户已经有一些示例数据，并希望创建额外的记录以增加数据量。就像许多其他代码助手一样，Amazon Q Developer 理解现有示例数据的结构和格式，以生成下一个示例记录。在下面的示例示例中，用户有一个包含
    `sr_nbr`、`name`、`age` 和 `city` 作为属性的 JSON 格式记录。一旦用户在第一个记录的末尾按下 *Enter* 键，Amazon
    Q Developer 将开始生成示例记录。以下截图突出了这一功能：
- en: '![Figure 3.17 – Generating sample data in PyCharm IDE using Amazon Q Developer](img/B21378_03_017.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – 在 PyCharm IDE 中使用 Amazon Q Developer 生成示例数据](img/B21378_03_017.jpg)'
- en: Figure 3.17 – Generating sample data in PyCharm IDE using Amazon Q Developer
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 在 PyCharm IDE 中使用 Amazon Q Developer 生成示例数据
- en: 'Observe that Amazon Q Developer is suggesting the next sample record based
    on the structure from an existing record, `{"sr_nbr": 2, "name": "Jane", "age":
    25, "``city": "Chicago"}`.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '注意到 Amazon Q Developer 是根据现有记录的结构建议下一个示例记录，`{"sr_nbr": 2, "name": "Jane", "age":
    25, "city": "Chicago"}`。'
- en: Let’s consider another example and assume that the user does not have a sample
    dataset but is aware of the attributes needed in the sample data. The user needs
    to create a fixed number of sample records. In this case, the user can use prompts
    to generate the sample data. In the following sample example, the user has entered
    a prompt to generate 50 records in JSON format with `sr_nbr`, `name`, `age`, and
    `city` as the desired attributes. With this prompt, Amazon Q Developer suggested
    a random data generation function.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个示例，并假设用户没有示例数据集，但知道样本数据中需要的属性。用户需要创建固定数量的样本记录。在这种情况下，用户可以使用提示来生成样本数据。在下面的示例示例中，用户输入了一个提示来生成
    50 条具有 `sr_nbr`、`name`、`age` 和 `city` 作为所需属性的 JSON 格式记录。使用此提示，Amazon Q Developer
    建议了一个随机数据生成函数。
- en: 'Here is the prompt followed by the output:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是提示和输出：
- en: '[PRE9]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Figure 3.18 – Generating sample data in the PyCharm IDE using Amazon Q Developer
    – function logic](img/B21378_03_018.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – 在 PyCharm IDE 中使用 Amazon Q Developer 生成示例数据 – 函数逻辑](img/B21378_03_018.jpg)'
- en: Figure 3.18 – Generating sample data in the PyCharm IDE using Amazon Q Developer
    – function logic
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 在 PyCharm IDE 中使用 Amazon Q Developer 生成示例数据 – 函数逻辑
- en: Observe that based on the requirement specified in the prompt, Amazon Q Developer
    generated the `generate_user_data()` function with a range of `50` to generate
    sample data with the `sr_nbr`, `name`, `age`, and `city` attributes in a JSON
    file format.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到根据提示中的要求，Amazon Q Developer 生成了 `generate_user_data()` 函数，范围是 `50`，以生成具有
    `sr_nbr`、`name`、`age` 和 `city` 属性的 JSON 文件格式的示例数据。
- en: 'In addition, if you press *Enter* at the end of the function, you will observe
    that Amazon Q Developer will use a line-by-line recommendation to suggest end-to-end
    code and also save data in a `user_data.json` file. The following screenshot highlights
    this feature:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您在函数末尾按下 *Enter* 键，您将观察到 Amazon Q Developer 将使用逐行建议来建议端到端代码，并将数据保存到 `user_data.json`
    文件中。以下截图突出了这一功能：
- en: '![Figure 3.19 – Generating sample data in the IDE using Amazon Q Developer
    – script](img/B21378_03_019.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – 在 IDE 中使用 Amazon Q Developer 生成示例数据 – 脚本](img/B21378_03_019.jpg)'
- en: Figure 3.19 – Generating sample data in the IDE using Amazon Q Developer – script
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 在 IDE 中使用 Amazon Q Developer 生成示例数据 – 脚本
- en: Writing unit tests
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: Testing the scripts is an imperative part of coding. Testing code needs to be
    done at different phases, such as unit testing during or toward the end of coding,
    integration testing across multiple scripts, and so on. Let’s explore the options
    available with code assistants to support unit test creation. As discussed earlier,
    code assistants can understand the context of scripts. This helps developers reference
    existing program files during unit test creation.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 测试脚本是编码过程中的一个必要部分。测试代码需要在不同的阶段进行，例如在编码过程中或接近编码结束时进行单元测试，跨多个脚本的集成测试等等。让我们探讨代码助手提供的选项，以支持单元测试的创建。正如之前讨论的，代码助手可以理解脚本的上下文。这有助于开发者在创建单元测试时引用现有的程序文件。
- en: 'Let’s assume a user wants to create unit tests for the previously generated
    code to generate sample data (reference *Figure 3**.18*). The user can use a simple
    single-line prompt to create the unit tests. Amazon Q Developer can analyze the
    code present in the function file and generate the basic unit test cases. The
    following prompt and output showcases this capability:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户想要为之前生成的代码创建单元测试以生成样本数据（参考 *图 3**.18*）。用户可以使用简单的单行提示来创建单元测试。Amazon Q Developer
    可以分析函数文件中的代码并生成基本的单元测试用例。以下提示和输出展示了这一功能：
- en: '[PRE10]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Figure 3.20 – Writing unit tests in the PyCharm IDE using Amazon Q Developer](img/B21378_03_020.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.20 – 在 PyCharm IDE 中使用 Amazon Q Developer 编写单元测试](img/B21378_03_020.jpg)'
- en: Figure 3.20 – Writing unit tests in the PyCharm IDE using Amazon Q Developer
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – 在 PyCharm IDE 中使用 Amazon Q Developer 编写单元测试
- en: Observe that Amazon Q Developer used the input prompt to reference the `generate_user_data()`
    function from the `sample_data_generation.py` file and, based on the functionality,
    generated a basic unit test case. In addition, it also created a full end-to-end
    script that can be used to run the unit test case.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 Amazon Q Developer 使用输入提示来引用 `sample_data_generation.py` 文件中的 `generate_user_data()`
    函数，并根据功能生成了基本的单元测试用例。此外，它还创建了一个完整的端到端脚本，可以用来运行单元测试用例。
- en: Explaining and documenting code
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释和记录代码
- en: During the life cycle of the project, many developers work on the same script
    to add code or update existing code. A lack of documentation can make it really
    difficult for everyone to understand the end-to-end logic in the script. To help
    developers understand existing code, many of the code assistants have different
    mechanisms to generate explanations of the code in natural language, and plain
    text format. Users can use the outcome of these options to create documentation
    or embed details in the comments section of the script.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的生命周期中，许多开发者对同一脚本进行工作以添加代码或更新现有代码。缺乏文档会使每个人都难以理解脚本中的端到端逻辑。为了帮助开发者理解现有代码，许多代码助手都有不同的机制来以自然语言和纯文本格式生成代码的解释。用户可以使用这些选项的结果来创建文档或将详细信息嵌入到脚本的注释部分。
- en: Amazon Q Developer can help users generate the documentation with respect to
    the existing script. Once the script is open in an IDE, just type the `Explain`
    command in Q’s chat session. Amazon Q Developer will analyze the whole script
    and will return the natural language text, explaining the functionality of the
    script. For example, let’s use the previously created script, `prompt-Fullfunctiongeneration.py`
    (reference *Figure 3**.14*), and ask Amazon Q Developer to explain the code.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Q Developer 可以帮助用户根据现有脚本生成文档。一旦脚本在 IDE 中打开，只需在 Q 的聊天会话中输入 `Explain` 命令。Amazon
    Q Developer 将分析整个脚本，并返回自然语言文本，解释脚本的功能。例如，让我们使用之前创建的脚本 `prompt-Fullfunctiongeneration.py`（参考
    *图 3**.14*），并让 Amazon Q Developer 解释代码。
- en: '![Figure 3.21 – Documenting code in the PyCharm IDE using the Amazon Q Developer
    interface](img/B21378_03_021.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.21 – 使用 Amazon Q Developer 接口在 PyCharm IDE 中记录代码](img/B21378_03_021.jpg)'
- en: Figure 3.21 – Documenting code in the PyCharm IDE using the Amazon Q Developer
    interface
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 使用 Amazon Q Developer 接口在 PyCharm IDE 中记录代码
- en: 'Observe that the user does not need to specify the script name, as Amazon Q
    Developer can automatically use the script open in the editor when you type the
    `Explain` command. The following screenshot highlights the code explanation provided
    by Amazon Q Developer:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到用户不需要指定脚本名称，因为当您输入 `Explain` 命令时，Amazon Q Developer 可以自动使用编辑器中打开的脚本。以下截图突出了
    Amazon Q Developer 提供的代码解释：
- en: '![Figure 3.22 – Documenting code in the IDE using Amazon Q Developer – documentation](img/B21378_03_022.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – 使用 Amazon Q Developer 在 IDE 中记录代码 – 文档](img/B21378_03_022.jpg)'
- en: Figure 3.22 – Documenting code in the IDE using Amazon Q Developer – documentation
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 使用 Amazon Q Developer 在 IDE 中记录代码 – 文档
- en: Observe that Amazon Q Developer generated documentation in natural language.
    It was able to provide the exact functionality of the `read_csv()` function; then,
    it explained that the script used the function to read the `/user/data/input/sample.csv`
    file. In this way, any code can easily be documented without having to manually
    understand the code and type the whole explanation, thus saving time and improving
    productivity.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到，Amazon Q Developer生成了自然语言的文档。它能够提供`read_csv()`函数的确切功能；然后，它解释说脚本使用了该函数来读取`/user/data/input/sample.csv`文件。这样，任何代码都可以轻松地被文档化，无需手动理解代码并输入整个解释，从而节省时间并提高生产力。
- en: Updating existing code
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新现有代码
- en: Similar to the previous examples, developers often inherit previously developed
    code. Users need to update the code based on newly available libraries and known
    issues and to improve coding standards.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的例子类似，开发者通常会继承先前开发的代码。用户需要根据新可用的库和已知问题以及提高编码标准来更新代码。
- en: 'Generally, updating existing code falls into one of these three categories:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，更新现有代码可以分为以下三个类别：
- en: '**Refactoring**: Users need to update existing code to simplify it, making
    it easy to understand, and/or add additional exceptions to handle errors and so
    on'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：用户需要更新现有代码以简化它，使其易于理解，并/或添加额外的异常来处理错误等'
- en: '**Fixing**: Users need to update existing code to fix bugs, which may be known
    or unknown'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修复**：用户需要更新现有代码以修复可能已知或未知的错误'
- en: '**Optimizing**: Users need to update existing code to improve execution efficiency
    and performance tune'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化**：用户需要更新现有代码以提高执行效率和性能调优'
- en: To help developers complete the tasks just mentioned, many code assistants offer
    options. Users can use the outcomes of these options to update existing code and
    improve coding standards.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助开发者完成上述任务，许多代码助手提供了选项。用户可以使用这些选项的结果来更新现有代码并提高编码标准。
- en: Let’s look at how Amazon Q Developer can help users update existing code. Similar
    to the `Explain` command discussed in the previous section, Amazon Q Developer
    has the `Refactor`, `Fix`, and `Optimize` commands. Once the script is open in
    an IDE, simply type any of these commands to get recommendations from Amazon Q
    Developer. Based on the code quality, Amazon Q Developer can provide multiple
    different recommendations and a direct option to insert the fragment into the
    existing script.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Amazon Q Developer如何帮助用户更新现有代码。类似于前面章节中讨论的`解释`命令，Amazon Q Developer有`重构`、`修复`和`优化`命令。一旦脚本在IDE中打开，只需输入这些命令中的任何一个，就可以从Amazon
    Q Developer获得建议。根据代码质量，Amazon Q Developer可以提供多个不同的建议，并直接提供一个选项将片段插入到现有脚本中。
- en: 'As seen in the following screenshot, let’s use the previously created script,
    `prompt-Fullfunctiongeneration.py` (reference *Figure 3**.15*), and ask Amazon
    Q Developer to refactor the code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下屏幕截图所示，让我们使用之前创建的脚本`prompt-Fullfunctiongeneration.py`（参考*图3.15*），并让Amazon
    Q Developer重构代码：
- en: '![Figure 3.23 – Updating existing code in the PyCharm IDE using the Amazon
    Q Developer interface: Refactor](img/B21378_03_023.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图3.23 – 使用Amazon Q Developer界面在PyCharm IDE中更新现有代码：重构](img/B21378_03_023.jpg)'
- en: 'Figure 3.23 – Updating existing code in the PyCharm IDE using the Amazon Q
    Developer interface: Refactor'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23 – 使用Amazon Q Developer界面在PyCharm IDE中更新现有代码：重构
- en: Observe that Amazon Q Developer can automatically use the script open in the
    editor when you type the `Refactor` instruction and suggest multiple recommendations
    to consider while refactoring. Let’s look at a couple of them in the following
    section.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到，当你在编辑器中输入`重构`指令时，Amazon Q Developer可以自动使用打开的脚本，并建议在重构时考虑的多个建议。让我们在下一节中看看其中的一些。
- en: 'In the following screenshot, Amazon Q Developer suggests adding hints to the
    `file_path` function parameter and returning parameters as a list to improve overall
    readability:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，Amazon Q Developer建议向`file_path`函数参数添加提示，并将参数作为列表返回以提高整体可读性：
- en: '![Figure 3.24 – Updating existing code in the PyCharm IDE using the Amazon
    Q Developer interface: Refactor 2](img/B21378_03_024.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图3.24 – 使用Amazon Q Developer界面在PyCharm IDE中更新现有代码：重构2](img/B21378_03_024.jpg)'
- en: 'Figure 3.24 – Updating existing code in the PyCharm IDE using the Amazon Q
    Developer interface: Refactor 2'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 – 使用Amazon Q Developer界面在PyCharm IDE中更新现有代码：重构2
- en: 'As seen in the following screenshot, Amazon Q Developer suggests including
    additional exception handling for the `file_path` parameter to check whether the
    file is of the CSV type and whether the file exists:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下屏幕截图所示，Amazon Q Developer 建议为 `file_path` 参数添加额外的异常处理，以检查文件是否为 CSV 类型以及文件是否存在：
- en: '![Figure 3.25 – Updating existing code in the PyCharm IDE using the Amazon
    Q Developer interface: Refactor 3](img/B21378_03_025.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.25 – 使用 Amazon Q Developer 接口在 PyCharm IDE 中更新现有代码：重构 3](img/B21378_03_025.jpg)'
- en: 'Figure 3.25 – Updating existing code in the PyCharm IDE using the Amazon Q
    Developer interface: Refactor 3'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25 – 使用 Amazon Q Developer 接口在 PyCharm IDE 中更新现有代码：重构 3
- en: We will explore other options and dive deep into the examples in [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 12 章*](B21378_12.xhtml#_idTextAnchor181) 中探索其他选项并深入探讨示例。
- en: Feature development
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能开发
- en: Code assistants can help developers develop features simply by describing them
    in natural language and specifying key phrases. As a user, you only need to provide
    keywords/phrases related to the functionality of the feature, and code assistants
    can generate the end-to-end code.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 代码助手可以通过用自然语言描述功能并指定关键词来帮助开发者开发功能。作为用户，您只需提供与功能功能相关的关键词/短语，代码助手就可以生成端到端的代码。
- en: Let’s look at how Amazon Q Developer can help users develop features. Amazon
    Q Developer leverages the context of the current project to generate a comprehensive
    implementation plan and specifies the necessary code changes. To initiate feature
    development, the user just needs to open a file within their project and type
    `/dev` in the `/dev`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Amazon Q Developer 如何帮助用户开发功能。Amazon Q Developer 利用当前项目的上下文生成一个全面的实施计划，并指定必要的代码更改。要开始功能开发，用户只需在项目内打开一个文件并在
    `/dev` 中输入 `/dev`。
- en: 'For example, let’s ask Amazon Q Developer to implement a binary search feature.
    This is highlighted in the following screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们让 Amazon Q Developer 实现二分查找功能。这在上面的屏幕截图中得到了突出显示：
- en: '![Figure 3.26 – Feature development in the PyCharm IDE using the Amazon Q Developer
    interface](img/B21378_03_026.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.26 – 使用 Amazon Q Developer 接口在 PyCharm IDE 中进行功能开发](img/B21378_03_026.jpg)'
- en: Figure 3.26 – Feature development in the PyCharm IDE using the Amazon Q Developer
    interface
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.26 – 使用 Amazon Q Developer 接口在 PyCharm IDE 中进行功能开发
- en: Observe that, based on the command, Amazon Q Developer generated code for the
    binary search feature, provided details of the code flow/algorithm, and referenced
    sources to generate the features.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，根据命令，Amazon Q Developer 为二分查找功能生成了代码，提供了代码流/算法的详细信息，并引用了源代码以生成功能。
- en: We will dive deep into detailed examples in [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 12 章*](B21378_12.xhtml#_idTextAnchor181) 中深入探讨详细示例。
- en: Code transformation
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码转换
- en: When upgrading versions, depending on the programming language used, users may
    have to make various adjustments in their code to ensure compatibility with the
    latest version. Code assistants offer assistance to developers in upgrading their
    code, helping them transition from older versions to the most recent ones.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级版本时，根据所使用的编程语言，用户可能需要在他们的代码中进行各种调整以确保与最新版本兼容。代码助手为开发者提供升级代码的帮助，帮助他们从旧版本过渡到最新版本。
- en: For example, Amazon Q Developer has the capability to upgrade the code language
    version. Users can just open the existing old version code and use the `/transform`
    command to upgrade the code version directly within their files.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Amazon Q Developer 具有升级代码语言版本的能力。用户只需打开现有的旧版本代码，并在文件中使用 `/transform` 命令直接升级代码版本。
- en: We will dive deep into further details with examples in [*Chapter 12*](B21378_12.xhtml#_idTextAnchor181).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 12 章*](B21378_12.xhtml#_idTextAnchor181) 中通过示例深入探讨更多细节。
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we covered the integration of code assistants with LLMs to
    assist users with auto-code generation. Then, we explored three commonly used
    auto-code generation prompting techniques: single-line prompts, multi-line prompts,
    and chain-of-thought prompts. We introduced each of these prompting techniques
    for auto-code generation, along with potential use cases, limitations, and required
    coding experience. Sample code examples were used in JetBrains’ PyCharm IDE with
    Amazon Q Developer enabled. Additionally, we introduced the *chat with code assistant*
    technique in the auto-code generation process, where users interact with the code
    assistant in a simple question-and-answer style session. Amazon Q Developer was
    utilized to obtain general recommendations for coding/debugging.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了代码助手与大型语言模型（LLM）的集成，以帮助用户进行自动代码生成。然后，我们探讨了三种常用的自动代码生成提示技术：单行提示、多行提示和思维链提示。我们为每种自动代码生成提示技术介绍了其潜在的应用场景、局限性以及所需的编程经验。示例代码示例使用了启用
    Amazon Q Developer 的 JetBrains PyCharm IDE。此外，我们还介绍了自动代码生成过程中的“与代码助手聊天”技术，用户可以通过简单的问答式会话与代码助手互动。Amazon
    Q Developer 被用于获取编码/调试的一般性建议。
- en: We then discussed some of the common building methods of code generation, such
    as single-line code completion, full function generation, block completion, line-by-line
    recommendations, generating sample data, writing unit tests, explaining and documenting
    code, updating existing code, feature development, and code transformation. Furthermore,
    we explored these functionalities with Amazon Q Developer in JetBrains’ PyCharm
    IDE to support the most common code-building methods.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后讨论了一些常见的代码生成构建方法，例如单行代码补全、完整功能生成、块补全、逐行推荐、生成示例数据、编写单元测试、解释和记录代码、更新现有代码、功能开发和代码转换。此外，我们还使用
    Amazon Q Developer 在 JetBrains PyCharm IDE 中探索了这些功能，以支持最常见的代码构建方法。
- en: Next, we'll start *Part 2* of the book. In this part, *Chapters 4* to *9* will
    walk you through how Amazon Q Developer can boost developer productivity by auto-generating
    code for many supported programming languages. Based on your expertise or preference,
    feel free to navigate directly to the chapters that interest you the most.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始本书的**第二部分**。在这一部分，**第 4 章**至**第 9 章**将指导您了解 Amazon Q Developer 如何通过为许多支持的编程语言自动生成代码来提高开发者的生产力。根据您的专业或偏好，您可以自由地直接跳转到您最感兴趣的章节。
- en: In the next chapter, we will delve deeper into how to utilize these techniques
    and building methods within the IDE environment for the Python and Java languages.
    Additionally, we will create a sample Python application with the assistance of
    Amazon Q Developer.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨如何在 IDE 环境中利用这些技术和构建方法，特别是针对 Python 和 Java 语言。此外，我们还将借助 Amazon
    Q Developer 创建一个示例 Python 应用程序。
- en: References
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Amazon Q Developer single-line code completion: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/single-line-completion.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/single-line-completion.html)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q Developer 单行代码补全：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/single-line-completion.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/single-line-completion.html)
- en: 'Amazon Q Developer full function generation: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/full-function-generation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/full-function-generation.html)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q Developer 完整功能生成：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/full-function-generation.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/full-function-generation.html)
- en: 'Amazon Q Developer block completion: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-block.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-block.html)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q Developer 块补全：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-block.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/code-block.html)
- en: 'Amazon Q Developer line-by-line recommendations: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/line-by-line-1.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/line-by-line-1.html)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Q Developer 逐行推荐：[https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/line-by-line-1.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/line-by-line-1.html)
- en: 'Amazon Q Developer chat with Amazon Q Developer in IDEs: [https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/q-in-IDE-chat.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/q-in-IDE-chat.html)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IDE 中与 Amazon Q Developer 开发者进行聊天：[https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/q-in-IDE-chat.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/q-in-IDE-chat.html)
- en: 'Explain and update code with Amazon Q Developer: [https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/explain-update-code.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/explain-update-code.html)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon Q Developer解释和更新代码：[https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/explain-update-code.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/explain-update-code.html)
- en: 'Feature development with Amazon Q Developer: [https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/feature-dev.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/feature-dev.html)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon Q Developer进行功能开发：[https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/feature-dev.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/feature-dev.html)
- en: 'Code transformation with Amazon Q Developer: [https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/code-transformation.html)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon Q Developer进行代码转换：[https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/code-transformation.html](https://docs.aws.amazon.com/amazonq/latest/aws-builder-use-ug/code-transformation.html)
- en: 'Prompt engineering guide – generating code: [https://www.promptingguide.ai/applications/coding](https://www.promptingguide.ai/applications/coding)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prompt工程指南 – 生成代码：[https://www.promptingguide.ai/applications/coding](https://www.promptingguide.ai/applications/coding)
