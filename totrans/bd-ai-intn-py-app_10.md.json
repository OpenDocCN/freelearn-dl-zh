["```py\n\npip3 install ragas==0.1.13 datasets==2.20.0 langchain==0.2.12 openai==1.39.0 faiss-cpu==1.8.0.post1\n```", "```py\n\nfrom ragas.metrics import context_entity_recall\nfrom ragas import evaluate, RunConfig\nfrom datasets import load_dataset, Dataset\nfrom langchain_openai import ChatOpenAI, OpenAIEmbeddings\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\nfrom langchain_community.vectorstores import FAISS\nimport os\nfrom typing import List\n# Add your OpenAI API key to the environment variables\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\n# Load sample dataset.\ndataset = load_dataset(\"explodinggradients/amnesty_qa\", split=\"eval\")\nsample_size = 100\n# Get sample questions from the sample dataset.\nsample_questions = dataset['question'][:sample_size]\n# Get sample context information from the sample dataset.\nsample_contexts = [item for row in dataset[\"contexts\"]\n                   [:sample_size] for item in row]\nsample_ground_truths = [item for row in dataset[\"ground_truths\"]\n                   [:sample_size] for item in row]\n# Break sample context into chunks to use with vector search.\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=400, chunk_overlap=100, add_start_index=True\n)\nchunks: List[str] = []\nfor context in sample_contexts:\n    split_chunks = text_splitter.split_text(context)\n    chunks.extend(split_chunks)\n# Embedding models that we are evaluating.\nopenai_embedding_models = [\"text-embedding-ada-002\", \"text-embedding-3-large\"]\n# Ragas evaluation config to use in all evaluations.\nragas_run_config = RunConfig(max_workers=4, max_wait=180)\n# #Evaluate each embedding model\nfor embedding_model in openai_embedding_models:\n    # Create an in-memory vector store for the evaluation.\n    db = FAISS.from_texts(\n        chunks, OpenAIEmbeddings(openai_api_key=openai_api_key, model=embedding_model))\n    # Get retrieved context using similarity search.\n    retrieval_contexts: List[str] = []\n    for question in sample_questions:\n        search_results = db.similarity_search(question)\n        retrieval_contexts.append(list(map(\n            lambda result: result.page_content, search_results)))\n    # Run evaluation for context relevancy of retrieved information.\n    result = evaluate(\n        dataset=Dataset.from_dict({\n            \"question\": sample_questions,\n            \"contexts\": retrieval_contexts,\n            \"ground_truth\": sample_ground_truths\n        }),\n        metrics=[context_entity_recall],\n        run_config=ragas_run_config,\n        raise_exceptions=False,\n        llm=ChatOpenAI(openai_api_key=openai_api_key, model_name=\"gpt-4o-mini\")\n    )\n    # Print out results\n    print(f\"Results for embedding model '{embedding_model}':\")\n    print(result)\n```", "```py\n\nResults for embedding model 'text-embedding-ada-002': {'context_entity_recall': 0.5687}\nResults for embedding model 'text-embedding-3-large': {'context_entity_recall': 0.5973}\n```", "```py\n\n\"I love eating apples.\"\n```", "```py\n\n\"Apples are my favorite fruit.\"\n```", "```py\n\n\"Apple is a tech company.\"\n```", "```py\n\npip3 install sentence-transformers==3.0.1 torch==2.2.2\n```", "```py\n\nfrom sentence_transformers import SentenceTransformer, InputExample, losses, util\nfrom torch.utils.data import DataLoader\n# Load embedding model\nmodel = SentenceTransformer(\"Alibaba-NLP/gte-base-en-v1.5\", trust_remote_code=True)\n# Function to print similarity score\ndef get_similarity_score():\n    sentence1 = \"I love the taste of fresh apples.\"\n    sentence2 = \"Apples are rich in vitamins and fiber.\"\n    embedding1 = model.encode(sentence1)\n    embedding2 = model.encode(sentence2)\n    cosine_score = util.cos_sim(embedding1, embedding2)\n    score_number = cosine_score.item()\n    print(f\"Cosine similarity between '{sentence1}' and '{sentence2}': {score_number:.4f}\")\n    return cosine_score\n# Print similarity score before training\nprint(\"Before training:\")\nsimilarity_before = get_similarity_score()\ntrain_examples = [\n    InputExample(texts=[\"I love eating apples.\", \"Apples are my favorite fruit\", \"Apple is a tech company\"]),\n    InputExample(texts=[\"Chocolate is a sweet treat loved by many.\", \"I can't resist a good piece of chocolate.\", \"Chocolate Rain was one of the most popular songs on YouTube from 2007.\"]),\n    InputExample(texts=[\"Ice cream is a refreshing dessert.\", \"I love trying different ice cream flavors.\", \"The rapper and actor Ice Cube was wearing a cream colored suit to the VMAs.\"]),\n    InputExample(texts=[\"Salad is a healthy meal option.\", \"I love a fresh, crisp salad with various vegetables.\", \"Salad Fingers is a surreal web series created by David Firth.\"]),\n]\ntrain_dataloader = DataLoader(train_examples, shuffle=True, batch_size=8)\ntrain_loss = losses.TripletLoss(model=model)\n# fine tune\nmodel.fit(train_objectives=[(train_dataloader, train_loss)], epochs=10)\nprint(\"After training:\")\nsimilarity_after = get_similarity_score()\nsimilarity_difference = similarity_after - similarity_before\nprint(f\"Change in similarity score: {similarity_difference.item():4f}\")\n```", "```py\n\nBefore training:\nCosine similarity between 'I love the taste of fresh apples.' and 'Apples are rich in vitamins and fiber.': 0.4402\n[10/10 00:05, Epoch 10/10]\nAfter training:\nCosine similarity between 'I love the taste of fresh apples.' and 'Apples are rich in vitamins and fiber.': 0.4407\nChange in similarity score: 0.000540\n```", "```py\n\n# Roasted Garlic and Tomato Pasta\n## Ingredients\n- 8 oz pasta\n- 1 head garlic\n- 1 pint cherry tomatoes\n- 1/4 cup olive oil\n- 1/2 cup fresh basil, chopped\n- Salt and pepper\n## Instructions\n1\\. Preheat oven to 400°F (200°C).\n2\\. Cut the top off the garlic head, drizzle with olive oil, wrap in foil, and roast for 30 minutes.\n3\\. Roast cherry tomatoes with olive oil, salt, and pepper for 20 minutes until blistered.\n4\\. Cook pasta according to package instructions. Mix pasta with roasted garlic (squeezed out), tomatoes, and olive oil.\n5\\. Stir in basil, season with salt and pepper, and serve.\nYield: 4 servings\n```", "```py\n\n---\ncontentType: recipe\nrecipeTitle: Roasted Garlic and Tomato Pasta\nkeyIngredients: pasta, garlic, tomatoes, olive oil, basil\nservings: 4\ntags: [dinner, Italian, vegetarian]\nsummary: A simple pasta dish featuring roasted garlic and cherry tomatoes in a light sauce\n---\n# Roasted Garlic and Tomato Pasta\n## Ingredients\n- 8 oz pasta\n...other ingredients\n## Instructions\n1\\. Preheat your oven to 400°F (200°C).\n   ...other instructions\nYield: 4 servings\n```", "```py\n\nI have tomatoes, basil and pasta in my fridge. What to make?\n```", "```py\n\nsimple vegetarian pasta with roasted vegetables\n```", "```py\n\nvegetarian italian pasta dinner\n```", "```py\n\ncontentType: recipe\n```", "```py\n\nrecipeTitle: Roasted Garlic and Tomato Pasta\n```", "```py\n\nkeyIngredients: pasta, garlic, tomatoes, olive oil, basil\n```", "```py\n\nservings: 4\n```", "```py\n\ntags: [dinner, Italian, vegetarian]\n```", "```py\n\nsummary: A simple pasta dish featuring roasted garlic and cherry tomatoes in a light sauce\n```", "```py\n\n{\n```", "```py\n\n  \" contentType\": \"recipe\",\n```", "```py\n\n  \" recipeTitle\": \"Roasted Garlic and Tomato Pasta\",\n```", "```py\n\n  \" keyIngredients\": \"pasta, garlic, tomatoes, olive oil, basil\",\n```", "```py\n\n  \" servings\": 4,\n```", "```py\n\n  \" tags\": [\n```", "```py\n\n    \"dinner\",\n```", "```py\n\n    \"Italian\",\n```", "```py\n\n    \"vegetarian\"\n```", "```py\n\n  ],\n```", "```py\n\n  \" summary\": \"A simple pasta dish featuring roasted garlic and cherry tomatoes in a light sauce\"\n```", "```py\n\n}\n```", "```py\n\n---\nfoo: bar\nletters:\n  - a\n  - b\n  - c\n---\n# Title\nSome **body** text!\n```", "```py\n\npip3 install python-frontmatter==1.1.0\n```", "```py\n\nimport frontmatter\n# Define the text content\ntext = \"\"\"# Roasted Garlic and Tomato Pasta\n## Ingredients\n- 8 oz pasta\n- 1 head garlic\n- 1 pint cherry tomatoes\n- 1/4 cup olive oil\n- 1/2 cup fresh basil, chopped\n- Salt and pepper\n## Instructions\n1\\. Preheat oven to 400°F (200°C).\n2\\. Cut the top off the garlic head, drizzle with olive oil, wrap in foil, and roast for 30 minutes.\n3\\. Roast cherry tomatoes with olive oil, salt, and pepper for 20 minutes until blistered.\n4\\. Cook pasta according to package instructions. Mix pasta with roasted garlic (squeezed out), tomatoes, and olive oil.\n5\\. Stir in basil, season with salt and pepper, and serve.\nYield: 4 servings\n\"\"\"\n# Define the dictionary to be added as frontmatter\nmetadata = {\n    \"contentType\": \"recipe\",\n    \"recipeTitle\": \"Roasted Garlic and Tomato Pasta\",\n    \"keyIngredients\": [\"pasta\", \"garlic\", \"tomatoes\", \"olive oil\", \"basil\"],\n    \"servings\": 4,\n    \"tags\": [\"dinner\", \"Italian\", \"vegetarian\"],\n    \"summary\": \"A simple pasta dish featuring roasted garlic and cherry tomatoes in a light sauce\"\n}\n# Create a frontmatter object with the metadata and content\npost = frontmatter.Post(text, **metadata)\nprint(\"Text with front matter:\")\nprint(frontmatter.dumps(post))\nprint(\"\\n------\\n\")\nprint(\"You can also extract the front matter as a dict:\")\nprint(post.metadata)\n```", "```py\n\n---\ncontentType: recipe\nkeyIngredients: [\"pasta\", \"garlic\", \"tomatoes\", \"olive oil\", \"basil\"]recipeTitle: Roasted Garlic and Tomato Pasta\nservings: 4\nsummary: A simple pasta dish featuring roasted garlic and cherry tomatoes in a light sauce\ntags: [\"dinner\", \"Italian\", \"vegetarian\"]\n---\n# Roasted Garlic and Tomato Pasta\n## Ingredients\n- 8 oz pasta\n...other ingredients\n## Instructions\n1\\. Preheat your oven to 400°F (200°C).\n...other instructions\nYield: 4 servings\n------\nYou can also extract the front matter as a dict:\n{'contentType': 'recipe', 'recipeTitle': 'Roasted Garlic and Tomato Pasta', 'keyIngredients': ['pasta', 'garlic', 'tomatoes', 'olive oil', 'basil'], 'servings': 4, 'tags': ['dinner', 'Italian', 'vegetarian'], 'summary': 'A simple pasta dish featuring roasted garlic and cherry tomatoes in a light sauce'}\n```", "```py\n\ncontentType: recipe\nsource: The MongoDB Cooking School Cookbook\n```", "```py\n\n---\nheaders:\n  - text: Vegetable Stir-Fry\n    level: h1\n  - text: Ingredients\n    level: h2\n  - text: Vegetable Preparation\n    level: h3\n  - text: Instructions\n    level: h2\n  - text: Cooking the Stir-Fry\n    level: h3\n  - text: Serving\n    level: h3\n---\n# Vegetable Stir-Fry\nA quick and easy stir-fry with fresh veggies and a savory sauce.\n## Ingredients\n- 2 cups mixed vegetables (e.g., broccoli, carrots, bell peppers)...other ingredients\n### Vegetable Preparation\n- Wash and chop the vegetables into bite-sized pieces.\n...other preparation\n## Instructions\n### Cooking the Stir-Fry\n1\\. Heat the sesame oil in a large skillet or wok over high heat.\n...other instructions\n### Serving\n- Serve hot over steamed rice or noodles.\n...other instructions\nServes 4\n```", "```py\n\npip3 install openai==1.39.0 pydantic==2.8.2\n```", "```py\n\nimport os\nfrom openai import OpenAI\nfrom pydantic import BaseModel\nimport json\n# Create client to call model\napi_key = os.environ[\"OPENAI_API_KEY\"]\nclient = OpenAI(\n    api_key=api_key,\n)\n# Format response structure\nclass TopicsResult(BaseModel):\n    topics: list[str]\nfunction_definition = {\n    \"name\": \"get_topics\",\n    \"description\": \"Extract the key topics from the text\",\n    \"parameters\": json.loads(TopicsResult.schema_json())\n}\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    functions=[function_definition],\n    function_call={ \"name\": function_definition[\"name\"] },\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"Extract key topics from the following text. Include no more than 3 key terms. Format response as a JSON object.\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"Eggs, like milk, form a typical food, inasmuch as they contain all the elements, in the right proportion, necessary for the support of the body. Their highly concentrated, nutritive value renders it necessary to use them in combination with other foods rich in starch (bread, potatoes, etc.). In order that the stomach may have enough to act upon, a certain amount of bulk must be furnished.\"\n        }\n    ],\n)\n# Get model results as a dict\ncontent = TopicsResult.model_validate(json.loads(response.choices[0].message.function_call.arguments))\nprint(f\"Topics: {content.topics}\")\n```", "```py\n\nTopics: ['eggs', 'milk', 'nutritive value']\n```", "```py\n\n---\ncontentType: recipe\nkeyIngredients: apples, sugar, butter\ntags: [dessert, pie]\n---\napple pie recipe\n```", "```py\n\n---\ncontentType: recipe\nrecipeTitle: Classic Apple Pie\nkeyIngredients: apples, pie crust, sugar, cinnamon, butter\nservings: 8\ntags: [dessert, baking, American, fruit]\nsummary: A classic apple pie with a flaky crust and a sweet, cinnamon-spiced apple filling.\n---\n# Classic Apple Pie\n## Ingredients\n- 1 premade pie crust\n- 1 can apple pie filling\n- 1 teaspoon ground cinnamon\n- 1 egg, beaten (for egg wash)\n## Instructions\n1\\. Preheat oven to 425°F (220°C). Place the premade crust in a 9-inch pie plate.\n2\\. Pour the apple pie filling into the crust and sprinkle with cinnamon.\n3\\. Cover with the top crust, trim and crimp edges, and cut slits for steam. Brush with egg wash.\n4\\. Bake for 15 minutes, reduce temperature to 350°F (175°C), and bake for another 30-35 minutes until golden brown. Cool before serving.\nYield: 8 servings\n```", "```py\n\npip3 install openai==1.39.0 pydantic==2.8.2\n```", "```py\n\nfrom openai import OpenAI\nfrom pydantic import BaseModel\nimport json\nfrom typing import Literal, Optional\n# Create client to call model\napi_key = os.environ[\"OPENAI_API_KEY\"]\nclient = OpenAI(\n    api_key=api_key,\n)\n# Create classifier\nclass ContentTopic(BaseModel):\n    topic: Optional[Literal[\n        \"nutritional_information\",\n        \"equipment\",\n        \"cooking_technique\",\n        \"recipe\"\n    ]]\nfunction_definition = {\n    \"name\": \"classify_topic\",\n    \"description\": \"Extract the key topics from the query\",\n    \"parameters\": json.loads(ContentTopic.schema_json())\n}\n# The topic classifier uses few-shot examples to optimize the classification task.\ndef get_topic(query: str):\n    response = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    functions=[function_definition],\n    function_call={ \"name\": function_definition[\"name\"] },\n    temperature=0,\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"\"\"Extract the topic of the following user query about cooking.\nOnly use the topics present in the content topic classifier function.\nIf you cannot tell the query topic or it is not about cooking, respond `null`. Output JSON.\nYou MUST choose one of the given content topic types.\nExample 1:\nUser:  \"How many grams of sugar are in a banana?\"\nAssistant: '{\"topic\": \"nutritional_information\"}'\nExample 2:\nUser: \"What are the ingredients for a classic margarita?\"\nAssistant: '{\"topic\": \"recipe\"}'\nExample 3:\nUser: \"What kind of knife is best for chopping vegetables?\"\nAssistant: '{\"topic\": \"equipment\"}'\nExample 4:\nUser: \"What is a quick recipe for chicken stir-fry?\"\nAssistant: '{\"topic\": \"recipe\"}'\nExample 5:\nUser: Who is the best soccer player ever?\nAssistant: '{\"topic\": null}'\nExample 6:\nUser: Explain gravity to me\nAssistant: '{\"topic\": null}'\"\"\",\n          },\n          {\n              \"role\": \"user\",\n              \"content\": query\n          }\n      ],\n    )\n    content = ContentTopic.model_validate(json.loads(response.choices[0].message.function_call.arguments))\n    return content.topic\n## Test the classifier\nqueries = [\n    \"what's a recipe for vegetarian spaghetti?\",\n    \"what is the best way to poach an egg?\",\n    \"What blender setting should I use to make a fruit smoothie?\",\n    \"Can you give me a recipe for chocolate chip cookies?\",\n    \"Why is the sky blue?\"\n]\nfor query in queries:\n    print(f\"Query: {query}\")\n    print(f\"Topic: {get_topic(query)}\")\n    print(\"---\")\n    class ContentTopic(BaseModel):\n    topic: Optional[Literal[\n        \"nutritional_information\",\n        \"equipment\",\n        \"cooking_technique\",\n        \"recipe\"\n    ]]\n```", "```py\n\nQuery: what's a recipe for vegetarian spaghetti?\nTopic: recipe\n---\nQuery: what is the best way to poach an egg?\nTopic: cooking_technique\n---\nQuery: What blender setting should I use to make a fruit smoothie?\nTopic: equipment\n---\nQuery: Can you give me a recipe for chocolate chip cookies?\nTopic: recipe\n---\nQuery: Why is the sky blue?\nTopic: None\n---\n```", "```py\n\nSimple Vegan Soup\n```", "```py\n\nIngredients\n```", "```py\n\n- 1 can diced tomatoes\n```", "```py\n\n- 1 cup vegetable broth\n```", "```py\n\n- 1 cup mixed frozen vegetables\n```", "```py\n\n Instructions\n```", "```py\n\n1\\. In a medium pot, combine the diced tomatoes, vegetable broth, and mixed frozen vegetables.\n```", "```py\n\n2\\. Bring to a boil, then reduce heat and simmer for 10-15 minutes, or until the vegetables are heated through. Serve hot.\n```", "```py\n\n# Simple Vegan Soup\n```", "```py\n\n## Ingredients\n```", "```py\n\n- 1 can diced tomatoes\n```", "```py\n\n- 1 cup vegetable broth\n```", "```py\n\n- 1 cup mixed frozen vegetables\n```", "```py\n\n## Instructions\n```", "```py\n\n1\\. In a medium pot, combine the diced tomatoes, vegetable broth, and mixed frozen vegetables.\n```", "```py\n\n2\\. Bring to a boil, then reduce heat and simmer for 10-15 minutes, or until the vegetables are heated through. Serve hot.\n```", "```py\n\n<h1 id=\"simple-vegan-soup\">Simple Vegan Soup</h1>\n```", "```py\n\n<h2 id=\"ingredients\">Ingredients</h2>\n```", "```py\n\n<ul>\n```", "```py\n\n<li>1 can diced tomatoes</li>\n```", "```py\n\n<li>1 cup vegetable broth</li>\n```", "```py\n\n<li>1 cup mixed frozen vegetables</li>\n```", "```py\n\n</ul>\n```", "```py\n\n<h2 id=\"instructions\">Instructions</h2>\n```", "```py\n\n<ol>\n```", "```py\n\n<li>In a medium pot, combine the diced tomatoes, vegetable broth, and mixed frozen vegetables.</li>\n```", "```py\n\n<li>Bring to a boil, then reduce heat and simmer for 10-15 minutes, or until the vegetables are heated through. Serve hot.</li>\n```", "```py\n\n</ol>\n```"]