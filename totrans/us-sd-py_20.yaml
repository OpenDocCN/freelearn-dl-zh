- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Creating Interactive User Interfaces
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建交互式用户界面
- en: In previous chapters, we used only Python code and Jupyter Notebook to achieve
    various tasks using Stable Diffusion. In some scenarios, we need an interactive
    user interface not only for easier testing but also for a better user experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们仅使用 Python 代码和 Jupyter Notebook 实现了使用 Stable Diffusion 的各种任务。在某些场景中，我们不仅需要交互式用户界面以便更容易测试，还需要更好的用户体验。
- en: Imagine we have built an application using Stable Diffusion. How can we publish
    it to the public or non-technical users to try it out? In this chapter, we are
    going to use an open sourced interactive UI framework, Gradio [1], to encapsulate
    diffusers code and provide a web-based UI, using only Python.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经使用 Stable Diffusion 构建了一个应用程序。我们如何将其发布给公众或非技术用户以尝试它？在本章中，我们将使用一个开源的交互式
    UI 框架，Gradio [1]，来封装 diffusers 代码，并仅使用 Python 提供基于网络的 UI。
- en: 'This chapter won''t delve into every aspect of Gradio usage. Instead, we''ll
    focus on giving you a high-level overview of its fundamental building blocks,
    all with a specific goal in mind: demonstrating how to construct a Stable Diffusion
    text-to-image pipeline using Gradio.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会深入探讨 Gradio 的所有使用方面。相反，我们将专注于提供一个高级概述，介绍其基本构建块，所有这些都有特定的目标：展示如何使用 Gradio
    构建一个 Stable Diffusion 文本到图像的管道。
- en: 'In this chapter, we will cover these topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Gradio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Gradio
- en: Gradio fundamentals
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradio 基础知识
- en: Building a Stable Diffusion text-to-image pipeline with Gradio
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Gradio 构建 Stable Diffusion 文本到图像管道
- en: Let’s start.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始。
- en: Introducing Gradio
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Gradio
- en: Gradio is a Python library that makes it easy to build beautiful, interactive
    web interfaces for machine learning models and data science workflows. It is a
    high-level library that abstracts away the details of web development so you can
    focus on building your model and interface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Gradio 是一个 Python 库，它使构建机器学习模型和数据科学工作流程的美丽、交互式网络界面变得容易。它是一个高级库，它抽象化了网络开发的细节，这样你就可以专注于构建你的模型和界面。
- en: 'The A1111 Stable Diffusion Web UI that we mentioned several times in previous
    chapters uses Gradio as the user interface, and many researchers use this framework
    for a quick demo of their most recent work. Here are some reasons why Gradio is
    the prevailing user interface:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面几章中多次提到的 A1111 Stable Diffusion Web UI 使用 Gradio 作为用户界面，许多研究人员使用这个框架来快速展示他们最新的工作。以下是
    Gradio 成为主流用户界面的几个原因：
- en: '**Easy to use**: Gradio’s simple API makes it easy to create interactive web
    interfaces in just a few lines of code'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于使用**：Gradio 的简单 API 使你只需几行代码就能创建交互式网络界面'
- en: '**Flexible**: Gradio can be used to create a wide variety of interactive web
    interfaces, from simple sliders to complex chatbots'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活**：Gradio 可以用来创建各种交互式网络界面，从简单的滑块到复杂的聊天机器人'
- en: '**Extensible**: Gradio is extensible, so you can customize the look and feel
    of your interfaces or add new features'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展**：Gradio 是可扩展的，因此你可以自定义界面的外观和感觉或添加新功能'
- en: '**Open source**: Gradio is open source, so you can contribute to the project
    or use it in your projects'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**：Gradio 是开源的，因此你可以为项目做出贡献或在项目中使用它'
- en: Another feature of Gradio that doesn’t exist in other similar frameworks is
    that Gradio interfaces can be embedded in Python notebooks or presented as standalone
    web pages (you will find out why this notebook embedding feature is cool when
    you see it).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Gradio 的另一个特性是其他类似框架中不存在的，即 Gradio 界面可以嵌入到 Python 笔记本中，或作为独立的网页展示（当你看到这个笔记本嵌入功能时，你会知道为什么这个特性很酷）。
- en: If you have been running Stable Diffusion using diffusers, your Python environment
    should be ready for Gradio. In case this is the first chapter of your reading
    journey, make sure you have Python 3.8 or a higher version installed on your machine.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用 diffusers 运行过 Stable Diffusion，你的 Python 环境应该已经为 Gradio 准备就绪。如果这是你阅读旅程的第一章，请确保你的机器上已安装
    Python 3.8 或更高版本。
- en: Now that we know what Gradio is, let’s learn how to set it up.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Gradio 是什么，让我们学习如何设置它。
- en: Getting started with Gradio
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Gradio
- en: 'In this section, we will learn about the bare minimum setup needed to spin
    up a Gradio application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解启动 Gradio 应用程序所需的最小设置。
- en: 'Install Gradio using `pip`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装 Gradio：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Please also ensure you update the following two packages to the newest version:
    `click` and `uvicorn`:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请确保您更新以下两个包到最新版本：`click` 和 `uvicorn`：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a Jupyter Notebook cell and write or copy the following code in the
    cell:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jupyter Notebook 单元中创建一个单元格，并在单元格中编写或复制以下代码：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Executing it will not pop out a new web browser window. Instead, the UI will
    be embedded inside the Jupyter Notebook result panel.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 执行它不会弹出一个新的网络浏览器窗口。相反，UI 将嵌入到 Jupyter Notebook 的结果面板中。
- en: 'Of course, you can copy and paste the local URL – `http: //127.0.0 .1:78 60`
    – to any local browser to view it.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以复制并粘贴本地 URL – `http://127.0.0.1:7860` – 到任何本地浏览器中查看。
- en: 'Be aware that the next time you execute the code in another Jupyter Notebook''s
    cell, a new server port will be allocated, such as `7861`. Gradio won’t take back
    the assigned server port automatically. We can use one additional line of code
    – `gr.close_all()` – to ensure all liveports are released before the launch. Update
    the code as shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，下次你在另一个 Jupyter Notebook 的单元格中执行代码时，将分配一个新的服务器端口，例如 `7861`。Gradio 不会自动回收分配的服务器端口。我们可以使用一行额外的代码
    – `gr.close_all()` – 来确保在启动之前释放所有活动端口。按照以下代码更新：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Both the code and the embedded Gradio interface will be shown in *Figure 20**.1*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 代码和嵌入的 Gradio 界面都将显示在 *图 20.1* 中：
- en: '![Figure 20.1: Gradio UI embedded in Jupyter Notebook cell](img/B21263_20_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.1：Gradio UI 嵌入 Jupyter Notebook 单元格](img/B21263_20_01.jpg)'
- en: 'Figure 20.1: Gradio UI embedded in Jupyter Notebook cell'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.1：Gradio UI 嵌入 Jupyter Notebook 单元格
- en: Note that the Jupyter Notebook is running in Visual Studio Code. It also works
    in Google Colab or independently installed Jupyter Notebook.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Jupyter Notebook 正在 Visual Studio Code 中运行。它也适用于 Google Colab 或独立安装的 Jupyter
    Notebook。
- en: Alternatively, we can start a Gradio application from the terminal.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以从终端启动 Gradio 应用程序。
- en: Starting a web application in Jupyter Notebook is good for testing and proof
    of concept demonstration. When deploying an application, we’d better start it
    from the terminal.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter Notebook 中启动网络应用程序对于测试和概念验证演示很有用。当部署应用程序时，我们最好从终端启动它。
- en: 'Create a new file called `gradio_app.py`, and use the same code we used in
    *step 2*. Use a new port number, such as `7861`, to avoid conflict with the already
    used `7860`. Then launch the application from the terminal:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `gradio_app.py` 的新文件，并使用我们在 *步骤 2* 中使用的相同代码。使用一个新的端口号，例如 `7861`，以避免与已使用的
    `7860` 冲突。然后从终端启动应用程序：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That is all set. Next, let’s gain some familiarity with the fundamental building
    blocks of Gradio.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就设置好了。接下来，让我们熟悉一下 Gradio 的基本构建块。
- en: Gradio fundamentals
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradio 基础知识
- en: The preceding sample code is reformed from the Gradio official quick start tutorial.
    When we look at the code, lots of details are hidden. We don’t know where the
    `Clear` button is, we don’t specify the `Submit` button, and we don’t know what
    the `Flag` button is.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例代码是从 Gradio 官方快速入门教程中改编的。当我们查看代码时，很多细节都被隐藏了。我们不知道 `Clear` 按钮在哪里，我们没有指定 `Submit`
    按钮，也不知道 `Flag` 按钮是什么。
- en: Before using Gradio for any serious applications, we need to understand every
    line of code and ensure every element is under control.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Gradio 进行任何严肃的应用之前，我们需要理解每一行代码，并确保每个元素都在控制之下。
- en: Instead of using the `Interface` function to automatically provide the layout,
    `Blocks` may provide a better way for us to add interface elements with explicit
    declaration.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 `Interface` 函数自动提供布局不同，`Blocks` 可能为我们提供了更好的方法来使用显式声明添加界面元素。
- en: Gradio Blocks
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradio Blocks
- en: 'The `Interface` function provides an abstraction level to easily create quick
    demos, but there is an abstraction layer. Easy comes with a price. `Blocks`, on
    the other hand, is a low-level approach to lay out elements and define data flows.
    With the help of `Blocks`, we can precisely control the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Interface` 函数提供了一个抽象层，可以轻松创建快速演示，但有一个抽象层。简单是有代价的。另一方面，`Blocks` 是一种低级方法，用于布局元素和定义数据流。借助
    `Blocks`，我们可以精确控制以下内容：'
- en: The layout of components
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的布局
- en: The events that trigger actions
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发动作的事件
- en: The direction of the data flow
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据流的方向
- en: 'An example will explain it better:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子将更好地解释它：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code will produce an interface as shown in *Figure 20**.2*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码将生成如图 *图 20.2* 所示的界面：
- en: '![Figure 20.2: Stack Gradio UI using Blocks](img/B21263_20_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.2：使用 Blocks 构建 Gradio UI](img/B21263_20_02.jpg)'
- en: 'Figure 20.2: Stack Gradio UI using Blocks'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.2：使用 Blocks 构建 Gradio UI
- en: All elements under `Blocks` will be shown in the UI. The text for the UI elements
    is defined by us too. In the `click` event, we defined the `fn` event function,
    `inputs`, and `outputs`. Finally, launch the application using `demo.launch(server_port
    =` `7860)`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Blocks` 下的所有元素都将显示在 UI 中。UI 元素的文本也是由我们定义的。在 `click` 事件中，我们定义了 `fn` 事件函数、`inputs`
    和 `outputs`。最后，使用 `demo.launch(server_port = '7860')` 启动应用程序。
- en: 'In line with one of Python’s guiding principles: “*Explicit is better than
    implicit*”, we strive for clarity and simplicity in our code.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循 Python 的一个指导原则：“*明确优于隐晦*”，我们努力使代码清晰简洁。
- en: Inputs and outputs
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入和输出
- en: 'The code in the *Gradio Blocks* section uses only one input and one output.
    We can provide multiple inputs and outputs, as shown in the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Gradio Blocks* 部分的代码中，只使用了一个输入和一个输出。我们可以提供多个输入和输出，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is shown in *Figure 20**.3*:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在 *图 20**.3* 中：
- en: '![Figure 20.3: Gradio UI with multiple inputs and outputs](img/B21263_20_03.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.3：带有多个输入和输出的 Gradio UI](img/B21263_20_03.jpg)'
- en: 'Figure 20.3: Gradio UI with multiple inputs and outputs'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.3：带有多个输入和输出的 Gradio UI
- en: Simply stack the element under `with gradio.Blocks() as demo:` and provide inputs
    and outputs in `list`. Gradio will automatically take the values from the inputs
    and forward them to the `greet` bind function. The outputs will take the return
    tuple value from the associated function.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地将元素堆叠在 `with gradio.Blocks() as demo:` 之下，并在 `list` 中提供输入和输出。Gradio 将自动从输入中获取值并将它们转发到
    `greet` 绑定函数。输出将采用相关函数返回的元组值。
- en: Next, replace the elements with a prompt and output image components. This approach
    can be applied to build a web-based Stable Diffusion pipeline. However, before
    proceeding, we need to explore how to integrate a progress bar into our interface.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，用提示和输出图像组件替换元素。这种方法可以应用于构建基于网页的 Stable Diffusion 管道。然而，在继续之前，我们需要探索如何将进度条集成到我们的界面中。
- en: Building a progress bar
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建进度条
- en: To use a progress bar in Gradio, we can add a `progress` argument to the associated
    event function. The `Progress` object will be used to track the progress of the
    function, and it will be displayed to the user as a progress bar.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Gradio 中使用进度条，我们可以在相关的事件函数中添加一个 `progress` 参数。`Progress` 对象将用于跟踪函数的进度，并以进度条的形式显示给用户。
- en: Here is an example of how to use a progress bar in Gradio.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 Gradio 中使用进度条的示例。
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we manually update the progress bar with `progress(i/10,
    desc=f"{i}")`. After each sleep, the progress bar will move forward 10%.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 `progress(i/10, desc=f"{i}")` 手动更新进度条。每次休眠后，进度条将前进 10%。
- en: After clicking the **Run** button, the progress bar will appear in the position
    of the output textbox. We will use a similar approach to apply the progress bar
    for the Stable Diffusion pipeline in the next section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **运行** 按钮后，进度条将出现在输出文本框的位置。我们将使用类似的方法在下一节中应用 Stable Diffusion 管道的进度条。
- en: Building a Stable Diffusion text-to-image pipeline with Gradio
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Gradio 构建稳定的扩散文本到图像管道
- en: 'With all preparations ready, now let’s build a Stable Diffusion text-to-image
    pipeline with Gradio. The UI interface will include the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 准备就绪后，现在让我们使用 Gradio 构建一个稳定的扩散文本到图像管道。UI 界面将包括以下内容：
- en: A prompt input box
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个提示输入框
- en: A negative prompt input box
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个负提示输入框
- en: A button with the `Generate` label
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有 `Generate` 标签的按钮
- en: A progress bar when the `Generate` button is clicked
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 **生成** 按钮时的进度条
- en: An output image
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个输出图像
- en: 'Here is the code that implements these five elements:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是实现这五个元素的代码：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding code, we first launch the `text2img_pipe` pipeline to VRAM,
    followed by creating a `text2img` function, which will be called by the Gradio
    event button. Note the `lambda` expression:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先启动 `text2img_pipe` 管道到 VRAM，然后创建一个 `text2img` 函数，该函数将由 Gradio 事件按钮调用。注意
    `lambda` 表达式：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We will pass the progress bar into the diffusers denoising loop. Each denoising
    step will then update the progress bar.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进度条传递到 diffusers 的去噪循环中。然后，每个去噪步骤将更新进度条。
- en: 'The last part of the code is the Gradio elements `Block` stack. The code also
    gives Gradio a new theme:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后部分是 Gradio 元素 `Block` 堆栈。代码还给了 Gradio 一个新的主题：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now you should be able to run the code and generate some images in both Jupyter
    Notebook and any local web browser.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够在 Jupyter Notebook 和任何本地网页浏览器中运行代码并生成一些图像。
- en: 'The progress bar and the result are shown in *Figure 20**.4*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条和结果显示在 *图 20**.4* 中：
- en: '![Figure 20.4: Gradio UI with progress bar](img/B21263_20_04.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 20.4：带有进度条的 Gradio UI](img/B21263_20_04.jpg)'
- en: 'Figure 20.4: Gradio UI with progress bar'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.4：带有进度条的 Gradio UI
- en: You can add more elements and features to this sample application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向这个示例应用程序添加更多元素和功能。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: At the time of writing this chapter (December 2023), there isn’t much information
    or sample code to help us get started using diffusers with Gradio. We wrote this
    chapter to help quickly build up a Stable Diffusion application in Web UI so that
    we can share the result with others in minutes without touching one line of HTML,
    CSS, or JavaScript, using pure Python throughout the building process.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本章（2023年12月）时，关于使用 Gradio 与 diffusers 开始的信息或示例代码并不多。我们编写本章是为了帮助快速构建一个 Web
    UI 的 Stable Diffusion 应用程序，这样我们就可以在几分钟内与他人分享结果，而不需要接触一行 HTML、CSS 或 JavaScript，在整个构建过程中使用纯
    Python。
- en: This chapter introduced Gradio, what it can do, and why it is popular. We didn’t
    touch on every bit of Gradio; we believe that its official document [1] does this
    job better. Instead, we used a simple example to explain the backbone of Gradio
    and what we need to prepare to build a Stable Diffusion Web UI with Gradio.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Gradio，它所能做到的事情以及它为何如此受欢迎。我们没有详细讨论 Gradio 的每一个功能；我们相信它的官方文档[1]在这方面做得更好。相反，我们用一个简单的例子来解释
    Gradio 的核心以及构建一个使用 Gradio 的 Stable Diffusion Web UI 所需准备的内容。
- en: Finally, we introduced `Blocks`, `inputs`, `outputs`, the progress bar, and
    event bindings all together and built up a tiny but fully functioning Stable Diffusion
    pipeline in Gradio.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们一次性介绍了 `Blocks`、`inputs`、`outputs`、进度条和事件绑定，并在 Gradio 中构建了一个虽小但功能齐全的 Stable
    Diffusion 管道。
- en: 'In the next chapter, we will delve into a relatively complex topic: model fine-tuning
    and LoRA training.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨一个相对复杂的话题：模型微调和 LoRA 训练。
- en: References
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Gradio: Build Machine Learning Web Apps — in Python: [https://github.com/gradio-app/gradio](https://github.com/gradio-app/gradio)'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gradio：使用 Python 构建机器学习 Web 应用 — [https://github.com/gradio-app/gradio](https://github.com/gradio-app/gradio)
- en: 'Gradio QuickStart: [https://www.gradio.app/guides/quickstart](https://www.gradio.app/guides/quickstart)'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gradio 快速入门：[https://www.gradio.app/guides/quickstart](https://www.gradio.app/guides/quickstart)
