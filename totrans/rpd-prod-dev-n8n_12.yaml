- en: '*Chapter 9*: Building the User Interface of the Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the main focus of this book is to teach you how to use n8n to build application
    workflows and connect various tools together, it is extremely important that your
    applications have a proper **user interface** (**UI**). This is the primary way
    that people interact with your product and is the biggest aspect of the **user
    experience** (**UX**).
  prefs: []
  type: TYPE_NORMAL
- en: Having spent time learning about how the Bubble **application programming interface**
    (**API**) works in the previous chapter, we have a good understanding of what
    happens with Bubble "under the hood." Now, we will be using Bubble to build a
    UI and a design model that will allow you to create your own UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing responsive design for your web app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with events in Bubble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating data in Bubble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the application structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with errors in Bubble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have completed this chapter, you will know how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Design responsive applications using the Bubble **graphical UI** (**GUI**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how the look and feel of an application can change the UX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand underlying data structures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guide users in entering appropriate data to fit into data structures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify errors in applications and workflows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proactively handle how errors are presented to users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design a logging system to capture events and errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze data captured in logs for application improvement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start this chapter by looking at responsive design and implementing it
    into your Bubble web application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing responsive design for your web app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Responsive design is a methodology for building web-based applications that
    display information correctly, regardless of the device or screen/window size.
    The ability to view information on various devices and screen sizes has become
    increasingly important over the last decade. The following screenshot reflects
    this trend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Desktop versus mobile usage over the last decade'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Desktop versus mobile usage over the last decade
  prefs: []
  type: TYPE_NORMAL
- en: According to *StatCounter* ([https://gs.statcounter.com/platform-market-share/desktop-mobile/worldwide/#monthly-201111-202111](https://gs.statcounter.com/platform-market-share/desktop-mobile/worldwide/#monthly-201111-202111)),
    10 years ago, over 93% of people were accessing the internet using their computer.
    Today, that number has dropped to around 44%. More people have gone from large
    computer screens to smaller mobile devices to interact with web-based UIs. Because
    of this, it is critical that your web app looks good and is easy to use, regardless
    of whether you are using it on your 30-inch computer monitor or your 4-inch phone
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design factors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For your application to work responsively, here are some factors to consider
    when building your application.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Responsive Viewer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the **Design** tab of the Bubble application interface, you find the **Responsive**
    tab located to the right of the **UI Builder** tab. The **Responsive Viewer**
    allows you to see what your page looks like on different-sized devices.
  prefs: []
  type: TYPE_NORMAL
- en: Minimum width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Increase the minimum width of elements to use more of the page margins. Larger
    minimum widths make your design look better on smaller screens.
  prefs: []
  type: TYPE_NORMAL
- en: Fixed width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some elements, such as icons, should have their width fixed. This prevents the
    elements from becoming too small or large as the screen size changes.
  prefs: []
  type: TYPE_NORMAL
- en: Maximum width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Buttons and inputs may look strange if they are too large. Correct this issue
    by setting the control maximum width side.
  prefs: []
  type: TYPE_NORMAL
- en: Margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consistent margin size is an integral part of the design aesthetic. Whenever
    possible, keep margin sizes consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Collapsing margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove the left and right margins around specific elements (for example, graphics;
    embedded elements) when the screen size gets smaller. This more efficiently uses
    valuable screen real estate.
  prefs: []
  type: TYPE_NORMAL
- en: Alignment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Align elements to either the left or right margin so that it "sticks" to one
    side. This makes your design more predictable as the screen size changes.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a parent element's (for example, a page) width drops below a specified
    size, do not show the element. With smaller screens, this provides a much better
    experience for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping to the previous line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a page size becomes large enough to accommodate the element on the previous
    line, it moves it to the previous line. This prevents large areas of white space
    along the right margin for larger screens.
  prefs: []
  type: TYPE_NORMAL
- en: Text element options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When working with text elements, there are a couple of other options that should
    be considered, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`…`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shrink if text gets shorter**—Reduces the height of a text element if there
    is white space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image/Google Map/shape element proportions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the **Keep element proportions** option to maintain the width and height
    ratio regardless of screen size.
  prefs: []
  type: TYPE_NORMAL
- en: Repeating group cell width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Current cell minimum width** option allows you to "stack" cells differently
    rather than just shrinking cells to a point where they become unreadable. You
    accomplish this by increasing the **Current cell minimum width** value.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Responsive Viewer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the Responsive Viewer is in large-screen mode, which shows you
    how your page will look with a screen that is 1,200 **pixels** (**px**) wide,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Responsive Viewer in large-screen mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Responsive Viewer in large-screen mode
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change this view to see, for example, how the page will look when viewed
    from a mobile device such as a cell phone, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Responsive Viewer viewed from a mobile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Responsive Viewer viewed from a mobile
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the design process when you are building your application, it is
    a good idea to come back to the Responsive Viewer frequently to ensure that your
    application continues to look good, regardless of the device that is being used.
  prefs: []
  type: TYPE_NORMAL
- en: Learning more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This has just been an overview of responsive design and there is a lot more
    you can learn about Bubble and how responsive design is implemented. If you wish
    to dig deeper into Bubble responsive design, see the *Building Responsive Pages*
    web page in the Bubble documentation ([https://manual.bubble.io/help-guides/building-a-user-interface/building-responsive-pages](https://manual.bubble.io/help-guides/building-a-user-interface/building-responsive-pages)).
  prefs: []
  type: TYPE_NORMAL
- en: Responsive pages are very important to the modern web application user and can
    make or break the usefulness of an application, but even the best responsive web
    application is completely useless if it is not designed to work with events properly.
    Fortunately, this is the next topic that we are covering!
  prefs: []
  type: TYPE_NORMAL
- en: Working with events in Bubble
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An event is an action that occurs within the Bubble app to trigger workflows.
    Actions within the Bubble interface often trigger events, but systems can also
    trigger events outside of Bubble, such as n8n.
  prefs: []
  type: TYPE_NORMAL
- en: Event types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While there are a number of different types of events that exist in Bubble,
    most of them are designed to be used internally with Bubble and do not interact
    with systems outside of the Bubble environment. These internal events are important
    to understand when working with Bubble and we highly recommend that you familiarize
    yourself with them.
  prefs: []
  type: TYPE_NORMAL
- en: General events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These events are common to most areas of Bubble and are accessible accordingly.
    They are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Logged In**—This event fires whenever a user logs in to your Bubble
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Logged Out**—Actions associated with this event will be executed when
    the user logs out of the Bubble application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page Loaded**—A **page load** occurs when a person opens up a web page on
    their computer. This event is fired whenever this happens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do Every X Seconds**—It can be useful to perform an action repeatedly based
    on how much time has elapsed since the last time the event occurred. This event
    is filed every *X* seconds, where *X* represents the number of seconds between
    events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When Condition True**—This event compares some parameter of the system (for
    example, day of the week) with a value (for example, Tuesday) and then performs
    an action only if the comparison is true (for example, the action will only be
    executed if the day of the week is Tuesday).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Element events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Element events are related to the actual UI itself and are designed to interact
    with the user via the web UI. These events generally respond to something the
    user has done while in the application. They are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Element Clicked**—This event is fired when a user clicks on a specific element
    in the web UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input Value Changed**—If a field in a form has a value that is then changed
    by the user, this event fires.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Map Marker Clicked**—Map elements in Bubble can have markers placed on them.
    This event fires when the user clicks on one of these elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Popup Opened**—Bubble enables you to display messages to the user in the
    form of popups. This event fires when one of these popups opens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Popup Closed**—You can also fire an event when the user closes the popup
    that was displayed to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trigger events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Trigger events are special events in the Bubble system that occur when changes
    are made in the database. These events can reference data values before a change
    in the database occurred or they can reference the values after a change in the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: A couple of things to remember about trigger events. First, these events run
    with full privileges and have access to all data in the system, not just the data
    of the user who triggered the event. Second, trigger events can only trigger a
    single action, and that action cannot be used to trigger other actions.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Bubble, events are managed in the **Workflow** editor tab. You configure
    actions that occur when a specific event is fired from this page, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Event in Workflow editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – Event in Workflow editor
  prefs: []
  type: TYPE_NORMAL
- en: For example, *Figure 9.4* is displaying how an individual can run the **n8n
    Workflows - Send n8n Data** plugin action when a user logs in to the Bubble app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run multiple actions when one event occurs, chaining the actions
    to execute one after the other. This allows you to perform complex actions while
    still keeping individual actions simple. This process is illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Chaining actions to an event'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Chaining actions to an event
  prefs: []
  type: TYPE_NORMAL
- en: Going deeper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This has just been a brief introduction to Bubble events, and you can dig a
    lot deeper into this topic. If you are looking to get a stronger understanding
    of events within the Bubble environment, I would suggest you start with *Building
    Workflows* ([https://manual.bubble.io/help-guides/building-workflows](https://manual.bubble.io/help-guides/building-workflows))
    and *Events* ([https://manual.bubble.io/core-resources/events](https://manual.bubble.io/core-resources/events))
    from the Bubble documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Events are an important aspect of the Bubble architecture and are a critical
    part of proper data manipulation. But, if the data being entered into your Bubble
    app is faulty or the system confuses the different types of data, then suddenly
    the app becomes useless.
  prefs: []
  type: TYPE_NORMAL
- en: The next section helps to avoid some of these issues by showing us how to validate
    that the data being entered or analyzed is the correct data.
  prefs: []
  type: TYPE_NORMAL
- en: Validating data in Bubble
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the core of many applications is data. These applications rely on consistent,
    accurate, and structured data to provide analysis and insightful information.
    They also use the data to control different aspects of the application itself.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, it is important that the data you are gathering and saving
    is as accurate as possible, especially when gathering that data from users.
  prefs: []
  type: TYPE_NORMAL
- en: Field types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first way to control your data is through field types. Field types describe
    the data that can be entered into a specific field and restrict the information
    that can be entered into that field to that type of data. If you have a database
    background, these can be equated to data types within a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are nine built-in field types in Bubble, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text**—Any type of **American Standard Code for Information Interchange**
    (**ASCII**)-based text. Similar to a **variable character field** (**VARCHAR**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FLOAT` or `DECIMAL`, but without the precision requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CHECK` range to an `INT` field value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DATETIME` data type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CHECK` range for a `DATETIME` data type column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRUE`) or `FALSE`). Similar to a `BOOLEAN` data type in a database. There
    is no `NULL` value for this field, as an empty field translates to a `FALSE`)
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VARCHAR` value that references the location of a file in a filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VARCHAR` value that references the location of a file in a filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geographic address**—This is a unique field type that stores geographic information
    as text that has been validated by the Google Maps API. It appears as a street
    address, much like what you would find when mailing a letter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also create custom data types. These are typically groups of field or
    other custom data types that work together. For example, a **meeting** type might
    be made up of a **date**, a **location**, and a **subject**.
  prefs: []
  type: TYPE_NORMAL
- en: Using the fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have field and data types defined, this can control the type of data
    that is required for data input. Depending on the type of data that is being stored
    in the database, you will have different options available to you for restricting
    the type of data that is acceptable to the field, as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Date & Time field restrictions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.06_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – Date & Time field restrictions
  prefs: []
  type: TYPE_NORMAL
- en: For example, *Figure 9.6* shows some of the restrictions that are available
    in the **Date & Time** input type. You can control the minimum and maximum values
    for the date and hour and require that the field not be empty.
  prefs: []
  type: TYPE_NORMAL
- en: More data validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is just the tip of the iceberg when it comes to data validation. There
    can be some very complex rules around the type of data that is permittable for
    an application, and it is worth your time to truly understand what these data
    rules should be and how to ensure your application is following those rules.
  prefs: []
  type: TYPE_NORMAL
- en: To get a deeper understanding of how to better manage your applications' data,
    I would suggest starting with *Working with Data* in the Bubble documentation
    ([https://manual.bubble.io/help-guides/working-with-data](https://manual.bubble.io/help-guides/working-with-data))
    and use what you learn to maintain your data's integrity.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know we have the right types of data in the system, it is important
    that this data moves throughout the application properly and is stored predictably
    in the right places. Just like driving your car down the main hallway of your
    home and parking it in the living room, a poorly designed application structure
    can lead to unpredictable (and often disastrous) results. The next section covers
    how to plan and build the application structure.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the application structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An application does not just come out of thin air. A lot of planning and thinking
    goes into properly structuring an application so that it is both simple and useful.
    Some factors to consider when designing the application structure include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: How many activities will the user need to perform?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What type of data will be gathered?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the user require authentication?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the UX simple and logical?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is extremely important that you think about how these (and other) factors
    affect your application and how your users interact with it. This helps to make
    your application easy to manage and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: One of the first tasks that you should complete, even before you start coding
    a single page, is to create a flowchart that shows how a user moves through the
    application for each action that they will perform. This should show not only
    how the user interacts with the application but also how both the user and the
    application interact with the data in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot demonstrates such a workflow. This shows which data
    is being displayed/the user for each page, along with the path that the user must
    follow to get to each page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Simple application workflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Simple application workflow
  prefs: []
  type: TYPE_NORMAL
- en: This is an extremely valuable asset to have, especially if your team is large
    and different people are developing different parts of the application separately.
    It ensures that everyone understands how the application will work and how data
    will be managed.
  prefs: []
  type: TYPE_NORMAL
- en: It is also useful to ensure that the scope of the application does not change
    or expand. It makes it very clear what should and should not be designed.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have completed the overall design, it is well worth having someone
    else on your team (or review it yourself if you are a team of one) to ensure that
    the design meets the goals and requirements of the application.
  prefs: []
  type: TYPE_NORMAL
- en: One excellent way is to create user stories that describe an activity from the
    perspective of the user. These stories are often in the form of *As a <user type>,
    I want to <goal to accomplish> so that <reason for activity>*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you may have the following user story:'
  prefs: []
  type: TYPE_NORMAL
- en: '*As an author, I want to be able to edit newsletters that have already been
    published so that I can update information that may no longer be valid.*'
  prefs: []
  type: TYPE_NORMAL
- en: You can now take this user story and see whether there is a path in your workflow
    that will enable this to happen. If it turns out that there is no way for this
    to happen (which is the case for our diagram in *Figure 9.7*), you may need to
    go back and update your application design.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are satisfied with the design of your application, ensure that it is
    marked as a final design and share it with your development team so that everyone
    is using the same design and aiming for the same goal.
  prefs: []
  type: TYPE_NORMAL
- en: But even with a really good design, things can still go wrong. This is where
    error handling and troubleshooting come into play.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with errors in Bubble
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications are inherently complicated systems. There are events occurring
    behind the scenes, users behaving in unexpected ways, and unexpected platform
    upgrades that break previously usable code. Sometimes, it's a wonder that any
    applications work at all.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this complexity, it is critical that applications be designed to
    anticipate ways that users can misuse the system while also dealing with errors
    that occur despite the best efforts of the application designers and developers.
  prefs: []
  type: TYPE_NORMAL
- en: Bubble has several tools available to help deal with errors that can crop up
    in the application, and several best practices will assist you if something goes
    wrong and you need to get things working correctly again.
  prefs: []
  type: TYPE_NORMAL
- en: Planning for user error
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is not uncommon for users to be a significant source of errors in your application.
    Either by simply not understanding what your application is attempting to accomplish
    or by maliciously attempting to bypass security and restrictions put in place,
    users can and will break your application. But you can minimize the impact that
    users have on your application by following a few best practices.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best ways is to think like a user. Have someone test the application
    who is just a standard user and knows nothing about how your application works
    prior to rolling it out to the rest of the world. Carefully document how the user
    got themselves into the situation where they generated errors and how the error
    was handled. Then, update the workflow, deal with the error, and test again.
  prefs: []
  type: TYPE_NORMAL
- en: Locking down the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of different areas within the application that can cause problems
    if the user is allowed into them. For example, if the user can get into the user
    management portion of the system, they can add or delete users at random, causing
    all types of chaos.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, it is critical that the application be locked down to prevent
    random users from accessing parts of the application that they should not be able
    to access. This not only applies to the application itself but also to any management
    consoles, admin panels, and data management portals.
  prefs: []
  type: TYPE_NORMAL
- en: Detailed logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an error does occur, it is important that you have a way of determining what
    led up to the error. Building in a detailed logging service will allow you to
    trace what happened before the error occurred so that you can troubleshoot the
    problem and hopefully resolve what caused it.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bubble has two excellent tools that will help you to resolve problems that come
    up while developing your application.
  prefs: []
  type: TYPE_NORMAL
- en: The first tool is the **Issue Checker**. This appears as a red warning icon
    with red text, indicating the number of issues that exist in your application.
  prefs: []
  type: TYPE_NORMAL
- en: You can get more information about issues by clicking on the **Issue Checker**.
    This will pop up a list of all the issues. Clicking on any one of the items in
    the issue list will open up the screen where the issue exists.
  prefs: []
  type: TYPE_NORMAL
- en: The second debugging tool is the **Debugger**. The Debugger allows you to walk
    through your application step by step and see issues happening behind the scenes
    that the application user does not see.
  prefs: []
  type: TYPE_NORMAL
- en: 'To initiate the Debugger, simply open up any page of your application and then
    add `&debug_mode=true` at the end of the **Uniform Resource Locator** (**URL**).
    This will reopen your application page with the **Debugger** toolbar at the bottom,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Application with Debugger toolbar'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Application with Debugger toolbar
  prefs: []
  type: TYPE_NORMAL
- en: This allows you to get a lot more detail about what the application is doing
    and provides you with clues for how issues may be corrected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing and building a suitable web-based UI is one of the most critical aspects
    of your application build. It is the primary way that your users interact with
    you and your brand, and it is the ambassador for your organization. Thus, it is
    critical that it is as user-friendly, easily accessible, simple to understand,
    and error-free as possible. Hopefully, after having now completed this chapter,
    you are confident in the steps that you need to take in order to build this UI.
  prefs: []
  type: TYPE_NORMAL
- en: But what happens when you have your UI completed, all the workflows have been
    optimized, and the application still does not do what you need it to do? How do
    you extend the capabilities beyond what the Bubble development environment will
    allow you to do?
  prefs: []
  type: TYPE_NORMAL
- en: This is where n8n plays a major role in expanding these capabilities. We will
    be covering how to do exactly that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
