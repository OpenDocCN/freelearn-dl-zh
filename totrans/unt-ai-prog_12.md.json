["```py\nusing UnityEngine;\npublic class DayNightCycle : MonoBehaviour {\n    public event System.EventHandler OnChanged;\n    public float dayDuration = 10.0f;\n    public bool IsNight { get; private set; }\n    public Color nightColor = Color.white * 0.1f;\n    private Color dayColor;\n    private Light lightComponent;\n    void Start() {\n        lightComponent = GetComponent<Light>();\n        dayColor = lightComponent.color;\n    }\n    void Update() {\n        float lightIntensity = 0.5f + Mathf.Sin(Time.time *\n          2.0f * Mathf.PI / dayDuration) / 2.0f;\n        bool shouldBeNight = lightIntensity < 0.3f;\n        if (IsNight != shouldBeNight) {\n            IsNight = shouldBeNight;\n            // Invoke event handler (if set).\n            OnChanged?.Invoke(this,\n              System.EventArgs.Empty); \n        }\n        lightComponent.color = Color.Lerp(nightColor,\n          dayColor, lightIntensity);    }\n}\n```", "```py\n    using UnityEngine;\n    using Pada1.BBCore;\n    using Pada1.BBCore.Tasks;\n    using BBUnity.Actions;\n    [Action(\"Chapter09/ShootOnce\")]\n    [Help(\"Clone a 'bullet' and shoots it through the Forward axis with the specified velocity.\")] \n    public class ShootOnce : GOAction {\n        // ….\n    }\n    ```", "```py\n    [InParam(\"shootPoint\")] \n    public Transform shootPoint;\n    [InParam(\"bullet\")] \n    public GameObject bullet;\n    [InParam(\"velocity\", DefaultValue = 30f)] \n    public float velocity;\n    ```", "```py\n    public override void OnStart() {\n        if (shootPoint == null) {\n            shootPoint = \n              gameObject.transform.Find(\"shootPoint\");\n            if (shootPoint == null) {\n                Debug.LogWarning(\"Shoot point not \n                  specified. ShootOnce will not work for \"\n                  + gameObject.name);\n            }\n        }\n        base.OnStart();\n    }\n    public override TaskStatus OnUpdate() {\n        if (shootPoint == null || bullet == null) {\n            return TaskStatus.FAILED;\n        }\n        GameObject newBullet = Object.Instantiate(\n            bullet, shootPoint.position, \n            shootPoint.rotation *\n            bullet.transform.rotation );\n        if (newBullet.GetComponent<Rigidbody>() == null) {\n            newBullet.AddComponent<Rigidbody>();\n        }\n        newBullet.GetComponent<Rigidbody>().velocity = \n          velocity * shootPoint.forward;\n        return TaskStatus.COMPLETED;\n    }\n    ```", "```py\n    Using UnityEngine;\n    using Pada1.BBCore\n    using Pada1.BBCore.Tasks;\n    [Action(\"Chapter09/Shoot\")]\n    [Help(\"Periodically clones a 'bullet' and shoots it through the Forward axis with the specified velocity. This action never ends.\")]\n    public class Shoot : ShootOnce {\n        [InParam(\"delay\", DefaultValue = 1.0f)]\n        public float delay;\n        // Time since the last shoot.\n        private float elapsedTime = 0;\n        public override TaskStatus OnUpdate() {\n            if (delay > 0) {\n                elapsedTime += Time.deltaTime;\n                if (elapsedTime >= delay) {\n                    elapsedTime = 0;\n                    return TaskStatus.RUNNING;\n                }\n            }\n            base.OnUpdate();\n            return TaskStatus.RUNNING;    }\n    }\n    ```", "```py\n    using Pada1.BBCore;\n    using Pada1.BBCore.Framework;\n    using Pada1.BBCore.Tasks;\n    [Action(\"Chapter09/SleepForever\")]\n    [Help(\"Low-cost infinite action that never ends. It does not consume CPU at all.\")]\n    public class SleepForever : BasePrimitiveAction {\n        public override TaskStatus OnUpdate() {\n            return TaskStatus.SUSPENDED;\n        }\n    }\n    ```", "```py\n    using Pada1.BBCore;\n    using Pada1.BBCore.Framework;\n    using Pada1.BBCore.Tasks;\n    using UnityEngine;\n    [Condition(\"Chapter09/IsNight\")]\n    [Help(\"Checks whether it is night time.\")] \n    public class IsNightCondition : ConditionBase {\n        private DayNightCycle light;\n        public override bool Check() {\n            return SearchLight() && light.IsNight;\n        }\n        public override TaskStatus \n          MonitorCompleteWhenTrue() {\n            if (Check()) {\n                return TaskStatus.COMPLETED;\n            }\n            if (light != null) {\n                light.OnChanged += OnSunset;\n            }\n            return TaskStatus.SUSPENDED;\n        }\n        public override TaskStatus MonitorFailWhenFalse()\n        {\n            if (!Check()) {\n                return TaskStatus.FAILED;\n            }\n            light.OnChanged += OnSunrise;\n            return TaskStatus.SUSPENDED;\n        }\n    /// ...\n        private bool searchLight() {\n            if (light != null) {\n                return true;\n            }\n            GameObject lightGO = \n              GameObject.FindGameObjectWithTag(\n              \"MainLight\");\n            if (lightGO == null) {\n                return false;\n            }\n            light = lightGO.GetComponent<DayNightCycle>();\n             return light != null;\n        }\n    }\n    ```", "```py\n    public void OnSunset(object sender, \n                         System.EventArgs night) {\n        light.OnChanged -= OnSunset;\n        EndMonitorWithSuccess();\n    }\n    public void OnSunrise(object sender, \n                          System.EventArgs e) {\n        light.OnChanged -= OnSunrise;\n        EndMonitorWithFailure();\n    }\n```"]