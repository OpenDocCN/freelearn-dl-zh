- en: '*Chapter 4*: Preparing a Headless Raspberry Pi for a Robot'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn why the Raspberry Pi controller on a robot should
    be wireless and headless, what headless means, and why it's useful in robotics.
    You will see how to set up a Raspberry Pi directly as a headless device, and how
    to connect to this Raspberry Pi once on the network, and then send your first
    instructions to it. By the end of the chapter, you will have your own ready-to-use
    Raspberry Pi without needing to connect a screen, keyboard, or wired network to
    it, so it can be mobile in a robot.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a headless system and why is it useful in a robot?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Wi-Fi on the Raspberry Pi and enabling SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding your Raspberry Pi on the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PuTTY or SSH to connect to your Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Raspberry Pi OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the exercises in this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi, preferably a 3A+ (but a Pi 3 or 4 will do)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply capable of 2.1 amps with a Micro-USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MicroSD card you prepared in the previous chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Windows, Linux, or macOS computer connected to the internet and able to read/write
    to SD cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor on your computer – VS Code is a suitable multiplatform option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PuTTY software on Windows (SSH software is already available on Mac and Linux
    desktops)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The GitHub link for the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Learn-Robotics-Programming-Second-Edition/tree/master/chapter4](https://github.com/PacktPublishing/Learn-Robotics-Programming-Second-Edition/tree/master/chapter4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3bErI1I](https://bit.ly/3bErI1I)'
  prefs: []
  type: TYPE_NORMAL
- en: What is a headless system, and why is it useful in a robot?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **headless system** is a computer designed to be operated from another computer
    via a network, at times or in places where keyboard, screen, and mouse access
    to a device is inconvenient. Headless access is used for server systems, for building
    robots and making gadgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – A Raspberry Pi tethered to a screen, keyboard, and mouse
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4.1* shows a system with a head where a user can sit in front of the
    device. You need to attach a screen, keyboard, and mouse to your robot, and hence
    it is not very mobile. You may be able to attach/detach them as required, but
    this is also inconvenient. There are portable systems designed to dock with Raspberry
    Pis like this, but when a robot moves, you''ll need to disconnect it or move with
    the robot.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At some events, I have seen robots with tiny onboard screens, controlled by
    a wireless keyboard and mouse. However, in this book, we use a robot as a headless
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – A Raspberry Pi on a robot in a headless configuration
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi in *Figure 4.2* is mounted on a robot as a headless device.
    This Raspberry Pi is not weighed down by a screen and keyboard; those are handled
    by another computer. Code, instructions, and information is sent to and from the
    Raspberry Pi via a wireless network from a laptop. Many code examples run autonomously,
    and the computer can start/stop these. We add indicator LEDs in [*Chapter 9*](B15660_09_Final_ASB_ePub.xhtml#_idTextAnchor171),
    *Programming RGB Strips in Python*. We also show you how to use a mobile phone
    to drive the robot in [*Chapter 17*](B15660_17_Final_ASB_ePub.xhtml#_idTextAnchor396),
    *Controlling the Robot with a Phone and Python*. The phone can start and stop
    autonomous behaviors, view the robot's status, or just drive it without needing
    to hook up the laptop at all. This Raspberry Pi is free from the screen and keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Although you won't usually need a screen and keyboard, it is worth having these
    around in case you lose contact with the Raspberry Pi, and it refuses to respond
    via the network. You can then use a screen and keyboard to connect to it and see
    what is going on.
  prefs: []
  type: TYPE_NORMAL
- en: For our headless access to the Raspberry Pi, we will be using a **Secure Shell**
    (**SSH**). SSH gives you a command line to send instructions to the Pi and a file
    transfer system to put files onto it.
  prefs: []
  type: TYPE_NORMAL
- en: Making a Pi headless makes it free to roam around. It keeps a robot light by
    not needing to carry or power a screen and keyboard. Being headless makes a robot
    smaller since a monitor and keyboard are bulky. It also encourages you, the maker,
    to think about autonomous behavior since you can't always type commands to the
    robot.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Wi-Fi on the Raspberry Pi and enabling SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you''ve seen what you get with a headless system, let''s modify the SD
    card so the Raspberry Pi starts up ready to use as a headless device. We need
    to set up Wi-Fi first:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove and reinsert the MicroSD card we made earlier into your computer so that
    the computer can recognize the new state of the drive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you will see the card shows up as two disk drives. One of the drives is
    called `boot`; Windows will ask whether you want to format the other drive. Click
    **Cancel** when Windows asks you. This part of the SD card holds a Linux-specific
    filesystem that Windows cannot read.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in `boot`, create two files as follows. I suggest using an editor such
    as VSCode for plain text files, seeing file extensions, and making empty files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ssh`: An empty file with no extension.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wpa_supplicant.conf`: This file contains your Wi-Fi network configuration
    as shown here:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Eject the MicroSD card. Remember to use the menus to do so. This ensures that
    the files are entirely written before removing it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, with these two files in place, you can use the MicroSD card to boot the
    Raspberry Pi. Plug the MicroSD card into the slot on the underside of the Raspberry
    Pi. It only fits into the slot in the correct orientation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, plug a Micro-USB cable into the side of the Raspberry Pi and connect
    it to a power supply. You should see lights blinking to show it is starting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For a Raspberry Pi, you need a power supply providing at least 2.1 amps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your Raspberry Pi headless system has now been set up. With this, we have taken
    a major step toward being mobile. Now we'll need to go find it on our network
    so we can connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: Finding your Pi on the network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assuming your SSID and PSK are correct, your Raspberry Pi is now registered
    on your Wi-Fi network. However, now you need to find it. The Raspberry Pi uses
    dynamic addresses (DHCP). Every time you connect it to your network, it may get
    a different address. Visiting the admin page on your Wi-Fi router and writing
    down the IP address works in the short term. Doing that every time the address
    changes is frustrating, and may not be available in some situations.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, the Raspberry Pi uses a technology known as `raspberrypi.local`, and
    the Raspberry Pi will respond with the address to find it. This is also known
    by the names Zeroconf and Bonjour. So, the first thing you'll need to do is ensure
    your computer can do this.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using macOS, your computer will already be running the Bonjour software,
    which is already mDNS capable. Also, Ubuntu and Fedora desktop versions have had
    mDNS compatibility for a long time. On other Linux desktops, you will need to
    find their instructions for Zeroconf or Avahi. Many recent ones have this enabled
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: But if you are using Windows, you will need the Bonjour software. So let's see
    how to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Bonjour for Microsoft Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have installed a recent version of Skype or iTunes, you will have this
    software. You can use this guide to check that it is already present and enable
    it: [https://smallbusiness.chron.com/enable-bonjour-65245.html](https://smallbusiness.chron.com/enable-bonjour-65245.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether it is already working with the following command in Command
    Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see this, you have Bonjour installed already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see this, you''ll need to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To do so, browse to the Apple Bonjour For Windows site at [https://support.apple.com/downloads/bonjour_for_windows](https://support.apple.com/downloads/bonjour_for_windows)
    and download it, then install **Download Bonjour Print Services for Windows**.
    Once this has run, Windows will be able to ask for mDNS devices by name.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Raspberry Pi's green light should have stopped blinking, and only a red
    power light should be visible. This indicates that the Pi has finished booting
    and has connected to the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Windows, summon a command line by pressing the Windows key and type `CMD`
    in the windows search bar. In Linux or macOS, open Terminal. From Terminal, we
    will try to `ping` the Raspberry Pi, that is, find the Pi on the network and send
    a short message to get a response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything has gone right, the computer will show that it has connected
    to the Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What if you cannot reach the Raspberry Pi? In the next section, we'll try some
    troubleshooting steps.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the Raspberry Pi does not appear to be responding to the ping operation,
    these are some steps you can take to try to diagnose and remedy the situation.
    Try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-check your connections. You should have seen a few blinks of the green
    light and a persistent red light. If not, unplug the power, ensure that the SD
    card is seated firmly and that the power supply can give 2.1 amps, then try again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your Wi-Fi access point settings with the Raspberry Pi booted and see if
    it has taken an IP address there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you find the Raspberry Pi on your Wi-Fi router, this may mean that mDNS is
    not running on your computer correctly. If you have not installed it, please go
    back and do so. On Windows, the different versions of Bonjour print services,
    Bonjour from Skype, and Bonjour from iTunes can conflict if installed together.
    Use the Windows add/remove functions to see whether there is more than one and
    remove all Bonjour instances, then install the official one again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, turn the power off, take out the SD card, place this back into your computer,
    and double-check that the `wpa_supplicant.conf` file is present and has the correct
    Wi-Fi details and country code. The most common errors in this file are the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Incorrect Wi-Fi details
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Missing quotes or missing/incorrect punctuation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) An incorrect or missing country code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Keywords being in the wrong case (keywords should be lowercase, country code
    in uppercase)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The SSH file is removed when the Raspberry Pi starts. If you are sure it was
    there and has been removed, this means the Pi actually booted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you may need to boot the Pi with a screen and keyboard connected, and
    attempt to diagnose the issue. The display will tell you whether there are other
    issues with `wpa_supplicant.conf` or other problems. Use the screen text and search
    the web for answers. I cannot reproduce all those here, as there are many kinds
    of problems that could occur here. I also recommend asking on Twitter using the
    tag `#raspberrypi`, on Stack Overflow, or in the Raspberry Pi Forums at [https://www.raspberrypi.org/forums/](https://www.raspberrypi.org/forums/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now verified that our Pi is connected to the network, troubleshooting
    issues along the way. We've been able to find it with `ping`. Now we know it is
    there, let's connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: Using PuTTY or SSH to connect to your Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we added a file to our Raspberry Pi boot named `ssh`. This activates
    the SSH service on the Pi. As mentioned before, SSH is an abbreviation for secure
    shell, intended for secure network access. In this case, we are not specifically
    targeting the secure encryption capabilities, but are using the remote networking
    capability to send instructions and files to and from the Raspberry Pi without
    having physical access to it.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you already use an SSH client, note that not all of the Windows command-line
    SSH clients support mDNS.
  prefs: []
  type: TYPE_NORMAL
- en: PuTTY is a handy tool for accessing SSH and is available for Windows, Linux,
    and Mac. Its installation information for these operating systems can be found
    at [https://www.ssh.com/ssh/putty/](https://www.ssh.com/ssh/putty/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have PuTTY installed from the preceding link, let''s get it connected
    to your Raspberry Pi. Follow along:'
  prefs: []
  type: TYPE_NORMAL
- en: Start PuTTY. You will see a screen like in *Figure 4.3*. In the `raspberrypi.local`
    and click **Open** to log in to your Pi:![](img/B15660_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.3 – Connecting to the Pi
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first time you do this, PuTTY displays a security warning asking you to
    add the Pi's key if you trust it. Click **Yes**; it only asks you this again if
    another device with the same hostname (for example, a fresh Raspberry Pi) shows
    up with a different key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you see the `pi`, press *Enter*, and use the password `raspberry`. You''ll
    now see something like *Figure 4.4*, showing that you have connected to the Pi:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B15660_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Successfully connected
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you've used PuTTY or your preferred SSH client to connect to
    the Raspberry Pi, setting you up to configure it, send commands to it, and interact
    with it. Next, we'll see how to configure it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Raspberry Pi OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are connected, let's do a few things to prepare the Raspberry Pi for
    use, such as changing the user password and changing the hostname to make the
    Pi more secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can perform many of these tasks with the `raspi-config` tool, a menu system
    to perform configuration tasks on Raspberry Pi OS. We start it with another tool,
    `sudo`, which runs `raspi-config` as root, a master user. Refer to the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `raspi-config` interface will appear, as shown in *Figure 4.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15660_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – The raspi-config tool
  prefs: []
  type: TYPE_NORMAL
- en: Now we've accessed `raspi-config`, we can use it to change some of the settings
    on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming your Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every fresh Raspberry Pi image is called `myrobot`, but I am sure you can think
    of something better. You can change this later too. It can be letters, numbers,
    and dash characters only. Use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In `raspi-config`, select **Network Options**, shown in *Figure 4.6*. Use the
    arrow keys on your keyboard to highlight and press *Enter* to select the entry:![](img/B15660_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.6 – Network options
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now select **Hostname** as shown in *Figure 4.7*:![](img/B15660_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.7 – Change the hostname
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should be on a screen waiting for hostname input. Type in a name for your
    robot (I called mine `myrobot`), then press *Enter* to set it. Please be more
    inventive than my name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now named your robot, which will be more important if you have other
    Raspberry Pis but also gives the robot a little character. Let's also change the
    password to something a bit less generic.
  prefs: []
  type: TYPE_NORMAL
- en: Securing your Pi (a little bit)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Right now, your Raspberry Pi has the same password as every other Raspberry
    Pi fresh from an image. It''s recommended you change it. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the top menu of `raspi-config`, select **Change User Password** (*Figure
    4.8*):![](img/B15660_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.8 – Changing the password
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type a new password for your robot – something you will remember, more unique
    than `raspberry`. It should not be anything you've used for something sensitive
    such as email or banking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing the password personalizes the Raspberry Pi on your robot, and also
    drastically reduces the likelihood of someone else connecting to your robot and
    ruining your hard work. Now we've made configuration changes, we need to restart
    the Raspberry Pi for them to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Rebooting and reconnecting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s time to finish the configuration and restart the Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the *Tab* button to get to the **Finish** item (*Figure 4.9*) and press
    *Enter*:![](img/B15660_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.9 – Select Finish
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next screen asks whether you want to reboot the Pi. Select **Yes** and press
    *Enter* (*Figure 4.10*):![](img/B15660_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.10 – Say Yes to rebooting
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The Raspberry Pi will start to reset, and the PuTTY session will be disconnected
    as it does so (*Figure 4.11*). Wait for a few minutes; the green activity light
    on the Pi should blink a bit and then settle down. PuTTY will tell you it has
    lost connection to it. The Pi is now shut down. The red light will stay on until
    you remove the power:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B15660_04_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.11 – PuTTY telling you the Pi connection has gone
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PuTTY only sends commands to and from the robot; it does not understand that
    this command has shut down the Pi. It does not expect the connection to close.
    You and I know better, as we told the Pi to reboot. Click **OK** to dismiss the
    error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect to it again with PuTTY using the new hostname you gave your robot (in
    my case, `myrobot`), with the `.local` ending and the fresh password, as shown
    in *Figure 4.12*:![](img/B15660_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.12 – Reconnect to the Raspberry Pi
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you should be able to log in and see your prompt as **pi@myrobot**, or
    whatever your robot''s name is, as shown in *Figure 4.13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B15660_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Reconnected to the Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: We are now reconnected to the Raspberry Pi. We can try a simple Linux command
    to see how much of the SD card we are using. Linux commands are often abbreviations
    of things you want to ask the computer to do.
  prefs: []
  type: TYPE_NORMAL
- en: The `df` command in *Figure 4.13* shows the space used in the various storage
    locations connected to your Raspberry Pi. The additional `-h` makes `df` display
    this in human-readable numbers. It uses `G`, `M`, and `K` suffixes for gigabytes,
    megabytes, and kilobytes. Type the `df -h` command, as shown in the preceding
    screenshot, and it will show that `/dev/root` is close to the full size of the
    SD card, with some other devices taking up the rest of the space.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the software on your Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One last thing to do here is to ensure your Raspberry Pi has up-to-date software
    on it. This is the kind of process you start off and leave going while getting
    a meal, as it will take a while. Type the `sudo apt update -y && sudo apt upgrade
    -y` command, and you should see something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Please let the Pi continue until it is complete here, and do not interrupt or
    turn the power off until the `pi@myrobot:~ $` prompt has reappeared.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You've probably seen a pattern with `sudo` in a few of the commands. This command
    tells the Raspberry Pi to run the following command (such as `raspbi-config` or
    `apt`) as a *root* user, the Linux administrator/superuser. You can read it as
    *superuser do*. This is needed for software that will make changes to the system
    or perform updates. It's usually not required for user programs, though.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth doing this update/upgrade step monthly while actively working on
    a project. With the Raspberry Pi up to date, you will be able to install additional
    software for the robot code. When the software gets stale, `apt-get` installations
    may not work. An update will usually solve that.
  prefs: []
  type: TYPE_NORMAL
- en: Shutting down your Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are done with the Pi for the session, shut it down as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Wait for the green light activity to stop; PuTTY will detect that it has disconnected.
    You can now safely disconnect the power.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Pulling power from the Raspberry Pi when it is not expected can cause the loss
    of files and SD card corruption. You may lose your work and damage the SD card.
    Always use the correct shutdown procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've seen how to free a Raspberry Pi from a screen and keyboard
    by making it headless. You set up an SD card to connect to your Wi-Fi and to enable
    SSH so you could connect to it. You've used `raspi-config` to personalize your
    Pi and secure it with your own password. You then made the first small steps in
    looking around the Linux system it has running on it. You also ensured the Raspberry
    Pi is up to date and running the most current software. Finally, we saw how to
    safely put the Pi into shutdown mode, so that filesystem damage does not occur
    when you unplug it.
  prefs: []
  type: TYPE_NORMAL
- en: You have now learned how to make a Raspberry Pi headless. You have seen how
    to keep it upgraded and connected to your network and the Pi is ready to start
    building with. You can use this to build Raspberry Pi-powered gadgets, including
    robots.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we look at ensuring you don't lose valuable code or configuration
    when things go wrong. We will learn about what can go wrong and how to use Git,
    SFTP, and SD card backups to protect our hard work.
  prefs: []
  type: TYPE_NORMAL
- en: Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What other gadgets or projects could you build with a headless Raspberry Pi?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try giving your Raspberry Pi a different hostname and connecting to this locally
    with PuTTY and mDNS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try other Linux commands on the Raspberry Pi, such as `cd`, `ls`, `cat`, and
    `man`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shut down the Raspberry Pi correctly after trying these.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following to get more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Internet of Things with Raspberry Pi 3*, *Maneesh Rao*, *Packt Publishing*:
    This book uses a wired headless Raspberry Pi for the demonstrations and experiments
    in it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
