["```py\n    pip3 install --quiet --upgrade langchain==0.1.22 langchain-mongodb==0.1.8 langchain_community==0.2.12 langchain-openai==0.1.21 pymongo==4.5.1 polars==1.5.0 pypdf==3.15.0\n    ```", "```py\n    import getpass, os, pymongo, pprint\n    from langchain_community.document_loaders import PyPDFLoader\n    from langchain_core.output_parsers import StrOutputParser\n    from langchain_core.runnables import RunnablePassthrough\n    from langchain_mongodb import MongoDBAtlasVectorSearch\n    from langchain_openai import ChatOpenAI, OpenAIEmbeddings\n    from langchain.prompts import PromptTemplate\n    from langchain.text_splitter import RecursiveCharacterTextSplitter\n    from pymongo import MongoClient\n    ```", "```py\n    os.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n    mongodb+srv://<username>:<password>@<clusterName>.<hostname>.mongodb.net\n    ```", "```py\n    ATLAS_CONNECTION_STRING = getpass.getpass(\"MongoDB Atlas SRV Connection String:\")\n    ```", "```py\n    # Connect to your Atlas cluster\n    client = MongoClient(ATLAS_CONNECTION_STRING)\n    ```", "```py\n    # Define collection and index name\n    db_name = \"langchain_db\"\n    collection_name = \"test\"\n    atlas_collection = client[db_name][collection_name]\n    vector_search_index = \"vector_index\"\n    ```", "```py\n# Load the PDF\nloader = PyPDFLoader(\"https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4HkJP\")\ndata = loader.load()\n# Split PDF into documents\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=200, chunk_overlap=20)\ndocs = text_splitter.split_documents(data)\n# Print the first document\ndocs[0]\n```", "```py\nDocument(metadata={'source': 'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4HKJP', 'page': 0}, page_content='Mong oDB Atlas Best Practices January 20 19A MongoD B White P aper')\n```", "```py\n# Create the vector store\nvector_store = MongoDBAtlasVectorSearch.from_documents(\n    documents = docs,\n    embedding = OpenAIEmbeddings(disallowed_special=()),\n    collection = atlas_collection,\n    index_name = vector_search_index\n)\n```", "```py\n{\n   \"fields\":[\n      {\n         \"type\": \"vector\",\n         \"path\": \"embedding\",\n         \"numDimensions\": 1536,\n         \"similarity\": \"cosine\"\n      },\n      {\n         \"type\": \"filter\",\n         \"path\": \"page\"\n      }\n   ]\n}\n```", "```py\nquery = \"MongoDB Atlas security\"\nresults = vector_store.similarity_search_with_score(\n   query = query, k = 3\n)\npprint.pprint(results)\n```", "```py\n[(Document (page_content='To ensure a secure system right out of the box, \\nauthentication and IP Address whitelist ing are\\nautomatically enabled. \\nReview the security section of the MongoD B Atlas', metadata={'_id': {'Soid\": \"667 20a81b6cb1d87043c0171'), 'source': 'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4HKJP', 'page': 17}),\n0.9350903034210205),\n(Document(page_content='MongoD B Atlas team are also monitoring the underlying\\ninfrastructure, ensuring that it i s always in a healthy state. \\nApplication Logs And Database L ogs', metadata={'_id': {'soid': '66720a81b6cb1d87043 c013c'), 'source': 'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4HKJP', 'page': 15}),\n0.9336163997650146),\n(Document(page_content=\"MongoD B.\\nMongoD B Atlas incorporates best practices to help keep\\nmanaged databases heal thy and optimized. T hey ensure\\noperational continuity by converting complex manual tasks', metadata={'_id': {'so id: '66728a81b6cb1d87043c011f'), 'source': 'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4HKJP', 'p age': 13)),\n0.9317773580551147)]\n```", "```py\nquery = \"MongoDB Atlas security\"\nresults = vector_store.similarity_search_with_score(\n   query = query,\n   k = 3,\n   pre_filter = { \"page\": { \"$eq\": 17 } }\n)\npprint.pprint(results)\n```", "```py\n# Instantiate Atlas Vector Search as a retriever\nretriever = vector_store.as_retriever(\n   search_type = \"similarity\",\n   search_kwargs = { \"k\": 3 }\n)\n# Define a prompt template\ntemplate = \"\"\"\nUse the following pieces of context to answer the question at the end.If you don't know the answer, just say that you don't know, don't try to make up an answer.\n{context}\nQuestion: {question}\n\"\"\"\ncustom_rag_prompt = PromptTemplate.from_template(template)\nllm = ChatOpenAI()\ndef format_docs(docs):\n   return \"\\n\\n\".join(doc.page_content for doc in docs)\n# Construct a chain to answer questions on your data\nrag_chain = (\n   { \"context\": retriever | format_docs, \"question\": RunnablePassthrough()}\n   | custom_rag_prompt\n   | llm\n   | StrOutputParser()\n)\n# Prompt the chain\nquestion = \"How can I secure my MongoDB Atlas cluster?\"\nanswer = rag_chain.invoke(question)\nprint(«Question: « + question)\nprint(«Answer: « + answer)\n# Return source documents\ndocuments = retriever.get_relevant_documents(question)\nprint(«\\nSource documents:»)\npprint.pprint(documents)\n```", "```py\nQuestion: How can I secure my MongoDB Atlas cluster?\nAnswer: To secure your MongoDB Atlas cluster, you can enable authentication and IP Address whitelisting, review the security section of the MongoDB Atlas documentation, and utilize encryption of data at rest with encrypted storage volumes. Additionally, you can set up global clusters with a few clicks in the MongoDB Atlas UI, ensure operational continuity by converting complex manual tasks, and consider setting up a larger number of replica nodes for increased protection against database downtime.\nSource documents:\n[Document (page_content='To ensure a secure system right out of the box, \\nauthentication and IP Address whitelisti ng are\\nautomatically enabled.\\nReview the security section of the MongoD B Atlas', metadata={'_id': {'$oid': '6672\n@a81b6cb1d87043c0171'), 'source': 'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4HKJP', 'page': 17}),\nDocument(page_content='MongoD B Atlas team are also monitoring the underlying\\ninfrastructure, ensuring that it is always in a healthy state. \\nApplication L ogs And Database L ogs', metadata('id': ('soid': '66728a81b6cb1d87043c0 13c'), 'source': 'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4HKJP', 'page': 15}),\nDocument(page_content='All the user needs to do in order for MongoD B Atlas to\\nautomatically deploy the cluster i s to select a handful of\\noptions: \\n Instance size\\n•Storage size (optional) \\n Storage speed (optional)', metadata= {\"_id\": \"soid: '66728a81b6cb1d87043c012a'), 'source': 'https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/ RE4HKJP', 'page': 14)),\n```", "```py\npip3 install pandas==1.5.3\nimport pandas as pd\n# Create a DataFrame\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    'Age': [24, 27, 22, 32, 29],\n    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix']\n}\ndf = pd.DataFrame(data)\n# Display the DataFrame\nprint(\"DataFrame:\")\nprint(df)\n```", "```py\n# Select a column\nprint(\"\\nAges:\")\nprint(df['Age'])\n```", "```py\n# Filter data\nprint(\"\\nPeople older than 25:\")\nprint(df[df['Age'] > 25])\n```", "```py\n# Calculate average age\naverage_age = df['Age'].mean()\nprint(\"\\nAverage Age:\")\nprint(average_age)\n```", "```py\n    pip3 install PyMongoArrow\n    import pymongoarrow as pa\n    ```", "```py\n    import getpass, os, pymongo, pprint\n    ```", "```py\n    from pymongoarrow.monkey import patch_all\n    patch_all()\n    ```", "```py\n    from datetime import datetime\n    from pymongo import MongoClient\n    client = MongoClient(ATLAS_CONNECTION_STRING)\n    client.db.data.insert_many([\n      {'_id': 1, 'amount': 21, 'last_updated': datetime(2020, 12, 10, 1, 3, 1), 'account': {'name': 'Customer1', 'account_number': 1}, 'txns': ['A']},\n      {'_id': 2, 'amount': 16, 'last_updated': datetime(2020, 7, 23, 6, 7, 11), 'account': {'name': 'Customer2', 'account_number': 2}, 'txns': ['A', 'B']},\n      {'_id': 3, 'amount': 3,  'last_updated': datetime(2021, 3, 10, 18, 43, 9), 'account': {'name': 'Customer3', 'account_number': 3}, 'txns': ['A', 'B', 'C']},\n      {'_id': 4, 'amount': 0,  'last_updated': datetime(2021, 2, 25, 3, 50, 31), 'account': {'name': 'Customer4', 'account_number': 4}, 'txns': ['A', 'B', 'C', 'D']}])\n    ```", "```py\n    from pymongoarrow.api import Schema\n    schema = Schema({'_id': int, 'amount': float, 'last_updated': datetime})\n    ```", "```py\n    df = client.db.data.find_pandas_all({'amount': {'$gt': 0}}, schema=schema)\n    arrow_table = client.db.data.find_arrow_all({'amount': {'$gt': 0}}, schema=schema)\n    df = client.db.data.find_polars_all({'amount': {'$gt': 0}}, schema=schema)\n    ndarrays = client.db.data.find_numpy_all({'amount': {'$gt': 0}}, schema=schema)\n    ```", "```py\ndf = client.db.data.aggregate_pandas_all([{'$group': {'_id': None, 'total_amount': { '$sum': '$amount' }}}])\n```", "```py\n    pip3 install --upgrade openai==1.41.0\n    ```", "```py\n    export OPENAI_API_KEY='your-api-key-here'\n    ```", "```py\n    from openai import OpenAI\n    client = OpenAI()\n    completion = client.chat.completions.create(\n      model=\"gpt-4o-mini\",\n      messages=[\n        {\"role\": \"system\", \"content\": \"You are a poetic assistant, skilled in explaining complex programming concepts with creative flair.\"},\n        {\"role\": \"user\", \"content\": \"Compose a poem that explains the concept of recursion in programming.\"}\n      ]\n    )\n    print(completion.choices[0].message)\n    ```", "```py\n    In code’s endless labyrinth, a tale is spun,\n    Of functions nested deep, where paths rerun.\n    A whisper in the dark, a loop within,\n    Where journeys start anew as they begin.\n    Behold the call, a serpent chasing tail,\n    The dragon’s circle, a fractal’s holy grail.\n    In depths unseen, the echoing refrain,\n    A self-same mirror where the parts contain.\n    A climb up winding stairs, each step the same,\n    Yet every twist, a slight and altered game.\n    In finite bounds, infinity unfurls,\n    A loop of dreams within its spiral swirls.\n    ```", "```py\n    pip3 install transformers tensorflow\n    ```", "```py\n    from transformers import pipeline\n    analyse_sentiment = pipeline(«sentiment-analysis»)\n    analyse_sentiment(\"The weather is very nice today.\")\n    ```", "```py\nanalyse_sentiment([\"The weather is very nice today.\", \"I don't like it when it rains in winter.\"])\n```", "```py\ngenerator = pipeline(\"text-generation\")\ngenerator(\"I love AI, it has\")\n```", "```py\ngenerator = pipeline(\"text-generation\", model=\"distilgpt2\")\ngenerator(\n    \"I love AI, it has\",\n    max_length=25,\n    num_return_sequences=2,\n)\n```"]