- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boost Coding Efficiency for Python and Java with Auto-Code Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will look at the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the use case for weather data analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python auto-code generation using Amazon Q Developer for weather data analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java auto-code generation using Amazon Q Developer for weather data analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous chapter, we laid the foundation for different auto-code generation
    techniques to interact with AI-powered code assistants. We discussed common prompting
    techniques such as single-line, multi-line, chain-of-thought, and chat with code
    assistant, as well as common code-building methods.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at how you can use Amazon Q Developer to suggest
    code in a variety of IDEs. We will start with the two most prominent programming
    languages used by developers, Python and Java, to demonstrate how auto-code can
    be generated using techniques from [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060).
    We will also see how Amazon Q Developer adds value during the code development
    process by enabling a chat with the code assistant technique.
  prefs: []
  type: TYPE_NORMAL
- en: We believe that demonstrating the effectiveness and ease of use of AI-powered
    code assistants using a sample application will be impactful.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s first define the sample use case that we will use
    for both Python and Java scripts.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the use case for weather data analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many customers are keen to understand the weather patterns for a specific city,
    which holds significant importance for numerous applications and can be regarded
    as a crucial data source across a wide variety of applications. Weather data applications
    in enterprises can serve various purposes across different industries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a general overview of how weather data applications can be utilized
    in some of the enterprises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Risk management and insurance**: Insurance companies can use weather data
    to assess and mitigate risks connected with weather-related events such as hurricanes,
    floods, or wildfires. By analyzing historical weather patterns and forecasts,
    insurers can better understand potential risks and adjust their policies accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supply chain optimization**: Weather data can help optimize supply chain
    operations by providing insights into weather conditions that may impact transportation,
    logistics, and distribution networks. Enterprises can use weather forecasts to
    anticipate disruptions and optimize routes and inventory management accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Energy management**: Energy companies can leverage weather data to optimize
    energy production and distribution. For example, renewable energy companies can
    use weather forecasts to predict solar or wind energy generation, helping them
    better plan and manage their energy resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Finance industry**: In the finance industry, weather data can be leveraged
    in various ways to enhance decision-making processes and improve risk management
    strategies. In retail banking, weather patterns directly influence consumer behavior
    and spending habits, thereby affecting banking operations. Additionally, in the
    real estate sector, weather data holds substantial value, particularly concerning
    property insurance and mortgage lending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agriculture and farming**: Agriculture enterprises can use weather data to
    optimize crop planning, irrigation schedules, and pest management. By analyzing
    weather patterns and forecasts, farmers can make data-driven decisions to improve
    crop yields and minimize risks connected with weather-related events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retail and marketing**: Retailers can use weather data to optimize marketing
    campaigns and inventory management. For example, retailers can adjust their promotions
    and inventory levels based on weather forecasts to capitalize on consumer behavior
    changes that are influenced by weather conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Construction and infrastructure**: Construction companies can use weather
    data to plan construction projects more effectively and minimize weather-related
    delays. By integrating weather forecasts into project planning and scheduling,
    construction enterprises can optimize resource allocation and reduce project risks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tourism and hospitality**: Enterprises in the tourism and hospitality industry
    can use weather data to optimize operations and enhance customer experiences.
    For example, hotels and resorts can adjust pricing and marketing strategies based
    on weather forecasts to attract more visitors during favorable weather conditions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, weather data applications in enterprises can provide valuable insights
    and help businesses make informed decisions across various industries, ultimately
    driving efficiency, reducing risks, and improving competitiveness. There are many
    vendors, such as OpenWeatherMap, The Weather Company, AerisWeather, WeatherTAP,
    AccuWeather, and Yahoo Weather, that provide weather data to enterprises.
  prefs: []
  type: TYPE_NORMAL
- en: Application requirements – weather data analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our application, we will use weather data provided by OpenWeatherMap, which
    offers a rich set of APIs. With **api.openweathermap.org**, you gain access to
    a comprehensive source of weather information, enabling you to seamlessly integrate
    real-time and forecasted weather data into your applications. OpenWeatherMap’s
    API offers a wide range of weather data, including current weather conditions,
    forecasts, historical data, and more. Whether you’re building a weather app, optimizing
    logistics, or planning outdoor events, our API provides the data you need to make
    informed decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s define the requirements for this simple and versatile application. We
    will use the same application requirements for both Python and Java scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Application requirements – weather data analysis
  prefs: []
  type: TYPE_NORMAL
- en: '**Business requirement**: Analysts are interested in getting weather forecasting
    for a country and city. They would like to see the chart visualizing temperature
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**User inputs**: The application should accept a country and city name as parameters
    from users.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data fetch**: Based on the inputs provided, the application requests the
    weather data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
    using an API key.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data table**: Shows the table with datetime and corresponding temperature
    in Fahrenheit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data visualization**: Creates simple graphs to plot the temperature in Fahrenheit
    and date based on dataset sourced from OpenWeatherMap.'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites to access the OpenWeatherMap API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenWeatherMap provides options to request the data using API calls. As a prerequisite,
    you need to create an account. Here is the summary of the steps; for additional
    information, reference [https://openweathermap.org/](https://openweathermap.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To get weather data from OpenWeatherMap, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sign up**: Go to the OpenWeatherMap website ([https://openweathermap.org/](https://openweathermap.org/))
    and sign up for an account. Once you have signed up and logged in, move on to
    the next step.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`api.openweathermap.org` API to collect the dataset. Based on the number of
    times we call the API in this chapter, it will stay within the free tier.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Get an API key**: You can generate an API key from your account dashboard
    or use the default key.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – An OpenWeatherMap API key](img/B21378_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – An OpenWeatherMap API key
  prefs: []
  type: TYPE_NORMAL
- en: Note down the API key as we will need it in the next sections to call APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Python auto-code generation using Amazon Q Developer for weather data analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have defined the use case (problem statement) and completed the prerequisites,
    let’s utilize various auto-code generation techniques to get the solution. To
    illustrate these techniques, we will leverage the Python programming language
    inside JetBrains’ PyCharm IDE, which has been set up to work with Amazon Q Developer.
    Please refer to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022)for detailed steps
    on setting up Amazon Q Developer with JetBrains’ PyCharm IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Solution blueprint for weather data analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an experienced code developer or data engineer, you will need to convert
    the preceding business objectives into technical requirements by defining reusable
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python script for weather data analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a function to get weather data using API key for user entered country
    and city from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the return dates from an API call to the UTC format. (Note that the
    OpenWeatherMap API will return dates associated with the next 40 hours from the
    time of the request.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a function to show the date in UTC and the temperature in Fahrenheit as
    a table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a function to plot temperature on the *y* axis and date on the *x* axis
    based on `temperature_data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept user inputs for country and city names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the user-provided country and city names to call the `get_weather_data()`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a table with the datetime and temperature (in Fahrenheit) based on weather
    data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot a graph for the specified city with `Temperature (°F)` on the *y* axis
    and `Date` on the *x* axis based on weather data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the documentation for the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To achieve the overall solution, we will mainly use **chain-of-thought prompts**
    to obtain the end-to-end script and a combination of single-line and multi-line
    prompts for individual code fragments. We will also chat with the code assistant
    for documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The output of the AI-powered code assistant is non-deterministic, so you may
    not get the exact same code that follows. You may also need to modify some parts
    of the code to meet the requirements. Additionally, auto-generated code may reference
    packages that you will need to manually install. To install missing packages in
    JetBrains’ PyCharm IDE, please refer to the instructions at [https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s proceed with step-by-step solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a Python script with the latest Python version.
  prefs: []
  type: TYPE_NORMAL
- en: Use JetBrains’ PyCharm IDE to create a `book_weather_data.py` file and make
    sure that Amazon Q Developer is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – JetBrains’ PyCharm IDE with the .py file and Amazon Q Developer
    enabled](img/B21378_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – JetBrains’ PyCharm IDE with the .py file and Amazon Q Developer
    enabled
  prefs: []
  type: TYPE_NORMAL
- en: The previous step will generate a file with the `.py` extension, which Amazon
    Q Developer will recognize when generating code. Therefore, there is no need to
    include the language name Python in your prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements 2, 3, and 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s combine requirements 2, 3, and 4 to create a multi-line prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function to get weather data based on user’s selection of a country
    and a city from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the return dates from an API call to the UTC format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the multi-line prompt technique. As a reminder, in this technique,
    we can instruct our code assistant to generate the code based on our specific
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that as part of the multi-line prompt, we have provided specific instructions
    for the code assistant to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: The function name to use is `get_weather_data()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The function has two input parameters: country and city'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return date and temperature as `temperature_data`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The Python get_weather_data() function](img/B21378_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – The Python get_weather_data() function
  prefs: []
  type: TYPE_NORMAL
- en: Observe that the code assistant followed the specific instructions provided
    in the prompt. In addition, it also determined that `api_key` is required to get
    the data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast),
    so it added that as one of the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a function to show the date in UTC and temperature in Fahrenheit as a
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the **single-line prompt** technique, as the requirement is easy
    and can easily be described in a single line. Note that as part of the single-line
    prompt, we have provided specific instructions for the code assistant to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: The function name to use is `display_weather_table()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `temperature_data` to show the table. This is the chain-of-thought prompt,
    that we are connecting previously the defined return results from the `get_weather_data()`
    function as the input for this function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 4.4 – The Python display_weather_table () function](img/B21378_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – The Python display_weather_table () function
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a function to plot `temperature` on the *y* axis and `date` on the *x*
    axis based on `temperature_data`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the single-line prompt technique, as the requirement is easy and
    can easily be described in a single line. Note that as part of the single-line
    prompt, we have provided specific instructions for the code assistant to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Function name to use is `plot_temperature_graph()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `temperature_data` to show the table. This is the chain-of-thought prompts
    as we are connecting previously defined return result from `get_weather_data()`
    function as input for this function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 4.5 – The Python plot_temperature_graph () function](img/B21378_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – The Python plot_temperature_graph () function
  prefs: []
  type: TYPE_NORMAL
- en: Requirements 7, 8, 9, and 10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s combine requirements 7, 8 ,9 , and 10 to create a multi-line prompt technique:'
  prefs: []
  type: TYPE_NORMAL
- en: Accept user inputs for country and city name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a user-provided country and city name to call the `get_weather_data()` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a table with datetime and temperature (in Fahrenheit) based on the weather
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plot a graph for the specified city with `Temperature (°F)` on the Y-axis and
    `Date` on the X-axis based on weather data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the chain-of-thought prompt technique to link all the previously
    defined functions together.
  prefs: []
  type: TYPE_NORMAL
- en: 'We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – The Python code to get the user inputs and display weather data](img/B21378_04_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – The Python code to get the user inputs and display weather data
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the preceding prompt, I have not included error handling for the
    input data. However, I encourage you to experiment with the prompt by adding more
    context to instruct Amazon Q Developer to suggest code with additional error handling.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s ensure that the script is running as expected. Run the code and enter
    a country and city to get the weather data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For testing, I will use the following values, but feel free to choose your
    own:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Country name: `US`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'City name: `Atlanta`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – The Python output table with user input country, city, and weather
    information](img/B21378_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – The Python output table with user input country, city, and weather
    information
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s review the second part of the output related to the chart plotted
    for the date and corresponding temperature.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The Python output chart with the date and temperature](img/B21378_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – The Python output chart with the date and temperature
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generate the documentation for the script.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use Amazon Q Developer chat with the code assistant technique to generate
    documentation. Remember that Amazon Q Developer supports the `Explain` prompt
    (for more details, see [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060))
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can highlight the entire code, then right-click and select
    the **Amazon Q** option from the pop-up menu followed by **Explain Code**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – The Python code documentation from Amazon Q Developer](img/B21378_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – The Python code documentation from Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the first part of the code explanation provided
    by Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s use a few suggested prompts for additional documentation.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Amazon Q Developer analyzed the script that was open in the
    editor window. It then attempted to comprehend the code to derive its logic. Finally,
    it consolidated all its findings to generate documentation aimed at helping users
    understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – The Python Amazon Q Developer suggested prompts](img/B21378_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – The Python Amazon Q Developer suggested prompts
  prefs: []
  type: TYPE_NORMAL
- en: Note that Amazon Q Developer prompts for additional suggestions to obtain further
    in-depth documentation. Please feel free to explore further. Application developers
    can use Amazon Q Developer for code improvements just by using the chat with code
    assistant technique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s ask Amazon Q Developer to provide updated or improved code for our previously
    generated `display_weather_table()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 4.11 – The Amazon Q Developer suggested improvements in Python](img/B21378_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – The Amazon Q Developer suggested improvements in Python
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding snapshot, Amazon Q Developer provided new code
    with additional validation, the use of a dataframe, and recommended changes. You
    can update the code fragment simply by using either `Insert at cursor` or `Copy`.
  prefs: []
  type: TYPE_NORMAL
- en: I have illustrated a simple use case with one of the code fragments, but by
    following the preceding steps, you can get recommended updated code from Amazon
    Q Developer regardless of your use case. Additionally, you can adjust the prompts
    to instruct Amazon Q Developer to generate code with error and exception handling.
  prefs: []
  type: TYPE_NORMAL
- en: Use-case summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As illustrated, we used a combination of chain-of-thought, single-line, and
    multi-line prompts to create an end-to-end Python script for a weather data application.
    We utilized JetBrains’ PyCharm IDE, which was set up to work with Amazon Q Developer.
    For the script, we used Amazon Q Developer with specific prompts to auto-generate
    functions for retrieving weather data from OpenWeatherMap, converting temperature
    from Celsius to Fahrenheit, converting dates to UTC format, and plotting charts.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we leveraged Amazon Q Developer’s chat feature to generate detailed
    documentation and receive code improvement recommendations for our weather data
    application. Through this approach, we showcased how effectively integrating various
    prompt types and leveraging the capabilities of Amazon Q Developer can streamline
    the development process.
  prefs: []
  type: TYPE_NORMAL
- en: By adjusting prompts or simply instructing Amazon Q Developer in a chat-style
    interface, readers can further direct Amazon Q Developer to generate code with
    enhanced error and exception handling, making the solution robust and versatile
    for different use cases. This example demonstrates the power of combining advanced
    IDEs and intelligent code assistants to build sophisticated applications efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s implement the same application using the Java language.
  prefs: []
  type: TYPE_NORMAL
- en: Java auto code generation using Amazon Q Developer for weather data analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have defined the use case and completed the prerequisites, let’s use different
    auto-code generation techniques to achieve the use case. To illustrate this, we
    will leverage Java programming language inside **Visual Studio Code** (**VS Code**)
    IDE that has been set up to work with Amazon Q Developer. Please refer to [*Chapter
    2*](B21378_02.xhtml#_idTextAnchor022) for detailed steps to help you set up Amazon
    Q Developer with VS Code IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Solution blueprint for weather data analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an experienced code developer or data engineer, you will need to convert
    the preceding business objectives into technical requirements by defining reusable
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a Java script for weather data analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept user inputs for country and city name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get weather data using an API key for a user-entered country and city from `http://api.openweathermap.org/data/2.5/forecast`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the return dates from an API call to the UTC format. (Note that, the
    OpenWeatherMap API will return dates associated with the next 40 hours from the
    time of the request.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show the date in UTC and temperature in Fahrenheit as a table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot a graph for the specified city with `Temperature` `(°F)` on the *y* axis
    and `Date` on the *x* axis based on weather data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the documentation for the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To achieve the overall solution, we will mainly use a combination of single-line
    and multi-line prompts for individual code fragments, as well as chat with the
    code assistant for documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The output of the AI-powered code assistant is non-deterministic, so you may
    not get the exact same code that follows. You may also need to modify some parts
    of the code to meet the requirements. Additionally, auto-generated code may reference
    packages or methods that you will need to manually install. To install missing
    packages in VS Code IDE, please reference [https://code.visualstudio.com/docs/java/java-project](https://code.visualstudio.com/docs/java/java-project).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s proceed with step-by-step solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Write a Java script for weather data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Use VS Code IDE to create a new Java project. Create the `book_weather_data.java`
    file and make sure that Amazon Q Developer is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – VS Code IDE with the .java file and Amazon Q Developer](img/B21378_04_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – VS Code IDE with the .java file and Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: The previous step will create a file with a `.java` extension, which Amazon
    Q Developer will reference, so there’s no need to include the language name Java
    in your prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Accept user inputs for country and city name.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the single-line prompt technique, as it’s a very straightforward
    requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Java accepts the user input](img/B21378_04_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Java accepts the user input
  prefs: []
  type: TYPE_NORMAL
- en: Requirements 3, 4, and 5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s combine requirements 3, 4, and 5, as they make up one logical unit.
  prefs: []
  type: TYPE_NORMAL
- en: Get weather data based on countries and cities from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the return dates from the API call to the UTC format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are using the multi-line prompt technique to describe the logic. We write
    the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 4.14 – The Java code to get the weather data](img/B21378_04_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – The Java code to get the weather data
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Show the date in UTC and temperature in Fahrenheit as a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the single-line prompt technique. We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – The Java code to display weather data as a table](img/B21378_04_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – The Java code to display weather data as a table
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Plot a graph for the specified city with `Temperature (°F)` on the *y* axis
    and `Date` on the *x* axis based on weather data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the single-line prompt technique. We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 4.16 – The Java code to display weather data as a chart](img/B21378_04_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – The Java code to display weather data as a chart
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s ensure that the script is running as expected. Run the code and enter
    the country and city to get the weather data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For testing, I will use the following values, but feel free to choose your
    own:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Country name: `US`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'City name: `Atlanta`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – The Java code output for user input country, city, and weather
    information](img/B21378_04_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – The Java code output for user input country, city, and weather
    information
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s review the second part of the output related to the chart plotted
    for the date and corresponding temperature.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – The Java output for a weather information chart](img/B21378_04_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – The Java output for a weather information chart
  prefs: []
  type: TYPE_NORMAL
- en: Requirement 8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generate the documentation for the script.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the Amazon Q Developer chat with code assistant technique to generate
    documentation. Remember that Amazon Q Developer supports the `Explain` prompt
    or command (see [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060) for reference).
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can highlight the entire code, then right-click and select
    the **Amazon Q** option from the pop-up menu followed by **Explain**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Amazon Q Developer in Java for overview documentation](img/B21378_04_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Amazon Q Developer in Java for overview documentation
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Amazon Q Developer analyzed the script that was open in the
    editor window. It then attempted to comprehend the code to derive its logic. Finally,
    it consolidated all its findings to generate documentation aimed at helping users
    understand the code better.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s use the suggested prompts for additional documentation as seen in
    the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Amazon Q Developer suggested prompts in Java](img/B21378_04_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Amazon Q Developer suggested prompts in Java
  prefs: []
  type: TYPE_NORMAL
- en: Note that Amazon Q Developer shares additional suggestions to obtain further
    in-depth documentation. Please feel free to explore them further.
  prefs: []
  type: TYPE_NORMAL
- en: Application developers can use Amazon Q Developer for code improvements simply
    by using the chat with code assistant technique. Let’s ask Amazon Q Developer
    to provide updated or improved code for the previously generated `'Converting
    temperature to Fahrenheit and date to UTC, and adding data to a time` `series'`
    requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'We write the prompt as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Observe in the following screenshot that Amazon Q Developer has recommended
    multiple code changes to improve the code, making it easier to understand. This
    includes creating new methods and standardizing the code to use object-oriented
    approaches such as class encapsulation instead of plain variables.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Amazon Q Developer for Java code improvement](img/B21378_04_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Amazon Q Developer for Java code improvement
  prefs: []
  type: TYPE_NORMAL
- en: Applications can use these recommendations to obtain the exact code using Amazon
    Q Developer. Additionally, Amazon Q Developer provided code fragments. You can
    update the script simply by using either **Insert at cursor** or **Copy**.
  prefs: []
  type: TYPE_NORMAL
- en: I have illustrated a simple use case with one of the code fragments, but by
    following the preceding steps, you can get recommended updated code from Amazon
    Q Developer for any use case. Additionally, you can adjust the prompts to instruct
    Amazon Q Developer to generate code with error and exception handling.
  prefs: []
  type: TYPE_NORMAL
- en: Use-case summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As illustrated, we employed a variety of prompt types – chain-of-thought, single-line,
    and multi-line – to develop a JavaScript script for a weather data application.
    We utilized VS Code IDE, which was configured to integrate seamlessly with Amazon
    Q Developer. Using Amazon Q Developer, we applied specific prompts to automatically
    generate functions for retrieving weather data from OpenWeatherMap, converting
    temperature from Celsius to Fahrenheit, converting dates to UTC format, and plotting
    charts. Moreover, we took advantage of Amazon Q Developer’s chat feature to generate
    comprehensive documentation and receive suggestions for enhancing our weather
    data application’s code. This approach highlights the versatility of using different
    prompt styles to tailor code generation to specific requirements within the JavaScript
    ecosystem. By leveraging advanced IDEs such as VS Code alongside intelligent code
    assistants such as Amazon Q Developer, developers can streamline the development
    process and enhance productivity. The ability to receive detailed documentation
    and actionable insights through chat interactions further demonstrates how integrating
    these tools can foster efficient and effective software development practices.
  prefs: []
  type: TYPE_NORMAL
- en: By adjusting prompts or simply instructing Amazon Q Developer in a chat-style
    interface, readers can further direct Amazon Q Developer to generate code with
    enhanced error and exception handling, making the solution robust and versatile
    for different use cases. This example demonstrates the power of combining advanced
    IDEs and intelligent code assistants to build sophisticated applications efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how AI-powered code assistants can help Python and
    Java developers generate application code from the local IDE of their choice.
    To illustrate the functionality, we addressed the simple yet versatile application
    of weather data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Here are the key features covered throughout the application’s development.
  prefs: []
  type: TYPE_NORMAL
- en: We walked through the prerequisites of generating the API key for OpenWeatherMap,
    allowing us to obtain weather data for a user-entered country and city combination.
    We used the API key to retrieve the weather data provided by OpenWeatherMap, which
    offers a rich set of APIs. We gathered forecast weather data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast).
  prefs: []
  type: TYPE_NORMAL
- en: For coding, we used VS Code IDE for Java, which has been set up to work with
    Amazon Q Developer. For Python, we utilized JetBrains’ PyCharm IDE, which was
    also configured to work with Amazon Q Developer.
  prefs: []
  type: TYPE_NORMAL
- en: To get the code recommendations, we employed a combination of chain-of-thought,
    single-line, and multi-line prompts to create a JavaScript script for the weather
    data application. We used Amazon Q Developer with specific prompts to auto-generate
    functions to retrieve weather data from OpenWeatherMap, convert temperature from
    Celsius to Fahrenheit, convert dates to UTC format, and then plot the chart. Additionally,
    for documentation and code improvement, we used the chat with code assistant technique
    to interact with Amazon Q Developer. This allowed us to generate detailed documentation
    and receive code improvement recommendations for our weather data application.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging advanced IDEs such as VS Code and PyCharm alongside Amazon Q Developer,
    we demonstrated how various prompt styles can streamline the development process
    across multiple programming languages. This approach not only enhances productivity
    but also ensures that the generated code is robust and well-documented, making
    it easier for developers to understand and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how Amazon Q Developer can generate code
    for multiple other programming languages such as JavaScript, C#, Go, PHP, Shell,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenWeatherMap: [https://openweathermap.org/](https://openweathermap.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting started with Amazon Q Developer in VS Code and JetBrains: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting started with Java in VS Code: [https://code.visualstudio.com/docs/java/java-tutorial](https://code.visualstudio.com/docs/java/java-tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing missing packages in JetBrains’ PyCharm IDE: [https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing missing packages in VS Code IDE: [https://code.visualstudio.com/docs/java/java-project](https://code.visualstudio.com/docs/java/java-project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
