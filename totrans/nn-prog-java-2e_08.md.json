["```py\n// enter neural net parameter via keyboard (omitted)\n\n// load dataset from external file (omitted)\n\n// data normalization (omitted)\n\n// create ANN and define parameters to TRAIN: \nBackpropagation backprop = new Backpropagation(nn, neuralDataSetToTrain, LearningAlgorithm.LearningMode.BATCH);\nbackprop.setLearningRate( typedLearningRate );\nbackprop.setMaxEpochs( typedEpochs );\nbackprop.setGeneralErrorMeasurement(Backpropagation.ErrorMeasurement.SimpleError);\nbackprop.setOverallErrorMeasurement(Backpropagation.ErrorMeasurement.MSE);\nbackprop.setMinOverallError(0.001);\nbackprop.setMomentumRate(0.7);\nbackprop.setTestingDataSet(neuralDataSetToTest);\nbackprop.printTraining = true;\nbackprop.showPlotError = true;\n\n// train ANN:\ntry {\n    backprop.forward();\n    //neuralDataSetToTrain.printNeuralOutput();\n\n    backprop.train();\n    System.out.println(\"End of training\");\n    if (backprop.getMinOverallError() >= backprop.getOverallGeneralError()) {\n        System.out.println(\"Training successful!\");\n    } else {\n        System.out.println(\"Training was unsuccessful\");\n    }\n    System.out.println(\"Overall Error:\" + String.valueOf(backprop.getOverallGeneralError()));\n    System.out.println(\"Min Overall Error:\" + String.valueOf(backprop.getMinOverallError()));\n    System.out.println(\"Epochs of training:\" + String.valueOf(backprop.getEpoch()));\n\n} catch (NeuralException ne) {\n    ne.printStackTrace();\n} \n\n// test ANN (omitted)\n```"]