["```py\n!pip install ipython \n```", "```py\nfrom IPython.display import display, HTML, clear_output \n```", "```py\nfrom ipywidgets import Dropdown, Text, Checkbox, VBox, Layout \n```", "```py\nimport json \n```", "```py\n# Initialize conversation histories for all users and active user\nuser_histories = {\"User01\": [], \"User02\": [], \"User03\": []}\nactive_user = \"User01\"  # Default user\nconversation_active = True \n```", "```py\n# Create a dropdown to select the user\nuser_selector = Dropdown(\n    options=[\"User01\", \"User02\", \"User03\"],\n    value=active_user,\n    description='User:',\n    layout=Layout(width='50%')\n) \n```", "```py\nuser_selector.observe(on_user_change, names='value') \n```", "```py\n# Create the input box widget\ninput_box = Text(placeholder=\"Type your message here or type 'exit' to end the conversation.\", layout=Layout(width='100%')) \n```", "```py\ninput_box.on_submit(handle_submit)  # Attach the on_submit event handler \n```", "```py\n# Create a checkbox to toggle agent response\nagent_checkbox = Checkbox(\n    value=True,\n    description='Agent',\n    layout=Layout(width='20%')\n) \n```", "```py\n# Display the initial interface\ndisplay`(`\n    `VBox(`\n       `[user_selector, input_box, agent_checkbox]`,\n        layout=Layout(\n            display='flex', flex_flow='column',\n            align_items='flex-start', width='100%'\n        )\n    )) \n```", "```py\nlayout=Layout(\n    display='flex', flex_flow='column',\n    align_items='flex-start', width='100%'\n))) \n```", "```py\n# Function to handle the submission of the input\ndef handle_submit(sender):\n    user_message = sender.value\n    if user_message.strip():\n        sender.value = \"\"  # Clear the input box\n        chat(user_message) \n```", "```py\n# Function to handle user input and optional bot response\ndef chat(user_message):\n    global conversation_active \n```", "```py\n if user_message.lower() in ['exit', 'quit']: \n```", "```py\nclear_output(wait=True) \n```", "```py\ndisplay(HTML(\"<div style='color: red;'><strong>Conversation ended. Saving history...</strong></div>\")) \n```", "```py\nsave_conversation_history() \n```", "```py\n# Function to save conversation history to a file\ndef save_conversation_history():\n    filename = \"conversation_history.json\"  # Define the filename\n    with open(filename, 'w') as file:\n        json.dump(user_histories, file, indent=4)  # Write the user histories dictionary to the file in JSON format\n    display(HTML(f\"<div style='color: green;'><strong>Conversation history saved to {filename}.</strong></div>\")) \n```", "```py\n# Append user message to the active user’s history \nuser_histories[active_user].append(\n    {“role”: “user”, “content”: user_message}\n) \n```", "```py\nif agent_checkbox.value: \n```", "```py\n response = chat_with_gpt(user_histories[active_user],\n        user_message) \n```", "```py\n user_histories[active_user].append( \n            {“role”: “assistant”, “content”: response} \n        ) \n```", "```py\nresponse = chat_with_gpt(user_histories[active_user], user_message) \n```", "```py\ndef update_display():\n    clear_output(wait=True) \n```", "```py\n for entry in user_histories[active_user]:  # Show only the active user's history\n        if entry['role'] == 'user':\n            display(HTML(f\"<div style='text-align: left; margin-left: 20px; color: blue;'><strong>{active_user}:</strong> {entry['content']}</div>\"))\n        elif entry['role'] == 'assistant':\n            display(HTML(f\"<div style='text-align: left; margin-left: 20px; color: green;'><strong>Agent:</strong> {entry['content']}</div>\")) \n```", "```py\n if conversation_active:\n        display(VBox([user_selector, input_box, agent_checkbox]))  # Keep input box, selector, and checkbox visible if active \n```", "```py\nuser_selector.observe(on_user_change, names='value') \n```", "```py\ndef on_user_change(change):\n    global active_user \n```", "```py\n active_user = change['new'] \n```", "```py\n update_display() \n```", "```py\nfrom openai import OpenAI\n# Initialize the OpenAI client\nclient = OpenAI() \n```", "```py\nuser_memory = True # True=User messages are memorized False=User messages are not memorized \n```", "```py\ndef chat_with_gpt(messages, user_message): \n```", "```py\n try:\n      namespace=\"\"\n      if \"Pinecone\" in user_message or \"RAG\" in user_message:\n        # Determine the keyword\n        if \"Pinecone\" in user_message:\n            namespace=\"genaisys\"\n        elif \"RAG\" in user_message:\n            namespace=\"data01\"\n        print(namespace)\n… \n```", "```py\n #define query text\n        query_text=user_message\n        # Retrieve query results\n        query_results = get_query_results(query_text, namespace)\n        # Process and display the results\n        print(\"Processed query results:\")\n        qtext, target_id = display_results(query_results)\n        print(qtext) \n```", "```py\n #run task\n        sc_input=qtext + \" \" + user_message\n        mrole = \"system\"\n        mcontent = \"You are an assistant who executes the tasks you are asked to do.\"\n        user_role = \"user\" \n```", "```py\n task_response = openai_api.make_openai_api_call(\n            sc_input,mrole,mcontent,user_role\n        )\n        print(task_response) \n```", "```py\n aug_output=namespace + \":\" +task_response \n```", "```py\n else:\n        if user_memory:\n                # Extract ALL user messages from the conversation history\n                user_messages_content = [\n                    msg[\"content\"] for msg in messages\n                    if msg[\"role\"] == \"user\" and \"content\" in msg\n                ]\n                # Combine all extracted user messages into a single string\n                combined_user_messages = \" \".join(user_messages_content)\n                # Add the current user_message to the combined text\n                umessage = f\"{combined_user_messages} {user_message}\" \n```", "```py\n else:\n                umessage = user_message \n```", "```py\n mrole = \"system\"\n        mcontent = \"You are an assistant who executes the tasks you are asked to do.\"\n        user_role = \"user\"\n        task_response =openai_api.make_openai_api_call(\n            umessage,mrole,mcontent,user_role\n        )\n        aug_output=task_response \n```", "```py\n # Return the augmented output\n      return aug_output \n```", "```py\n except Exception as e:\n        # Return the error message in case of an exception\n        return f\"An error occurred: {str(e)}\" \n```", "```py\n`User01:` What is there to visit? \n```", "```py\n**Agent:** The capital of France is Paris. There are numerous attractions to visit in Paris, including: 1\\. **Eiffel Tower** - An iconic symbol of Paris, offering stunning views of the city. 2\\. **Louvre Museum** - The world's largest art museum, home to the Mona Lisa… \n```", "```py\n**User02:** What is there to visit? \n```", "```py\n**Agent:** The capital of Spain is Madrid. There are many attractions to visit in Madrid, including: 1\\. **The Royal Palace of Madrid** - The official residence of the Spanish royal family, although it is now used only for state ceremonies. 2\\. **Prado Museum** … \n```", "```py\n`display_conversation_history=True`\n`summary=True` \n```", "```py\nimport json\nfrom IPython.display import display, Markdown\nimport os\nif display_conversation_history == True or summary==True:\n    # File path\n    file_path = 'conversation_history.json'\n    # Check if the file exists\n    if os.path.exists(file_path):\n        display_conversation_history=True\n        summary=True\n        print(f\"The file '{file_path}' exists.\")\n    else:\n        display_conversation_history=False\n        summary=False\n        print(f\"The file '{file_path}' does not exist.\")\n        print(\"The conversation history will not be processed.\") \n```", "```py\nThe file 'conversation_history.json' exists. \n```", "```py\n# Display option\nif display_conversation_history==True:\n  # File path\n  file_path = 'conversation_history.json'\n  # Open the file and read its content into the 'dialog' variable\n  with open(file_path, 'r', encoding='utf-8') as file:\n      dialog = json.load(file)  # Parse JSON content\n…\n# Function to format JSON content as markdown\ndef format_json_as_markdown(data, level=0):\n    html_output = \"\"\n    indent = \"  \" * level\n…\nreturn html_output\n# Format the JSON into markdown\nformatted_markdown = format_json_as_markdown(dialog)\n# Display formatted JSON as Markdown\ndisplay(Markdown(formatted_markdown)) \n```", "```py\n…\n**User01**:\n**role**:\nuser\n**content**:\nWhat is the capital of France?\n**role**:\nassistant\n**content**:\nThe capital of France is Paris.\n…\n**Content**:\nThe capital of Spain is Madrid.\n**role**:\nuser\n**content**:\nWhat is there to visit?\n**role**:\nassistant\n**content**:\nThe capital of Spain is Madrid. There are many attractions to visit in Madrid, including:\n**The Royal Palace of Madrid** – … \n```", "```py\n# Function to construct dialog string from the JSON conversation history\ndef construct_dialog_for_summary(conversation_history_json):\n    dialog = \"\"\n    for user, messages in conversation_history_json.items():\n        dialog += f\"\\n{user}:\\n\"\n        for message in messages:\n            role = message[\"role\"]\n            content = message[\"content\"]\n            dialog += f\"- {role}: {content}\\n\"\n    return dialog \n```", "```py\n# Construct the full dialog from the JSON history\nformatted_dialog = construct_dialog_for_summary(conversation_history_json) \n```", "```py\n# Task to summarize the conversation\nmrole = \"system\"\nmcontent = \"Your task is to read this JSON formatted text and summarize it.\"\nuser_role = \"user\"\ntask = f\"Read this JSON formatted text and make a very detailed summary of it with a list of actions:\\n{formatted_dialog}\" \n```", "```py\n# The make_openai_api_call function is called\ntask_response = openai_api.make_openai_api_call(\n    task, mrole, mcontent, user_role\n) \n```", "```py\nfrom IPython.display import Markdown, display\n# Display the task response as Markdown\ndisplay(Markdown(task_response)) \n```", "```py\nif summary==True:\n    # File path to the JSON file\n    file_path = '/content/conversation_history.json'\n    # Check if the file exists before calling the function\n    if os.path.exists(file_path):\n        summarize_conversation(file_path)\n    else:\n        print(f\"File '{file_path}' does not exist. Please provide a valid file path.\") \n```", "```py\n file_path = ‘/content/conversation_history.json’ or\n file_path = ‘conversation_history.json’ \n```", "```py\nThe JSON formatted text contains interactions between users and an assistant, where users inquire about the capitals of France and Spain and seek recommendations for attractions to visit in these cities. Below is a detailed summary with a list of actions:\n**User01 Interaction:**\n**1\\. Question about the Capital of France:**\n    User01 asks for the capital of France.\n    The assistant responds that the capital of France is Paris.\n**2\\. Inquiry about Attractions in Paris:**\n    User01 asks what there is to visit in Paris.\n    The assistant provides a list of notable attractions in Paris:\n **1\\. Eiffel Tower** - Iconic symbol and must-visit landmark.\n **2\\. Louvre Museum** - Largest art museum, home to the Mona Lisa…. \n```", "```py\nA customer said that our travel agency was pretty good but should have more activities. Let's ask Pinecone for ideas. \n```", "```py\n**Agent:** genaisys:To enhance your travel agency's offerings based on the customer's feedback, … 3\\. **Gather Data**: Collect data from various sources such as travel blogs, customer reviews, social media, and travel forums. This data can be used to train or query your semantic search model. 4\\. **Generate Ideas**: Use the results from the semantic search to generate a list of potential activities. For example, if you're looking to expand adventure activities, the search might suggest zip-lining, rock climbing, or guided hiking tours…. \n```", "```py\n`A customer said that our travel agency was worse than our competition and should have better service. Let's ask Pinecone what its sentiment is.` \n```", "```py\n**Agent:** genaisys:Sentiment analysis score: 0.2 Explanation: The text expresses a negative sentiment towards the travel agency. The customer explicitly states that the agency is \"worse than our competition\" and suggests that it \"should have better service.\" These statements indicate dissatisfaction and a negative comparison to competitors, which justifies a low sentiment score. \n```", "```py\nThe CTO was talking about leveraging different kind of memories the other day. What did he mean by that? Let's search RAG. \n```", "```py\n**Agent:** data01:RAG, or Retrieval-Augmented Generation, is a framework that combines retrieval-based methods with generative models to enhance the capabilities of AI systems. When your CTO mentioned leveraging different kinds of memories, they were likely referring to the various ways in which information can be stored, accessed, and utilized within such a system. Here are some types of \"memories\" that might be relevant in this context: 1\\. **Short-term Memory**: \n```", "```py\nBut what do you, the AI Agent, suggest we do to leverage these types of memories in our traveling promotion campaigns? \n```", "```py\nWhen the CTO mentioned leveraging different kinds of memories, they were likely referring to the concept of using various types of memory systems in artificial intelligence and computing to enhance performance and capabilities.…\n…consider the following strategies: 1\\. **Personalized Recommendations**: Use short-term and long-term memory to analyze customer preferences and past interactions to provide personalized travel recommendations and offers. 2\\. **Dynamic Content**: Utilize episodic memory to tailor marketing content based on past customer interactions and experiences, making the promotions more relevant and engaging. … \n```", "```py\nOK. Let's stop here, get a summary, and go see the manager to get some green lights to move ahead. \n```", "```py\n…assistant\n**content**:\nWhen the CTO mentioned leveraging different kinds of memories, they were likely referring to the concept of…\n**Episodic Memory**: This involves storing information about specific events or experiences. In AI, episodic memory can be used to recall past interactions or events to inform future decisions…\n…To leverage these types of memories in your travel promotion campaigns, consider the following strategies:\n**Personalized Recommendations**: Use short-term and long-term memory to analyze customer preferences and past interactions to provide personalized travel recommendations and offers.\n**Dynamic Content**: Utilize episodic memory to tailor marketing content based on past customer interactions and experiences, making the promotions more relevant and engaging….\nThe summary is interesting because it provides useful suggestions for this online travel agency:\n**AI Suggestion for Travel Promotion**:\n**1.Personalized Recommendations**: Use short-term and long-term memory for personalized travel offers.\n**2.Dynamic Content**: Utilize episodic memory for tailored marketing content.\n**3.Knowledge-Based Insights**: Leverage semantic memory for travel tips and destination information.\n**4.Real-Time Engagement**: Use working memory for real-time customer interactions.\n**5.Feedback and Improvement**: Implement long-term memory systems to analyze feedback and improve campaigns. \n```"]