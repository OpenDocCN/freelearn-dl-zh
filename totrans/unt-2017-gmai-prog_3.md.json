["```py\nusing UnityEngine;\n\npublic class Target : MonoBehaviour\n{\n    public Transform targetMarker;\n\n    void Start (){}\n\n    void Update ()\n    {\n        int button = 0;\n\n        //Get the point of the hit position when the mouse is being clicked\n        if(Input.GetMouseButtonDown(button)) \n        {\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n            RaycastHit hitInfo;\n\n            if (Physics.Raycast(ray.origin, ray.direction, out hitInfo)) \n            {\n                Vector3 targetPosition = hitInfo.point;\n                targetMarker.position = targetPosition;\n            }\n        }\n    }\n}\n```", "```py\nusing UnityEngine;\n\npublic class PlayerTank : MonoBehaviour \n{\n    public Transform targetTransform;\n    public float targetDistanceTolerance = 3.0f;\n\n    private float movementSpeed;\n    private float rotationSpeed;\n\n  // Use this for initialization\n  void Start () \n    {\n        movementSpeed = 10.0f;\n        rotationSpeed = 2.0f;\n  }\n\n  // Update is called once per frame\n  void Update () \n    {\n        if (Vector3.Distance(transform.position, targetTransform.position) < targetDistanceTolerance) \n        {\n            return;\n        }\n\n        Vector3 targetPosition = targetTransform.position;\n        targetPosition.y = transform.position.y;\n        Vector3 direction = targetPosition - transform.position;\n\n        Quaternion tarRot = Quaternion.LookRotation(direction);\n        transform.rotation = Quaternion.Slerp(transform.rotation, tarRot, rotationSpeed * Time.deltaTime);\n\n        transform.Translate(new Vector3(0, 0, movementSpeed * Time.deltaTime));\n  }\n}\n```", "```py\nusing UnityEngine;\n\npublic class Aspect : MonoBehaviour {\n  public enum AspectTypes {\n    PLAYER,\n    ENEMY,\n  }\n  public AspectTypes aspectType;\n}\n```", "```py\nusing UnityEngine;\n\npublic class Wander : MonoBehaviour {\n    private Vector3 targetPosition;\n\n    private float movementSpeed = 5.0f;\n    private float rotationSpeed = 2.0f;\n    private float targetPositionTolerance = 3.0f;\n    private float minX;\n    private float maxX;\n    private float minZ;\n    private float maxZ;\n\n    void Start() {\n        minX = -45.0f;\n        maxX = 45.0f;\n\n        minZ = -45.0f;\n        maxZ = 45.0f;\n\n        //Get Wander Position\n        GetNextPosition();\n    }\n\n    void Update() {\n        if (Vector3.Distance(targetPosition, transform.position) <= targetPositionTolerance) {\n            GetNextPosition();\n        }\n\n        Quaternion targetRotation = Quaternion.LookRotation(targetPosition - transform.position);\n        transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);\n\n        transform.Translate(new Vector3(0, 0, movementSpeed * Time.deltaTime));\n    }\n\n    void GetNextPosition() {\n        targetPosition = new Vector3(Random.Range(minX, maxX), 0.5f, Random.Range(minZ, maxZ));\n    }\n}\n\n```", "```py\nusing UnityEngine;\n\npublic class Sense : MonoBehaviour {\n  public bool enableDebug = true;\n  public Aspect.AspectTypes aspectName = Aspect.AspectTypes.ENEMY;\n  public float detectionRate = 1.0f;\n\n  protected float elapsedTime = 0.0f;\n\n  protected virtual void Initialize() { }\n  protected virtual void UpdateSense() { }\n\n  // Use this for initialization\n  void Start () \n    {\n    elapsedTime = 0.0f;\n    Initialize();\n  }\n\n  // Update is called once per frame\n  void Update () \n    {\n    UpdateSense();\n  }\n}\n```", "```py\nusing UnityEngine;\n\npublic class Perspective : Sense\n{\n    public int fieldOfView = 45;\n    public int viewDistance = 100;\n\n    private Transform playerTransform;\n    private Vector3 rayDirection;\n\n    protected override void Initialize() \n    {\n        playerTransform = GameObject.FindGameObjectWithTag(\"Player\").transform;\n    }\n\n    protected override void UpdateSense() \n    {\n        elapsedTime += Time.deltaTime;\n\n        if (elapsedTime >= detectionRate) \n        {\n            DetectAspect();\n        }\n  }\n\n    //Detect perspective field of view for the AI Character\n    void DetectAspect()\n    {\n        RaycastHit hit;\n        rayDirection = playerTransform.position - transform.position;\n\n        if ((Vector3.Angle(rayDirection, transform.forward)) < fieldOfView)\n        {\n            // Detect if player is within the field of view\n            if (Physics.Raycast(transform.position, rayDirection, out hit, viewDistance))\n            {\n                Aspect aspect = hit.collider.GetComponent<Aspect>();\n                if (aspect != null)\n                {\n                    //Check the aspect\n                    if (aspect.aspectType != aspectName)\n                    {\n                        print(\"Enemy Detected\");\n                    }\n                }\n            }\n        }\n    }\n```", "```py\n  void OnDrawGizmos()\n    {\n        if (playerTransform == null) \n        {\n            return;\n        }\n\n        Debug.DrawLine(transform.position, playerTransform.position, Color.red);\n\n        Vector3 frontRayPoint = transform.position + (transform.forward * viewDistance);\n\n        //Approximate perspective visualization\n        Vector3 leftRayPoint = frontRayPoint;\n        leftRayPoint.x += fieldOfView * 0.5f;\n\n        Vector3 rightRayPoint = frontRayPoint;\n        rightRayPoint.x -= fieldOfView * 0.5f;\n\n        Debug.DrawLine(transform.position, frontRayPoint, Color.green);\n        Debug.DrawLine(transform.position, leftRayPoint, Color.green);\n        Debug.DrawLine(transform.position, rightRayPoint, Color.green);\n    }\n}\n```", "```py\nusing UnityEngine;\n\npublic class Touch : Sense\n{\n    void OnTriggerEnter(Collider other)\n    {\n        Aspect aspect = other.GetComponent<Aspect>();\n        if (aspect != null)\n        {\n            //Check the aspect\n            if (aspect.aspectType != aspectName)\n            {\n                print(\"Enemy Touch Detected\");\n            }\n        }\n    }\n}\n```"]