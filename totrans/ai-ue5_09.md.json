["```py\nUCLASS(BlueprintType, Blueprintable, ClassGroup=\"UnrealAgilityArena\",\n  meta=(BlueprintSpawnableComponent))\n```", "```py\npublic:\n    UBaseWeaponComponent();\n    UFUNCTION(BlueprintCallable)\n    virtual void Shoot();\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Bullet\")\n    TSubclassOf<AActor> BulletClass;\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Bullet\")\n    FVector MuzzleOffset = FVector(150, 30.f, 0.f);\nprotected:\n    virtual void BeginPlay() override;\n```", "```py\n#include \"BaseDummyCharacter.h\"\n```", "```py\nUBaseWeaponComponent::UBaseWeaponComponent()\n{\n    static ConstructorHelpers::FObjectFinder<UStaticMesh>       StaticMeshAsset(\n       TEXT(\"/Game/KayKit/PrototypeBits/Models/Gun_Pistol.Gun_         Pistol\"));\n    if (StaticMeshAsset.Succeeded())\n    {\n       UStaticMeshComponent::SetStaticMesh(StaticMeshAsset.Object);\n    }\n}\n```", "```py\nvoid UBaseWeaponComponent::BeginPlay()\n{\n    Super::BeginPlay();\n    const auto Character = Cast<ABaseDummyCharacter>(GetOwner());\n    if(Character == nullptr) return;\n    AttachToComponent(Character->GetMesh(),       FAttachmentTransformRules::SnapToTargetIncludingScale,       \"hand_right\");\n}\n```", "```py\nvoid UBaseWeaponComponent::Shoot()\n{\n    if (BulletClass == nullptr) return;\n    auto const World = GetWorld();\n    if (World == nullptr) return;\n    const FRotator SpawnRotation = GetOwner()->GetActorRotation();\n    const FVector SpawnLocation = GetOwner()->GetActorLocation() +       SpawnRotation.RotateVector(MuzzleOffset);\n    FActorSpawnParameters ActorSpawnParams;\n    ActorSpawnParams.SpawnCollisionHandlingOverride =       ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButDont       SpawnIfColliding;\n    World->SpawnActor<AActor>(BulletClass, SpawnLocation, SpawnRotation, ActorSpawnParams);\n}\n```", "```py\nclass USphereComponent;\nclass UProjectileMovementComponent;\nclass UStaticMeshComponent;\n```", "```py\nUCLASS(Blueprintable)\n```", "```py\nUPROPERTY(VisibleDefaultsOnly, Category=\"Projectile\")\nUSphereComponent* CollisionComponent;\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=\"Projectile\",   meta=(AllowPrivateAccess=\"true\"))\nUStaticMeshComponent* MeshComponent;\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=\"Movement\",   meta=(AllowPrivateAccess=\"true\"))\nUProjectileMovementComponent* ProjectileMovementComponent;\n```", "```py\npublic:\n   ABaseGunBullet();\n    USphereComponent* GetCollision() const { return       CollisionComponent; }\n    UProjectileMovementComponent* GetProjectileMovement() const {       return ProjectileMovementComponent; }\n    UStaticMeshComponent* GetMesh() const { return MeshComponent; }\n```", "```py\nprotected:\n    virtual void BeginPlay() override;\n    UFUNCTION()\n    void OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor,       UPrimitiveComponent* OtherComp, FVector NormalImpulse, const         FHitResult& Hit);\n```", "```py\n#include \"GameFramework/ProjectileMovementComponent.h\"\n#include \"Components/SphereComponent.h\"\n#include \"Components/StaticMeshComponent.h\"\n#include \"Engine/DamageEvents.h\"\n```", "```py\nABaseGunBullet::ABaseGunBullet()\n{\n    PrimaryActorTick.bCanEverTick = false;\n    InitialLifeSpan = 10.0f;\n    CollisionComponent =       CreateDefaultSubobject<USphereComponent>(TEXT(\"Collision\"));\n    CollisionComponent->InitSphereRadius(20.0f);\n    CollisionComponent->BodyInstance.      SetCollisionProfileName(\"BlockAll\");\n    CollisionComponent->OnComponentHit.AddDynamic(this,       &ABaseGunBullet::OnHit);\n    CollisionComponent->SetWalkableSlopeOverride       (FWalkableSlopeOverride(WalkableSlope_Unwalkable, 0.f));\n    CollisionComponent->CanCharacterStepUpOn = ECB_No;\n    RootComponent = CollisionComponent;\n    ProjectileMovementComponent = \n      CreateDefaultSubobject<UProjectileMovementComponent>(TEXT         (\"Projectile\"));\n    ProjectileMovementComponent->UpdatedComponent =       CollisionComponent;\n    ProjectileMovementComponent->InitialSpeed = 1800.f;\n    ProjectileMovementComponent->MaxSpeed = 1800.f;\n    ProjectileMovementComponent->bRotationFollowsVelocity = true;\n    ProjectileMovementComponent->ProjectileGravityScale = 0.f;\n    MeshComponent =       CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"Mesh\"));\n    MeshComponent->SetupAttachment(RootComponent);\n    MeshComponent->SetRelativeRotation(FRotator(0.f, -90.f, 0.f));\n    MeshComponent->SetRelativeScale3D(FVector(2.f, 2.f, 2.f));\n   static ConstructorHelpers::FObjectFinder<UStaticMesh>      StaticMeshAsset(\n       TEXT(\"/Game/KayKit/PrototypeBits/Models/Bullet.Bullet\"));\n   if (StaticMeshAsset.Succeeded())\n    {\n       MeshComponent->SetStaticMesh(StaticMeshAsset.Object);\n    }\n}\n```", "```py\nvoid ABaseGunBullet::OnHit(UPrimitiveComponent* HitComp, AActor*   OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse,     const FHitResult& Hit)\n{\n    if (OtherActor != nullptr && OtherActor != this)\n    {\n       const auto DamageEvt = FDamageEvent();\n       OtherActor->TakeDamage(1.f, DamageEvt, nullptr, nullptr);\n    }\n    Destroy();\n}\n```", "```py\nclass UStaticMeshComponent;\n```", "```py\nprotected:\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly,       Category=\"Projectile\", meta=(AllowPrivateAccess=\"true\"))\n    UStaticMeshComponent* MeshComponent;\n    virtual float TakeDamage(float DamageAmount, FDamageEvent const&       DamageEvent, AController* EventInstigator, AActor* DamageCauser)         override;\n```", "```py\nABaseTarget::ABaseTarget()\n{\n    PrimaryActorTick.bCanEverTick = false;\n    MeshComponent =       CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"Mesh\"));\n    MeshComponent->SetupAttachment(RootComponent);\n    MeshComponent->SetRelativeRotation(FRotator(0.f, -90.f, 0.f));\n    RootComponent = MeshComponent;\n    static ConstructorHelpers::FObjectFinder<UStaticMesh>       StaticMeshAsset(\n    TEXT(\"/Game/KayKit/PrototypeBits/Models/target_stand_B_target_      stand_B.target_stand_B_target_stand_B\"));\n    if (StaticMeshAsset.Succeeded())\n    {\n       MeshComponent->SetStaticMesh(StaticMeshAsset.Object);\n    }\n}\n```", "```py\nfloat ABaseTarget::TakeDamage(float DamageAmount, FDamageEvent const&   DamageEvent, AController* EventInstigator,\n    AActor* DamageCauser)\n{\n    Tags[0] = \"Untagged\";\n    return DamageAmount;\n}\n```", "```py\nUCLASS(const, hidecategories=Object, collapsecategories, Config = Game, meta=(DisplayName=\"Shoot\"))\n```", "```py\npublic:\n    UAnimNotify_Shoot();\n   virtual void Notify(USkeletalMeshComponent* MeshComp,      UAnimSequenceBase* Animation, const FAnimNotifyEventReference&        EventReference) override;\n```", "```py\n#include \"BaseDummyCharacter.h\"\n#include \"BaseWeaponComponent.h\"\n```", "```py\nUAnimNotify_Shoot::UAnimNotify_Shoot():Super()\n{\n#if WITH_EDITORONLY_DATA\n    NotifyColor = FColor(222, 142, 142, 255);\n#endif\n}\n```", "```py\nvoid UAnimNotify_Shoot::Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation,\n                               const FAnimNotifyEventReference& EventReference)\n{\n    if(MeshComp == nullptr) return;\n    const auto Character = Cast<ABaseDummyCharacter>      (MeshComp->GetOwner());\n    if(Character == nullptr) return;\n    const auto WeaponComponent = Character->      GetComponentByClass<UBaseWeaponComponent>();\n    if(WeaponComponent == nullptr) return;\n    WeaponComponent->Shoot();\n}\n```", "```py\nprotected:\n   UBTDecorator_CheckTagOnActor();\n   UPROPERTY(EditAnywhere, Category=TagCheck)\n    FBlackboardKeySelector ActorToCheck;\n   UPROPERTY(EditAnywhere, Category=TagCheck)\n    FName TagName;\n   virtual bool CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const override;\n   virtual void InitializeFromAsset(UBehaviorTree& Asset) override;\n```", "```py\n#include \"BehaviorTree/BlackboardComponent.h\"\n#include \"BehaviorTree/Blackboard/BlackboardKeyType_Object.h\"\n```", "```py\nUBTDecorator_CheckTagOnActor::UBTDecorator_CheckTagOnActor()\n{\n    NodeName = \"Tag Condition\";\n    ActorToCheck.AddObjectFilter(this, GET_MEMBER_NAME_      CHECKED(UBTDecorator_CheckTagOnActor, ActorToCheck),         AActor::StaticClass());\n    ActorToCheck.SelectedKeyName = FBlackboard::KeySelf;\n}\n```", "```py\nbool UBTDecorator_CheckTagOnActor::CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp,\n                                                              uint8* NodeMemory) const\n{\n    const UBlackboardComponent* BlackboardComp = OwnerComp.      GetBlackboardComponent();\n    if (BlackboardComp == nullptr) return false;\n   const AActor* Actor = Cast<AActor>(BlackboardComp-     >GetValue<UBlackboardKeyType_Object>(ActorToCheck.       SelectedKeyName));\n    return Actor != nullptr && Actor->ActorHasTag(TagName);\n}\n```", "```py\nvoid UBTDecorator_CheckTagOnActor::InitializeFromAsset(UBehaviorTree& Asset)\n{\n    Super::InitializeFromAsset(Asset);\n    if (const UBlackboardData* BBAsset = GetBlackboardAsset();       ensure(BBAsset))\n    {\n       ActorToCheck.ResolveSelectedKey(*BBAsset);\n    }\n}\n```", "```py\npublic:\n    UBTService_SetAmmo();\nprotected:\n    UPROPERTY(BlueprintReadOnly, EditAnywhere, Category=\"Blackboard\")\n    FBlackboardKeySelector NeedsReload;\n    UPROPERTY(BlueprintReadOnly, EditAnywhere, Category=\"Blackboard\")\n    bool bKeyValue = false;\n    virtual void OnBecomeRelevant(UBehaviorTreeComponent& OwnerComp,       uint8* NodeMemory) override;\n```", "```py\n#include \"BehaviorTree/BlackboardComponent.h\"\n```", "```py\nUBTService_SetAmmo::UBTService_SetAmmo()\n{\n    NodeName = \"SetAmmo\";\n    bCreateNodeInstance = true;\n    bNotifyBecomeRelevant = true;\n    bNotifyTick = false;\n}\n```", "```py\nvoid UBTService_SetAmmo::OnBecomeRelevant(UBehaviorTreeComponent&   OwnerComp, uint8* NodeMemory)\n{\n    const auto BlackboardComp = OwnerComp.GetBlackboardComponent();\n    if (BlackboardComp == nullptr) return;\n    BlackboardComp->SetValueAsBool(NeedsReload.SelectedKeyName,       bKeyValue);\n}\n```", "```py\npublic:\n   UPROPERTY(EditAnywhere, Category=\"Dummy Task\")\n   UAnimMontage* AnimMontage;\n   virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent&      OwnerComp, uint8* NodeMemory) override;\n```", "```py\nEBTNodeResult::Type UBTTask_PlayMontage::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)\n{\n    if(AnimMontage == nullptr) return EBTNodeResult::Failed;\n    const auto Controller = OwnerComp.GetAIOwner();\n    if(Controller == nullptr) return EBTNodeResult::Failed;\n   const auto Character = Cast<ACharacter>     (Controller->GetCharacter());\n    if(Character == nullptr) return EBTNodeResult::Failed;\n    Character->PlayAnimMontage(AnimMontage, 1.f, FName(\"Default\"));\n    return EBTNodeResult::Succeeded;\n}\n```", "```py\npublic:\n    UBTTask_FindAvailableTarget();\n   UPROPERTY(EditAnywhere, Category=\"Blackboard\")\n    FBlackboardKeySelector TargetActor;\n    UPROPERTY(EditAnywhere, Category=\"Dummy Task\")\n    FName TargetTag;\nprotected:\n    virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent&       OwnerComp, uint8* NodeMemory) override;\n```", "```py\n#include \"BehaviorTree/BlackboardComponent.h\"\n#include \"Kismet/GameplayStatics.h\"\n```", "```py\nUBTTask_FindAvailableTarget::UBTTask_FindAvailableTarget()\n{\n    NodeName = \"Find Available Target\";\n    TargetActor.AddObjectFilter(this, GET_MEMBER_NAME_CHECKED(UBTTask_      FindAvailableTarget, TargetActor), AActor::StaticClass());\n    TargetActor.SelectedKeyName = FBlackboard::KeySelf;\n}\n```", "```py\nEBTNodeResult::Type UBTTask_FindAvailableTarget::ExecuteTask   (UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)\n{\n    const auto BlackboardComp = OwnerComp.GetBlackboardComponent();\n    if (BlackboardComp == nullptr) { return EBTNodeResult::Failed; }\n    TArray<AActor*> TargetList;\n    UGameplayStatics::GetAllActorsWithTag(GetWorld(), TargetTag,       TargetList);\n    if(TargetList.Num() == 0) { return EBTNodeResult::Failed; }\n    const auto RandomTarget = TargetList[FMath::RandRange(0,       TargetList.Num() - 1)];\n    BlackboardComp->SetValueAsObject(TargetActor.SelectedKeyName,       RandomTarget);\n    return EBTNodeResult::Succeeded;\n}\n```"]