["```py\n\n   /** starts this task, should return Succeeded, Failed or InProgress\n   * (use FinishLatentTask() when returning InProgress)\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory);\n\nprotected:\n  /** aborts this task, should return Aborted or InProgress\n   * (use FinishLatentAbort() when returning InProgress)\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n virtual EBTNodeResult::Type AbortTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory);\n\npublic:\n#if WITH_EDITOR\n  virtual FName GetNodeIconName() const override;\n#endif // WITH_EDITOR\n  virtual void OnGameplayTaskDeactivated(UGameplayTask& Task) override;\n\n  /** message observer's hook */\n  void ReceivedMessage(UBrainComponent* BrainComp, const FAIMessage& Message);\n\n  /** wrapper for node instancing: ExecuteTask */\n  EBTNodeResult::Type WrappedExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const;\n\n  /** wrapper for node instancing: AbortTask */\n  EBTNodeResult::Type WrappedAbortTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const;\n\n  /** wrapper for node instancing: TickTask */\n  void WrappedTickTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds) const;\n\n  /** wrapper for node instancing: OnTaskFinished */\n  void WrappedOnTaskFinished(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTNodeResult::Type TaskResult) const;\n\n  /** helper function: finish latent executing */\n  void FinishLatentTask(UBehaviorTreeComponent& OwnerComp, EBTNodeResult::Type TaskResult) const;\n\n  /** helper function: finishes latent aborting */\n  void FinishLatentAbort(UBehaviorTreeComponent& OwnerComp) const;\n\n  /** @return true if task search should be discarded when this task is selected to execute but is already running */\n  bool ShouldIgnoreRestartSelf() const;\n\n  /** service nodes */\n  UPROPERTY()\n  TArray<UBTService*> Services;\n\nprotected:\n\n  /** if set, task search will be discarded when this task is selected to execute but is already running */\n  UPROPERTY(EditAnywhere, Category=Task)\n  uint32 bIgnoreRestartSelf : 1;\n\n  /** if set, TickTask will be called */\n  uint32 bNotifyTick : 1;\n\n  /** if set, OnTaskFinished will be called */\n  uint32 bNotifyTaskFinished : 1;\n\n  /** ticks this task \n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void TickTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds);\n\n  /** message handler, default implementation will finish latent execution/abortion\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void OnMessage(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, FName Message, int32 RequestID, bool bSuccess);\n\n  /** called when task execution is finished\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void OnTaskFinished(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTNodeResult::Type TaskResult);\n\n  /** register message observer */\n  void WaitForMessage(UBehaviorTreeComponent& OwnerComp, FName MessageType) const;\n  void WaitForMessage(UBehaviorTreeComponent& OwnerComp, FName MessageType, int32 RequestID) const;\n\n  /** unregister message observers */\n  void StopWaitingForMessages(UBehaviorTreeComponent& OwnerComp) const;\n```", "```py\n/** \n * Task are leaf nodes of behavior tree, which perform actual actions\n *\n * Because some of them can be instanced for specific AI, following virtual functions are not marked as const:\n * - ExecuteTask\n * - AbortTask\n * - TickTask\n * - OnMessage\n *\n * If your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!\n * Template nodes are shared across all behavior tree components using the same tree asset and must store\n * their runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )\n *\n */\n```", "```py\n\n   /** wrapper for node instancing: CalculateRawConditionValue */\n  bool WrappedCanExecute(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const;\n\n  /** wrapper for node instancing: OnNodeActivation */\n  void WrappedOnNodeActivation(FBehaviorTreeSearchData& SearchData) const;\n\n  /** wrapper for node instancing: OnNodeDeactivation */\n  void WrappedOnNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type NodeResult) const;\n\n  /** wrapper for node instancing: OnNodeProcessed */\n  void WrappedOnNodeProcessed(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& NodeResult) const;\n\n  /** @return flow controller's abort mode */\n  EBTFlowAbortMode::Type GetFlowAbortMode() const;\n\n  /** @return true if condition should be inversed */\n  bool IsInversed() const;\n\n  virtual FString GetStaticDescription() const override;\n\n  /** modify current flow abort mode, so it can be used with parent composite */\n  void UpdateFlowAbortMode();\n\n  /** @return true if current abort mode can be used with parent composite */\n  bool IsFlowAbortModeValid() const;\n\nprotected:\n\n  /** if set, FlowAbortMode can be set to None */\n  uint32 bAllowAbortNone : 1;\n\n  /** if set, FlowAbortMode can be set to LowerPriority and Both */\n  uint32 bAllowAbortLowerPri : 1;\n\n  /** if set, FlowAbortMode can be set to Self and Both */\n  uint32 bAllowAbortChildNodes : 1;\n\n  /** if set, OnNodeActivation will be used */\n  uint32 bNotifyActivation : 1;\n\n  /** if set, OnNodeDeactivation will be used */\n  uint32 bNotifyDeactivation : 1;\n\n  /** if set, OnNodeProcessed will be used */\n  uint32 bNotifyProcessed : 1;\n\n  /** if set, static description will include default description of inversed condition */\n  uint32 bShowInverseConditionDesc : 1;\n\nprivate:\n  /** if set, condition check result will be inversed */\n  UPROPERTY(Category = Condition, EditAnywhere)\n  uint32 bInverseCondition : 1;\n\nprotected:\n  /** flow controller settings */\n  UPROPERTY(Category=FlowControl, EditAnywhere)\n  TEnumAsByte<EBTFlowAbortMode::Type> FlowAbortMode;\n\n  void SetIsInversed(bool bShouldBeInversed);\n\n  /** called when underlying node is activated\n    * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void OnNodeActivation(FBehaviorTreeSearchData& SearchData);\n\n  /** called when underlying node has finished\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void OnNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type NodeResult);\n\n  /** called when underlying node was processed (deactivated or failed to activate)\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void OnNodeProcessed(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& NodeResult);\n\n  /** calculates raw, core value of decorator's condition. Should not include calling IsInversed */\n  virtual bool CalculateRawConditionValue(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory) const;\n\n  /** more \"flow aware\" version of calling RequestExecution(this) on owning behavior tree component\n   * should be used in external events that may change result of CalculateRawConditionValue */\n  void ConditionalFlowAbort(UBehaviorTreeComponent& OwnerComp, EBTDecoratorAbortRequest RequestMode) const;\n```", "```py\n/** \n * Decorators are supporting nodes placed on parent-child connection, that receive notification about execution flow and can be ticked\n *\n * Because some of them can be instanced for specific AI, following virtual functions are not marked as const:\n *  - OnNodeActivation\n *  - OnNodeDeactivation\n *  - OnNodeProcessed\n *  - OnBecomeRelevant (from UBTAuxiliaryNode)\n *  - OnCeaseRelevant (from UBTAuxiliaryNode)\n *  - TickNode (from UBTAuxiliaryNode)\n *\n * If your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!\n * Template nodes are shared across all behavior tree components using the same tree asset and must store\n * their runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )\n *\n */\n```", "```py\nvirtual FString GetStaticDescription() const override;\n\n  void NotifyParentActivation(FBehaviorTreeSearchData& SearchData);\n\nprotected:\n\n  // Gets the description of our tick interval\n  FString GetStaticTickIntervalDescription() const;\n\n  // Gets the description for our service\n  virtual FString GetStaticServiceDescription() const;\n\n  /** defines time span between subsequent ticks of the service */\n  UPROPERTY(Category=Service, EditAnywhere, meta=(ClampMin=\"0.001\"))\n  float Interval;\n\n  /** adds random range to service's Interval */\n  UPROPERTY(Category=Service, EditAnywhere, meta=(ClampMin=\"0.0\"))\n  float RandomDeviation;\n\n  /** call Tick event when task search enters this node (SearchStart will be called as well) */\n  UPROPERTY(Category = Service, EditAnywhere, AdvancedDisplay)\n  uint32 bCallTickOnSearchStart : 1;\n\n  /** if set, next tick time will be always reset to service's interval when node is activated */\n  UPROPERTY(Category = Service, EditAnywhere, AdvancedDisplay)\n  uint32 bRestartTimerOnEachActivation : 1;\n\n  /** if set, service will be notified about search entering underlying branch */\n  uint32 bNotifyOnSearch : 1;\n\n  /** update next tick interval\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds) override;\n\n  /** called when search enters underlying branch\n   * this function should be considered as const (don't modify state of object) if node is not instanced! */\n  virtual void OnSearchStart(FBehaviorTreeSearchData& SearchData);\n\n#if WITH_EDITOR\n  virtual FName GetNodeIconName() const override;\n#endif // WITH_EDITOR\n\n  /** set next tick time */\n  void ScheduleNextTick(uint8* NodeMemory);\n```", "```py\n/** \n * Behavior Tree service nodes is designed to perform \"background\" tasks that update AI's knowledge.\n *\n * Services are being executed when underlying branch of behavior tree becomes active,\n * but unlike tasks they don't return any results and can't directly affect execution flow.\n *\n * Usually they perform periodical checks (see TickNode) and often store results in blackboard.\n * If any decorator node below requires results of check beforehand, use OnSearchStart function.\n * Keep in mind that any checks performed there have to be instantaneous!\n * \n * Other typical use case is creating a marker when specific branch is being executed\n * (see OnBecomeRelevant, OnCeaseRelevant), by setting a flag in blackboard.\n *\n * Because some of them can be instanced for specific AI, following virtual functions are not marked as const:\n * - OnBecomeRelevant (from UBTAuxiliaryNode)\n * - OnCeaseRelevant (from UBTAuxiliaryNode)\n * - TickNode (from UBTAuxiliaryNode)\n * - OnSearchStart\n *\n * If your node is not being instanced (default behavior), DO NOT change any properties of object within those functions!\n * Template nodes are shared across all behavior tree components using the same tree asset and must store\n * their runtime properties in provided NodeMemory block (allocation size determined by GetInstanceMemorySize() )\n */\n```"]