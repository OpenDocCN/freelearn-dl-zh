- en: '*Chapter 7*: Transforming Your Data inside a Workflow'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to manipulate data within workflows so that
    the APIs that you create can return the data in a useful format. You will also
    learn about sharing data between workflows, working with arrays and JSON objects,
    merging datasets, and performing analytics and calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Sharing data between workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing calculations and analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements that you''ll need to prepare before
    continuing with this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: You should have created an account on Airtable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: n8n should be running and the Editor UI should be open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the completed code examples for the chapter on GitHub at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%207.](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%207)
  prefs: []
  type: TYPE_NORMAL
- en: Sharing data between workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you're building workflows with n8n, you may find yourself repeating certain
    patterns. Examples of such patterns could be pushing data to Airtable, transforming
    the data to fit a particular format, or performing checks regarding the validity
    of the incoming data. At other times, your workflows might grow in size with more
    than 20 or 30 nodes, and it might become difficult to manage so many different
    nodes and logic in a single workflow.
  prefs: []
  type: TYPE_NORMAL
- en: If you come from a programming background, you can probably relate this to creating
    functions or modules so that you can create reusable chunks of code that are modular
    and easier to manage. n8n allows you to do this using the **Execute Workflow**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider a workflow: we need to get data using the **Hacker News** node,
    filter the data in the workflow to include only the title and the URL of the articles,
    and insert the data into an Airtable. Let''s break this workflow down into two
    parts for illustration purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the data from Hacker News
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering the data and inserting it into Airtable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do this follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the n8n Editor UI and create a new **Workflow**. Add a **Hacker News**
    node and connect it to the **Start** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **All** resource for the **Hacker News** node. Now, add an **Execute
    Workflow** node and connect it to the **Hacker News** node. We'll refer to this
    workflow as **Workflow 1** from here on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save this **Workflow**. It should now look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – A workflow that was created using the Execute Workflow node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.01_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – A workflow that was created using the Execute Workflow node
  prefs: []
  type: TYPE_NORMAL
- en: In a new tab, create a new **Workflow**. In this new **Workflow**, add a **Set**
    node and an **Airtable** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the `title` and `url` properties of the article get set and inserted
    into the `{{$json["title"]}}`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{{$json["url"]}}`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, configure the `http://localhost:5678/workflow/297`, so the ID would be
    **297**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s what my **Workflow** and its ID look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – A workflow for filtering and inserting data into Airtable'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.02_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – A workflow for filtering and inserting data into Airtable
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to the workflow with the **Execute Workflow** node and enter the
    ID of the new workflow. Execute the workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that **Workflow 1** runs **Workflow 2**, gets the data that's
    returned by it, and displays it in the output of the **Execute Workflow** node.
    This is how you can share data between multiple workflows in n8n and break them
    into more manageable chunks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand how the data passes between the two workflows that we created.
    The **Execute Workflow** node in **Workflow 1** passes the data to the **Start**
    node of **Workflow 2**. Because of this, all the nodes of **Workflow 2** must
    be connected to the **Start** node. The last node of **Workflow 2** sends the
    data back to the **Execute Workflow** node in **Workflow 1**, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Flow of data between the two workflows'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.03_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Flow of data between the two workflows
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the options provided by the **Execute Workflow** node.
    The **Source** field allows you to specify how the node should look for the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database**: Loads the workflow from the database by its ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local File**: Loads the workflow from a locally saved file. This path must
    be relative to where n8n is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter**: Loads the workflow from a parameter. Here, you can provide the
    workflow JSON.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL**: Loads the workflow from a URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at how we can merge datasets in an n8n workflow using the **Merge**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: Merging datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 6*](B17493_06_Final_PD_ePub.xhtml#_idTextAnchor116), *Powering
    Your API with a No Code Database*, we learned how to use Airtable as a no-code
    database for our application. Let''s build on that example to visualize what a
    database for a newsletter management app could look like. Typically, databases
    have different tables for different categories of data points, and we can reference
    data between different tables using unique IDs. Let''s understand this with the
    help of an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Airtable base called **The n8n book** that you created in [*Chapter
    6*](B17493_06_Final_PD_ePub.xhtml#_idTextAnchor116), *Powering Your API with a
    No Code Database*. Rename **Table 1** to **Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add two new tables to it called **Newsletters** and **Stats**. In the **Newsletters**
    table, add the following columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**NewsletterID** (single-line text)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subject** (single-line text)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Content** (long text)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clicks** (single-line text)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an entry to the table called **NewsletterID1**. It should now look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Creating and filling the Newsletters table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.04_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Creating and filling the Newsletters table
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Stats** table, add the following columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**UserID** (single-line text)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clicks** (single-line text)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an entry to the table called **UserID1**. It should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Creating and filling the Stats table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.05_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Creating and filling the Stats table
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have three tables with unique IDs that can be used to cross-reference
    data between the different tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that we want to know how many clicks have been made by each user.
    We want to know this number so that we can send them an email, thanking them for
    their active engagement if it is greater than 9\. To build out a workflow for
    this, we''d need to have two crucial pieces of information: the user''s email
    address and their number of clicks. Both these details reside in different tables
    that are linked only by the unique **UserID**. Let''s use the **Merge** node to
    get all the information that we need.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Editor UI and add an `fields` object. Since we don''t need the timestamp
    and the **Airtable** node''s ID, we can get rid of them. You can use either the
    **Set** node or the **Function**/**Function Item** nodes to do that. I used the
    **Function** node with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code ensures that only the `fields` array is returned by this
    node. The data should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – This is what the data from the Function node should look like'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.06_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – This is what the data from the Function node should look like
  prefs: []
  type: TYPE_NORMAL
- en: Now, add a **Merge** node and connect **Input 1** to the **Function** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to get the data from the **Stats** table. Perform the same steps
    that we mentioned at the beginning of this section by adding an **Airtable** node
    (which we will call **Airtable1**), along with a **Function** (or **Set**) node
    (which we will call **Function1**), and connecting it to **Input 2** of the **Merge**
    node. The workflow should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – This is what the workflow should look like'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.07_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – This is what the workflow should look like
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Merge** node and set **Mode** to **Merge By Key**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **UserID** in the **Property Input 1** and **Property Input 2** fields.
    We are doing this since **UserID** is the field linking the two datasets from
    the two different tables together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the workflow; the result of the **Merge** node should look something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The Merge node merging the data from two different tables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.08_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – The Merge node merging the data from two different tables
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of n8n also has an Item Lists node that can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the two pieces of data that we need, we can add an **IF** node
    and an email node (such as the **Send Email** or **Gmail** node) after the **Merge**
    node so that we can thank the engaged readers of the newsletter.
  prefs: []
  type: TYPE_NORMAL
- en: The **Merge** node has several different modes that can be used to merge the
    data in the format that works best for your use case. Now that we know how we
    can merge datasets inside a workflow using n8n, let's learn how to perform calculations
    and analytics in n8n using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Performing calculations and analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use JavaScript in n8n within expressions and use the **Function** nodes
    to perform mathematical calculations and basic analytics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the newsletter database from the *Merging datasets* section to try
    out some calculations. We have added a few more records to the tables. You can
    clone the **Airtable** using the following link if you''d like to use our records:
    [https://airtable.com/invite/l?inviteId=invRJMGCMu7HWQzKW&inviteToken=3b6fbc536ccc17cf24fbeb01b5e8a253fe99afd27616f3abaeaffb046cedf8aa&utm_source=email](https://airtable.com/invite/l?inviteId=invRJMGCMu7HWQzKW&inviteToken=3b6fbc536ccc17cf24fbeb01b5e8a253fe99afd27616f3abaeaffb046cedf8aa&utm_source=email).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s calculate a few things from our **Airtable** database:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The average number of clicks per newsletter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The highest number of clicks by a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Editor UI** and open a new **Workflow**. Add an **Airtable** node
    and list all the records from the **Users** table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a **Set** node and connect it to the **Airtable** node. Our **Workflow**
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – A workflow for calculating the total number of users in the
    Users table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.09_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – A workflow for calculating the total number of users in the Users
    table
  prefs: []
  type: TYPE_NORMAL
- en: Set **Keep Only Set** to *true*. This removes all incoming workflow data and
    only appends the new values that have been configured in the **Set** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a value of the **Number** type and name it **Total Users**. Add an expression
    for the **Value** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will calculate the total number of items that are returned by the **Airtable**
    node, which is also the total number of users. Executing this node will cause
    this value to be returned three times (once for each item).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the node''s **Settings** area, set **Execute Once** to *true*. Your workflow
    should now calculate the total number of users in the **Users** table for you.
    The result from the **Set** node should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Output of the Set node'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – Output of the Set node
  prefs: []
  type: TYPE_NORMAL
- en: Let's calculate the **Average clicks** value per newsletter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another **Workflow** and add an **Airtable** node that lists all the
    entries from the **Newsletters** table. Add a **Function** node and connect it
    to the **Airtable** node. The workflow should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.11 – A workflow for calculating the average clicks per newsletter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.11_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.11 – A workflow for calculating the average clicks per newsletter
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Function** node, add the following JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code, we iterated over all the records that were returned
    by the `total` variable. We used the `parseInt()` function because the value of
    `Clicks` is of the `String` data type and we need to convert it into the `integer`
    data type. Finally, we calculated the `average` value by dividing the `total`
    clicks by the number of newsletters, which we calculated with `items.length` (exactly
    like we did in the preceding workflow). This provides us with the average clicks
    per newsletter. The following screenshot illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Calculating the average clicks per newsletter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.12_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.12 – Calculating the average clicks per newsletter
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let's calculate the highest number of clicks by a user.
  prefs: []
  type: TYPE_NORMAL
- en: Create another workflow and add an **Airtable** node that lists all the entries
    from the **Stats** table. Add a **Function** node and connect it to the **Airtable**
    node. The workflow should look like the one shown in *Figure 7.11*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Function** node, add the following JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code, we added all the number clicks to an array called `clicks`.
    Then, we used the `Math.max()` function to find the maximum value in that array.
    This provides us with the highest number of clicks per user. The following screenshot
    illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Calculating the highest number of clicks per user'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.13_B17493.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Calculating the highest number of clicks per user
  prefs: []
  type: TYPE_NORMAL
- en: '`Math` is a useful built-in object that can be utilized for a lot of these
    calculations. You can find out more at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math).'
  prefs: []
  type: TYPE_NORMAL
- en: These were some basic examples of how you can use JavaScript to perform calculations
    and create workflows for analytics to gain insights from the data that you accrue
    through your APIs and apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about sharing data between multiple workflows in
    n8n, merging data coming from different sources within a workflow, and using JavaScript
    to perform calculations and analytics from within a workflow. The concepts we
    learned in this chapter will help you when you're sending data to other services
    or no-code tools using our custom API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to introduce the Bubble APIs and integrate
    them into n8n. We will learn how to work with Bubble data and workflows, along
    with how to configure n8n to receive events and data initiated by Bubble.
  prefs: []
  type: TYPE_NORMAL
