- en: Python Libraries and Environment Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python库和环境设置
- en: This chapter introduces the Python libraries that we can use in order to implement
    the neuroevolution algorithms we described in the previous chapter. We will also
    discuss the strengths and weaknesses of each library that's presented. In addition
    to this, we will provide basic usage examples. Then, we will consider how to set
    up the environment for the experiments that we will perform later in this book
    and examine common ways to do this in the Python ecosystem. Finally, we will demonstrate
    how to set up a working environment using Anaconda Distribution, which is a popular
    tool for managing Python dependencies and virtual environments among data scientists.
    In this chapter, you will learn how to start using Python to experiment with the
    neuroevolution algorithms that will be covered in this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了我们可以使用的Python库，以便实现上一章中描述的神经进化算法。我们还将讨论每个库的优缺点。此外，我们还将提供基本的使用示例。然后，我们将考虑如何设置本书后面将要进行的实验环境，并检查在Python生态系统中执行此操作的常见方法。最后，我们将演示如何使用Anaconda
    Distribution设置一个工作环境，这是数据科学家中用于管理Python依赖项和虚拟环境的流行工具。在本章中，你将学习如何开始使用Python来实验本书中将要涵盖的神经进化算法。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Suitable Python libraries for neuroevolution experiments
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于神经进化实验的Python库
- en: Environment setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境设置
- en: Suitable Python libraries for neuroevolution experiments
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适用于神经进化实验的Python库
- en: The Python programming language is one of the most popular languages for activities
    related to machine learning and research and development in the field of artificial
    intelligence. The most prominent frameworks are either written in Python or provide
    corresponding interfaces. Such popularity can be explained by Python's short learning
    curve and its nature as a scriptable language, which allows experiments to take
    place quickly. Thus, following a general trend in the machine learning community,
    several libraries were written in Python with the support for neuroevolution,
    and the number of libraries continues to grow over time. In this section, we will
    look at the most stable Python libraries for experiments in the field of evolutionary
    algorithms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言是机器学习和人工智能领域相关活动以及该领域研发中最受欢迎的语言之一。最突出的框架要么是用Python编写的，要么提供相应的接口。这种流行度可以归因于Python的学习曲线短，以及它作为可脚本化语言的本性，这使得实验可以快速进行。因此，遵循机器学习社区的一般趋势，一些支持神经进化的库是用Python编写的，并且随着时间的推移，库的数量持续增长。在本节中，我们将查看适用于进化算法领域的最稳定的Python库。
- en: NEAT-Python
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NEAT-Python
- en: As its name suggests, this is the NEAT algorithm's implementation through the
    Python programming language. The NEAT-Python library provides the implementation
    of the standard NEAT methods for the genetic evolution of the genomes of organisms
    in a population. It implements utilities to convert the genotype of the organism
    into its phenotype (an artificial neural network) and provides convenient methods
    to load and save the genome configurations, along with the NEAT parameters. Additionally,
    it implements useful routines so that it can collect statistics about evolutionary
    process execution and a way to save/load intermediate checkpoints. Checkpoints
    allow us to save the state of the evolutionary process periodically and restore
    the process's execution from the saved checkpoint data later.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，这是通过Python编程语言实现的NEAT算法。NEAT-Python库提供了标准NEAT方法，用于种群中生物体基因组的遗传进化。它实现了将生物体的基因型转换为表型（人工神经网络）的实用程序，并提供方便的方法来加载和保存基因组配置以及NEAT参数。此外，它还实现了有用的例程，以便它可以收集关于进化过程执行状态的统计信息，并提供一种从给定的检查点恢复执行的方法。检查点允许我们定期保存进化过程的状态，并在稍后从保存的检查点数据中恢复过程的执行。
- en: 'The pros of the NEAT-Python algorithm are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: NEAT-Python算法的优点如下：
- en: It has a stable implementation.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个稳定的实现。
- en: It is comprehensively documented.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有全面的文档。
- en: It is available through the PIP package manager for easy installation.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以通过PIP包管理器轻松安装。
- en: It has a built-in statistics collection and support for storing execution checkpoints,
    as well as restoring execution from a given checkpoint.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有内置的统计信息收集和存储执行检查点的支持，以及从给定检查点恢复执行的能力。
- en: It provides multiple types of activation functions.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了多种激活函数类型。
- en: It supports the continuous-time recurrent neural network phenotypes.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持连续时间循环神经网络表型。
- en: It can be easily extended to support various NEAT modifications.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以轻松扩展以支持各种 NEAT 修改。
- en: 'The cons of the NEAT-Python algorithm are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NEAT-Python 算法的缺点如下：
- en: Only the NEAT algorithm is implemented by default.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下仅实现了 NEAT 算法。
- en: It is in a maintenance-only state right now and no active development has been
    done recently.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前它处于仅维护状态，最近没有进行任何活跃的开发。
- en: NEAT-Python usage example
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NEAT-Python 使用示例
- en: 'The following is a general example of how to use the NEAT-Python library, without
    any particular problem in mind. It describes the typical steps to be taken and
    how to obtain the necessary results. We will use this library extensively throughout
    this book. You can skip to the next chapter for the concrete usage example, but
    you should follow through to the end of this chapter to learn more about alternative
    libraries. Let''s get started:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用 NEAT-Python 库的一般示例，没有特定的问题。它描述了典型的步骤以及如何获得必要的结果。我们将在这本书中广泛使用这个库。您可以跳到下一章以获取具体的用法示例，但您应该阅读到本章的结尾，以了解更多关于替代库的信息。让我们开始吧：
- en: 'Load the NEAT settings and the initial genome configuration:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 NEAT 设置和初始基因组配置：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, the `config_file` parameter points to the file that contains the NEAT-Python
    library settings and the default configuration of the initial genome.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`config_file` 参数指向包含 NEAT-Python 库设置和初始基因组默认配置的文件。
- en: 'Create a population of organisms from the configuration data:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从配置数据创建生物体种群：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the statistics reporter and checkpoints collector:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加统计报告器和检查点收集器：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the evolution process over a specific number of generations (`300`, in
    our case):'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在特定数量的代数（在我们的例子中是 `300`）上运行进化过程：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `eval_genomes` is a function that's used to evaluate the genomes of all
    the organisms in the population against a particular fitness function and `winner`
    is the best performing genotype found.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`eval_genomes` 是一个函数，用于评估种群中所有生物体的基因组与特定适应度函数，而 `winner` 是找到的最佳表现型基因型。
- en: 'The phenotype ANN can be created from a genome as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以如下从基因组创建表型 ANN：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After that, the ANN can be queried with input data to calculate the results:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，可以使用输入数据查询 ANN 以计算结果：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The library is available at [https://github.com/CodeReclaimers/neat-python](https://github.com/CodeReclaimers/neat-python).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该库可在 [https://github.com/CodeReclaimers/neat-python](https://github.com/CodeReclaimers/neat-python)
    获取。
- en: The preceding source code is to give you a feeling of the library. The full
    code examples will be provided in the chapters that follow.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码旨在让您了解库的功能。完整的代码示例将在后续章节中提供。
- en: PyTorch NEAT
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch NEAT
- en: This library is built around the NEAT-Python library. It provides easy integration
    for artifacts that have been produced by the NEAT-Python library with the *PyTorch*
    platform. As a result, it becomes possible to convert the NEAT genome into a phenotype
    ANN, which is based on the PyTorch implementation of recurrent neural networks.
    Also, it allows us to represent **Compositional Pattern Producing Networks** (**CPPNs**)
    as PyTorch structures, which are the primary building blocks of the HyperNEAT
    method. The main advantage of integration with PyTorch is that it allows us to
    utilize GPUs for computing, potentially accelerating the evolutionary process
    due to the increased rate of evaluation of the genomes of organisms in the evolving
    population.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该库是基于 NEAT-Python 库构建的。它为 NEAT-Python 库生成的工件与 *PyTorch* 平台提供了易于集成的功能。因此，可以将
    NEAT 基因组转换为基于 PyTorch 实现的循环神经网络（ANN）表型。此外，它还允许我们将**组合模式生成网络**（**CPPNs**）表示为 PyTorch
    结构，这是 HyperNEAT 方法的主要构建块。与 PyTorch 集成的主要优势是，它使我们能够利用 GPU 进行计算，从而可能由于评估进化种群中生物体基因组的速度提高而加速进化过程。
- en: 'The pros of PyTorch NEAT are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch NEAT 的优点如下：
- en: It is built around a stable NEAT-Python library, which makes it possible for
    us to use all of its benefits.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它基于稳定的 NEAT-Python 库，这使得我们能够利用其所有优势。
- en: Integration with the PyTorch framework.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 PyTorch 框架的集成。
- en: It is GPU accelerated for the evaluation of NEAT genomes.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对 NEAT 基因组的评估进行了 GPU 加速。
- en: It includes CPPN implementation, which is a building block of the HyperNEAT
    algorithm.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包括 CPPN 实现，这是 HyperNEAT 算法的构建块。
- en: Integration with the OpenAI GYM environment.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 OpenAI GYM 环境的集成。
- en: 'The cons of PyTorch NEAT are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch NEAT 的缺点如下：
- en: Only the NEAT algorithm is fully implemented.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅完全实现了NEAT算法。
- en: It provides only partial support for the HyperNEAT algorithm's implementation.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它只提供了HyperNEAT算法实现的有限支持。
- en: For more details about OpenAI GYM, go to [https://gym.openai.com](https://gym.openai.com).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于OpenAI GYM的详细信息，请访问[https://gym.openai.com](https://gym.openai.com)。
- en: PyTorch NEAT usage example
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch NEAT使用示例
- en: 'The following is an example of using the PyTorch NEAT library to implement
    a cartpole balancing controller. This is only being presented as an overview.
    Later in this book, we will dive deeper into the pole balancing problem in more
    detail. Let''s get started:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用PyTorch NEAT库实现倒立摆平衡控制器的示例。这只是一个概述。本书后面将更详细地探讨倒立摆平衡问题。让我们开始吧：
- en: 'Load the NEAT settings and seed genome configuration:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载NEAT设置和种子基因组配置：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the `config_file` file stores the NEAT algorithm settings, along with
    the default genome configuration.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`config_file`文件存储了NEAT算法设置以及默认的基因组配置。
- en: 'Create a population of organisms from the configuration data:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从配置数据创建生物种群：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Prepare the multi-environment genome evaluator based on PyTorch and OpenAI GYM:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于PyTorch和OpenAI GYM准备多环境基因组评估器：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, the call to the `gym.make("CartPole-v0")` function is the call to the
    OpenAI GYM framework to create a single-pole balancing environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，对`gym.make("CartPole-v0")`函数的调用是调用OpenAI GYM框架以创建单个倒立摆平衡环境。
- en: 'Add the statistics and log reporter:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加统计和日志报告器：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the evolution process over a specific number of generations (`100`, in
    our case):'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在特定的代数（在我们的例子中是`100`）上运行进化过程：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `eval_genomes` is a function for evaluating the genomes of all the organisms
    in a population against a certain fitness function, and the `winner` is the best
    performing genotype found.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`eval_genomes`是一个用于评估种群中所有生物的基因组的函数，而`winner`是找到的最佳表现型基因型。
- en: 'The phenotype ANN can be created from a genome, as shown in the following code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以从基因组创建表型ANN，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, the `genome` is the NEAT genome configuration, `config `is an object that
    encapsulates the NEAT settings, and `bs` is a parameter that indicates the desired
    batch size.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`genome`是NEAT基因组配置，`config`是一个封装NEAT设置的对象，而`bs`是一个指示所需批量大小的参数。
- en: 'After that, the ANN can be queried with the input data to obtain the results:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，可以使用输入数据查询ANN以获得结果：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, `action` is the action specifier to be used in the simulation and `states` is
    the tensor that includes the current state of the environment that was obtained
    from the simulator.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`action`是用于模拟的动作指定符，而`states`是包含从模拟器获得的当前环境状态的张量。
- en: The library's source code is available at [https://github.com/uber-research/PyTorch-NEAT](https://github.com/uber-research/PyTorch-NEAT).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆的源代码可在[https://github.com/uber-research/PyTorch-NEAT](https://github.com/uber-research/PyTorch-NEAT)找到。
- en: The preceding source code is to give you a feeling of the library. The full
    code examples will be provided in the chapters that follow.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述源代码是为了让你对库有一个感觉。完整的代码示例将在后续章节中提供。
- en: MultiNEAT
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiNEAT
- en: 'MultiNEAT is the most universal library among the libraries we will discuss in
    this book since it supports the standard NEAT algorithm and two crucial extensions:
    HyperNEAT and ES-HyperNEAT. Also, the MultiNEAT library provides an implementation
    of a Novelty Search optimization method. The library is written in the C++ programming
    language but provides a comprehensive Python interface. The MultiNEAT Python wheel
    is also available through the Anaconda package manager, which makes it easy to
    install and use in any OS.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: MultiNEAT是本书中我们将讨论的库中最通用的库，因为它支持标准的NEAT算法和两个关键扩展：HyperNEAT和ES-HyperNEAT。此外，MultiNEAT库还提供了一个新颖性搜索优化方法的实现。该库是用C++编程语言编写的，但提供了一个全面的Python接口。MultiNEAT
    Python wheel也通过Anaconda包管理器提供，这使得在任何操作系统上安装和使用变得容易。
- en: 'The pros of the MultiNEAT library are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: MultiNEAT库的优点如下：
- en: Stable implementation
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定实现
- en: 'Implements a multitude of algorithms from the NEAT family, such as the following:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了NEAT家族的多种算法，如下所示：
- en: NEAT
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: NEAT
- en: HyperNEAT
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HyperNEAT
- en: ES-HyperNEAT
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ES-HyperNEAT
- en: Provides an implementation of the Novelty Search optimization method
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了新颖性搜索优化方法的实现
- en: Supports plastic neural networks through Hebbian learning
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Hebbian学习支持可塑神经网络
- en: Provides visualization of genotypes and phenotypes through OpenCV in Python
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Python中的OpenCV提供基因型和表型的可视化
- en: Integration with the OpenAI GYM environment
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与OpenAI GYM环境的集成
- en: Comprehensive documentation
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的文档
- en: 'The cons of the MultiNEAT library are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: MultiNEAT库的缺点如下：
- en: No GPU support
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有GPU支持
- en: Does not support checkpoints
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持检查点
- en: MultiNEAT usage example
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiNEAT使用示例
- en: 'The following is an example of using the MultiNEAT library to implement the
    XOR solver using neuroevolution. This is just an overview, without the implementation
    of the XOR fitness score evaluator (`evaluate_xor`), which will be discussed in
    the next chapter. Let''s get started:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用MultiNEAT库通过神经进化实现XOR求解器的示例。这只是一个概述，没有实现XOR适应度评分评估器（`evaluate_xor`），这将在下一章中讨论。让我们开始吧：
- en: 'Create the NEAT configuration settings:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建NEAT配置设置：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a minimal genome configuration and spawn a population of organisms from
    this genome:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个最小基因组配置并从这个基因组中生成一个生物种群：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the evolution process over `1000` generations or until the winner is found:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`1000`代或找到胜者之前运行进化过程：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following is the query winner phenotype ANN, along with some inputs to
    get results:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是对查询胜者表型ANN的查询，以及一些输入以获取结果：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can find this library at [https://github.com/peter-ch/MultiNEAT](https://github.com/peter-ch/MultiNEAT).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/peter-ch/MultiNEAT](https://github.com/peter-ch/MultiNEAT)找到这个库。
- en: The preceding source code is to give you a feeling of the library. The full
    code examples will be provided in the chapters that follow.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码是为了让你对库有一个感觉。完整的代码示例将在接下来的章节中提供。
- en: Deep Neuroevolution
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度神经进化
- en: '**Deep Neural Networks** (**DNNs**) demonstrate outstanding performance improvements
    in tasks related to pattern recognition and reinforcement learning by utilizing
    the parallel processing capabilities of modern GPUs. In the context of neuroevolution,
    it is particularly interesting to explore how conventional **deep reinforcement
    learning** (**deep RL**) methods can be compared to the ones based on Deep Neuroevolution.
    To answer this question, the research team from UberAI labs created and released
    the corresponding library in the Python programming language, which uses the TensorFlow
    framework to handle computations related to neural network training on GPU devices.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**深度神经网络**（**DNNs**）通过利用现代GPU的并行处理能力，在涉及模式识别和强化学习任务中表现出卓越的性能提升。在神经进化的背景下，探索传统的**深度强化学习**（**deep
    RL**）方法如何与基于深度神经进化的方法进行比较特别有趣。为了回答这个问题，UberAI实验室的研究团队创建并发布了相应的Python编程语言库，该库使用TensorFlow框架处理与GPU设备上神经网络训练相关的计算。'
- en: The library provides an implementation of the simple **genetic algorithm** (**GA**)
    and the Novelty Search optimization method. It also provides an implementation
    of the Evolution Strategies method, which is another kind of evolutionary algorithm.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该库提供了简单**遗传算法**（**GA**）和新颖性搜索优化方法的实现。它还提供了进化策略方法的实现，这是一种另一种进化算法。
- en: You can find more details about the Evolution Strategies method at Hans-Georg
    Beyer, *The Theory of Evolution Strategies.* Springer April 27, 2001.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Hans-Georg Beyer的《进化策略理论》一书中找到更多关于进化策略方法的信息。Springer，2001年4月27日。
- en: 'The pros of Deep Neuroevolution are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 深度神经进化的优点如下：
- en: Stable implementation
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定实现
- en: GPU-enabled through integration with TensorFlow
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过与TensorFlow的集成启用GPU
- en: The ability to work directly with high-dimensional problems, such as learning
    to act directly from pixels
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够直接处理高维问题，例如直接从像素中学习行动的能力
- en: Provides an implementation of the Novelty Search optimization method
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了新颖性搜索优化方法的实现
- en: Gradient-free method to optimize DNNs
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无梯度方法优化DNNs
- en: Provides visualization of the learning process through the **Visual Inspector
    for Neuroevolution** (**VINE**)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**神经进化视觉检查器**（**VINE**）提供学习过程的可视化
- en: Provides integration with the OpenAI GYM environment
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供与OpenAI GYM环境的集成
- en: Provides integration with the Atari games environment
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供与Atari游戏环境的集成
- en: The disadvantage of Deep Neuroevolution is that it does not provide an implementation
    of the NEAT family of neuroevolution algorithms, that is, NEAT, HyperNEAT, and
    ES-HyperNEAT.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 深度神经进化的缺点是它没有提供NEAT家族神经进化算法的实现，即NEAT、HyperNEAT和ES-HyperNEAT。
- en: The genetic algorithm that's implemented in the Deep Neuroevolution library
    controls the evolution of a population of organisms that have genomes encoding
    a vector of learning parameters (connection weights) for a deep neural network.
    At every generation, each genotype is evaluated and produces a fitness score.
    After that, the specific number of organisms are selected uniformly at random
    from the top best-fit individuals to become parents of the next generation. The
    genotype of each selected parent organism is then mutated by adding Gaussian noise.
    Also, the algorithm uses the notion of elitism, in which the specific number of
    best-fit organisms from the previous generation are added to the next without
    any modifications being made. The crossover operator is not applied during the
    evolutionary process to simplify the algorithm. The topology of the DNN that's
    used in this algorithm is fixed and set by experimenters manually.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Deep Neuroevolution库中实现的遗传算法控制着一群具有基因组编码深度神经网络学习参数（连接权重）向量的生物体的进化。在每一代中，每个基因型都会被评估并产生一个适应度分数。之后，从最适应的个体中随机选择特定数量的生物体作为下一代父母。然后，每个选定的父母生物体的基因型通过添加高斯噪声进行突变。此外，算法还使用了精英主义的概念，即从上一代中添加特定数量的最适应生物体到下一代，而不进行任何修改。在进化过程中不应用交叉算子以简化算法。该算法使用的DNN拓扑结构是固定的，由实验者手动设置。
- en: 'Let''s refer to the following simple genetic algorithm:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们参考以下简单的遗传算法：
- en: '![](img/c7ca6ede-758b-438f-8ad4-475abc2cbcb6.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7ca6ede-758b-438f-8ad4-475abc2cbcb6.png)'
- en: The simple genetic algorithm
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 简单遗传算法
- en: More details about the implementation of Deep Neuroevolution is available at
    [https://github.com/uber-research/deep-neuroevolution](https://github.com/uber-research/deep-neuroevolution).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 关于深度神经演化的实现细节，可在[https://github.com/uber-research/deep-neuroevolution](https://github.com/uber-research/deep-neuroevolution)找到。
- en: Comparing Python neuroevolution libraries
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较Python神经进化库
- en: 'The following table provides a quick comparison between the Python libraries
    we''ve discussed in this chapter:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了本章中讨论的Python库之间的快速比较：
- en: '|  | **NEAT-Python** | **PyTorch NEAT** | **MultiNEAT** | **Deep Neuroevolution**
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '|  | **NEAT-Python** | **PyTorch NEAT** | **MultiNEAT** | **Deep Neuroevolution**
    |'
- en: '| **NEAT** | Yes | Yes | Yes | No |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **NEAT** | Yes | Yes | Yes | No |'
- en: '| **HyperNEAT** | No | Partial (CPPN only) | Yes | No |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **HyperNEAT** | No | Partial (CPPN only) | Yes | No |'
- en: '| **ES-HyperNEAT** | No | No | Yes | No |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **ES-HyperNEAT** | No | No | Yes | No |'
- en: '| **Novelty Search** | No | No | Yes | Yes |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| **Novelty Search** | No | No | Yes | Yes |'
- en: '| **OpenAI GYM** | No | Yes | Yes | Yes |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| **OpenAI GYM** | No | Yes | Yes | Yes |'
- en: '| **Visualization** | No | No | Yes | Yes |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| **Visualization** | No | No | Yes | Yes |'
- en: '| **GPU support** | No | Yes | No | Yes |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| **GPU support** | No | Yes | No | Yes |'
- en: '| **PIP** | Yes | No | No | No |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| **PIP** | Yes | No | No | No |'
- en: '| **Anaconda** | No | No | Yes | No |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| **Anaconda** | No | No | Yes | No |'
- en: '| **Checkpoints** | Yes | Yes | No | Yes |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| **Checkpoints** | Yes | Yes | No | Yes |'
- en: The NEAT-Python library provides excellent visualization integration and is
    easy to use. However, it has a significant drawback in that it is implemented
    solely in Python and, as a result, has a very slow execution speed. It is only
    suitable for simple problems.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: NEAT-Python库提供了优秀的可视化集成，并且易于使用。然而，它有一个显著的缺点，那就是它完全是用Python实现的，因此执行速度非常慢。它仅适用于简单的问题。
- en: The MultiNEAT Python library has core implemented in C++, which gives it slightly
    better performance compared to the NEAT-Python library. It can be used for solving
    more complex tasks requiring the creation of larger phenotype ANNs. Also, it provides
    the implementation of the HyperNEAT and ES-HyperNEAT methods, which makes it the
    right choice for tasks related to training large-scale ANNs.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: MultiNEAT Python库的核心是用C++实现的，这使得它的性能略优于NEAT-Python库。它可以用于解决需要创建更大表型ANN的更复杂任务。此外，它还提供了HyperNEAT和ES-HyperNEAT方法的实现，这使得它成为与训练大规模ANN相关的任务的正确选择。
- en: The Deep Neuroevolution library is the most advanced neuroevolution implementation
    and allows us to employ the powers of GPUs to handle training tasks with millions
    of trainable parameters. This can be found in the visual imagery processing domain.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Deep Neuroevolution库是最先进的神经进化实现，它允许我们利用GPU的力量来处理具有数百万可训练参数的训练任务。这在视觉图像处理领域是可行的。
- en: Later in this book, we will get to know each Python library better and put them
    into practice.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面部分，我们将更深入地了解每个Python库，并将它们付诸实践。
- en: Environment setup
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境设置
- en: When working with Python libraries, it is essential to set up a working environment
    properly. There are a lot of dependencies, including the Python language version
    and the binaries that are available in the system; all of these must be aligned
    and have compatible versions. As a result of this process, the conflicting configurations
    of libraries and language versions can be easily created, adding to the frustration
    and hours of debugging and bug fixes. To solve this problem, the concept of the
    virtual environment was introduced in the Python programming language. A virtual
    environment allows us to create isolated Python environments that contain all
    the necessary dependencies and executables that are used in a particular Python
    project. Such a virtual environment can be easily created and deleted after it
    is no longer needed, without leaving any remains in the system.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Python 库时，正确设置工作环境至关重要。有许多依赖项，包括 Python 语言版本和系统中可用的二进制文件；所有这些都必须对齐并具有兼容的版本。因此，库和语言版本的冲突配置可以很容易地创建，这增加了挫败感和数小时的调试和错误修复。为了解决这个问题，Python
    编程语言中引入了虚拟环境的概念。虚拟环境允许我们创建包含特定 Python 项目中使用的所有必要依赖项和可执行文件的隔离 Python 环境。这样的虚拟环境在不再需要时可以轻松创建和删除，而不会在系统中留下任何残留。
- en: 'Among the most popular tools for working with Python virtual environments,
    we can highlight the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在众多用于处理 Python 虚拟环境的工具中，我们可以突出以下工具：
- en: Pipenv
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipenv
- en: Virtualenv
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Virtualenv
- en: Anaconda
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda
- en: Pipenv
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pipenv
- en: Pipenv is a tool that combines package manager with the virtual environments
    manager. The main goal is to make it easy for developers to set up a unique working
    environment for a particular project with all the necessary dependencies included.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Pipenv 是一个将包管理器与虚拟环境管理器结合在一起的工具。主要目标是使开发者能够轻松地为特定项目设置一个包含所有必要依赖项的独特工作环境。
- en: 'It can be installed with PIP (the package installer for Python) using the following
    command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令通过 PIP（Python 的包安装器）进行安装：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding command installs the `pipenv` tool into the user space to prevent
    it from breaking any system-wide packages.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将 `pipenv` 工具安装到用户空间，以防止它破坏任何系统范围的包。
- en: 'To install all the dependencies and create a new virtual environment (if not
    present) for your project, change into the project''s directory and run the installation
    process, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装所有依赖项并为您的项目创建一个新的虚拟环境（如果尚不存在），请切换到项目的目录并运行安装过程，如下所示：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This command creates a new virtual environment in `my_project_folder` and installs
    `<package>` into it. That's it.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在 `my_project_folder` 中创建一个新的虚拟环境并将 `<package>` 安装到其中。就是这样。
- en: It is possible to provide a configuration file (Pipfile) that specifies which
    packages should be installed, as well as other information that's specific to
    the build process. When you run `install` for the first time, the Pipfile will
    be created automatically if it doesn't exist yet.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 可以提供一个配置文件（Pipfile），指定应安装哪些包，以及与构建过程相关的其他信息。当您第一次运行 `install` 命令时，如果 Pipfile
    还不存在，它将自动创建。
- en: More details about the tool can be found at  [https://pipenv.kennethreitz.org/en/latest/](https://pipenv.kennethreitz.org/en/latest/)[.](https://docs.pipenv.org/en/latest/)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于该工具的详细信息可以在 [https://pipenv.kennethreitz.org/en/latest/](https://pipenv.kennethreitz.org/en/latest/)
    找到[。](https://docs.pipenv.org/en/latest/)
- en: Virtualenv
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Virtualenv
- en: Virtualenv is a tool that's used to create isolated Python environments, starting
    from Python v3.3, and is partially integrated into the standard library under
    the `venv` module. The major problem that's addressed by this tool is maintaining
    the unique set of dependencies, versions, and permissions for each Python project
    independently. Virtualenv handles this by creating a separate environment with
    its own installation directories for each project. This prevents us from sharing
    any dependencies and libraries with other projects. Also, it is possible to block
    access to globally installed libraries.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Virtualenv 是一个从 Python 3.3 开始使用的用于创建隔离 Python 环境的工具，它部分集成到标准库的 `venv` 模块中。该工具解决的主要问题是独立维护每个
    Python 项目的独特依赖项、版本和权限集合。Virtualenv 通过为每个项目创建一个具有自己的安装目录的独立环境来处理这个问题。这阻止了我们与其他项目共享任何依赖项和库。此外，还可以阻止对全局安装的库的访问。
- en: 'Virtualenv is a pure virtual environments manager and it doesn''t provide any
    package manager routines. Therefore, it is usually used along with the package
    manager to manage dependencies of your project, such as PIP. Let''s take a look
    at Virtualenv:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Virtualenv 是一个纯虚拟环境管理器，它不提供任何包管理例程。因此，它通常与包管理器一起使用来管理项目的依赖项，例如 PIP。让我们看看 Virtualenv
    的样子：
- en: 'Install Virtualenv with PIP as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方式使用 PIP 安装 Virtualenv：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Test that the installation was successful:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试安装是否成功：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a virtual environment for your project with the following commands:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令为您项目创建虚拟环境：
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This command creates a new virtual environment in `my_project_folder`. The fresh
    environment includes a folder with Python executable files inside it, as well
    as a copy of the PIP library, which is a package manager that allows us to install
    other dependencies.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在 `my_project_folder` 中创建一个新的虚拟环境。新的环境包括一个包含 Python 可执行文件的文件夹，以及 PIP 库的副本，这是一个允许我们安装其他依赖项的包管理器。
- en: 'Before you start using it, you need to activate the virtual environment with
    the following command, which can be typed into the Terminal application of your
    choice:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始使用之前，您需要使用以下命令激活虚拟环境，该命令可以输入到您选择的终端应用程序中：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: After the preceding command, all the necessary environment variables will be
    set to the correct values that are specific to your project, and the current session
    of the Terminal application will use it for any subsequent commands that are entered.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上述命令后，所有必要的环境变量都将设置为针对您项目特定的正确值，并且当前终端应用程序会话将使用它来执行任何后续输入的命令。
- en: 'Additional packages can be easily installed into an active environment with
    PIP:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用 PIP 将其他包轻松安装到活动环境中：
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding command installs the SQLite package in the currently active environment.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将 SQLite 包安装到当前活动环境中。
- en: If no package name is provided after the `pip install` command, the pip manager
    will look for a `requirements.txt` file in the current directory for the specification
    of the packages to be installed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 `pip install` 命令之后没有提供包名称，pip 管理器将在当前目录中查找 `requirements.txt` 文件以指定要安装的包。
- en: You can find more details at [https://virtualenv.pypa.io/en/latest/](https://virtualenv.pypa.io/en/latest/).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://virtualenv.pypa.io/en/latest/](https://virtualenv.pypa.io/en/latest/)
    找到更多详细信息。
- en: Anaconda
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Anaconda
- en: Anaconda Distribution is a package and a virtual environment manager that is
    popular among data scientists and machine learning professionals because it provides
    easy access to an extensive collection of tailored scientific libraries (over
    1,500+) and useful tools. Apart from this, it allows you to write source code
    and execute scripts in Python and R from one place. With Anaconda, it is possible
    to easily create, save, load, and switch between virtual environments, as well
    as install thousands of packages from the repository that have been reviewed and
    maintained by the Anaconda team into each virtual environment.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda Distribution 是一个包和一个虚拟环境管理器，在数据科学家和机器学习专业人士中很受欢迎，因为它提供了对大量定制科学库（超过
    1,500 个）和有用工具的便捷访问。除此之外，它还允许您在一个地方编写源代码并执行 Python 和 R 脚本。使用 Anaconda，您可以轻松创建、保存、加载和切换虚拟环境，以及将
    Anaconda 团队审查和维护的数千个包安装到每个虚拟环境中。
- en: To install Anaconda, you need to download the installer that's appropriate to
    your operating system from [https://www.anaconda.com/distribution/](https://www.anaconda.com/distribution/).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Anaconda，您需要从 [https://www.anaconda.com/distribution/](https://www.anaconda.com/distribution/)
    下载适合您操作系统的安装程序。
- en: 'After that, the new environment for your project can be created with the following
    command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，可以使用以下命令为您项目创建新的环境：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding command creates a new virtual environment for your project and
    installs into it the specified package or multiple packages. Additional packages
    can be easily installed into a fresh environment later, after it's been activated.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令为您项目创建一个新的虚拟环境，并将指定的包或多个包安装到其中。在激活后，可以轻松地将其他包安装到新环境中。
- en: 'All the environments that are available in the system can be listed with the
    following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令列出系统中可用的所有环境：
- en: '[PRE25]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Any existing environment can be activated as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 任何现有环境都可以按以下方式激活：
- en: '[PRE26]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To deactivate the current active environment, use the following command:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要停用当前活动环境，请使用以下命令：
- en: '[PRE27]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Additional libraries can be installed into the current environment either through
    standard PIP or by using the `conda install` command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过标准 PIP 或使用 `conda install` 命令将额外的库安装到当前环境中：
- en: '[PRE28]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: After the preceding command, SQLite will be installed into the currently active
    environment.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，SQLite 将被安装到当前活动环境中。
- en: In this book, we will use Anaconda to manage the dependencies and environments
    for most of our projects.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用 Anaconda 来管理我们大多数项目的依赖关系和环境。
- en: If you are interested in finding out more, please make yourself familiar with
    all available Anaconda commands at [https://docs.conda.io/projects/conda/en/latest/commands.html](https://docs.conda.io/projects/conda/en/latest/commands.html).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多信息，请熟悉所有可用的 Anaconda 命令，请参阅 [https://docs.conda.io/projects/conda/en/latest/commands.html](https://docs.conda.io/projects/conda/en/latest/commands.html)。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about four popular Python libraries that we can
    use for experiments in the field of neuroevolution. We discussed the strengths
    and weaknesses of each library that was presented, and reviewed the basic examples
    of using these libraries in Python. After that, we looked at how to set up the
    environment for Python-based experiments to avoid the side effects of having multiple
    versions of the same library in the Python path. We found that the best way to
    do this is to create isolated virtual environments for each Python project, and
    considered several popular solutions created by the open source community to help
    with this task. Finally, we introduced Anaconda Distribution, which includes,
    among other useful things, the package manager and an environment manager. For
    the rest of this book, we will use Anaconda to handle setting up the environment
    in our experiments properly.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了四个流行的 Python 库，我们可以使用这些库在神经进化领域进行实验。我们讨论了每个库的优点和缺点，并回顾了在 Python 中使用这些库的基本示例。之后，我们探讨了如何设置基于
    Python 的实验环境，以避免 Python 路径中存在相同库的多个版本所带来的副作用。我们发现，为每个 Python 项目创建隔离的虚拟环境是最佳做法，并考虑了开源社区为帮助完成这项任务而创建的几个流行解决方案。最后，我们介绍了
    Anaconda Distribution，它包括（但不仅限于）包管理器和环境管理器。在本书的剩余部分，我们将使用 Anaconda 正确处理实验中的环境设置。
- en: In the next chapter, we will discuss how the NEAT algorithm can be used to solve
    the classic computer science problem. You will write the XOR problem solver using
    the NEAT-Python library we discussed in this chapter. We will also discuss the
    hyperparameters that are used to configure the NEAT algorithm and how they can
    be adjusted to increase the performance of the neuroevolution process.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何使用 NEAT 算法来解决经典的计算机科学问题。你将使用本章中讨论的 NEAT-Python 库编写 XOR 问题求解器。我们还将讨论用于配置
    NEAT 算法的超参数以及如何调整这些参数以提高神经进化过程的表现。
