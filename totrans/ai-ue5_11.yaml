- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Understanding the Environment Query System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解环境查询系统
- en: The **Environment Query System** ( **EQS** ) in Unreal Engine is a powerful
    feature within the AI framework that allows developers to collect data about the
    virtual environment by letting AI agents query the environment and make informed
    decisions based on the returned results. In this chapter, you will learn how to
    properly set up an environment query and how to integrate it inside the behavior
    tree of an AI agent.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎中的**环境查询系统**（**EQS**）是AI框架中的一个强大功能，它允许开发者通过让AI代理查询环境并基于返回的结果做出明智的决策来收集关于虚拟环境的数据。在本章中，你将学习如何正确设置环境查询以及如何将其集成到AI代理的行为树中。
- en: By mastering the EQS, you’ll gain the power to create intelligent AI systems
    that can make informed decisions based on their surroundings. Whether it’s finding
    the best vantage point, locating crucial resources, or strategizing for optimal
    gameplay, the EQS opens a world of possibilities. While still an experimental
    feature, learning about the EQS will let you create intelligent and dynamic AI
    systems in Unreal Engine.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握EQS，你将获得创建能够根据其周围环境做出明智决策的智能AI系统的能力。无论是寻找最佳观察点、定位关键资源还是为最佳游戏策略进行规划，EQS打开了一个充满可能性的世界。虽然仍然是一个实验性功能，但了解EQS将让你能够在虚幻引擎中创建智能且动态的AI系统。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing the Environment Query System
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍环境查询系统
- en: Setting up an environment query
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境查询
- en: Handling environment queries within a behavior tree
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行为树中处理环境查询
- en: Displaying EQS information
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示EQS信息
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the topics presented in this chapter, you should have completed the
    previous ones and understood their content.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章介绍的主题，你应该已经完成了前面的章节并理解了它们的内容。
- en: 'Additionally, if you would prefer to begin with code from the companion repository
    for this book, you can download the **.zip** project files provided in this book’s
    companion project repository: [https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5](https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5)
    .'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你希望从本书的配套仓库中的代码开始，你可以下载本书配套项目仓库中提供的**.zip**项目文件：[https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5](https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5)。
- en: To download the files from the end of the last chapter, click the **Unreal Agility
    Arena –** **Chapter 10** **-** **End** link.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载最后一章末尾的文件，请点击**Unreal Agility Arena –** **第10章** **-** **结束**链接。
- en: Introducing the Environment Query System
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍环境查询系统
- en: 'Well, it seems Dr. Markus is making some progress in his secret lab:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来马克斯博士在他的秘密实验室中取得了一些进展：
- en: '*Deep within the hidden confines of their secret laboratory, Dr. Markus and
    Professor Viktoria toiled tirelessly on their latest endeavor; they were determined
    to revolutionize their AI dummy puppets by granting them the ability to analyze
    and probe their environment in* *unprecedented ways.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*在隐藏的实验室深处，马克斯博士和维克托利亚教授不知疲倦地致力于他们最新的努力；他们决心通过赋予他们分析和探索环境的新颖方式的能力来革新他们的AI木偶。*'
- en: '*With their minds brimming with excitement, Dr. Markus and Professor Viktoria
    meticulously crafted intricate algorithms as they imbued their creations with
    an insatiable hunger for knowledge, equipping them with experimental methods to
    observe and interact with the world around them. As the AI dummy puppets awakened,
    their eyes flickered with a newfound spark of intelligence, each one exploring
    its surroundings and analyzing* *the environment.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*他们的心中充满了兴奋，马克斯博士和维克托利亚教授精心设计了复杂的算法，他们将他们的创造物注入了无止境的知识渴望，为他们配备了实验性的方法来观察和与世界周围的事物互动。随着AI木偶的苏醒，他们的眼睛闪烁着新的智慧火花，每一个都在探索其周围的环境并分析*
    *环境。*'
- en: Unreal Engine’s EQS is a powerful tool that allows developers to define complex
    queries to gather information about the game world. The EQS enables developers
    to create AI behaviors that can dynamically adapt to changing environmental conditions.
    By using the EQS, NPCs or other game entities can make intelligent decisions based
    on their surroundings. With its flexibility and ease of use, the EQS is a valuable
    feature in Unreal Engine for creating immersive and interactive gameplay experiences.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 的 EQS 是一个强大的工具，允许开发者定义复杂的查询来收集有关游戏世界的信息。EQS 使开发者能够创建能够动态适应环境条件变化的
    AI 行为。通过使用 EQS，NPC 或其他游戏实体可以根据其周围环境做出智能决策。凭借其灵活性和易用性，EQS 是 Unreal Engine 中创建沉浸式和交互式游戏体验的有价值功能。
- en: With the EQS, you can inquire about gathered data using a set of **tests** that
    will generate elements that align most closely with the nature of the query posed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EQS，你可以通过一组 **测试** 来查询收集到的数据，这些测试将生成与查询性质最接近的元素。
- en: An **EQS query** can be triggered inside a behavior tree – or, alternatively,
    through scripting – to guide decisions based on the result of tests. These queries
    mainly consist of **generators** (elements that determine the locations or actors
    to be tested and weighted) and **contexts** (elements that provide a reference
    frame for tests or generators). EQS queries empower AI characters to locate optimal
    positions for tasks such as attacking a player with a line of sight, retrieving
    health or ammo pickups, or seeking the nearest cover point, among other options.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 **EQS 查询** 可以在行为树内部触发——或者，通过脚本——根据测试结果来指导决策。这些查询主要由 **生成器**（确定要测试和加权的地点或演员的元素）和
    **上下文**（为测试或生成器提供参考框架的元素）组成。EQS 查询使 AI 角色能够定位执行攻击玩家、检索健康或弹药拾取、寻找最近的掩护点等任务的最佳位置，以及其他选项。
- en: Let’s start by examining all these elements in detail.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先详细检查所有这些元素。
- en: Explaining generators
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释生成器
- en: 'A generator creates the locations or actors – known as **items** – that will
    undergo testing and weighting; the result will be returned to the behavior tree
    to which the query belongs. Generators that are available out of the box are as
    follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器创建将要进行测试和加权的地点或演员——称为 **项**；结果将返回到属于查询的行为树。以下是一些开箱即用的生成器：
- en: '**Actors of Class** : This will find all actors of a given class returning
    them as items for tests'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类演员**：这将找到给定类的所有演员，并将它们作为测试项返回'
- en: '**Composite** : This will let you create an array of generators and use them
    for tests'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组合**：这将允许你创建一个生成器数组并用于测试'
- en: '**Current Location** : This will let you get the location of a specified context
    and use it to validate tests'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前位置**：这将允许你获取指定上下文的位置并使用它来验证测试'
- en: '**Points** : Generators can be used to create shape-based traces – **Circle**
    , **Cone** , **Donut** , **Grid** , and **Pathing Grid** – around a predefined
    location'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Points**：生成器可用于在预定义位置周围创建基于形状的轨迹——**圆形**、**圆锥形**、**甜甜圈**、**网格**和**路径网格**。'
- en: What’s more, you may implement your own by extending the **EnvQueryGenerator**
    class (if developing in C++) or **EnvQueryGenerator_BlueprintBase** (if developing
    with Blueprints).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以通过扩展 **EnvQueryGenerator** 类（如果使用 C++ 开发）或 **EnvQueryGenerator_BlueprintBase**（如果使用蓝图开发）来实现自己的生成器。
- en: Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Generators created in C++ typically run faster than those developed in Blueprints.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C++ 中创建的生成器通常比在蓝图（Blueprints）中开发的生成器运行得更快。
- en: Explaining contexts
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释上下文
- en: 'A context supplies a point of reference for the different tests and generators
    and can range from the **querier** – the pawn currently possessed by the AI controller
    executing the behavior tree – to more complex scenarios involving all actors of
    a certain type. A generator, such as **Points: Circle** , can use a context that
    will provide multiple locations or actors.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '一个上下文为不同的测试和生成器提供了一个参考点，它可以从 **查询者**——当前由 AI 控制器执行的决策树所拥有的棋子——到涉及某一类型所有演员的更复杂场景。例如，**Points:
    Circle** 这样的生成器可以使用一个上下文，该上下文将提供多个位置或演员。'
- en: 'Available **Context** classes are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 **上下文** 类如下：
- en: '**EnvQueryContext_Item** : This represents either a location – as a vector
    – or an actor'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EnvQueryContext_Item**：这代表一个位置——作为一个向量——或一个演员'
- en: '**EnvQueryContext_Querier** : This represents the querier executing the behavior
    tree'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EnvQueryContext_Querier**：这代表执行行为树的查询者'
- en: As you may have guessed, you may implement your own context by extending the
    **EnvQueryContext** class if developing in C++ or **EnvQueryContext_BlueprintBase**
    if developing with Blueprints.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所猜测的，如果您在 C++ 中开发，可以通过扩展 **EnvQueryContext** 类来实现自己的上下文；如果您使用 Blueprints 开发，则扩展
    **EnvQueryContext_BlueprintBase** 。
- en: Explaining tests
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释测试
- en: A test determines the criteria used by the **environment query** – the actual
    request to the environment – to select the optimal Item from the generator, given
    a context.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个测试确定 **环境查询**（即对环境的实际请求）使用的标准，以在给定上下文中从生成器中选择最佳项目。
- en: 'Some of the out-of-the-box available tests are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些现成的可用测试如下：
- en: '**Distance** : This will return the distance between the item location and
    another location'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离**：这将返回项目位置和另一个位置之间的距离'
- en: '**Overlap: Box** : This can be used to check whether an item is within the
    bounds defined by the test itself'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重叠：盒子**：这可以用来检查一个项目是否在测试本身定义的边界内'
- en: '**PathExists: from Querier** : This can be used to check whether a path to
    the context exists and will return some useful information about it, such as how
    long the path is'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PathExists：从查询器**：这可以用来检查是否存在通往上下文的路，并返回一些有用的信息，例如路径有多长'
- en: You may implement your own tests by extending the **EnvQueryTest** class both
    in C++ and Blueprints.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过扩展 **EnvQueryTest** 类在 C++ 和 Blueprints 中实现自己的测试。
- en: Now that you have acquired a basic understanding of the main EQS elements, it
    is time to delve deeper and begin implementing a fully working and effective AI
    agent with it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经对主要的 EQS 元素有了基本的了解，是时候深入了解并开始使用它实现一个完全工作且有效的 AI 代理了。
- en: Setting up an environment query
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境查询
- en: In this section, you’ll be learning how to add a query to a behavior tree; in
    particular, we will be tweaking the dummy gunner AI brain in order to let it shoot
    at a target achieved by an environment query.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何将查询添加到行为树中；特别是，我们将调整虚拟枪手 AI 脑部，以便让它能够通过环境查询射击目标。
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As previously mentioned, the EQS is still an experimental feature, so you should
    use caution if you want to develop a game using it. At the time of writing this
    book, the EQS is enabled by default by using the **Environment Query** **Editor**
    plugin.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，EQS 仍然是一个实验性功能，因此如果您想使用它开发游戏，应谨慎行事。在撰写本书时，EQS 默认通过使用 **环境查询** **编辑器** 插件启用。
- en: Creating the gym
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建健身房
- en: 'As a first step, we are going to create a proper gym, so start by doing the
    following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们将创建一个合适的健身房，所以请先按照以下步骤操作：
- en: Create a level of your choice, starting from the Level Instances and Packed
    Level Actors, which I provided in the project template.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目模板中提供的 Level Instances 和 Packed Level Actors 开始，创建您选择的关卡。
- en: Add a **BP_GunnerDummyCharacter** instance; just remember to check **Use Controller
    Rotation Yaw** so it will be able to rotate and point to the target when prompted
    to do this.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 **BP_GunnerDummyCharacter** 实例；只需记住检查 **使用控制器偏航**，这样它就可以在需要时旋转并指向目标。
- en: Add one or more **BP_Target** instances so that your AI character will have
    a line of sight to them.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个或多个 **BP_Target** 实例，以便您的 AI 角色能够看到它们。
- en: 'Add some obstacles that will block the line of sight with the AI agent. The
    final gym should look similar to the one depicted in *Figure 11* *.1* :'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些障碍物，以阻挡 AI 代理的视线。最终的健身房应类似于 *图 11* *.1* 中描述的：
- en: '![Figure 11.1 – Finished gym](img/Figure_11.1_B31016.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 完成的健身房](img/Figure_11.1_B31016.jpg)'
- en: Figure 11.1 – Finished gym
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 完成的健身房
- en: It’s now time to set up the AI controller for the AI agent.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为 AI 代理设置 AI 控制器了。
- en: Creating the AI controller
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 AI 控制器
- en: 'The second step is to create a dedicated behavior tree and an AI controller,
    so do the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是创建一个专门的行为树和 AI 控制器，所以请按照以下步骤操作：
- en: In the **AI** folder, create a new behavior tree and call it **BT_EQSGunnerDummy**
    .
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **AI** 文件夹中，创建一个新的行为树并将其命名为 **BT_EQSGunnerDummy** 。
- en: In the **Blueprints** folder, create a new Blueprint class extending from **BaseDummyAIController**
    , name it **AIEQSGunnerDummyController** , and open it.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Blueprints** 文件夹中，创建一个新的 Blueprint 类，从 **BaseDummyAIController** 扩展，命名为
    **AIEQSGunnerDummyController**，并打开它。
- en: In the **Details** panel, look for the **Dummy AI Controller** category and
    set the **Behavior Tree** attribute to **BT_EQSGunnerDummy** .
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **详情** 面板中，查找 **虚拟 AI 控制器** 类别，并将 **行为树** 属性设置为 **BT_EQSGunnerDummy** 。
- en: Select the gunner dummy in the level and set its **AI Controller Class** attribute
    to **AIEQSGunnerDummyController** .
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关卡中选择枪手虚拟角色，并将其**AI控制器类**属性设置为**AIEQSGunnerDummyController**。
- en: Now that the AI controller and its controller character are properly set, it’s
    time to set up an environment query that we will be using in the behavior tree.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在AI控制器及其控制器角色已经正确设置，是时候设置一个我们将在行为树中使用的环境查询了。
- en: Creating an environment query
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建环境查询
- en: 'We are now going to create an environment query that will look for a viable
    target in the level. This is going to be pretty similar to the **FindAvailableTarget**
    task we implemented in [*Chapter 9*](B31016_09.xhtml#_idTextAnchor170) , *Extending
    Behavior Trees* , with a couple of differences; we will be searching for instances
    of a particular class and the target will need to be in line of sight with the
    gunner. Additionally, we won’t be writing a single line of code. So, let’s start
    by doing the following steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个环境查询，它将在关卡中寻找一个可行的目标。这将与我们在[*第9章*](B31016_09.xhtml#_idTextAnchor170)中实现的**FindAvailableTarget**任务非常相似，有一些不同之处；我们将搜索特定类别的实例，并且目标需要与枪手视线对齐。此外，我们不会编写任何代码。因此，让我们先执行以下步骤：
- en: In the **AI** folder, right-right click and select **Artificial Intelligence**
    | **Environment Query** to create one such asset.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**AI**文件夹中，右键单击并选择**人工智能** | **环境查询**以创建此类资产。
- en: Name the newly created asset **EQS_FindTarget** and open it.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的资产命名为**EQS_FindTarget**并打开它。
- en: You will be presented with a graph named **Query Graph** (pretty similar to
    the behavior tree one) that will let you implement your own query.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到一个名为**查询图**（与行为树类似）的图形，它将允许您实现自己的查询。
- en: Click and drag from the **ROOT** node and add an **Actors of Class** generator
    node.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**ROOT**节点点击并拖动，添加一个**演员类**生成节点。
- en: 'Select the newly created node and, in the **Details** panel, do the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新创建的节点，在**详细信息**面板中执行以下操作：
- en: Set the **Searched Actor Class** attribute to **BP_Target**
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**搜索演员类**属性设置为**BP_Target**
- en: Set the **Search Radius** attribute to **3000.0**
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**搜索半径**属性设置为**3000.0**
- en: Right-click on the **ActorsOfClass** node and select **Add Test** | **Trace**
    ; a test will be added inside the node.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**ActorsOfClass**节点，选择**添加测试** | **追踪**；将在节点内添加一个测试。
- en: 'Select the test and, in the **Details** panel, do the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择测试，在**详细信息**面板中执行以下操作：
- en: Set the **Test Purpose** attribute to **Filter Only**
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**测试目的**属性设置为**仅过滤**
- en: Set the **Item Height Offset** attribute to **50.0**
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**项目高度偏移**属性设置为**50.0**
- en: Set the **Context Height Offset** attribute to **50.0**
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**上下文高度偏移**属性设置为**50.0**
- en: Uncheck the **Bool** **Match** attribute.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中**布尔** **匹配**属性。
- en: 'The complete graph for the environment query is depicted in *Figure 11* *.2*
    :'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 环境查询的完整图形如图*11* *.2* 所示：
- en: '![Figure 11.2 – Finished environment query](img/Figure_11.2_B31016.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – 完成环境查询](img/Figure_11.2_B31016.jpg)'
- en: Figure 11.2 – Finished environment query
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 完成环境查询
- en: What we have done here obviously needs some explanation; we have added a generator
    that will look for all actors of a certain class – **BP_Target** – that are near
    the querier (the AI agent executing this environment query). Only the items that
    are in line of sight with the queries will pass the trace test and so they will
    be the only ones that will be considered for selecting a viable target. **Test
    Purpose** has been set to **Filter Only** because we only need to have a list
    of Items and are not interested in their importance – or **score** – in the search.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做显然需要一些解释；我们添加了一个将寻找所有特定类别的演员 – **BP_Target** – 并且这些演员靠近查询者（执行此环境查询的AI代理）。只有那些与查询视线对齐的项目将通过追踪测试，因此它们将是唯一被考虑用于选择可行目标的项目。**测试目的**已设置为**仅过滤**，因为我们只需要有一个项目列表，对它们在搜索中的重要性
    – 或**分数** – 不感兴趣。
- en: Now that the environment query has been defined, we can start implementing the
    behavior tree.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在环境查询已经定义，我们可以开始实现行为树。
- en: Handling environment queries within a behavior tree
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在行为树中处理环境查询
- en: We are now ready to implement the behavior tree, which, as you will see, shows
    some similarities with the **BT_GunnerDummy** asset; the only difference is the
    way we get possible targets. For this reason, we will be using the same Blackboard
    as **BT_GunnerDummy** . So, without further ado, open **BT_EQSGunnerDummy** and,
    in the **Details** panel, set the **Blackboard Asset** attribute to **BB_GunnerDummy**
    .
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好实现行为树，正如你将看到的，它与**BT_GunnerDummy**资产有一些相似之处；唯一的区别是我们获取可能目标的方式。因此，我们将使用与**BT_GunnerDummy**相同的Blackboard。所以，无需多言，打开**BT_EQSGunnerDummy**，在**Details**面板中，将**Blackboard
    Asset**属性设置为**BB_GunnerDummy**。
- en: 'Now, focus on the behavior tree graph and do the following steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，专注于行为树图并执行以下步骤：
- en: Add a **Selector** node to the **ROOT** node and name it **Root Selector** .
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**ROOT**节点上添加一个**Selector**节点并将其命名为**Root Selector**。
- en: Add a **Sequence** node to the **Root Selector** node and name it **Shoot Sequence**
    .
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Root Selector**节点上添加一个**Sequence**节点并将其命名为**Shoot Sequence**。
- en: 'Add a **Blackboard** decorator to the **Shoot Sequence** node and name it **Has
    Ammo?** . In the **Details** panel, do the following:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Shoot Sequence**节点上添加一个**Blackboard**装饰器并将其命名为**Has Ammo?**。在**Details**面板中，执行以下步骤：
- en: Set the **Notify Observers** attribute to **On** **Value Change**
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Notify Observers**属性设置为**Value Change**
- en: Set the **Key Query** attribute to **Is** **Not Set**
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Key Query**属性设置为**Is Not Set**
- en: Set the **Blackboard Key** attribute to **NeedsReload**
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Blackboard Key**属性设置为**NeedsReload**
- en: 'The graph so far should look like the one shown in *Figure 11* *.3* :'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止的图应该看起来像*图11.3*中显示的那样：
- en: '![Figure 11.3 – Starting graph](img/Figure_11.3_B31016.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – 开始图](img/Figure_11.3_B31016.jpg)'
- en: Figure 11.3 – Starting graph
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 开始图
- en: Now, let’s connect the environment query to the graph.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将环境查询连接到图中。
- en: Add a **Run EQSQuery** task to **Shoot Sequence** and name it **Find** **Visible
    Target** .
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Run EQSQuery**任务添加到**Shoot Sequence**，并将其命名为**Find Visible Target**
- en: 'With the task selected, do the following steps:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择任务后，执行以下步骤：
- en: Set the **Query Template** attribute to **EQS_FindTarget** .
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Query Template**属性设置为**EQS_FindTarget**。
- en: Set the **Run Mode** attribute to **Single Random Item from** **Best 25%** .
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Run Mode**属性设置为**从最佳25%中随机选择一个**
- en: Set the **Blackboard Key** attribute to **TargetActor** .
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Blackboard Key**属性设置为**TargetActor**。
- en: What we are doing here is executing the environment query and, once the resulting
    items are returned, we select a random one and assign it to the **TargetActor**
    key of the Blackboard so it will be available to the behavior tree. Now, let’s
    continue our AI logic.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里执行环境查询，一旦返回结果项，我们就随机选择一个并将其分配给Blackboard的**TargetActor**键，以便它对行为树可用。现在，让我们继续我们的AI逻辑。
- en: Add **RotateToFaceBBEntry** to **Shoot Sequence** at the right of the **Find
    Visible Target** node and name it **Rotate** **Towards Target** .
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Find Visible Target**节点右侧的**Shoot Sequence**中添加**RotateToFaceBBEntry**并将其命名为**Rotate
    Towards Target**。
- en: Select the newly created node and set the **Blackboard Key** attribute to **TargetActor**
    .
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新创建的节点并将**Blackboard Key**属性设置为**TargetActor**
- en: You should be already familiar with this portion of the graph; we are simply
    rotating the AI agent toward the target, in order to be ready to shoot.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该已经熟悉这个图的部分了；我们只是在将AI代理旋转到目标方向，以便准备射击。
- en: Let’s go on with the graph.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们继续处理图。
- en: Add a **Play Montage** node to the **Shoot Sequence** node, at the right of
    the **Rotate Towards Target** node and name it **Shoot Montage** .
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Shoot Sequence**节点右侧的**Rotate Towards Target**节点右侧添加一个**Play Montage**节点，并将其命名为**Shoot
    Montage**。
- en: Set the **Anim Montage** property to **AM_1H_Shoot** .
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Anim Montage**属性设置为**AM_1H_Shoot**。
- en: 'Add a **Set Ammo** service to the node and name it **Deplete Ammo** . In the
    **Details** panel, do the following steps:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在节点上添加一个**Set Ammo**服务并将其命名为**Deplete Ammo**。在**Details**面板中，执行以下步骤：
- en: Set the **Needs Reload** property to **NeedsReload**
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Needs Reload**属性设置为**NeedsReload**
- en: Check the **Key** **Value** property
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查**Key Value**属性
- en: This will start the shooting animation montage and, subsequently, will spawn
    a projectile.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动射击动画蒙太奇，随后将生成一个弹体。
- en: 'Add a **Wait** task to **Shoot Sequence** at the right of the **Shoot Montage**
    node, setting the **Wait Time** attribute to **2.0** and the **Random Deviation**
    attribute to **0.5** . This portion of the graph should look like the one depicted
    in *Figure 11* *.4* :'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Shoot Montage**节点右侧的**Shoot Sequence**中添加一个**Wait**任务，将**Wait Time**属性设置为**2.0**，将**Random
    Deviation**属性设置为**0.5**。这部分图应该看起来像*图11.4*中描述的那样：
- en: '![Figure 11.4 – Shoot sequence](img/Figure_11.4_B31016.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4 – 射击序列](img/Figure_11.4_B31016.jpg)'
- en: Figure 11.4 – Shoot sequence
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – 射击序列
- en: We now need to create the reload sequence.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要创建装填序列。
- en: Add a **Sequence** node to **Root Selector** at the right of **Shoot Sequence**
    and name it **Reload Sequence** .
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**射击序列**右侧的**根选择器**中添加一个**序列**节点，并将其命名为**装填序列**。
- en: Add a **Play Montage** node to the **Reload Sequence** node and name it **Reload
    Montage** .
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**装填序列**节点中添加一个**播放蒙太奇**节点，并将其命名为**装填蒙太奇**。
- en: Set the **Anim Montage** property to **AM_1H_Reload** .
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**动画蒙太奇**属性设置为**AM_1H_Reload**。
- en: 'Add a **Set Ammo** service to the node and name it **Refill Ammo** . In the
    **Details** panel, do the following steps:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在节点中添加一个**设置弹药**服务，并将其命名为**补充弹药**。在**详细信息**面板中，执行以下步骤：
- en: Set the **Needs Reload** property to **NeedsReload**
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**需要重新装填**属性设置为**NeedsReload**
- en: Leave the **Key Value** property unchecked
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不勾选**键值**属性
- en: 'Add a **Wait** task to **Reload Sequence** at the right of the **Reload Montage**
    node, setting the **Wait Time** attribute to **2.0** and the **Random Deviation**
    attribute to **0.5** . This portion of the graph is depicted in *Figure 11* *.5*
    :'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**装填序列**中，在**装填蒙太奇**节点右侧添加一个**等待**任务，将**等待时间**属性设置为**2.0**，将**随机偏差**属性设置为**0.5**。此部分图表如图*11*
    *.5* 所示：
- en: '![Figure 11.5 – Reload sequence](img/Figure_11.5_B31016.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – 装填序列](img/Figure_11.5_B31016.jpg)'
- en: Figure 11.5 – Reload sequence
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – 装填序列
- en: The behavior tree is now finished and ready to be used.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 行为树现在已经完成，准备使用。
- en: In this section, we showed how to integrate an environment query inside a behavior
    tree; in the next section, we will be testing its functionality, and I will show
    you how to use the debugging tools with it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了如何在行为树中集成环境查询；在下一节中，我们将测试其功能，我将向您展示如何使用调试工具与它一起使用。
- en: Displaying EQS information
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示EQS信息
- en: 'To test your gym, just start the simulation; you should notice the following
    behavior:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的健身房，只需启动模拟；你应该注意到以下行为：
- en: The AI agent will shoot at a target and then reload the weapon
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人工智能代理将射击目标并重新装填武器
- en: The AI agent will avoid shooting at targets that are not in the line of sight
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人工智能代理将避免射击视线外的目标
- en: This behavior should go on indefinitely; that’s perfectly fine as the gunner
    is looking for targets by searching for the **BP_Target** class. To improve the
    gym, you may wish to implement some extra logic, such as a destroy system for
    targets that have been hit or a points counter for each target that has been hit.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为应该无限期地进行；这是完全可以接受的，因为枪手正在通过搜索**BP_Target**类来寻找目标。为了提高健身房，您可能希望实现一些额外的逻辑，例如为被击中的目标实现销毁系统或为每个被击中的目标实现得分计数器。
- en: 'To show on the screen what’s happening, you will need to enable the debugging
    tools, as explained in [*Chapter 6*](B31016_06.xhtml#_idTextAnchor116) , *Optimizing
    the Navigation System* . Once the debugging tools are enabled, you will just need
    to hit the *3* key on your numpad to show the EQS information and then select
    the AI agent; in our case, you should see a set of information similar to the
    one depicted in *Figure 11* *.6* :'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要在屏幕上显示正在发生的事情，您需要启用调试工具，如[*第6章*](B31016_06.xhtml#_idTextAnchor116)中所述，*优化导航系统*。一旦启用调试工具，您只需按下您的数字键盘上的*3*键来显示EQS信息，然后选择人工智能代理；在我们的例子中，您应该看到一组类似于图*11*
    *.6* 中所示的信息：
- en: '![Figure 11.6 – EQS debugging](img/Figure_11.6_B31016.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6 – EQS调试](img/Figure_11.6_B31016.jpg)'
- en: Figure 11.6 – EQS debugging
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – EQS调试
- en: 'Obviously, each environment query will have its own information. In this example,
    you will notice that each target will show some data and a red wireframe, and
    the selected target will be marked as a **Winner** , as shown in *Figure 11* *.7*
    :'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，每个环境查询都将有其自己的信息。在这个例子中，您会注意到每个目标都会显示一些数据和红色线框，选定的目标将被标记为**Winner**，如图*11*
    *.7* 所示：
- en: '![Figure 11.7 – Selected target](img/Figure_11.7_B31016.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – 选定的目标](img/Figure_11.7_B31016.jpg)'
- en: Figure 11.7 – Selected target
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 选定的目标
- en: 'Targets that won’t be in the line of sight with the querier will be labeled
    as **Trace(0)** to show that the trace failed, as shown in *Figure 11* *.8* :'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将不会与查询者视线对齐的目标将标记为**Trace(0)**以显示跟踪失败，如图*11* *.8* 所示：
- en: '![Figure 11.8 – Target not in the line of sight](img/Figure_11.8_B31016.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – 目标不在视线内](img/Figure_11.8_B31016.jpg)'
- en: Figure 11.8 – Target not in the line of sight
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 目标不在视线内
- en: 'If you want more detailed information for each item in the query, as shown
    in *Figure 11* *.9* , you may want to hit the divide key ( */* ) from the numpad:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取查询中每个项目的更详细信息，如图11*.*9*所示，您可能需要从数字键盘上按除号键（*/*）：
- en: '![Figure 11.9 – Detailed information](img/Figure_11.9_B31016.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图11.9 – 详细信息](img/Figure_11.9_B31016.jpg)'
- en: Figure 11.9 – Detailed information
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9 – 详细信息
- en: I highly encourage you to create your own queries and test them in the level.
    Using the debugging tools can be a significant time-saver during the development
    of your project. Take full advantage of these tools to streamline your workflow
    and enhance efficiency.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您创建自己的查询并在关卡中进行测试。使用调试工具可以在您项目开发过程中节省大量时间。充分利用这些工具以简化工作流程并提高效率。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw a new way – although experimental – to let your AI agents
    probe the level and gather information in order to make meaningful decisions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了一种新的方法——尽管是实验性的——让您的AI代理探测关卡并收集信息，以便做出有意义的决策。
- en: Beginning with a bit of theory, we created an environment query, developed a
    fully operational behavior tree utilizing environment queries effectively, and
    tested it in a gym setting. Furthermore, we explored the use of debugging tools
    to analyze the activities within the level.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从一点理论开始，我们创建了一个环境查询，开发了一个利用环境查询完全可操作的行为树，并在健身房环境中进行了测试。此外，我们还探讨了使用调试工具来分析关卡内活动的方法。
- en: 'This concludes *Part 3* of this book. In the upcoming chapters, we will delve
    into new features within the AI framework, beginning with a glimpse at an alternative
    method of implementing AI agents: hierarchical state machines.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的第三部分*结束*。在接下来的章节中，我们将深入探讨AI框架中的新功能，从了解实现AI代理的替代方法：分层状态机开始。
- en: 'Part 4: Exploring Advanced Topics'
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：探索高级主题
- en: In the fourth part of this book, you will be presented with some cutting-edge
    and experimental AI features within the Unreal Engine ecosystem. Additionally,
    you will gain knowledge on how to integrate these features within your own projects.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第四部分，您将了解Unreal Engine生态系统中的某些前沿和实验性AI功能。此外，您还将获得如何在您的项目中集成这些功能的知识。
- en: 'This part includes the following chapters:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 12*](B31016_12.xhtml#_idTextAnchor233) , *Using Hierarchical State
    Machines with State Trees*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B31016_12.xhtml#_idTextAnchor233) ，*使用分层状态机与状态树*'
- en: '[*Chapter 13*](B31016_13.xhtml#_idTextAnchor251) , *Implementing Data-Oriented
    Calculations with Mass*'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B31016_13.xhtml#_idTextAnchor251) ，*使用质量实现面向数据的计算*'
- en: '[*Chapter 14*](B31016_14.xhtml#_idTextAnchor270) , *Implementing Interactable
    Elements with Smart Objects*'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B31016_14.xhtml#_idTextAnchor270) ，*使用智能对象实现交互元素*'
