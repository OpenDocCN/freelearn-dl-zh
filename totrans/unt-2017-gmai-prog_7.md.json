["```py\nif(healthPoints <= 50)  \n{ \n  CastHealingSpell(me); \n}\n```", "```py\nusing UnityEngine; \nusing UnityEngine.UI; \nusing System.Collections; \n\npublic class FuzzySample1 : MonoBehaviour { \n    private const string labelText = \"{0} true\"; \n    public AnimationCurve critical; \n    public AnimationCurve hurt; \n    public AnimationCurve healthy; \n\n    public InputField healthInput; \n\n    public Text healthyLabel; \n    public Text hurtLabel; \n    public Text criticalLabel; \n\n    private float criticalValue = 0f; \n    private float hurtValue = 0f; \n    private float healthyValue = 0f; \n```", "```py\n    private void Start () { \n        SetLabels(); \n    } \n\n    /* \n     * Evaluates all the curves and returns float values \n     */ \n    public void EvaluateStatements() { \n        if (string.IsNullOrEmpty(healthInput.text)) { \n            return; \n        } \n        float inputValue = float.Parse(healthInput.text); \n\n        healthyValue = healthy.Evaluate(inputValue); \n        hurtValue = hurt.Evaluate(inputValue); \n        criticalValue = critical.Evaluate(inputValue); \n\n        SetLabels(); \n    } \n```", "```py\n    /* \n     * Updates the GUI with the evluated values based \n     * on the health percentage entered by the \n     * user. \n     */ \n    private void SetLabels() { \n        healthyLabel.text = string.Format(labelText, healthyValue); \n        hurtLabel.text = string.Format(labelText, hurtValue); \n        criticalLabel.text = string.Format(labelText, criticalValue);         \n    } \n} \n```", "```py\nIF health IS critical THEN cast healing spell \n```", "```py\nIF health IS critical AND mana IS plenty THEN cast heal \n```", "```py\nIF health IS critical AND allies ARE NOT close THEN cast heal \n```", "```py\nIF health IS critical AND mana IS NOT depleted AND enemy IS very strong THEN cast heal \n```", "```py\n[System.Serializable]\npublic class Question { \n    public string questionText; \n    public Answer[] answers;\n}\n```", "```py\n[System.Serializable]\npublic class Answer {\n    public string answerText; \n    public float moralityValue;\n}\n```", "```py\n    [Header(\"UI\")]\n    [SerializeField]\n    private GameObject questionPanel;\n    [SerializeField]\n    private GameObject resultPanel;\n    [SerializeField]\n    private Text resultText;\n    [SerializeField]\n    private Text questionText;\n    [SerializeField]\n    private Button firstAnswerButton;\n    [SerializeField]\n    private Button secondAnswerButton;\n    [SerializeField]\n    private Button thirdAnswerButton;\n```", "```py\n[Header(\"Morality Gradient\")]\n[SerializeField]\nprivate AnimationCurve good;\n[SerializeField]\nprivate AnimationCurve neutral;\n[SerializeField]\nprivate AnimationCurve evil;\n```", "```py\nprivate void LoadQuestion(int index) \n{\n    if (index < questions.Length) \n    {\n        questionText.text = questions[index].questionText;\n        firstAnswerButton.GetComponentInChildren<Text>().text = questions[index].answers[0].answerText;\n        secondAnswerButton.GetComponentInChildren<Text>().text = questions[index].answers[1].answerText;\n        thirdAnswerButton.GetComponentInChildren<Text>().text = questions[index].answers[2].answerText;\n    } \n    else \n    {\n        EndConversation();\n    }\n}\n```", "```py\npublic void OnAnswerSubmitted(int answerIndex) \n{\n    answerTotal += questions[questionIndex].answers[answerIndex].moralityValue;\n    questionIndex++;\n    LoadQuestion(questionIndex);\n}\n```", "```py\nquestionPanel.SetActive(false);\n```", "```py\n float average = answerTotal / questions.Length;\n float goodRating = good.Evaluate(average);\n float neutralRating = neutral.Evaluate(average);\n float evilRating = evil.Evaluate(average);\n```", "```py\nif(goodRating > neutralRating) \n        {\n            if(goodRating > evilRating) \n            {\n                //good wins\n                alignmentText = \"GOOD\";\n            }\n            else \n            {\n                //evil wins\n                alignmentText = \"EVIL\";\n            }\n        }\n        else \n        {\n            if(neutralRating > evilRating) \n            {\n                //neutral wins\n                alignmentText = \"NEUTRAL\";\n            }\n            else \n            {\n                //evil win\n                alignmentText = \"EVIL\";\n            }\n        }\n```", "```py\nresultPanel.SetActive(true);\nresultText.text = \"Your morality alignment is: \" + alignmentText;\n```"]