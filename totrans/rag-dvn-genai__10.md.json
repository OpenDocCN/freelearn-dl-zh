["```py\n\"Find a basketball player that is scoring with a dunk.\" \n```", "```py\nfrom IPython.display import HTML # to display videos\nimport base64 # to encode videos as base64\nfrom base64 import b64encode # to encode videos as base64\nimport os # to interact with the operating system\nimport subprocess # to run commands\nimport time # to measure execution time\nimport csv # to save comments\nimport uuid # to generate unique ids\nimport cv2 # to split videos\nfrom PIL import Image # to display videos\nimport pandas as pd # to display comments\nimport numpy as np # to use Numerical Python\nfrom io import BytesIO #to manage a binary stream of data in memory \n```", "```py\ndef download(directory, filename):\n    # The base URL of the image files in the GitHub repository\n    base_url = 'https://raw.githubusercontent.com/Denis2054/RAG-Driven-Generative-AI/main/'\n    # Complete URL for the file\n    file_url = f\"{base_url}{directory}/{filename}\"\n    # Use curl to download the file\n    try:\n        # Prepare the curl command\n        curl_command = f'curl -o {filename} {file_url}'\n        # Execute the curl command\n        subprocess.run(curl_command, check=True, shell=True)\n        print(f\"Downloaded '{filename}' successfully.\")\n    except subprocess.CalledProcessError:\n        print(f\"Failed to download '{filename}'. Check the URL, your internet connection, and if the token is correct and has appropriate permissions.\") \n```", "```py\n#You can retrieve your API key from a file(1)\n# or enter it manually(2)\n#Comment this cell if you want to enter your key manually.\n#(1)Retrieve the API Key from a file\n#Store you key in a file and read it(you can type it directly in the notebook but it will be visible for somebody next to you)\nfrom google.colab import drive\ndrive.mount('/content/drive')\nf = open(\"drive/MyDrive/files/api_key.txt\", \"r\")\nAPI_KEY=f.readline()o\nNf.close() \n```", "```py\ntry:\n  import openai\nexcept:\n  #!pip install openai==1.45.0\n  import openai \n```", "```py\n#(2) Enter your manually by\n# replacing API_KEY by your key.\n#The OpenAI Key\nos.environ['OPENAI_API_KEY'] =API_KEY\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\") \n```", "```py\n!pip install pinecone-client==4.1.1\nimport pinecone \n```", "```py\nf = open(\"drive/MyDrive/files/pinecone.txt\", \"r\")\nPINECONE_API_KEY=f.readline()\nf.close() \n```", "```py\n# downloading file from GitHub\ndef download_video(filename):\n  # Define your variables\n  directory = \"Chapter10/videos\"\n  filename = file_name\n  download(directory, filename) \n```", "```py\n# Open the file in binary mode\ndef display_video(file_name):\n    with open(file_name, 'rb') as file:\n      video_data = file.read()\n  # Encode the video file as base64\n  video_url = b64encode(video_data).decode()\n  # Create an HTML string with the embedded video\n  html = f'''\n  <video width=\"640\" height=\"480\" controls>\n    <source src=\"img/mp4;base64,{video_url}\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n  </video>\n  '''\n  # Display the video\n  HTML(html)\n  # Return the HTML object\n  return HTML(html) \n```", "```py\ndef display_video_frame(file_name, frame_number, size):\n    # Open the video file\n    cap = cv2.VideoCapture(file_name)\n    # Move to the frame_number\n    cap.set(cv2.CAP_PROP_POS_FRAMES, frame_number)\n    # Read the frame\n    success, frame = cap.read()\n    if not success:\n      return \"Failed to grab frame\" \n```", "```py\n# Convert the color from BGR to RGB\n    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    # Convert to PIL image and resize\n    img = Image.fromarray(frame)\n    img = img.resize(size, Image.LANCZOS)  # Resize image to specified size \n```", "```py\n # Convert the PIL image to a base64 string to embed in HTML\n    buffered = BytesIO()\n    img.save(buffered, format=\"JPEG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode()\n    # Create an HTML string with the embedded image\n    html_str = f'''\n    <img src=\"img/jpeg;base64,{img_str}\" width=\"{size[0]}\" height=\"{size[1]}\">\n    '''\n    # Display the image\n    display(HTML(html_str))\n    # Return the HTML object for further use if needed\n    return HTML(html_str) \n```", "```py\n# select file\nprint(\"Collecting video\")\nfile_name=\"AI_Professor_Introduces_New_Course.mp4\"\n#file_name = \"AI_Professor_Introduces_New_Course.mp4\" # Enter the name of the video file to process here\nprint(f\"Video: {file_name}\")\n# Downloading video\nprint(\"Downloading video: downloading from GitHub\")\ndownload_video(file_name) \n```", "```py\nCollecting video\nVideo: AI_Professor_Introduces_New_Course.mp4\nDownloading video: downloading from GitHub\nDownloaded 'AI_Professor_Introduces_New_Course.mp4' successfully. \n```", "```py\nprint(\"Displaying a frame of video: \",file_name)\nvideo_capture = cv2.VideoCapture(file_name)\nframe_count = int(video_capture.get(cv2.CAP_PROP_FRAME_COUNT))\nprint(f'Total number of frames: {frame_count}')\nframe_rate = video_capture.get(cv2.CAP_PROP_FPS)\nprint(f\"Frame rate: {frame_rate}\")\nvideo_duration = frame_count / frame_rate\nprint(f\"Video duration: {video_duration:.2f} seconds\")\nvideo_capture.release()\nprint(f'Total number of frames: {frame_count}')\nframe_number=5\nif frame_number > frame_count and frame_count>0:\n  frame_number = 1\ndisplay_video_frame(file_name, frame_number, size=(135, 90)); \n```", "```py\nDisplaying a frame of video:  /content/AI_Professor_Introduces_New_Course.mp4\nTotal number of frames: 340\n![A person taking a picture of a person sitting in a church  Description automatically generated](img/B31169_10_04.png) \n```", "```py\n#print(\"Displaying video: \",file_name)\ndisplay_video(file_name) \n```", "```py\nlfiles = [\n    \"jogging1.mp4\",\n    \"jogging2.mp4\",\n    \"skiing1.mp4\",\n    …\n    \"female_player_after_scoring.mp4\",\n    \"football1.mp4\",\n    \"football2.mp4\",\n    \"hockey1.mp4\"\n] \n```", "```py\nfor i in range(lf):\n  file_name=lfiles[i]\n  print(\"Collecting video\",file_name)\n  print(\"Downloading video\",file_name)\n  download_video(file_name) \n```", "```py\nCollecting video jogging1.mp4\nDownloading video jogging1.mp4\nDownloaded 'jogging1.mp4' successfully.\nCollecting video jogging2.mp4… \n```", "```py\nlf=len(lfiles) \n```", "```py\nfor i in range(lf):\n  file_name=lfiles[i]\n  video_capture.release()\n  display_video_frame(file_name, frame_number=5, size=(100, 110)) \n```", "```py\nDisplaying a frame of video:  skiing1.mp4\nTotal number of frames: 58\nFrame rate: 30.0\nVideo duration: 1.93 seconds\n![A group of people skiing down a slope  Description automatically generated](img/B31169_10_06.png) \n```", "```py\nfile_name=\"football1.mp4\" # Enter the name of the video file to process here\n#print(\"Displaying video: \",file_name)\ndisplay_video(file_name) \n```", "```py\n# Open the file in binary mode\ndef display_video(file_name):\n  with open(file_name, 'rb') as file:\n      video_data = file.read()\n…\n  # Return the HTML object\n  return HTML(html) \n```", "```py\ndef split_file(file_name):\n  video_path = file_name\n  cap = cv2.VideoCapture(video_path)\n  frame_number = 0\n  while cap.isOpened():\n      ret, frame = cap.read()\n      if not ret:\n          break\n      cv2.imwrite(f\"frame_{frame_number}.jpg\", frame)\n      frame_number += 1\n      print(f\"Frame {frame_number} saved.\")\n  cap.release() \n```", "```py\ndef generate_comment(response_data):\n    \"\"\"Extract relevant information from GPT-4 Vision response.\"\"\"\n    try:\n        caption = response_data.choices[0].message.content\n        return caption\n    except (KeyError, AttributeError):\n        print(\"Error extracting caption from response.\")\n        return \"No caption available.\" \n```", "```py\ndef save_comment(comment, frame_number, file_name):\n    \"\"\"Save the comment to a text file formatted for seamless loading into a pandas DataFrame.\"\"\"\n    # Append .csv to the provided file name to create the complete file name\n    path = f\"{file_name}.csv\"\n    # Check if the file exists to determine if we need to write headers\n    write_header = not os.path.exists(path)\n    with open(path, 'a', newline='') as f:\n        writer = csv.writer(f, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n        if write_header:\n            writer.writerow(['ID', 'FrameNumber', 'Comment', 'FileName'])  # Write the header if the file is being created\n        # Generate a unique UUID for each comment\n        unique_id = str(uuid.uuid4())\n        # Write the data\n        writer.writerow([unique_id, frame_number, comment, file_name]) \n```", "```py\ndef generate_openai_comments(filename):\n  video_folder = \"/content\"  # Folder containing your image frames\n  total_frames = len([file for file in os.listdir(video_folder) if file.endswith('.jpg')] \n```", "```py\n nb=3      # sample frequency\n  counter=0 # sample frequency counter \n```", "```py\n for frame_number in range(total_frames):\n      counter+=1 # sampler\n      if counter==nb and counter<total_frames:\n        counter=0\n        print(f\"Analyzing frame {frame_number}...\")\n        image_path = os.path.join(video_folder, f\"frame_{frame_number}.jpg\")\n        try:\n            with open(image_path, \"rb\") as image_file:\n                image_data = image_file.read()\n                response = openai.ChatCompletion.create(\n                    model=\"gpt-4-vision-preview\", \n```", "```py\n messages=[\n                        {\n                            \"role\": \"user\",\n                            \"content\": [\n                                {\"type\": \"text\", \"text\": \"What is happening in this image?\"},\n                                {\n                                    \"type\": \"image\",\n                                    \"image_url\": f\"data:image/jpeg;base64,{base64.b64encode(image_data).decode('utf-8')}\"\n                                },\n                            ],\n                       }\n                    ],\n                    max_tokens=150,\n               ) \n```", "```py\n comment = generate_comment(response)\n            save_comment(comment, frame_number,file_name)\n        except FileNotFoundError:\n            print(f\"Error: Frame {frame_number} not found.\")\n        except Exception as e:\n            print(f\"Unexpected error: {e}\") \n```", "```py\n# Read the video comments file into a pandas DataFrame\ndef display_comments(file_name):\n  # Append .csv to the provided file name to create the complete file name\n  path = f\"{file_name}.csv\"\n  df = pd.read_csv(path)\n  return df \n```", "```py\nsession_time = time.time()  # Start timing before the request\n# Step 1: Displaying the video\n# select file\nprint(\"Step 1: Collecting video\")\nfile_name = \"skiing1.mp4\" # Enter the name of the video file to process here\nprint(f\"Video: {file_name}\")\n# Downloading video\nprint(\"Step 1:downloading from GitHub\")\ndirectory = \"Chapter10/videos\"\ndownload(directory,file_name)\n# Displaying video\nprint(\"Step 1:displaying video\")\ndisplay_video(file_name) \n```", "```py\n# Step 2.Splitting video\nprint(\"Step 2: Splitting the video into frames\")\nsplit_file(file_name) \n```", "```py\n# Step 3.Commenting on the video frames\nprint(\"Step 3: Commenting on the frames\")\nstart_time = time.time()  # Start timing before the request\ngenerate_openai_comments(file_name)\nresponse_time = time.time() - session_time  # Measure response time \n```", "```py\n# number of frames\nvideo_folder = \"/content\"  # Folder containing your image frames\ntotal_frames = len([file for file in os.listdir(video_folder) if file.endswith('.jpg')])\nprint(total_frames)\n# Display comments\nprint(\"Commenting video: displaying comments\")\ndisplay_comments(file_name)\ntotal_time = time.time() - start_time  # Start timing before the request\nprint(f\"Response Time: {response_time:.2f} seconds\")  # Print response time\nprint(f\"Total Time: {total_time:.2f} seconds\")  # Print response time \n```", "```py\n# Ensure the file exists and double checking before saving the comments\nsave=True        # double checking before saving the comments\nsave_frames=True # double checking before saving the frames \n```", "```py\n# Save comments\nif save==True:  # double checking before saving the comments\n  # Append .csv to the provided file name to create the complete file name\n  cpath = f\"{file_name}.csv\"\n  if os.path.exists(cpath):\n      # Use the Python variable 'path' correctly in the shell command\n      !cp {cpath} /content/drive/MyDrive/files/comments/{cpath}\n      print(f\"File {cpath} copied successfully.\")\n  else:\n      print(f\"No such file: {cpath}\") \n```", "```py\nFile alpinist1.mp4.csv copied successfully. \n```", "```py\n# Save frames\nimport shutil\nif save_frames==True:\n  # Extract the root name by removing the extension\n  root_name, extension = os.path.splitext(file_name)\n  # This removes the period from the extension\n  root_name = root_name + extension.strip('.')\n  # Path where you want to copy the jpg files\n  target_directory = f'/content/drive/MyDrive/files/comments/{root_name}'\n  # Ensure the directory exists\n  os.makedirs(target_directory, exist_ok=True)\n  # Assume your jpg files are in the current directory. Modify this as needed\n  source_directory = os.getcwd()  # or specify a different directory\n  # List all jpg files in the source directory\n  for file in os.listdir(source_directory):\n      if file.endswith('.jpg'):\n        shutil.copy(os.path.join(source_directory, file), target_directory) \n```", "```py\ndelf=False  # double checking before deleting the files in a session\nif delf==True:\n  !rm -f *.mp4 # video files\n  !rm -f *.jpg # frames\n  !rm -f *.csv # comments \n```", "```py\nk=1 # number of results \n```", "```py\nquery_text = \"Find a basketball player that is scoring with a dunk.\" \n```", "```py\nimport time\n# Start timing before the request\nstart_time = time.time()\n# Target vector\n#query_text = \"Find a basketball player.\"\nquery_embedding = get_embedding(query_text, model=embedding_model) \n```", "```py\n# Perform the query using the embedding\nquery_results = index.query(vector=query_embedding, top_k=k, include_metadata=True)  # Request metadata\n# Print the query results along with metadata\nprint(\"Query Results:\")\nfor match in query_results['matches']:\n    print(f\"ID: {match['id']}, Score: {match['score']}\")\n    # Check if metadata is available\n    if 'metadata' in match:\n        metadata = match['metadata']\n        text = metadata.get('text', \"No text metadata available.\")\n        frame_number = metadata.get('frame_number', \"No frame number available.\")\n        file_name = metadata.get('file_name', \"No file name available.\") \n```", "```py\n print(f\"Text: {text}\")\n        print(f\"Frame Number: {frame_number}\")\n        print(f\"File Name: {file_name}\")\n    else:\n        print(\"No metadata available.\")\n# Measure response time\nresponse_time = time.time() - start_time\nprint(f\"Querying response time: {response_time:.2f} seconds\")  # Print response time \n```", "```py\nQuery Results:\nID: f104138b-0be8-4f4c-bf99-86d0eb34f7ee, Score: 0.866656184 \n```", "```py\nText: In this image, there is a person who appears to be in the process of executing a dunk in basketball. The individual is airborne, with one arm extended upwards towards the basketball hoop, holding a basketball in hand, preparing to slam it through the hoop. The word \"dunk\" is superimposed on the image, confirming the action taking place. The background shows clear skies and a modern building, suggesting this might be an outdoor basketball court in an urban setting. The player is wearing athletic wear and a pair of basketball shoes, suitable for the sport. The dynamic posture and the context indicate an athletic and powerful movement, typical of a basketball dunk. \n```", "```py\nFrame Number: 191\nFile Name: basketball3.mp4\nQuerying response time: 0.57 seconds \n```", "```py\nprint(file_name)\n# downloading file from GitHub\ndirectory = \"Chapter10/videos\"\nfilename = file_name\ndownload(directory,file_name) \n```", "```py\n# Open the file in binary mode\ndef display_video(file_name):\n  with open(file_name, 'rb') as file:\n      video_data = file.read()\n  # Encode the video file as base64\n  video_url = b64encode(video_data).decode()\n  # Create an HTML string with the embedded video\n  html = f'''\n  <video width=\"640\" height=\"480\" controls>\n    <source src=\"img/mp4;base64,{video_url}\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n  </video>\n  '''\n  # Display the video\n  HTML(html)\n  # Return the HTML object\n  return HTML(html)\ndisplay_video(file_name) \n```", "```py\nfile_name_root = file_name.split('.')[0]\n…\nfrom IPython.display import Image, display\n# Specify the directory and file name\ndirectory = '/content/'  # Adjust the directory if needed\nfile_path = os.path.join(directory, frame)\n# Check if the file exists and verify its size\nif os.path.exists(file_path):\n    file_size = os.path.getsize(file_path)\n    print(f\"File '{frame}' exists. Size: {file_size} bytes.\")\n    # Define a logical size value in bytes, for example, 1000 bytes\n    logical_size = 1000  # You can adjust this threshold as needed\n    if file_size > logical_size:\n        print(\"The file size is greater than the logical value.\")\n        display(Image(filename=file_path))\n    else:\n        print(\"The file size is less than or equal to the logical value.\")\nelse:\n    print(f\"File '{frame}' does not exist in the specified directory.\") \n```", "```py\n \"role\": \"system\",\n                \"content\": \"You will be provided with comments of an image frame taken from a video. Analyze the text and 1\\. Point out the cognitive dissonances 2\\. Rewrite the comment in a logical engaging style. 3\\. Provide a label for this image such as Label: basketball, football, soccer or other label.\" \n```", "```py\n    ID=f104138b-0be8-4f4c-bf99-86d0eb34f7ee\n    score=0.866193652\n    text=In this image, there is a person who appears to be in the process of executing a dunk in basketball. The individual is airborne, with one arm extended upwards towards the basketball hoop, holding a basketball in hand, preparing to slam it through the hoop. The word \"dunk\" is superimposed on the image, confirming the action taking place. The background shows clear skies and a modern building, suggesting this might be an outdoor basketball court in an urban setting. The player is wearing athletic wear and a pair of basketball shoes, suitable for the sport. The dynamic posture and the context indicate an athletic and powerful movement, typical of a basketball dunk.\n    frame_number=191\n    file_name=basketball3.mp4 \n    ```", "```py\nprompt=text \n```", "```py\nresponse_content = get_openai_response(prompt)\nprint(response_content) \n```", "```py\n1\\. Cognitive Dissonances:\n   - The comment redundantly describes the action of dunking multiple times.\n   - The mention of \"the word 'dunk' is superimposed on the image\" is unnecessary and breaks the flow of the description.\n   - The background details about clear skies and a modern building are somewhat extraneous and could be more succinctly integrated.\n2\\. Rewritten Comment:\n   In this image, a basketball player is captured mid-air, executing a powerful dunk. With one arm extended towards the hoop and the basketball firmly in hand, the athlete's dynamic posture showcases the intensity of the moment. The outdoor court, set against a backdrop of clear skies and a modern building, highlights the urban setting. Dressed in athletic wear and basketball shoes, the player epitomizes the energy and skill of the sport.\n3\\. Label: Basketball \n```", "```py\n# Human feedback flashcard comment\ntext1 = \"This image shows soccer players on a field dribbling and passing the ball.\" \n```", "```py\n# Extract rewritten comment\ntext2 = extract_rewritten_comment(response_content) \n```", "```py\nprint(f\"Human Feedback Comment: {text1}\")\nprint(f\"Rewritten Comment: {text2}\") \n```", "```py\nsimilarity_score3=calculate_cosine_similarity_with_embeddings(text1, text2)\nprint(f\"Cosine Similarity Score with sentence transformer: {similarity_score3:.3f}\")\nscores.append(similarity_score3) \n```", "```py\nrscores.append(score) \n```", "```py\nHuman Feedback Comment: This image shows soccer players on a field dribbling and passing the ball.\nRewritten Comment: \"A group of people are engaged in a casual game of soccer on a grassy field. One player is dribbling the ball while others are either defending or waiting for a pass. They are dressed in athletic attire, indicating this is a recreational game among friends or acquaintances. Interestingly, there is a superimposed text 'female' that seems unrelated to the activity shown in the image.\"\nCosine Similarity Score with sentence transformer: 0.621 \n```", "```py\nMean: 0.65 \n```"]