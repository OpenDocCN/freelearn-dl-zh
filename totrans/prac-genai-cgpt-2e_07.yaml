- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing the Future with ChatGPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how developers can leverage ChatGPT. The chapter
    focuses on the main use cases ChatGPT addresses in the domain of developers, including
    code review and optimization, documentation generation, and code generation. The
    chapter will provide examples and enable you to try the prompts on your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a general introduction to the reasons why developers should leverage
    ChatGPT as a daily assistant, we will focus on ChatGPT and how it can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Why should developers use ChatGPT?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating, optimizing, and debugging code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating code-related documentation and debugging your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining **machine learning** (**ML**) models to help data scientists and
    business users with model interpretability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating different programming languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with code on canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to leverage ChatGPT for coding
    activities and use it as an assistant to improve your coding productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can access the complete code for this chapter in the book’s accompanying
    GitHub repository at [https://github.com/PacktPublishing/Practical-GenAI-with-ChatGPT-Second-Edition](https://github.com/PacktPublishing/Practical-GenAI-with-ChatGPT-Second-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: '**Disclaimer**'
  prefs: []
  type: TYPE_NORMAL
- en: While this chapter explores how ChatGPT can generate and work with code, I want
    to emphasize that a deep technical background is not required to appreciate its
    potential. Rather than focusing solely on the mechanics of coding, I encourage
    you to consider the broader implications of how Generative AI can bridge the gap
    between software developers and those without coding expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Why should developers use ChatGPT?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Personally, I believe that one of the most mind-blowing capabilities of ChatGPT
    is in dealing with code – of any type. We’ve already seen, in previous chapters,
    some examples of ChatGPT generating Python code. However, ChatGPT’s capabilities
    for developers go way beyond that example. It can be a daily assistant for code
    generation, explanation, and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are a backend/frontend developer, a data scientist, or a data engineer,
    whenever you work with a programming language, ChatGPT can be a game-changer;
    we will see how in the several examples in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: From the next section onward, we will dive deeper into concrete examples of
    what ChatGPT can achieve when working with code. We will see end-to-end use cases
    covering different domains so that we can get familiar with using ChatGPT as a
    code assistant.
  prefs: []
  type: TYPE_NORMAL
- en: Generating, optimizing, and debugging code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary capability you should leverage is ChatGPT code generation. How
    many times have you looked for a pre-built piece of code to start from? Or looked
    for code that could generate functions, sample datasets, SQL schemas, and so on?
    ChatGPT is able to generate code based on input in natural language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program  Description automatically generated](img/B31559_05_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Example of ChatGPT generating a Python function to write into CSV
    files'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, not only was ChatGPT able to generate the function but it was
    also able to explain what the function does, how to use it, and what to substitute
    in generic placeholders such as `my_folder`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s raise the difficulty bar. If ChatGPT is capable of generating a Python
    function, could it generate an entire video game as well? Let’s try. What I want
    to do is provide ChatGPT with an illustration of the type of game I want to develop
    and ask it to replicate it with code. The following is an illustration of my desired
    game (can you guess the name?):'
  prefs: []
  type: TYPE_NORMAL
- en: '![How Pac-Man Revolutionized Gaming | The MIT Press Reader](img/B31559_05_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: Illustration of the game Pac-Man'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s ask ChatGPT to reproduce it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Example of ChatGPT generating HTML, CSS, and JS code'
  prefs: []
  type: TYPE_NORMAL
- en: 'As can be seen by ChatGPT’s disclaimer, the full game requires a lot of code;
    however, let’s see how the generated code works so far (to run the code, I used
    the online tool *codepen.io*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a video game  Description automatically generated](img/B31559_05_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Pac-Man game generated by ChatGPT'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the draft product already looks similar to what I’m aiming for!
    This is an example of how Generative AI can help you overcome the *difficulties*
    of starting from scratch; in fact, starting from a blank page can sometimes be
    blocking, while having a draft product to start from can not only speed up the
    overall process but also stimulate creativity and improve the quality of the result.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT can also be a great assistant for code optimization. In fact, it might
    save us some running time or compute power by optimizing scripts that we have
    input. This capability might be compared, in the domain of natural language, to
    the writing assistance feature we saw in *Chapter 4* in the *Improving writing
    skills and translation* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, imagine you want to create a list of odd numbers starting from
    another list. To achieve the result, you write the following Python script (for
    the purpose of this exercise, I will also track the execution time with the `timeit`
    and `datetime` libraries):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see how long it takes to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer program  Description automatically generated](img/B31559_05_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Speed of execution of a Python function'
  prefs: []
  type: TYPE_NORMAL
- en: The execution time was `00.115022` seconds. What happens if we ask ChatGPT to
    optimize this script?
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program  Description automatically generated](img/B31559_05_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: ChatGPT generating optimized alternatives to a Python script'
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT provided me with two examples to achieve the same results with lower
    execution time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test both of them in a Jupyter notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer program  Description automatically generated](img/B31559_05_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Speed of execution of two alternative functions generated by ChatGPT'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, both methods lead to a great reduction in time of 44.30% and
    20.68%, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: On top of code generation and optimization, ChatGPT can also be leveraged for
    *error* explanation and debugging. Sometimes, errors are difficult to interpret;
    hence, a natural language explanation can be useful for identifying the problem
    and driving you toward the solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, while running a `.py` file from my command line, I get the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see whether ChatGPT is able to let me understand the nature of the error.
    To do so, I simply provide ChatGPT with the text of the error and ask it to give
    me an explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: ChatGPT explaining a Python error in natural language'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s imagine I wrote a function in Python that takes a string as input
    and returns the same string with an underscore after each letter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, I was expecting to see the `g_p_t_` result; however,
    it only returned `t_` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer program  Description automatically generated](img/B31559_05_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: Bugged Python function'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s ask ChatGPT to debug this function for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screens screenshot of a computer  Description automatically generated](img/B31559_05_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: Example of ChatGPT debugging a Python function'
  prefs: []
  type: TYPE_NORMAL
- en: 'Impressive, isn’t it? Again, ChatGPT provided the correct version of the code,
    and it helped in explaining where the bugs were and why they led to an incorrect
    result. Let’s see whether it works now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer program  Description automatically generated](img/B31559_05_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.11: Python function after ChatGPT debugging'
  prefs: []
  type: TYPE_NORMAL
- en: Well, it obviously does!
  prefs: []
  type: TYPE_NORMAL
- en: These and many other code-related functionalities could really boost your productivity,
    shortening the time to perform many tasks.
  prefs: []
  type: TYPE_NORMAL
- en: However, ChatGPT goes beyond pure debugging. Thanks to the incredible language
    understanding of the GPT model, this Generative AI tool is able to generate proper
    documentation alongside the code, as well as explain exactly what a string of
    code will do, which we will see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Generating documentation and code explainability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you’re working with new applications or projects, it is always good
    practice to correlate your code with documentation. It might be in the form of
    a docstring that you can embed in your functions or classes so that others can
    invoke them directly in the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s consider the same function developed in the previous section
    and make it a Python class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer program  Description automatically generated](img/B31559_05_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.12: Testing the UnderscoreAdder class'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s say I want to be able to retrieve the docstring documentation using
    the `UnderscoreAdder?` convention. By doing so with Python packages, functions,
    and methods, we have full documentation of the capabilities of that specific object,
    as follows (an example with the `pandas` Python library):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.13: Example of the pandas library documentation'
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s now ask ChatGPT to produce the same result for our `UnderscoreAdder`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B31559_05_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.14: ChatGPT updating the code with documentation'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, if we update our class as shown in the preceding code with `UnderscoreAdder?`,
    we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program  Description automatically generated](img/B31559_05_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.15: The new UnderscoreAdder class documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, ChatGPT can also be leveraged to explain what a script, function, class,
    or other similar thing does in natural language. We have already seen many examples
    of ChatGPT enriching its code-related response with clear explanations. However,
    we can boost this capability by asking specific questions in terms of code understanding.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s ask ChatGPT to explain to us what the following Python script
    does:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B31559_05_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.16: Example of ChatGPT explaining a Python script'
  prefs: []
  type: TYPE_NORMAL
- en: Code explainability can also be part of the preceding mentioned documentation,
    or it can be used among developers who might want to better understand complex
    code from other teams or (as sometimes happens to me) remember what they wrote
    some time ago.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to ChatGPT and the capabilities mentioned in this section, developers
    can easily keep track of the project life cycle in natural language so that it
    is easier for both new team members and non-technical users to understand the
    work done so far.
  prefs: []
  type: TYPE_NORMAL
- en: We will see in the next section how code explainability is a pivotal step for
    ML model interpretability in data science projects.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ML model interpretability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Model interpretability** refers to the degree of ease with which a human
    can comprehend the logic behind the ML model’s predictions. Essentially, it is
    the capability to comprehend how a model arrives at its decisions and which variables
    are contributing to its forecasts.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see an example of model interpretability using a deep learning **convolutional
    neural network** (**CNN**) for image classification. I built my model in Python
    using Keras. For this purpose, I will download the CIFAR-10 dataset directly from
    `keras.datasets`; it consists of 60,000 32x32 color images (so 3-channel images)
    in 10 classes (airplane, automobile, bird, cat, deer, dog, frog, horse, ship,
    and truck), with 6,000 images per class. Here, I will share just the body of the
    model; you can find all the related code in the book’s GitHub repository for data
    preparation and pre-processing at [https://github.com/PacktPublishing/Modern-Generative-AI-with-ChatGPT-and-OpenAI-Models/tree/main/Chapter%206%20-%20ChatGPT%20for%20Developers/code](https://github.com/PacktPublishing/Modern-Generative-AI-with-ChatGPT-and-OpenAI-Models/tree/main/Chapter%206%20-%20ChatGPT%20for%20Developers/code)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is made of several layers that perform different actions.
    I might be interested in getting an explanation of the structure of the model
    as well as the purpose of each layer. Let’s ask ChatGPT for some help with that
    (below you can see an extract of the response):'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B31559_05_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.17: Model interpretability with ChatGPT'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding figure, ChatGPT was able to give us a clear
    explanation of the structure and layers of our CNN. It also adds some comments
    and tips, such as the fact that using the max pooling layer helps reduce the dimensionality
    of the input.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can also be supported by ChatGPT in interpreting model results in the validation
    phase. So, after splitting the data into training and test sets and training the
    model on the training set, I want to see its performance on the test set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.18: Evaluation metrics'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also ask ChatGPT to elaborate on our validation metrics (truncated output):'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B31559_05_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.19: Example of ChatGPT explaining evaluation metrics'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, the result is really impressive, and it provides clear guidance
    on how to set up ML experiments in terms of training and test sets. It explains
    how important it is for the model to be sufficiently generalized so that it does
    not overfit and is able to predict accurate results on data that it has never
    seen before.
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons why model interpretability is important. A pivotal element
    is that it reduces the gap between business users and the code behind models.
    This is key to enabling business users to understand how a model behaves, as well
    as translating it into useful business ideas.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, model interpretability enables one of the key principles of responsible
    and ethical AI, which is transparency in how the model behind AI systems thinks
    and behaves. Unlocking model interpretability means detecting potential biases
    or harmful behaviors a model could have while in production and consequently preventing
    them from happening.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, ChatGPT can provide valuable support in the context of model interpretability,
    generating insights at the row level, as we saw in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: The next and last ChatGPT capability we will explore will be yet another boost
    for developers’ productivity, especially when various programming languages are
    being used within the same project.
  prefs: []
  type: TYPE_NORMAL
- en: Translation among different programming languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 4*, we saw how ChatGPT has great capabilities for translating between
    different languages. What is really incredible is that natural language is not
    its only object of translation. In fact, ChatGPT is capable of translating between
    different programming languages while keeping the same output and style (namely,
    it preserves docstring documentation if present).
  prefs: []
  type: TYPE_NORMAL
- en: There are so many scenarios where this could be a game-changer.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you might have to learn a new programming language or statistical
    tool you’ve never seen before because you need to quickly deliver a project on
    it. With the help of ChatGPT, you can start programming in your language of preference
    and then ask it to translate to the desired language, which you will be learning
    alongside the translation process.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that the project needs to be delivered in MATLAB (a proprietary numerical
    computing and programming software developed by MathWorks), yet you’ve always
    programmed in Python. The project consists of classifying images from the **Modified
    National Institute of Standards and Technology** (**MNIST**) dataset (the original
    dataset description and related paper can be found at [http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/)).
    The dataset contains numerous handwritten digits and is frequently utilized to
    teach various image-processing systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, I wrote the following Python code to initialize a deep learning model
    for classification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now see what happens if we give the preceding code as context to ChatGPT
    and ask it to translate it into MATLAB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program  Description automatically generated](img/B31559_05_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.20: ChatGPT translates Python code into MATLAB'
  prefs: []
  type: TYPE_NORMAL
- en: Code translation could also reduce the skill gap between new technologies and
    current programming capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Another key implication of code translation is **application modernization**.
    Indeed, imagine you want to refresh your application stack, namely, migrating
    to the cloud. You could decide to initiate with a simple lift and shift going
    toward **infrastructure-as-a-service** (**IaaS**) instances (such as Windows or
    Linux **virtual machines** (**VMs**)). However, in the second phase, you might
    want to refactor, rearchitect, or even rebuild your applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts the various options for application modernization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.21: Four ways you can migrate your applications to the public cloud'
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT and OpenAI Codex models can help you with the migration. Consider mainframes,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: Mainframes are computers that are predominantly employed by large organizations
    to carry out essential tasks such as bulk data processing for activities such
    as censuses, consumer and industry statistics, enterprise resource planning, and
    large-scale transaction processing. The application programming language of the
    mainframe environment is **Common Business Oriented Language** (**COBOL**). Despite
    being invented in 1959, COBOL is still in use today and is one of the oldest programming
    languages in existence.
  prefs: []
  type: TYPE_NORMAL
- en: As technology continues to improve, applications residing in the realm of mainframes
    have been subject to a continuous process of migration and modernization aimed
    at enhancing existing legacy mainframe infrastructure in areas such as interface,
    code, cost, performance, and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this implies translating COBOL to more modern programming languages,
    such as C# or Java. The problem is that COBOL is unknown to most new-generation
    programmers; hence, there is a huge skills gap in this context.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider a COBOL script that reads an input number, adds 10 to it, and
    then prints the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'I then passed the previous COBOL script to ChatGPT so that it could use it
    as context to formulate its response. Let’s now ask ChatGPT to translate that
    script into C#:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.22: Example of ChatGPT translating COBOL to C#'
  prefs: []
  type: TYPE_NORMAL
- en: Tools such as ChatGPT can help reduce the skill gap in this and similar scenarios
    by introducing a layer that knows both the past and future of programming.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, ChatGPT can be an effective tool for application modernization,
    providing code upgrading in addition to valuable insights and recommendations
    for enhancing legacy systems. With its advanced language-processing capabilities
    and extensive knowledge base, ChatGPT can help organizations streamline their
    modernization efforts, making the process faster, more efficient, and more effective.
  prefs: []
  type: TYPE_NORMAL
- en: Working with code on canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 4*, we mentioned the new ChatGPT canvas feature, which allows users
    to dynamically modify the model’s response in a collaborative workspace. However,
    when it comes to code development, this feature really shines.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it provides an environment for code development, execution, and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example. We will start with a simple query to ChatGPT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.23: Generating code with ChatGPT'
  prefs: []
  type: TYPE_NORMAL
- en: 'As expected, ChatGPT was able to generate the required code. Now, if we click
    on the **Edit** icon, we will be able to access the canvas workspace, where we
    can:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B31559_05_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.24: Modifying code with the canvas workspace'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the code and see the results in a console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B31559_05_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.25: Seamlessly testing and modifying code'
  prefs: []
  type: TYPE_NORMAL
- en: This is a game-changer for software development; it means having the possibility
    to seamlessly test and execute code while interacting with ChatGPT, without the
    need to move from this app to your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go even further. Another way you to interact with canvas is by invoking
    it as a tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.26: Invoking canvas directly'
  prefs: []
  type: TYPE_NORMAL
- en: By doing so, ChatGPT will automatically *enter in the mood* of working with
    code. Let’s ask the same question as before, but this time, leveraging the canvas
    tool directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, ChatGPT will directly open a canvas workspace for us, providing
    additional coding tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31559_05_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.27: The canvas workspace'
  prefs: []
  type: TYPE_NORMAL
- en: 'With these tools, you have four main features:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Add comments** feature gives instructions to ChatGPT to modify your code
    in the same canvas you are working on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Add logs** feature inserts print statements or logging mechanisms into
    your code, aiding in tracking execution flow and diagnosing issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By selecting the **Fix bugs** shortcut, ChatGPT analyzes your code to identify
    and correct errors, enhancing code reliability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Port to a language** feature translates your code into another programming
    language seamlessly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By integrating these features, ChatGPT’s canvas offers a comprehensive environment
    for code development, execution, and debugging, enhancing productivity and facilitating
    a smoother coding workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ChatGPT can be a valuable resource for developers looking to enhance their skills
    and streamline their workflows. We started by seeing how ChatGPT can generate,
    optimize, and debug your code, but we also covered further capabilities, such
    as generating documentation alongside your code, explaining your ML models, and
    translating between different programming languages for application modernization.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re a seasoned developer or just starting out, ChatGPT offers a powerful
    tool for learning and growth, reducing the gap between code and natural language.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will dive deeper into another domain of application
    where ChatGPT *could* be a game-changer: marketing.'
  prefs: []
  type: TYPE_NORMAL
- en: Join our communities on Discord and Reddit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have questions about the book or want to contribute to discussions on Generative
    AI and LLMs? Join our Discord server at [https://packt.link/I1tSU](Chapter_5.xhtml)
    and our Reddit channel at [https://packt.link/jwAmA](Chapter_5.xhtml) to connect,
    share, and collaborate with like-minded enthusiasts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Discord.png) ![](img/QR_Code757615820155951000.png)'
  prefs: []
  type: TYPE_IMG
