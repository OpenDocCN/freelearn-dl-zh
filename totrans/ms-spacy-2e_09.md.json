["```py\npython3 -m weasel clone tutorials/textcat_goemotions\n```", "```py\ncd ./textcat_goemotions\npython3 -m weasel assets\n```", "```py\ncommands:\n  - name: preprocess\n    help: \"Convert the corpus to spaCy's format\"\n    script:\n      - \"python scripts/convert_corpus.py\"\n    deps:\n      - \"assets/train.tsv\"\n      - \"assets/dev.tsv\"\n      - \"assets/test.tsv\"\n      - \"assets/categories.txt\"\n    outputs:\n      - \"corpus/train.spacy\"\n      - \"corpus/dev.spacy\"\n      - \"corpus/test.spacy\"\n```", "```py\npython3 -m weasel run all\n```", "```py\ncd ..\npython3 -m weasel clone tutorials/textcat_goemotions textcat_github_issues\n```", "```py\nassets:\n  - dest: \"assets/train.jsonl\"\n    url: \"https://raw.githubusercontent.com/PacktPublishing/Mastering-spaCy-Second-Edition/refs/heads/main/chapter_09/data/train.jsonl\"\n    description: \"JSONL-formatted training data exported from Prodigy, annotated with `DOCUMENTATION` (661 examples)\"\n  - dest: \"assets/dev.jsonl\"\n    url: \"https://raw.githubusercontent.com/PacktPublishing/Mastering-spaCy-Second-Edition/refs/heads/main/chapter_09/data/dev.jsonl\"\n    description: \"JSONL-formatted development data exported from Prodigy, annotated with `DOCUMENTATION` (500 examples)\"\n  - dest: \"assets/test.jsonl\"\n    url: \"https://raw.githubusercontent.com/PacktPublishing/Mastering-spaCy-Second-Edition/refs/heads/main/chapter_09/data/eval.jsonl\"\n    description: \"JSONL-formatted test data generated with GPT-3.5 (300 examples)\"\n```", "```py\ncd textcat_github_issues\npython3 -m weasel assets\n```", "```py\n{\"text\":\"add please\",\"cats\":{\"DOCUMENTATION\":0.0,\"OTHER\":1.0}}\n{\"text\":\"Examples, failed to load qml\",\"cats\":{\"DOCUMENTATION\":0.0,\"OTHER\":1.0}}\n{\"text\":\"DMCHMM\",\"cats\":{\"DOCUMENTATION\":0.0,\"OTHER\":1.0}}\n{\"text\":\"Moving from MySQL to Hybrid SQL\",\"cats\":{\"DOCUMENTATION\":0.0,\"OTHER\":1.0}}\n```", "```py\n    import srsly\n    import typer\n    import spacy\n    from spacy.tokens import DocBin\n    from pathlib import Path\n    ASSETS_DIR = Path(__file__).parent.parent / \"assets\"\n    CORPUS_DIR = Path(__file__).parent.parent / \"corpus\"\n    ```", "```py\n    def main(assets_dir: Path=ASSETS_DIR, \n             corpus_dir: Path=CORPUS_DIR, lang: str=\"en\"):\n    ```", "```py\n    nlp = spacy.blank(lang)\n    for jsonl_file in assets_dir.iterdir():\n        if not jsonl_file.parts[-1].endswith(\".jsonl\"):\n            continue\n        db = DocBin()\n    ```", "```py\n    for line in srsly.read_jsonl(jsonl_file):\n        doc = nlp.make_doc(line[\"text\"])\n        doc.cats = line[\"cats\"]\n        db.add(doc)\n    out_file = corpus_dir / jsonl_file.with_suffix(\n        \".spacy\").parts[-1]\n    db.to_disk(out_file)\n    ```", "```py\n    if __name__ == \"__main__\":\n        typer.run(main)\n    ```", "```py\n    python3 -m weasel run preprocess\n    ```", "```py\n  - name: preprocess\n    help: \"Convert the corpus to spaCy's format\"\n    script:\n      - \"python scripts/convert_corpus.py\"\n    deps:\n      - \"assets/train.jsonl\"\n      - \"assets/dev.jsonl\"\n      - \"assets/test.jsonl\"\n    outputs_no_cache:\n      - \"corpus/train.spacy\"\n      - \"corpus/dev.spacy\"\n      - \"corpus/test.spacy\"\n```", "```py\n    python3 -m weasel run all\n    ```", "```py\nvars:\n  name: \"textcat_github_issues\"\n  version: \"0.0.1\"\n  # Choose your GPU here\n  gpu_id: 0\n  # Change this to \"bert\" to use the transformer-based model\n  config: \"bert\"\n```", "```py\n[training.batcher]\n@batchers = \"spacy.batch_by_padded.v1\"\ndiscard_oversize = true\nsize = 2000\nbuffer = 256\nget_length = null\n```", "```py\npython3 -m weasel run all\n```", "```py\npython3 -m pip install dvc dvc_gdrive\n```", "```py\npython3 -m dvc init\ngit commit -m \"First commit\"\n```", "```py\npython3 -m dvc remote add --default myremote gdrive:///path/to/folder\npython3 -m dvc remote modify myremote gdrive_acknowledge_abuse true\n```", "```py\n    python3 -m pip install dvclive\n    ```", "```py\n      all:\n        - preprocess\n        - train\n        - evaluate\n        - package\n    ```", "```py\n      - name: track_model\n        help: Track model artifact with DVC\n        script:\n          - \"dvc add packages/${vars.language}_${vars.name}-${vars.version}/dist/${vars.language}_${vars.name}-${vars.version}.tar.gz\"\n        deps:\n          - \"packages/${vars.language}_${vars.name}-${vars.version}/dist/${vars.language}_${vars.name}-${vars.version}.tar.gz\"\n    ```", "```py\n    python3 -m weasel run track_model\n    ```", "```py\n      - name: push_remote\n        help: Push model to DVC remote storage\n        script:\n          - \"dvc push packages/${vars.language}_${vars.name}-${vars.version}/dist/${vars.language}_${vars.name}-${vars.version}.tar.gz\"\n        deps:\n          - \"packages/${vars.language}_${vars.name}-${vars.version}/dist/${vars.language}_${vars.name}-${vars.version}.tar.gz\"\n    ```", "```py\n    python3 -m weasel run push_remote\n    ```", "```py\n    import typer\n    from dvclive import Live\n    ```", "```py\n    def main(model: str, description: str, labels: str): \n        with Live() as live: \n            live.log_artifact( \n                str(model), \n                type=\"model\", \n                name=\"model\" \n            )\n    ```", "```py\n    if __name__ == \"__main__\":\n      typer.run(main)\n    ```", "```py\n    - name: add_to_model_registry\n        help: Add model to DVC Studio Model Registry\n        script:\n          - \"python scripts/add_to_model_registry.py packages/${vars.language}_${vars.name}-${vars.version}/dist/${vars.language}_${vars.name}-${vars.version}.tar.gz ${vars.name}\"\n        deps:\n          - \"scripts/add_to_model_registry.py\"\n          - \"packages/${vars.language}_${vars.name}-${vars.version}/dist/${vars.language}_${vars.name}-${vars.version}.tar.gz\"\n    ```", "```py\n    git add dvc.yaml\n    git commit -m \"feat: adding model using dvclive\"\n    git push\n    ```"]