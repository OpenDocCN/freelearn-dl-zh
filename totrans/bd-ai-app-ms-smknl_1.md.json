["```py\nThe flight duration between New York City and Rio de Janeiro can vary depending on several factors, including the specific departure and arrival airports, the flight route, and any layovers or stopovers. On average, a non-stop flight between John F. Kennedy International Airport (JFK) in New York City and Rio de Janeiro-Galeão International Airport (GIG) in Rio de Janeiro takes approximately 9 to 10 hours.\nKeep in mind that flight durations can vary, so it's always a good idea to check with airlines for the most up-to-date and accurate flight schedules and durations for your specific travel dates and routes. Additionally, if you have layovers or stopovers, the total travel time will be longer.\n```", "```py\n    python -m venv .venv\n    ```", "```py\n        pip:\n\n        ```", "```py\n\n        ```", "```py\n    dotnet new console -o ch1 -f net8.0\n    ```", "```py\n    Microsoft.SemanticKernel NuGet package:\n\n    ```", "```py\n\n    The kernel object itself is very lightweight. It is simply a repository of all the services and plugins that are connected to your application. Most applications start by instantiating an empty kernel and then adding services and functions to it.\n    ```", "```py\n    import semantic_kernel as sk\n    kernel = sk.Kernel()\n    ```", "```py\n    using Microsoft.SemanticKernel;\n    Kernel kernel = Kernel.CreateBuilder().Build()\n    ```", "```py\nOPENAI_API_KEY=\"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nOPENAI_ORG_ID=\"org-xxxxxxxxxxxxxxxxxxxxxxxx\"\n```", "```py\n    import semantic_kernel as sk\n    kernel = sk.Kernel()\n    ```", "```py\n    from semantic_kernel.utils.settings import openai_settings_from_dot_env\n    api_key, org_id = openai_settings_from_dot_env()\n    ```", "```py\n    from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion\n    gpt35 = OpenAIChatCompletion(\"gpt-3.5-turbo\", api_key, org_id, service_id = \"gpt35\")\n    gpt4 = OpenAIChatCompletion(\"gpt-4\", api_key, org_id, service_id = \"gpt4\")\n    kernel.add_service(gpt35)\n    kernel.add_service(gpt4)\n    ```", "```py\n    kernel.add_service(\n        AzureChatCompletion(\n            service_id=service_id,\n            deployment_name=deployment_name,\n            endpoint=endpoint,\n            api_key=api_key,\n        ),\n    )\n    ```", "```py\n{\n    \"apiKey\": \"... your API key here ...\",\n    \"orgId\": \"... your Organization ID here ...\"\n}\n```", "```py\n    using System.Text.Json;\n    public static class Settings {\n      public static (string apiKey, string? orgId)\n            LoadFromFile(string configFile = \"config/settings.json\")\n        {\n            if (!File.Exists(configFile))\n            {\n                Console.WriteLine(\"Configuration not found: \" + configFile);\n                throw new Exception(\"Configuration not found\");\n            }\n            try\n            {\n                var config = JsonSerializer.Deserialize<Dictionary<string, string>>(File.ReadAllText(configFile));\n                // check whether config is null\n                if (config == null)\n                {\n                    Console.WriteLine(\"Configuration is null\");\n                    throw new Exception(\"Configuration is null\");\n                }\n                string apiKey = config[\"apiKey\"];\n                string? orgId;\n                // check whether orgId is in the file\n                if (!config.ContainsKey(\"orgId\"))\n                {\n                    orgId = null;\n                }\n                else\n                {\n                    orgId = config[\"orgId\"];\n                }\n                return (apiKey, orgId);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"Something went wrong: \" + e.Message);\n                return (\"\", \"\");\n            }\n        }\n    }\n    ```", "```py\n    using Microsoft.SemanticKernel;\n    var (apiKey, orgId) = Settings.LoadFromFile();\n    ```", "```py\n    Kernel kernel = Kernel.CreateBuilder()\n            .AddOpenAIChatCompletion(\"gpt-3.5-turbo\", apiKey, orgId, serviceId: \"gpt3\")\n            .AddOpenAIChatCompletion(\"gpt-4\", apiKey, orgId, serviceId: \"gpt4\")\n                            .Build();\n    ```", "```py\n    Kernel kernel = Kernel.CreateBuilder()\n                          .AddAzureOpenAIChatCompletion(modelId, endpoint, apiKey)\n                          .Build();\n    ```", "```py\n    prompt = \"Finish the following knock-knock joke. Knock, knock. Who's there? Dishes. Dishes who?\"\n    ```", "```py\n    prompt_function = kernel.add_function(function_name=\"ex01\", plugin_name=\"sample\", prompt=prompt)\n    ```", "```py\n    response = await kernel.invoke(prompt_function, request=prompt)\n    ```", "```py\n    print(response)\n    ```", "```py\nDishes the police, open up!\n```", "```py\n    string prompt = \"Finish the following knock-knock joke. Knock, knock. Who's there? Dishes. Dishes who?\";\n    ```", "```py\n    var joke = await kernel.InvokePromptAsync(prompt);\n    ```", "```py\n    Console.Write(joke)\n    ```", "```py\nDishes a very bad joke, but I couldn't resist!\n```", "```py\n    from semantic_kernel.functions.kernel_arguments import KernelArguments\n    args = KernelArguments(input=\"Boo\")\n    response = await kernel.invoke(prompt_function, request=prompt, arguments=args)\n    print(response)\n```", "```py\nDon't cry, it's just a joke!\n```", "```py\nstring prompt = \"Finish the following knock-knock joke. Knock, knock. Who's there? {{$input}}, {{$input}} who?\";\nKernelFunction jokeFunction = kernel.CreateFunctionFromPrompt(prompt);\nvar arguments = new KernelArguments() { [\"input\"] = \"Boo\" };\nvar joke = await kernel.InvokeAsync(jokeFunction, arguments);\nConsole.WriteLine(joke);\n```", "```py\nDon't cry, it's just a joke!\n```", "```py\nimport random\nclass ShowManager():\n    @kernel_function(\n    description=\"Randomly choose among a theme for a joke\",\n    name=\"random_theme\"\n  )\n  def random_theme(self) -> str:\n      themes = [\"Boo\", \"Dishes\", \"Art\",\n              \"Needle\", \"Tank\", \"Police\"]\n      theme = random.choice(themes)\n      return theme\n```", "```py\ntheme_choice = kernel.add_plugin(ShowManager(), \"ShowManager\")\n```", "```py\n    response = await kernel.invoke(theme_choice[\"random_theme\"])\n    print(response)\n```", "```py\nTank\n```", "```py\nusing System.ComponentModel;\nusing Microsoft.SemanticKernel;\nnamespace Plugins;\npublic class ShowManager\n{\n    [KernelFunction, Description(\"Take the square root of a number\")]\n    public string RandomTheme()\n    {\n        var list = new List<string> { \"boo\", \"dishes\", \"art\", \"needle\", \"tank\", \"police\"};\n        return list[new Random().Next(0, list.Count)];\n    }\n}\n```", "```py\nstring prompt = \"Finish the following knock-knock joke. Knock, knock. Who's there? {{$input}}, {{$input}} who?\";\nKernelFunction jokeFunction = kernel.CreateFunctionFromPrompt(prompt);\nvar showManagerPlugin = kernel.ImportPluginFromObject(new Plugins.ShowManager());\nvar joke = await kernel.InvokeAsync(jokeFunction, arguments);\nConsole.WriteLine(joke);\n```", "```py\nvar result = await kernel.InvokeAsync(showManagerPlugin[\"RandomTheme\"]);\nConsole.WriteLine(\"I will tell a joke about \" + result);\nvar arguments = new KernelArguments() { [\"input\"] = result };\n```", "```py\nI will tell a joke about art\n```", "```py\nLet's take a look at the directory structure:└───plugins\n    └───jokes\n        |───knock_knock_joke\n        |    ├───config.json\n        |    └───skprompt.txt\n        ├───explain_joke\n             ├───config.json\n             └───skprompt.txt\n```", "```py\n{\n    \"schema\": 1,\n    \"type\": \"completion\",\n    \"description\": \"Generates a knock-knock joke based on user input\",\n    \"default_services\": [\n        \"gpt35\",\n        \"gpt4\"\n    ],\n    \"execution_settings\": {\n        \"default\": {\n            \"temperature\": 0.8,\n            \"number_of_responses\": 1,\n            \"top_p\": 1,\n            \"max_tokens\": 4000,\n            \"presence_penalty\": 0.0,\n            \"frequency_penalty\": 0.0\n        }\n    },\n    \"input_variables\": [\n        {\n            \"name\": \"input\",\n            \"description\": \"The topic that the joke should be written about\",\n            \"required\": true\n        }\n    ]\n}\n```", "```py\nYou are given a joke with the following setup:\nKnock, knock!\nWho's there?\n{{$input}}!\n{{$input}} who?\nRepeat the whole setup and finish the joke with a funny punchline.\n```", "```py\n{\n    \"schema\": 1,\n    \"type\": \"completion\",\n    \"description\": \"Given a joke, explain why it is funny\",\n    \"default_services\": [\n        \"gpt4\"\n    ],\n    \"execution_settings\": {\n        \"default\": {\n            \"temperature\": 0.8,\n            \"number_of_responses\": 1,\n            \"top_p\": 1,\n            \"max_tokens\": 4000,\n            \"presence_penalty\": 0.0,\n            \"frequency_penalty\": 0.0\n        }\n    },\n    \"input_variables\": [\n        {\n            \"name\": \"input\",\n            \"description\": \"The joke that we want explained\",\n            \"required\": true\n        }\n    ]\n}\n```", "```py\nYou are given the following joke:\n{{$input}}\nFirst, tell the joke.\nThen, explain the joke.\n```", "```py\njokes_plugin = kernel.add_plugin(None, parent_directory=\"../../plugins\", plugin_name=\"jokes\")\n```", "```py\nknock_joke = await kernel.invoke(jokes_plugin[\"knock_knock_joke\"], KernelArguments(input=theme))\nprint(knock_joke)\n```", "```py\nKnock, knock!\nWho's there?\nDishes!\nDishes who?\nDishes the police, open up, we've got some dirty plates to wash!\n```", "```py\nexplanation = await kernel.invoke(jokes_plugin[\"explain_joke\"], KernelArguments(input=knock_joke))\nprint(explanation)\n```", "```py\nThis joke is funny because it plays off the expectation set by the traditional \"knock, knock\" joke format. Typically, the person responding sets up a pun or a simple joke with their question (\"...who?\"), but instead, the punchline in this joke is a whimsical and unexpected twist: the police are here not to arrest someone, but to wash dirty plates. This absurdity creates humor. Also, the word 'dishes' is used in a punning manner to sound like 'this is'.\n```", "```py\nvar pluginsDirectory = Path.Combine(System.IO.Directory.GetCurrentDirectory(),\n        \"..\", \"..\", \"..\", \"plugins\", \"jokes\");\n```", "```py\nvar jokesPlugin = kernel.ImportPluginFromPromptDirectory(pluginsDirectory, \"jokes\");\n```", "```py\nvar result = await kernel.InvokeAsync(jokesPlugin[\"knock_knock_joke\"], new KernelArguments() {[\"input\"] = theme.ToString()});)\n```", "```py\nKnock, knock!\nWho's there?\nDishes!\nDishes who?\nDishes the best joke you've heard in a while!\n```", "```py\nvar explanation = await kernel.InvokeAsync(jokesPlugin[\"explain_joke\"], new KernelArguments() {[\"input\"] = result});\nConsole.WriteLine(explanation);\n```", "```py\nKnock, knock!\nWho's there?\nDishes!\nDishes who?\nDishes the best joke you've heard in a while!\nNow, let's break down the joke:\nThe joke is a play on words and relies on a pun. The setup follows the classic knock, knock joke format, with the person telling the joke pretending to be at the door. In this case, they say \"Dishes\" when asked who's there.\nNow, the pun comes into play when the second person asks \"Dishes who?\" Here, the word \"Dishes\" sounds similar to the phrase \"This is.\" So, it can be interpreted as the person saying \"This is the best joke you've heard in a while!\"\nThe punchline subverts the expectation of a traditional knock, knock joke response, leading to a humorous twist. It plays on the double meaning of the word \"Dishes\" and brings humor through wordplay and cleverness.\n```", "```py\nask = f\"\"\"Choose a random theme for a joke, generate a knock-knock joke about it and explain it\"\"\"\noptions = FunctionCallingStepwisePlannerOptions(\n  max_iterations=10,\n  max_tokens=4000)\nplanner = FunctionCallingStepwisePlanner(service_id=\"gpt4\", options=options)\nresult = await planner.invoke(kernel, ask)\nprint(result.final_answer)\n```", "```py\nFirst, the joke:\nKnock, knock!\nWho's there?\nPolice!\nPolice let me in, it's cold out here!\nNow, the explanation:\nThe humor in this joke comes from the play on words. The word \"police\" is being used in a different context than typically used. Instead of referring to law enforcement, it's used as a pun to sound like \"Please\". So, when the jokester says \"Police let me in, it's cold out here!\", it sounds like \"Please let me in, it's cold out here!\". Knock, knock jokes are a form of humor that relies on word play and puns, and this joke is a standard example of that.\n```", "```py\ndotnet add package Microsoft.SemanticKernel.\ns.Handlebars --version 1.0.1-preview\n```", "```py\n#pragma warning disable SKEXP0060\nusing Microsoft.SemanticKernel;\nusing Microsoft.SemanticKernel.Planning.Handlebars;\n```", "```py\nvar (apiKey, orgId) = Settings.LoadFromFile();\nKernel kernel = Kernel.CreateBuilder()\n        .AddOpenAIChatCompletion(\"gpt-3.5-turbo\", apiKey, orgId, serviceId: \"gpt3\")\n        .AddOpenAIChatCompletion(\"gpt-4\", apiKey, orgId, serviceId: \"gpt4\")\n                        .Build();\nvar pluginsDirectory = Path.Combine(System.IO.Directory.GetCurrentDirectory(),\n        \"..\", \"..\", \"..\", \"plugins\", \"jokes\");\n```", "```py\nvar goalFromUser = \"Choose a random theme for a joke, generate a knock-knock joke about it and explain it\";\nvar planner = new HandlebarsPlanner\n(new HandlebarsPlannerOptions() { AllowLoops = false });\nvar plan = await\nplanner.CreatePlanAsync(kernel, goalFromUser);\n```", "```py\nvar result = await plan.InvokeAsync(kernel);\nConsole.WriteLine(result);\n```", "```py\nKnock, knock!\nWho's there?\nPolice!\nPolice who?\nPolice let me know if you find my sense of humor arresting!\nExplanation:\nThis joke is a play on words and relies on the double meaning of the word \"police.\"\nIn the setup, the person telling the joke says \"Knock, knock!\" which is a common way to begin a joke. The other person asks \"Who's there?\" which is the expected response.\nThe person telling the joke then says \"Police!\" as the punchline, which is a word that sounds like \"please.\" So it seems as if they are saying \"Please who?\" instead of \"Police who?\"\nFinally, the person telling the joke completes the punchline by saying \"Police let me know if you find my sense of humor arresting!\" This is a play on words because \"arresting\" can mean two things: first, it can mean being taken into custody by the police, and second, it can mean captivating or funny. So the person is asking if the listener finds their sense of humor funny or engaging and is also using the word \"police\" to continue the play on words.\n```"]