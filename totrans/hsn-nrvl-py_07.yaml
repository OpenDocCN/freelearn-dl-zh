- en: Autonomous Maze Navigation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自主迷宫导航
- en: The maze navigation is a classic computer science problem related to the autonomous
    navigation domain. In this chapter, you will learn how neuroevolution-based methods
    can be used to solve the challenge of maze navigation. Also, we will explain how
    to define a goal-oriented fitness function using the fitness scores of the navigator
    agent calculated as a derivative of the agent's distance from the final goal.
    By the end of this chapter, you will understand the basics of training an autonomous
    navigation agent using neuroevolution methods and will be able to create the more
    advanced maze solver that will be introduced in the next chapter. You will become
    familiar with advanced visualization techniques that will make it easier to understand
    the results of algorithm execution. Also, you will obtain hands-on experience
    of writing simulators of maze-navigating robots and related maze environments
    using the Python programming language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫导航是一个与自主导航领域密切相关的经典计算机科学问题。在本章中，你将了解如何使用基于神经进化的方法来解决迷宫导航的挑战。此外，我们将解释如何使用导航代理的适应度分数（作为代理与最终目标距离的导数）来定义以目标为导向的适应度函数。到本章结束时，你将了解使用神经进化方法训练自主导航代理的基本知识，并将能够创建下一章中将要介绍的更高级的迷宫求解器。你将熟悉高级可视化技术，这将使理解算法执行结果更容易。此外，你将获得使用Python编程语言编写迷宫导航机器人模拟器和相关迷宫环境的实践经验。
- en: 'In this chapter, you will become familiar with the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将熟悉以下主题：
- en: The deceptive nature of the maze navigation problem
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迷宫导航问题的欺骗性本质
- en: Writing a simulator of a maze-navigating robot equipped with an array of sensors
    and actuators
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个配备传感器和执行器的迷宫导航机器人模拟器
- en: Defining a goal-oriented fitness function to guide the process of creating an
    appropriate maze solver using the neuroevolution algorithm
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个以目标为导向的适应度函数，以指导使用神经进化算法创建适当的迷宫求解器的过程
- en: Running the experiments with a simple and hard-to-solve  maze configurations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单且难以解决的迷宫配置运行实验
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following technical requirements should be met to complete the experiments
    described in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章中描述的实验，应满足以下技术要求：
- en: Windows 8/10, macOS 10.13 or newer, or modern Linux
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 8/10，macOS 10.13或更新版本，或现代Linux
- en: Anaconda Distribution version 2019.03 or newer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda Distribution版本2019.03或更新版本
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter5](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter5)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter5](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter5)找到
- en: Maze navigation problem
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫导航问题
- en: The maze navigation problem is a classic computer science problem that is closely
    related to creating autonomous navigation agents that can find a path through
    ambiguous environments. The maze environment is an illustrative domain for the
    class of problems that have a deceptive fitness landscape. This means that the
    goal-oriented fitness function can have steep gradients of fitness scores in dead
    ends in the maze that are close to the final goal point. Such areas of the maze
    become the local optima for objective-based search algorithms that may converge
    in these areas. When the search algorithm converges in such deceptive local optima,
    it cannot find an adequate maze-solver agent.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫导航问题是一个与创建能够在模糊环境中找到路径的自主导航代理密切相关的经典计算机科学问题。迷宫环境是具有欺骗性适应度景观问题类的一个说明性领域。这意味着以目标为导向的适应度函数可以在迷宫中靠近最终目标点的死胡同中具有陡峭的适应度分数梯度。这些迷宫区域成为基于目标的搜索算法的局部最优解，这些算法可能会收敛到这些区域。当搜索算法收敛到这种欺骗性的局部最优解时，它无法找到适当的迷宫求解代理。
- en: 'In the following example, you can see a two-dimensional maze with local optima
    dead ends, which are shaded in:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，你可以看到一个具有局部最优解的死胡同的二维迷宫，这些死胡同被阴影覆盖：
- en: '![](img/fd56ef1f-ea8c-4f17-8d58-62c569a8352f.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd56ef1f-ea8c-4f17-8d58-62c569a8352f.png)'
- en: The two-dimensional maze configuration
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 二维迷宫配置
- en: The maze configuration in the diagram visualizes the landscape of the deceptive
    fitness scores concentrated in the local optima dead ends (marked as filled segments).
    The maze-solver agent navigating from the starting point (bottom circle) to the
    exit point (top circle) using the objective-based search algorithm will be prone
    to getting stuck in the local optima dead ends. Also, a deceptive fitness score
    landscape such as this can prevent the objective-based search algorithm from finding
    a successful maze solver.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的迷宫配置可视化了集中在局部最优死胡同（标记为填充段）中的欺骗性适应度分数景观。使用基于目标的搜索算法从起点（底部圆圈）导航到出口点（顶部圆圈）的迷宫求解代理将容易陷入局部最优死胡同。此外，像这样的欺骗性适应度分数景观可能会阻止基于目标的搜索算法找到成功的迷宫求解器。
- en: The agent navigating through the maze is a robot equipped with a set of sensors,
    allowing it to detect nearby obstacles and get the direction to the maze exit.
    The motion of the robot is controlled by two actuators, which affect the linear
    and angular movement of the robot body. The actuators of the robot are controlled
    by an ANN, which receives input from the sensors and produces the two control
    signals for the actuators.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在迷宫中导航的代理是一个配备了传感器组的机器人，它能够检测附近的障碍物并获得通往迷宫出口的方向。机器人的运动由两个执行器控制，它们影响机器人身体的线性运动和角运动。机器人的执行器由一个ANN控制，该ANN从传感器接收输入并产生两个控制信号供执行器使用。
- en: Maze simulation environment
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫模拟环境
- en: 'The environment for the maze simulation consists of three major components
    that are implemented as separate Python classes:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫模拟的环境由三个主要组件组成，这些组件作为独立的Python类实现：
- en: '`Agent`: The class that holds information related to the maze navigator agent
    that is used by simulation (see the `agent.py`file for the implementation details).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Agent`: 该类包含与迷宫导航代理相关的信息，该代理由模拟使用（请参阅`agent.py`文件以获取实现细节）。'
- en: '`AgentRecordStore`: The class that manages the storage of records relating
    to evaluations of all the solver agents during the evolutionary process. The collected
    records can be used to analyze the evolutionary process after its completion (see
    the `agent.py` file for the implementation details).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AgentRecordStore`: 管理与进化过程中所有求解代理评估相关的记录存储的类。收集的记录可以在完成后用于分析进化过程（请参阅`agent.py`文件以获取实现细节）。'
- en: '`MazeEnvironment`: The class that contains information about the maze simulation
    environment. This class also provides methods that manage the simulation environment,
    control the position of a solver agent, perform collision detection, and generate
    the input data for sensors of the agent (see the `maze_environment.py` file for
    the implementation details).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MazeEnvironment`: 包含迷宫模拟环境信息的类。此类还提供管理模拟环境、控制求解代理的位置、执行碰撞检测以及为代理的传感器生成输入数据的方法（请参阅`maze_environment.py`文件以获取实现细节）。'
- en: In the following sections, we will look at each part of the maze simulation
    environment in more detail.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将更详细地查看迷宫模拟环境的每个部分。
- en: Maze-navigating agent
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫导航代理
- en: In this chapter, we consider a two-dimensional maze navigation task. This task
    is easy to visualize, and it is relatively easy to write the simulator of the
    maze-navigating robot for a two-dimensional maze. The main goal of the robot is
    to navigate through a maze to the defined goal point in a specified number of
    time steps. The ANN that controls the robot is a product of the neuroevolution
    process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们考虑一个二维迷宫导航任务。这个任务容易可视化，并且相对容易为二维迷宫编写迷宫导航机器人的模拟器。机器人的主要目标是导航通过迷宫，在指定的时间步数内到达定义的目标点。控制机器人的ANN是神经进化过程的产物。
- en: The neuroevolution algorithm starts with a very basic initial ANN configuration
    that only has input nodes for sensors and output nodes for actuators, which gradually
    becomes more complex until a successful maze solver is found. This task is complicated
    by a peculiar configuration of the maze that has several *cul-de-sacs*, which
    prevent finding the route to the goal by creating local optima in the fitness
    landscape, as discussed previously.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 神经进化算法从一个非常基本的初始ANN配置开始，该配置仅包含用于传感器的输入节点和用于执行器的输出节点，它逐渐变得更加复杂，直到找到成功的迷宫求解器。这个任务由于迷宫的特殊配置而变得复杂，该配置有几个死胡同，这通过在适应度景观中创建局部最优来阻止找到通往目标的路线，正如之前讨论的那样。
- en: 'The following diagram shows the schematic drawing of the maze agent used in
    the maze-solving simulation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了迷宫求解模拟中使用的迷宫代理的示意图：
- en: '![](img/6d5ee7a0-e182-4b03-9e75-4d8dab75b2f9.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6d5ee7a0-e182-4b03-9e75-4d8dab75b2f9.png)'
- en: The maze agent (robot) schema
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫代理（机器人）架构
- en: In the preceding diagram, the filled circle defines the rigid body of the robot.
    The arrow within the filled circle shows the heading of the robot. The six arrows
    around the filled circle represent **six rangefinder sensors** that indicate the
    distance to the nearest obstacle in a given direction. The four outer circle segments
    denote the **four pie-slice radar sensors** that act as a compass toward the goal
    point (maze exit).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，实心圆定义了机器人的刚体。实心圆内的箭头表示机器人的航向。实心圆周围的六个箭头代表**六个距离传感器**，指示给定方向最近障碍物的距离。四个外圆段表示**四个扇形雷达传感器**，作为指向目标点（迷宫出口）的指南针。
- en: The specific radar sensor becomes activated when the line from the goal point
    to the center of the robot falls within its **field of view** (**FOV**). The detection
    range of the radar sensor is limited by the area of the maze that falls into its
    FOV. Thus, at any given time, one of the four radar sensors is activated, indicating
    the maze exit direction.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当从目标点到机器人中心的线落在其**视场**内时，特定的雷达传感器会被激活。雷达传感器的检测范围由其视场内迷宫区域的大小限制。因此，在任何给定时间，四个雷达传感器中的一个是激活的，指示迷宫出口方向。
- en: 'The radar sensors have the following FOV zones relative to the robot''s heading:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 雷达传感器相对于机器人的航向有以下视场区域：
- en: '| **Sensor** | **FOV, degrees** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **传感器** | **视场角，度** |'
- en: '| Front | 315.0 ~ 405.0 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 前方 | 315.0 ~ 405.0 |'
- en: '| Left | 45.0 ~ 135.0 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 左侧 | 45.0 ~ 135.0 |'
- en: '| Back | 135.0 ~ 225.0 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 后方 | 135.0 ~ 225.0 |'
- en: '| Right | 225.0 ~ 315.0 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 右侧 | 225.0 ~ 315.0 |'
- en: The rangefinder sensor is a trace ray drawn from the center of the robot in
    a specific direction. It becomes activated when intersecting with any obstacle
    and returns a distance to the detected obstacle. The detection range of this sensor
    is defined by a particular configuration parameter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 距离传感器是从机器人中心向特定方向绘制的一条射线。当与任何障碍物相交时，它会被激活，并返回检测到的障碍物的距离。该传感器的检测范围由特定的配置参数定义。
- en: 'The rangefinder sensors of the robot monitor the following directions relative
    to the agent heading:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人的距离传感器监控相对于代理航向的以下方向：
- en: '| **Sensor** | **Direction, degrees** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **传感器** | **方向，度** |'
- en: '| Right | -90.0 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 右侧 | -90.0 |'
- en: '| Front-right | -45.0 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 右前方 | -45.0 |'
- en: '| Front | 0.0 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 前方 | 0.0 |'
- en: '| Front-left | 45.0 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 左前方 | 45.0 |'
- en: '| Left | 90.0 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 左侧 | 90.0 |'
- en: '| Back | -180.0 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 后方 | -180.0 |'
- en: The movement of the robot is controlled by two actuators that apply forces that
    turn and/or propel the agent frame, that is, change its linear and/or angular
    velocity.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人的运动由两个执行器控制，这些执行器施加力以旋转和/或推动代理框架，即改变其线性和/或角速度。
- en: 'The Python implementation of the maze-solver agent has multiple fields to hold
    its current state and to maintain the activation states of its sensors:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫求解代理的Python实现具有多个字段，用于存储其当前状态并维护其传感器的激活状态：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For more implementation details, refer to the `agent.py` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/agent.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/agent.py).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更多实现细节，请参阅[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/agent.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/agent.py)文件。
- en: The preceding code shows a default constructor of the `Agent` class, where all
    fields of the agent are initialized. The maze environment simulation will use
    those fields to store the current state of the agent at each simulation step.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码显示了`Agent`类的默认构造函数，其中初始化了代理的所有字段。迷宫环境模拟将使用这些字段在每个模拟步骤中存储代理的当前状态。
- en: Maze simulation environment implementation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫模拟环境实现
- en: To simulate the solver agent navigating the maze, we need to define an environment
    that manages the configuration of the maze, tracks the position of the maze-solving
    agent, and provides inputs to the sensor data arrays of the navigating robot.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟求解代理在迷宫中导航，我们需要定义一个环境来管理迷宫的配置，跟踪迷宫求解代理的位置，并为导航机器人的传感器数据数组提供输入。
- en: 'All of these features fit into one logical block that is encapsulated into
    the `MazeEnvironment` Python class, which has the following fields (as can be
    seen from the class constructor):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些特性都集成在一个逻辑块中，该逻辑块封装在`MazeEnvironment` Python类中，该类具有以下字段（如类构造函数所示）：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code shows the default constructor of the `MazeEnvironment` class
    with initialization of all its fields:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了`MazeEnvironment`类的默认构造函数及其所有字段的初始化：
- en: The maze configuration is determined by a list of walls and `exit_point`. Walls
    are lists of line segments; each line segment represents a specific wall in the
    maze, and `exit_point` is the location of maze's exit.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迷宫配置由墙壁列表和`exit_point`确定。墙壁是线段的列表；每个线段代表迷宫中的特定墙壁，而`exit_point`是迷宫出口的位置。
- en: The `exit_range` field stores value of the range distance around the `exit_point`
    that defines the exit area. We consider that the agent has successfully solved
    a maze when its position is in the exit area.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_range`字段存储围绕`exit_point`的范围距离值，该值定义了出口区域。我们认为，当代理的位置在出口区域内时，代理已成功解决迷宫。'
- en: The `agent` field holds a reference to the initialized `Agent` class described
    in the previous section, which defines the starting location of the solver agent
    in the maze among other agent-related data fields.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`agent`字段包含对前一小节中描述的初始化`Agent`类的引用，该类定义了求解代理在迷宫中的起始位置以及其他与代理相关的数据字段。'
- en: The `initial_distance` field stores the distance from the agent's starting position
    to the maze exit point. This value will be later used for the agent's fitness
    score calculation.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initial_distance`字段存储从代理起始位置到迷宫出口点的距离。此值将用于计算代理的适应度分数。'
- en: Sensor data generation
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传感器数据生成
- en: 'The maze-solver agent is controlled by an ANN that needs to receive sensor
    data as input to produce the corresponding control signals as output. As we have
    already mentioned, the navigator agent is equipped with an array of two types
    of sensors:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫求解代理由一个需要接收传感器数据作为输入以产生相应控制信号作为输出的ANN（人工神经网络）控制。正如我们之前提到的，导航代理装备有两组类型的传感器：
- en: Six *rangefinder sensors* for the detection of collisions with the maze walls,
    which indicate the distance to the closest obstacle in a particular direction.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个**测距传感器**用于检测与迷宫墙壁的碰撞，它们指示特定方向上最近障碍物的距离。
- en: Four *pie-slice radar sensors*, which indicate the direction to the maze's exit
    point from any place in the maze.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个**扇形雷达传感器**，它们从迷宫中的任何位置指示通往迷宫出口点的方向。
- en: The sensor values need to be updated at each simulation step, and the `MazeEnvironment`
    class provides two designated methods that update both types of sensor.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器值需要在每个模拟步骤中更新，`MazeEnvironment`类提供了两个专门的方法来更新这两种类型的传感器。
- en: 'The array of rangefinder sensors is updated as follows (see the `update_rangefinder_sensors`
    function):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 测距传感器的数组更新如下（参见`update_rangefinder_sensors`函数）：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code enumerates all detection directions of the rangefinder sensors, which
    are determined by the direction angles (see the `range_finder_angles` field initialization
    in the `Agent` constructor). For each direction, a projection line is then created,
    starting from the current position of the agent and with a length equal to the
    rangefinder's detection range. After that, the projection line is tested to see
    if it intersects any of the maze walls. If multiple intersections are detected,
    the distance to the closest wall is stored as a value to a specific rangefinder
    sensor. Otherwise, the maximal detection range will be saved as a value for a
    rangefinder sensor.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码列出了测距传感器的所有检测方向，这些方向由方向角度确定（参见`Agent`构造函数中的`range_finder_angles`字段初始化）。对于每个方向，然后创建一条从代理当前位置开始，长度等于测距器检测范围的投影线。之后，测试投影线是否与迷宫墙壁相交。如果检测到多个交点，则将最近墙壁的距离存储为特定测距传感器的值。否则，将最大检测范围保存为测距传感器的值。
- en: 'The array of pie-slice radar sensors needs to be updated with the following
    code in the `MazeEnvironment` class:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MazeEnvironment`类中，需要使用以下代码更新扇形雷达传感器的数组：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code creates a copy of the maze exit point and rotates it with
    respect to the agent's heading and position within the global coordinate system.
    The target point is then translated to align it with the local coordinate system
    of the maze-solver agent; the agent is placed at the origin of the coordinates.
    After that, we calculate the angle of the vector drawn from the origin of the
    coordinates to the target point within the local coordinate system of the agent.
    This angle is an azimuth to the maze exit point from the current agent position.
    When the azimuth angle is found, we enumerate over the registered pie-sliced radar
    sensors to find the one that includes the azimuth angle in its FOV. The corresponding
    radar sensor is activated by setting its value to 1, while other radar sensors
    are deactivated by zeroing their values.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建迷宫出口点的副本，并在全局坐标系中相对于代理的航向和位置进行旋转。然后，目标点被平移以使其与迷宫求解代理的局部坐标系对齐；代理被放置在坐标原点。之后，我们计算在代理局部坐标系中从坐标原点到目标点的向量的角度。这个角度是从当前代理位置到迷宫出口点的方位角。当找到方位角时，我们遍历已注册的扇形雷达传感器，以找到包含方位角在其视场内的一个。相应的雷达传感器通过将其值设置为
    1 被激活，而其他雷达传感器通过将其值置零被停用。
- en: Agent position update
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理位置更新
- en: 'The position of the maze-solver agent within a maze needs to be updated in
    each simulation step after receiving the corresponding control signals from the
    controller ANN. The following code is executed to update the position of the maze-solver
    agent:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在从控制器 ANN 接收到相应的控制信号后，迷宫求解代理在迷宫中的位置需要在每个模拟步骤中进行更新。以下代码用于更新迷宫求解代理的位置：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `update(self, control_signals)` function is defined in the `MazeEnvironment`
    class and is invoked in each simulation time step. It receives a list with control
    signals as input and returns a Boolean value indicating whether the maze-solver
    agent has reached the exit area after its position update.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`update(self, control_signals)` 函数定义在 `MazeEnvironment` 类中，并在每个模拟时间步被调用。它接收一个包含控制信号的列表作为输入，并返回一个布尔值，指示迷宫求解代理在其位置更新后是否已到达出口区域。'
- en: 'The code at the beginning of this function applies received control signals
    to the current values of the agent''s angular and linear velocities as follows
    (see the `apply_control_signals(self, control_signals)` function):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数开头代码将接收到的控制信号应用于代理的角速度和线速度的当前值，如下所示（参见 `apply_control_signals(self, control_signals)`
    函数）：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, the `x` and `y` velocity components, along with the agents heading,
    are calculated and used to estimate its new position within the maze. If this
    new position doesn''t collide with any of the maze walls, then it is assigned
    to the agent and becomes its current position:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，计算 `x` 和 `y` 速度分量以及代理的航向，并用于估计其在迷宫中的新位置。如果这个新位置没有与迷宫的任何墙壁发生碰撞，那么它将被分配给代理并成为其当前位置：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After this, the new agent position is used in the following functions, which
    update the rangefinder and radar sensors to estimate new sensor inputs for the
    next time step:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，新代理位置被用于以下函数中，这些函数更新测距仪和雷达传感器，以估计下一次时间步的新传感器输入：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, the following function tests whether the agent has reached the maze
    exit, which is defined by the circular area around the exit point with a radius
    equal to the value of the `exit_range` field:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下函数测试代理是否已到达迷宫出口，该出口由出口点周围的圆形区域定义，其半径等于 `exit_range` 字段的值：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If the maze exit has been reached, the value of the `exit_found` field is set
    to `True` to indicate the successful completion of the task, and its value is
    returned from the function call.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已到达迷宫出口，则将 `exit_found` 字段的值设置为 `True` 以指示任务的顺利完成，并从函数调用中返回其值。
- en: For more implementation details, refer to the `maze_environment.py` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_environment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_environment.py).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多实现细节，请参阅 [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_environment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_environment.py)
    中的 `maze_environment.py` 文件。
- en: Agents records store
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理记录存储
- en: 'After completing the experiment, we are interested in evaluating and visualizing
    how each individual solver agent performed during the evolutionary process through
    all generations. This is accomplished by collecting additional statistical data
    about each agent after running the maze-solving simulation for a specified number
    of time steps. The collection of agent records is mediated by two Python classes:
    `AgentRecord` and `AgentRecordStore`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成实验后，我们感兴趣的是评估和可视化每个个体求解代理在整个进化过程中的表现。这是通过在指定的时间步数后运行迷宫求解模拟来收集每个代理的额外统计数据来实现的。代理记录的收集是通过两个Python类`AgentRecord`和`AgentRecordStore`来介导的。
- en: 'The `AgentRecord` class consists of several data fields, as can be seen in
    the class constructor:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`AgentRecord`类由几个数据字段组成，如下所示，可以在类构造函数中看到：'
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The fields are defined as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 字段定义如下：
- en: '`generation` holds the ID of the generation when the agent record was created.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generation`包含创建代理记录时的代ID。'
- en: '`agent_id` is a unique agent identifier.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`agent_id`是代理的唯一标识符。'
- en: '`x` and `y` is the agent''s position within the maze after a simulation has
    been completed.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`和`y`是代理在模拟完成后在迷宫中的位置。'
- en: '`fitness` is the resulting fitness score of the agent.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fitness`是代理的最终适应度得分。'
- en: '`hit_exit` is a flag that indicates whether the agent has reached the maze
    exit area or not.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hit_exit`是一个标志，表示代理是否已达到迷宫出口区域。'
- en: '`species_id` and `species_age` are the ID and age of the species the agent
    belongs to.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`species_id`和`species_age`是代理所属物种的ID和年龄。'
- en: The `AgentRecordStore` class holds a list of agent records and provides functions
    to load/dump the collected records from/to the specific file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`AgentRecordStore`类包含代理记录列表，并提供从/到特定文件加载/转储收集到的记录的功能。'
- en: See the `agent.py` file in the directory associated with this chapter in the
    source code repository for the complete implementation details.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅源代码库中与此章节相关的目录中的`agent.py`文件以获取完整的实现细节。
- en: 'New `AgentRecord` instances are added to the store after evaluation of the
    genome fitness, as defined in the `eval_fitness(genome_id, genome, config, time_steps=400)` function
    implemented in the `maze_experiment.py` file. This is done with the following
    code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在基因组适应度评估后，将新的`AgentRecord`实例添加到存储中，如`maze_experiment.py`文件中实现的`eval_fitness(genome_id,
    genome, config, time_steps=400)`函数所定义的。这是通过以下代码完成的：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code first creates a deep copy of the original maze environment to avoid
    interference between evaluation runs. After that, it creates the control ANN from
    the specified genome using the provided NEAT configuration and starts the evaluation
    of the maze simulation for a given number of time steps. The returned fitness
    score of the agent along with other statistics are then stored into a particular
    `AgentRecord` instance and are added to the record store.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码首先创建原始迷宫环境的深度副本，以避免评估运行之间的干扰。之后，它使用提供的NEAT配置从指定的基因组创建控制ANN，并开始对给定的时间步数进行迷宫模拟评估。然后，代理的返回适应度得分以及其他统计数据被存储到特定的`AgentRecord`实例中，并添加到记录存储中。
- en: The records collected during one trial of the experiment will be saved to the
    `data.pickle` file in the `output` directory and used to visualize the performance
    of all the evaluated agents.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 实验一次试验期间收集的记录将被保存到`output`目录下的`data.pickle`文件中，并用于可视化所有评估代理的性能。
- en: See the `maze_experiment.py` file for the complete implementation details: [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_experiment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_experiment.py).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅`maze_experiment.py`文件以获取完整的实现细节：[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_experiment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_experiment.py).
- en: The agent record visualization
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理记录可视化
- en: After all agents' evaluation records are collected during the neuroevolutionary
    process, we are interested in visualizing the recorded data to get insights into
    performance. The visualization should include the final positions of all solver
    agents and allow to set the threshold value for the fitness of the species to
    control what species will be added to the corresponding plot. We decided to present
    the collected agent records in two plots drawn one above the other. The top plot
    is for the agent records that belong to the species with a fitness score greater
    than or equal to the specified fitness threshold, and the bottom plot is for the
    rest of the records.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在神经进化过程中收集所有代理的评估记录后，我们感兴趣的是可视化这些记录以了解性能。可视化应包括所有求解代理的最终位置，并允许设置物种的适应度阈值以控制哪些物种将被添加到相应的图中。我们决定将收集到的代理记录以两个图的形式展示，一个在上，一个在下。顶部图是适应度分数大于或等于指定适应度阈值的代理记录，底部图是其余的记录。
- en: The visualization of the agent records is implemented in the new methods in
    the `visualize.py` script. You should already be familiar with this script from
    the previous experiments described in this book.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 代理记录的可视化是在`visualize.py`脚本中的新方法中实现的。你应该已经熟悉这个脚本，因为它来自本书中描述的先前实验。
- en: See the `draw_maze_records(maze_env, records, best_threshold=0.8, filename=None,
    view=False, show_axes=False, width=400, height=400)` function definition in the
    `visualize.py` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/visualize.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/visualize.py).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看位于[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/visualize.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/visualize.py)的`visualize.py`文件中的`draw_maze_records(maze_env,
    records, best_threshold=0.8, filename=None, view=False, show_axes=False, width=400,
    height=400)`函数定义。
- en: Objective function definition using the fitness score
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用适应度分数定义目标函数
- en: 'In this section, you will learn about the creation of successful maze-solver
    agents using a goal-oriented objective function to guide the evolutionary process.
    This objective function is based on the estimation of the fitness score of the
    maze solver by measuring the distance between its final position and the maze
    exit after executing the 400 simulation steps. Thus, the objective function is
    goal-oriented and solely depends on the ultimate goal of the experiment: reaching
    the maze exit area.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解如何使用以目标为导向的目标函数来引导进化过程，创建成功的迷宫求解代理。这个目标函数基于通过测量代理执行400个模拟步骤后其最终位置与迷宫出口之间的距离来估计迷宫求解器的适应度分数。因此，目标函数是目标导向的，并且仅依赖于实验的最终目标：到达迷宫出口区域。
- en: In the next chapter, we will consider a different approach for solution search
    optimization, which is based on the **Novelty Search** (**NS**) optimization method.
    The NS optimization method is built around exploring new configurations of the
    solver agent during evolution and doesn't include proximity to the final goal
    (in this case, the maze exit) in the objective function definition. We will demonstrate
    that the NS approach can outperform the conventional goal-oriented objective function
    definition that we consider in this chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将考虑一种不同的解决方案搜索优化方法，该方法基于**新颖性搜索**（**NS**）优化方法。NS优化方法围绕在进化过程中探索求解代理的新配置而构建，并在目标函数定义中不包括接近最终目标（在这种情况下，迷宫出口）的邻近性。我们将证明NS方法可以优于本章中考虑的传统以目标为导向的目标函数定义。
- en: 'The goal-oriented objective function used in this experiment is determined
    as follows. First, we need to define the loss function as the *Euclidean distance*
    between the final position of the agent at the end of the simulation and the position
    of the maze exit:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中使用的以目标为导向的目标函数如下确定。首先，我们需要将损失函数定义为代理在模拟结束时最终位置与迷宫出口位置的**欧几里得距离**：
- en: '![](img/c15d4c04-be73-46a0-8646-389753f2063f.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c15d4c04-be73-46a0-8646-389753f2063f.png)'
- en: '![](img/6cf451c8-aadb-4687-83ce-03c2010b1639.png) is a loss function, ![](img/81e08623-15b0-4415-ab2b-5ce0ca539338.png)
    is the coordinates of the final position of the agent, and ![](img/79fa5d4c-f267-4202-b143-38f359cf7e81.png)
    is the coordinates of the maze exit. In this experiment, we considered a two-dimensional
    maze configuration, so the coordinates have two values, one for each dimension.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片描述](img/6cf451c8-aadb-4687-83ce-03c2010b1639.png) 是损失函数，![图片描述](img/81e08623-15b0-4415-ab2b-5ce0ca539338.png)
    是智能体最终位置的坐标，而 ![图片描述](img/79fa5d4c-f267-4202-b143-38f359cf7e81.png) 是迷宫出口的坐标。在这个实验中，我们考虑了二维迷宫配置，因此坐标有两个值，每个维度一个。'
- en: 'With the loss function defined previously, we now can specify the fitness function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前定义的损失函数，我们现在可以指定适应度函数：
- en: '![](img/ce2af4c9-1d4c-44b0-8e44-7283a2ee9c1e.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片描述](img/ce2af4c9-1d4c-44b0-8e44-7283a2ee9c1e.png)'
- en: '![](img/77443d18-44e5-4825-ad13-e2e97b4fbea7.png) is the radius of the exit
    area around the maze exit point and ![](img/7eee273d-055d-4d6b-a6dd-e728f8d893bb.png)
    is the normalized fitness score. The normalized fitness score is given as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片描述](img/77443d18-44e5-4825-ad13-e2e97b4fbea7.png) 是迷宫出口点周围出口区域的半径，而 ![图片描述](img/7eee273d-055d-4d6b-a6dd-e728f8d893bb.png)
    是归一化适应度分数。归一化适应度分数的给定如下：'
- en: '![](img/e0806012-1153-441c-9cca-ecc9e2d334ea.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片描述](img/e0806012-1153-441c-9cca-ecc9e2d334ea.png)'
- en: '![](img/412eae6e-5bcb-478b-abed-32e75ca636c1.png) is the initial distance from
    the solver agent to the maze exit at the start of the navigation simulation.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片描述](img/412eae6e-5bcb-478b-abed-32e75ca636c1.png) 是导航模拟开始时求解智能体到迷宫出口的初始距离。'
- en: 'The equation normalizes the fitness score to be in the range `(0,1]`, but can
    result in negative values in rare cases when the final position of the agent is
    far away from its initial position and the maze exit. The following amendments
    to the normalized fitness score will be applied to avoid negative values:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 该方程将适应度分数归一化到 `(0,1]` 范围内，但在罕见情况下，当智能体的最终位置远离其初始位置和迷宫出口时，可能会产生负值。以下对归一化适应度分数的修正将应用于避免负值：
- en: '![](img/2a5fb3c0-5f4a-4ad0-8a6a-b8e87b8c6f69.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片描述](img/2a5fb3c0-5f4a-4ad0-8a6a-b8e87b8c6f69.png)'
- en: When the fitness score is less than or equal to `0.01`, it will be assigned
    the minimal fitness score value (`0.01`) supported; otherwise, it will be used
    as is. We selected the minimal fitness score to be higher than zero to give every
    genome the chance to reproduce.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当适应度分数小于或等于 `0.01` 时，它将被赋予支持的最小适应度分数值（`0.01`）；否则，它将按原值使用。我们选择的最小适应度分数高于零，以给每个基因组提供繁殖的机会。
- en: 'The following code in Python implements the goal-oriented objective function:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Python 代码实现了以目标为导向的目标函数：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The code first invokes the `agent_distance_to_exit()` function, which calculates
    the Euclidean distance from the current agent position to the maze exit and uses
    the returned value as a first approximation of the fitness score. After that,
    the fitness score (distance to the maze exit) is compared with the exit range
    value. If the fitness score is less or equal to the exit range value, we assign
    it the final value of `1.0`. Otherwise, the normalized fitness score is calculated
    as a division of the difference between the final and initial distances from the
    agent to the maze exit by the initial distance. Sometimes, this can lead to a
    negative value of the normalized fitness value, which is corrected by comparing
    the fitness value with `0.01` and making the necessary amendments.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先调用 `agent_distance_to_exit()` 函数，该函数计算当前智能体位置到迷宫出口的欧几里得距离，并使用返回值作为适应度分数的第一个近似值。之后，将适应度分数（到迷宫出口的距离）与出口范围值进行比较。如果适应度分数小于或等于出口范围值，我们将其赋予最终的值
    `1.0`。否则，归一化适应度分数通过将智能体到迷宫出口的最终距离与初始距离之差除以初始距离来计算。有时，这可能导致归一化适应度值为负，这可以通过将适应度值与
    `0.01` 进行比较并进行必要的修正来纠正。
- en: See the `maze_environment.py` script for complete implementation details.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的实现细节请参阅 `maze_environment.py` 脚本。
- en: Running the experiment with a simple maze configuration
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用简单的迷宫配置运行实验
- en: We start our experiments related to the creation of the successful maze navigation
    agent with a simple maze configuration. The simple maze configuration, while having
    the deceptive *local optima cul-de-sacs* discussed earlier, has a relatively straightforward
    path from the start point to the exit point.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以简单的迷宫配置开始我们关于创建成功迷宫导航智能体的实验。虽然简单的迷宫配置具有之前讨论过的欺骗性 *局部最优死胡同*，但它从起点到出口点的路径相对直接。
- en: 'The following diagram represents the maze configuration used for this experiment:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表表示了本实验使用的迷宫配置：
- en: '![](img/a30ae052-0e37-42e9-bc05-602ff422106d.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a30ae052-0e37-42e9-bc05-602ff422106d.png)'
- en: The simple maze configuration
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的迷宫配置
- en: The maze in the diagram has two specific positions marked with filled circles.
    The top-left circle denotes the starting position of the maze navigator agent.
    The bottom-right circle marks the exact location of the maze exit that needs to
    be found by the maze solver. The maze solver is required to reach the vicinity
    of the maze exit point denoted by the specific exit range area around it in order
    to complete the task.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的迷宫有两个特定的位置用实心圆圈标记。左上角的圆圈表示迷宫导航代理的起始位置。右下角的圆圈标记了需要找到的迷宫出口的确切位置。迷宫求解器需要到达由其周围的特定出口范围区域表示的迷宫出口点附近，以完成任务。
- en: Hyperparameter selection
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超参数选择
- en: According to the objective function definition, the maximum value of the navigator
    agent fitness score that can be obtained by reaching the maze exit area is `1.0`.
    We are also expecting that the initial configuration of the controller ANN is
    more complicated than in the previous experiments described earlier in the book,
    and this will impact the speed of the algorithm's execution. Due to this, it would
    take too long on a moderate PC to complete the neuroevolution algorithm with a
    significantly large genome population. But at the same time, the task at hand
    is much more complicated than in previous experiments and requires using a wider
    search area for successful solution exploration. Thus, through trial and error,
    we found that the population size can be set to `250`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 根据目标函数的定义，通过到达迷宫出口区域可以获得的最大导航代理适应度分数是`1.0`。我们还期望控制器人工神经网络的初始配置比书中前面描述的实验更复杂，这将影响算法的执行速度。因此，在一个中等配置的PC上完成具有显著大量基因组群体的神经进化算法将花费太长时间。但与此同时，当前的任务比以前的实验更复杂，需要使用更宽的搜索区域以成功探索解决方案。因此，通过试错，我们发现可以将种群大小设置为`250`。
- en: 'The following section from the configuration file contains the definition of
    the parameters we''ve just discussed:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从配置文件中摘录的包含我们刚刚讨论的参数定义的部分：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The initial configuration of the phenotype ANN includes `10` input nodes, `2`
    output nodes, and `1` hidden node. The input and output nodes correspond to the
    input sensors and the control signal outputs. The hidden node is provided to introduce
    non-linearity from the start of the neuroevolutionary process and to save time
    for the evolution process to discover it. The ANN configuration is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 表型人工神经网络的初始配置包括`10`个输入节点、`2`个输出节点和`1`个隐藏节点。输入和输出节点对应于输入传感器和控制信号输出。隐藏节点从神经进化过程开始就引入非线性，并为进化过程节省时间以发现它。人工神经网络配置如下：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To extend the solution search area, we need to boost the speciation of the population
    to try different genome configurations within a limited number of generations.
    This can be done either by reducing the compatibility threshold or by increasing
    the values of the coefficients that are used to perform the calculation of genome
    compatibility scores.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了扩展解决方案搜索区域，我们需要提高种群的物种分化，以在有限代数内尝试不同的基因组配置。这可以通过降低兼容性阈值或增加用于计算基因组兼容性分数的系数值来实现。
- en: 'In this experiment, we used both amendments because the fitness function landscape
    is deceptive, and we need to emphasize even tiny changes in the genome configurations
    to create a new species. The following configuration parameters are affected:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们使用了两种修正，因为适应度函数的地形具有欺骗性，我们需要强调基因组配置中的微小变化以创建新的物种。以下配置参数受到影响：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are particularly interested in creating the optimal configuration of a maze
    solver control ANN that has a minimum number of hidden nodes and connections.
    The optimal ANN configuration is less computationally expensive during training
    by the neuroevolutionary process, as well as during the inference phase in a maze-solving
    simulator. The optimal ANN configuration can be produced by reducing the likelihood
    of adding new nodes, as shown in the following snippet from the NEAT configuration
    file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特别关注创建一个迷宫求解控制人工神经网络的最佳配置，该配置具有最少的隐藏节点和连接。通过神经进化过程，最佳人工神经网络配置在迷宫求解模拟器的训练阶段以及推理阶段都更节省计算资源。通过减少添加新节点的可能性，可以产生最佳人工神经网络配置，如下所示，这是从NEAT配置文件中的片段：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we allow the neuroevolutionary process to exploit not only the ANN
    configurations with feed-forward connections, but also recurrent ones. By having
    the recurrent connections, we enable the possibility for the ANN to have a memory
    and become a state machine. This happens to be beneficial for the evolutionary
    process. The following configuration hyperparameter controls this behavior:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们允许神经进化过程不仅利用具有前馈连接的ANN配置，还包括循环连接。通过循环连接，我们使ANN具有记忆功能，成为一个状态机。这对进化过程来说是有益的。以下配置超参数控制了这一行为：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The hyperparameters described in this section were found to be beneficial to
    the NEAT algorithm that is used in the experiment to create a successful maze-solving
    agent within a limited number of generations.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中描述的超参数被发现对实验中使用的NEAT算法有益，该算法在有限代数内创建了一个成功的迷宫求解代理。
- en: For the complete list of the hyperparameters used in the simple maze-solving
    experiment, please refer to the `maze_config.ini` file at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_config.ini](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_config.ini).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单迷宫求解实验中使用的完整超参数列表，请参阅[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_config.ini](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter5/maze_config.ini)中的`maze_config.ini`文件。
- en: Maze configuration file
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷宫配置文件
- en: 'The maze configuration for our experiment is provided in plain text. This file
    is loaded into the simulation environment, and the corresponding maze configuration
    becomes instantiated. The configuration file has content similar to the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实验迷宫配置以纯文本形式提供。此文件被加载到模拟环境中，相应的迷宫配置便被实例化。配置文件的内容类似于以下内容：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The format of the maze configuration file is as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫配置文件的格式如下：
- en: The first line holds the number of walls in the maze.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行包含迷宫中的墙壁数量。
- en: The second line determines the agent's starting position (*x*, *y*).
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行确定代理的起始位置（*x*，*y*）。
- en: The third line denotes the initial heading of the agent in degrees.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三行表示代理的初始航向角度（以度为单位）。
- en: The fourth line holds the maze exit position (*x*, *y*).
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四行包含迷宫出口位置（*x*，*y*）。
- en: The following lines define the walls of the maze. The number of maze walls is
    given by the first number in the file.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下行定义了迷宫的墙壁。迷宫墙壁的数量由文件中的第一个数字给出。
- en: The maze wall is presented as a line segment with the first two numbers defining
    the coordinates of the starting point and the last two numbers determining the
    coordinates of the endpoint. The starting position of the agent and the maze exit
    are presented in the form of two numbers indicating the *x* and *y* coordinates
    of a point in a two-dimensional space.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫墙壁以线段的形式呈现，前两个数字定义了起点的坐标，最后两个数字确定了终点的坐标。代理的起始位置和迷宫出口以两个数字的形式表示，这两个数字指示了二维空间中某点的
    *x* 和 *y* 坐标。
- en: Working environment setup
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作环境设置
- en: 'The working environment for the simple maze-solving experiment can be set up
    with the following commands entered in your terminal application of choice:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在您选择的终端应用程序中设置简单迷宫求解实验的工作环境：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: These commands create and activate a `maze_objective_neat` virtual environment
    with Python 3.5\. After that, the NEAT-Python library with version 0.92 was installed,
    along with other dependencies used by our visualization utilities.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令使用Python 3.5创建并激活了一个`maze_objective_neat`虚拟环境。之后，安装了版本为0.92的NEAT-Python库，以及我们可视化工具所用的其他依赖。
- en: After that, we are ready to start with the implementation of the experiment
    runner.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们就可以开始实验运行器的实现了。
- en: The experiment runner implementation
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验运行器实现
- en: The experiment runner is implemented in the `maze_experiment.py` file, which you
    should refer to for the complete implementation details. This Python script provides
    functions to read command-line arguments, to configure and start the neuroevolution
    process, and to render the experiment's results after completion. Also, it includes
    the implementation of callback functions to evaluate the fitness of genomes belonging
    to the particular population. These callback functions will be provided to the
    NEAT-Python library environment during the initialization.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 实验运行器在`maze_experiment.py`文件中实现，您应该参考该文件以获取完整的实现细节。此Python脚本提供了读取命令行参数、配置和启动神经进化过程以及完成后渲染实验结果的功能。它还包括评估属于特定群体的基因组健壮性的回调函数的实现。这些回调函数将在初始化NEAT-Python库环境时提供。
- en: 'Further, we discuss the essential parts of the experiment runner''s implementation
    that were not addressed previously in this chapter:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们讨论了实验运行器实现中的关键部分，这些部分在本章之前未涉及：
- en: 'We begin by initializing the maze simulation environment with the following
    lines:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先使用以下行初始化迷宫模拟环境：
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`args.maze` refers to the command-line argument supplied by the user when starting
    the Python script and refers to the type of maze environment with which we would
    like to experiment. It can have two values: *medium* and *hard*. The former refers
    to the simple maze configuration that we use in this experiment.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`args.maze` 指的是用户在启动Python脚本时提供的命令行参数，它指的是我们想要实验的迷宫环境类型。它可以有两个值：*中等*和*困难*。前者指的是我们在本次实验中使用的简单迷宫配置。'
- en: 'After that, we set the specific seed number for the random number generator,
    create the NEAT configuration object, and create the `neat.Population` object
    using the created configuration object:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们为随机数生成器设置了特定的种子数，创建了NEAT配置对象，并使用创建的配置对象创建了`neat.Population`对象：
- en: '[PRE20]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It happens that the random seed value found in the double-pole balancing experiment
    is suitable for this experiment too. We can assume that we found a random attractor
    that is specific to the stochastic process implemented by the NEAT-Python library.
    Later in the book, we will check whether this is true for other experiments as
    well.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 偶然的是，在双杆平衡实验中找到的随机种子值也适用于这个实验。我们可以假设我们找到了一个针对NEAT-Python库实现的随机过程的特定随机吸引子。在本书的后面，我们将检查这同样适用于其他实验。
- en: 'Now we are ready to create the appropriate maze simulation environment and
    store it as a global variable to simplify access to it from the fitness evaluation
    callback functions:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好创建适当的迷宫模拟环境，并将其存储为全局变量，以简化从健身评估回调函数中对它的访问：
- en: '[PRE21]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `MazeSimulationTrial` object holds fields that provide access to the original
    maze simulation environment and to the record store used to save the evaluation
    results of the maze-solver agents. At each call to the fitness evaluation callback
    function, `eval_fitness(genome_id, genome, config, time_steps=400)`, the original
    maze simulation environment will be duplicated and will be used for the maze-solving
    simulation by a specific solver agent for 400 time steps. After that, the full
    statistics about the maze-solver agent, including its final position within the
    maze, will be collected from the environment and added to the record store.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`MazeSimulationTrial`对象包含字段，提供对原始迷宫模拟环境和用于保存迷宫求解代理评估结果的记录存储器的访问。在每次调用健身评估回调函数`eval_fitness(genome_id,
    genome, config, time_steps=400)`时，原始迷宫模拟环境将被复制，并将用于特定求解代理在400个时间步内进行迷宫求解模拟。之后，将从环境中收集关于迷宫求解代理的完整统计数据，包括其在迷宫中的最终位置，并将其添加到记录存储器中。'
- en: 'The following code has become standard for our experiments, and it is related
    to adding various statistics reporters:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码已成为我们实验的标准，它与添加各种统计报告器相关：
- en: '[PRE22]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The reporters are used to display the intermediate results of the neuroevolution
    process to the console, as well as to collect more detailed statistics that will
    be rendered after the process is completed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 报告器用于在控制台显示神经进化过程的中间结果，以及收集在过程完成后将渲染的更详细统计数据。
- en: 'Finally, we run the neuroevolution process for the specified number of generations
    and check whether the solution has been found:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们运行指定代数的神经进化过程，并检查是否找到了解决方案：
- en: '[PRE23]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We assume that a solution has been found if the best genome returned by the
    NEAT-Python library has a fitness score that is greater than or equal to the fitness
    threshold value set in the configuration file (`1.0`). The elapsed time is calculated
    to print how long it took to complete the process.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设如果NEAT-Python库返回的最佳基因组的适应性评分大于或等于配置文件中设置的适应性阈值值（`1.0`），则已找到解决方案。计算已用时间以打印完成过程所需的时间。
- en: Genome fitness evaluation
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基因组适应性评估
- en: 'The callback function to evaluate the fitness scores of all genomes belonging
    to a particular population of organisms is implemented as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 评估属于特定生物种群的所有基因组的适应性评分的回调函数实现如下：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `eval_fitness(genome_id, genome, config)` function evaluates the fitness
    of a specific genome by running the maze-solving simulation against the solver
    agent controlled by the ANN encoded with this genome. The implementation of this
    function is not provided here as it has already been discussed in this chapter.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval_fitness(genome_id, genome, config)`函数通过运行迷宫求解模拟来评估特定基因组的适应性。此函数的实现在此处未提供，因为它已在本章中讨论过。'
- en: Running the simple maze navigation experiment
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行简单迷宫导航实验
- en: Having implemented the maze-solver simulator, as well as the experiment runner
    and fitness evaluation callbacks, we are ready to start a maze-solving experiment.
    Make sure you copy all the related Python scripts and configuration files (`maze_config.ini`
    and `medium_maze.txt`) into the working directory.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现了迷宫求解模拟器、实验运行器和适应性评估回调函数之后，我们就可以开始迷宫求解实验了。请确保你将所有相关的Python脚本和配置文件（`maze_config.ini`和`medium_maze.txt`）复制到工作目录中。
- en: 'After that, enter this directory and execute the following command from your
    terminal application of choice:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进入此目录并从你选择的终端应用程序中执行以下命令：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Do not forget to activate the appropriate virtual environment with the following
    command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用以下命令激活适当的虚拟环境：
- en: '`conda activate maze_objective_neat`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda activate maze_objective_neat`'
- en: The preceding command loads the simple maze configuration from the `medium_maze.txt` file and
    creates the appropriate maze simulation environment. After that, it launches the
    neuroevolutionary process under the control of the NEAT algorithm, using the hyperparameters
    specified in the `maze_config.ini`file. The NEAT algorithm uses a maze-solver
    simulation environment to evaluate the fitness of every genome produced during
    the neuroevolution over `150` generations
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令从`medium_maze.txt`文件加载简单迷宫配置并创建相应的迷宫模拟环境。之后，它启动了在NEAT算法控制下的神经进化过程，使用`maze_config.ini`文件中指定的超参数。NEAT算法使用迷宫求解模拟环境来评估神经进化过程中产生的每个基因组的适应性，共150代。
- en: (`-g` in the command-line arguments).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: （命令行参数中的`-g`）。
- en: 'After `144` generations of evolution, the successful maze-solver agent is found
    at generation `145`. The console output for the last generation is as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 经过144代的进化后，在145代找到了成功的迷宫求解代理。最后一代的控制台输出如下：
- en: 'First, general statistics about the genome population:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，关于基因组种群的一般统计信息：
- en: '[PRE26]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Second, the configuration of the genome encoding the successful maze-solver
    controller ANN:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，配置编码成功迷宫求解控制器ANN的基因组：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the console output, you can see that the successful maze solver controller
    was found during evolution and was able to reach the maze exit area in 388 steps
    from the allotted 400\. The configuration of the control ANN of the successful
    maze solver consists of 2 output nodes and 1 hidden node, with 11 connections
    in between these nodes and from the inputs. The final configuration of the controller
    ANN is shown in the following diagram:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台输出中，你可以看到在进化过程中找到了成功的迷宫求解控制器，并且能够在400步中达到迷宫出口区域，共388步。成功迷宫求解控制器的控制ANN配置包括2个输出节点和1个隐藏节点，节点之间和从输入到节点之间有11个连接。控制器ANN的最终配置如下所示：
- en: '![](img/1f5be19e-6d05-4715-8a90-d99e2c4d8c7f.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1f5be19e-6d05-4715-8a90-d99e2c4d8c7f.png)'
- en: The ANN configuration controlling a successful solver of a simple maze
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 控制简单迷宫求解成功求解器的ANN配置
- en: It is interesting to look at the graph to study how different sensor inputs
    influence the output control signals. We can see that the ANN configuration completely
    ignores the inputs from the front and left rangefinder sensors (**RF_FR** and
    **RF_L**) and from the backward pie-slice radar sensor (**RAD_B**) of the robot.
    At the same time, the linear and angular velocities of the robot are controlled
    by unique combinations of other sensors.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 研究不同传感器输入如何影响输出控制信号是非常有趣的。我们可以看到，神经网络配置完全忽略了来自前方和左侧测距仪传感器（**RF_FR** 和 **RF_L**）以及来自机器人后向饼形雷达传感器（**RAD_B**）的输入。同时，机器人的线性和角速度由其他传感器的独特组合控制。
- en: Furthermore, we can see the aggregation of the left and right pie-slice radar
    sensors (**RAD_L** and **RAD_R**) with the backward rangefinder (**RF_B**) through
    the hidden node, which then relayed an aggregated signal to a node controlling
    the angular velocity. If we take a look at the simple maze configuration image
    shown in this chapter (see the simple maze configuration image), the aggregation
    seems pretty natural. This allows the robot to turn around and continue to explore
    the maze when it is trapped in dead ends, where the local fitness optima are located.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以通过隐藏节点看到左右饼形雷达传感器（**RAD_L** 和 **RAD_R**）与后向测距仪（**RF_B**）的聚合，该节点随后将聚合信号传递给控制角速度的节点。如果我们看看本章中显示的简单迷宫配置图像（参见简单迷宫配置图像），这种聚合看起来相当自然。这使得当机器人陷入死胡同，局部最优解所在之处时，它可以转身并继续探索迷宫。
- en: 'The fitness scores of the solver agents over generations is shown here:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里展示了求解代理的适应度分数随代数的变化：
- en: '![](img/7742ca6f-7471-4c1c-a546-46feb0ed5a9e.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7742ca6f-7471-4c1c-a546-46feb0ed5a9e.png)'
- en: The average fitness scores over generations
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 各代平均适应度分数
- en: In this plot, we can see that the evolutionary process was able to produce pretty
    successful maze-solver agents at generation `44` with a fitness score of **0.96738**.
    But it took an additional 100 generations to evolve the genome that encodes the
    ANN of the successful maze-solver agent.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图中，我们可以看到进化过程在第 `44` 代成功产生了具有适应度分数 **0.96738** 的迷宫求解代理。但要经过额外的 `100` 代才能进化出编码成功迷宫求解者代理的神经网络的基因组。
- en: Also, it is interesting to note that the boost in performance at generation
    `44` is generated by the species with ID `1`, but the genome of the successful
    maze solver belongs to a species with ID `7`, which was not even known at the
    time of the first spike. The species producing the champion appeared after 12
    generations and remained in the population until the end, preserving the beneficial
    mutation and elaborating over it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得注意的是，在第 `44` 代性能提升是由物种 ID 为 `1` 的物种产生的，但成功迷宫求解者的基因组属于 ID 为 `7` 的物种，这在第一次峰值时甚至还不为人知。产生冠军物种的物种在第
    `12` 代出现，并一直保留在种群中，保留了有益的突变并对其进行了完善。
- en: 'The speciation over generations is shown in the following plot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中展示了各代物种分化：
- en: '![](img/496ddb2e-cbce-463a-8e06-8079fe6bd57c.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/496ddb2e-cbce-463a-8e06-8079fe6bd57c.png)'
- en: The speciation over generations
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 各代物种分化
- en: On the speciation plot, we can see the species with ID `7` marked in pink. This
    species ultimately produced the genome of the successful maze solver during the
    evolutionary process. The size of species 7 varies considerably throughout its
    life, and at one time it was the only species in the entire population for several
    generations (from 105 until 108).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在物种分化图中，我们可以看到用粉红色标记的 ID 为 `7` 的物种。这个物种在进化过程中最终产生了成功迷宫求解者的基因组。物种 7 的大小在其生命周期中变化很大，一度在几代（从
    `105` 到 `108`）中成为整个种群中唯一的物种。
- en: Agent record visualization
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理记录可视化
- en: 'In this experiment, we presented a new visualization method that allows us
    to visually discern the performance of various species in the evolutionary process.
    The visualization can be performed using the following command, executed from
    the working directory of the experiment:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，我们提出了一种新的可视化方法，使我们能够直观地辨别进化过程中各种物种的性能。可视化可以通过以下命令执行，该命令在实验的工作目录中执行：
- en: '[PRE28]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The command loads records about the fitness evaluation of each maze-solving
    agent during the evolution, which is stored in the `data.pickle` file. After that,
    it draws the final positions of the agents on the maze map at the end of the maze-solving
    simulation. Each agent''s final position is presented as a color-coded circle.
    The color of the circle encodes the species to which the particular agent belongs.
    Each species produced during the evolution has a unique color code. The results
    of this visualization can be seen in the following plot:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 命令加载了每个迷宫解决代理在进化过程中的适应度评估记录，这些记录存储在`data.pickle`文件中。之后，它将在迷宫解决模拟结束时在迷宫地图上绘制代理的最终位置。每个代理的最终位置以颜色编码的圆圈表示。圆圈的颜色编码了特定代理所属的物种。进化过程中产生的每个物种都有一个独特的颜色编码。以下图表显示了可视化结果：
- en: '![](img/0618c36d-4f70-4b38-91e4-9c565ea53733.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0618c36d-4f70-4b38-91e4-9c565ea53733.png)'
- en: The visualization of the evaluation of the solver agents
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 解决代理评估的可视化
- en: To make the visualization more informative, we have introduced the fitness threshold
    to filter out the most performant species. The top subplot shows the final positions
    of the solver agents belonging to the champion species (the fitness score is above
    **0.8**). As you can see, the organisms belonging to these six species are active
    explorers, who have genes inciting search through unknown places in the maze.
    Their final locations are distributed almost uniformly through the maze area around
    the starting point and have a low density at the local optima *cul-de-sacs*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使可视化更具信息量，我们引入了适应度阈值来过滤掉表现最出色的物种。顶部子图显示了冠军物种（适应度分数高于**0.8**）所属的解决代理的最终位置。正如你所见，属于这六个物种的有机体是活跃的探险者，它们具有在迷宫中搜索未知地方的基因。它们的最终位置几乎均匀地分布在起始点周围的迷宫区域内，并且在局部最优的*死胡同*处密度较低。
- en: At the same time, you can see in the bottom subplot that the evolutionary losers
    demonstrate more conservative behavior, concentrating mainly near the walls in
    the starting area and in the strongest local optima region—the biggest *cul-de-sac*,
    which is at the bottom of the maze.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，你可以在底部子图中看到，进化失败的个体表现出更保守的行为，主要集中在新区域的墙壁附近以及最强的局部最优区域——迷宫底部的最大死胡同。
- en: Exercises
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Try to increase the `compatibility_disjoint_coefficient` parameter in the `maze_config.ini` file
    and run the experiment with new settings. What impact does this modification have
    on the number of species produced during the evolution? Is the neuroevolution
    process able to find a successful maze solver?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在`maze_config.ini`文件中增加`compatibility_disjoint_coefficient`参数，并使用新设置运行实验。这种修改对进化过程中产生的物种数量有何影响？神经进化过程能否找到成功的迷宫解决者？
- en: Increase the population size by 200% (the `pop_size` parameter). Was the neuroevolution
    process able to find a solution in this case, and if so, how many generations
    did it take?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将种群大小增加200%（`pop_size`参数）。在这种情况下，神经进化过程能否找到解决方案？如果能，需要多少代？
- en: Change the seed value of the random number generator (see line 118 of the `maze_experiment.py` file).
    Does the neuroevolution process succeed with this new value?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变随机数生成器的种子值（见`maze_experiment.py`文件的第118行）。使用这个新值，神经进化过程能否成功？
- en: Running the experiment with a hard-to-solve maze configuration
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用难以解决的迷宫配置运行实验
- en: 'The next experiment in this chapter is to run the neuroevolution process to
    find an agent that can solve a maze with a more complex configuration of walls.
    This hard-to-solve maze configuration introduces powerful local fitness optima
    traps and does not have a straightforward route from the start position of the
    agent to the exit area of the maze. You can see the maze configuration in the
    following diagram:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的下一个实验是运行神经进化过程，以找到能够解决具有更复杂墙壁配置的迷宫的代理。这个难以解决的迷宫配置引入了强大的局部适应度最优陷阱，并且从代理的起始位置到迷宫出口区域没有直接的路线。你可以在以下图表中看到迷宫配置：
- en: '![](img/b6a9ca88-aa2a-4fa0-b0b9-976e1312b55a.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b6a9ca88-aa2a-4fa0-b0b9-976e1312b55a.png)'
- en: The hard-to-solve maze configuration
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 难以解决的迷宫配置
- en: The maze configuration has its start position in the bottom-left corner, marked
    with a green circle, and the position of the maze exit point is in the top-left
    corner, marked with a red circle. You can see that, to solve the maze, the navigator
    agent must develop a complex control strategy that allows it to avoid the local
    fitness optima traps around the starting point. The control strategy needs to
    be able to follow an elaborate trajectory from the starting point to the exit,
    which has several turns and more local optima traps.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 迷宫配置的起始位置在左下角，用绿色圆圈标记，迷宫出口点的位置在左上角，用红色圆圈标记。你可以看到，为了解决迷宫，导航代理必须发展一种复杂控制策略，使其能够避开起点的局部适应度最优陷阱。控制策略需要能够遵循从起点到出口的复杂轨迹，该轨迹有几个转弯和更多的局部最优陷阱。
- en: Hyperparameter selection
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超参数选择
- en: For this experiment, we will use the same hyperparameters that we used in the
    simple maze solving experiment. Our idea is to have the same initial conditions
    for the neuroevolutionary algorithm and to see whether it can evolve a successful
    solver agent for a different, more complex maze configuration. This will indicate
    how well the algorithm generalizes using the hyperparameter settings used for
    a different maze configuration.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实验，我们将使用与简单迷宫求解实验中相同的超参数。我们的想法是让神经进化算法具有相同的初始条件，并观察它是否能够进化出一个成功的求解代理代理，用于不同的、更复杂的迷宫配置。这将表明算法使用不同迷宫配置的超参数设置进行泛化的程度。
- en: Working environment setup and experiment runner implementation
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作环境设置和实验运行实现
- en: The setup of the working environment remains the same as for a simple maze navigation
    experiment. The experiment runner implementation also remains the same. We only
    change the file describing the maze environment configuration.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 简单迷宫导航实验的工作环境设置与实验运行实现保持相同。实验运行实现也保持不变。我们只更改描述迷宫环境配置的文件。
- en: Running the hard-to-solve maze navigation experiment
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行难以解决的迷宫导航实验
- en: 'As we mentioned, we will use the same experiment runner implementation and
    the same NEAT hyperparameters settings as in the previous experiment. But we will
    configure the different maze environment as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，我们将使用与之前实验相同的实验运行实现和相同的NEAT超参数设置。但我们将配置不同的迷宫环境如下：
- en: '[PRE29]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After a while, when the experiment is over, we see that even after `500` generations
    of evolution, a successful maze solver has not been found. The best genome obtained
    using the neuroevolution algorithm encodes a bizarre and non-functional controller
    ANN configuration, which is shown in the following diagram:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一段时间，当实验结束后，我们发现即使经过`500`代的进化，仍未找到成功的迷宫求解器。使用神经进化算法获得的最佳基因组编码了一个奇特且非功能性的控制器ANN配置，如下图所示：
- en: '![](img/86d45012-74e5-49fd-b7e1-b5d3cd3ee482.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/86d45012-74e5-49fd-b7e1-b5d3cd3ee482.png)'
- en: ANN configuration controlling the solver of the hard-to-solve maze
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 控制难以解决的迷宫求解器的ANN配置
- en: 'It can be seen in the graph that the rotation of the robot depends only on
    the frontal rangefinder sensor (**RF_FR**), and the linear movement is controlled
    by a combination of several rangefinders and radar sensors. Such control configuration
    leads to simplified linear movements of the robot until a wall is detected in
    front of the robot. Our assumption about motion patterns is confirmed when we
    look at the visualization of the agent evaluation records:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中可以看出，机器人的旋转仅依赖于前视测距传感器（**RF_FR**），而线性运动则由多个测距传感器和雷达传感器的组合控制。这种控制配置导致机器人的线性运动在检测到前方有墙壁之前被简化。当我们查看代理评估记录的可视化时，我们的关于运动模式的假设得到了证实：
- en: '![](img/5c570b8e-b28f-4f8f-afbe-59f83f72ed85.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c570b8e-b28f-4f8f-afbe-59f83f72ed85.png)'
- en: The visualization of solver agents' evaluation records
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 求解代理评估记录的可视化
- en: The visualization of the final positions of the solver agents demonstrates that
    most species are trapped around the start position, where some areas of local
    fitness score optima are located. None of the species could even show a fitness
    score above our threshold (**0.8**). Also, as we mentioned earlier, there are
    clearly distinguishable vertical lines formed by the final positions of the solver
    agents (gray dots creating vertical columns). This confirms our assumption about
    the incorrect configuration of the controller ANN that was encoded by the best
    genome found during the evolutionary process.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 求解代理最终位置的可视化表明，大多数物种被困在起始位置周围，那里有一些局部适应度得分最优区域。没有任何物种能够显示出超过我们阈值（**0.8**）的适应度得分。此外，正如我们之前提到的，求解代理的最终位置形成了明显的垂直线（灰色点形成垂直列）。这证实了我们在进化过程中找到的最佳基因组编码的控制器ANN配置不正确这一假设。
- en: 'The average fitness scores over generations are shown in the following plot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图表中显示了多代平均适应度得分：
- en: '![](img/8988407f-0d34-4c5e-9cb0-823a070d778c.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8988407f-0d34-4c5e-9cb0-823a070d778c.png)'
- en: The average fitness score over generations
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 多代平均适应度得分
- en: In the plot of the average fitness scores, we can see that the neuroevolutionary
    process was able to significantly increase the fitness scores of solver agents
    in the very first generations, but after that it reached a plateau, showing no
    improvements. This means that a further increase in the number of evolutionary
    generations does not make any sense, and other measures need to be taken to improve
    the performance of the neuroevolutionary process.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在平均适应度得分的图表中，我们可以看到神经进化过程能够在第一代中显著提高求解代理的适应度得分，但之后达到了一个平台期，没有显示出任何改进。这意味着增加进化代数数量没有任何意义，需要采取其他措施来提高神经进化过程的表现。
- en: Exercises
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Try to increase the population size by tweaking the `pop_size` parameter in
    the `maze_config.ini` file. Did this help the neuroevolutionary process to evolve
    a successful maze solver?
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试通过调整`maze_config.ini`文件中的`pop_size`参数来增加种群大小。这有助于神经进化过程进化出一个成功的迷宫求解器吗？
- en: This may take a long time to execute.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要很长时间才能执行。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned about a class of planning and control problems
    that use goal-oriented fitness functions that have a deceptive definition landscape.
    In this landscape, there are multiple traps created by the local optima areas
    of the fitness function that mislead the solution search process, which is based
    only on the fitness score calculated as a derivative of the distance from the
    agent to the goal. You have learned that the conventional goal-oriented fitness
    function can help the search process to create a successful maze navigator agent
    for a simple maze configuration, but failed with a more complex maze due to the
    local optima traps.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了一类使用具有欺骗性定义景观的目标导向适应度函数的规划和控制问题。在这个景观中，由适应度函数的局部最优区域创建了多个陷阱，误导了解决搜索过程，该过程仅基于作为代理到目标距离的导数的适应度得分。你了解到传统的目标导向适应度函数可以帮助搜索过程为简单的迷宫配置创建一个成功的迷宫导航代理，但由于局部最优陷阱，在更复杂的迷宫中失败了。
- en: We presented a useful visualization method that allowed us to visualize the
    final positions of all evaluated agents on the maze map. With this visualization,
    you can make assumptions about the performance of the evolutionary process. You
    can then make decisions about changes to the configuration settings that may lead
    to further performance improvements.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提出了一种有用的可视化方法，使我们能够可视化迷宫地图上所有评估代理的最终位置。通过这种可视化，你可以对进化过程的性能做出假设。然后，你可以做出关于配置设置更改的决定，这可能导致进一步的性能提升。
- en: Also, you have learned that when there is a higher chance of fitness function
    convergence in the local optima, the neuroevolution process tends to produce fewer
    species. In extreme cases, it creates only one species, which impedes innovation
    and hinders the evolutionary process. To avoid this, you learned how speciation
    can be boosted by changing the value of the compatibility disjoint coefficient,
    which is used in the calculation of the genome compatibility factor. This coefficient
    controls the weight that will be assigned to the excess or disjoint parts of genomes
    being compared. Higher coefficient values increase the importance of topological
    differences in the compared genomes and allow more diverse genomes to belong to
    the same species.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你已经了解到，当局部最优解中适应度函数收敛的可能性更高时，神经进化过程往往会产生更少的物种。在极端情况下，它只创建一个物种，这阻碍了创新并阻碍了进化过程。为了避免这种情况，你学习了如何通过改变兼容性不交系数的值来加速物种形成，该系数用于计算基因组兼容性因子。这个系数控制着将被分配给比较的基因组中过剩或不交部分的权重。较高的系数值增加了比较基因组中拓扑差异的重要性，并允许更多样化的基因组属于同一物种。
- en: In the next chapter, we will present the NS optimization method, which is better
    at solving deceptive tasks such as maze navigation.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍NS优化方法，该方法在解决诸如迷宫导航等欺骗性任务方面表现更佳。
