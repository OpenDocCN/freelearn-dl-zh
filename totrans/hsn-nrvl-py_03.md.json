["```py\nconfig = neat.Config(neat.DefaultGenome, neat.DefaultReproduction, neat.DefaultSpeciesSet, neat.DefaultStagnation, config_file)\n\n```", "```py\np = neat.Population(config)\n```", "```py\n# Output progress to the stdout\np.add_reporter(neat.StdOutReporter(True)) \nstats = neat.StatisticsReporter()\np.add_reporter(stats)\np.add_reporter(neat.Checkpointer(5))\n```", "```py\nwinner = p.run(eval_genomes, 300)\n```", "```py\nwinner_ann = neat.nn.FeedForwardNetwork.create(winner, config)\n```", "```py\nfor xi in xor_inputs: \n    output = winner_ann.activate(xi)\n    print(xi, output) # print results\n```", "```py\nconfig = neat.Config(neat.DefaultGenome, neat.DefaultReproduction, \n      neat.DefaultSpeciesSet, neat.DefaultStagnation, config_file)\n```", "```py\npop = neat.Population(config)\n```", "```py\ndef make_env(): \n    return gym.make(\"CartPole-v0\")\n\ndef make_net(genome, config, bs): \n    return RecurrentNet.create(genome, config, bs)\n\ndef activate_net(net, states): \n    outputs = net.activate(states).numpy()\n    return outputs[:, 0] > 0.5\n\nevaluator = MultiEnvEvaluator( \n    make_net, activate_net, make_env=make_env, \n    max_env_steps=max_env_steps\n)\n\ndef eval_genomes(genomes, config): \n    for _, genome in genomes:\n        genome.fitness = evaluator.eval_genome(genome, config)\n```", "```py\nstats = neat.StatisticsReporter()\npop.add_reporter(stats)\nreporter = neat.StdOutReporter(True)\npop.add_reporter(reporter)\nlogger = LogReporter(\"neat.log\", evaluator.eval_genome)\npop.add_reporter(logger)\n```", "```py\nwinner = pop.run(eval_genomes, 100)\n```", "```py\nwinner_ann = RecurrentNet.create(genome, config, bs)\n```", "```py\naction = winner_ann.activate(states).numpy()\n```", "```py\nparams = NEAT.Parameters()\nparams.PopulationSize = 100\n# The rest of the settings omitted for brevity\n```", "```py\ng = NEAT.Genome(0, 3, 0, 1, False, \n      NEAT.ActivationFunction.UNSIGNED_SIGMOID,\n      NEAT.ActivationFunction.UNSIGNED_SIGMOID, 0, params, 0)\npop = NEAT.Population(g, params, True, 1.0, i)\n```", "```py\nfor generation in range(1000):\n    # Evaluate genomes\n    genome_list = NEAT.GetGenomeList(pop)\n    fitnesses = EvaluateGenomeList_Serial(genome_list, \n                            evaluate_xor, display=False)\n    [genome.SetFitness(fitness) for genome, fitness in zip(genome_list, fitnesses)]\n\n    # Evaluate fitness value against specific threshold\n    best = max(fitness_list)\n    if best > 15.0:\n        # get the phenotype of a best organism\n        net = NEAT.NeuralNetwork()\n        pop.Species[0].GetLeader().BuildPhenotype(net)\n        # return the fitness and phenotype ANN of the winner\n        return (best, net)\n\n    # Next epoch\n    pop.Epoch()\n```", "```py\nnet.Input( [ 1.0, 0.0, 1.0 ] )\nnet.Activate()\noutput = net.Output()\n```", "```py\n$ pip install --user pipenv\n```", "```py\n$ cd my_project_folder\n$ pipenv install <package>\n```", "```py\n$ pip install virtualenv\n```", "```py\n$ virtualenv --version\n```", "```py\n$ cd my_project_folder\n$ virtualenv venv\n```", "```py\n$ source /path/to/ENV/bin/activate\n```", "```py\n$ pip install sqlite\n```", "```py\n$ cd my_project_folder\n$ conda create --name ENV_NAME <package>\n```", "```py\n$ conda env list\n```", "```py\n$ conda activate ENV_NAME\n```", "```py\n$ conda deactivate\n```", "```py\n$ conda install sqlite\n```"]