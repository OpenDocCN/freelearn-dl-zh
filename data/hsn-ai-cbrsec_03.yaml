- en: Setting Up Your AI for Cybersecurity Arsenal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的 AI 网络安全武器库
- en: This chapter introduces the main software requirements and their configurations.
    You will learn how to feed a knowledge base with samples of malicious code that
    will be passed as input to AI procedures. IPython notebooks will be introduced
    for the interactive execution of Python tools and commands.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了主要的软件要求及其配置。你将学习如何通过恶意代码样本喂养知识库，这些样本将作为输入传递给 AI 程序。还将介绍 IPython notebook，用于交互式执行
    Python 工具和命令。
- en: 'The chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting to know Python for AI and cybersecurity
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Python 在 AI 和网络安全中的应用
- en: Enter Anaconda—the data scientist's environment of choice
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入 Anaconda——数据科学家首选的开发环境
- en: Playing with Jupyter Notebook
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩转 Jupyter Notebook
- en: Feeding your AI arsenal—where to find data and malicious samples
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 喂养你的 AI 武器库——在哪里可以找到数据和恶意样本
- en: Getting to know Python for AI and cybersecurity
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Python 在 AI 和网络安全中的应用
- en: Among all the languages ​​that can be used to program AI tools and algorithms,
    Python is the one that, in recent years, has shown to be constantly growing and
    is appreciated by programmers, new and old. Despite the competition being fierce,
    as languages ​​such as R, as well as Java, can boast tens of thousands of developers
    in their ranks, Python has gained the reputation of being a language of choice
    not only for **data science** but also (and above all) for **machine learning** (**ML**), **deep
    learning** (**DL)**,and more generally, for the development of **artificial intelligence**
    (**AI**) algorithms.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有可以用于编程 AI 工具和算法的语言中，Python 是近年来持续增长并受到新老程序员青睐的语言。尽管竞争激烈，如 R 语言和 Java 都拥有成千上万的开发者，Python
    已经获得了作为 **数据科学** 和 (最重要的) **机器学习** (**ML**)、**深度学习** (**DL**)，以及更广泛的 **人工智能**
    (**AI**) 算法开发首选语言的声誉。
- en: The success of Python in these areas should not be surprising. Python was originally
    developed for programming numerical calculations, but was then extended to non-specialist
    areas, assuming the form of a general-purpose programming language, alongside
    better-known languages ​​such as C++ and Java.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在这些领域的成功并不令人惊讶。Python 最初是为编写数值计算程序而开发的，但后来扩展到非专业领域，成为一种通用编程语言，与 C++ 和
    Java 等更为人熟知的语言并列。
- en: 'Python''s success is due to a number of reasons, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的成功归因于以下几个原因：
- en: '**Easy to learn**: The language learning curve is indeed much less steep than
    other languages, ​​such as C++ and Java.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于学习**：语言学习曲线的陡峭程度确实比其他语言，如 C++ 和 Java 要低得多。'
- en: '**Speeding up both the code prototyping and code refactoring processes**: Thanks
    to a clean design and clear syntax, programming in Python is much easier than
    other languages. It is also much easier to debug code. It is not uncommon for
    prototypes of programs developed in Python to be released for operation without
    the need for further modifications. These characteristics are essential in areas
    such as data science and AI. Sectors characterized by the need to quickly prototype
    new features and refactor old ones, without having to waste time debugging legacy
    code, are in need of a means to speed up code prototyping and refactoring.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加速代码原型开发与代码重构过程**：得益于简洁的设计和清晰的语法，Python 编程比其他语言容易得多。调试代码也变得更加容易。用 Python
    开发的程序原型在没有进一步修改的情况下发布并投入运行并不罕见。这些特性在数据科学和 AI 等领域至关重要。这些领域的特点是需要快速原型化新功能并重构旧功能，而不必浪费时间调试遗留代码，因此急需一种加速代码原型开发和重构的方法。'
- en: '**Interpreted language and object orientation**: The ability to write code
    in the form of a script that can be started directly on the command line, or better
    still, in interactive mode (as we will see later), without the need to proceed
    with the compilation in executable format, dramatically accelerates the process
    of development, and the testing of applications. Object orientation also facilitates
    the development of APIs and libraries of reusable functionalities, ensuring the
    reliability and robustness of the code.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释性语言与面向对象编程**：能够以脚本的形式编写代码，该代码可以直接在命令行上启动，或者更好的是，以交互模式运行（如我们稍后所见），无需进行可执行格式的编译，这大大加速了开发过程和应用程序测试。面向对象编程还促进了
    API 和可重用功能库的开发，确保代码的可靠性和健壮性。'
- en: '**The wide availability of open source libraries that expand programming features**:
    The benefits we have talked about so far translate into the availability of numerous
    libraries of high-level functions, freely usable by analysts and developers, and
    made available by the large Python community. These function libraries can be
    easily integrated with each other by virtue of the clean language design, which
    facilitates the development of APIs that can be recalled by the developers.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源库的广泛可用性，扩展了编程功能**：到目前为止我们讨论的好处，转化为大量高级函数库的可用性，这些库可以自由供分析师和开发人员使用，并由庞大的Python社区提供。这些函数库可以轻松地相互集成，得益于简洁的语言设计，这促进了API的开发，开发人员可以方便地调用这些API。'
- en: Now, let's delve deeper into the most common AI programming libraries available
    in Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解Python中最常用的AI编程库。
- en: Python libraries for AI
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的AI库
- en: As anticipated, there are numerous libraries available in Python that can be
    used in the field of data science and ML, including DL and **reinforcement learning**
    (**RL**).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，Python中有许多可用于数据科学和机器学习（ML）领域的库，包括深度学习（DL）和**强化学习**（**RL**）。
- en: In the same way, there are many functions of graphical representation and reporting.
    In the following sections, we will analyze the characteristics of these libraries.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也有许多图形表示和报告功能。接下来的章节，我们将分析这些库的特点。
- en: NumPy as an AI building block
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy作为AI的构建模块
- en: Of all the Python libraries dedicated to data science and AI, there is no doubt
    that NumPy holds a privileged place. Using the functionalities and APIs implemented
    by NumPy, it is possible to build algorithms and tools for ML from scratch.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有专门用于数据科学和AI的Python库中，毫无疑问，NumPy占据了一个特殊的位置。利用NumPy实现的功能和API，可以从零开始构建机器学习算法和工具。
- en: Of course, having specialized libraries available for AI (such as the `scikit-learn`
    library) accelerates the process of the development of AI and ML tools, but to
    fully appreciate the advantages deriving from the use of such higher-level libraries,
    it is useful to understand the building blocks on which they are built. This is
    why knowledge of the basic concepts of NumPy is helpful in this regard.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，拥有专门的AI库（例如`scikit-learn`库）可以加速AI和机器学习工具的开发过程，但为了充分理解使用这些高级库带来的优势，理解它们构建的基础组件是非常有用的。这就是为什么了解NumPy的基本概念在这方面非常重要。
- en: NumPy multidimensional arrays
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy多维数组
- en: '**NumPy** was created to solve important scientific problems, which include
    **linear algebra** and **matrix calculations**. It offers a particularly **optimized
    version, **compared to the corresponding native versions of data structures offered
    by the Python language, such as lists of arrays and making **multidimensional**
    array objects, known as `ndarrays`, available. In fact, an object of the `ndarray`
    type allows the acceleration of operations to reach speeds of up to 25 times faster
    compared to traditional `for` loops, which is necessary to manage access to data
    stored in a traditional Python list.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**NumPy**的创建是为了解决重要的科学问题，其中包括**线性代数**和**矩阵计算**。与Python语言本身提供的数组列表等数据结构相比，它提供了特别**优化的版本**，使得**多维**数组对象`ndarrays`得以使用。实际上，`ndarray`类型的对象使得操作加速，速度可达到传统`for`循环的25倍，这对于管理存储在传统Python列表中的数据访问非常必要。'
- en: Moreover, NumPy allows the management of operations on matrices, which is particularly
    useful for the implementation of ML algorithms. Unlike `ndarray` objects, matrices
    are objects that can take only two dimensions and represent the main data structures
    used in linear algebra.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，NumPy还允许对矩阵进行操作管理，这对于实现机器学习算法特别有用。与`ndarray`对象不同，矩阵是只能具有二维的对象，表示线性代数中使用的主要数据结构。
- en: 'Here are some examples of defining NumPy objects:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些定义NumPy对象的示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Matrix operations with NumPy
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy进行矩阵操作
- en: As anticipated, matrices and the operations executed on them are of particular
    importance in the field of ML, and, more generally, they are used to conveniently
    represent the data to be fed to AI ​​algorithms.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，矩阵及其上的操作在机器学习领域尤其重要，更一般来说，它们用于方便地表示需要输入AI算法的数据。
- en: Matrices are particularly useful in the management and representation of large
    amounts of data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵在管理和表示大量数据时特别有用。
- en: The notation itself is commonly used to identify the elements of a matrix, making
    use of positional indexes that allow the execution of consistent, rapid fashion
    operations, and calculations that concern either the whole matrix or just specific
    subsets. For example, the ![](img/0c6fe151-0486-488f-9b59-912d58501543.png) element is
    easily identified within the matrix, crossing row ![](img/afbc1ec2-ac8d-4274-ba4a-0bb61100ef01.png) and
    column ![](img/8a391b3a-1f5d-4dfa-8678-f800dea8c887.png).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 符号本身通常用于标识矩阵中的元素，利用位置索引可以执行一致的、快速的操作，并进行涉及整个矩阵或特定子集的计算。例如，矩阵中的![](img/0c6fe151-0486-488f-9b59-912d58501543.png)元素可以轻松识别，交叉行![](img/afbc1ec2-ac8d-4274-ba4a-0bb61100ef01.png)与列![](img/8a391b3a-1f5d-4dfa-8678-f800dea8c887.png)。
- en: A special matrix, consisting of only one row (and several columns) is identified
    as a **vector***. *Vectors can be represented in Python as objects of a `list `type.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由一行（和多列）组成的特殊矩阵被称为**向量**。*向量可以在Python中表示为`list`类型的对象。
- en: However, the particular rules established by **linear algebra** should be taken
    into account when performing operations between **matrices and vectors**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在进行**矩阵与向量**之间的操作时，应考虑**线性代数**中规定的特定规则。
- en: 'The basic operations that can be performed on matrices are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对矩阵执行的基本操作如下：
- en: Addition
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法
- en: Subtraction
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减法
- en: Scalar multiplication (resulting in a constant value multiplied for each matrix
    element)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量乘法（导致每个矩阵元素乘以一个常数值）
- en: If such operations on matrices are relatively simple to accomplish, and are
    required only as a **necessary precondition** that the matrices that add or subtract
    from each other are of the **same size, then **the result of the addition or subtraction
    of two matrices is a **new matrix** whose elements are the result of the sum of
    corresponding elements in row and column order.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对矩阵进行这样的操作相对简单，并且仅作为**必要的前提条件**，要求相加或相减的矩阵必须是**相同大小**，那么两个矩阵的加法或减法结果将是一个**新矩阵**，其元素是对应元素按行列顺序求和的结果。
- en: When dealing with the **product** operation between matrices or between vectors
    and matrices, the rules of linear algebra are partly different, since, for example,
    the **commutative property** is not applicable as it is in the case of the product
    of two scalars.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行矩阵与矩阵或矩阵与向量的**乘法**操作时，线性代数的规则部分不同，因为例如**交换律**不像在两个标量相乘的情况下那样适用。
- en: 'In fact, while in the case of the product of two numbers among them, the order
    of factors does not change the result of multiplication (that is, *2 x 3 = 3 x
    2*), in the case of the product of two matrices, **the order is important**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在两个数相乘的情况下，因子顺序不影响乘积结果（也就是说，*2 x 3 = 3 x 2*），但在两个矩阵相乘的情况下，**顺序非常重要**：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `X`represents a **matrix** and `a` represents a **vector** of coefficients.
    Moreover, it is **not always** possible to **multiply two matrices**, as in the
    case of two matrices with **incompatible dimensions**.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`X`代表**矩阵**，`a`代表**系数向量**。此外，**并非总是**可以**乘法两个矩阵**，例如当两个矩阵的**维度不兼容**时。
- en: 'For this reason, the `numpy` library provides the `dot()` function to calculate
    the product of two matrices between them (usable whenever this operation is possible):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`numpy`库提供了`dot()`函数来计算两个矩阵之间的乘积（只要这个操作是可能的）：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, we calculate the product between matrix `X`and vector
    `a` using the `np.dot()` function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`np.dot()`函数计算矩阵`X`和向量`a`的乘积。
- en: 'This product is the expression of the model:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该产品是模型的表达：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It represents **one of the most basic models** used in ML to associate a set
    of **weights** (`a`) to an **input data matrix** (`X`) in order to obtain the
    estimated **values** (`y`) as output.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它代表了**机器学习中最基本的模型之一**，用于将一组**权重**(`a`)与**输入数据矩阵**(`X`)相关联，从而获得估算的**输出值**(`y`)。
- en: Implementing a simple predictor with NumPy
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy实现一个简单的预测器
- en: 'To fully understand the use of the `dot()` method of NumPy in matrix multiplication
    operations, we can try to implement a **simple predictor** from scratch, to predict
    future values starting from a set of multiple inputs and on the basis of relative
    weights, using the product between matrices and vectors:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解NumPy中`dot()`方法在矩阵乘法操作中的应用，我们可以尝试从零开始实现一个**简单的预测器**，根据一组多个输入和相对权重，通过矩阵与向量之间的乘积来预测未来的值：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Scikit-learn
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scikit-learn
- en: 'One of the best and most used ML libraries is definitely the `scikit-learn`
    library. First developed in 2007, the `scikit-learn` library provides a series
    of models and algorithms that are easily reusable in the development of customized
    solutions, which makes use of the main predictive methods and strategies, including
    the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳且最常用的机器学习库之一无疑是`scikit-learn`库。`scikit-learn`库最早于2007年开发，提供了一系列易于重用的模型和算法，用于定制解决方案的开发，涵盖了包括以下在内的主要预测方法和策略：
- en: Classification
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类
- en: Regression
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归
- en: Dimensionality reduction
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降维
- en: Clustering
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚类
- en: 'The list does not end here; in fact, `scikit-learn` also provides ready-to-use
    modules that allow the following tasks:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并没有结束，事实上，`scikit-learn`还提供了现成的模块，允许执行以下任务：
- en: Data preprocessing
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据预处理
- en: Feature extraction
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征提取
- en: Hyperparameter optimization
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超参数优化
- en: Model evaluation
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型评估
- en: The particularity of `scikit-learn` is that it uses the `numpy` library in addition
    to the SciPy library for scientific computing. As we have seen, NumPy allows the
    optimization of calculation operations performed on large datasets, using multidimensional
    arrays and matrices.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`scikit-learn`的特点在于，它除了使用SciPy库进行科学计算外，还使用了`numpy`库。正如我们所见，NumPy允许通过多维数组和矩阵来优化在大数据集上执行的计算操作。'
- en: Among the advantages of `scikit-learn`, we must not forget that it provides
    developers with a very clean **application programming interface** (**API**),
    which makes the development of customized tools from the classes of the library
    relatively simple.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`scikit-learn`的优势中，我们不能忘记它为开发人员提供了一个非常简洁的**应用程序编程接口**（**API**），使得从库的类中开发定制化工具变得相对简单。
- en: As an example of using the **predictive analytics** templates available in `scikit-learn`,
    we will show how to perform a prediction on training data (stored in the `X` matrix)
    using the **linear regression** model, based on a `y` weight vector.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用`scikit-learn`中**预测分析**模板的示例，我们将展示如何基于`y`权重向量，使用**线性回归**模型对训练数据（存储在`X`矩阵中）进行预测。
- en: 'Our goal will be to use the `fit()` and `predict()` methods implemented in
    the `LinearRegression` class:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是使用在`LinearRegression`类中实现的`fit()`和`predict()`方法：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Upon execution, the script produces the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，脚本会输出以下内容：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's now continue with the Matplotlib and Seaborn libraries.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续学习Matplotlib和Seaborn库。
- en: Matplotlib and Seaborn
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib和Seaborn
- en: One of the analytical tools used the most by analysts in AI and data science
    consists of the **graphical representation** of data. This allows a preliminary
    activity of data analysis known as **exploratory data analysis** (**EDA**). By
    means of EDA, it is possible to identify, from a simple visual survey of the data,
    the possibility of associating them with regularities or **better predictive models**
    than others.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: AI和数据科学分析师最常用的分析工具之一就是**数据的图形表示**。这是一项被称为**探索性数据分析**（**EDA**）的初步数据分析活动。通过EDA，可以通过对数据进行简单的视觉调查，识别出将其与规律性或**更好的预测模型**相关联的可能性。
- en: Among graphical libraries, without a doubt, the best known and most used is
    the `matplotlib` library, through which it is possible to create graphs and images
    of the data being analyzed in a very simple and intuitive way.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在图形库中，毫无疑问，最著名且最常用的是`matplotlib`库，通过该库可以非常简单直观地创建图表和数据图像。
- en: '**Matplotlib** is basically a **data plotting tool** inspired by MATLAB, and
    is similar to the `ggplot` tool used in R.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Matplotlib**基本上是一个受MATLAB启发的**数据绘图工具**，与R中使用的`ggplot`工具类似。'
- en: 'In the following code, we show a simple example of using the `matplotlib` library,
    using the `plot()` method to plot input data obtained by the `arange()` method
    (array range) of the `numpy` library:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们展示了一个使用`matplotlib`库的简单示例，使用`plot()`方法绘制由`numpy`库的`arange()`方法（数组范围）获取的输入数据：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In addition to the `matplotlib` library in Python, there is another well-known
    visualization tool among data scientists called **Seaborn**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Python中的`matplotlib`库，还有另一个在数据科学家中广为人知的可视化工具，叫做**Seaborn**。
- en: Seaborn is an extension of Matplotlib, which makes various visualization tools available for
    data science, simplifying the analyst's task and relieving them of the task of
    having to program the graphical data representation tools from scratch, using
    the basic features offered by `matplotlib` and `scikit-learn`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 是 Matplotlib 的扩展，它为数据科学提供了各种可视化工具，简化了分析师的工作，使他们无需从头编写图形数据表示工具，利用 `matplotlib`
    和 `scikit-learn` 提供的基本功能。
- en: Pandas
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas
- en: The last (but not least) among Python's most used libraries that we'll look
    at here, is the `pandas` package, which helps to simplify the ordinary activity
    of data cleaning (an activity that absorbs most of the analyst's time) in order
    to proceed with the subsequent data analysis phase.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 最常用的库中，最后（但并非最不重要的）是 `pandas` 包，它有助于简化数据清理这一日常活动（这一活动占据了分析师大部分时间），以便进行后续的数据分析阶段。
- en: The implementation of `pandas` is very similar to that of the `DataFrame` package
    in R; DataFrame is nothing but a tabular structure used to store data in the form
    of a table, on which the columns represent the variables, while the rows represent
    the data itself.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 的实现与 R 中的 `DataFrame` 包非常相似；`DataFrame` 实际上就是一种表格结构，用于以表格形式存储数据，其中列表示变量，行表示数据本身。'
- en: In the following example, we will show a typical use of a DataFrame, obtained
    as a result of the instantiation of the `DataFrame` class of `pandas`, which receives,
    as an input parameter, one of the datasets (the `iris` dataset) available in `scikit-learn`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将展示一个典型的 `DataFrame` 的使用示例，该 `DataFrame` 是通过实例化 `pandas` 中的 `DataFrame`
    类获得的，输入参数是 `scikit-learn` 中的一个数据集（`iris` 数据集）。
- en: 'After having instantiated the `iris_df` object of the  `DataFrame` type, the
    `head()` and `describe()` methods of the `pandas` library are invoked, which shows
    us the first five records of the dataset, respectively, and some of the main statistical
    measures calculated in the dataset:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例化 `DataFrame` 类型的 `iris_df` 对象之后，调用 `pandas` 库的 `head()` 和 `describe()` 方法，分别显示数据集的前五条记录和数据集中的一些主要统计量：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Python libraries for cybersecurity
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全的 Python 库
- en: Python is not only one of the best languages for data science and AI, but also
    the language preferred by penetration testers and malware analysts (along with
    low-level languages, such as C and Assembly).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Python 不仅是数据科学和人工智能领域最好的语言之一，还是渗透测试员和恶意软件分析师的首选语言（与 C 和汇编等低级语言一起使用）。
- en: In Python, there are an infinite number of libraries ready for use, which simplify
    the daily activities of researchers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，有无数现成的库可以使用，它们简化了研究人员的日常工作。
- en: Next, we will analyze some of the most common and the most used of them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将分析其中一些最常见和最常用的库。
- en: Pefile
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pefile
- en: The Pefile library is very useful for analyzing Windows executable files, especially
    during the phases of **static malware analysis**, looking for possible indications
    of compromise or the presence of malicious code in executables. In fact, Pefile
    makes it very easy to analyze the **Portable Executable** (**PE**) file format,
    which represents the standard for the object files (contained or retrievable as
    libraries of external executable functions) on the Microsoft platform.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Pefile 库对于分析 Windows 可执行文件非常有用，特别是在 **静态恶意软件分析** 阶段，寻找可能的妥协迹象或可执行文件中恶意代码的存在。实际上，Pefile
    使得分析 **可移植执行文件** (**PE**) 文件格式变得非常容易，而这种格式是 Microsoft 平台上对象文件（作为外部可执行功能库包含或可获取的）的标准。
- en: 'So, not only the classic `.exe` files, but also the `.dll` libraries and `.sys`
    device drivers, follow the PE file format specification. The installation of the
    Pefile library is very simple; it is sufficient to use the `pip` command as used
    in the following example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不仅是经典的 `.exe` 文件，还有 `.dll` 库和 `.sys` 设备驱动程序，都遵循 PE 文件格式规范。安装 Pefile 库非常简单，只需使用如下示例中的
    `pip` 命令即可：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the installation is complete, we can test the library with a simple script
    such as the following, which loads the executable `notepad.exe` into runtime memory,
    and then extracts from its executable image some of the most relevant information
    saved in the relative PE file format fields:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以用一个简单的脚本测试该库，例如以下脚本，它将可执行文件 `notepad.exe` 加载到运行时内存中，然后从其可执行映像中提取一些在相关
    PE 文件格式字段中保存的最重要信息：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Volatility
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 波动性
- en: Another tool widely used by malware analysts is **volatility**, which allows
    the analysis of the runtime memory of an executable process, highlighting the
    presence of possible malware code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个被恶意软件分析师广泛使用的工具是 **volatility**，它允许分析可执行进程的运行时内存，突出显示可能存在的恶意软件代码。
- en: Volatility is a Python-programmable utility, which is often installed by default
    in distributions for malware analysis and pentesting, such as Kali Linux. Volatility
    allows the extraction of important information about processes (such as API hooks,
    network connections and kernel modules) directly from memory dumps, providing
    the analyst with a suite of programmable tools using Python.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Volatility 是一个可编程的 Python 工具，通常在恶意软件分析和渗透测试的发行版中默认安装，如 Kali Linux。Volatility
    允许从内存转储中提取关于进程的重要信息（如 API 钩子、网络连接和内核模块），为分析师提供一套使用 Python 编程的工具。
- en: These tools allow the extraction from the memory dumps of all the processes
    running on the system and any relevant information about injected **Dynamic-Link
    Libraries** (**DLLs**), along with the presence of rootkits, or more generally,
    the presence of **hidden processes** within the runtime memory, which easily escapes
    the detection of common antivirus softwares.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具允许从内存转储中提取系统上运行的所有进程以及关于注入的 **动态链接库**（**DLLs**）的相关信息，同时可以检测到 rootkit 的存在，或者更广泛地说，可以发现
    **隐藏进程** 在运行时内存中的存在，这些进程常常逃脱常见杀毒软件的检测。
- en: Installing Python libraries
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python 库
- en: We have seen some of the basic Python libraries, which are useful for our analysis
    purposes. How do we install these libraries in our development environment?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到一些基本的 Python 库，它们对我们的分析工作很有帮助。那么我们如何在开发环境中安装这些库呢？
- en: Being Python libraries, it is obviously possible to proceed with the installation
    simply by following the traditional utilities provided by the language; in particular,
    using the `pip` command, or launching the `setup.py`provided by each library package.
    However, there is a much easier way to proceed with the configuration of an analysis
    and development environment in the field of AI and data science, using Anaconda,
    as we will see in the upcoming sections.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Python 库，显然可以通过按照语言提供的传统工具进行安装；特别是，使用 `pip` 命令，或者启动每个库包提供的 `setup.py`。然而，在
    AI 和数据科学领域中，使用 Anaconda 配置分析和开发环境有一种更简单的方法，正如我们将在接下来的章节中看到的那样。
- en: Enter Anaconda – the data scientist's environment of choice
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入 Anaconda —— 数据科学家的首选环境
- en: Given the large number of available Python libraries, their installation is
    often particularly tedious (if not boring), as well as difficult, especially for
    those who are beginning their approach to the world of data science and AI.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可用的 Python 库数量庞大，它们的安装往往特别繁琐（如果不是枯燥无味的话），尤其对于那些刚接触数据科学和 AI 领域的人来说，安装过程尤其困难。
- en: To facilitate the setup of an already preconfigured development environment,
    collections of packages and libraries, such as Anaconda ([http://www.anaconda.com/download/](http://www.anaconda.com/download/))
    are made available. This allows quick access to the most used tools and libraries,
    thus speeding up development activities, without the need to waste time solving
    problems with dependencies between packages, or installation issues with the various
    operating systems.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化已经预配置的开发环境的设置，像 Anaconda ([http://www.anaconda.com/download/](http://www.anaconda.com/download/))
    这样的库和工具包集合被提供出来。这使得可以快速访问最常用的工具和库，从而加快开发活动，而无需浪费时间解决包之间的依赖问题，或与不同操作系统的安装问题。
- en: While I'm writing this, the latest available version of Anaconda released is
    5.3.0 (available for download at [https://www.anaconda.com/anaconda-distribution-5-3-0-released/](https://www.anaconda.com/anaconda-distribution-5-3-0-released/)).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我写这篇文章时，最新发布的 Anaconda 版本是 5.3.0（可以从[https://www.anaconda.com/anaconda-distribution-5-3-0-released/](https://www.anaconda.com/anaconda-distribution-5-3-0-released/)下载）。
- en: 'You can choose the installation distribution for your platform of choice, whether
    it is Windows, Linux, or macOS, 32-bit or 64-bit or Python 3.7 or 2.7, as shown
    in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择适合你平台的安装发行版，无论是 Windows、Linux 还是 macOS，32 位还是 64 位，或者 Python 3.7 还是 2.7，如下图所示：
- en: '![](img/6dcb7f19-35fd-4f4d-b1f5-77830903a125.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6dcb7f19-35fd-4f4d-b1f5-77830903a125.png)'
- en: Anaconda Python advantages
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Anaconda Python 优势
- en: 'Anaconda is a collection of over 700 packages developed in Python, among which
    are the data analysis and ML libraries we talked about in the previous paragraphs,
    among many others:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 是一个由 700 多个 Python 开发包组成的集合，其中包括我们在前面几段中提到的数据分析和机器学习库，还有许多其他包：
- en: NumPy
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy
- en: SciPy
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy
- en: Scikit-learn
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scikit-learn
- en: Pandas
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas
- en: Matplotlib
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib
- en: In addition, Anaconda allows you to configure custom environments, within which
    you can install specific versions not only of Python but also packages and libraries
    used for development.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Anaconda 允许您配置自定义环境，在这些环境中，您可以安装特定版本的 Python，以及开发所需的包和库。
- en: Conda utility
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conda 工具
- en: Anaconda provides a very powerful utility, conda. Through conda, it is possible
    to manage and update already installed packages, or install new packages, as well
    as to create custom environments in the easiest possible way.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 提供了一个非常强大的工具，conda。通过 conda，您可以管理和更新已安装的包，或安装新包，还可以以最简单的方式创建自定义环境。
- en: 'To access the conda help menu, run the following command from Command Prompt:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 conda 帮助菜单，请从命令提示符运行以下命令：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Installing packages in Anaconda
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Anaconda 中安装包
- en: 'With the conda utility, it is possible to install new packages not included
    in the collection of pre-installed packages. To proceed with the installation
    of a new package, simply execute the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 conda 工具，可以安装预安装包集合中未包含的新包。要安装新包，只需执行以下命令：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The command being executed will search among the packages contained in the online
    repository of Anaconda Continuum Analytics. Remember that it is always possible
    to proceed with the traditional methods of installation, by resorting to the `pip
    install` commands or by launching the `setup.py` file contained in the package.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正在执行的命令将在 Anaconda Continuum Analytics 的在线仓库中搜索包。请记住，始终可以通过传统的安装方法进行操作，使用`pip
    install`命令或启动包中的`setup.py`文件。
- en: Obviously, in this case, we will have to worry about solving all the possible
    dependencies and compatibility problems between versions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在这种情况下，我们必须担心解决版本之间所有可能的依赖关系和兼容性问题。
- en: Creating custom environments
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义环境
- en: As mentioned, one of the strengths of Anaconda is its ability to create custom
    environments, within which we can install specific software versions of both Python
    and of the various packages. Anaconda is in fact usually available with the pre-installed
    versions of Python 2.7 and Python 3.7\. You can decide to combine specific versions
    of Python, without incurring the risk of corrupting the default environments.
    To achieve this, you’ll need to create custom environments.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Anaconda 的一个优势是它能够创建自定义环境，在这些环境中，我们可以安装特定版本的 Python 以及各种包。事实上，Anaconda
    通常预装了 Python 2.7 和 Python 3.7 的版本。您可以选择结合特定版本的 Python，而不会破坏默认环境。为此，您需要创建自定义环境。
- en: 'Let’s assume we want to create a custom environment in which we would like
    to install the version of Python 3.5 (or another version). Just invoke the conda
    utility as in the following example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要创建一个自定义环境，在其中安装 Python 3.5（或其他版本）。只需像以下示例一样调用 conda 工具：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At this point, `conda` proceeds with the creation and configuration of the
    new custom environment named `py35`, in which the version of Python 3.5 is installed.
    To activate the newly created environment, just run the following command from
    Command Prompt:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`conda` 将创建并配置名为`py35`的新自定义环境，其中安装了 Python 3.5 版本。要激活新创建的环境，只需从命令提示符运行以下命令：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: From now on, all the commands launched will be executed in the `py35` custom
    environment.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，所有启动的命令都将在`py35`自定义环境中执行。
- en: Some useful Conda commands
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些有用的 Conda 命令
- en: 'Some of the useful Conda commands are as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的 Conda 命令如下：
- en: 'To activate the newly created `py35` custom environment, run the following
    command:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要激活新创建的`py35`自定义环境，请运行以下命令：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Install packages in a specific environment by executing the following commands:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过执行以下命令在特定环境中安装包：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'List the installed packages of a specific environment by running the following
    command:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行以下命令列出特定环境中已安装的包：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Update Anaconda with the following commands:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令更新 Anaconda：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Python on steroids with parallel GPU
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强化版 Python 与并行 GPU
- en: To fully exploit the potential of some ML libraries, and especially DL, it is
    necessary to deploy dedicated hardware that includes the use of **graphics processing
    units** (**GPU**s) in addition to traditional CPUs. As current GPUs are, in fact,
    optimized to perform parallel calculations, this feature is very useful for the
    effective execution of many DL algorithms.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用某些机器学习库，尤其是深度学习（DL），需要部署专用硬件，包括使用除传统 CPU 外的**图形处理单元**（**GPU**）。由于当前的 GPU
    确实经过优化，能够执行并行计算，因此这一特性对许多 DL 算法的高效执行非常有用。
- en: 'Reference hardware equipment could be the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 参考硬件设备如下：
- en: CPU Intel Core i5 6^(th) Generation or higher (or AMD equivalent)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 英特尔 Core i5 第六代或更高版本（或 AMD 同等产品）
- en: 8 GB RAM as a minimum (16 GB or higher is recommended)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低 8 GB 内存（推荐 16 GB 或更高）
- en: GPU  NVIDIA GeForce GTX 960 or higher (visit [https://developer.nvidia.com/cuda-gpus](https://developer.nvidia.com/cuda-gpus)
    for more info)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU  NVIDIA GeForce GTX 960 或更高版本（更多信息请访问 [https://developer.nvidia.com/cuda-gpus](https://developer.nvidia.com/cuda-gpus)）
- en: Linux operating system (for example Ubuntu) or Microsoft Windows 10
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 操作系统（例如 Ubuntu）或 Microsoft Windows 10
- en: By leveraging the Numba compiler provided by Anaconda, you can compile the Python
    code and run it on CUDA-capable GPUs.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 Anaconda 提供的 Numba 编译器，你可以将 Python 代码编译并在支持 CUDA 的 GPU 上运行。
- en: For further information, please refer to the website of your GPU manufacturer
    and the Numba documentation ([https://numba.pydata.org/numba-doc/latest/user/index.html](https://numba.pydata.org/numba-doc/latest/user/index.html)).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参考你 GPU 制造商的官方网站以及 Numba 文档（[https://numba.pydata.org/numba-doc/latest/user/index.html](https://numba.pydata.org/numba-doc/latest/user/index.html)）。
- en: Playing with Jupyter Notebooks
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转 Jupyter Notebooks
- en: Among the most useful tools for the developer, there is undoubtedly the **Jupyter
    Notebook**, which allows, in a single document, the integration of both the Python
    code and the result of its execution, including images and graphics. In this way,
    it is possible to receive immediate feedback on the development activity in progress,
    managing the various phases of programming in an iterative manner.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者最常用的工具中，毫无疑问**Jupyter Notebook**是其中之一，它允许在一个文档中集成 Python 代码及其执行结果，包括图像和图形。通过这种方式，可以在开发活动中获得即时反馈，以迭代的方式管理编程的各个阶段。
- en: 'Inside the Jupyter Notebook, it is possible to recall the various specific
    libraries installed in a custom environment. Jupyter is a web-based utility, so
    to run the notebook you need to run the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter Notebook 中，可以调用在自定义环境中安装的各种特定库。Jupyter 是一个基于网页的工具，因此要运行笔记本，需执行以下命令：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It is also possible to specify the listening port of the service, using the
    `port` parameter:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`port`参数指定服务的监听端口：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this way, the service will be started on the listening port `9000` (instead
    of the default `8888`).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，服务将在`9000`端口启动（而不是默认的`8888`端口）。
- en: Jupyter is among the packages that come pre-installed with Anaconda; it is not
    necessary to install the software as it is readily available for use.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 是 Anaconda 中预安装的包之一；无需安装软件，因为它已经可以随时使用。
- en: In the next paragraphs, we will learn how to use the Jupyter Notebook using
    some examples.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的段落中，我们将通过一些示例学习如何使用 Jupyter Notebook。
- en: Our first Jupyter Notebook
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个 Jupyter Notebook
- en: 'Once Jupyter is started, you can open an existing notebook inside the root
    directory (which can be viewed at [http://localhost:8888/tree](http://localhost:8888/tree))
    from which the service was started, or proceed to create a new notebook from scratch:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动 Jupyter，你可以打开根目录下已有的笔记本（可以在[http://localhost:8888/tree](http://localhost:8888/tree)查看该目录），或者从头开始创建一个新的笔记本：
- en: Notebooks are nothing more than text files with the extension `.ipynb`, inside
    which are saved (in JSON format) Python code and other media resources (such as
    images coded in base64).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本实际上只是扩展名为 `.ipynb` 的文本文件，里面保存了（以 JSON 格式）Python 代码和其他媒体资源（如以 base64 编码的图像）。
- en: To create our first notebook, simply use the menu items available in the dashboard's
    interface, which is very intuitive.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个笔记本，只需使用仪表盘界面中提供的菜单项，这非常直观。
- en: 'All we have to do is to select the folder in which to place the newly created
    notebook, then click on the New button and choose the version of Python that most
    suits our needs, as shown in the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是选择一个文件夹来放置新创建的笔记本，然后点击“New”按钮，选择最适合我们需求的 Python 版本，如下图所示：
- en: '![](img/3ffca135-c9c6-4170-97a0-2bb7dc7340f0.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ffca135-c9c6-4170-97a0-2bb7dc7340f0.png)'
- en: 'At this point, we can rename the newly created notebook and then proceed with
    the insertion of the cells within the document:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们可以重命名新创建的笔记本，然后继续在文档中插入单元格：
- en: '![](img/b8301e28-2d33-40cc-a4f0-07e52cbe4d74.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8301e28-2d33-40cc-a4f0-07e52cbe4d74.png)'
- en: 'We can specify the type of content of the cell, choosing between code (default)
    text, markdown, and other options:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定单元格的内容类型，在代码（默认）、文本、Markdown 和其他选项之间进行选择：
- en: '![](img/b36e0ac5-1190-42c3-b565-4bd98e2ed16e.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b36e0ac5-1190-42c3-b565-4bd98e2ed16e.png)'
- en: Exploring the Jupyter interface
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Jupyter 界面
- en: 'Next, we will explore in more detail some of the common tasks in the management
    of notebooks, starting with the renaming of files. The default filename assigned
    to newly created notebooks is, in fact, `Untitled.ipynb`. We must keep that in
    mind to proceed with the renaming of a notebook; this must not be in the running
    state. Therefore, make sure to select the File | Close and Halt menu item before
    assigning a new name to the notebook; simply select the file to be renamed in
    the directory and click on Rename among the dashboard controls:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更详细地探讨一些常见的笔记本管理任务，从文件重命名开始。新创建的笔记本默认文件名为 `Untitled.ipynb`。在重命名笔记本时，我们必须记住这一点；此时笔记本不应处于运行状态。因此，请确保在为笔记本分配新名称之前，选择文件
    | 关闭并停止 菜单项；只需在目录中选择要重命名的文件，然后在仪表板控制中点击重命名：
- en: '![](img/5148652e-098a-41b3-9099-7072d2c25511.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5148652e-098a-41b3-9099-7072d2c25511.png)'
- en: What's in a cell?
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元格中有什么？
- en: The cells represent containers in which it is possible to insert different types
    of content; the most commonly occurring content of a cell obviously consists of
    Python code to be executed inside the notebook, but it is also possible to insert
    plain text or markdown inside a cell.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格是可以插入不同类型内容的容器；单元格中最常见的内容显然是要在笔记本中执行的 Python 代码，但也可以插入纯文本或 Markdown。
- en: When we insert Python code, the result of the execution is immediately shown
    below the code, within the same cell. To insert a new cell, click on Insert from
    the menu bar, and select Insert Cell Below.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们插入 Python 代码时，执行结果会立即显示在代码下方，位于同一个单元格内。要插入新单元格，请点击菜单栏中的 插入，并选择 插入下方单元格。
- en: Alternatively, a keyboard shortcut can be used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，也可以使用快捷键来操作。
- en: Useful keyboard shortcuts
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的快捷键
- en: 'To speed up the execution of the most common commands, the Jupyter interface
    provides us with a series of keyboard shortcuts, including the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快最常用命令的执行，Jupyter 界面为我们提供了一系列的快捷键，包括以下内容：
- en: '*Ctrl* + *Enter*: Run the selected cell'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Enter*：运行选定的单元格'
- en: '*Esc* or *Enter*: Toggle between edit and command mode'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Esc* 或 *Enter*：在编辑模式和命令模式之间切换'
- en: 'Up and down keys: Scroll cells up/down (command mode)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下箭头：上下滚动单元格（命令模式）
- en: 'Press *A* or *B*: Insert a new cell above or below the active cell'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按 *A* 或 *B*：在活动单元格的上方或下方插入新单元格
- en: 'Press *Y*: Set the active cell as a code cell'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按 *Y*：将活动单元格设置为代码单元格
- en: 'Press *M*: Transform the active cell to a markdown cell'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按 *M*：将活动单元格转换为 Markdown 单元格
- en: 'Press *D* twice: Delete the active cell'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按 *D* 两次：删除活动单元格
- en: 'Press *Z*: Undo cell deletion'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按 *Z*：撤销单元格删除
- en: Choose your notebook kernel
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择你的笔记本内核
- en: A particularly interesting feature of notebooks is that behind each notebook
    hides a specific kernel. When we execute a cell containing Python code, that code
    is executed in the **specific kernel** of the notebook.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本的一个特别有趣的功能是，每个笔记本背后都有一个特定的内核。当我们执行包含 Python 代码的单元格时，该代码会在笔记本的**特定内核**中执行。
- en: 'We can then select and assign a specific kernel to a single notebook, in case
    we have installed several different environments:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为单个笔记本选择并分配一个特定的内核，以防我们安装了多个不同的环境：
- en: '![](img/b901812d-f397-4f7c-823e-faba57c15da3.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b901812d-f397-4f7c-823e-faba57c15da3.png)'
- en: It is, in fact, possible to install not only different kernels for different
    versions of Python, but also kernels for other languages such as Java, C, R and
    Julia.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，不仅可以为不同版本的 Python 安装不同的内核，还可以为其他语言（如 Java、C、R 和 Julia）安装内核。
- en: Getting your hands dirty
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际操作
- en: 'To close the Jupyter Notebook argument, we will now try to insert a series
    of cells with example Python code inside, recalling the libraries and packages
    that we need, by performing the following steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束 Jupyter Notebook 的操作，我们现在将尝试插入一系列包含示例 Python 代码的单元格，回顾所需的库和包，并按以下步骤进行：
- en: 'Proceed to insert a new cell, within which we write the following commands:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续插入一个新单元格，在其中编写以下命令：
- en: '[PRE21]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We should get the following output:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该得到以下输出：
- en: '![](img/f8da3ad1-77a1-46f3-b6fa-44c785188950.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8da3ad1-77a1-46f3-b6fa-44c785188950.png)'
- en: 'Now, add a new cell, within which we will write the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个新单元格，在其中编写以下代码：
- en: '[PRE22]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'By running the preceding code, we should get the following output:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码后，我们应该会得到以下输出：
- en: '[PRE23]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we insert a new cell, within which we will write the following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们插入一个新单元格，在其中编写以下代码：
- en: '[PRE24]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Launching the execution of the code inside the cell, we should get the following
    output:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 启动单元格中的代码执行后，我们应该会得到以下输出：
- en: '![](img/7cd389c6-abb0-416c-9e8d-6b2abbe7de8a.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cd389c6-abb0-416c-9e8d-6b2abbe7de8a.png)'
- en: Congratulations! If everything went as described, you have successfully verified
    your configuration and can proceed further.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！如果一切如描述所示，您已经成功验证了配置，并可以继续进行后续操作。
- en: Installing DL libraries
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装深度学习库
- en: In this section, we will consider the advantages of installing some of the main
    Python libraries for AI, in particular, to exploit the potential of deep learning.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将考虑安装一些主要的Python库用于人工智能的优势，特别是为了发挥深度学习的潜力。
- en: 'The libraries that we will cover are as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖的库如下：
- en: TensorFlow
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow
- en: Keras
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras
- en: PyTorch
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch
- en: Prior to discovering the advantages of the individual libraries and proceeding
    with their installation, let's spend a few words on the advantages and characteristics
    of deep learning for cybersecurity.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在发现各个库的优势并进行安装之前，让我们先简单谈谈深度学习在网络安全中的优势和特点。
- en: Deep learning pros and cons for cybersecurity
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习在网络安全中的优缺点
- en: One of the distinctive features of deep learning, compared to other branches
    of AI, is the ability to exploit general-purpose algorithms, by leveraging neural
    networks. In this way, it is possible to face similar problems that entail several
    different application domains, by reusing common algorithms elaborated in different
    contexts.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习相比于其他人工智能领域的一个显著特点是，能够通过利用神经网络来发挥通用算法的优势。通过这种方式，可以面对包含多个不同应用领域的相似问题，并重用在不同背景下开发的常用算法。
- en: The deep learning approach exploits the possibility of **neural networks** (**NNs**) to
    add multiple processing layers, each layer having the task of executing different
    types of processing, sharing the results of the processing with the other layers.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习方法利用**神经网络**（**NNs**）的可能性，添加多个处理层，每一层负责执行不同类型的处理，并与其他层共享处理结果。
- en: Within a neural network, at least one layer is hidden, thus simulating the behavior
    of human brain neurons.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在神经网络中，至少有一层是隐藏的，从而模拟人类大脑神经元的行为。
- en: 'Among the most common uses of deep learning, are the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习最常见的应用包括以下几种：
- en: Speech recognition
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语音识别
- en: Video anomaly detection
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频异常检测
- en: '**Natural language processing** (**NLP**)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言处理**（**NLP**）'
- en: These use cases are also of particular importance in the field of cybersecurity.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这些用例在网络安全领域尤为重要。
- en: For example, for **biometric authentication **procedures, which are increasingly carried
    out by resorting to deep learning algorithms, deep learning can also be used successfully
    in the detection of anomalous user behaviors, or in the abnormal use of payment
    instruments, such as credit cards, as part of **fraud detection **procedures.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在**生物识别认证**程序中，随着越来越多的深度学习算法的应用，深度学习也可以成功用于检测异常的用户行为，或者在**欺诈检测**过程中，识别支付工具的异常使用，如信用卡。
- en: Another important use of deep learning is in the detection of possible malware
    or networking threats. Given the vast potential for using deep learning, it should
    not be surprising that even bad guys have begun to use it.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习的另一个重要应用是检测可能的恶意软件或网络威胁。鉴于深度学习的广泛潜力，甚至坏人也开始使用它，这一点应该不足为奇。
- en: In particular, the recent spread of evolved neural networks such as **generative
    adversarial networks** (**GANs**) is posing a serious challenge to traditional
    biometric authentication procedures, which resort to **facial recognition** or
    **voice recognition**. By using a GAN, it is, in fact, possible to generate **artificial
    samples of biometric evidence**, which are practically indistinguishable from
    the original ones.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，最近进化型神经网络的传播，如**生成对抗网络**（**GANs**），对传统的生物识别认证程序构成了严峻挑战，这些程序依赖于**人脸识别**或**语音识别**。通过使用
    GAN，实际上可以生成**生物识别证据的人工样本**，这些样本几乎无法与原始样本区分。
- en: We will delve deeper into this in the upcoming chapters.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中深入探讨这一点。
- en: Now, let's see how to proceed with the installation of the main deep learning
    libraries within our development environment.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下如何在我们的开发环境中安装主要的深度学习库。
- en: TensorFlow
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow
- en: The first deep learning library we will deal with is TensorFlow; in fact, it
    plays a special role, having been specifically developed to program **deep neural
    network** (**DNN**) models.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要处理的第一个深度学习库是 TensorFlow；事实上，它扮演了一个特殊角色，因为它是专门为编程**深度神经网络**（**DNN**）模型而开发的。
- en: 'To proceed with the installation of TensorFlow within Anaconda, we must first
    proceed with the creation of a custom environment (if we have not already created
    one) by performing the following steps:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Anaconda 中安装 TensorFlow，首先必须创建一个自定义环境（如果还没有创建的话），可以按以下步骤操作：
- en: 'In our case, we will use the custom environment `py35`, which was previously
    created:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将使用之前创建的自定义环境 `py35`：
- en: 'Install TensorFlow with conda:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 conda 安装 TensorFlow：
- en: '[PRE25]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Install a specific version of TensorFlow by using the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装特定版本的 TensorFlow：
- en: '[PRE26]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can test our installation by running a sample TensorFlow program in an interactive
    conda session as follows:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过在交互式 conda 会话中运行一个示例 TensorFlow 程序来测试我们的安装，方法如下：
- en: '[PRE27]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For further documentation, visit the TensorFlow website at [https://www.tensorflow.org/](https://www.tensorflow.org/).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更多文档，请访问 TensorFlow 官网：[https://www.tensorflow.org/](https://www.tensorflow.org/)
- en: Keras
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras
- en: The other deep learning library we will install is `keras`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装的另一个深度学习库是 `keras`。
- en: 'A characteristic of Keras is that it can be installed on top of TensorFlow,
    thus constituting a high-level interface (with respect to TensorFlow) for NN development.
    Also, in the case of Keras, as with TensorFlow, we will proceed to the installation
    inside our custom environment `py35`, which we created previously, by executing
    the following command:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 的特点是可以安装在 TensorFlow 之上，从而构成一个高层次接口（相对于 TensorFlow）用于神经网络（NN）开发。与 TensorFlow
    一样，对于 Keras，我们将继续在之前创建的自定义环境 `py35` 内进行安装，执行以下命令：
- en: '[PRE28]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For further documentation, visit the Keras website at [https://keras.io/](https://keras.io/).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更多文档，请访问 Keras 官网：[https://keras.io/](https://keras.io/)。
- en: PyTorch
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch
- en: The last example of a deep learning library we will examine here is `pytorch`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里检查的最后一个深度学习库是 `pytorch`。
- en: 'PyTorch is a project developed by Facebook, specially designed to perform large-scale
    image analysis. Even in the case of PyTorch, installation (always within the `py35`
    environment) via conda is rather simple:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 是 Facebook 开发的一个项目，专门设计用于执行大规模的图像分析。即使是 PyTorch，通过 conda 在 `py35` 环境中的安装也非常简单：
- en: '[PRE29]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: PyTorch versus TensorFlow
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch 与 TensorFlow
- en: To compare both of the learning libraries, it should be noted that PyTorch is
    the most optimized solution for performing tensor calculus tasks on GPUs, as it
    has been specifically designed to improve performance in large-scale contexts.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较这两个学习库，需要注意的是，PyTorch 是在 GPU 上执行张量计算任务时优化效果最好的解决方案，因为它特别设计用于在大规模场景下提升性能。
- en: 'Some of the most common use cases for using PyTorch are as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyTorch 的一些常见应用场景如下：
- en: NLP
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自然语言处理（NLP）
- en: Large-scale image processing
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模图像处理
- en: Social media analysis
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交媒体分析
- en: However, when compared only on the basis of performance, both PyTorch and TensorFlow
    are excellent choices; there are other characteristics that could make you lean
    toward one solution or the other.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅从性能上进行比较，PyTorch 和 TensorFlow 都是非常优秀的选择；还有其他一些特点可能会让你偏向选择其中一个解决方案。
- en: For example, in TensorFlow, the debugging of programs is more complex than in
    PyTorch. This is because, in TensorFlow, development is more cumbersome (having
    to define tensors, initialize a session, keep track of tensors during the session,
    and so on), while the deployment of the TensorFlow model is certainly preferred.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 TensorFlow 中，程序的调试比在 PyTorch 中更为复杂。这是因为，在 TensorFlow 中，开发过程更加繁琐（需要定义张量、初始化会话、在会话中跟踪张量等等），而
    TensorFlow 模型的部署则无疑更受偏好。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, the indispensable tools for carrying out analysis and development
    activities in AI in the cybersecurity field have been illustrated. We looked at
    the main AI libraries and introduced the advantages and disadvantages of using
    deep learning in the field of cybersecurity.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在网络安全领域开展分析和开发活动所必需的工具。我们审视了主要的 AI 库，并介绍了在网络安全领域使用深度学习的优缺点。
- en: In the following chapters, we will learn how to use the tools at our disposal
    in the best possible way, consciously choosing those that most reflect our security
    analysis strategies.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何以最佳方式使用手头的工具，意识性地选择那些最能体现我们安全分析策略的工具。
- en: In the next chapter, we will start with the development of appropriate classifiers
    for email spam detection.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从开发适当的分类器开始，专注于电子邮件垃圾邮件检测。
