- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Creating a Basic Recommender Solution with Azure OpenAI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure OpenAI创建一个基本的推荐系统
- en: In our last chapter, we delved into the art of crafting a straightforward Python
    program. This program does more than just generate code snippets; it’s like having
    a coding genie that also provides documentation for the code it conjures. This
    feature serves as a launchpad for our coding journey, making it accessible even
    for those with minimal or no prior coding knowledge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们深入探讨了制作一个简单Python程序的技巧。这个程序不仅能生成代码片段；它就像一个编程精灵，还能提供所生成代码的文档。这个功能为我们的编程之旅提供了一个启动平台，使得即使是没有编程知识的人也能轻松上手。
- en: Imagine you and your friend are getting ready for a relaxing Friday night, planning
    to watch a movie. But here’s the catch – picking a movie from a big list is kind
    of tough.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你和你的朋友准备好享受一个轻松的周五夜晚，打算看一部电影。但问题是，从一大堆电影中挑选一部可不容易。
- en: So, you come up with a cool idea! Instead of stressing over the choices, why
    not create something to help? You decide to make a chatbot, which is a small program
    that behaves like a helpful friend who understands what kind of movies you like
    and suggests the perfect ones.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你想出了一个很酷的主意！与其为选择而烦恼，为什么不创建一些帮助你的东西呢？你决定制作一个聊天机器人，它是一个像有用朋友一样的小程序，了解你喜欢什么类型的电影，并推荐最合适的电影。
- en: 'Now, picture this: You and your friend, all set with snacks, telling your bot
    what you’re in the mood to watch. No more scrolling through endless lists – the
    bot does the hard work and gives you movie suggestions based on what you like.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一下：你和你的朋友准备好零食，告诉你的机器人你想看什么类型的电影。不再需要翻阅无尽的列表——机器人会帮你做艰难的筛选工作，并根据你的喜好给出电影推荐。
- en: This experience is like having your own movie guide for the perfect Friday night.
    The excitement builds up as you think about how much easier and more fun your
    movie nights are going to be with your new movie guide. Get ready for a stress-free
    movie night with your recommender solution.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这段体验就像拥有一个自己的电影指南，确保完美的周五之夜。当你想到有了这个新的电影指南，电影之夜会变得更轻松、更有趣时，兴奋感油然而生。准备好享受一个无压力的电影之夜吧，带着你的推荐系统。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the practical exercises in this chapter, access the source
    code available in this chapter's GitHub repository at [https://github.com/PacktPublishing/Unlocking-Creativity-with-Azure-OpenAI/blob/main/Chapter%208.ipynb](https://github.com/PacktPublishing/Unlocking-Creativity-with-Azure-OpenAI/blob/main/Chapter%208.ipynb)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的实操练习，请访问本章GitHub仓库中的源代码，地址为[https://github.com/PacktPublishing/Unlocking-Creativity-with-Azure-OpenAI/blob/main/Chapter%208.ipynb](https://github.com/PacktPublishing/Unlocking-Creativity-with-Azure-OpenAI/blob/main/Chapter%208.ipynb)
- en: No additional technical requirements are needed beyond those specified in [*Chapter
    7*](B21019_07.xhtml#_idTextAnchor088)’s *Technical* *requirements* section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除[*第7章*](B21019_07.xhtml#_idTextAnchor088)中*技术要求*部分所列出的内容外，不需要额外的技术要求。
- en: You do, however, need to create a Kaggle account to generate an API key for
    fetching datasets of your choice. In this chapter, we are using the Netflix dataset,
    available at [https://www.kaggle.com/datasets/shivamb/netflix-shows/code](https://www.kaggle.com/datasets/shivamb/netflix-shows/code).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你确实需要创建一个Kaggle帐户，以生成API密钥来获取你选择的数据集。在本章中，我们使用的是Netflix数据集，地址为[https://www.kaggle.com/datasets/shivamb/netflix-shows/code](https://www.kaggle.com/datasets/shivamb/netflix-shows/code)。
- en: Architecture diagram
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构图
- en: 'For this chapter’s solution, the user first retrieves the raw dataset from
    a source such as Kaggle. Next, we normalize and clean the data to fit our requirements.
    This processed data is then used to create embeddings. When the user queries for
    movie suggestions, the ChatGPT API searches through the embedded dataset and provides
    recommendations based on the user’s input. The following diagram shows the overall
    workflow:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的解决方案中，用户首先从Kaggle等来源获取原始数据集。接着，我们对数据进行规范化和清理，以满足我们的需求。然后，处理后的数据将用于创建嵌入。当用户查询电影推荐时，ChatGPT
    API会在嵌入的数据集中进行搜索，并根据用户的输入提供推荐。下图展示了整体工作流程：
- en: '![Figure 8.1: Architecture diagram](img/B21019_08_1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：架构图](img/B21019_08_1.jpg)'
- en: 'Figure 8.1: Architecture diagram'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：架构图
- en: Creating a recommender solution using Azure OpenAI
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure OpenAI创建推荐系统
- en: 'Now that we have set up all the essential services in our Azure portal, we
    can begin constructing our solution. To develop the code, we will be working within
    an `requirements.txt` file that lists all the Python libraries necessary for our
    solution. Please review this file and use the following command to install the
    required packages: !`pip install requirements.txt`. Then, proceed as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在Azure门户中设置了所有必要的服务，我们可以开始构建我们的解决方案。为了开发代码，我们将在一个`requirements.txt`文件中工作，该文件列出了我们解决方案所需的所有Python库。请检查此文件，并使用以下命令安装所需的包：!`pip
    install requirements.txt`。然后，按以下步骤继续：
- en: Create a Kaggle account.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Kaggle账户。
- en: 'Navigate to [https://www.kaggle.com/datasets/shivamb/netflix-shows?resource=download](https://www.kaggle.com/datasets/shivamb/netflix-shows?resource=download),
    then either download the CSV file or go to **Settings** and generate an API token
    by clicking on **Create** **New Token**:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 访问[https://www.kaggle.com/datasets/shivamb/netflix-shows?resource=download](https://www.kaggle.com/datasets/shivamb/netflix-shows?resource=download)，然后下载CSV文件，或者进入**设置**并通过点击**创建新令牌**来生成API令牌：
- en: '![Figure 8.2: Generating a Kaggle token](img/B21019_08_2.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：生成Kaggle令牌](img/B21019_08_2.jpg)'
- en: 'Figure 8.2: Generating a Kaggle token'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：生成Kaggle令牌
- en: Import the required packages.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的包。
- en: 'Install missing libraries using `pip install` and make sure your `openai` version
    is 0.28.0:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`pip install`安装缺失的库，并确保你的`openai`版本为0.28.0：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see a variety of libraries being used in the preceding code. Let’s
    delve into each of these libraries in the following table:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到在前面的代码中使用了多种库。让我们在下表中深入探讨每一个库：
- en: '| **Import Statement** | **Description** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **导入语句** | **描述** |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `import openai` | Provides access to the OpenAI API for interacting with
    AI models and services. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `import openai` | 提供访问OpenAI API的功能，用于与AI模型和服务进行交互。 |'
- en: '| `import os` | Provides functions for interacting with the operating system,
    such as accessing environment variables and files. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `import os` | 提供与操作系统交互的功能，如访问环境变量和文件。 |'
- en: '| `import re` | Provides support for regular expressions, allowing pattern
    matching and string manipulation. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `import re` | 提供对正则表达式的支持，允许模式匹配和字符串操作。 |'
- en: '| `import requests` | Enables HTTP requests, allowing interaction with web
    servers and APIs. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `import requests` | 启用HTTP请求，允许与Web服务器和API进行交互。 |'
- en: '| `import sys` | Provides system-specific parameters and functions, such as
    access to command-line arguments and the Python interpreter. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `import sys` | 提供系统特定的参数和功能，例如访问命令行参数和Python解释器。 |'
- en: '| `from num2words` `import num2words` | Allows conversion of numbers to words.
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `from num2words` `import num2words` | 允许将数字转换为单词。 |'
- en: '| `import pandas` `as pd` | Provides data structures and functions for data
    manipulation and analysis, particularly for handling tabular data. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `import pandas` `as pd` | 提供用于数据操作和分析的数据结构和函数，特别适用于处理表格数据。 |'
- en: '| `import numpy` `as np` | Offers numerical computing capabilities, including
    support for arrays, matrices, and mathematical operations. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `import numpy` `as np` | 提供数值计算功能，包括对数组、矩阵和数学运算的支持。 |'
- en: '| `from openai.embeddings_utils import` `get_embedding, cosine_similarity`
    | Provides utility functions for working with embeddings, including generating
    embeddings and computing cosine similarity. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `from openai.embeddings_utils import` `get_embedding, cosine_similarity`
    | 提供用于处理嵌入的工具函数，包括生成嵌入和计算余弦相似度。 |'
- en: '| `import tiktoken` | Not a standard Python module. It appears to be a custom
    or third-party module. Its purpose is unclear from the `import` statement alone.
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `import tiktoken` | 不是标准的Python模块。它似乎是一个自定义或第三方模块。从`import`语句本身无法确定其用途。 |'
- en: '| `from dotenv` `import load_dotenv` | Offers functionality for loading environment
    variables from a `.env` file into the environment. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `from dotenv` `import load_dotenv` | 提供从`.env`文件加载环境变量到环境中的功能。 |'
- en: 'Table 8.1: Explanation of imported packages'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表8.1：已导入包的说明
- en: 'Now, let’s initialize all the necessary constants using the keys provided in
    the `.env` file. Add `"KAGGLE_USERNAME"` and `"KAGGLE_KEY"` to your already existing
    `.``env` file:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用`.env`文件中提供的密钥初始化所有必要的常量。将`"KAGGLE_USERNAME"`和`"KAGGLE_KEY"`添加到已存在的`.env`文件中：
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add these to the `.env` file that was already created in [*Chapter 6*](B21019_06.xhtml#_idTextAnchor077)
    with the Kaggle information:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些内容添加到已经在[*第6章*](B21019_06.xhtml#_idTextAnchor077)中创建的包含Kaggle信息的`.env`文件中：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Follow these steps to set up Kaggle credentials:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤设置Kaggle凭据：
- en: Once you generate a Kaggle token, as explained in the beginning of the section,
    a `.json` file with a username and key will be generated.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你生成了 Kaggle token，正如本节开始时所解释的，会生成一个包含用户名和密钥的 `.json` 文件。
- en: Update the `KAGGLE_USERNAME` value with the username value found in `kaggle.json`.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用在 `kaggle.json` 中找到的用户名值更新 `KAGGLE_USERNAME`。
- en: Similarly, modify the values of `KAGGLE_KEY` with the key.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，使用密钥修改 `KAGGLE_KEY` 的值。
- en: 'By completing these configurations, you’ll have the necessary connection settings
    for your resources. We get the following output:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成这些配置后，你将拥有连接资源所需的设置。我们得到了以下输出：
- en: '![Figure 8.3: Output from loading the .env file](img/B21019_08_3.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3：加载 .env 文件后的输出](img/B21019_08_3.jpg)'
- en: 'Figure 8.3: Output from loading the .env file'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：加载 .env 文件后的输出
- en: Download the dataset.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载数据集。
- en: 'This is a concise way to download the `netflix-shows` dataset from Kaggle directly
    from within a Jupyter notebook:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个简洁的方式，从 Jupyter notebook 中直接下载 `netflix-shows` 数据集：
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We get the following output:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '![Figure 8.4: Downloading of dataset from Kaggle](img/B21019_08_4.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4：从 Kaggle 下载数据集](img/B21019_08_4.jpg)'
- en: 'Figure 8.4: Downloading of dataset from Kaggle'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4：从 Kaggle 下载数据集
- en: Unzip the downloaded dataset.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的数据集。
- en: 'This code unzips the downloaded file and adds it to the `netflix_dataset` folder:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码解压下载的文件，并将其添加到 `netflix_dataset` 文件夹中：
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Read data from the `.``csv` file.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `.csv` 文件读取数据。
- en: 'This code reads data from the `.csv` file and imports the data into a `pandas`
    DataFrame:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码从 `.csv` 文件中读取数据，并将其导入到 `pandas` DataFrame 中：
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the output:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 8.5: Output of the .csv data](img/B21019_08_5.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5：.csv 数据的输出](img/B21019_08_5.jpg)'
- en: 'Figure 8.5: Output of the .csv data'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5：.csv 数据的输出
- en: Fetch the title and description.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取标题和描述。
- en: 'This code fetches the title and description from the entire dataset:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码从整个数据集中获取标题和描述：
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the output:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 8.6: Output of just title and description](img/B21019_08_6.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6：仅显示标题和描述的输出](img/B21019_08_6.jpg)'
- en: 'Figure 8.6: Output of just title and description'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6：仅显示标题和描述的输出
- en: Normalize the data.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对数据进行归一化处理。
- en: '[PRE7]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the output:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 8.7: Output of the data after normalization](img/B21019_08_7.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7：归一化后数据的输出](img/B21019_08_7.jpg)'
- en: 'Figure 8.7: Output of the data after normalization'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7：归一化后数据的输出
- en: Create embeddings.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建嵌入（embeddings）。
- en: '[PRE9]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the output:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 8.8: Output with embeddings](img/B21019_08_8.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8：带嵌入的输出](img/B21019_08_8.jpg)'
- en: 'Figure 8.8: Output with embeddings'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8：带嵌入的输出
- en: Search for specific content.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索特定内容。
- en: 'This code efficiently discovers similar content within a dataset. By calculating
    similarity scores and selecting top matches, the function becomes a powerful tool
    for finding the required results:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码高效地发现数据集中的相似内容。通过计算相似度分数并选择最匹配的项，函数成为寻找所需结果的强大工具：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is the output:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 8.9: Output of search on the data](img/B21019_08_9.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9：数据搜索输出](img/B21019_08_9.jpg)'
- en: 'Figure 8.9: Output of search on the data'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9：数据搜索输出
- en: In our code, we used the title `"Blood & Water"`. Our recommender solution then
    generated a list of movies based on your preferences. The first record in the
    data is `"Blood & Water"` itself, with a perfect similarity score of 1\. Following
    that, we received recommendations such as `"Dive Club"` with a similarity score
    of 0.874 and `"The Vanished"` with a similarity score of 0.870, among others.
    This allows us to easily choose a movie from the list based on the similarity
    scores provided.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们使用了标题 `"Blood & Water"`。我们的推荐系统根据你的偏好生成了电影列表。数据中的第一条记录是 `"Blood &
    Water"` 本身，其相似度分数为 1。随后，我们收到了类似 `"Dive Club"`（相似度 0.874）和 `"The Vanished"`（相似度
    0.870）的推荐。这让我们可以根据提供的相似度分数轻松选择一部电影。
- en: 'The code snippets for this chapter are available on GitHub and can be accessed
    here: [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter%208.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter%208.ipynb)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的代码片段可以在 GitHub 上获取，点击这里访问：[https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter%208.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter%208.ipynb)
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we significantly enhanced our movie recommender solution, adding
    layers of functionality that make it both more intelligent and user-friendly.
    We began by setting up the necessary keys and credentials, ensuring our program
    could securely interact with the required APIs and services. This setup is crucial
    because it allows our system to access powerful resources, such as OpenAI’s embedding
    models, which are key to understanding and processing the data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们显著增强了我们的电影推荐解决方案，增加了多个功能层，使其更加智能且易于使用。我们首先设置了必要的密钥和凭证，确保我们的程序能够安全地与所需的
    API 和服务进行交互。这一设置至关重要，因为它使我们的系统能够访问强大的资源，例如 OpenAI 的嵌入模型，这些模型对于理解和处理数据至关重要。
- en: Next, we integrated a Netflix dataset directly from Kaggle into our Jupyter
    notebook. By organizing this dataset into a `pandas` DataFrame, we created a structured
    environment that facilitates efficient data manipulation and analysis. This step
    is vital because a clean, well-organized dataset is the foundation for any data-driven
    solution, enabling us to focus on extracting meaningful insights.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将一个直接从 Kaggle 获取的 Netflix 数据集集成到我们的 Jupyter notebook 中。通过将该数据集组织成一个 `pandas`
    DataFrame，我们创建了一个结构化的环境，便于高效的数据操作和分析。这一步至关重要，因为一个干净、组织良好的数据集是任何数据驱动解决方案的基础，使我们能够专注于提取有意义的洞察。
- en: After loading the data, we zeroed in on the titles and descriptions of the shows,
    recognizing that these text fields hold the most valuable information for recommending
    content. We cleaned and preprocessed this text data to ensure it was in a format
    that a machine could easily interpret. Text preprocessing is a critical step as
    it eliminates noise and standardizes the data, allowing the model to better understand
    the nuances of different shows.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载数据后，我们将重点放在节目的标题和描述上，因为这些文本字段包含了推荐内容最有价值的信息。我们对这些文本数据进行了清理和预处理，确保它们的格式能够被机器轻松理解。文本预处理是一个关键步骤，因为它消除了噪音并标准化了数据，使模型能够更好地理解不同节目的细微差别。
- en: To further enhance our recommender, we transformed the descriptions into numerical
    representations, known as embeddings, using OpenAI’s powerful models. These embeddings
    capture the semantic meaning of the text, allowing our system to compare and contrast
    different shows more effectively. This capability is what enables our recommender
    to suggest shows that are genuinely similar in content and theme to the ones users
    already enjoy.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步提升我们的推荐系统，我们使用 OpenAI 强大的模型将描述转化为数值表示，这些表示被称为嵌入（embeddings）。这些嵌入捕捉了文本的语义意义，使我们的系统能够更有效地比较和对比不同的节目。这一能力使得我们的推荐系统能够推荐与用户已经喜爱的节目在内容和主题上真正相似的节目。
- en: Finally, we developed a function that leverages these embeddings to find and
    recommend shows similar to a given favorite. For example, if you’re a fan of `"Blood
    & Water"`, our system can suggest other shows that share similar themes, storylines,
    or styles. This function is the core of our recommender, making it not just a
    tool for discovering new content but a personalized guide tailored to your unique
    tastes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们开发了一个利用这些嵌入来查找并推荐与给定喜好相似节目的功能。例如，如果你是《"Blood & Water"》的粉丝，我们的系统可以推荐其他在主题、情节或风格上相似的节目。这个功能是我们推荐系统的核心，使其不仅仅是一个发现新内容的工具，更是一个为你量身定制的个性化指南。
- en: Looking ahead, in the next chapter, we will take a step further by exploring
    how to transform text prompts into videos. We’ll start by generating images from
    text prompts and then combine these images to create videos. This will open up
    new possibilities for dynamic content creation, which can be adapted to various
    other use cases such as marketing, education, and entertainment.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 展望未来，在下一章节，我们将更进一步，探索如何将文本提示转化为视频。我们将首先从文本提示生成图像，然后将这些图像合成视频。这将为动态内容创作开辟新的可能性，可以应用于各种其他场景，如营销、教育和娱乐。
