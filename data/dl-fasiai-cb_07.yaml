- en: '*Chapter 7*: Deployment and Model Maintenance'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 7 章*：部署与模型维护'
- en: So far in this book, you have trained a wide variety of fastai models, including
    models trained with tabular datasets, models trained with text datasets, recommender
    systems, and models trained with image data. All the models that you have trained
    have been exercised in the context of Jupyter notebooks. Jupyter notebooks are
    great for training models and exercising them with a couple of test examples,
    but what about actually making your model useful? How do you make your model available
    to other people or applications to actually solve problems?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中你已经训练了多种 fastai 模型，包括使用表格数据集训练的模型、使用文本数据集训练的模型、推荐系统以及使用图像数据训练的模型。所有这些模型都已经在
    Jupyter Notebook 环境中进行了演示。Jupyter Notebook 很适合用于训练模型并使用几个测试样本进行测试，但如果要真正让模型有用怎么办？如何使你的模型可以供其他人或应用程序使用，以实际解决问题？
- en: The process of making your deep learning models available to other people or
    applications is called **deployment**. In this chapter, we will go through recipes
    that show how to deploy your fastai models. The industrial-strength production
    deployment of deep learning models is beyond the scope of this book. Instead,
    in this chapter, you will learn how to create simple, self-contained deployments
    that you can serve from your own local system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的深度学习模型提供给其他人或应用程序的过程称为 **部署**。在本章中，我们将通过一些步骤，展示如何部署你的 fastai 模型。深度学习模型的工业级生产部署超出了本书的范围。在本章中，你将学习如何创建简单、独立的部署，并能够从你自己的本地系统提供服务。
- en: 'Here are the recipes that will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下步骤：
- en: Setting up fastai on your local system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地系统上设置 fastai
- en: Deploying a fastai model trained on a tabular dataset
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一个使用表格数据集训练的 fastai 模型
- en: Deploying a fastai model trained on an image dataset
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一个使用图像数据集训练的 fastai 模型
- en: Maintaining your fastai model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护你的 fastai 模型
- en: Test your knowledge
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you will be running deployments on your local system, which
    requires having fastai installed on your local system. To run fastai locally,
    a Windows or Linux system is recommended, with Python installed. While fastai
    can be installed on macOS, you will save yourself a lot of headaches if you use
    a Windows or Linux system for your local installation of fastai.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将在本地系统上运行部署，这要求你在本地系统上安装 fastai。要在本地运行 fastai，推荐使用 Windows 或 Linux 系统，并安装
    Python。虽然 fastai 也可以在 macOS 上安装，但如果你使用 Windows 或 Linux 系统进行本地安装，将能节省许多麻烦。
- en: Ensure that you have cloned the repo for the book at [https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook](https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook)
    and have access to the `ch7` folder. This folder contains the code samples described
    in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经克隆了本书的 GitHub 仓库 [https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook](https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook)，并可以访问
    `ch7` 文件夹。该文件夹包含本章中描述的代码示例。
- en: Setting up fastai on your local system
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地系统上设置 fastai
- en: The first step in being able to do a simple web deployment of a fastai deep
    learning model is to set up your local system with PyTorch and fastai. You need
    to do this because you will be running code on your local system that invokes
    models that you trained earlier in this book. To exercise models to make predictions
    on your local system, you need to have the fastai framework installed. In this
    recipe, you will see how to set up fastai on your local system and how to validate
    your installation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在能够简单部署一个 fastai 深度学习模型的第一步是将你的本地系统设置为安装 PyTorch 和 fastai。你需要这么做，因为你将在本地系统上运行代码，调用你在本书中之前训练的模型。为了在本地系统上运行模型并进行预测，你需要安装
    fastai 框架。在本节中，你将看到如何在本地系统上设置 fastai，以及如何验证你的安装。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have Python (at least 3.7) installed on your local system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在本地系统上安装了 Python（至少是 3.7）。
- en: 'To check the level of Python, enter the following command on the command line:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 Python 的版本，可以在命令行中输入以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will show the version of Python installed on your local system as
    follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示你本地系统上安装的 Python 版本，如下所示：
- en: '![Figure 7.1 – Python version'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – Python 版本'
- en: '](img/B16216_7_1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_1.jpg)'
- en: Figure 7.1 – Python version
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – Python 版本
- en: Ensure that you have cloned the book's repo at [https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook](https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook)
    to your local system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经将书的存储库克隆到您的本地系统上：[https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook](https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook)。
- en: How to do it…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To set up fastai on your local system, you need to set up PyTorch (the deep
    learning framework upon which fastai runs) and then fastai. To do this, run through
    the following steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地系统上设置fastai，您需要设置PyTorch（fastai运行的深度学习框架），然后是fastai。要做到这一点，请按照以下步骤操作：
- en: 'Install PyTorch on your local system by running the following command in a
    terminal or command window of your local system. You can find complete details
    about installing PyTorch on your local system here: [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/):'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在本地系统的终端或命令窗口中运行以下命令，在您的本地系统上安装PyTorch。您可以在此处找到有关在本地系统上安装PyTorch的完整详细信息：[https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install fastai on your local system by following the instructions here for
    your operating system and typical Python installation approach: [https://docs.fast.ai/](https://docs.fast.ai/).'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的操作系统和典型的Python安装方法，按照此处的说明在本地系统上安装fastai：[https://docs.fast.ai/](https://docs.fast.ai/)。
- en: 'Once you have installed PyTorch and fastai, validate your installation by opening
    up the `validate_local_setup.ipynb` notebook from the `ch7` directory in your
    local repo and run the following cell:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完PyTorch和fastai后，通过在本地repo的`ch7`目录中打开`validate_local_setup.ipynb`笔记本并运行以下单元格来验证您的安装：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Congratulations! You have successfully set up fastai on your local system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已成功在本地系统上设置了fastai。
- en: How it works…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'You may be asking why it''s necessary to set up fastai on a local system to
    demonstrate how to deploy a fastai model. While it is possible to deploy fastai
    models without using your local system, there are several advantages to installing
    fastai locally:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问为什么有必要在本地系统上设置fastai来演示如何部署fastai模型。虽然可以在不使用本地系统的情况下部署fastai模型，但在本地安装fastai具有几个优点：
- en: You have complete control over the entire environment. By installing fastai
    locally, you can control the entire stack, from the level of pandas to the details
    of the web pages that you will use for deployment.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以完全控制整个环境。通过在本地安装fastai，您可以控制整个堆栈，从pandas的层面到用于部署的网页的详细信息。
- en: By deploying fastai models locally, you will avoid shortcuts that could limit
    your complete appreciation of how fastai models work when they are deployed. The
    deployments that you will see in this chapter may be simple but they are complete.
    By working through recipes where nothing is left as a black box, you will gain
    a thorough understanding of what is really happening when a fastai model is deployed.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在本地部署fastai模型，您将避免可能会限制您完全理解fastai模型在部署时如何工作的快捷方式。您将在本章中看到的部署可能很简单，但它们是完整的。通过通过没有留下任何黑盒子的配方来工作，您将深入了解fastai模型在部署时真正发生的事情。
- en: If you are serious about exploiting fastai, it is handy to have a local installation.
    Back in [*Chapter 1*](B16216_01_Final_VK_ePub.xhtml#_idTextAnchor019)*, Getting
    Started with fastai*, I specified that you would need a cloud environment, either
    Gradient or Colab, to run through the recipes in this book. Most fastai applications
    require GPUs to be trained efficiently. Setting up a GPU on an existing local
    system is not easy, and buying a pre-configured system with a GPU only makes sense
    if you are fully committed to exploiting the GPU regularly by working full-time
    on deep learning applications. So, a cloud environment that is GPU-enabled is
    the best place to start. However, having a working fastai environment on your
    local system can be very useful even if you're not going to be using the local
    system for model training. For example, in the process of writing this book, there
    were a couple of instances where there was a problem with the Gradient environment
    where I did most of the development of recipes for this book. Because I have fastai
    installed locally, when Gradient was unavailable, I could still use my local system
    to make progress on coding outside of the model.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你认真对待 fastai 的使用，拥有本地安装环境会非常方便。在[*第 1 章*](B16216_01_Final_VK_ePub.xhtml#_idTextAnchor019)*，快速入门
    fastai*中，我曾指定你需要一个云环境，像是 Gradient 或 Colab，以便进行本书中的实践部分。大多数 fastai 应用需要 GPU 才能高效训练。要在现有本地系统上设置
    GPU 并不简单，除非你完全致力于通过全职工作在深度学习应用中定期使用 GPU，否则购买一个预配置有 GPU 的系统并没有太大意义。因此，使用启用 GPU
    的云环境是最好的起点。然而，即便你不会在本地系统上进行模型训练，拥有一个可以运行 fastai 环境的本地系统也是非常有用的。例如，在编写本书的过程中，曾经有几次遇到
    Gradient 环境的问题，而我大部分的开发工作都是在该环境中进行的。由于我本地已安装 fastai，当 Gradient 无法使用时，我依然可以在本地系统上继续编写与模型无关的代码，取得进展。
- en: If you don't already have some exposure to web application development, you
    will benefit from the brief experience you will get in this chapter. In my experience,
    many data scientists have zero idea of how web applications work, and since most
    of what we work on will eventually be rendered in one form or another in a web
    framework, it behooves us to get a basic understanding of how web applications
    work. By using a combination of the Python Flask library and basic HTML and JavaScript,
    we will create a very simple, yet complete, web application that illustrates some
    basic web application principles. If you haven't come across these principles
    before, you will find them useful to have in your toolbox.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你之前没有接触过 web 应用开发，本章中的简短体验将对你有所帮助。根据我的经验，许多数据科学家对于 web 应用的工作原理一无所知，而我们大多数的工作最终都会在某种形式下通过
    web 框架呈现，因此，理解 web 应用的基本工作原理对我们来说是非常重要的。通过结合 Python 的 Flask 库与基础的 HTML 和 JavaScript，我们将创建一个非常简单但完整的
    web 应用，展示一些基本的 web 应用原理。如果你以前没有接触过这些原理，学会这些知识会对你非常有用。
- en: I hope that this background helps to convince you of the value of having a working
    fastai setup on your local system. Now that you have completed the fastai setup,
    you are ready for the subsequent sections where you deploy models on your local
    system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这些背景信息能够帮助你理解，在本地系统上拥有一个正常工作的 fastai 环境是多么有价值。现在你已经完成了 fastai 环境的设置，接下来的章节中，你将学会如何在本地系统上部署模型。
- en: Deploying a fastai model trained on a tabular dataset
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署一个在表格数据集上训练的 fastai 模型
- en: Back in the *Saving a trained tabular model* recipe in [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*, you exercised a fastai model that you had
    saved. Recall the steps you went through in the recipe.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[*第 3 章*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*，训练表格数据的模型*中的*保存已训练的表格模型*部分，你曾经练习过一个已保存的
    fastai 模型。回想一下你在该部分中所经历的步骤。
- en: 'First, you loaded the saved model as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你按照以下方式加载了已保存的模型：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then you took a test sample and generated a prediction from the model for the
    test sample:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你拿取了一个测试样本，并从模型中生成了该测试样本的预测：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the prediction, as shown in the following screenshot, included
    the values of the input sample, the prediction, and probability of each outcome
    for the prediction:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，预测的输出包括了输入样本的值、预测结果以及每个结果的概率：
- en: '![Figure 7.2 – Output of running a prediction on the saved adult_sample_model
    model'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – 运行已保存的 adult_sample_model 模型进行预测的输出'
- en: '](img/B16216_7_2.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_2.jpg)'
- en: Figure 7.2 – Output of running a prediction on the saved adult_sample_model
    model
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 运行已保存的 adult_sample_model 模型进行预测的输出
- en: 'In the web deployment of the model described in this recipe, you will be going
    through exactly the same steps (as outlined in the following list) as you went
    through in the recipe from [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*, that we just reviewed:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中描述的模型网页部署过程中，你将按照与我们刚刚回顾的[*第三章*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)《使用表格数据训练模型》食谱中完全相同的步骤（如下所列）进行操作：
- en: Load the saved, trained model.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载已保存的训练模型。
- en: Apply the model to an input sample.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模型应用到输入样本上。
- en: Get the prediction from the model.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取模型的预测结果。
- en: Unlike the recipe in [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*, where all the action took place in the context
    of a Jupyter notebook, in this recipe you will be accomplishing these steps through
    a simple web application. You will be able to enter new input samples and get
    predictions on them in a very natural fashion, and you will see the predictions
    as clear English statements rather than as tensors. Even better, you will be able
    to share your web application with others so they can exercise your model and
    see the predictions that it makes. In short, by deploying your model, you will
    transform it from an abstract coding artifact that can only be accessed in a program
    to a useful piece of software that non-programmers can actually use.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与[*第三章*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)《使用表格数据训练模型》中所有操作都在
    Jupyter notebook 环境下进行不同，在这个示例中，你将通过一个简单的网页应用程序完成这些步骤。你将能够以非常自然的方式输入新的样本并获得预测结果，预测结果会以清晰的英文语句呈现，而不是张量的形式。更棒的是，你将能够与他人分享你的网页应用程序，让他们也能使用你的模型并查看其做出的预测。简而言之，通过部署你的模型，你将其从一个只能在程序中访问的抽象编码工件转变为一个普通人也能实际使用的软件工具。
- en: The deployment described in this section incorporates a web server implemented
    as a Flask module. Flask is a Python library that lets you serve web applications
    from the familiar surroundings of Python. In this recipe, you will start the Flask
    module and then use the web pages that it serves to exercise the model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述的部署过程包含一个作为 Flask 模块实现的网络服务器。Flask 是一个 Python 库，它让你可以在熟悉的 Python 环境中提供网页应用程序。在本示例中，你将启动
    Flask 模块，并使用它所提供的网页来调用模型。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Confirm that you
    can access the files in the `deploy_tabular` directory of the `ch7` directory
    of your repo.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照*在本地系统上设置 fastai*这一食谱中的步骤安装了 fastai，并确认你可以访问 `ch7` 目录下 `deploy_tabular`
    目录中的文件。
- en: How to do it…
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To deploy a model trained on a tabular dataset on your system, you will start
    the Flask server and work through the associated web pages to validate that you
    can get a prediction from the model for a given set of input scoring parameters.
    Complete the following steps to do this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的系统上部署一个训练好的表格数据集模型，你将启动 Flask 服务器，并通过相关的网页来验证你是否能根据给定的输入评分参数从模型中获取预测。完成以下步骤来操作：
- en: From a command window/terminal on your local system, make `deploy_tabular` in
    the `ch7` directory of your repo your current directory.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地系统的命令窗口/终端中，将 `ch7` 目录下的 `deploy_tabular` 设置为当前目录。
- en: 'Enter the following command in the command line/terminal to start the Flask
    server:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行/终端中输入以下命令来启动 Flask 服务器：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open a browser window and enter the following in the address field:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器窗口，并在地址栏输入以下内容：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, select `home.html`, in this case the default values for the fields:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择 `home.html`，在此案例中，选择字段的默认值：
- en: '![Figure 7.5 – The query string generated with the default setting in home.html'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – 在 home.html 中使用默认设置生成的查询字符串'
- en: '](img/B16216_7_5.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_5.jpg)'
- en: Figure 7.5 – The query string generated with the default setting in home.html
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 在 home.html 中使用默认设置生成的查询字符串
- en: 'After a few seconds, the `show-prediction.html` web page is displayed with
    the prediction the model made for the values entered in `home.html`, as shown
    in *Figure 7.6*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，`show-prediction.html` 网页将显示模型对 `home.html` 中输入的值进行预测的结果，如*图 7.6*所示：
- en: '![Figure 7.6 – The model''s prediction displayed in show-prediction.html'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 模型在 show-prediction.html 中显示的预测结果'
- en: '](img/B16216_7_6.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_6.jpg)'
- en: Figure 7.6 – The model's prediction displayed in show-prediction.html
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 模型在 show-prediction.html 中显示的预测结果
- en: Congratulations! You have successfully set up a Flask server and exercised the
    web deployment of a fastai model in the context of simple web page deployment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已成功设置了 Flask 服务器，并在简单网页部署的背景下练习了 fastai 模型的网页部署。
- en: How it works…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: There was a lot going on behind the scenes when you ran through this recipe.
    In this section, we'll begin by going through an overview of the flow through
    the web deployment and then we'll dig deeper into the key pieces of code that
    make up the deployment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个配方时，幕后发生了很多事情。在本节中，我们将首先概述网页部署的流程，然后深入研究构成该部署的关键代码部分。
- en: Overview of how the web deployment of the fastai tabular model works
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速介绍 fastai 表格模型的网页部署工作原理
- en: 'The web deployment described in this recipe is a departure from the recipes
    you have seen so far in this book. Unlike the other recipes, which involved a
    single code file in the form of a Jupyter notebook, the web deployment incorporates
    code that is spread across a series of files, as shown in *Figure 7.7*:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中描述的网页部署与本书前面看到的配方有所不同。与其他配方（它们涉及以 Jupyter 笔记本形式呈现的单个代码文件）不同，网页部署涉及多个文件中分布的代码，如
    *图 7.7* 所示：
- en: '![Figure 7.7 – Overview of the web deployment of a fastai model using Flask'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.7 – 使用 Flask 部署 fastai 模型的网页概述'
- en: '](img/B16216_7_7.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_7.jpg)'
- en: Figure 7.7 – Overview of the web deployment of a fastai model using Flask
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 使用 Flask 部署 fastai 模型的网页概述
- en: 'Here are the key items highlighted by the numbers in *Figure 7.7*:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 *图 7.7* 中数字所标示的关键项：
- en: '`home.html` – This is the web page where the user specifies the `home.html`
    for every feature that was used to train the model. `home.html` incorporates a
    set of JavaScript functions that set the available values in each control, package
    up the user''s entries, and call `show-prediction.html` with the scoring parameters
    as arguments.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`home.html` – 这是用户指定每个特征的网页，用于训练模型时使用的特征。`home.html` 包含一组 JavaScript 函数，这些函数设置每个控件中的可用值，打包用户的输入，并调用
    `show-prediction.html`，将评分参数作为参数传递。'
- en: The Flask `web_flask_deploy.py` module – A Python module that uses the Flask
    library to serve the web pages that make up the web deployment. This module includes
    `home.html` and `show-prediction.html` that do most of the work for the web deployment.
    The view function for `show-prediction.html` parses the scoring parameters sent
    from `home.html`, assembles the scoring parameter values into a DataFrame, calls
    the trained model using the DataFrame containing the scoring parameters to get
    a prediction, generates a string from the model's prediction, and finally triggers
    `show-prediction.html` to be displayed with the prediction string.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flask `web_flask_deploy.py` 模块 – 一个 Python 模块，使用 Flask 库来服务构成网页部署的网页。该模块包括 `home.html`
    和 `show-prediction.html`，它们完成了网页部署的大部分工作。`show-prediction.html` 的视图函数解析从 `home.html`
    发送来的评分参数，将评分参数值组装成 DataFrame，使用包含评分参数的 DataFrame 调用训练好的模型进行预测，生成模型预测的字符串，最后触发
    `show-prediction.html` 显示预测字符串。
- en: The fastai `adult_sample_model.pkl` model – This is the model that you trained
    and saved in the *Saving a trained tabular model* recipe of [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*. The view function for `show-prediction.html`
    in the `web_flask_deploy.py` Flask module loads this model and then uses it to
    make a prediction with the scoring parameters entered in `home.html`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: fastai `adult_sample_model.pkl` 模型 – 这是你在 [*第 3 章*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)
    *《使用表格数据训练模型》* 中的 *保存训练好的表格模型* 配方中训练并保存的模型。`web_flask_deploy.py` Flask 模块中的 `show-prediction.html`
    视图函数加载此模型，并使用它对在 `home.html` 中输入的评分参数进行预测。
- en: '`show-prediction.html` – This web page displays the prediction made by the
    model on the scoring parameters entered in `home.html`. Once the user has read
    the prediction, they can select the `home.html` to enter another set of scoring
    parameters.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`show-prediction.html` – 这个网页显示模型根据在 `home.html` 中输入的评分参数所做的预测。用户阅读预测结果后，可以选择返回
    `home.html` 输入另一组评分参数。'
- en: That is a high-level summary of how the web deployment works. Next, we'll take
    a look at some of the key pieces of code that make up the deployment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于网页部署工作原理的高层次总结。接下来，我们将查看一些构成该部署的关键代码部分。
- en: Digging deeper into the code behind the web deployment
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入探索网页部署背后的代码
- en: Now that you have seen the high-level picture of what's happening behind the
    scenes, let's dig into two pieces of code that are particularly important to the
    overall web deployment. We'll go through the major code items that make up the
    deployment, including the Python code in the Flask server module as well as the
    JavaScript functions in the HTML files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了幕后发生的高层次过程，让我们深入探讨两段对整体 Web 部署特别重要的代码。我们将逐步解析部署中组成部分的主要代码，包括 Flask 服务器模块中的
    Python 代码以及 HTML 文件中的 JavaScript 函数。
- en: 'When you start the Flask server, as shown in *Step 2* of the recipe, the trained
    model is loaded into the Python module, as shown in this snippet from the Flask
    server code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动 Flask 服务器时，如食谱中的 *步骤 2* 所示，训练好的模型将被加载到 Python 模块中，以下是来自 Flask 服务器代码的片段：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here are the key parts of this snippet:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该片段的关键部分：
- en: '`path = Path(os.getcwd())` – Sets `path` to be the directory where you started
    the Flask server. The code assumes the model file is in the same directory.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path = Path(os.getcwd())` – 设置 `path` 为启动 Flask 服务器的目录。代码假设模型文件位于相同的目录中。'
- en: '`full_path = os.path.join(path,''adult_sample_model.pkl'')` – Defines the full
    path for the model, including the filename.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full_path = os.path.join(path,''adult_sample_model.pkl'')` – 定义了模型的完整路径，包括文件名。'
- en: '`learner = load_learner(full_path)` – Loads the model into `learner`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`learner = load_learner(full_path)` – 将模型加载到 `learner` 中。'
- en: 'When you go to `localhost:5000` in your browser, the `home.html` page gets
    displayed. How does this happen? In the `web_flask_deploy.py` Flask module, the
    `home.html` controls what happens when you navigate to `localhost:5000` when the
    Flask server is active, as shown in the following code snippet:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中访问 `localhost:5000` 时，将显示 `home.html` 页面。这个过程是如何发生的呢？在 `web_flask_deploy.py`
    Flask 模块中，`home.html` 控制了当 Flask 服务器运行时，你访问 `localhost:5000` 时发生的事情，如以下代码片段所示：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here are the key parts of this view function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是此视图函数的关键部分：
- en: '`@app.route(''/'')` – Specifies that this view function is applied when you
    navigate to the `localhost:5000` address'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@app.route(''/'')` – 指定当你访问 `localhost:5000` 地址时应用此视图函数。'
- en: '`return render_template(''home.html'',title=title)` – Specifies that `home.html`
    is displayed when you navigate to `localhost:5000`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return render_template(''home.html'',title=title)` – 指定当你访问 `localhost:5000`
    时显示 `home.html`。'
- en: 'As `home.html` is loaded, the action moves from Python in the Flask server
    module to a combination of HTML and JavaScript in `home.html`. First, the `load_selections()`
    function is called to load values into the controls in the web page, as shown
    in the following HTML statement:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `home.html` 被加载时，操作从 Flask 服务器模块中的 Python 转移到 `home.html` 中的 HTML 和 JavaScript
    的结合体。首先，调用 `load_selections()` 函数将值加载到网页上的控件中，如以下 HTML 语句所示：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `load_selections()` function populates the select controls (drop-down lists)
    on the page with lists specifying the valid values, such as the following for
    the `relationship` control:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_selections()` 函数通过指定有效值的列表填充页面上的选择控件（下拉列表），例如以下 `relationship` 控件的内容：'
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `load_selections()` function also includes `for` loops that set the values
    in the select controls to the lists of valid values, such as the following `for`
    loop that populates the `relationship` control:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_selections()` 函数还包括 `for` 循环，这些循环将有效值列表设置到选择控件中，例如以下 `for` 循环填充 `relationship`
    控件：'
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the controls for entering numeric values, the `load_selections()` function
    sets the default values that appear when the page is loaded. For example, the
    following statement in the `load_selections()` function sets the default value
    for the `age` field:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于输入数值的控件，`load_selections()` 函数设置页面加载时显示的默认值。例如，以下 `load_selections()` 函数中的语句为
    `age` 字段设置了默认值：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once the values are loaded in the controls and the page is displayed, the user
    can select values for the scoring parameters in the controls that are different
    from the defaults.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦值被加载到控件中并且页面显示，用户可以在控件中选择与默认值不同的评分参数值。
- en: 'After the user has selected values for the scoring parameters, the user can
    select the `link_with_args()` function gets called when the button is selected:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户选择了评分参数的值后，用户可以选择按钮，调用 `link_with_args()` 函数：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `link_with_args()` function calls the `getOption()` function that loads
    the values the user selected in the controls in `home.html` and builds the query
    string with these values, as shown in the following snippet from `getOption()`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`link_with_args()` 函数调用 `getOption()` 函数，加载用户在 `home.html` 中选择的控件值，并用这些值构建查询字符串，如下所示，这是
    `getOption()` 中的代码片段：'
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here are the key parts of this snippet:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该代码片段的关键部分：
- en: '`prefix = "/show-prediction/?"` – Specifies which view function in the Flask
    module will be invoked when the link is triggered.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefix = "/show-prediction/?"` – 指定当链接被触发时，Flask 模块中将调用哪个视图函数。'
- en: '`window.output` – Specifies the set of parameters included in the query string.
    This string is made up of a series of key value pairs, where each value equals
    the corresponding control in `home.html`.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.output` – 指定查询字符串中包含的参数集。这个字符串由一系列键值对组成，每个值等于在 `home.html` 中对应的控件。'
- en: '`document.querySelector(''.output'').textContent = window.output;` – Specifies
    that the query string is displayed in the browser window.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.querySelector(''.output'').textContent = window.output;` – 指定查询字符串将在浏览器窗口中显示。'
- en: You may recall seeing the query string in this recipe. In *Step 4* of the recipe,
    when you selected the `home.html`, the query string was briefly displayed at the
    bottom of the page before `show-prediction.html` was loaded.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得在这个过程中的查询字符串。在食谱的*步骤 4*中，当你选择 `home.html` 时，查询字符串会在页面底部短暂显示，随后加载 `show-prediction.html`。
- en: 'After calling `getOption()`, the `link_with_args()` function triggers a reference
    to `show-prediction.html` with the following statement:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `getOption()` 后，`link_with_args()` 函数通过以下语句触发对 `show-prediction.html` 的引用：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With this statement, the action switches from the world of HTML and JavaScript
    back to Python, and the view function for `show-prediction.html` is invoked in
    the Flask server. Here is the beginning of this view function where the scoring
    parameter values that were entered in `home.html` and passed along in the query
    string are loaded into the `score_df` DataFrame:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个语句，操作从 HTML 和 JavaScript 的世界切换回 Python，并在 Flask 服务器中调用 `show-prediction.html`
    的视图函数。以下是该视图函数的开始部分，其中在 `home.html` 中输入并通过查询字符串传递的评分参数值被加载到 `score_df` DataFrame
    中：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here are the key parts of this snippet:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该代码片段的关键部分：
- en: '`@app.route(''/show-prediction/'')` – Specifies that this view function is
    applied for the `show-prediction.html` web page.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@app.route(''/show-prediction/'')` – 指定此视图函数适用于 `show-prediction.html` 网页。'
- en: '`score_df = pd.DataFrame(columns=scoring_columns)` – Creates an empty dataframe
    to hold the scoring parameters.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score_df = pd.DataFrame(columns=scoring_columns)` – 创建一个空的 DataFrame 来存储评分参数。'
- en: '`score_df.at[0,col] = request.args.get(col)` – This statement is run for every
    column in the `scoring_columns` list. It copies the values in the query string
    that was built in the `getOption()` JavaScript function and passed as part of
    the reference to `show-prediction.html` to the corresponding column in the first
    row of the `score_df` dataframe. This is how the scoring parameter values that
    the user entered in `home.html` are brought into the Python Flask server module.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score_df.at[0,col] = request.args.get(col)` – 这个语句会针对 `scoring_columns` 列表中的每一列运行。它将查询字符串中由
    `getOption()` JavaScript 函数构建并作为引用传递到 `show-prediction.html` 的值复制到 `score_df`
    DataFrame 第一行的对应列。这就是用户在 `home.html` 中输入的评分参数值如何传入 Python Flask 服务器模块的方式。'
- en: 'Now that the scoring parameters have been loaded into the first row of the
    `score_df` dataframe, we can invoke the model on the first row of the dataframe,
    as shown in the following code snippet from the view function for `show-prediction.html`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，评分参数已被加载到 `score_df` DataFrame 的第一行中，我们可以在 DataFrame 的第一行上调用模型，正如以下来自 `show-prediction.html`
    视图函数的代码片段所示：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here are the key parts of this snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该代码片段的关键部分：
- en: '`pred_class,pred_idx,outputs = learner.predict(score_df.iloc[0])` – Invokes
    the model with the first row of the `score_df` DataFrame as input. The call has
    three outputs:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pred_class,pred_idx,outputs = learner.predict(score_df.iloc[0])` – 使用 `score_df`
    DataFrame 的第一行作为输入调用模型。此调用有三个输出：'
- en: a) `pred_class` lists the scoring parameters as they were fed into the model.
    For the categorical columns, the original scoring parameter value is replaced
    with the category identifier. For example, the value `United States` in the `native-country`
    column is replaced with `40.0`. These transformations are exactly the same as
    the transformations that were done on the training data back when you trained
    the model in [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*, Training
    Models with Tabular Data*. Thanks to the way that fastai manages these transformations,
    unlike Keras, you don't need to worry about maintaining a pipeline object and
    applying it when you deploy a model – fastai just takes care of it. This is a
    great advantage of fastai.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `pred_class` 列出了输入到模型中的评分参数。对于类别列，原始的评分参数值被替换为类别标识符。例如，`native-country` 列中的
    `United States` 被替换为 `40.0`。这些转换与训练数据时所做的转换完全相同，正如你在 [*第 3 章*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*《使用表格数据训练模型》*
    中所做的那样。由于 fastai 管理这些转换的方式，不像 Keras，你不需要担心在部署模型时维护管道对象并应用它——fastai 会自动处理这一切。这是
    fastai 的一个巨大优势。
- en: b) `pred_idx` – The index of the prediction. For this model, the prediction
    will be either 0 (indicating the individual has an income less than 50,000) or
    1 (indicating the individual has an income more than 50,000).
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `pred_idx` – 预测的索引。对于此模型，预测值将为 0（表示个人收入低于 50,000）或 1（表示个人收入高于 50,000）。
- en: c) `outputs` – Shows the probability of each prediction value.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `outputs` – 显示每个预测值的概率。
- en: '*Figure 7.8* shows an example of prediction output and how it corresponds to
    the `pred_class`, `pred_idx`, and `outputs` variables:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 7.8* 显示了预测输出的示例，以及它如何对应于 `pred_class`、`pred_idx` 和 `outputs` 变量：'
- en: '![Figure 7.8 – Example of model prediction output'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – 模型预测输出示例'
- en: '](img/B16216_7_8.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_8.jpg)'
- en: Figure 7.8 – Example of model prediction output
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 模型预测输出示例
- en: '`return(render_template(''show-prediction.html'',prediction=prediction))` –
    Specifies that `show-prediction.html` is displayed with the argument value set
    in this view function.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return(render_template(''show-prediction.html'',prediction=prediction))` –
    指定以该视图函数中设置的参数值显示 `show-prediction.html`。'
- en: 'With this statement, the action moves back to HTML as `show-prediction.html`
    is loaded in the browser. The following snippet shows the HTML that displays the
    prediction text:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作后，页面返回到 HTML，`show-prediction.html` 被加载到浏览器中。以下代码片段显示了展示预测文本的 HTML：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `{{ prediction.prediction_key }}` value corresponds to the `predict_string`
    value that was set in the view function for `show-prediction` in the Flask server.
    The result is that the prediction that the model made on the scoring parameters
    is displayed, as shown in *Figure 7.9*:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{ prediction.prediction_key }}` 值对应于 Flask 服务器中 `show-prediction` 的视图函数中设置的
    `predict_string` 值。结果是，模型对评分参数做出的预测会被显示出来，如 *图 7.9* 所示：'
- en: '![Figure 7.9 – The end result of the deployed model – a prediction on the scoring
    parameters'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.9 – 部署模型的最终结果 – 对评分参数的预测'
- en: '](img/B16216_7_9.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_9.jpg)'
- en: Figure 7.9 – The end result of the deployed model – a prediction on the scoring
    parameters
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 部署模型的最终结果 – 对评分参数的预测
- en: 'Now you have seen all the major code items that make up the entire flow of
    this web deployment of a fastai model. The flow goes through the following steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了构成整个 fastai 模型 Web 部署流程的所有主要代码项。该流程包括以下几个步骤：
- en: The flow begins when you start the Flask server. Once you have started the Flask
    server, it is ready to serve `home.html` at `localhost:5000`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流程从启动 Flask 服务器开始。一旦启动了 Flask 服务器，它就准备好在 `localhost:5000` 提供 `home.html`。
- en: When you go to `localhost:5000` in your browser, the view function for `home.html`
    runs in the Flask server and `home.html` is displayed in the browser.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在浏览器中访问 `localhost:5000` 时，Flask 服务器会运行 `home.html` 的视图函数，并在浏览器中显示 `home.html`。
- en: The flow then goes to HTML/JavaScript in `home.html`, where the user selects
    the scoring parameters and selects the **Get prediction** button.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后流程转到 `home.html` 中的 HTML/JavaScript，用户在此选择评分参数并点击 **获取预测** 按钮。
- en: The flow then returns to the Flask server where the view function for `show-prediction.html`
    is run to get a prediction from the model on the scoring parameters and to display
    `show-prediction.html` in the browser.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后流程返回到 Flask 服务器，运行 `show-prediction.html` 的视图函数，从模型中获取评分参数的预测，并在浏览器中展示 `show-prediction.html`。
- en: Finally, the flow returns back to HTML in `show-prediction.html`, where the
    model's prediction is displayed.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，流程回到`show-prediction.html`，在该页面上展示模型的预测结果。
- en: At this point, the user can select the `show-prediction.html` to start the process
    over again at *Step 2* with a different set of scoring parameters.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，用户可以选择`show-prediction.html`，使用不同的评分参数从*步骤2*重新开始整个过程。
- en: There's more…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'The tour through the web deployment example in this recipe only scratches the
    surface of what you can do with Flask, and it covers only the bare minimum of
    what you can do with modern HTML and JavaScript. A thorough exploration of how
    to develop web applications with Python is beyond the scope of this book, but
    if you are interested in learning more, you can check out the following resources:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的网络部署示例仅仅触及了Flask的表面，它只涵盖了现代HTML和JavaScript的基本应用。本书的范围无法深入探讨如何使用Python开发Web应用，但如果你有兴趣了解更多，可以参考以下资源：
- en: '*Deploying a Deep Learning Model using Flask* ([https://towardsdatascience.com/deploying-a-deep-learning-model-using-flask-3ec166ef59fb](https://towardsdatascience.com/deploying-a-deep-learning-model-using-flask-3ec166ef59fb))
    goes into additional details about how to use Flask to deploy deep learning models.
    This article is focused on deploying Keras models rather than fastai models, but
    the principles described in the article apply to both frameworks.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Flask部署深度学习模型* ([https://towardsdatascience.com/deploying-a-deep-learning-model-using-flask-3ec166ef59fb](https://towardsdatascience.com/deploying-a-deep-learning-model-using-flask-3ec166ef59fb))
    更详细地介绍了如何使用Flask部署深度学习模型。尽管这篇文章重点介绍的是部署Keras模型，而非fastai模型，但文章中描述的原则同样适用于这两种框架。'
- en: '*Responsive Web Design with HTML5 and CSS* ([https://www.amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563/ref=sr_1_2?dchild=1&keywords=html5+packt&qid=1623
    055650&sr=8-2](https://www.amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563/ref=sr_1_2?dchild=1&keywords=html5+packt&qid=1623055650&sr=8-2))
    gives a broad background on modern HTML and also covers **cascading style sheets**
    (**CSS**), which are used to control how web pages are rendered.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTML5与CSS的响应式网页设计* ([https://www.amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563/ref=sr_1_2?dchild=1&keywords=html5+packt&qid=1623055650&sr=8-2](https://www.amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563/ref=sr_1_2?dchild=1&keywords=html5+packt&qid=1623055650&sr=8-2))
    提供了现代HTML的广泛背景，并涉及了**层叠样式表**（**CSS**），它用于控制网页的渲染方式。'
- en: '*Clean Code in JavaScript* ([https://www.amazon.com/Clean-Code-JavaScript-reliable-maintainable/dp/1789957648/ref=sr_1_6?dchild=1&keywords=Javascript+Packt&qid
    =1623055616&sr=8-6](https://www.amazon.com/Clean-Code-JavaScript-reliable-maintainable/dp/1789957648/ref=sr_1_6?dchild=1&keywords=Javascript+Packt&qid=1623055616&sr=8-6))
    describes good programming practices for JavaScript. If you are reading this book,
    you are reasonably comfortable with Python, and you should not have much trouble
    picking up JavaScript. JavaScript doesn''t always get the respect it deserves
    from people who program in more illustrious languages such as C++ and Scala, but
    the fact is that JavaScript is remarkably flexible and really useful to know.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*JavaScript中的Clean Code* ([https://www.amazon.com/Clean-Code-JavaScript-reliable-maintainable/dp/1789957648/ref=sr_1_6?dchild=1&keywords=Javascript+Packt&qid=1623055616&sr=8-6](https://www.amazon.com/Clean-Code-JavaScript-reliable-maintainable/dp/1789957648/ref=sr_1_6?dchild=1&keywords=Javascript+Packt&qid=1623055616&sr=8-6))
    介绍了JavaScript的良好编程实践。如果你正在阅读这本书，说明你对Python已经有了相当的掌握，应该能够轻松地掌握JavaScript。虽然JavaScript在C++和Scala等更高大上的语言程序员中并不总是得到应有的尊重，但事实上，JavaScript非常灵活，学会它非常有用。'
- en: Deploying a fastai model trained on an image dataset
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署一个基于图像数据集训练的fastai模型
- en: In the *Deploying a fastai model trained on a tabular dataset* recipe, we went
    through the process of deploying a model trained on a tabular dataset. We deployed
    a model that predicted whether an individual would have an income over 50,000
    based on a set of characteristics called **scoring parameters**, including education,
    job category, and hours worked per week. To do this deployment, we needed a way
    to allow the user to select values for the scoring parameters and then show the
    prediction made by the trained fastai model on these scoring parameters.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用fastai部署基于表格数据集训练的模型*这一食谱中，我们讲解了如何部署一个基于表格数据集训练的模型。我们部署了一个根据一组被称为**评分参数**的特征（包括教育水平、工作类别和每周工作小时数）来预测个人是否会有超过50,000收入的模型。为了进行这个部署，我们需要一种方式让用户选择评分参数的值，并展示由训练好的fastai模型基于这些评分参数所做的预测。
- en: In this recipe, we will deploy the image classification model that you trained
    in the *Training a classification model with a standalone vision dataset* recipe
    of [*Chapter 6*](B16216_06_Final_VK_ePub.xhtml#_idTextAnchor152)*, Training Models
    with Visual Data*. This model predicts what fruit or vegetable is depicted in
    an image. Unlike the deployment of the tabular dataset model, to deploy the image
    dataset model we will need to be able to specify an image file on which to make
    a prediction.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将部署在[*第 6 章*](B16216_06_Final_VK_ePub.xhtml#_idTextAnchor152)*，训练具有视觉数据的模型*中的
    *使用独立视觉数据集训练分类模型* 处训练的图像分类模型。此模型可以预测图像中展示的水果或蔬菜。与表格数据集模型的部署不同，部署图像数据集模型时，我们需要能够指定要进行预测的图像文件。
- en: Note
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For the sake of simplicity, this deployment uses web pages with the same names
    (`home.html` and `show-prediction.html`) as the deployment of a tabular dataset
    that we did in the *Deploying a fastai model trained on a tabular dataset* recipe.
    However, these web pages are customized for the image model deployment.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，此部署使用与我们在*部署基于表格数据集训练的 fastai 模型*教程中相同名称的网页（`home.html` 和 `show-prediction.html`）。不过，这些网页是为图像模型部署定制的。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Confirm that you
    can access the files in the `deploy_image` directory of the `ch7` directory of
    your repo.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照*在本地系统上设置 fastai*教程中的步骤，成功安装了 fastai。确认你可以访问 `ch7` 目录中的 `deploy_image`
    目录下的文件。
- en: How to do it…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: To exercise the deployment of an image classification model on your local system,
    you will start the Flask server, open up the `home.html` page for this deployment
    in your browser, select an image file to get a prediction on, and then validate
    that you get a prediction for the image displayed in the `show-prediction.html`
    page for this deployment.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地系统上演练图像分类模型的部署，首先启动 Flask 服务器，打开浏览器中部署的 `home.html` 页面，选择一个图像文件进行预测，然后验证在该部署的
    `show-prediction.html` 页面中是否显示了图像的预测结果。
- en: 'Complete the following steps to exercise the deployment of a fastai model trained
    on an image dataset:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行操作，以演练部署在图像数据集上训练的 fastai 模型：
- en: From a command window/terminal on your local system, make `deploy_image` in
    the `ch7` directory of your repo your current directory.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地系统的命令窗口/终端中，将 `ch7` 目录中的 `deploy_image` 目录设置为当前目录。
- en: 'Enter the following command in the command line/terminal to start the Flask
    server:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行/终端输入以下命令以启动 Flask 服务器：
- en: '[PRE19]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open a browser window and enter the following in the address field:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器窗口，在地址栏输入以下内容：
- en: '[PRE20]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now select `test_images` subdirectory in your `deploy_images` directory. Select
    the lemon image file, `5_100.jpg`, and close the file dialog, for example, by
    selecting **Open** in Windows.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择 `deploy_images` 目录中的 `test_images` 子目录。选择柠檬图像文件 `5_100.jpg`，并关闭文件对话框，例如，在
    Windows 中选择 **打开**。
- en: When the file dialog closes, the name of the file you selected shows in `home.html`
    beside the **Choose File** button, as shown in *Figure* *7.12*:![Figure 7.12 –
    The name of the file you selected displayed in home.html
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当文件对话框关闭时，你选择的文件名会显示在 `home.html` 中的 **选择文件** 按钮旁边，如*图 7.12*所示：![图 7.12 – 你选择的文件名显示在
    home.html 页面中
- en: '](img/B16216_7_12.jpg)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16216_7_12.jpg)'
- en: Figure 7.12 – The name of the file you selected displayed in home.html
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.12 – 你选择的文件名显示在 home.html 页面中
- en: 'Now select `show-prediction.html` page is displayed with the model''s prediction
    for what is displayed in the image you selected in `home.html`, as shown in *Figure*
    *7.13*:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择`show-prediction.html` 页面，该页面显示模型对你在 `home.html` 中选择的图像的预测结果，如*图 7.13*所示：
- en: '![Figure 7.13 – The model''s prediction of what is in the image, shown in show-prediction.html'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.13 – 模型对图像内容的预测，显示在 show-prediction.html 页面中'
- en: '](img/B16216_7_13.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_13.jpg)'
- en: Figure 7.13 – The model's prediction of what is in the image, shown in show-prediction.html
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 模型对图像内容的预测，显示在 show-prediction.html 页面中
- en: Congratulations! You have successfully set up a Flask server and exercised the
    web deployment of a fastai model that predicts the object depicted in an image.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已成功设置了 Flask 服务器并演练了 fastai 模型的 Web 部署，该模型可以预测图像中展示的物体。
- en: How it works…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: Now that you have worked through the web deployment of a fastai image classification
    model, let's go through what's happening behind the scenes. We'll start by going
    through an overview of the deployment and then digging into the code differences
    between the deployment of the image classification model and the deployment of
    a tabular dataset model as described in the *Deploying a fastai model trained
    on a tabular dataset* recipe.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了 fastai 图像分类模型的 Web 部署，让我们来看一下幕后发生了什么。我们将从部署的概述开始，然后深入探讨图像分类模型和表格数据集模型部署之间的代码差异，正如在
    *《部署一个基于表格数据集训练的 fastai 模型》* 配方中所描述的那样。
- en: Overview of how the web deployment of the fastai image classification model
    works
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fastai 图像分类模型 Web 部署的工作概述
- en: 'Let''s review the end-to-end flow of the deployment, as shown in *Figure 7.14*:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下如 *图 7.14* 所示的端到端部署流程：
- en: '![Figure 7.14 – Overview of web deployment of a fastai image classification
    model using Flask'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.14 – 使用 Flask 部署 fastai 图像分类模型的 Web 概述'
- en: '](img/B16216_7_14.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_14.jpg)'
- en: Figure 7.14 – Overview of web deployment of a fastai image classification model
    using Flask
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 使用 Flask 部署 fastai 图像分类模型的 Web 概述
- en: 'Here are the key items highlighted by the numbers in *Figure 7.14*:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 *图 7.14* 中数字高亮的关键项目：
- en: '`home.html` – This is the web page where the user specifies the image file
    that they want the model to make a prediction on. The version of `home.html` used
    for the image classification model deployment incorporates HTML and JavaScript
    functions that display a file selection dialog, package up the name of the selected
    file, and call `show-prediction.html` with the name of the selected image file
    as an argument.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`home.html`——这是用户指定要让模型对其进行预测的图像文件的网页。用于图像分类模型部署的 `home.html` 版本包含了显示文件选择对话框、打包选中文件名称并调用
    `show-prediction.html` 的 HTML 和 JavaScript 函数，并将选定的图像文件名作为参数传递。'
- en: The Flask `web_flask_deploy_image_model.py` module – The Python module that
    uses the Flask library to serve the web pages that make up the web deployment.
    This module includes view functions for `home.html` and `show-prediction.html`.
    The view function for `show-prediction.html` ingests the name of the image file
    selected in `home.html`, calls the trained model using this filename to get a
    prediction, generates a string from the model's prediction, and finally triggers
    `show-prediction.html` to be displayed with the prediction string.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flask `web_flask_deploy_image_model.py` 模块——这个 Python 模块使用 Flask 库来提供构成 Web
    部署的网页。该模块包括 `home.html` 和 `show-prediction.html` 的视图函数。`show-prediction.html`
    的视图函数接收从 `home.html` 中选择的图像文件名称，使用该文件名调用训练好的模型进行预测，生成模型预测的字符串，并最终触发 `show-prediction.html`
    显示预测字符串。
- en: The fastai `fruits_360may3.pkl` image classification model – This is the model
    that you trained and saved in the *Training a classification model with a standalone
    vision dataset* recipe of [*Chapter 6*](B16216_06_Final_VK_ePub.xhtml#_idTextAnchor152)*,
    Training Models with Visual Data*. The view function for `show-prediction.html`
    in the `web_flask_deploy_image_model.py` Flask module loads this model and then
    uses it to make a prediction for the image file selected in `home.html`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: fastai `fruits_360may3.pkl` 图像分类模型——这是你在 *《使用独立视觉数据集训练分类模型》* 配方中训练并保存的模型，位于
    [*第6章*](B16216_06_Final_VK_ePub.xhtml#_idTextAnchor152)*，《使用视觉数据训练模型*》一章中。`web_flask_deploy_image_model.py`
    Flask 模块中的 `show-prediction.html` 视图函数加载这个模型，然后使用它对 `home.html` 中选择的图像文件进行预测。
- en: '`show-prediction.html` – This web page displays the prediction made by the
    model on the image file selected in `home.html`. On this page, the user can optionally
    select the `home.html` to select another image file to make a prediction on.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`show-prediction.html`——这个网页展示了模型对 `home.html` 中选择的图像文件所做的预测。在这个页面，用户可以选择 `home.html`
    来选择另一张图像文件进行预测。'
- en: That is a high-level summary of how the web deployment of the image classification
    model works.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是图像分类模型 Web 部署工作的高级总结。
- en: Digging deeper into the code behind the web deployment of the image classification
    model
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入分析图像分类模型 Web 部署背后的代码
- en: 'Now that we have reviewed the overall flow of the deployment of the image classification
    model, let''s take a look at some of the key differences between the deployment
    of a tabular model that we covered in the *Deploying a fastai model trained on
    a tabular dataset* recipe and the deployment of an image classification model
    that we worked through in this section. Here are the key differences:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了图像分类模型部署的整体流程，接下来让我们来看一下与我们在*《部署基于tabular数据集训练的fastai模型》*配方中涉及的tabular模型部署相比，图像分类模型部署的一些关键区别。以下是主要的区别：
- en: 'HTML in `home.html` – The version of `home.html` for the deployment of the
    tabular dataset model required a large number of controls to allow the user to
    specify all the required scoring parameters. The user needed to be able to specify
    values for all the features that were used to train the model. For the deployment
    of the image classification model, there is only one feature – the image file
    – so we only need a control for selecting a file. Here is the HTML for the file
    selection control:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home.html`中的HTML – 用于部署tabular数据集模型的`home.html`版本需要大量控件，以便用户能够指定所有必需的评分参数。用户需要能够为训练模型使用的所有特征指定值。对于图像分类模型的部署，只有一个特征——图像文件——因此我们只需要一个用于选择文件的控件。以下是文件选择控件的HTML：'
- en: '[PRE21]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here are the key items in this piece of HTML:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是该HTML片段中的关键内容：
- en: a) `input type="file"` – Specifies that this control is for inputting files
    from the local filesystem.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `input type="file"` – 指定该控件用于从本地文件系统输入文件。
- en: b) `accept="image/png, image/jpeg"` – Specifies that the file dialog that is
    opened from this control will only allow image files with `image/png` or `image/jpeg`
    content types to be selected.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `accept="image/png, image/jpeg"` – 指定从此控件打开的文件对话框只允许选择具有`image/png`或`image/jpeg`内容类型的图像文件。
- en: 'JavaScript in `home.html` – The version of `home.html` for the deployment of
    the tabular dataset model has three JavaScript functions:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home.html`中的JavaScript – 用于部署tabular数据集模型的`home.html`版本包含三个JavaScript函数：'
- en: a) `getOption()`, to get the values from the controls
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `getOption()`，用于从控件中获取值。
- en: b) `link_with_args()`, to call `getOption()` and send the query string to the
    view function for `show-prediction.html`
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `link_with_args()`，用于调用`getOption()`并将查询字符串发送到视图函数`show-prediction.html`。
- en: c) `load_selections()`, to initialize the controls
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `load_selections()`，用于初始化控件。
- en: 'The version of `home.html` used for the image classification model deployment
    doesn''t need `load_selections()` (because there aren''t any controls that need
    to initialized) and its version of `link_with_args()` is identical to the tabular
    model deployment version. That leaves the `getOption()` function, which is significantly
    different from the version in the tabular model deployment. Here is the image
    classification deployment version of `getOption()`:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于图像分类模型部署的`home.html`版本不需要`load_selections()`（因为没有需要初始化的控件），其版本的`link_with_args()`与tabular模型部署版本相同。剩下的是`getOption()`函数，它与tabular模型部署中的版本有显著区别。以下是图像分类部署版本的`getOption()`：
- en: '[PRE22]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here are the key items in the definition of `getOption()`:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是`getOption()`定义中的关键内容：
- en: a) `const input = document.querySelector('input');` – Associates `input` with
    the file selector.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `const input = document.querySelector('input');` – 将`input`与文件选择器关联起来。
- en: b) `const curFiles = input.files;` – Assigns the list of files associated with
    the file selector to `curFiles`.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `const curFiles = input.files;` – 将与文件选择器关联的文件列表赋值给`curFiles`。
- en: c) `for(const file of curFiles) { file_value.push(file.name);}` – Loops through
    the files in the file list associated with the file selector and adds each filename
    to the `file_value` list.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `for(const file of curFiles) { file_value.push(file.name);}` – 遍历与文件选择器关联的文件列表，并将每个文件名添加到`file_value`列表中。
- en: 'd) `window.output = prefix.concat("file_name=",file_value[0])` – Builds the
    query string using the first element from the `file_value` list of filenames.
    We will only make predictions on one file at a time, so we just need one filename
    for the query string. The resulting query string would look something like this:
    `/show-prediction/?file_name=5_100.jpg`.'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `window.output = prefix.concat("file_name=",file_value[0])` – 使用`file_value`文件名列表中的第一个元素构建查询字符串。由于我们每次只对一个文件进行预测，因此查询字符串只需要一个文件名。最终生成的查询字符串类似于：`/show-prediction/?file_name=5_100.jpg`。
- en: 'View function for `show-prediction.html` in the Flask server – The following
    code snippet shows what this view function looks like for the image classification
    web deployment:'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask 服务器中的 `show-prediction.html` 视图函数 – 以下代码片段展示了图像分类 Web 部署的视图函数：
- en: '[PRE23]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here are the key items in the definition of this view function:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是定义此视图函数时的关键项：
- en: a) `image_file_name = request.args.get("file_name")` – Sets the value of `image_file_name`
    to be the filename from the query string.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `image_file_name = request.args.get("file_name")` – 将 `image_file_name` 的值设置为查询字符串中的文件名。
- en: b) `full_path = os.path.join(path,image_directory,image_file_name)` – Sets the
    value of `full_path` to be the fully qualified filename for the image file selected
    in `home.html`. This assumes that the file was selected from the `test_images`
    subdirectory of the directory where you are running the Flask server.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `full_path = os.path.join(path,image_directory,image_file_name)` – 将 `full_path`
    的值设置为在 `home.html` 中选择的图像文件的完整文件名。假设该文件是从运行 Flask 服务器的目录中的 `test_images` 子目录中选择的。
- en: c) `img = PILImage.create(full_path)` – Creates an image object called `img`
    for the image file selected in `home.html`.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `img = PILImage.create(full_path)` – 为在 `home.html` 中选择的图像文件创建一个名为 `img`
    的图像对象。
- en: d) `pred_class, ti1, ti2 = learner.predict(img)` – Gets a prediction from the
    image classification model for the `img` object. `pred_class` contains the category
    (such as *Apple* or *Pear*) predicted by the model for the image file.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `pred_class, ti1, ti2 = learner.predict(img)` – 从图像分类模型中获取预测结果，预测的对象是 `img`。`pred_class`
    包含模型对图像文件预测的类别（如 *苹果* 或 *梨*）。
- en: e) `return(render_template('show-prediction.html',prediction=prediction))` –
    Specifies that `show-prediction.html` is displayed with the argument value set
    in this view function.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e) `return(render_template('show-prediction.html',prediction=prediction))` –
    指定显示 `show-prediction.html` 并在此视图函数中设置参数值。
- en: Now you have seen all the major code differences between the deployment of the
    tabular dataset model and the deployment of the image classification model.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了在表格数据集模型部署与图像分类模型部署之间的所有主要代码差异。
- en: There's more…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: In this chapter, you have seen two examples of deploying fastai models using
    a Flask-based web application. This isn't the only approach that you can take
    to deploy models. Other approaches include deploying models via REST API endpoints
    (so that other applications can invoke the models directly) or encapsulating models
    along with their dependencies in other applications. Models can be packaged with
    the dependencies (such as required Python libraries) in Docker containers, and
    then these containers can be made available to other applications through orchestration
    systems such as Kubernetes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经看到了两个使用基于 Flask 的 Web 应用程序部署 fastai 模型的示例。这并不是你可以采用的唯一部署模型的方法。其他方法包括通过
    REST API 端点部署模型（以便其他应用程序可以直接调用模型），或将模型及其依赖项封装到其他应用程序中。可以将模型和依赖项（例如所需的 Python 库）打包到
    Docker 容器中，然后通过像 Kubernetes 这样的编排系统将这些容器提供给其他应用程序。
- en: 'Rather than dwelling on these general deployment concepts, it may be more useful
    to review some concrete approaches to deploying fastai models in particular. Here
    is a sample of approaches to deploying fastai models:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 与其停留在这些一般的部署概念上，可能更有用的是回顾一些具体的快速部署 fastai 模型的方法。以下是部署 fastai 模型的一些方法示例：
- en: 'Deploying with Amazon SageMaker, the AWS machine learning environment, as described
    here: [https://aws.amazon.com/blogs/machine-learning/building-training-and-deploying-fastai-models-with-amazon-sagemaker/](https://aws.amazon.com/blogs/machine-learning/building-training-and-deploying-fastai-models-with-amazon-sagemaker/).
    This approach requires using some PyTorch code directly and may not have been
    validated on the latest version of fastai.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon SageMaker（AWS 的机器学习环境）进行部署，具体描述请参见：[https://aws.amazon.com/blogs/machine-learning/building-training-and-deploying-fastai-models-with-amazon-sagemaker/](https://aws.amazon.com/blogs/machine-learning/building-training-and-deploying-fastai-models-with-amazon-sagemaker/)。这种方法需要直接使用一些
    PyTorch 代码，并且可能未在 fastai 的最新版本上进行验证。
- en: 'Deploying in AWS using TorchServe, as described here: [https://aws.amazon.com/blogs/opensource/deploy-fast-ai-trained-pytorch-model-in-torchserve-and-host-in-amazon-sagemaker-inference-endpoint/](https://aws.amazon.com/blogs/opensource/deploy-fast-ai-trained-pytorch-model-in-torchserve-and-host-in-amazon-sagemaker-inference-endpoint/).
    This approach has fewer *moving parts* than the approach described in the previous
    point, and it is more current, but the essence of the approach seems to be re-implementing
    the fastai model in PyTorch.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TorchServe 在 AWS 中部署，如此处所述：[https://aws.amazon.com/blogs/opensource/deploy-fast-ai-trained-pytorch-model-in-torchserve-and-host-in-amazon-sagemaker-inference-endpoint/](https://aws.amazon.com/blogs/opensource/deploy-fast-ai-trained-pytorch-model-in-torchserve-and-host-in-amazon-sagemaker-inference-endpoint/)。这种方法相比前述方法，*组件较少*，并且更为现代，但方法的核心似乎是重新实现
    fastai 模型在 PyTorch 中的运行。
- en: 'Deploying using Google Cloud Platform, as described here: [https://jianjye.medium.com/how-to-deploy-fast-ai-models-to-google-cloud-functions-for-predictions-e3d73d71546b](https://jianjye.medium.com/how-to-deploy-fast-ai-models-to-google-cloud-functions-for-predictions-e3d73d71546b).'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google Cloud Platform 部署，如此处所述：[https://jianjye.medium.com/how-to-deploy-fast-ai-models-to-google-cloud-functions-for-predictions-e3d73d71546b](https://jianjye.medium.com/how-to-deploy-fast-ai-models-to-google-cloud-functions-for-predictions-e3d73d71546b)。
- en: 'Deploying using Azure, as described here: [https://forums.fast.ai/t/platform-azure/65527/7](https://forums.fast.ai/t/platform-azure/65527/7).'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 部署，如此处所述：[https://forums.fast.ai/t/platform-azure/65527/7](https://forums.fast.ai/t/platform-azure/65527/7)。
- en: This list is not exhaustive but it does demonstrate the variety of deployment
    options available for fastai models.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并不详尽，但它展示了可供 fastai 模型部署的各种选项。
- en: Maintaining your fastai model
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护你的 fastai 模型
- en: Deploying a model is not the end of the story. Once you have deployed a model,
    you need to maintain the deployment so that it matches the current characteristics
    of the data on which the model is trained. A thorough description of how to maintain
    a deep learning model in production is beyond the scope of this book, but it is
    worthwhile to touch on how to maintain models in the context of the simple model
    deployments described in this chapter. In this recipe, we will look at actions
    you could take to maintain the tabular model that you deployed in the *Deploying
    a fastai model trained on a tabular dataset* recipe.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 部署一个模型并不是故事的结束。一旦你部署了一个模型，你需要维护该部署，以确保它与模型训练所使用的当前数据特征匹配。如何在生产环境中维护深度学习模型的详细描述超出了本书的范围，但值得简要提及如何在本章所描述的简单模型部署环境下维护模型。在本教程中，我们将讨论你可以采取哪些措施来维护在
    *部署基于表格数据集训练的 fastai 模型* 中部署的表格模型。
- en: Getting ready
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Also ensure that
    you have the Flask server started for the tabular model deployment by following
    *Steps 1, 2, and 3* from the *Deploying a fastai model trained on a tabular dataset*
    recipe.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照 *在本地系统上设置 fastai* 这个教程的步骤完成安装，确保 fastai 已经安装在你的本地系统中。同时，确保你已经启动了用于表格模型部署的
    Flask 服务器，可以通过遵循 *部署基于表格数据集训练的 fastai 模型* 这个教程中的 *步骤 1, 2 和 3* 来完成。
- en: 'In this recipe, you will be doing some basic analysis of the training data
    that you used to train the tabular model deployed in the *Deploying a fastai model
    trained on a tabular dataset* recipe. To prepare for this analysis, confirm that
    you can use your spreadsheet of choice (such as Excel or Google Sheets) to open
    up `adult.csv`, the file in the `ADULT_SAMPLE` dataset that contains the training
    data. If you don''t already have `adult.csv` on your local system, follow these
    steps to get this file on your local system and confirm you can open it up with
    your spreadsheet application:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，你将对用于训练表格模型的数据进行一些基本分析，这个模型已在 *部署基于表格数据集训练的 fastai 模型* 这个教程中进行了部署。为了进行此分析，请确认你可以使用你选择的电子表格应用（如
    Excel 或 Google Sheets）打开 `adult.csv` 文件，这是 `ADULT_SAMPLE` 数据集中的训练数据文件。如果你尚未在本地系统中拥有
    `adult.csv`，请按照以下步骤获取该文件，并确认你可以使用电子表格应用打开它：
- en: 'In your Gradient environment, enter the following command in a terminal window
    to copy `adult.csv` to your `temp` directory:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Gradient 环境中，在终端窗口输入以下命令，将 `adult.csv` 复制到你的 `temp` 目录：
- en: '[PRE24]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In JupyterLab in your Gradient environment, navigate to the `temp` directory
    where you copied `adult.csv` in the previous step, right-click on `adult.csv`,
    and select **Download**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Gradient 环境中的 JupyterLab 中，导航到你在前一步复制 `adult.csv` 的 `temp` 目录，右键点击 `adult.csv`
    并选择 **下载**。
- en: 'Use your spreadsheet application to open up the local copy of `adult.csv` that
    you downloaded in the previous step. *Figure 7.15* shows what the first few rows
    of `adult.csv` look like in Excel:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的电子表格应用程序打开在上一步中下载的本地`adult.csv`副本。*图 7.15* 显示了`adult.csv`在 Excel 中的前几行：
- en: '![Figure 7.15 – The first few rows of adult.csv in Excel'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.15 – adult.csv 在 Excel 中的前几行'
- en: '](img/B16216_7_15.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_15.jpg)'
- en: Figure 7.15 – The first few rows of adult.csv in Excel
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – adult.csv 在 Excel 中的前几行
- en: Note
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You may wonder why I am suggesting using a spreadsheet to examine the data
    in this recipe. Why not use Python? There are a couple of reasons I recommend
    a spreadsheet here. First, no less an authority than Jeremy Howard stated that
    Excel is a great data science tool, and I happen to think he is absolutely right.
    It''s flexible, lightweight, and faster than Python for the kind of simple investigation
    on a small dataset that I''m featuring in this recipe. Second, Excel helped me
    to debug a problem with the deployment of the tabular model. When I first tested
    the deployment, I struggled to understand why the deployed model produced different
    predictions than the model invoked in a Python notebook. However, once I examined
    the data in Excel, the problem was obvious: all categorical values began with
    spaces in the data used for training the model. The categorical values that users
    could select in the deployment didn''t start with spaces, so the model did not
    recognize them as being the same as the categorical values it had encountered
    at training time. Excel gave me a quick way to detect the root cause of the problem.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么我建议使用电子表格来检查此配方中的数据，而不是使用 Python？我推荐在这里使用电子表格有几个原因。首先，甚至像 Jeremy Howard
    这样的权威人物都表示 Excel 是一个很棒的数据科学工具，而我恰好认为他完全正确。它灵活、轻便，并且对于在小数据集上进行简单调查，比 Python 更快。其次，Excel
    帮助我调试了表格模型部署中的问题。当我第一次测试部署时，我很难理解为什么部署的模型与在 Python 笔记本中调用的模型产生不同的预测。然而，一旦我在 Excel
    中检查数据，问题就显而易见了：用于训练模型的数据中的所有类别值都以空格开头。而在部署中，用户可以选择的类别值并没有以空格开头，因此模型没有将它们识别为与训练时遇到的类别值相同。Excel
    给了我一个快速的方式来检测问题的根本原因。
- en: How to do it…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To exercise some model maintenance actions, complete the following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行一些模型维护操作，请完成以下步骤：
- en: 'First, take a closer look at how categorical values are represented in `ADULT_SAMPLE`.
    If you don''t already have your local copy of `adult.csv` open in your spreadsheet
    application, open it up now. Select one of the values in the `workclass` column.
    Do you notice anything unusual about the value? Check out the values in some of
    the other categorical columns: `relationship` and `native-country`. You will see
    that the values in every categorical column begin with a blank.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，仔细观察`ADULT_SAMPLE`中类别值的表示方式。如果你还没有在电子表格应用程序中打开本地的`adult.csv`副本，现在就打开它。选择`workclass`列中的一个值。你是否注意到该值有任何不寻常的地方？查看其他一些类别列中的值：`relationship`和`native-country`。你会看到每个类别列中的值都以空格开头。
- en: Recall that in `home.html`, the user is constrained in the choices they can
    make for each of the categorical features. Open up `home.html` in the tabular
    model deployment and see what values are available for `workclass`. *Figure 7.16*
    shows the values that the user can select for `workclass`:![Figure 7.16 – Values
    available for workclass in home.html
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请回想，在`home.html`中，用户在每个类别特征上可以选择的值是有限制的。打开表格模型部署中的`home.html`，查看`workclass`可以选择的值。*图
    7.16* 显示了用户可以为`workclass`选择的值：![图 7.16 – home.html 中可用的 `workclass` 值
- en: '](img/B16216_7_16.jpg)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16216_7_16.jpg)'
- en: Figure 7.16 – Values available for workclass in home.html
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.16 – home.html 中可用的 `workclass` 值
- en: 'The values that users can choose in `home.html` for the categorical columns
    are defined in a series of lists in the `load_selections()` JavaScript function.
    Here are the lists defined in the `load_selections()` JavaScript function for
    `workclass`, `relationship`, and `native-country`:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在`home.html`中可以选择的类别列的值是通过`load_selections()` JavaScript 函数中的一系列列表定义的。以下是`load_selections()`
    JavaScript 函数中为`workclass`、`relationship`和`native-country`定义的列表：
- en: '[PRE25]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Notice how the values in each of these lists begin with a blank, just like the
    values in the corresponding categorical columns in `adult.csv`. The values in
    these lists are used to build the query string, which in turn gets used as input
    to get a prediction from the model in the view function for `show-prediction.html`.
    What would have happened if the values in the lists in `home.html` had been defined
    without leading blanks?
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这些列表中的值每个都以一个空格开始，就像`adult.csv`中对应类别列的值一样。这些列表中的值用于构建查询字符串，查询字符串又被用作输入，以从模型中获取预测，作为`show-prediction.html`视图函数的输入。如果`home.html`中的列表值定义时没有前导空格，会发生什么情况？
- en: 'Suppose that the training data for the model gets expanded to include individuals
    who come from the `adult.csv` that includes rows with the value `United-Kingdom`
    in the `native-country` column. Here is what you would need to do to update the
    deployment to adapt to this change:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设模型的训练数据已经扩展，包括来自`adult.csv`的数据，这些数据在`native-country`列中包含`United-Kingdom`值。你需要做以下操作来更新部署以适应这个变化：
- en: a) Retrain the model with the new version of `adult.csv` and save the new trained
    model to a `pkl` file using the `learner.export()` fastai API. For the purposes
    of this recipe, suppose that you call the new `adult_sample_model_new.pkl` model.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 使用新版本的`adult.csv`重新训练模型，并使用`learner.export()` fastai API将新的训练模型保存为`pkl`文件。为了本教程的目的，假设你将新的模型命名为`adult_sample_model_new.pkl`。
- en: b) Copy the updated `adult_sample_model_new.pkl` model file into the `deploy_tabular`
    directory on your local system.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 将更新后的`adult_sample_model_new.pkl`模型文件复制到本地系统的`deploy_tabular`目录。
- en: 'c) Update the definition of the model path in the `web_flask_deploy.py` Flask
    server module to include the new model filename:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 更新`web_flask_deploy.py` Flask服务器模块中模型路径的定义，包含新的模型文件名：
- en: '[PRE26]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'd) Update `native_country_list` in `home.html` to include the new value:'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 更新`home.html`中的`native_country_list`，以包括新的值：
- en: '[PRE27]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You would need to take the same steps to update the deployment for new values
    in any of the categorical columns: retrain the model with the updated training
    dataset, copy the updated trained model to the deployment directory, update the
    Flask server so that it loads the updated model, and update the list of valid
    categorical values in `home.html`.'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于任何类别列的新值，你需要采取相同的步骤来更新部署：使用更新后的训练数据集重新训练模型，将更新后的训练模型复制到部署目录，更新Flask服务器以加载更新后的模型，并在`home.html`中更新有效的类别值列表。
- en: In the previous step, we saw what we will need to do if the dataset gets expanded
    with new categorical values. What if a brand-new column is added to the dataset?
    Just like the process described in *Step 4*, you would need to retrain the model
    on the updated training dataset that includes the new column, copy the new model
    into the `deploy_tabular` directory, and update `web_flask_deploy.py` so that
    it loads the new model. Finally, you would need to update `home.html` to allow
    the user to enter information about the new column. The updates you need to make
    depend on whether the new column is `home.html` in each case.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一阶段，我们了解了如果数据集随着新的类别值扩展，我们需要做什么。如果数据集中添加了一个全新的列呢？就像*步骤 4*中描述的过程一样，你需要在包含新列的更新训练数据集上重新训练模型，将新模型复制到`deploy_tabular`目录，并更新`web_flask_deploy.py`以加载新模型。最后，你还需要更新`home.html`，以便用户能够输入新列的信息。你需要进行的更新取决于新列是否在每个`home.html`的情况下。
- en: 'Suppose you need to update the deployment to handle a new continuous column
    called `years-in-job` – a count of how many years the individual has been in their
    current job. The valid values are 0 to 45, and the default value is 5\. To add
    this column, you need to make several updates to `home.html`. First, you need
    to add the following code to define a control for this new column:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你需要更新部署，以处理一个名为`years-in-job`的新连续列——即记录个人在当前工作岗位上工作的年数。有效值为0到45，默认值为5。为了添加这个列，你需要对`home.html`进行几项更新。首先，你需要添加以下代码来定义这个新列的控制项：
- en: '[PRE28]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, you need to add the following line to the `load_selection()` JavaScript
    function to set the default value:'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，你需要在`load_selection()` JavaScript函数中添加以下行，以设置默认值：
- en: '[PRE29]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, you need to add the following line to the `getOption()` JavaScript function
    to set the value that will be included in the query string for this column:'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，你需要在`getOption()` JavaScript函数中添加以下行，以设置将包含在查询字符串中的这个列的值：
- en: '[PRE30]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, you need to add the following to the end of the query string used
    to define `window.output`:'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，你需要在用于定义`window.output`的查询字符串末尾添加以下内容：
- en: '[PRE31]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Suppose you need to update the deployment to handle a new categorical column
    called `work-location` that specifies the location of the individual''s current
    job. Valid values for this column are `remote`, `on-site`, and `mixed`. To adapt
    `home.html` to work with this new column, start by adding the following code to
    define a control for the `work-location` column:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你需要更新部署，处理一个新的分类列 `work-location`，它指定个人当前工作的地点。该列的有效值包括 `remote`（远程）、`on-site`（现场）和
    `mixed`（混合）。为了让 `home.html` 适应这个新列，首先通过添加以下代码来定义 `work-location` 列的控制：
- en: '[PRE32]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, add the following lines to the `load_selection()` JavaScript function
    to set the values for the control for the new column. Note that we assume that
    like the other categorical columns, values in `work-location` will be preceded
    by a blank, so the values in `work_location_list` all begin with blanks:'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，向 `load_selection()` JavaScript 函数添加以下几行代码，以设置新列控制的值。请注意，我们假设与其他分类列一样，`work-location`
    中的值将以空格开头，因此 `work_location_list` 中的所有值都以空格开始：
- en: '[PRE33]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, add the following lines to the `getOption()` JavaScript function to set
    the value that will be included in the query string for this column:'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，向`getOption()` JavaScript 函数添加以下几行代码，以设置查询字符串中包含该列的值：
- en: '[PRE34]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, add the following to the end of the query string used to define `window.output`:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，向用于定义 `window.output` 的查询字符串的末尾添加以下内容：
- en: '[PRE35]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Congratulations! You have worked through some of the actions required to maintain
    the deployment of a model to ensure it can adapt to changes in the training dataset.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了维护模型部署的一些必要操作，确保它能够适应训练数据集的变化。
- en: How it works…
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In this recipe, we reviewed how you could maintain the web deployment of a model
    trained on tabular data. We saw the steps we would take to adapt the deployment
    to work with changes in the training dataset. The dataset changes we covered were
    new values in existing categorical columns, new continuous columns, and new categorical
    columns.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们回顾了如何维持在表格数据上训练的模型的网络部署。我们了解了为适应训练数据集变化而调整部署的步骤。我们讨论的那些数据集变化包括现有分类列中的新值、新的连续列和新的分类列。
- en: In an industrial-strength production deployment, the schema of the dataset,
    that is, the characteristics of all the columns that make up the dataset, would
    be maintained outside of the HTML files. For example, we might maintain the schema
    in a separate configuration file that had information about the columns in the
    dataset. Instead of being hardcoded, the controls and valid values in `home.html`
    would be built on the fly using the contents of the configuration file.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业级生产部署中，数据集的架构，即构成数据集的所有列的特征，将保存在 HTML 文件之外。例如，我们可能会将架构保存在一个单独的配置文件中，里面包含有关数据集列的信息。这样一来，`home.html`
    中的控制和有效值就不是硬编码的，而是根据配置文件的内容动态生成。
- en: With this kind of dynamic setup, when a new column is added to the dataset or
    the valid values for a column change, we will only have to update the definition
    of the dataset schema in the configuration file and `home.html` would be updated
    automatically. To keep the web deployment as easy to follow as possible, we code
    the controls and valid values directly in `home.html` instead of building them
    dynamically. This made the *Deploying a fastai model trained on a tabular dataset*
    recipe easier to follow, but it also meant there were several places in `home.html`
    that had to be updated to maintain the deployment when the dataset changed.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种动态设置方式，当数据集添加新列或列的有效值发生变化时，我们只需更新配置文件中的数据集架构定义，`home.html` 将会自动更新。为了让网络部署尽可能简单，我们将控制和有效值直接编写在
    `home.html` 中，而不是动态生成它们。这使得 *基于表格数据训练 fastai 模型的部署* 食谱更易于跟随，但也意味着在 `home.html`
    中有多个地方需要更新，以维持数据集发生变化时的部署。
- en: There's more…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: In this recipe, we talked about how to handle changes to the dataset schema,
    but we didn't talk about how to deal with changes in the distribution of the dataset
    or how to monitor the model to ensure that it maintained its performance over
    time. Both of these issues are critical to maintaining a deployed model but they
    are beyond the scope of this book.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们讨论了如何处理数据集架构的变更，但我们没有讨论如何处理数据集分布的变化，或者如何监控模型以确保它随着时间的推移保持其性能。这两个问题对于维持已部署的模型至关重要，但它们超出了本书的范围。
- en: 'If you are interested in learning more about monitoring the performance of
    models in production, this article provides a great overview: [https://christophergs.com/machine%20learning/2020/03/14/how-to-monitor-machine-learning-models/](https://christophergs.com/machine%20learning/2020/03/14/how-to-monitor-machine-learning-models/).'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解更多关于在生产环境中监控模型性能的内容，这篇文章提供了一个很好的概述：[https://christophergs.com/machine%20learning/2020/03/14/how-to-monitor-machine-learning-models/](https://christophergs.com/machine%20learning/2020/03/14/how-to-monitor-machine-learning-models/)。
- en: Test your knowledge
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: Now that you have deployed two kinds of fastai models and worked through some
    of the challenges related to maintaining deployed models, you can try some additional
    variations on deployment to exercise what you've learned.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经部署了两种fastai模型，并解决了与维护已部署模型相关的一些挑战，你可以尝试一些额外的部署变种，来锻炼你所学到的内容。
- en: Getting ready
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Also, ensure that
    you have the Flask server started for the image classification model deployment
    by following *Steps 1, 2,* and *3* in the *Deploying a fastai model trained on
    an image dataset* recipe.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照*在本地系统上设置fastai*教程中的步骤，在本地系统上安装了fastai。同时，确保你已经按照*部署在图像数据集上训练的fastai模型*教程中的*第1步、第2步*和*第3步*，启动了Flask服务器以进行图像分类模型的部署。
- en: 'To experiment on the image classification model deployment, make a copy of
    the `deploy_image` directory. To do this, make the directory that contains `deploy_image`
    your current directory and run the following command to make a copy of the directory
    and its contents called `deploy_image_test`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在图像分类模型部署上进行实验，复制`deploy_image`目录。为此，将包含`deploy_image`的目录设置为当前目录，并运行以下命令来复制该目录及其内容，命名为`deploy_image_test`：
- en: '[PRE36]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it…
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到……
- en: 'You can follow the steps in this recipe to extend and enhance the model deployment
    that you followed in the *Deploying a fastai model trained on an image dataset*
    recipe to allow the user to select multiple image files in `home.html` and show
    predictions for all the images in `show-prediction.html`:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照此教程中的步骤，扩展和增强你在*部署在图像数据集上训练的fastai模型*教程中遵循的模型部署，以允许用户在`home.html`中选择多个图像文件，并在`show-prediction.html`中显示所有图像的预测结果：
- en: Make `deploy_image_test` your current directory.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`deploy_image_test`设置为当前目录。
- en: To allow users to select multiple files and show predictions for all the files
    at once, you will need to update `home.html`, the Flask server, and `show-prediction.html`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了允许用户选择多个文件并同时显示所有文件的预测结果，你需要更新`home.html`、Flask服务器和`show-prediction.html`。
- en: 'Start by updating `home.html` so that the user can select multiple files in
    the file dialog. Add the `multiple` attribute to the definition of the file dialog
    control, as shown in the following HTML snippet:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先更新`home.html`，使用户能够在文件对话框中选择多个文件。向文件对话框控件的定义中添加`multiple`属性，如下所示的HTML代码片段所示：
- en: '[PRE37]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now the user will be able to select more than one file in the file dialog.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，用户将能够在文件对话框中选择多个文件。
- en: 'Next, update the `getOption()` JavaScript function in `home.html` to build
    a list of filenames to add to the query string and send back to the Flask server.
    The updated `getOption()` function looks like this:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新`home.html`中的`getOption()` JavaScript函数，构建一个文件名列表，将其添加到查询字符串中，并发送回Flask服务器。更新后的`getOption()`函数如下所示：
- en: '[PRE38]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Here are the key updated items in the `getOption()` function:'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是`getOption()`函数中的关键更新项：
- en: a) `var file_list = file_list_prefix.concat(file.name);` – Specifies that if
    this is the first file, initialize the `file_list` string
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `var file_list = file_list_prefix.concat(file.name);` – 指定如果这是第一个文件，则初始化`file_list`字符串。
- en: b) `file_list = file_list.concat("&file_name=",file.name);` – Specifies that
    if this isn't the first file, add the filename to the end of the `file_list` string
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `file_list = file_list.concat("&file_name=",file.name);` – 指定如果这不是第一个文件，将文件名添加到`file_list`字符串的末尾。
- en: c) `window.output = prefix.concat("file_path=",file_path,file_list)` – Specifies
    that the query string includes the `file_list` string, which has the filenames
    for all the image files selected by the user
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `window.output = prefix.concat("file_path=",file_path,file_list)` – 指定查询字符串包括`file_list`字符串，其中包含用户选择的所有图像文件的文件名。
- en: You have completed the updates required in `home.html` to handle multiple image
    files.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你已经完成了`home.html`中所需的更新，以处理多个图像文件。
- en: 'Now it''s time to update the Flask server. First, add the following function
    to the Flask server. You will use this function later to build the parameters
    that you will send to `show-prediction.html`:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候更新 Flask 服务器了。首先，向 Flask 服务器中添加以下函数。稍后你将使用这个函数构建要发送到 `show-prediction.html`
    的参数：
- en: '[PRE39]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, update the view function for `show-prediction.html`. First, you will
    want to bring the list of filenames that you built in the `getOption()` function
    of `home.html` into a Python list. The following statement will create such a
    list called `image_file_name_list`:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新 `show-prediction.html` 的视图函数。首先，你需要将你在 `home.html` 的 `getOption()` 函数中构建的文件名列表转为
    Python 列表。以下语句将创建一个名为 `image_file_name_list` 的列表：
- en: '[PRE40]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Next, update the view function for `show-prediction.html` so that you iterate
    through `image_file_name_list` to get a prediction for each file in the list.
    Save the `pred_class` value for each prediction in a list called `prediction_string_list`.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新 `show-prediction.html` 的视图函数，使其能够遍历 `image_file_name_list`，为列表中的每个文件获取预测结果。将每个预测的
    `pred_class` 值保存在一个名为 `prediction_string_list` 的列表中。
- en: 'Use the `package_list` function that you defined in *Step 5* to prepare `prediction_string_list`
    to send to `show-prediction.html`:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你在 *步骤 5* 中定义的 `package_list` 函数来准备 `prediction_string_list`，并将其发送到 `show-prediction.html`：
- en: '[PRE41]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Update the `return` statement of the view function to include `prediction_list`:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新视图函数的 `return` 语句，包含 `prediction_list`：
- en: '[PRE42]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now you have completed the updates to the Flask server required to handle multiple
    image files.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在你已经完成了对 Flask 服务器的更新，以便处理多个图像文件。
- en: 'Next, update `show-prediction.html` to show the predictions for each of the
    images:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新 `show-prediction.html`，显示每个图像的预测结果：
- en: '[PRE43]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now test whether everything works. Start the Flask server in `deploy_image_test`:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在测试是否一切正常。启动位于 `deploy_image_test` 目录中的 Flask 服务器：
- en: '[PRE44]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Go to `localhost:5000` in your browser to display `home.html`. Select the `4_100.jpg`,
    `5_100.jpg`, and `26_100.jpg` files from the `deploy_image_test/test_images` directory.
    Once you have selected these files, `home.html` will be updated to indicate that
    three files have been selected, as shown in *Figure 7.17*:![Figure 7.17 – home.html
    after selecting three image files
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `localhost:5000` 来显示 `home.html`。从 `deploy_image_test/test_images` 目录中选择
    `4_100.jpg`、`5_100.jpg` 和 `26_100.jpg` 文件。选择这些文件后，`home.html` 会更新，显示已选择了三个文件，如
    *图 7.17* 所示：![图 7.17 – 选择三个图像文件后的 home.html
- en: '](img/B16216_7_17.jpg)'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16216_7_17.jpg)'
- en: Figure 7.17 – home.html after selecting three image files
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.17 – 选择三个图像文件后的 home.html
- en: 'Select the `show-predictions.html`, as shown in *Figure 7.18*:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `show-predictions.html`，如 *图 7.18* 所示：
- en: '![Figure 7.18 – show-prediciton.html showing predictions for multiple images'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.18 – show-prediction.html 显示多个图像的预测结果'
- en: '](img/B16216_7_18.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16216_7_18.jpg)'
- en: Figure 7.18 – show-prediciton.html showing predictions for multiple images
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – show-prediction.html 显示多个图像的预测结果
- en: Congratulations! You have completed a useful extension to the deployment of
    the image classification model.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已完成了一个有用的扩展，成功部署了图像分类模型。
