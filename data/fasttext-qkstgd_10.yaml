- en: Deploying Models to Web and Mobile
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署模型到 Web 和移动端
- en: For companies that depend on machine learning, it is very important to deploy
    their models in a scalable fashion. The models should work in the same manner
    that they were working in when the model was created. Deploying fastText models,
    both supervised and unsupervised, can be done in a variety of ways. The choice
    of methodology would depend on your individual needs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于依赖机器学习的公司来说，以可扩展的方式部署模型非常重要。模型应该以创建时的方式运行。无论是监督学习还是无监督学习，fastText 模型的部署可以通过多种方式实现。选择方法将取决于你个人的需求。
- en: 'In this chapter, we will focus on how to deploy fastText models in web and
    mobile scenarios. The topics are the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点讨论如何在 Web 和移动场景中部署 fastText 模型。涉及的主题包括：
- en: Deploying to the web
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到 Web
- en: Flask
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask
- en: FastText functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FastText 函数
- en: Flask endpoints
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flask 端点
- en: Deploying to smaller devices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到更小的设备
- en: Prerequisites – Completing the Google tutorial
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前提条件 – 完成 Google 教程
- en: App considerations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用考虑事项
- en: Adding the fastText model
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 fastText 模型
- en: FastText in Java
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 中的 FastText
- en: Adding library dependencies to Android
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Android 添加库依赖
- en: Using library dependencies in Android
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 中使用库依赖
- en: Finally, the app
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终，应用
- en: Deploying to the web
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到 Web
- en: Now that you have the ways and means to create your own fastText models, you
    will probably need to deploy them to production so that those models can be utilized
    to create applications and endpoints to use. There are a lot of frameworks in
    Python that can be used to create such web apps. Flask, Django, and Pyramid are
    some popular Python web frameworks. In this section, we will take the example
    of flask and build a simple web nearest neighbor search application in flask.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了创建自己 fastText 模型的方法，你可能需要将它们部署到生产环境，以便可以利用这些模型来创建应用和端点。Python 中有许多框架可以用来创建这样的
    Web 应用。Flask、Django 和 Pyramid 是一些流行的 Python Web 框架。在本节中，我们将以 Flask 为例，构建一个简单的
    Web 最近邻搜索应用。
- en: Flask
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask
- en: Flask is a popular web framework, and it is classified as a microframework as
    it does not require any external tools or libraries. There are no database abstraction
    layers, or form validation, or other components built into flask. The advantage
    of this is that you can build a simple web app in flask with minimal lines of
    code. This helps fast prototyping and helps you to focus on the application code
    itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 是一个流行的 Web 框架，被归类为微框架，因为它不需要任何外部工具或库。Flask 内部没有数据库抽象层、表单验证或其他组件。其优点是，你可以用最少的代码行构建一个简单的
    Web 应用。这有助于快速原型设计，并让你专注于应用本身的代码。
- en: For code that is discussed in this section, take a look at the `chapter 7` folder
    in the repository. You will find two files, `ft_server.py` and `ft_utils.py`.
    The `ft_utils.py` module has the code related to the fastText server, and `ft_server.py`
    has the code related to the flask endpoints.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节讨论的代码，可以查看仓库中的 `chapter 7` 文件夹。你将找到两个文件，`ft_server.py` 和 `ft_utils.py`。`ft_utils.py`
    模块包含与 fastText 服务器相关的代码，而 `ft_server.py` 包含与 Flask 端点相关的代码。
- en: The fastText functions
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: fastText 函数
- en: 'If you take a look at the code, we are loading the fastText module from the
    `FT_MODEL` environment variable. This model is loaded as a global variable so
    that it can be utilized in the functions as well. Another advantage is that when
    the flask app is initialized, the model will also be loaded into memory. Loading
    the model into memory is computationally expensive and hence if we defer that
    operation to the initialization phase, that will improve the response timings:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看代码，我们是通过 `FT_MODEL` 环境变量加载 fastText 模块的。这个模型被作为全局变量加载，以便可以在函数中使用。另一个好处是，当
    Flask 应用初始化时，模型也会被加载到内存中。将模型加载到内存中是一个计算密集型操作，因此如果我们将此操作延迟到初始化阶段，将能提高响应时间：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we will also get the most common words in the vocabulary, based on a threshold,
    and keep it in memory. We will keep the word vectors, again as a global variable,
    so that the computation of the word vectors is done during the initiation of the
    app, similar to before:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还将基于一个阈值获取词汇表中最常见的词汇，并将其保存在内存中。我们将词向量作为全局变量保存，这样词向量的计算就会在应用初始化时完成，类似于之前的方式：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The next two functions are basically how to get the nearest words, based on
    the distances between the word vector for the question word and the word vectors
    of the other words as well. These functions have also been discussed in [Chapter
    5](part0115.html#3DLGM0-05950c18a75943d0a581d9ddc51f2755), *FastText in Python*
    as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个函数基本上是如何根据问题词的词向量与其他词的词向量之间的距离来获取最接近的词。这些函数在[第5章](part0115.html#3DLGM0-05950c18a75943d0a581d9ddc51f2755)，*Python
    中的 FastText*中也有讨论。
- en: You should be able to run the module by itself. Also, notice the time required
    to run the whole module.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够单独运行这个模块。同时，注意运行整个模块所需的时间。
- en: Running the whole code takes around 10 seconds on my laptop.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的笔记本上，运行整个代码大约需要 10 秒钟。
- en: The flask endpoints
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask 端点
- en: 'For reasons of brevity, there is only one endpoint that is discussed in this
    app. Basically, it is used to take the incoming question word, get the answers
    from the `nn` function defined in the `ft_utils.py` file, and then serve the answers
    in JSON format:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，本文中只讨论了一个端点。基本上，它用于获取传入的问题词，使用 `ft_utils.py` 文件中定义的 `nn` 函数获取答案，然后以 JSON
    格式提供答案：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, run the app in development mode and so that you can debug it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以开发模式运行应用，这样你就可以调试它：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open a new terminal and send a curl request; you should be able to see the
    response in the Terminal. You can see that the response is also fast:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端并发送一个 curl 请求；你应该能在终端看到响应。你可以看到响应也很快：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We are able to have very fast responses as part of the Flask app as we tried
    to shift the computationally expensive portions of the code to the app initiation
    phase as much as possible. This is generally a good idea. As part of the web app,
    only do what is absolutely necessary and keep the amount of computation as part
    of serving the request to the minimum. This will ensure that you are building
    effective and useful web apps to for deploying fastText models and machine learning
    apps in general.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在 Flask 应用中获得非常快速的响应，因为我们尽可能将计算开销大的部分代码移至应用初始化阶段。这通常是一个不错的做法。作为 Web 应用的一部分，只做绝对必要的事情，并将请求处理过程中的计算量保持在最低限度。这将确保你构建出高效且实用的
    Web 应用，适合部署 fastText 模型和机器学习应用。
- en: Deploying to smaller devices
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到较小的设备
- en: 'As you saw in [Chapter 2](part0036.html#12AK80-05950c18a75943d0a581d9ddc51f2755), *Creating
    Models Using FastText Command Line*, you can create a compressed fastText model
    from a whole model using a command similar to this one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第2章](part0036.html#12AK80-05950c18a75943d0a581d9ddc51f2755)中看到的，*使用 FastText
    命令行创建模型*，你可以使用类似下面的命令从完整模型创建一个压缩的 fastText 模型：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In [Chapter 4](part0098.html#2TEN40-05950c18a75943d0a581d9ddc51f2755), *Sentence
    Classification in FastText*, we also revisited the concept of having compressed
    models and how compression was achieved without much loss in performance.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0098.html#2TEN40-05950c18a75943d0a581d9ddc51f2755)，*FastText 中的句子分类*，我们也重新讨论了压缩模型的概念，以及如何在性能几乎不丢失的情况下实现压缩。
- en: This enables you to deploy machines in smaller devices as well. One of the first
    things that comes to mind is whether the files can be packaged with an Android
    app and deployed in an Android application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得你也可以在较小的设备上部署机器。首先想到的一个问题是，文件是否可以与 Android 应用打包并部署在 Android 应用中。
- en: In this section, I will put into place all the requirements and dependencies
    that should enable you to deploy an Android fastText application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将展示所有应该能帮助你部署 Android fastText 应用所需的要求和依赖项。
- en: Prerequisites – Completing the Google tutorial
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件 – 完成 Google 教程
- en: 'One of the best examples to consider is the example Android app in the Google
    tutorial. In case you are new to Android, go to [https://developer.android.com/training/basics/firstapp/](https://developer.android.com/training/basics/firstapp/)
    and complete the tutorial there. We will not go into the details here, so in summary,
    the steps are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个值得参考的最佳示例是 Google 教程中的 Android 应用示例。如果你是 Android 新手，请访问[https://developer.android.com/training/basics/firstapp/](https://developer.android.com/training/basics/firstapp/)并完成那里的教程。我们在这里不再详细介绍，所以总结起来，步骤是：
- en: Install Android Studio
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Android Studio
- en: Create some simple user interfaces
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一些简单的用户界面
- en: Create the activities and define the intents
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建活动并定义意图
- en: Build and create the APK files
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并创建 APK 文件
- en: 'For our app, we will be working along similar lines. The name of the project
    in our case is `Fasttext application`. So, download the latest Android Studio
    and fire it up:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们将沿着类似的思路进行。我们项目的名称是 `Fasttext application`。因此，下载最新版本的 Android Studio
    并启动它：
- en: '![](img/00090.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: 'Keep on clicking Next, select empty activity, and click Finish. You should
    be taken to a new project window, which has a lot of boilerplate code for Android
    already done for you. Now, open up the Google tutorial and follow all the steps
    in the tutorial. If you are already an experienced Android developer, then you
    can open the project from the GitHub repository. First, do a `git fetch` and check
    out the `android_starting` branch:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 继续点击“Next”，选择空活动并点击“Finish”。你应该会进入一个新的项目窗口，其中已经为你完成了大量 Android 的模板代码。现在，打开 Google
    的教程并按照教程中的所有步骤进行操作。如果你已经是经验丰富的 Android 开发者，你可以从 GitHub 仓库中打开项目。首先，执行 `git fetch`
    并切换到 `android_starting` 分支：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, if you compile the app and create an APK, you should be able to get the
    following screen. Or if you have ADB set up, you can just select Run and see the
    app in your emulator.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你编译应用并创建 APK，你应该能够看到以下界面。或者，如果你已经设置了 ADB，你可以选择运行并在模拟器中查看应用。
- en: 'To build an APK, you can click the Build APK(s) button in your Android Studio:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 APK，你可以在 Android Studio 中点击“Build APK(s)”按钮：
- en: '![](img/00091.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: 'Please go through the steps written in Build a simple User interface in the
    Google Android tutorial so that you finally get a simple app running, similar
    to this one:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照 Google Android 教程中“构建简单用户界面”部分的步骤操作，以便最终运行一个类似于这个的简单应用：
- en: '![](img/00092.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: 'Now, go through the Start another activity tutorial and complete the creation
    of another activity. The aim of this tutorial is so that you can have a separate
    activity triggered from the first activity:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照“开始另一个活动”教程进行操作，完成另一个活动的创建。这个教程的目的是让你能够从第一个活动触发另一个单独的活动：
- en: '![](img/00093.jpeg)           =>              ![](img/00094.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)           =>              ![](img/00094.jpeg)'
- en: App considerations
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序考虑事项
- en: Now that you have two activities, you might have guessed the aim of our fastText
    application. We will input our text label in the first activity, and it should
    give us the labels in the second activity.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了两个活动，你可能已经猜到了我们 fastText 应用的目标。我们将在第一个活动中输入文本标签，并且它应该在第二个活动中给出标签。
- en: 'To achieve that, you will need to do two things:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，你需要做两件事：
- en: Add a prebuilt fastText model to the Android app
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将预构建的 fastText 模型添加到 Android 应用中
- en: Add a library that will parse the fastText model and give us the predictions
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个库来解析 fastText 模型并提供预测结果
- en: There are some points that I would like to mention here. We are going to use
    the fastText FTZ models here. You can argue as we had seen, fastText models are
    built using product quantization using methods such as nearest neighbor centroid
    estimations, pruning of vocabularies and hashing. This results in loss of information,
    although it is argued that there is no significant loss in performance. But if
    you are not convinced, you have the option of creating the web app as discussed
    in the previous section and accessing the results from your Android app, which
    means having the Android app as a view-only, and deferring all the computation
    to the server. That is a fair course to take, but is more of an engineering challenge
    and not within the scope of this book. In this section, we are more interested
    in finding out whether we can leverage the capabilities of fastText to create
    really small models, deploy them in mobile devices, and use them in our applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有几点我想在这里提一下。我们将在这里使用 fastText FTZ 模型。你可以争辩说，正如我们所见，fastText 模型是通过产品量化方法构建的，使用了像最近邻中心估计、词汇修剪和哈希等方法。这会导致信息丢失，尽管有争议称这种丢失对性能没有显著影响。但如果你不信服，你可以选择按照前面章节讨论的那样，创建一个
    Web 应用并通过 Android 应用访问结果，这意味着将 Android 应用作为只读视图，所有计算都由服务器完成。这是一个合理的方案，但更多的是一个工程挑战，并不在本书的范围内。在本节中，我们更感兴趣的是能否利用
    fastText 的能力创建非常小的模型，将其部署到移动设备，并在我们的应用程序中使用它们。
- en: Now before we go ahead, build the APK and take note of the present size of the
    application, since size is an important matter for users if you want users to
    download and use the application. You probably don't want your users to uninstall
    the application because the memory is full, or the user is in a place where the
    internet is really slow and it will take a long time to download the application.
    So, keep the application size always in mind when designing applications for smaller
    devices.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在继续之前，先构建APK并注意当前应用程序的大小，因为大小对于用户来说是一个重要问题。如果你希望用户下载并使用应用程序，大小问题不容忽视。你肯定不希望因为内存已满而让用户卸载应用程序，或者用户处在互联网非常慢的地方，下载应用程序会非常耗时。因此，在为小型设备设计应用时，始终要记得考虑应用程序的大小。
- en: 'Right now, the build is taking up only 1.5 MB of memory:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，构建仅占用1.5 MB的内存：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding the fastText model
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加fastText模型
- en: Moving ahead, now you will need to add a fastText model to the application.
    Android has an asset management system which can be used for this.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将fastText模型添加到应用程序中。Android有一个资产管理系统，可以用来实现这一点。
- en: First of all, download or create an FTZ model. I downloaded the `dbpedia.ftz`
    file from the supervised models section of the fastText website. The file is around
    1.6 MB in size and hence should not bump up the APK size in the final build.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，下载或创建一个FTZ模型。我从fastText网站的监督模型部分下载了`dbpedia.ftz`文件。该文件大约1.6 MB，因此不应该增加最终构建的APK大小。
- en: 'Android has a resource management system and you can use that for this purpose.
    Create an assets folder under the main folder and copy/paste your FTZ file there:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Android有一个资源管理系统，你可以用它来实现这一目的。在主文件夹下创建一个assets文件夹，并将你的FTZ文件复制/粘贴到其中：
- en: '![](img/00095.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.jpeg)'
- en: 'You should be able to see the file, as shown here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到文件，如下所示：
- en: '![](img/00096.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: Once done, add the code to access the file using the resource manager. Since
    we are making the predictions in the second activity, let's access this file in
    the `DisplayMessageActivity.java` file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，添加代码以使用资源管理器访问文件。由于我们在第二个活动中进行预测，让我们在`DisplayMessageActivity.java`文件中访问该文件。
- en: 'In the `onCreate` method, create an `AssetManager` instance to access the asset
    files, and create an `InputStream` instance so that the file can be converted
    to a stream. The data will be read and manipulated from this stream, shown as
    follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中，创建一个`AssetManager`实例以访问资产文件，并创建一个`InputStream`实例，以便文件可以转换为流。数据将从这个流中读取和操作，代码如下：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Press *Alt* + *Enter* (or *Option* + *Enter* on a Mac) to import missing classes.
    Your imports should end up as the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Alt* + *Enter*（在Mac上是*Option* + *Enter*）来导入缺失的类。你的导入应该如下所示：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: FastText in Java
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java中的FastText
- en: Now that you have the fastText model deployed in the Android app, you will need
    a way to access the file and serve the predictions. One way that you can do this
    is that you can write Java custom code using the fastText GitHub repository as
    a reference. The advantage of this approach is that you have more control over
    the code, and that might be the only option if you are writing an enterprise application,
    since the code of fastText is given under the BSD license. Another option is to
    take the fastText code and compile the code as part of the Android library, but
    there are a lot of issues with serving native code and it may not work on all
    devices. The best approach for me when adding external dependencies is if you
    can find core Java libraries that do the work for you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在Android应用中部署了fastText模型，你需要一种方法来访问文件并提供预测。你可以通过编写Java自定义代码来实现这一点，参考fastText的GitHub库。这样做的优势在于你对代码有更多的控制，且如果你在编写企业级应用时，可能是唯一的选择，因为fastText的代码是BSD许可下发布的。另一种选择是将fastText代码编译成Android库的一部分，但服务原生代码存在很多问题，且可能在所有设备上无法正常工作。对我来说，添加外部依赖的最佳方法是找到能够为你完成工作的核心Java库。
- en: 'Fortunately in this case, we have one that fits the bill. `fastText4j` is an
    excellent Java library by `linkfluence` on GitHub that has all the code in Java
    and is able to load and parse Java libraries as well. Apart from the ability to
    read bin and FTZ files, we also have the ability read and create Java memory mapped
    files, although we will not be using it here. Use the following repository to
    clone the repository that is a clone of the original `linkfluence` one:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在这种情况下，我们有一个符合要求的库。`fastText4j`是一个由`linkfluence`在GitHub上发布的优秀Java库，包含所有Java代码，并且能够加载和解析Java库。除了能够读取bin和FTZ文件，我们还能够读取和创建Java内存映射文件，尽管在这里我们不会使用它。使用以下仓库克隆这个库，它是原始`linkfluence`库的克隆：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also compile the package to an app as we will need that for testing and compilation
    purposes. Unzip the file that is created as a result:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要将包编译为应用程序，因为我们将需要它进行测试和编译。解压生成的文件：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This should copy a `lib/` folder and `fasttext-mmap.sh` file to your present
    directory. The last copy stage is not really necessary now, but this is just to
    show you this step is needed when you make changes to this repository and recompile
    the JAR again. For now, the file will have a slightly different command line.
    Change the `main` method in `src/main/java/fasttext/FastText.java`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`lib/`文件夹和`fasttext-mmap.sh`文件复制到当前目录。最后的复制步骤现在并非必须，但这样做是为了向你展示，当你对这个仓库做出更改并重新编译JAR时，这一步是需要的。现在，文件将包含稍有不同的命令行。修改`src/main/java/fasttext/FastText.java`中的`main`方法：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output args are removed and we are giving a model as input and getting
    the parameters. Compile this and also copy the path to the FTZ model that we downloaded.
    We will test the library now:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出参数已被移除，我们现在将模型作为输入并获取参数。编译此代码并复制我们下载的FTZ模型路径。现在我们来测试这个库：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There will be a lot of logs as part of the output commands. We are not showing
    them here for now. Just check whether there are any error messages in the logs,
    which will probably mark the missing dependency libraries. Also, as you can see,
    loading and serving predictions from the FTZ file is quite fast on my local machine.
    The assumption is that it will be performant in a low-performing Android app as
    well.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输出命令将会有大量日志。我们现在不会展示这些日志。只需检查日志中是否有任何错误消息，可能会标记缺少的依赖库。此外，正如你所见，在我的本地机器上加载并提供FTZ文件的预测非常快。假设在低性能的Android应用中，它也应该表现得很高效。
- en: 'Now that we have established that the library works and is able to give predictions,
    remove the `main` method as we won''t be needing it in the Android app itself.
    Compile the JAR and place it in the `lib` folder:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经确认库可以工作并且能够给出预测，移除`main`方法，因为我们在Android应用中不需要它。编译JAR并将其放置在`lib`文件夹中：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding the library dependencies to Android
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将库依赖添加到Android中
- en: Check in the `lib` folder. There will be placed all the libraries that are the
    dependencies for this project. We will need to add these dependencies to our Android
    application if we want to use this library.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`lib`文件夹。所有作为此项目依赖的库都会放在这里。如果我们希望在Android应用中使用这个库，必须将这些依赖添加到应用中。
- en: 'Open File | New | New Module...:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 文件 | 新建 | 新建模块...：
- en: '![](img/00097.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: 'Import the JAR/AAR package:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 导入JAR/AAR包：
- en: '![](img/00098.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: 'Now, add all the libraries in the `lib` folder to as dependencies. Now, your
    project structure should list the libraries as dependencies. Now, click on app
    | dependencies and add them as dependencies for the app as well. Add the library
    files as module dependencies:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将`lib`文件夹中的所有库添加为依赖项。现在，项目结构应该列出这些库作为依赖项。然后，点击应用 | 依赖项，将它们也作为应用的依赖项添加。将库文件作为模块依赖添加：
- en: '![](img/00099.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: Now that the dependencies are there, we can start using the library in our activity.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在依赖已经添加，我们可以开始在我们的活动中使用这个库了。
- en: Using library dependencies in Android
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android中使用库依赖
- en: To use the library in Android, change `DisplayMessageActivity.java` and write
    the same code that you saw in the library testing phase.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Android中使用这个库，修改`DisplayMessageActivity.java`并编写你在库测试阶段看到的相同代码。
- en: 'Before compiling, add the `guava` dependency in your `gradle.build` file as
    the `UnsignedLong` dependencies in the `guava` library:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译之前，在`gradle.build`文件中添加`guava`依赖，因为`guava`库中的`UnsignedLong`依赖：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, add the compile version so that it''s able to compile the Java code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，添加编译版本，以便能够编译Java代码：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finally the app
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终的应用
- en: 'Now, compile the app and run it on your phone. You should be able to get the
    changes:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编译应用并在你的手机上运行。你应该能够看到这些变化：
- en: '![](img/00100.jpeg)     =>    ![](img/00101.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)     =>    ![](img/00101.jpeg)'
- en: 'Lets also take a look at the APK that was created. On my machine, the app size
    has changed to 4.6 MB. Small enough? I will leave it to you to be the judge of
    that:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也来看一下创建的APK文件。在我的机器上，应用的大小已变为4.6 MB。够小了吗？我将把这个问题留给你自己判断：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a look at the methodologies to implement fastText in
    a web and mobile context, focusing specifically on Android. We also took a look
    at the different considerations that you need to bear in mind, depending on whether
    you need to deploy on web or mobile. This should help you to create good applications
    and integrate fastText into your mobile applications.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了如何在网页和移动环境中实现fastText的方法，特别是针对Android平台。我们还探讨了在部署到网页或移动设备时需要考虑的不同因素。这将帮助你创建出色的应用，并将fastText集成到你的移动应用中。
