- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Neuromorphic Computing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经形态计算
- en: Our brain activates thousands or even billions of neurons when necessary, getting
    our body battle-ready to face any situation. As we saw in *Chapter 17*, *Genetic
    Algorithms in Hybrid Neural Networks*, evolution has fined-tuned biological capacities
    over thousands of generations and millions of years.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大脑在必要时会激活成千上万甚至数十亿个神经元，使我们的身体随时准备好应对任何情况。正如我们在*第17章*中看到的，*混合神经网络中的遗传算法*，进化已经在数千代、数百万年的时间里精细调整了生物能力。
- en: In this chapter, we will take a deeper look into the cognitive power inside
    our bodies. We will go from the chromosomes of the previous chapter to biological
    neurons that make us intelligent creatures. The neurons interact in billions of
    ways producing cognitive patterns leading to mind structures.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将深入探讨我们体内的认知能力。我们将从前一章的染色体出发，了解使我们成为智慧生物的生物神经元。这些神经元以数十亿种方式相互作用，产生认知模式，形成心智结构。
- en: Neuromorphic computing taps into the tremendous optimized power of our brain,
    which surprisingly consumes very little energy. On average, we consume a few watts,
    less than a lightbulb, to solve very complex problems. In itself, this shows that
    the neuronal structure of our brain has a unique architecture that we have yet to reproduce
    physically.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 神经形态计算利用我们大脑的强大优化能力，令人惊讶的是，它消耗的能量非常少。平均而言，我们仅消耗几瓦特的能量，比灯泡还少，用来解决非常复杂的问题。这本身就表明，我们大脑的神经结构具有一种独特的架构，而我们还未能在物理上再现它。
- en: To bring neuromorphic computing into the real world requires hardware and software,
    as in all computer science models. In this chapter, we will focus on the software,
    though it is important to mention the hardware associated with the neuromorphic
    research Intel is conducting. That hardware takes the form of a chip named Loihi,
    after the emerging Hawaiian underwater volcano that will hit the surface one day.
    Loihi contains thousands upon thousands of neurons with their synapses, dendrites,
    and axons reproducing our brain activity. IBM and other corporations have been
    conducting research in this area.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将神经形态计算引入现实世界需要硬件和软件，就像所有计算机科学模型一样。在本章中，我们将重点讨论软件，尽管提及英特尔在神经形态研究中涉及的硬件同样重要。这些硬件以一个名为Loihi的芯片的形式出现，Loihi的名字来源于即将崛起的夏威夷水下火山，最终将突破海面。Loihi包含成千上万的神经元及其突触、树突和轴突，模拟我们的大脑活动。IBM和其他公司也在这一领域开展了研究。
- en: We have around 100 billion neurons. These chips are only reaching hundreds of thousands
    of neurons. However, by connecting thousands of those chips in physical networks,
    neuromorphic computing will be an area we all will have to take into account in
    the near future.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大约有1000亿个神经元。这些芯片目前只能达到数十万个神经元。然而，通过将这些芯片连接成物理网络，神经形态计算将在不久的将来成为我们必须考虑的领域。
- en: We will first define what neuromorphic computing is and then explore Nengo,
    a unique neuromorphic framework with solid tutorials and documentation. Nengo is
    one among many other approaches that go beyond the scope of this book. This chapter
    is not a neuromorphic course but rather an overview, inviting you to tap into
    the wonderful power of our brain structures to solve complex problems. The problems
    we will explore will bring us closer to understanding how our brain works.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先定义什么是神经形态计算，然后探讨Nengo，一个独特的神经形态框架，具有坚实的教程和文档。Nengo是众多超出本书范围的方法之一。本章不是神经形态课程，而是一个概览，邀请你挖掘我们大脑结构的强大力量，以解决复杂问题。我们将探索的问题将使我们更接近理解大脑是如何运作的。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What neuromorphic computing is
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是神经形态计算
- en: Getting started with Nengo
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Nengo
- en: Basic Nengo concepts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nengo基本概念
- en: Exploring the Nengo tutorial and interface
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Nengo教程和界面
- en: The difference between Nengo and classical AI
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nengo与经典人工智能的区别
- en: Applying Nengo's unique **Semantic Pointer Architecture** (**SPA**) model to
    critical research areas
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Nengo独特的**语义指针架构**（**SPA**）模型应用于关键研究领域
- en: Let's start with the basics—what is neuromorphic computing?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基础开始——什么是神经形态计算？
- en: Neuromorphic computing
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经形态计算
- en: 'Let''s go directly to the core of our thought process to understand neuromorphic
    computing. For AI experts, I would like to summarize the voyage from our classical models
    to cutting-edge neuromorphic models in a single phrase:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接进入思维过程的核心，理解神经形态计算。对于人工智能专家，我希望用一句话总结从经典模型到前沿神经形态模型的历程：
- en: '*from mind to brain*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*从思想到大脑*'
- en: If we take this further, *M* is the set of all of our mental representations
    and *B* is the world of physical reactions that lead to thinking patterns.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步推进，*M* 是我们所有心理表征的集合，*B* 是导致思维模式的物理反应的世界。
- en: 'In this sense, *M* is a set of everything we have explored up to this point
    in this book:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个角度看，*M* 是我们到目前为止在本书中探索的所有内容的集合：
- en: '*M* = {rule based systems, machine learning, deep learning, evolutionary algorithms
    … *m*}'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*M* = {基于规则的系统，机器学习，深度学习，进化算法… *m*}'
- en: '*m* is any mathematical *mental representation* of the world surrounding us.
    In deep learning, for example, an artificial neural network will try to make sense
    of the chaos of an image by searching the patterns it can find in an image through
    lower dimensions and higher levels of abstraction.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*m* 是我们周围世界的任何数学*心理表征*。例如，在深度学习中，一个人工神经网络会试图通过搜索它能在图像中找到的模式，来理解图像中的混乱，这些模式跨越低维和更高层次的抽象。'
- en: However, a mental construction, no matter how efficient it seems, remains a
    *representation*, not a physical reality.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，无论一个心理构建看起来多么高效，它仍然是一个*表征*，而非物理现实。
- en: 'Now, let''s observe *B* = *brain constructions*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们观察 *B* = *大脑构建*：
- en: '*B* = phenomena/events (inside us or in the outer world) -> physical stimuli
    -> physical neural activity in the brain -> higher activity in the target zones
    -> physical electric learning reactions -> a human action'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*B* = 现象/事件（在我们内部或外部世界）-> 物理刺激 -> 大脑中的物理神经活动 -> 目标区域的更高活动 -> 物理电学习反应 -> 人类行为'
- en: The architecture of *B* takes us much closer to reality! Mental representations
    are minimized, thus reducing the distortion of artificial constructions regardless
    of their efficiency.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*B* 的架构将我们带得更接近现实！心理表征被最小化，从而减少了人工构建的扭曲，无论它们的效率如何。'
- en: Classical AI is about building mental representations of our cognitive activity.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的人工智能是关于构建我们认知活动的心理表征。
- en: Neuromorphic computing is about building a brain that can encode reality, process
    it like a human brain, and decode the result.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 类脑计算是关于构建一个可以编码现实、像人类大脑一样处理它并解码结果的大脑。
- en: Bear in mind that corporations such as Intel are providing the chips to accomplish
    wonderful things with neuromorphic computing, as we will discover in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，像英特尔这样的公司正在提供芯片，以通过类脑计算实现令人惊叹的成果，正如我们在本章中将会发现的那样。
- en: Now that we have some idea of what neuromorphic computing is, let's take a look
    at the neuromorphic framework, Nengo.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对类脑计算有了一些了解，让我们来看看类脑框架 Nengo。
- en: Getting started with Nengo
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Nengo
- en: In a nutshell, *Nengo builds brains, not mental representations*, as in classical
    machine learning and deep learning.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，*Nengo 构建的是大脑，而不是像经典机器学习和深度学习中的那样构建心理表征*。
- en: Nengo stands for *Neural Engineering Object*. It has both scripting capability
    with Nengo and a graphical capacity with Nengo GUI. We will be using NEF, which
    is Nengo's **Neural Engineering Framework** (**NEF**).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Nengo 代表 *神经工程对象*。它既具备 Nengo 的脚本能力，也具备 Nengo GUI 的图形能力。我们将使用 NEF，即 Nengo 的**神经工程框架**
    (**NEF**)。
- en: Nengo was created by the Centre for Theoretical Neuroscience at the University
    of Waterloo (Ontario, Canada). Chris Eliasmith has played an important role in
    this project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Nengo 是由滑铁卢大学（加拿大安大略省）的理论神经科学中心创建的。Chris Eliasmith 在这个项目中发挥了重要作用。
- en: We have explored many ways to approach cognitive modeling in the previous chapters.
    Nengo uses an NEF to implement an SPA.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们探讨了许多认知建模的方法。Nengo 使用 NEF 来实现 SPA。
- en: A *semantic pointer* is a neural representation in a biological system that
    carries structures that will lead to higher-level cognitive representations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*语义指针* 是生物系统中的神经表征，它携带结构，将引导到更高层次的认知表征。'
- en: The term *pointer* refers to pointers as we know in C++, for example, because
    they can access data they do not contain.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*指针*一词指的是我们在 C++ 中所熟知的指针，因为它们可以访问它们所不包含的数据。'
- en: The term *semantic* refers to the fact that they are not just mathematical tools
    as in C++ because they contain virtual representations through the distances between
    them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*语义* 这个术语指的是它们不仅仅是像 C++ 中那样的数学工具，因为它们通过它们之间的距离包含了虚拟表征。'
- en: If we put the two concepts together, this leads to the mind-blowing concept
    of meaning being generated through biological pointer activity located at various
    distances and states from each other in our brain. Let's dive into neuromorphic
    computing by first installing Nengo.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这两个概念结合起来，就会得到一个令人震惊的概念：意义是通过生物学指针活动在我们大脑中以不同距离和状态相互作用生成的。让我们通过首先安装 Nengo
    来深入了解类脑计算。
- en: Installing Nengo and Nengo GUI
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Nengo 和 Nengo GUI
- en: 'For this chapter, I used the Python interfaces with NumPy and Matplotlib libraries,
    as we have since the beginning of this book. All that is then required is to install
    Nengo with `pip`, for example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我使用了与 NumPy 和 Matplotlib 库的 Python 接口，正如我们从本书开始时所做的那样。接下来，只需通过 `pip` 安装
    Nengo，例如：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can install it using other approaches. For more information, go to [https://github.com/nengo/nengo](https://github.com/nengo/nengo).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用其他方法安装它。有关更多信息，请访问 [https://github.com/nengo/nengo](https://github.com/nengo/nengo)。
- en: 'Let''s install the nice HTML 5 visualizer and interact with Nengo through this
    GUI I installed with `pip`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装这个不错的 HTML 5 可视化工具，并通过我使用 `pip` 安装的 GUI 与 Nengo 进行交互：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can install it using other approaches, too. For more information, go to:
    [https://github.com/nengo/nengo-gui/](https://github.com/nengo/nengo-gui/).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用其他方法安装它。有关更多信息，请访问：[https://github.com/nengo/nengo-gui/](https://github.com/nengo/nengo-gui/)。
- en: Once both programs are installed, if you encounter any problems then consult
    the links, which contain a lot of information, or Nengo's support team, who provide
    excellent feedback.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦两个程序都安装完成，如果你遇到任何问题，请参考包含大量信息的链接，或者联系 Nengo 的支持团队，他们提供了出色的反馈。
- en: There are many ways to use Nengo. This chapter describes a quick start method
    with Python.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以使用 Nengo。本章描述了一种快速入门的方法，使用 Python。
- en: 'Once you are all set, open your browser, Chrome, for example, and then type
    `nengo` in a command-line console and it should open the Nengo GUI interface in
    your browser, opening a `default.py` Python program:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，打开浏览器，比如 Chrome，然后在命令行控制台中输入 `nengo`，它应该会在浏览器中打开 Nengo 图形用户界面（GUI），并打开一个
    `default.py` Python 程序：
- en: '![](img/B15438_18_01.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_01.png)'
- en: 'Figure 18.1: Nengo Python code'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.1：Nengo Python 代码
- en: 'Click on the folder icon in the top left and click on `built-in examples`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左上角的文件夹图标，然后点击 `built-in examples`：
- en: '![](img/B15438_18_02.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_02.png)'
- en: 'Figure 18.2: Nengo examples'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.2：Nengo 示例
- en: 'A list will appear. Click on `tutorial`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个列表将会出现。点击 `tutorial`：
- en: '![](img/B15438_18_03.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_03.png)'
- en: 'Figure 18.3: List of Nengo examples'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.3：Nengo 示例列表
- en: 'A list of fascinating educational examples will appear:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一份令人着迷的教育示例列表将会出现：
- en: '![](img/B15438_18_04.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_04.png)'
- en: 'Figure 18.4: Examples in the tutorial section'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.4：教程部分中的示例
- en: The tutorial programs are in the directory the installer wrote them in.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 教程程序位于安装程序写入的目录中。
- en: You can see them in the URL of a Python example of the tutorial in the address
    bar of your browser.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器地址栏中查看教程中 Python 示例的 URL。
- en: Creating a Python program
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Python 程序
- en: 'Now, let''s create a Python program and save the file through a few steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过几个步骤创建一个 Python 程序并保存文件：
- en: Open an empty Python file but do not save it yet
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开一个空的 Python 文件，但暂时不要保存它
- en: 'Write the following code to import the `nengo` library and create a model:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写以下代码以导入 `nengo` 库并创建一个模型：
- en: '[PRE2]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, save the Python file in the path of the other programs of the tutorial.
    You can see this path when you open a Nengo example. Just navigate to that path
    to save your program. We will name it `00-myintro.py` to fit in nicely with the
    list of programs in the tutorial:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 Python 文件保存在教程中其他程序的路径下。你可以在打开 Nengo 示例时看到这个路径。只需导航到该路径以保存程序。我们将其命名为 `00-myintro.py`，以便与教程中的程序列表匹配：
- en: '![](img/B15438_18_05.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_05.png)'
- en: 'Figure 18.5: Saving a Python program'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.5：保存 Python 程序
- en: We will go back to the `tutorial` directory as we did previously, and we will
    open it to add basic Nengo objects.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像之前一样回到 `tutorial` 目录，并打开它以添加基本的 Nengo 对象。
- en: Nengo objects are the building blocks of a Nengo model to create populations
    of neurons, connecting them to stimulation functions, and managing the outputs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Nengo 对象是 Nengo 模型的构建模块，用于创建神经元群体，将其连接到刺激函数，并管理输出。
- en: For our Python program, we will use some key Nengo objects, which are detailed
    in the following sections.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的 Python 程序，我们将使用一些关键的 Nengo 对象，相关细节将在接下来的章节中介绍。
- en: A Nengo ensemble
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个 Nengo 集群
- en: A Nengo ensemble is a group of neurons. It can be considered as a population
    of neurons that contain real numbers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Nengo集合是一组神经元。它可以被视为一个包含实数的神经元群体。
- en: 'An ensemble is an object created with:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合是通过以下方式创建的：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An ensemble can be created in one line:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合可以在一行代码中创建：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As soon as we add a line to `00-myintro.py`, a representation of the ensemble
    appears on the left-hand pane of the Nengo interface:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们向`00-myintro.py`添加了一行代码，集合的表示将在Nengo界面的左侧窗格中出现：
- en: '![](img/B15438_18_06.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_06.png)'
- en: 'Figure 18.6: Neuron ensemble'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.6：神经元集合
- en: While writing your Python code in the code editor on the right, you can visualize
    the visual flow of the model in the visual interface pane.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧的代码编辑器中编写Python代码时，您可以在可视化界面窗格中查看模型的可视化流动。
- en: 'An ensemble can contain a population of one individual, a single neuron. This
    neuron is a representation of our biological neurons:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合可以包含一个个体的群体，一个单一的神经元。这个神经元是我们生物神经元的表现：
- en: '**Postsynaptic currents** (**PSCs**) flow through our dendrites'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**突触后电流**（**PSCs**）通过我们的树突流动'
- en: The *current* then reaches the core of the neuron (cell body)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后*电流*到达神经元的核心（细胞体）。
- en: If the current exceeds a threshold at the axon's initial segment (axon hillock),
    then a *spike* is generated
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在轴突初段（轴突丘）处的电流超过阈值，那么会产生一个*尖峰*
- en: With ion channels open, the PSCs are produced in the receiving cell
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当离子通道打开时，PSCs会在接收细胞中产生。
- en: Let's take a more detailed look at Nengo's neuron types.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解一下Nengo的神经元类型。
- en: Nengo neuron types
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nengo神经元类型
- en: 'We created 50 neurons in our ensemble:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的集合中创建了50个神经元：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are various neuron types. However, in our example, we will be using the
    default neuron, a **leaky integrate-and-fire** (**LIF**) neuron.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种神经元类型。然而，在我们的示例中，我们将使用默认的神经元，即**泄漏积分与放电**（**LIF**）神经元。
- en: Neuronal dynamics are based on a summation process called **integration**. This
    integration is associated with a mechanism that will fire (trigger) up above a
    critical voltage.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 神经元动力学基于一个叫做**积分**的求和过程。这个积分与一个机制相关联，该机制将在电压超过临界值时触发（放电）。
- en: A linear differential equation combined with a threshold that will trigger file
    spiking are the final components that make up the default LIF neuron we will be using,
    unless specified otherwise.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 线性微分方程与阈值结合，这些阈值将触发文件的尖峰，这是构成默认LIF神经元的最后组件，除非另有指定。
- en: For more on Nengo neuron types, see [https://www.nengo.ai/nengo-extras/neurons.html](https://www.nengo.ai/nengo-extras/neurons.html).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于Nengo神经元类型的信息，请参见[https://www.nengo.ai/nengo-extras/neurons.html](https://www.nengo.ai/nengo-extras/neurons.html)。
- en: Nengo neuron dimensions
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nengo神经元维度
- en: 'In our example, `dimensions` is set to `1`; this means that the ensemble is
    represented by one number (or dimension):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`dimensions`设置为`1`；这意味着集合由一个数字（或维度）表示：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A Nengo node
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个Nengo节点
- en: 'Now that we have defined our ensemble of neurons and their output dimension,
    we will define the output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了神经元集合及其输出维度，我们将定义输出：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The stimulation will be a constant and will be displayed on the slider as such:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 刺激将是恒定的，并将在滑块上显示如下：
- en: '![](img/B15438_18_07.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_07.png)'
- en: 'Figure 18.7: Nengo slider'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.7：Nengo滑块
- en: 'An output with a number might not suffice in some cases. This number can be
    replaced by a function importing NumPy. A sine wave function can be used, for
    example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，带有数字的输出可能不够用。这个数字可以被一个导入NumPy的函数替代。例如，可以使用正弦波函数：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As soon as we enter our node function, it appears on the interface in addition
    to the previous information displayed:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们输入了节点功能，它将显示在界面上，并且除了先前显示的信息外，还会有新的信息：
- en: '![](img/B15438_18_08.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_08.png)'
- en: 'Figure 18.8: The node function on the interface'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.8：界面上的节点功能
- en: '`node_function` provides a way to send non-neural inputs to Nengo objects.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`node_function`提供了一种将非神经输入发送到Nengo对象的方法。'
- en: We will explore such an implementation in the `15-lorenz.py` example in this
    chapter that is in the tutorial section Nengo's examples.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的`15-lorenz.py`示例中探讨这样的实现，该示例位于教程部分的Nengo示例中。
- en: 'If you right-click on the `node_function` image and choose a value, you will
    see a curve representing the real-time value of the sine wave stimulation:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您右击`node_function`图像并选择一个值，您将看到一条表示正弦波刺激实时值的曲线：
- en: '![](img/B15438_18_09.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_09.png)'
- en: 'Figure 18.9: Node function'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.9：节点功能
- en: For more on Nengo objects, go to [https://www.nengo.ai/nengo/getting_started.html#creating-nengo-objects](https://www.nengo.ai/nengo/getting_started.html#creating-nengo-objects).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Nengo 对象的信息，请访问 [https://www.nengo.ai/nengo/getting_started.html#creating-nengo-objects](https://www.nengo.ai/nengo/getting_started.html#creating-nengo-objects)。
- en: Connecting Nengo objects
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接 Nengo 对象
- en: We now need to connect the ensemble and the node to make our system work. In this
    manner, the ensemble will have a function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要连接群体和节点，以使我们的系统工作。通过这种方式，群体将具备某种功能。
- en: 'At this point, we have an ensemble and a node function, as shown in the following
    figure:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有一个群体和一个节点功能，如下图所示：
- en: '![](img/B15438_18_10.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_10.png)'
- en: 'Figure 18.10: Ensemble and node function'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.10：群体和节点功能
- en: 'To connect them, we will add a Nengo connection:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接它们，我们将添加一个 Nengo 连接：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more Nengo frontend API definitions, see [https://www.nengo.ai/nengo/frontend_api.html](https://www.nengo.ai/nengo/frontend_api.html).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 更多 Nengo 前端 API 定义，请参见 [https://www.nengo.ai/nengo/frontend_api.html](https://www.nengo.ai/nengo/frontend_api.html)。
- en: Now, let's explore the exciting visual interface.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索这个激动人心的视觉界面。
- en: Visualizing data
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据可视化
- en: 'The first step is to click on the play button in the bottom-right corner of
    the screen:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是点击屏幕右下角的播放按钮：
- en: '![](img/B15438_18_11.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_11.png)'
- en: 'Figure 18.11: Play button'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.11：播放按钮
- en: This will set time in motion, simulating our brain activity. Time is one of
    the unique features of neuromorphic computing. We do not pile layer upon layer
    of static mathematics into a mental representation. With Nengo, we simulate brain
    activity step by step, second by second!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使时间开始流动，模拟我们的大脑活动。时间是神经形态计算的独特特点之一。我们不会将一层层静态的数学堆叠成一个心理表征。使用 Nengo，我们一步一步、秒秒钟地模拟大脑活动！
- en: Once you click on the play button, it feels like we are looking inside our brain!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击播放按钮，就感觉像是在看我们大脑内部的运作！
- en: We saw how to visualize the slider's activity in the previous section, which
    produces the stimulations. We will focus on our ensemble in this section.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一节中看到如何可视化滑块的活动，这些活动产生了刺激。我们将在本节中关注我们的群体。
- en: 'If we right-click on the ensemble visualization, several options appear: **Value**,
    **Spikes**, **Voltages**, **Firing pattern**, and **Details...**:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们右键点击群体可视化，几个选项将会出现：**值**、**放电**、**电压**、**发放模式**和**详细信息...**：
- en: '![](img/B15438_18_12.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_12.png)'
- en: 'Figure 18.12: Ensemble options'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.12：群体选项
- en: '**Value**: The value of our ensemble will be displayed, from –1 to 1, for example:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值**：我们的群体的值将在 –1 到 1 之间显示，例如：'
- en: '![](img/B15438_18_13.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_13.png)'
- en: 'Figure 18.13: Values of an ensemble'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.13：群体的值
- en: '**Spikes**: The spiking activity produces nice colors that show how our neurons are
    reacting to sine wave stimulation:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**放电**：放电活动产生了美丽的颜色，显示了我们的神经元如何响应正弦波刺激：'
- en: '![](img/B15438_18_14.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_14.png)'
- en: 'Figure 18.14: Spiking patterns'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.14：放电模式
- en: You will notice that each neuron has its own spiking channel. This property
    of ensembles produces a wide variety of responses.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到每个神经元都有自己的放电通道。群体的这一特性产生了各种各样的响应。
- en: '**Voltages**: The voltages provide interesting information on the current that
    is flowing through our neurons under stimulation from other neurons and, in turn,
    from yet more neurons that are gathering information from the world outside us.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电压**：电压提供了关于流经我们神经元的电流的有趣信息，这些电流来自其他神经元的刺激，进而来自更多从外部世界获取信息的神经元。'
- en: 'In the following screenshot, the ensemble contained a population of five neurons
    with color channels providing yet more information:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下截图中，群体包含了五个神经元的群体，颜色通道提供了更多信息：
- en: '![](img/B15438_18_15.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_15.png)'
- en: 'Figure 18.15: Neuron activity with color patterns'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.15：带有颜色模式的神经元活动
- en: '**Firing pattern**: The firing pattern of the ensemble in the following image
    was generated with 50 neurons. The firing pattern is necessarily directly linked
    to the stimulations and connections:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发放模式**：下图中群体的发放模式是通过 50 个神经元生成的。发放模式必然与刺激和连接直接相关：'
- en: '![](img/B15438_18_16.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_16.png)'
- en: 'Figure 18.16: Firing pattern'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.16：发放模式
- en: I have been observing many patterns through the experiments I carried out. One
    of the areas of research I'm doing is to feed the thousands of frames of firing
    patterns of a given function to an ANN and a stochastic Church-Turing algorithm
    and generate "thought" patterns. For example, running the channels of the frames
    could produce sequences of new data. It's worth experimenting with.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我在进行的实验中观察了许多模式。我正在做的研究领域之一是将给定功能的成千上万帧的放电模式输入到人工神经网络（ANN）和随机的丘奇-图灵算法中，生成“思维”模式。例如，运行这些帧的通道可能会生成新的数据序列。这是值得实验的。
- en: 'The following image represents the pattern of 500 neurons bringing complexity
    to the potential of running deep learning on thousands of frames of these patterns:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下图表示500个神经元的模式，这为在成千上万的帧上运行深度学习带来了复杂性：
- en: '![](img/B15438_18_17.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_17.png)'
- en: 'Figure 18.17: Firing patterns'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.17：放电模式
- en: '**Details...**: In the plots section, we can visualize input current and tuning
    curves. The tuning curve shows how the neurons are reacting to the input current.
    If there is no pattern, then there must be an explanation or a configuration problem.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**细节...**：在绘图部分，我们可以可视化输入电流和调谐曲线。调谐曲线显示了神经元如何响应输入电流。如果没有模式，那么就必须有一个解释或配置问题。'
- en: The visual control of tuning curves is a time saver by showing how they converge!
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调谐曲线的可视化控制通过展示它们是如何收敛的，节省了时间！
- en: '![](img/B15438_18_18.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_18.png)'
- en: 'Figure 18.18: Tuning curves'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.18：调谐曲线
- en: We have covered some of the main visual tools Nengo provides.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了Nengo提供的一些主要可视化工具。
- en: Now, we will see how to retrieve data from our system with probes.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何使用探针从我们的系统中检索数据。
- en: Probes
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探针
- en: We can retrieve information with probes, either to visualize them or to process
    output data.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用探针检索信息，无论是可视化它们，还是处理输出数据。
- en: 'In this section, I enhanced `00-myintro.py` to produce numerical output as
    well as visual output using the information on the following page that you can
    get ideas from for your projects: [https://www.nengo.ai/nengo/examples/basic/single_neuron.html](https://www.nengo.ai/nengo/examples/basic/single_neuron.html)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我增强了`00-myintro.py`，使其能够产生数值输出和可视化输出，使用以下页面上的信息，你可以从中获取有关你项目的灵感：[https://www.nengo.ai/nengo/examples/basic/single_neuron.html](https://www.nengo.ai/nengo/examples/basic/single_neuron.html)
- en: The program I created is `nengo_probing.py` and is available in the GitHub repository
    of this book. The program is a standalone program that does not run in Nengo's
    GUI. You cannot use simulation commands as shown in the following in Nengo's GUI.
    Run this program in your Python interface. It shows yet another way to run the rich
    Nengo software.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的程序是`nengo_probing.py`，可以在本书的GitHub仓库中找到。该程序是一个独立的程序，无法在Nengo的GUI中运行。你不能像在Nengo的GUI中那样使用仿真命令。请在Python界面中运行此程序。它展示了另一种运行丰富Nengo软件的方法。
- en: 'The program contains additional headers for Matplotlib and distributions for
    data displaying and processing purposes:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序包含额外的Matplotlib头文件和数据展示与处理的分布：
- en: '[PRE10]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The program contains the same architecture as `00-myintro.py`. It creates an
    ensemble, adds a function, and then connects the objects:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序包含与`00-myintro.py`相同的架构。它创建了一个集合，添加了一个函数，然后连接了这些对象：
- en: '[PRE11]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will now add a probing function using `nengo.Probe`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`nengo.Probe`添加一个探测功能：
- en: '[PRE12]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To obtain some data, let''s run the simulator for 5 seconds:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取一些数据，让我们运行仿真器5秒钟：
- en: '[PRE13]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The simulator runs the calculation *before* displaying the outputs.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 仿真器在显示输出之前*先*运行计算。
- en: 'Then, we can probe the data and display it in numerical format. That way, we
    can retrieve output data from our system for further use, visualizing or chaining
    neuromorphic models to other algorithms in a few lines of code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以探测数据并以数值格式显示。这样，我们可以从系统中检索输出数据，进行进一步使用，或者在几行代码中将神经形态模型与其他算法链接起来：
- en: '**Decoded output**: The decoded output can be filtered (see the preceding filter):'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解码输出**：解码后的输出可以进行过滤（请参见前面的过滤器）：'
- en: '[PRE14]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output data is then displayed or can be processed:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，输出数据会被显示出来，或者可以进行处理：
- en: '[PRE15]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Nengo can produce a chart with Matplotlib:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Nengo可以使用Matplotlib生成一个图表：
- en: '[PRE16]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of the preceding code is plotted as follows:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码的输出如下图所示：
- en: '![](img/B15438_18_19.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_19.png)'
- en: 'Figure 18.19: Decoded input'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.19：解码输入
- en: '**Spikes**: Spikes are retrieved in a single line of code:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尖峰**：尖峰可以通过一行代码提取：'
- en: '[PRE17]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output produces sequences of spikes:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出生成尖峰序列：
- en: '[PRE18]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The program produces a figure for spikes that matches the data:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该程序生成一个与数据匹配的尖峰图：
- en: '![](img/B15438_18_20.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_20.png)'
- en: 'Figure 18.20: Spiking output'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.20：脉冲输出
- en: We can check the visual display with valuable raw data.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用宝贵的原始数据检查视觉显示。
- en: '**Voltage**: The simulation provides voltage data:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电压**：该模拟提供电压数据：'
- en: '[PRE19]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The data is stored in a ready-to-use array:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据存储在一个随时可用的数组中：
- en: '[PRE20]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The program produces a figure for the voltage of the ensemble as well:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该程序还会生成一个关于集体电压的图示：
- en: '![](img/B15438_18_21.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_21.png)'
- en: 'Figure 18.21: Neuron voltage'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.21：神经元电压
- en: At this point, we have covered the main features of Nengo. We will now see how
    Nengo can boost research in critical AI research areas.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经涵盖了Nengo的主要特性。接下来，我们将看到Nengo如何推动关键AI研究领域的研究。
- en: Applying Nengo's unique approach to critical AI research areas
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Nengo独特的方法应用于关键AI研究领域
- en: It is useless to apply the power of brain neuromorphic models to simple arithmetic
    or classical neural networks that do not require any more than TensorFlow 2.x,
    for example.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将大脑神经形态模型的强大功能应用于简单的算术运算或不需要超过TensorFlow 2.x的经典神经网络是没有意义的。
- en: 'But it is also a waste of time to try to solve problems with classical networks
    that neuromorphic computing can solve better with organic brain models. For example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，尝试用经典网络解决神经形态计算可以通过有机大脑模型更好解决的问题也是一种浪费时间。例如：
- en: Deep learning, TensorFlow 2\. Convolutional models use a unique activation function
    such as ReLU (see *Chapter 9*, *Abstract Image Classification with Convolutional
    Neural Networks (CNNs)*). Neuromorphic neurons have a variety of reactions when
    stimulated.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习，TensorFlow 2。卷积模型使用独特的激活函数，如ReLU（见*第9章*，*卷积神经网络（CNN）中的抽象图像分类*）。神经形态神经元在受到刺激时有多种反应。
- en: Neuromorphic models integrate time versus more static DL algorithms. When we
    run neuromorphic models, we are closer to the reality of our time-driven biological
    models.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神经形态模型整合了时间因素，而更多的静态深度学习算法则没有。运行神经形态模型时，我们更接近于基于时间驱动的生物学模型的现实。
- en: The Human Brain Project, [https://www.humanbrainproject.eu/en/](https://www.humanbrainproject.eu/en/),
    provides wide research and examples of how neuromorphic computing provides additional
    insights to classical computing.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人脑工程项目，[https://www.humanbrainproject.eu/en/](https://www.humanbrainproject.eu/en/)，提供了广泛的研究和示例，展示了神经形态计算如何为经典计算提供额外的见解。
- en: I recommend testing a given problem with several AI tools and choosing the most
    efficient one.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议使用多个AI工具测试给定的问题，并选择最有效的一个。
- en: The SPA examples demonstrate the efficiency of Nengo in several areas. All of
    the examples in the tutorial section are well documented and run well. You can
    apply the visualizing functions we explored in this chapter to them and also modify
    the code, experiment with them in your Python environment, and more.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: SPA示例展示了Nengo在多个领域的高效性。教程部分的所有示例都文档化良好且运行顺利。你可以将本章中探索的可视化功能应用到它们上，并修改代码，在你的Python环境中进行实验，等等。
- en: 'I wish to highlight two domains: linguistics and weather representations:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我想重点介绍两个领域：语言学和天气表征：
- en: '**Linguistics**: `25-spa-parse.py` processes neuronal signals and produces
    words. When you run it, the performances look magical, thanks to the SPA. The
    code is well documented.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言学**：`25-spa-parse.py`处理神经信号并生成单词。运行时，得益于SPA，表现得非常神奇。代码文档化良好。'
- en: The program contains the mind-blowing `thalamus` module that can simulate the
    subcortical nuclei in our brains (forebrain and midbrain). This part of our brain,
    the basal ganglia, has high-density connections.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该程序包含令人震惊的`thalamus`模块，可以模拟我们大脑中的皮层下神经核（前脑和中脑）。大脑的这一部分——基底神经节，具有高密度的连接。
- en: 'This class can reduce or even eliminate low responses and intensify high responses
    to the stimulations. The program is worth running and exploring! The Nengo GUI
    makes it intuitive to understand:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该类可以减少甚至消除低响应，并增强对刺激的高响应。这个程序值得运行和探索！Nengo的GUI使得理解变得直观：
- en: '![](img/B15438_18_22.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_22.png)'
- en: 'Figure 18.22: Nengo GUI options'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.22：Nengo GUI选项
- en: '**Weather representations**: `15-lorenz.py` is not an SPA program. It is only
    a few lines long. It displays the graphs of the three basic Lorenz equations that
    represent temperatures and variations in the atmosphere. Nengo modified the code
    for educational purposes as explained in a publication at [http://compneuro.uwaterloo.ca/publications/eliasmith2005b.html](http://compneuro.uwaterloo.ca/publications/eliasmith2005b.html).
    The Nengo GUI displays an exciting representation:'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**天气表示**：`15-lorenz.py`并不是一个SPA程序。它只有几行代码，显示了代表温度和大气变化的三大洛伦兹方程的图形。Nengo为教学目的修改了代码，相关内容在[http://compneuro.uwaterloo.ca/publications/eliasmith2005b.html](http://compneuro.uwaterloo.ca/publications/eliasmith2005b.html)的出版物中有所解释。Nengo的图形界面展示了一个令人兴奋的表示：'
- en: '![](img/B15438_18_23.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15438_18_23.png)'
- en: 'Figure 18.23: Lorenz equations'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.23：洛伦兹方程
- en: The code of `15-lorenz.py` is short, and the program looks simple. But weather
    forecasting is one of the toughest fields to represent events with AI models!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`15-lorenz.py`的代码很短，程序看起来简单。但天气预报是最难通过AI模型表示事件的领域之一！'
- en: 'The potential of neuromorphic computing can be a real game-changer. Let''s
    conduct a mind experiment. Imagine that:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 神经形态计算的潜力可能会成为一场真正的游戏变革。让我们进行一个思维实验。想象一下：
- en: A hurricane is like a living organism
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飓风就像一个活的有机体
- en: That its center is connected to everything around it
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的中心与周围的一切相连
- en: That it "feeds" on the heat and waters of our oceans
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它“以”我们的海洋的热量和水分为“食”
- en: That everything that is in it can be considered as small hurricane particles
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中的一切都可以被认为是小型飓风粒子
- en: 'Let''s now continue the experiment by:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续进行实验：
- en: Feeding the billions of particles in the neuromorphic model in a stream
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将神经形态模型中的数十亿颗粒以流的形式输入
- en: Using the power of a network of neuromorphic chips
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用神经形态芯片网络的强大能力
- en: Using the calculation power of quantum computing (see *Chapter 19*, *Quantum Computing*)
    to perform computations with the input/output of the chip
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用量子计算的计算能力（见*第19章*，*量子计算*）进行芯片输入/输出的计算
- en: Applying SPA to the hurricane particle representations as if they were neurons
    and running predictions
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将SPA应用到飓风粒子表示中，仿佛它们是神经元，并进行预测
- en: I think the future of weather forecasting is in physical, neuromorphic models,
    that will take billions of parameters into account.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为天气预报的未来在于物理神经形态模型，这些模型将考虑数十亿个参数。
- en: 'The result: we will be able to predict the course and level of a hurricane
    a few hours to a few days more in advance. This could save lives.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：我们将能够提前几个小时到几天预测飓风的路径和强度，这可能会拯救生命。
- en: In a nutshell, neuromorphic computing has only just begun to demonstrate its
    worth. When neuromorphic chips hit the market, neuromorphic computing will grow
    exponentially.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，神经形态计算才刚刚开始展示其价值。当神经形态芯片上市时，神经形态计算将呈指数级增长。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built neuromorphic Python programs from scratch. Populations
    of neurons, in Nengo ensembles, are made up of neurons. The system then has stimulation
    functions, connections, and probing objects. Nengo offers many other examples
    you can explore.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从零开始构建了神经形态Python程序。Nengo中的神经元集合（ensemble）由多个神经元组成。系统随后具备刺激功能、连接和探测对象。Nengo还提供了许多其他示例，供你探索。
- en: The NEF was designed to implement neuromorphic computing models. The novel concept
    of SPA shows that our brains have enhanced pointers that have a meaning and are
    linked to our physical data.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: NEF旨在实现神经形态计算模型。SPA这一新颖概念表明，我们的大脑拥有增强的指示符，这些指示符有意义，并且与我们的物理数据相连接。
- en: Neuromorphic computing opens tremendous horizons for a complex program that
    classical machine learning and deep learning cannot solve. Weather forecasting,
    with the power of the neuromorphic chips that are reaching the market, can tap
    into the complexity and variety of a machine brain. A machine brain can produce
    unique calculations by firing hundreds of thousands of neurons with both individual and
    collective behavior.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 神经形态计算为经典机器学习和深度学习无法解决的复杂程序开辟了巨大的前景。借助即将上市的神经形态芯片，天气预报可以挖掘机器大脑的复杂性和多样性。机器大脑通过激活成千上万的神经元，结合个体和集体行为，能够进行独特的计算。
- en: We have covered many algorithms and frameworks in this book. We have access
    to the most powerful intelligent algorithms in the history of humanity. From MDP
    to GA algorithms, and from KMC, KNN, PCA, NLP, and CUI algorithms to CNN, RBM,
    RNN, and LSTM networks, we have explored many AI tools. But there may be ways
    to build unified models. We will see in the years to come. In the meantime, neuromorphic
    computing makes our toolbox incredibly intelligent. Google has TPU hardware to
    optimize TensorFlow, neuromorphic computing can rely on Intel chips, and many
    corporations are working to produce more innovative hardware.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中介绍了许多算法和框架。我们接触到了人类历史上最强大的智能算法。从MDP到GA算法，从KMC、KNN、PCA、NLP和CUI算法到CNN、RBM、RNN和LSTM网络，我们探索了许多AI工具。但也许有办法构建统一的模型，我们将在未来几年看到。在此期间，神经形态计算使我们的工具箱变得极其智能。谷歌拥有优化TensorFlow的TPU硬件，神经形态计算可以依赖英特尔芯片，许多公司正在努力生产更多创新的硬件。
- en: The future will no doubt rely on hybrid architectures in which some or all of
    the AI tools will be built into meta-AI systems.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 未来无疑将依赖混合架构，其中一些或所有AI工具将集成到元AI系统中。
- en: In *Chapter 19*, *Quantum Computing*, we will explore the exponential hardware
    available for quantum mechanics. Quantum computers, having no memory, rely on
    other systems to provide inputs and process outputs. Imagine a neuromorphic system
    chained to a quantum computer!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第19章*，*量子计算*中，我们将探讨量子力学可用的指数级硬件。量子计算机没有内存，依赖其他系统提供输入并处理输出。想象一下，一个神经形态系统与量子计算机相连！
- en: Questions
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Neuromorphic computing reproduces our mental activity. (Yes | No)
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神经形态计算重现了我们的心理活动。（是 | 否）
- en: Neuromorphic computing reproduces our brain activity. (Yes | No)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神经形态计算重现了我们的大脑活动。（是 | 否）
- en: Semantic Pointer Architecture (SPA) is a hardware architecture. (Yes | No)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 语义指针架构（SPA）是一种硬件架构。（是 | 否）
- en: NEF stands for Neural Engineering Framework. (Yes | No)
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NEF代表神经工程框架。（是 | 否）
- en: Loihi is a classical chip. (Yes | No)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Loihi是一个经典芯片。（是 | 否）
- en: Reproducing our brain's neural activity cannot solve an equation. (Yes | No)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重现我们大脑的神经活动不能解决方程。（是 | 否）
- en: An ensemble in Nengo contains algorithms. (Yes | No)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Nengo中的集成包含算法。（是 | 否）
- en: Spiking blocks neuronal activity. (Yes | No)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脉冲块神经元活动。（是 | 否）
- en: Firing patterns can be used to analyze brain activity. (Yes | No)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放电模式可用于分析大脑活动。（是 | 否）
- en: Machine learning and deep learning are only metaphors of our brain's activity.
    (Yes | No)
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机器学习和深度学习只是我们大脑活动的比喻。（是 | 否）
- en: References
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Reference programs used for this chapter can be found at [https://www.nengo.ai](https://www.nengo.ai),
    [https://www.nengo.ai/examples/](https://www.nengo.ai/examples/).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的参考程序可以在[https://www.nengo.ai](https://www.nengo.ai)，[https://www.nengo.ai/examples/](https://www.nengo.ai/examples/)找到。
- en: Further reading
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Research** – *How to Build a Brain*, *Chris Eliasmith*: This book provides
    the theoretical background for neuromorphic computing.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**研究** – *如何构建大脑*，*克里斯·埃利亚斯密斯*：本书提供了神经形态计算的理论背景。'
- en: Chris Eliasmith is also one of the designers of Nengo.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 克里斯·埃利亚斯密斯也是Nengo的设计者之一。
- en: '**Software** – Nengo ([https://www.nengo.ai/](https://www.nengo.ai/)): Nengo
    is based on solid research, documentation, and an excellent community.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件** – Nengo（[https://www.nengo.ai/](https://www.nengo.ai/)）：Nengo基于扎实的研究、文档和优秀的社区。'
- en: '**Hardware** – Intel: Intel is working hard to produce a neuromorphic chip
    ([https://www.intel.fr/content/www/fr/fr/research/neuromorphic-computing.html](https://www.intel.fr/content/www/fr/fr/research/neuromorphic-computing.html)).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件** – 英特尔：英特尔正在努力生产神经形态芯片（[https://www.intel.fr/content/www/fr/fr/research/neuromorphic-computing.html](https://www.intel.fr/content/www/fr/fr/research/neuromorphic-computing.html)）。'
