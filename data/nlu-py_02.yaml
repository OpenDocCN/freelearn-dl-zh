- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Identifying Practical Natural Language Understanding Problems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别实际的自然语言理解问题
- en: In this chapter, you will learn how to identify **natural language understanding**
    (**NLU**) problems that are a good fit for today’s technology. That means they
    will not be too difficult for the state-of-the-art NLU approaches but neither
    can they be addressed by simple, non-NLU approaches. Practical NLU problems also
    require sufficient training data. Without sufficient training data, the resulting
    NLU system will perform poorly. The benefits of an NLU system also must justify
    its development and maintenance costs. While many of these considerations are
    things that project managers should think about, they also apply to students who
    are looking for class projects or thesis topics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何识别适合当今技术的**自然语言理解**（**NLU**）问题。这意味着这些问题不会对当前最先进的NLU方法造成过大的挑战，但也不能通过简单的非-NLU方法来解决。实际的NLU问题还需要足够的训练数据。如果没有足够的训练数据，最终的NLU系统将表现不佳。NLU系统的好处也必须能够证明其开发和维护成本是合理的。尽管这些考虑事项主要是项目经理需要思考的内容，但它们同样适用于寻找课程项目或论文题目的学生。
- en: Before starting a project that involves NLU, the first question to ask is whether
    the goals of the project are a good fit for the current state of the art in NLU.
    Is NLU the right technology for solving the problem that you wish to address?
    How does the difficulty of the problem compare to the NLU state of the art?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始一个涉及NLU的项目之前，首先要问的问题是：项目的目标是否适合当前NLU技术的最先进水平？NLU是解决你希望解决的问题的合适技术吗？这个问题的难度与当前NLU技术的水平相比如何？
- en: Starting out, it’s also important to decide what *solving the problem* means.
    Problems can be solved to different degrees. If the application is a class project,
    demo, or proof of concept, the solution does not have to be as accurate as a deployed
    solution that’s designed for the robust processing of thousands of user inputs
    a day. Similarly, if the problem is a cutting-edge research question, any improvement
    over the current state of the art is valuable, even if the problem isn’t completely
    solved by the work done in the project. How complete the solution has to be is
    a question that everyone needs to decide as they think about the problem that
    they want to address.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时，同样重要的是决定*解决问题*意味着什么。问题的解决程度可以有不同的标准。如果应用是一个课程项目、演示或概念验证，解决方案的准确性不必像为处理每天成千上万用户输入而设计的已部署解决方案那样高。同样，如果问题是一个前沿的研究问题，那么任何对当前技术状态的改进都是有价值的，即使该问题没有完全通过项目中的工作得到解决。解决方案的完整性需要达到什么程度是每个人在考虑自己想要解决的问题时需要做出的决定。
- en: The project manager, or whoever is responsible for making the technical decisions
    about what technologies to use, should decide what level of accuracy they would
    find acceptable when the project is completed, keeping in mind that 100% accuracy
    is unlikely to be achievable in any natural language technology application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 项目经理或负责做出技术决策的人员应该决定在项目完成时可接受的准确性水平，同时要记住，任何自然语言技术应用中都不太可能达到100%的准确性。
- en: This chapter will get into the details of identifying problems where NLU is
    applicable. Follow the principles discussed in this chapter, and you will be rewarded
    with a quality, working system that solves a real problem for its users.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细探讨如何识别适合应用NLU的实际问题。遵循本章讨论的原则，你将获得一个高质量、能够解决真实问题的有效系统。
- en: 'The following topics are covered in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及以下主题：
- en: Identifying problems that are the appropriate level of difficulty for the technology
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别技术适用难度的问题
- en: Looking at difficult NLU applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑困难的NLU应用
- en: Looking at applications that don’t need NLP
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑不需要NLP的应用
- en: Training data
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练数据
- en: Application data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用数据
- en: Taking development costs into account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑开发成本
- en: Taking maintenance costs into account
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑维护成本
- en: A flowchart for deciding on NLU applications
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定NLU应用的流程图
- en: Identifying problems that are the appropriate level of difficulty for the technology
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别技术适用难度的问题
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: This chapter is focused on technical considerations. Questions such as whether
    a market exists for a proposed application, or how to decide whether customers
    will find it appealing, are important questions, but they are outside of the scope
    of this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章集中于技术性考虑问题。诸如是否存在市场需求、如何判断客户是否会对某个应用感兴趣等问题是很重要的，但它们超出了本书的范围。
- en: Here are some kinds of problems that are a good fit for the state of the art.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一些适合当前技术水平的问题类型。
- en: 'Today’s NLU is very good at handling problems based on specific, concrete topics,
    such as these examples:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的自然语言理解（NLU）在处理基于特定、具体主题的问题方面非常出色，例如以下示例：
- en: '**Classifying customers’ product reviews into positive and negative reviews**:
    Online sellers typically offer buyers a chance to review products they have bought,
    which is helpful for other prospective buyers as well as for sellers. But large
    online retailers with thousands of products are then faced with the problem of
    what to do with the information from thousands of reviews. It’s impossible for
    human tabulators to read all the incoming reviews, so an automated product review
    classification system would be very helpful.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将客户的产品评论分类为正面和负面评论**：在线卖家通常会给买家提供评论他们购买的产品的机会，这对其他潜在买家以及卖家都有帮助。但是，大型在线零售商有成千上万的产品，因此面临着如何处理来自成千上万条评论的信息的问题。人工统计员无法阅读所有进入的评论，因此自动化的产品评论分类系统将非常有用。'
- en: '**Answering basic banking questions about account balances or recent transactions**:
    Banks and other financial institutions have large contact centers that handle
    customer questions. Often, the most common reasons for calling are simple questions
    about account balances, which can be answered with a database lookup based on
    account numbers and account types. An automated system can handle these by asking
    callers for their account numbers and the kind of information they need.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回答有关账户余额或最近交易的基本银行问题**：银行和其他金融机构拥有大型的客户服务中心来处理客户问题。通常，拨打电话的最常见原因是关于账户余额的简单问题，这些问题可以通过基于账户号码和账户类型的数据库查询来解答。一个自动化系统可以通过询问来电者他们的账户号码和所需信息的种类来处理这些问题。'
- en: '**Making simple stock trades**: Buying and selling stock can become very complex,
    but in many cases, users simply want to buy or sell a certain number of shares
    of a specific company. This kind of transaction only needs a few pieces of information,
    such as an account number, the company, the number of shares, and whether to buy
    or sell.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行简单的股票交易**：买卖股票可能会变得非常复杂，但在许多情况下，用户只是想买或卖某个特定公司的一定数量的股票。这种交易只需要一些基本信息，例如账户号码、公司名称、股票数量以及买入或卖出的选择。'
- en: '**Package tracking**: Package tracking needs only a tracking number to tell
    users the status of their shipments. While web-based package tracking is common,
    sometimes, people don’t have access to the web. With a natural language application,
    users can track packages with just a phone call.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包裹追踪**：包裹追踪只需要一个追踪号码即可告诉用户他们的包裹状态。虽然基于网络的包裹追踪很常见，但有时人们无法访问网络。通过自然语言应用，用户只需打个电话就能追踪包裹。'
- en: '**Routing customers’ questions to the right customer service agent**: Many
    customers have questions that can only be answered by a human customer service
    agent. For those customers, an NLU system can still be helpful by directing the
    callers to the call center agents in the right department. It can ask the customer
    the reason for their call, classify the request, and then automatically route
    their call to the expert or department that handles that topic.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将客户问题路由到正确的客服代表**：许多客户的问题只能由人工客服代表回答。对于这些客户，NLU系统仍然很有帮助，它可以将来电者引导到正确部门的客服代表那里。它可以询问客户来电的原因，分类请求，然后自动将来电转接到处理该主题的专家或部门。'
- en: '**Providing information about weather forecasts, sports scores, and historical
    facts**: These kinds of applications are characterized by requests that have a
    few well-defined parameters. For sports scores, this would be a team name and
    possibly the date of a game. For weather forecasts, the parameters include the
    location and timeframe for the forecast.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供天气预报、体育比分和历史事实信息**：这些类型的应用程序特点是请求有几个明确的参数。例如，对于体育比分，可能需要球队名称以及比赛日期。对于天气预报，参数包括位置和预报的时间框架。'
- en: All of these applications are characterized by having unambiguous, correct answers.
    In addition, the user’s language that the system is expected to understand is
    not too complex. These would all be suitable topics for an NLU project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些应用的特点是它们都有明确且正确的答案。此外，系统预期理解的用户语言也不复杂。这些都是适合自然语言理解（NLU）项目的主题。
- en: Let’s illustrate what makes these applications suitable for today’s technology
    by going into more detail on providing information about weather forecasts, sports
    scores, and historical facts.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过更详细地讲解天气预报、体育成绩和历史事实的信息提供方式，来说明这些应用为何适合今天的技术。
- en: '*Figure 2**.1* shows a sample architecture for an application that can provide
    weather forecasts for different cities. Processing starts when the user asks,
    *What is the weather forecast for tomorrow in New York City?* Note that the user
    is making a single, short request, for specific information – the weather forecast,
    for a particular date, in a particular location. The NLU system needs to detect
    the intent (weather forecast), the entities’ *location*, and the *date*. These
    should all be easy to find – the entities are very dissimilar, and the *weather
    forecast* intent is not likely to be confused with any other intents. This makes
    it straightforward for the NLU system to convert the user’s question to a structured
    message that could be interpreted by a weather information web service, as shown
    at the top of the following figure:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.1* 显示了一个示例架构，用于提供不同城市的天气预报。当用户询问，“明天纽约市的天气预报是什么？”时，处理过程开始。请注意，用户发出了一个单一且简短的请求，要求提供特定信息——明天在特定地点的天气预报。自然语言理解系统需要检测意图（天气预报）、实体的*位置*和*日期*。这些都应该很容易找到——这些实体差异很大，而*天气预报*的意图不太可能与其他意图混淆。这使得自然语言理解系统能够轻松地将用户的提问转换为一个结构化的消息，供天气信息网络服务解释，如下图所示：'
- en: '![Figure 2.1 – A practical NLU application](img/B19005_02_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 一个实用的自然语言理解应用](img/B19005_02_01.jpg)'
- en: Figure 2.1 – A practical NLU application
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 一个实用的自然语言理解应用
- en: 'Despite the fact that the information being requested is not very complex,
    there are many ways to ask about it, which means that it’s not very practical
    to just make a list of possible user queries. *Table 2.1* illustrates a few of
    the many ways to make this request:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管请求的信息并不复杂，但有很多不同的问法，这意味着仅仅列出可能的用户查询并不实际。*表 2.1* 展示了几种提出这个请求的方式：
- en: '| Some paraphrases of “What is the weather forecast for tomorrow in New York
    City?” |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| “明天纽约市的天气预报是什么？”的几种改述 |'
- en: '| --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| What will the weather be like tomorrow in New York? |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 明天纽约的天气会怎么样？ |'
- en: '| What’s tomorrow’s weather for New York? |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 明天纽约的天气怎么样？ |'
- en: '| I want the New York City weather forecast for tomorrow. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 我想要纽约市明天的天气预报。 |'
- en: '| The weather tomorrow in New York, please. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 请告诉我明天纽约的天气。 |'
- en: '| New York weather forecast for tomorrow. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 明天纽约的天气预报。 |'
- en: '| Tomorrow’s weather forecast for New York City. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 明天纽约市的天气预报。 |'
- en: Table 2.1 – Paraphrases for a weather request
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1 – 天气请求的改述
- en: Another aspect of this application that makes it a good candidate for NLU is
    that the information the user is asking about (weather forecasts) is available
    from multiple easily-accessible, cloud-based web services, with **application
    programming interfaces** (**APIs**) that are usually well documented. This makes
    it easy for developers to send queries to the web services and get back the information
    that the user requested in a structured form. This information can then be presented
    to the user. Developers have choices about how they want to present the information
    – for example, text, graphics, or a combination of text and graphics.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使该应用适合自然语言理解的因素是，用户询问的信息（天气预报）可以通过多个易于访问的基于云的网络服务获得，这些服务的**应用程序接口**（**APIs**）通常有良好的文档支持。这使得开发者能够轻松向这些网络服务发送查询，并以结构化的形式获取用户请求的信息。然后，这些信息可以呈现给用户。开发者可以根据自己的需要选择展示方式——例如，文本、图形，或文本和图形的组合。
- en: In *Figure 2**.1*, we can see that the developer has chosen to present the information
    via natural language, and consequently, a **natural language generation** (**NLG**)
    component is used to generate the natural language output from a form. Other presentation
    options would be to show graphics, such as a picture of the sun partially covered
    by a cloud, or to simply show a form with the information received from the weather
    information web service. However, only the NLG option is a good fit for a spoken
    or voice-only interface such as a smart speaker since, with a voice-only interface,
    there is no way to display graphics.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 2.1*中，我们可以看到开发者选择通过自然语言呈现信息，因此使用了**自然语言生成**（**NLG**）组件，从表单中生成自然语言输出。其他展示选项包括显示图形，例如一个被云遮住的太阳图片，或者简单地显示来自天气信息网页服务的表单信息。然而，只有
    NLG 选项适合语音或仅语音的界面，比如智能音响，因为在语音界面下无法显示图形。
- en: The biggest benefit of NLU for an application such as weather forecasting is
    that NLU can handle the many possible ways that the user might ask this question
    with the same intent, as shown in *Table 2.1*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: NLU 在天气预报等应用中的最大好处是，它能够处理用户可能以相同意图提问的多种不同方式，如*表 2.1*所示。
- en: '*Table 2.1* shows some paraphrases of a weather forecast request. These are
    just a few examples of possible ways to ask for a weather forecast. It is often
    surprising how many different ways there are to make even a simple request. If
    we could make a list of all the options, even if it was a very long list, NLU
    wouldn’t be necessary.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 2.1* 展示了几种天气预报请求的不同表达方式。这些只是请求天气预报的几种可能方式的示例。令人惊讶的是，即便是简单的请求，也有许多不同的表达方式。如果我们能够列出所有选项，即使它是一个非常长的列表，NLU
    也就不再是必需的了。'
- en: We could theoretically just list all the possibilities and map them to the structured
    queries. However, it’s actually very difficult to anticipate all the possible
    ways that someone would ask even a simple question about the weather. If a user
    happens to phrase their query in a way that the developer hasn’t included in their
    list, the system will fail to respond. This can be very confusing to users because
    users won’t understand why this query failed when similar queries worked. An NLU
    system will be able to cope with many more query variations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们理论上可以列出所有可能性，并将它们映射到结构化查询。然而，实际上，很难预测一个人提出即使是简单的天气问题时，所有可能的提问方式。如果用户恰好以开发者未在列表中包含的方式表达查询，系统将无法响应。这会让用户感到困惑，因为他们不明白为什么类似的查询能成功，而这个查询却失败了。一个
    NLU 系统能够应对更多查询变化。
- en: As we’ve seen in this section, applications that have clear and easily identifiable
    intents and entities and that have definite answers that can be obtained from
    web resources, have a good chance of success with today’s NLU technology.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本节中所见，具有清晰且易于识别的意图和实体，并且能够从网络资源获取明确答案的应用，具有很大的成功机会，特别是使用今天的 NLU 技术。
- en: Now, let’s turn to applications that are unlikely to be successful because they
    require capabilities that are beyond the state of the art.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向一些不太可能成功的应用，因为它们需要超出当前技术水平的能力。
- en: Looking at difficult applications of NLU
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看看 NLU 的难度较大的应用。
- en: 'How can we tell whether the problem is too hard for the state of the art? First
    of all, we can ask what it means for a problem to be *too hard*. Here are some
    consequences of trying to use NLU for an application that is beyond the state
    of the art:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何判断某个问题是否对当前技术水平来说太难？首先，我们可以问，什么样的问题才算是*太难*。以下是尝试在超出当前技术水平的应用中使用 NLU 的一些后果：
- en: The system will be unable to reliably understand user queries
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统将无法可靠地理解用户的查询。
- en: Answers will contain errors because the system has misunderstood user queries
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 答案将包含错误，因为系统误解了用户的查询。
- en: The system will have to say *I don’t know* or *I can’t do that* so frequently
    that users become frustrated and decide not to use the application anymore
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统将不得不频繁地说*我不知道*或*我做不到*，以至于用户感到沮丧并决定不再使用该应用。
- en: It’s important to keep in mind that the state of the art is rapidly improving.
    Remarkable progress has been made recently as cloud-based **large language models**
    (**LLMs**) such as ChatGPT have become available. Some applications that might
    be very hard now will not always be too hard.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，技术水平正在迅速提高。最近，随着基于云的**大语言模型**（**LLMs**）如 ChatGPT 的出现，已经取得了显著进展。一些目前可能非常困难的应用，未来可能就不再那么困难了。
- en: Let’s look at a few of the characteristics of today’s difficult NLU problems.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看今天一些难度较大的自然语言理解问题的特点。
- en: Applications that require the system to use judgment or common sense
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要系统做出判断或使用常识的应用程序
- en: 'Unlike the weather example in the previous section, applications that require
    judgment are applications where there isn’t a single correct answer, or even a
    few reasonable alternatives. These could include applications where the user is
    asking for advice that depends on many, often complex, considerations. Here are
    some examples:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一节中的天气示例不同，要求做出判断的应用程序是那些没有唯一正确答案，甚至没有几个合理备选答案的应用。这些应用可能包括用户要求的建议，这些建议依赖于许多，通常是复杂的因素。以下是一些示例：
- en: Should I learn Python?
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该学习 Python 吗？
- en: Should I get a COVID vaccine?
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该接种 COVID 疫苗吗？
- en: Should I buy an electric car?
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该买电动汽车吗？
- en: Is this a good time to buy a house?
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在是买房的好时机吗？
- en: To answer the first question, the system needs specific knowledge about the
    user (whether the user already has a programming background or what they want
    to do with their new programming skills). LLM-based systems, such as ChatGPT,
    will respond to these kinds of questions in a general way – for example, by providing
    generic considerations about buying a house – but they can’t give advice that’s
    specific to the user, because they don’t know anything about the user.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答第一个问题，系统需要关于用户的具体知识（例如，用户是否已经有编程背景，或者他们希望用新学到的编程技能做什么）。基于大语言模型的系统，如 ChatGPT，将以一般的方式回答这些问题——例如，通过提供关于买房的普遍考虑因素——但它们无法提供针对用户的具体建议，因为它们不了解用户的任何信息。
- en: 'Applications in which the system is asked for a subjective opinion are also
    very difficult to handle well, such as these examples:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 系统被要求提供主观意见的应用程序也是非常难以处理的，例如以下这些示例：
- en: What is the best movie of all time?
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有史以来最好的电影是什么？
- en: Who was the most talented 20th-century actor?
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁是20世纪最有才华的演员？
- en: What is a good way to cook chicken that doesn’t take more than half an hour?
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有什么好方法可以在半小时内做鸡肉？
- en: To fully answer these kinds of queries requires the system to have a lot of
    general knowledge, such as actors who had careers in the 20th century. A system
    could respond to subjective questions by giving a random answer – just pick a
    movie at random and say that that movie is the best of all time. However, a randomly
    picked movie is not necessarily going to even be good, let alone the best movie
    of all time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全回答这些类型的查询，需要系统拥有大量的常识性知识，例如，20世纪有过职业生涯的演员。系统可以通过给出随机答案来回答主观性问题——例如，随便挑一部电影并说这部电影是有史以来最好的。但随机挑选的电影不一定好，更不用说是有史以来最好的电影了。
- en: In that case, if there’s a follow-up question, the system won’t be able to explain
    or defend its opinion. So, if you asked a system *Should I buy an electric car*,
    and it said *Yes*, it wouldn’t be able to explain why it said yes. In fact, it’s
    probably too difficult for many of today’s systems to even realize that they’re
    being asked a subjective question. As in the case of questions that require the
    knowledge of the user to give a good answer, LLM-based systems will give generic
    answers to subjective questions, but they will admit that they aren’t able to
    deal with subjectivity.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果有后续问题，系统将无法解释或为其观点辩护。所以，如果你问一个系统 *我应该买电动汽车吗*，并且它回答 *是的*，它将无法解释为什么回答是“是的”。事实上，今天的许多系统可能甚至没有意识到它们正在被问一个主观性问题。就像需要了解用户信息才能给出好答案的问题一样，基于大语言模型的系统会给出一般性的回答，但它们会承认自己无法处理主观性问题。
- en: Applications that require dealing with hypotheticals, possibilities, and counterfactuals
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要处理假设、可能性和反事实的应用程序
- en: 'Another difficult area is dealing with information that isn’t true or is possibly
    not true. When the user asks about something that might happen, if the circumstances
    are right, the user is asking about a hypothetical or a possibility. Today’s state-of-the-art
    systems are good at providing specific, concrete information, but the technology
    is not good at reasoning about possibilities. Here are some examples:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个难点是处理不真实或可能不真实的信息。当用户询问某件可能发生的事情，如果条件合适，用户实际上是在问一个假设或者可能性。今天最先进的系统擅长提供具体的、确凿的信息，但该技术不擅长推理关于可能性的内容。以下是一些示例：
- en: If I have a budget of $15,000, how big of a patio should I be able to build,
    assuming I’m willing to do some of the work myself?
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我的预算是 15,000 美元，假设我愿意做一些自己动手的工作，那我应该能够建造多大的露台？
- en: If I have six people, how many pizzas should I get?
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我有六个人，我应该买多少个披萨？
- en: If there’s no rain in the forecast tomorrow, remind me to water my plants.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果明天预报没有雨，提醒我浇水我的植物。
- en: Similarly, systems aren’t very good at reasoning about things that aren’t true.
    For example, consider the sentence, *I’d like to find a nearby Asian restaurant,
    but not Japanese*. To answer this question correctly, the system has to find Asian
    restaurants, and it has to understand that it should exclude Japanese restaurants,
    which are nevertheless Asian, from the list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，系统在推理不真实的事情时也做得不太好。例如，考虑下面的句子，*我想找一家附近的亚洲餐馆，但不要日本餐馆*。为了正确回答这个问题，系统必须找到亚洲餐馆，并且要理解它应该排除日本餐馆，尽管它也是亚洲餐馆。
- en: Applications that require combining information from a language with information
    from various sensors
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要将语言信息与各种传感器信息结合的应用
- en: 'Some very interesting applications could involve integrating information from
    language and cameras or microphones. These are called **multimodal** applications
    because they integrate multiple modalities such as speech, images, and non-speech
    audio such as music:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一些非常有趣的应用可能涉及集成语言和摄像头或麦克风的信息。这些被称为**多模态**应用，因为它们集成了多种模态，如语音、图像以及非语音音频（如音乐）：
- en: Is this cake done? (holding camera up to cake)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个蛋糕做好了吗？（举起相机对准蛋糕）
- en: What is this noise that my car is making? (holding microphone up to engine)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的车发出的噪音是什么？（把麦克风对准引擎）
- en: These applications are currently beyond the state of the art of today’s commercial
    natural language technology, although they could be appropriate for an exploratory
    research project. They are also currently outside of the capabilities of LLMs,
    which can only understand text input.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用目前超出了现有商业自然语言技术的水平，尽管它们可以作为一个探索性研究项目的主题。它们目前也超出了LLM的能力范围，LLM只能理解文本输入。
- en: Applications that integrate broad general or expert knowledge
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成广泛的通用知识或专家知识的应用
- en: When users interact with an NLU system, they have goals that they want to accomplish.
    In many cases, the system has some kind of knowledge or expertise that the user
    doesn’t have, and the user wants to take advantage of that expertise. But where
    does that expertise come from? Providing systems with large amounts of knowledge
    is difficult. There are existing web APIs for simple information such as sports
    scores and weather. Systems such as Wolfram Alpha can also answer more complicated
    questions, such as scientific facts.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户与自然语言理解（NLU）系统交互时，他们有一些希望达成的目标。在许多情况下，系统拥有用户没有的某种知识或专业技能，而用户希望利用这些专业技能。那么，这些专业知识来自哪里呢？为系统提供大量知识是非常困难的。现有的网络API可以提供一些简单信息，比如体育比分和天气情况。像Wolfram
    Alpha这样的系统也可以回答更复杂的问题，比如科学事实。
- en: On the other hand, answering questions that require the use of expert knowledge,
    such as medical information, is more difficult, as there’s no easily accessible
    source of this kind of knowledge. In addition, existing sources of information
    might be inconsistent. One obvious source of large amounts of knowledge is the
    **World Wide Web** (**WWW**), which is the major source of knowledge of LLM. However,
    knowledge available on the WWW can be wrong, inconsistent, or not applicable to
    a particular situation, so it has to be used with caution.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，回答需要使用专家知识的问题，比如医疗信息，要困难得多，因为没有易于获取的此类知识来源。此外，现有的信息来源可能是不一致的。一个显而易见的大量知识来源是**万维网**（**WWW**），它是LLM的主要知识来源。然而，WWW上的知识可能是错误的、不一致的，或者不适用于特定情况，因此必须谨慎使用。
- en: 'These are a few examples of difficult topics for today’s natural language technology:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是今天自然语言技术面临的一些困难主题：
- en: '**Answer complex technical questions**: A statement like *I can’t connect to
    the internet* requires the system to have a lot of information about internet
    connectivity as well as how to debug connectivity problems. It would also have
    to have access to other time-sensitive information such as whether there are global
    internet outages in the user’s area.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回答复杂的技术问题**：像*我无法连接到互联网*这样的陈述要求系统拥有大量关于互联网连接的信息以及如何调试连接问题的信息。它还需要访问其他时间敏感的信息，比如用户所在地区是否有全球互联网中断。'
- en: '**Answer questions that require an understanding of human relationships**:
    *My friend won’t talk to me since I started dating her boyfriend; what should
    I do?* A system would have to understand a lot about dating, and probably dating
    in a specific culture as well, in order to give a good answer to a question like
    this.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回答涉及人际关系理解的问题**：*自从我开始和她的男朋友约会后，我的朋友就不理我了，我该怎么办？* 系统必须了解大量的约会相关知识，可能还需要了解特定文化中的约会习俗，才能给出这样问题的合理答案。'
- en: '**Read a book and tell me whether I would like that book**: Today’s systems
    would have a hard time even reading and understanding an entire book since long
    texts like books contain very complex information. In addition to just reading
    a book, for a system to tell me whether I would like it requires a lot of information
    about me and my reading interests.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读一本书并告诉我是否会喜欢这本书**：现有的系统甚至很难阅读并理解一本完整的书籍，因为像书籍这样的长篇文本包含了非常复杂的信息。除了阅读一本书，系统要告诉我是否会喜欢这本书，还需要了解大量关于我和我的阅读兴趣的信息。'
- en: '**Read an article from a medical journal and tell me whether the findings apply
    to me**: Answering questions like this would require a tremendous amount of information
    about the user’s health and medical history, as well as the ability to understand
    medical language and interpret the results of medical studies.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阅读一篇医学期刊文章并告诉我研究结果是否适用于我**：回答这样的问题需要大量关于用户健康和病史的信息，并且还需要理解医学语言以及解读医学研究结果的能力。'
- en: '**Understand jokes**: Understanding jokes often requires considerable cultural
    knowledge. Think about what knowledge a system would need to be able to understand
    the traditional joke, *Why did the chicken cross the road? To get to the other
    side*. This is funny because the question leads the user to believe that the chicken
    has an interesting reason for crossing the road, but its reason turns out to be
    extremely obvious. Not only would it be very hard for a system to be able to understand
    why this particular joke is funny, but this is only one joke—just being able to
    understand this joke wouldn’t help a system understand any other jokes.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解笑话**：理解笑话通常需要相当的文化知识。想一想，一个系统需要什么知识才能理解传统笑话*为什么鸡要过马路？为了到另一边*。这很好笑是因为问题让人以为鸡过马路有个有趣的理由，但它的理由实际上是非常明显的。要理解这个特定笑话为什么好笑对系统来说会非常困难，而且这只是一个笑话——仅仅理解这个笑话并不能帮助系统理解其他笑话。'
- en: '**Interpret figures of speech**: *I could eat a horse* doesn’t mean that you
    want to eat a horse, it just means that you’re very hungry. A system would have
    to realize that this is a figure of speech because horses are very large and no
    one could actually eat a horse in one sitting, no matter how hungry they are.
    On the other hand, *I could eat a pizza* is not a figure of speech and probably
    just means that the user would like to order a pizza.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解读比喻**：*我能吃下一匹马*并不意味着你真想吃匹马，它只是意味着你非常饿。系统需要意识到这是一种比喻，因为马很大，没人能在一次进餐中吃掉一匹马，不管他多饿。另一方面，*我能吃一块披萨*则不是比喻，可能只是意味着用户想订一块披萨。'
- en: '**Understand irony and sarcasm**: If a book review contains a sentence like
    *The author is a real genius*, the review writer might mean that the author is
    literally a genius, but not necessarily. This could be intended sarcastically
    to mean that the author is not a genius at all. If this sentence is followed by
    *My three-year-old could have written a better book*, we can tell that the first
    sentence was intended to be taken as sarcasm. NLU systems can’t understand sarcasm.
    They also don’t know that three-year-olds are unlikely to be able to write good
    books, and so the writer of the review is claiming that the book is worse than
    one authored by a three-year-old, and so it is a bad book.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解讽刺和挖苦**：如果一本书评中写着*作者真是个天才*，评论者可能是字面意思上认为作者是天才，但也不一定。这句话可能是讽刺的意思，表示作者根本不是天才。如果这句话后面跟着*我的三岁孩子写的书可能更好*，我们就可以判断第一句话是讽刺的意思。自然语言理解（NLU）系统无法理解讽刺。它们也不知道三岁孩子不太可能写出好书，因此评论者的意思是这本书比三岁孩子写的还差，所以这本书很糟糕。'
- en: '**Be able to make use of complex knowledge**: As an example of complex knowledge,
    consider the utterance, *My cake is as flat as a pancake; what went wrong?* To
    answer this question, the system has to understand that a cake shouldn’t be flat
    but that pancakes are normally flat. It also has to understand that we’re talking
    about a cake that has been baked, as unbaked cakes are typically flat. Once the
    system has figured all this out, it also has to understand the process of baking
    enough to give advice about why the cake is flat.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能够利用复杂的知识**：以复杂知识为例，考虑以下说法，*我的蛋糕像煎饼一样平，出了什么问题？* 要回答这个问题，系统需要理解蛋糕不应该是平的，但煎饼通常是平的。它还必须理解我们讨论的是一个已经烤过的蛋糕，因为未烤过的蛋糕通常是平的。一旦系统搞清楚了这一点，它还需要理解足够的烘焙过程，以便给出关于蛋糕为何平的建议。'
- en: One general property shared by many of these difficult types of applications
    is that there often isn’t any one data source where the answers can be obtained.
    That is, there aren’t any backend data sources that developers can just query
    to answer a question like *Is this a good time to buy an electric car?* This is
    in contrast to the earlier weather forecast example, where developers can go to
    a single backend data source.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这类复杂应用所共有的一个特点是，往往没有任何单一的数据源可以提供答案。也就是说，开发人员无法简单地查询后端数据源来回答类似*现在买电动汽车合适吗？*这样的问题。这与之前天气预报的例子不同，在天气预报中，开发人员可以访问单一的后端数据源来获取答案。
- en: Rather than trying to find a single backend data source, one strategy might
    be to do a web search for the question. But as anyone who’s done a web search
    knows, there will be millions of search results (nearly 2 billion for *Is this
    a good time to buy an electric car?*), and what’s worse, the answers are not likely
    to be consistent with each other. Some pages will assert that it is a good time
    to buy an electric car, and others will assert that it is not. So, the strategy
    of using a web search to answer questions without a good data source will probably
    not work. However, being able to integrate information from across the web is
    a strength of LLMs, so if the information is available on the web, an LLM such
    as ChatGPT will be able to find it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与其试图找到单一的后端数据源，一种策略可能是通过网页搜索来寻找答案。但正如任何做过网页搜索的人所知道的那样，搜索结果会有成千上万（*例如，关于“现在买电动汽车合适吗？”的搜索结果近20亿条*），而且更糟糕的是，答案之间不太可能一致。有些页面会断言现在是购买电动汽车的好时机，其他页面则会断言现在并不适合购买。因此，单纯依赖网页搜索来回答没有明确数据源的问题可能行不通。然而，能够整合来自网页的多方面信息正是大语言模型（LLM）的强项，因此，如果信息在网络上可用，像ChatGPT这样的LLM将能够找到它。
- en: Applications where users often don’t have a clear idea of what they want
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户经常不知道自己想要什么的应用场景
- en: Users don’t always state their intentions very clearly. As an example, consider
    a tourist who’s visiting an unfamiliar town. Perhaps the town provides a service
    that tourists can call to find out about public transportation options. If a tourist
    asks a question like *What train should I take to get from the Marriott Hotel
    to 123 Market Street?*, a literal answer might be *You can’t take the train from
    the Marriott Hotel to 123 Market Street*. Or the user might be offered a circuitous
    route that takes six hours.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 用户并不总是能非常明确地表述他们的意图。举个例子，想象一个游客正在访问一个陌生的城市。也许这个城市提供一种服务，游客可以打电话了解公共交通选项。如果游客问一个问题，比如*从万豪酒店到123市场街应该坐哪趟火车？*，字面上的回答可能是*你不能从万豪酒店乘坐火车到123市场街*。或者，系统可能会提供一条绕远的路线，耗时六小时。
- en: A human agent could figure out that the caller’s actual goal is probably to
    get from the Marriott Hotel to 123 Market Street, and the reference to the train
    was just the caller’s guess that the train would be a good way to do that. In
    that case, a human agent could say something like *There isn’t really a good train
    route between those two locations; would you like some other ideas about how to
    get between them?* This would be natural for a human agent but very difficult
    for an automated system, because the system would need to be able to reason about
    what the user’s real goal is.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一位人类接线员可能会意识到，来电者的实际目标很可能是从万豪酒店到123市场街，而提到火车只是来电者猜测火车是一个好的交通方式。在这种情况下，人类接线员可能会说类似这样的话：*这两个地点之间并没有很好的火车路线；你想了解其他的交通方式吗？*
    这种对话对人类接线员来说是自然的，但对于自动化系统来说非常困难，因为系统需要能够推理出用户的真实目标。
- en: Applications that require understanding multiple languages
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要理解多种语言的应用
- en: As discussed in [*Chapter 1*](B19005_01.xhtml#_idTextAnchor016), language technology
    is better for some languages than others. If a system has to be able to communicate
    with users (by speech or text) in different languages, then language models for
    each language have to be developed. Processing for some languages will be more
    accurate than processing for other languages, and for some languages, processing
    might not be good enough at all. At the current state of the art, NLP technology
    for major European, Middle Eastern, and Asian languages should be able to handle
    most applications.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[*第一章*](B19005_01.xhtml#_idTextAnchor016)中讨论的，某些语言的语言技术比其他语言更为先进。如果一个系统需要能够与用户进行不同语言的交流（通过语音或文字），那么就必须为每种语言开发语言模型。对某些语言的处理将比其他语言更准确，而对于某些语言，处理可能根本不够好。在当前的技术水平下，针对主要的欧洲、中东和亚洲语言，NLP技术应该能够处理大多数应用。
- en: In some applications, the system has to be prepared to speak different languages
    depending on what the user says. To do this, the system has to be able to tell
    the different languages apart just by their sounds or words. This technology is
    called **language identification**. Identifying commonly spoken languages is not
    difficult but, again, this is not the case for less common languages.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些应用程序中，系统必须根据用户的语言选择与其对话。这就要求系统能够仅通过声音或单词分辨出不同的语言。这项技术叫做**语言识别**。识别常见语言并不困难，但对于不常见的语言，情况则不同。
- en: In the case of languages with very little training data, such as languages with
    fewer than one million speakers, the language may not have been studied well enough
    for natural language applications to be developed for that language.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于训练数据非常少的语言，如讲者少于一百万的语言，该语言可能没有被足够研究，导致无法为该语言开发自然语言应用程序。
- en: Even more difficult than understanding multiple languages is handling cases
    where two or more languages are mixed in the same sentence. This often happens
    when several different languages are spoken in the same area, and people can assume
    that anyone they talk with can understand all the local languages. Mixing languages
    in the same sentence is called **code-switching**. Processing sentences with code-switching
    is even more difficult than processing several languages in the same application
    because the system has to be prepared for any word in any of the languages it
    knows at any point in the sentence. This is a difficult problem for today’s technology.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 比理解多种语言更困难的是处理两种或更多语言在同一句子中的混合情况。这种情况通常发生在同一地区讲多种语言的地方，人们假设他们与之交谈的任何人都能理解所有本地语言。将不同语言混合在同一句子中称为**代码切换**。处理包含代码切换的句子比处理多个语言的句子更加困难，因为系统必须为句子中任何位置出现的任何语言的单词做好准备。这对当前的技术来说是一个难题。
- en: In the preceding discussion, we’ve reviewed many factors that make applications
    too difficult for today’s state of the art in NLP. Let’s now look at applications
    that are too easy.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的讨论中，我们回顾了许多让应用程序在当今自然语言处理（NLP）技术下过于复杂的因素。现在，让我们来看看那些过于简单的应用程序。
- en: Looking at applications that don’t need NLP
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看看那些不需要NLP的应用程序
- en: Turning from applications that are too difficult, we can also look at applications
    that are too easy – that is, applications where simpler solutions than NLP will
    work, and where NLP is overkill. These are applications where the complexity of
    the problem doesn’t justify the complexity of building and managing a natural
    language system.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由复杂的应用程序转向过于简单的应用程序，我们还可以看看那些解决方案比NLP更简单的应用程序——即，应用NLP的解决方案反而过于复杂的应用程序。这些是问题的复杂性不需要通过构建和管理自然语言系统来解决的应用场景。
- en: Natural language is characterized by unpredictable inputs and an indirect mapping
    of words to meanings. Different words can have the same meaning, and different
    meanings can be expressed by the same words, depending on the context. If there
    is a simple one-to-one mapping between inputs and meanings, NLP isn’t necessary.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言的特点是输入不可预测，且单词与意义之间没有直接的对应关系。不同的单词可以表达相同的意义，而相同的单词也可以根据上下文表达不同的意义。如果输入和意义之间有简单的一一映射，那么就不需要NLP技术。
- en: Text that can be analyzed with regular expressions
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可以通过正则表达式分析的文本
- en: The first case where NLU isn’t necessary is when the possible inputs consist
    of a limited set of options, such as cities, states, or countries. Internally,
    such inputs can be represented as lists, and can be analyzed via table lookup.
    Even if there are synonyms for certain inputs (*UK* for the *United Kingdom*,
    for example), the synonyms can be included in the lists as well.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个不需要自然语言理解（NLU）的情况是当可能的输入由一组有限的选项组成时，如城市、州或国家。内部，这些输入可以表示为列表，并通过查表的方式进行分析。即使某些输入有同义词（例如，*UK*
    代表 *United Kingdom*），这些同义词也可以被包含在列表中。
- en: A slightly more complicated, but still simple, input is when every input to
    the system is composed according to easily stated, unvarying rules. NLP is not
    necessary in those cases because the input is predictable. Good examples of these
    kinds of simple expressions are telephone numbers, which have fixed, predictable
    formats, or dates, which are more varied, but still limited. In addition to these
    generic expressions, in specific applications, there is often a requirement to
    analyze expressions such as product IDs or serial numbers. These types of inputs
    can be analyzed with regular expressions. Regular expressions are rules that describe
    patterns of characters (alphabetical, numerical, or special characters). For example,
    the `^\d{5}(-\d{4})?$` regular expression matches US zip codes, either containing
    five digits (`12345`) or containing five digits followed by a hyphen, and then
    four more digits (`12345-1234`).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个稍微复杂一点，但仍然简单的输入是当系统的每个输入都按照简单明了、不变的规则组成时。在这种情况下不需要自然语言处理（NLP），因为输入是可以预测的。这些简单表达的一个好例子是电话号码，它们有固定且可预测的格式，或者是日期，它们虽然更多样，但依然有限。除了这些通用表达，在特定的应用中，通常还需要分析诸如产品ID或序列号之类的表达式。这些类型的输入可以通过正则表达式进行分析。正则表达式是描述字符模式（字母、数字或特殊字符）的规则。例如，`^\d{5}(-\d{4})?$`
    这个正则表达式可以匹配美国邮政编码，它可以是五位数字（`12345`），也可以是五位数字后跟一个连字符，然后是四位数字（`12345-1234`）。
- en: If all of the inputs in an application are these kinds of fixed phrases, regular
    expressions can do the job without requiring full-scale NLP. If the entire problem
    can be solved with regular expressions, then NLP isn’t needed. If only part of
    the problem can be solved with regular expressions, but part of it needs NLP,
    regular expressions can be combined with natural language techniques. For example,
    if the text includes formatted numbers such as phone numbers, zip codes, or dates,
    regular expressions can be used to just analyze those numbers. Python has excellent
    libraries for handling regular expressions if regular expressions are needed in
    an application. We will discuss combining NLP and regular expressions in [*Chapter
    8*](B19005_08.xhtml#_idTextAnchor159) and [*Chapter 9*](B19005_09.xhtml#_idTextAnchor173).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用中的所有输入都属于这些固定的短语类型，正则表达式可以完成工作，而不需要全套的NLP。如果整个问题都可以通过正则表达式解决，那么就不需要NLP。如果只有部分问题可以通过正则表达式解决，而另一部分需要NLP，则可以将正则表达式与自然语言处理技术结合使用。例如，如果文本中包含格式化的数字，如电话号码、邮政编码或日期，可以使用正则表达式仅分析这些数字。如果应用中需要正则表达式，Python有很好的库来处理正则表达式。我们将在[*第8章*](B19005_08.xhtml#_idTextAnchor159)和[*第9章*](B19005_09.xhtml#_idTextAnchor173)中讨论如何将NLP与正则表达式结合使用。
- en: Recognizing inputs from a known list of words
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从已知的词汇列表中识别输入
- en: If the only available inputs are from a fixed set of possibilities, then NLP
    isn’t needed. For example, if the input can only be a US state, then the application
    can just look for the names of states. Things can get a little more complicated
    if the inputs include words from a fixed set of possibilities, but there are surrounding
    words. This is called **keyword spotting**. This can happen if the desired response
    is from a fixed set of words, such as the name of one of 50 states, and the users
    sometimes add something – for example, the user says *I live in Arizona* in response
    to a system question like *Where do* *you live?*
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果唯一可用的输入来自一组固定的可能性，则不需要NLP。例如，如果输入只能是一个美国州名，则应用程序可以直接查找州名。如果输入包括来自固定可能性集合的词汇，但还有周围的词汇，这时就会稍微复杂一些。这种情况叫做**关键词识别**。当所需的响应来自一个固定词汇集（例如50个州的名称之一），并且用户有时会添加一些东西时，就会发生这种情况——例如，用户在系统提问如*你住在哪里？*时，回答说*我住在亚利桑那*。
- en: NLP is probably not needed for this – the system just has to be able to ignore
    the irrelevant words (*I live in*, in this example). Regular expressions can be
    written to ignore irrelevant words by using `*` to match any number of characters,
    including zero. Python uses `+` to match at least one character. So, a regular
    expression for spotting the keyword `Arizona` in Python would just be `*Arizona*`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不需要 NLP——系统只需要能够忽略无关的词语（在这个例子中是 *I live in*）。可以通过使用 `*` 来编写正则表达式，以匹配任意数量的字符，包括零个字符，来忽略无关的词语。Python
    使用 `+` 来匹配至少一个字符。因此，在 Python 中，查找关键字 `Arizona` 的正则表达式就是 `*Arizona*`。
- en: Using graphical interfaces
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用图形界面
- en: Most applications rely on a **graphical user interface**, where the user interacts
    with the application by selecting choices from menus and clicking buttons. These
    conventional interfaces are easier to build than NLU-based interfaces and are
    perfectly suitable for many applications. When is an NLU-based interface a better
    choice?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序依赖于**图形用户界面**，用户通过从菜单中选择选项和点击按钮来与应用程序互动。这些传统的界面比基于 NLU 的界面更容易构建，并且适用于许多应用程序。那么，在什么情况下基于
    NLU 的界面更合适呢？
- en: NLU is a better choice as the information that the user has to supply becomes
    more detailed. When this happens, a graphical interface has to rely on deeper
    and deeper levels of menus, requiring users to navigate through menu after menu
    until they find the information they need or until the application has collected
    enough information to answer their questions. This is especially a problem with
    mobile interfaces, where the amount of information that can fit on the screen
    is much less than the amount of information that fits on a laptop or desktop computer,
    which means that the menus need to have deeper levels. On the other hand, an NLU
    input allows the user to state their goal once, without having to navigate through
    multiple menus.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: NLU 是更好的选择，因为用户需要提供的信息变得更加详细。当这种情况发生时，图形界面必须依赖更深层次的菜单，要求用户通过一个又一个菜单进行导航，直到找到所需的信息，或者直到应用程序收集到足够的信息来回答他们的问题。这在移动界面上尤为突出，因为屏幕上能够显示的信息比笔记本或台式计算机上能显示的信息要少得多，这意味着菜单需要有更深的层级。另一方面，NLU
    输入允许用户只需一次说明他们的目标，而无需通过多个菜单进行导航。
- en: Another problem that graphical interfaces with deep menus have is that the terminology
    used in the menus does not always match the users’ mental models of their goals.
    These mismatches can lead users down the wrong path. They might not realize their
    mistake until several levels farther down in the menu tree. When that happens,
    the user has to start all over again.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图形界面中深层菜单的另一个问题是，菜单中使用的术语并不总是与用户对其目标的心理模型相匹配。这些不匹配可能会导致用户走上错误的路径。他们可能直到菜单树的几层之后才意识到自己的错误。当这种情况发生时，用户必须从头开始。
- en: The contrast between graphical and NLP applications can easily be seen on websites
    and applications that include both a conventional graphical interface and an NLP
    chatbot. In those interfaces, the user can choose between menu-based navigation
    and interacting with the chatbot. A good example is the Microsoft Word 2016 interface.
    Word is a very complex application with a rich set of capabilities. Making an
    intuitive graphical interface for an application that is this complex is difficult,
    and it can be hard for users to find the information they’re looking for.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图形界面和 NLP 应用程序之间的对比可以在包含传统图形界面和 NLP 聊天机器人的网站和应用程序中轻松看到。在这些界面中，用户可以在基于菜单的导航和与聊天机器人互动之间进行选择。一个很好的例子是
    Microsoft Word 2016 界面。Word 是一个非常复杂的应用程序，功能丰富。为这样一个复杂的应用程序制作直观的图形界面是困难的，而且用户可能很难找到他们正在寻找的信息。
- en: To address this, Microsoft provides both graphical and NLP interfaces to Word
    functionality. At the top of the page of a Word document, there are choices including
    `How do I add an equation` will provide a list of several different ways to add
    an equation to a Word document. This is much quicker and more direct than looking
    through nested menus.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，微软提供了图形界面和 NLP 界面两种方式来实现 Word 功能。在 Word 文档页面顶部，有一个选项，选择`如何添加公式`会列出几种不同的方式来将公式添加到
    Word 文档中。这比在嵌套菜单中查找要快捷得多，直接得多。
- en: Developers should consider adding NLU functionality to graphical applications
    when menu levels get more than three or so levels deep, especially if each menu
    level has many choices.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当菜单层级超过三层时，开发人员应该考虑在图形应用程序中添加 NLU 功能，尤其是当每个菜单层级包含很多选择时。
- en: So far, we’ve looked at many factors that make an application more or less suited
    for NLP technology. The next considerations are related to the development process
    – the availability of data and the development process itself, which we discuss
    in the next sections.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了影响应用是否适合自然语言处理技术的许多因素。接下来的考虑因素与开发过程相关——数据的可用性以及开发过程本身，我们将在接下来的章节中讨论。
- en: Ensuring that sufficient data is available
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保有足够的数据可用
- en: Having determined whether the problem is suitable for NLU, we can turn to the
    next question – what kinds of data are available for addressing this problem?
    Is there existing data? If not, what would be involved in obtaining the kind of
    data that’s needed to solve the problem?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定问题是否适合自然语言理解（NLU）之后，我们可以转向下一个问题——为了解决这个问题，哪些类型的数据是可用的？是否有现有数据？如果没有，获取解决问题所需数据的过程是什么？
- en: We will look at two kinds of data. First, we will consider *training data*,
    or examples of the kinds of language that will be used by users of NLU systems,
    and we will look at sources of training data. The second kind of data that we
    will discuss is *application data*. The information in this section will enable
    you to determine whether you have enough training data and how much work it will
    take to format it properly to be used in the NLU system development process.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论两种数据。首先，我们将考虑*训练数据*，即NLU系统用户使用的语言类型的示例，并且我们将研究训练数据的来源。第二种数据是我们将讨论的*应用数据*。本节中的信息将帮助你确定是否有足够的训练数据，以及将其正确格式化以用于NLU系统开发过程需要多少工作。
- en: Application data is the information that the system will use to answer users’
    questions. As we will see, it can come from publicly available sources or from
    internal databases. For application data, we will see that it is important to
    ensure that the data is available, reliable, and can be obtained without excessive
    cost.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 应用数据是系统用来回答用户问题的信息。正如我们将看到的，它可以来自公开的来源，也可以来自内部数据库。对于应用数据，我们将看到，确保数据可用、可靠且可以在不产生过高成本的情况下获取是非常重要的。
- en: Training data
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练数据
- en: Natural language applications are nearly all trained based on examples of the
    kinds of inputs they’re expected to process. That means that sufficient training
    data needs to be available in order for any natural language application to be
    successful. Not having enough training data means that when the application is
    deployed, there will be inputs that can’t be processed because the system hasn’t
    been exposed to any similar inputs during the development phase. This doesn’t
    mean that the system needs to see every possible input during training. This is
    nearly impossible, especially if the intended inputs are long or complex documents
    such as product reviews.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言应用几乎都基于它们预计处理的输入类型的示例进行训练。这意味着，任何自然语言应用要成功，必须有足够的训练数据。如果没有足够的训练数据，当应用被部署时，会出现无法处理的输入，因为系统在开发阶段没有接触过类似的输入。这并不意味着系统在训练时需要看到每一个可能的输入。尤其是对于较长或复杂的文档，如产品评论，这几乎是不可能的。
- en: It is extremely unlikely that the same review will occur more than once. Rather,
    the training process is designed so that documents that are semantically similar
    will be analyzed in the same way, even if the exact words and phrasings are different.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 同一条评论发生两次的可能性极低。相反，训练过程的设计是为了使语义相似的文档以相同的方式进行分析，即使具体的单词和措辞有所不同。
- en: Machine learning algorithms such as those we’ll be learning about in [*Chapter
    9*](B19005_09.xhtml#_idTextAnchor173) and [*Chapter 10*](B19005_10.xhtml#_idTextAnchor184),
    require fairly large amounts of data. The more different categories or intents
    that have to be distinguished, the more data is required. Most practical applications
    will need thousands of training examples.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习算法，如我们将在[*第9章*](B19005_09.xhtml#_idTextAnchor173)和[*第10章*](B19005_10.xhtml#_idTextAnchor184)中学习的算法，通常需要大量数据。需要区分的类别或意图越多，所需的数据量也越大。大多数实际应用需要成千上万的训练示例。
- en: In addition to examples, normally the training data also has to include the
    *right answer* or how the trained system is expected to analyze the data. The
    technical term for the *right answer* is **annotation**. Annotations can also
    be referred to as the **ground truth** or **gold standard**. For example, if the
    application is designed to determine whether a product review is positive or negative,
    annotations (provided by human judges) assign a positive or negative label to
    a set of reviews that will be used as training and test data.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除了示例，通常训练数据还必须包括*正确答案*，即训练好的系统应该如何分析数据。*正确答案*的技术术语是**标注**。标注也可以被称为**真实值**或**黄金标准**。例如，如果应用程序的设计目的是判断产品评论是正面还是负面，标注（由人工评审提供）会为一组评论分配正面或负面标签，这些评论将用作训练和测试数据。
- en: '*Table 2.2* shows examples of positive and negative product reviews and their
    annotations. An accurate system for classifying product reviews would probably
    need to be based on several thousand product reviews. In some cases, as in the
    examples in *Table 2.2*, the task of annotation doesn’t require any special expertise;
    almost anyone with a reasonable command of English can decide whether a product
    review is positive or negative. This means that simple annotation tasks can be
    inexpensively crowdsourced.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*表2.2* 显示了产品评论的正面和负面示例及其标注。一个准确的产品评论分类系统可能需要基于几千条产品评论。在某些情况下，就像*表2.2*中的示例一样，标注任务并不需要任何特别的专业知识；几乎任何英语掌握得较好的人都可以判断产品评论是正面还是负面。这意味着简单的标注任务可以通过低成本的众包方式完成。'
- en: 'On the other hand, some annotations have to be done by subject matter experts.
    For example, annotating data from an interactive troubleshooting dialog for a
    complex software product would probably need to be done by someone with expertise
    in that product. This would make the annotation process much more expensive and
    might not even be possible if the necessary experts aren’t available:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，一些标注需要由领域专家来完成。例如，标注复杂软件产品的交互式故障排除对话数据，可能需要由具有该产品专业知识的人来做。这会使标注过程变得更加昂贵，如果所需的专家无法获得，这甚至可能变得不可能：
- en: '| Text | Annotation |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 文本 | 标注 |'
- en: '| --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| I was very disappointed with this product. It was flimsy, overpriced, and
    the paint flaked off. | Negative |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 我对这款产品感到非常失望。它很脆弱，价格过高，而且油漆脱落。 | 负面 |'
- en: '| This product met my every expectation. It is well made, looks great, and
    the price is right. I have no reservations about recommending it to anyone. |
    Positive |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 这款产品完全符合我的期望。它做工精良，外观漂亮，价格合理。我毫无保留地推荐给任何人。 | 正面 |'
- en: Table 2.2 – Examples of positive and negative annotations of product reviews
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.2 – 产品评论的正面和负面标注示例
- en: Although data annotation can be difficult and expensive, not all NLU algorithms
    require annotated data. In particular, unsupervised learning, which we will cover
    in [*Chapter 12*](B19005_12.xhtml#_idTextAnchor217), is based on unannotated data.
    In [*Chapter 12*](B19005_12.xhtml#_idTextAnchor217), we will also discuss the
    limits of unannotated data.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据标注可能既困难又昂贵，但并非所有的自然语言理解（NLU）算法都需要标注数据。特别是我们将在[*第12章*](B19005_12.xhtml#_idTextAnchor217)讨论的无监督学习，就是基于未标注的数据。在[*第12章*](B19005_12.xhtml#_idTextAnchor217)中，我们还将讨论未标注数据的局限性。
- en: The full set of training examples for an application is called a **corpus**,
    or **dataset**. It is essential to have sufficient training data in order for
    the application to be accurate. The training data does not have to be available
    all at once – development can begin before the data collection is complete, and
    additional data can be added as development progresses. This can lead to problems
    with consistency if annotators forget the criteria that they used to annotate
    earlier data.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序的完整训练示例集称为**语料库**或**数据集**。为了使应用程序准确，必须拥有足够的训练数据。训练数据不需要一次性全部可用——开发可以在数据收集完成之前开始，并且可以在开发过程中添加额外的数据。如果标注人员忘记了他们用于标注早期数据的标准，这可能会导致一致性问题。
- en: Where does data come from? Python NLP libraries contain several toy datasets
    that can be used to test system setup or algorithms, or that can be used in student
    projects where there’s no plan to put a system into production. In addition, larger
    datasets can also be obtained from organizations such as Hugging Face (https://huggingface.co/)
    or the Linguistic Data Consortium (https://www.ldc.upenn.edu/).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 数据来自哪里？Python的NLP库包含几个玩具数据集，可以用于测试系统设置或算法，或者可以用于学生项目，在这些项目中并不打算将系统投入生产。此外，还可以从像Hugging
    Face（https://huggingface.co/）或语言数据联盟（Linguistic Data Consortium，https://www.ldc.upenn.edu/）这样的组织获得更大的数据集。
- en: For enterprise applications, preexisting data from an earlier application that
    was performed by human agents can be very helpful. Examples of this could include
    transcripts of customer service calls with agents.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于企业应用程序，来自先前由人工代理执行的早期应用程序的数据可能非常有用。一个例子可能是客服通话记录。
- en: Another good source of data is the text fields of databases. For example, this
    is probably where you would expect to find product reviews for an organization’s
    products. In many cases, text fields of databases are accompanied by another field
    with a manual classification that identifies, for example, whether the review
    is positive or negative. This manual classification is, in effect, an annotation
    that can be used in the training process to create a system that can automatically
    classify product reviews.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很好的数据来源是数据库的文本字段。例如，这可能是你期望找到某个组织产品的产品评论的地方。在许多情况下，数据库的文本字段旁边会有另一个手动分类字段，用于标识评论是正面的还是负面的。例如，这种手动分类实际上是一种标注，可以用于训练过程，创建一个能够自动分类产品评论的系统。
- en: Finally, new data can also be collected specifically to support an application.
    This can be time-consuming and expensive, but sometimes it’s the only way to get
    the appropriate data. Data collection can be a complex topic in itself, especially
    when the data is collected to support interactive dialogs with human users.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，新的数据也可以专门收集以支持应用程序。这可能既费时又昂贵，但有时这是获得适当数据的唯一方法。数据收集本身可能是一个复杂的话题，特别是当数据被收集以支持与人类用户的互动对话时。
- en: Data, including data collection, is discussed in more detail in [*Chapter 5*](B19005_05.xhtml#_idTextAnchor107).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 数据，包括数据收集，将在[*第5章*](B19005_05.xhtml#_idTextAnchor107)中详细讨论。
- en: Application data
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序数据
- en: In addition to the data required to train the natural language application,
    it’s important to take into account any costs associated with accessing the information
    that the system will be providing.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 除了训练自然语言应用程序所需的数据外，还需要考虑与访问系统将提供的信息相关的任何成本。
- en: Many third-party web services provide APIs that can be accessed by developers
    to obtain free or paid information. There are some websites that provide general
    information about available public APIs, such as **APIsList** (https://apislist.com/).
    This site lists APIs that can deliver data on topics ranging over hundreds of
    categories including weather, social networks, mapping, government, travel, and
    many more. Many APIs require payments, either as a subscription or per transaction,
    so it’s important to consider these potential costs when selecting an application.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 许多第三方网络服务提供开发者可以访问的API，用于获取免费的或付费的信息。有些网站提供有关可用公共API的通用信息，例如**APIsList**（https://apislist.com/）。该网站列出了可提供涵盖数百个类别的数据的API，包括天气、社交网络、地图、政府、旅行等。许多API需要付费，无论是订阅费用还是按交易收费，因此在选择应用程序时，考虑这些潜在费用非常重要。
- en: Taking development costs into account
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑开发成本
- en: After making sure that data is available, and that the data is (or can be) annotated
    with the required intents, entities, and classification categories, the next consideration
    for deciding whether NLP is a good fit for an application is the cost of developing
    the application itself. Some technically feasible applications can nevertheless
    be impractical because they would be too costly, risky, or time-consuming to develop.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保数据可用，并且数据已（或可以）标注所需的意图、实体和分类类别后，决定自然语言处理（NLP）是否适合某个应用程序的下一个考虑因素是开发应用程序本身的成本。一些技术上可行的应用程序，尽管如此，仍然可能因开发成本过高、风险过大或耗时过长而变得不切实际。
- en: Development costs include determining the most effective machine learning approaches
    to a specific problem. This can take significant time and involve some trial and
    error as models need to be trained and retrained in the process of exploring different
    algorithms. Identifying the most promising algorithms is also likely to require
    NLP data scientists, who may be in short supply. Developers have to ask the question
    of whether the cost of development is consistent with the benefits that will be
    realized by the final application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 开发成本包括确定针对特定问题最有效的机器学习方法。这可能需要大量时间，并且需要一些试验和错误的过程，因为在探索不同算法的过程中，模型需要不断训练和重新训练。确定最有前景的算法也可能需要NLP数据科学家，而这些人才可能会很稀缺。开发人员必须问自己，开发成本是否与最终应用程序将带来的收益相匹配。
- en: For low-volume applications, it should also be kept in mind that the cost of
    developing and deploying an NLP solution can exceed the cost of employing humans
    to perform the same tasks. This is particularly true if some humans will still
    be needed for more complex tasks, even if an NLP solution is implemented and is
    doing part of the work
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于低流量的应用，必须记住，开发和部署NLP解决方案的成本可能超过雇佣人工执行相同任务的成本。特别是如果即便实施了NLP解决方案并且已经承担部分工作，仍然需要一些人工来完成更复杂的任务时，这一点尤为成立。
- en: Taking maintenance costs into account
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑维护成本
- en: The final consideration for natural language applications, especially deployed
    applications, is the cost of maintenance. This is easy to overlook because NLU
    applications have several maintenance considerations that don’t apply to most
    traditional applications. Specifically, the type of language used in some applications
    changes over time. This is expected since it reflects changes in the things that
    the users are talking about. In customer service applications, for example, product
    names, store locations, and services change, sometimes very quickly. The new vocabulary
    that customers use to ask about this information changes as well. This means that
    new words have to be added to the system, and machine learning models have to
    be retrained.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自然语言应用程序，尤其是部署后的应用程序，最后需要考虑的因素是维护成本。这一点容易被忽视，因为自然语言理解（NLU）应用有一些传统应用所没有的维护考虑因素。具体来说，某些应用程序中使用的语言类型随着时间的推移而变化。这是可以预见的，因为它反映了用户讨论内容的变化。例如，在客户服务应用中，产品名称、商店位置和服务可能会发生变化，有时变化非常迅速。客户用于询问这些信息的新词汇也会随之变化。这意味着需要将新词汇添加到系统中，并且机器学习模型必须重新训练。
- en: Similarly, applications that provide rapidly changing information need to be
    kept up to date on an ongoing basis. As an example, the word *COVID-19* was introduced
    in early 2020 – no one had ever heard it before, but now it is universally familiar.
    Since medical information about COVID-19 changes rapidly, a chatbot designed to
    provide COVID-19 information will have to be very carefully maintained in order
    to ensure that it’s up to date and is not providing incorrect or even harmful
    information.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，提供快速变化信息的应用程序需要持续进行更新。例如，“*COVID-19*”这个词在2020年初被引入——那时没有人听说过这个词，但现在它已经广为人知。由于关于COVID-19的医疗信息变化非常迅速，设计用于提供COVID-19信息的聊天机器人必须非常小心地进行维护，以确保它保持最新，并且不会提供错误甚至有害的信息。
- en: 'In order to keep applications up to date with the users’ topics, three tasks
    that are specific to natural language applications need to be planned for:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持应用程序与用户话题的同步，需要规划三个特定于自然语言应用的任务：
- en: Developers need to be assigned to keep the application up to date as new information
    (such as new products or new product categories) is added to the system.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员需要负责将应用程序保持最新，以便随着新信息（如新产品或新产品类别）加入系统。
- en: Frequent review of platform-provided logging of user inputs should be done.
    User inputs that are not handled correctly must be analyzed to determine the correct
    way of handling them. Are the users asking about new topics (intents)? Then new
    intents have to be added. Are they talking about existing topics in different
    ways? If that’s the case, new training examples need to be added to the existing
    intents.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该经常审查平台提供的用户输入日志。对于处理不当的用户输入，必须进行分析，以确定正确的处理方式。用户是否在询问新的话题（意图）？如果是这样，必须添加新的意图。用户是否在以不同的方式讨论现有话题？如果是这种情况，则需要为现有的意图添加新的训练示例。
- en: When issues are discovered and user inputs are not being handled correctly,
    the system needs to be modified. The simplest type of modification is adding new
    vocabulary, but in some cases, more structural changes are necessary. For example,
    it may be that an existing intent has to be split into multiple intents, which
    means that all the training data for the original intent has to be reviewed.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当发现问题并且用户输入未正确处理时，系统需要进行修改。最简单的修改类型是添加新词汇，但在某些情况下，可能需要更结构性的更改。例如，可能需要将现有的意图拆分为多个意图，这意味着必须重新审查原始意图的所有训练数据。
- en: 'The number of developers required to keep the application updated depends on
    several considerations:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 保持应用程序更新所需的开发人员数量取决于几个因素：
- en: '**The number of user inputs**: If the system gets hundreds or thousands of
    failed inputs per day, developers need to be assigned to review these and add
    information to the system so that it can handle these inputs'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户输入的数量**：如果系统每天收到数百或数千个失败的输入，就需要分配开发人员来审查这些输入，并向系统添加信息，以便系统能够处理这些输入。'
- en: '**The complexity of the application**: If the application includes hundreds
    of intents and entities, it will take more developers to keep it up to date and
    ensure that any new information stays consistent with old information'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序的复杂性**：如果应用程序包含数百个意图和实体，那么就需要更多的开发人员来保持其更新，并确保任何新信息与旧信息保持一致。'
- en: '**The volatility of the information provided by the application**: If the application
    is one where new words, new products, and new services are continually being added,
    the system will require more frequent changes to stay up to date'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序提供的信息波动性**：如果应用程序是一个不断添加新词、新产品和新服务的系统，那么为了保持最新状态，系统将需要更频繁的更新。'
- en: These costs are in addition to any costs for hardware or cloud services that
    are not specific to natural language applications.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些成本是额外的，除了任何与自然语言应用程序无关的硬件或云服务成本。
- en: A flowchart for deciding on NLU applications
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定NLU应用程序的流程图
- en: This chapter has covered many considerations that should be taken into account
    in deciding on an NLP application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已经涵盖了在决定使用NLP应用程序时应考虑的许多因素。
- en: '*Figure 2**.2* summarizes these considerations as a flowchart of the process
    for evaluating a potential NLU application.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.2* 总结了这些考虑因素，呈现为评估潜在NLU应用程序的流程图。'
- en: '![Figure 2.2 – Steps in evaluating an NLU project](img/B19005_02_02.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 评估NLU项目的步骤](img/B19005_02_02.jpg)'
- en: Figure 2.2 – Steps in evaluating an NLU project
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 评估NLU项目的步骤
- en: Starting at the top, the process starts by asking whether the problem is too
    hard or too easy for the current state of the art, using the criteria discussed
    earlier. If it’s either too hard or too easy, we should look for another application,
    or look at cutting back or expanding the scope of the application to make it a
    better fit for NLP technology. For example, the application might be redesigned
    to handle fewer languages.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部开始，首先要问的问题是，当前的技术水平是否使问题太难或太容易解决，如前面讨论的标准。如果问题过难或过易，我们应该寻找其他应用程序，或考虑缩小或扩大应用范围，使其更适合NLP技术。例如，应用程序可能会被重新设计，以支持更少的语言。
- en: If the problem seems to be a good fit for the state of the art, the next steps
    are to ensure that the appropriate data is available, and if not, whether data
    can be collected. Once data is available, the next thing to look at is to see
    whether the costs of development and maintenance are reasonable. If everything
    looks good, work on the application can proceed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题看起来适合当前的技术水平，下一步是确保是否有适当的数据可用，如果没有，是否可以收集数据。一旦数据可用，接下来的事情就是查看开发和维护的成本是否合理。如果一切顺利，应用程序的开发可以继续。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the topic of selecting NLP applications that have
    a good chance of success with current NLP technology. Successful applications
    generally have input with specific, objective answers, have training data available,
    and handle (at most) a few languages.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们讨论了选择那些在当前NLP技术下有较高成功可能性的NLP应用程序。成功的应用程序通常具有特定的、客观的输入答案，具有可用的训练数据，并且处理（最多）几种语言。
- en: Specifically, this chapter addressed a number of important questions. We learned
    how to identify problems that are the appropriate level of difficulty for the
    current state of the art of NLU technology. We also learned how to ensure that
    sufficient data is available for system development and how to estimate the costs
    of development and maintenance.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 本章特别解答了许多重要问题。我们学习了如何识别与当前自然语言理解技术水平相适应的适当难度问题。我们还学会了如何确保系统开发所需的数据足够，并且如何估算开发和维护成本。
- en: Learning how to evaluate the feasibility of different types of NLP applications
    as discussed in this chapter will be extremely valuable as you move forward with
    your NLP projects. Selecting an application that is too ambitious will result
    in frustration and a failed project, whereas selecting an application that is
    too easy for the state of the art will lead to wasted time and an unnecessarily
    complex system.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何评估不同类型的NLP应用的可行性，将对你推进NLP项目极有价值。选择一个过于雄心勃勃的应用会导致挫败和项目失败，而选择一个对现有技术水平来说过于简单的应用，则会浪费时间并导致不必要的复杂系统。
- en: We have achieved our goal of learning how to evaluate the feasibility of NLP
    projects in terms of important criteria such as technical feasibility as well
    as the practical considerations of data availability and maintenance costs.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经达成了学习如何评估NLP项目可行性的目标，考虑的标准包括技术可行性以及数据可用性和维护成本等实际因素。
- en: In the next chapter, we will look at the major approaches to NLP and the advantages
    and disadvantages of each approach. These approaches include rule-based systems,
    in which human experts write rules that describe how the system should analyze
    inputs, and machine learning, where the system is trained to analyze inputs by
    processing many examples of inputs and how they should be analyzed.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍NLP的主要方法以及每种方法的优缺点。这些方法包括基于规则的系统，在这种系统中，人类专家编写规则描述系统应如何分析输入，以及机器学习，在机器学习中，系统通过处理大量输入示例及其分析方式来进行训练。
- en: Part 2:Developing and Testing Natural Language Understanding Systems
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：开发与测试自然语言理解系统
- en: After completing this section, you will be able to decide what techniques are
    applicable to address a problem with natural language understanding technologies
    and implement a system using Python and Python libraries such as NLTK, spaCy,
    and Keras, and evaluate it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本节内容后，你将能够决定哪些技术适用于解决自然语言理解技术中的问题，并使用Python和Python库（如NLTK、spaCy和Keras）实现系统并进行评估。
- en: 'This part comprises the following chapters:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 3*](B19005_03.xhtml#_idTextAnchor059), *Approaches to Natural Language
    Understanding – Rule-Based Systems, Machine Learning, and Deep Learning*'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B19005_03.xhtml#_idTextAnchor059)，*自然语言理解方法 – 基于规则的系统、机器学习和深度学习*'
- en: '[*Chapter 4*](B19005_04.xhtml#_idTextAnchor085), *Selecting Libraries and Tools
    for Natural Language Understanding*'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B19005_04.xhtml#_idTextAnchor085)，*为自然语言理解选择库和工具*'
- en: '[*Chapter 5*](B19005_05.xhtml#_idTextAnchor107), *Natural Language Data – Finding
    and Preparing Data*'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B19005_05.xhtml#_idTextAnchor107)，*自然语言数据 – 寻找和准备数据*'
- en: '[*Chapter 6*](B19005_06.xhtml#_idTextAnchor134), *Exploring and Visualizing
    Data*'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B19005_06.xhtml#_idTextAnchor134)，*探索和可视化数据*'
- en: '[*Chapter 7*](B19005_07.xhtml#_idTextAnchor144), *Selecting Approaches and
    Representing Data*'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19005_07.xhtml#_idTextAnchor144)，*选择方法与表示数据*'
- en: '[*Chapter 8*](B19005_08.xhtml#_idTextAnchor159), *Rule-Based Techniques*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19005_08.xhtml#_idTextAnchor159)，*基于规则的技术*'
- en: '[*Chapter 9*](B19005_09.xhtml#_idTextAnchor173), *Machine Learning Part 1 –
    Statistical Machine Learning*'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19005_09.xhtml#_idTextAnchor173)，*机器学习第一部分 – 统计机器学习*'
- en: '[*Chapter 10*](B19005_10.xhtml#_idTextAnchor184), *Machine Learning Part 2
    – Neural Networks and Deep Learning Techniques*'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19005_10.xhtml#_idTextAnchor184)，*机器学习第二部分 – 神经网络与深度学习技术*'
- en: '[*Chapter 11*](B19005_11.xhtml#_idTextAnchor193), *Machine Learning Part 3
    – Transformers and Large Language Models*'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B19005_11.xhtml#_idTextAnchor193)，*机器学习第三部分 – Transformer与大语言模型*'
- en: '[*Chapter 12*](B19005_12.xhtml#_idTextAnchor217), *Applying Unsupervised Learning
    Approaches*'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B19005_12.xhtml#_idTextAnchor217)，*应用无监督学习方法*'
- en: '[*Chapter 13*](B19005_13.xhtml#_idTextAnchor226), *How Well Does It Work? –
    Evaluation*'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B19005_13.xhtml#_idTextAnchor226)，*它的效果如何？– 评估*'
