- en: 2\. Analyzing Documents and Text with Natural Language Processing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 使用自然语言处理分析文档和文本
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter describes the use of Amazon Comprehend to summarize text documents
    and create Lambda functions to analyze the texts. You will learn how to develop
    services by applying the serverless computing paradigm, and use Amazon Comprehend
    to examine texts to determine their primary language. You will extract information
    such as entities (people or places), key phrases (noun phrases that are indicative
    of the content), emotional sentiments, and topics from a set of documents.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何使用 Amazon Comprehend 来总结文本文档并创建 Lambda 函数来分析文本。您将学习如何通过应用无服务器计算范式来开发服务，并使用
    Amazon Comprehend 来检查文本以确定其主要语言。您将从一系列文档中提取信息，例如实体（人物或地点）、关键词（指示内容的名词短语）、情感倾向和主题。
- en: By the end of this chapter, you will able to set up a Lambda function to process
    and analyze imported text using Comprehend and extract structured information
    from scanned paper documents using Amazon Textract.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够设置一个 Lambda 函数，使用 Comprehend 处理和分析导入的文本，并使用 Amazon Textract 从扫描的纸质文档中提取结构化信息。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Since 2005, when Amazon formally launched its **Elastic Compute Cloud** (**EC2**)
    web service, cloud computing has grown from a developer service to mission-critical
    infrastructure. The spectrum of applications is broad—most highly scalable consumer
    platforms such as Netflix are based on AWS, and so are many pharmaceuticals and
    genomics, as well as organizations such as the BBC and The Weather Channel, BMW,
    and Canon. As of January 2020, there are about 143 distinct AWS services spanning
    25 categories, from compute and storage to quantum technologies, robotics, and
    machine learning. In this book, we will cover a few of them, as shown in the following diagram:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2005 年亚马逊正式推出其 **弹性计算云**（**EC2**）网络服务以来，云计算已经从开发者服务发展到至关重要的基础设施。应用范围广泛——大多数高度可扩展的消费者平台，如
    Netflix，都是基于 AWS 构建的，许多制药和基因组学，以及 BBC 和 The Weather Channel、宝马和佳能等组织也是如此。截至 2020
    年 1 月，大约有 143 个不同的 AWS 服务，涵盖 25 个类别，从计算和存储到量子技术、机器人和机器学习。本书将介绍其中的一些，如下面的图表所示：
- en: '![Figure 2.1: Amazon AI services covered'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1：涵盖的 Amazon AI 服务](img/B16061_02_Inline_image2.jpg)'
- en: '](img/B16061_02_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_01.jpg](img/B16061_02_01.jpg)'
- en: 'Figure 2.1: Amazon AI services covered'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1：涵盖的 Amazon AI 服务](img/B16061_02_Inline_image5.jpg)'
- en: '![a](img/B16061_02_Inline_image1.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片 a](img/B16061_02_Inline_image1.jpg)'
- en: '**S3** is the versatile object store that we use to store the inputs to our
    AI services as well as the outputs from those services. You have been working
    with S3 since *Chapter 1*, *An Introduction to AWS*.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**S3** 是一种多功能的对象存储，我们用它来存储人工智能服务的输入以及这些服务的输出。您从 *第一章*，*AWS 简介* 开始就已经在使用 S3
    了。'
- en: '![b](img/B16061_02_Inline_image2.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片 b](img/B16061_02_Inline_image4.jpg)'
- en: '**Lambda** is the glue service that makes serverless computing possible. You
    will use Lambda later in this chapter to analyze text using Comprehend.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lambda** 是使无服务器计算成为可能的中介服务。您将在本章后面使用 Lambda 通过 Comprehend 分析文本。'
- en: '![c](img/B16061_02_Inline_image3.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片 c](img/B16061_02_Inline_image3.jpg)'
- en: '**API Gateway** is a delivery service that can enable you to create microservices
    that can be accessed by various clients, such as web, mobile, and server applications,
    via internet protocols such as HTTP, WebSocket, and REST. API Gateway gives you
    the ability to expose your microservices in a secure and scalable way. In the
    age of microservices and the "API-first" approach, the greatest challenge is the
    creation, publishing, monitoring, and maintenance of API endpoints. Almost all
    AWS services are APIs and use the API Gateway infrastructure.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**API Gateway** 是一种交付服务，可以使您创建可以通过各种客户端访问的微服务，例如通过 HTTP、WebSocket 和 REST 等互联网协议访问的
    Web、移动和服务器应用程序。API Gateway 使您能够以安全且可扩展的方式公开您的微服务。在微服务和“API 首选”方法的时代，最大的挑战是 API
    端点的创建、发布、监控和维护。几乎所有的 AWS 服务都是 API，并使用 API Gateway 基础设施。'
- en: Amazon's machine learning services, the main focus of our book, are a set of
    16 services as of January 2020\. They are also called AI services, and currently,
    the terms are interchangeable. Let's take a quick look at the ones we are interested
    in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊的机器学习服务，本书的主要焦点，截至 2020 年 1 月共有 16 个服务。它们也被称为 AI 服务，目前这两个术语可以互换使用。让我们快速了解一下我们感兴趣的服务。
- en: '![d](img/B16061_02_Inline_image4.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片 d](img/B16061_02_Inline_image6.jpg)'
- en: '**Comprehend**, the topic of this chapter, is a very versatile text analytics
    service. It performs a variety of tasks—keyphrase extraction, sentiment analysis
    (positive, negative, neutral, or mixed), syntax analysis, entity recognition,
    medical **Named Entity Recognition** (**NER**), language detection, and topic
    modeling. You will see this in action later in this chapter.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Comprehend**，本章的主题，是一个非常通用的文本分析服务。它执行各种任务——关键词提取、情感分析（正面、负面、中性或混合）、句法分析、实体识别、医疗**命名实体识别**（**NER**）、语言检测和主题建模。您将在本章后面的内容中看到它的实际应用。'
- en: '![e](img/B16061_02_Inline_image5.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![e](img/B16061_02_Inline_image5.jpg)'
- en: '**Lex** is a platform for building conversational AI, bots, or intelligent
    assistants. Conversational AI capabilities such as **automatic speech recognition**
    (**ASR**) and **natural language understanding** (**NLU**) are built into the
    Lex framework. Lex provides a very intuitive object model consisting of bots,
    utterances, slots, and sessions, as well as integration with Amazon Lambda, thus
    enabling you to develop interesting, intelligent bots in a serverless environment.
    We will see more of Lex in *Chapter 4*, *Conversational Artificial Intelligence*.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lex**是一个用于构建对话式AI、机器人或智能助手的平台。对话式AI功能，如**自动语音识别**（**ASR**）和**自然语言理解**（**NLU**），已集成到Lex框架中。Lex提供了一个非常直观的对象模型，包括机器人、话语、槽位和会话，以及与Amazon
    Lambda的集成，从而让您能够在无服务器环境中开发有趣、智能的机器人。我们将在第4章“对话式人工智能”中看到Lex的更多应用。'
- en: '![f](img/B16061_02_Inline_image6.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![f](img/B16061_02_Inline_image6.jpg)'
- en: '**Personalize** is a very useful service that allows you to personalize your
    bots. For example, incorporating personalized recommendations/content delivery,
    personalized searching based on previous interactions, or even personalized notifications
    and marketing based on user behavior! While we will not be using Amazon Personalize
    in this book, we wanted to bring your attention to services closely related to
    the ones covered in this book. That way, you can add extremely rich features as
    you expand the power of your bots and NLP services.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**个性化**是一个非常实用的服务，它允许您个性化您的机器人。例如，可以整合个性化的推荐/内容投递，基于先前交互的个性化搜索，甚至基于用户行为的个性化通知和营销！虽然我们在这本书中不会使用亚马逊个性化服务，但我们想将您的注意力引向与本书中涵盖的服务密切相关的一些服务。这样，您就可以在扩展您的机器人和NLP服务功能的同时，添加极其丰富的功能。'
- en: '![g](img/B16061_02_Inline_image7.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![g](img/B16061_02_Inline_image7.jpg)'
- en: '**Polly** is a text-to-speech service using **neural text-to-speech** (**NTTS**)
    technologies. It is very flexible and powerful, offering two styles: a newscaster
    reading style and a normal conversational style. The voice need not be monotone—Amazon
    Polly supports **Speech Synthesis Markup Language** (**SSML**), which enables
    you to adjust the speaking style, volume, speech rate, pitch, phrasing, emphasis,
    intonation, and other characteristics.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Polly**是一个使用**神经文本到语音**（**NTTS**）技术的文本到语音服务。它非常灵活且功能强大，提供两种风格：新闻播报风格和正常对话风格。声音不必单调——亚马逊Polly支持**语音合成标记语言**（**SSML**），这使您能够调整说话风格、音量、语速、音调、语调、强调、语调和其他特性。'
- en: '![h](img/B16061_02_Inline_image8.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![h](img/B16061_02_Inline_image8.jpg)'
- en: '**Textract**, as the name implies, extracts text from documents. It is an **optical
    character recognition** (**OCR**) solution that is suitable for process automation.
    It can extract key-value pairs or tables from documents such as tax forms, legal
    documents, medical forms, bank forms, patent registration, and so forth.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Textract**，正如其名所示，从文档中提取文本。它是一个适合流程自动化的**光学字符识别**（**OCR**）解决方案。它可以从税务表格、法律文件、医疗表格、银行表格、专利注册等文档中提取键值对或表格。'
- en: '![i](img/B16061_02_Inline_image9.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![i](img/B16061_02_Inline_image9.jpg)'
- en: '**Transcribe** is a speech-to-text **Automatic Speech Recognition** (**ASR**)
    service and is very versatile; for example, it can recognize multiple speakers
    and you can filter out words. It is very useful in medical transcription, for
    time-stamped subtitle generation, and for transcribing customer interactions.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Transcribe**是一个语音到文本的**自动语音识别**（**ASR**）服务，并且非常灵活；例如，它可以识别多个说话者，并且您可以过滤掉单词。它在医疗转录、时间戳字幕生成和客户交互转录中非常有用。'
- en: '![j](img/B16061_02_Inline_image10.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![j](img/B16061_02_Inline_image10.jpg)'
- en: '**Translate** is another very useful service that''s able to translate more
    than 50 languages in a scalable, real-time fashion.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Translate**是另一个非常实用的服务，它能够以可扩展、实时的方式翻译超过50种语言。'
- en: '![k](img/B16061_02_Inline_image11.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![k](img/B16061_02_Inline_image11.jpg)'
- en: '**Rekognition**, of course, is a visual analysis and image detection service
    capable of a variety of tasks, such as facial recognition, video analysis, object
    detection, and recognizing text in images. *Chapter 6*, *Computer Vision and Image
    Processing* is dedicated to Amazon Rekognition.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，**Rekognition** 是一种视觉分析和图像检测服务，能够执行各种任务，如面部识别、视频分析、物体检测和识别图像中的文本。*第6章*，*计算机视觉与图像处理*专门介绍了Amazon
    Rekognition。
- en: '![l](img/B16061_02_Inline_image12.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![l](img/B16061_02_Inline_image12.jpg)'
- en: Unlike the AI services we have looked at so far in this chapter, **Amazon Connect**
    is a very feature-rich contact center application. It consists of an omnichannel
    cloud contact center with high-quality audio, web/mobile secure chat, and a web-based
    contact control panel. The Contact Lens for Amazon Connect is a set of Contact
    center analytics services that adds capabilities such as full-text search and
    sentiment analysis, with forthcoming features such as theme detection and custom
    vocabulary. The integration with Amazon Lex for chatbots is an interesting capability
    where we can leverage the flexibility of Lex to create intelligent and useful
    bots.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章迄今为止我们探讨的AI服务不同，**Amazon Connect** 是一个功能丰富的联系中心应用。它由一个全渠道云联系中心组成，具有高质量的音频、Web/移动安全聊天和基于Web的联系控制面板。Amazon
    Connect的接触镜是一套联系中心分析服务，它增加了全文搜索和情感分析等功能，未来还将包括主题检测和自定义词汇等功能。与Amazon Lex的集成为聊天机器人提供了一个有趣的功能，我们可以利用Lex的灵活性来创建智能且有用的机器人。
- en: '![m](img/B16061_02_Inline_image13.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![m](img/B16061_02_Inline_image13.jpg)'
- en: '**Amazon Alexa**, of course, is a platform for a conversational interface as
    well as a set of hardware devices such as smart speakers that leverage the Alexa
    service to become smart assistants.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，**Amazon Alexa** 是一个对话接口的平台，以及一系列利用Alexa服务成为智能助手的硬件设备，如智能扬声器。
- en: The reason for including customer engagement platforms such as Connect and Alexa
    is to show the wider possibilities of the work we are doing in this book. While
    we will not be directly showing how to develop bots for an Amazon Connect or Amazon
    Alexa-based bot **voice user interface** (**VUI**), we want to open your mind
    to the possibility of an omnichannel customer experience across different integration
    points—web, mobile, smart speakers, and so forth.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 包含客户参与平台如Connect和Alexa的原因是为了展示我们在本书中所做工作的更广泛可能性。虽然我们不会直接展示如何为基于Amazon Connect或Amazon
    Alexa的机器人**语音用户界面**（**VUI**）开发，但我们希望打开您的思路，了解在不同集成点——Web、移动、智能扬声器等等——实现全渠道客户体验的可能性。
- en: As you can see, the services cover a wide variety of layers, from the storage
    and infrastructure layer to the AI services layer, and finally extending to the
    UX.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，服务覆盖了广泛的层次，从存储和基础设施层到AI服务层，最终扩展到用户体验层。
- en: Serverless Computing
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器计算
- en: Serverless computing is a relatively new architecture that takes a different
    spin on the cloud application architecture. Let's start with a traditional on-premise
    server-based architecture.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算是一种相对较新的架构，它对云应用架构进行了不同的诠释。让我们从传统的本地服务器架构开始。
- en: Usually, a traditional application architecture starts with a set of computer
    hardware, a host operating system, virtualization, containers, and an application
    stack consisting of libraries and frameworks tied together by networking and storage.
    On top of all this, we write business logic. In essence, to maintain a business
    capability, we have to maintain the server hardware, operating system patches,
    updates, library updates, and so forth. We also have to worry about scalability,
    fault tolerance, and security at the least.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，传统的应用架构从一组计算机硬件、主机操作系统、虚拟化、容器以及由网络和存储连接起来的库和框架的应用堆栈开始。在这所有之上，我们编写业务逻辑。本质上，为了维护业务能力，我们必须维护服务器硬件、操作系统补丁、更新、库更新等等。我们至少还要担心可伸缩性、容错性和安全性。
- en: With cloud computing, the application architecture is free of computer hardware
    as well as having elasticity. We still have to maintain the OS, libraries, patches,
    and so on. This where serverless computing comes in—in the words of Amazon, serverless
    computing "shifts more of your operational responsibilities to AWS."
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云计算，应用架构不再依赖于计算机硬件，同时也具有弹性。我们仍然需要维护操作系统、库、补丁等等。这就是无服务器计算发挥作用的地方——用亚马逊的话说，无服务器计算“将更多的运营责任转移到AWS”。
- en: Serverless computing improves upon cloud computing, eliminating infrastructure
    management, starting from provisioning to scaling up and down, depending on the
    load, as well as the patching and maintenance of the whole runtime stack. As Amazon
    depicts it, serverless computing definitely "reduces cost and increases agility
    and innovation" as well as enabling automated high availability, if designed properly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算在云计算的基础上进行了改进，消除了基础设施管理，从配置到根据负载进行扩展和缩减，以及整个运行时堆栈的修补和维护。正如亚马逊所描述的，无服务器计算确实“降低了成本，增加了敏捷性和创新”，并且如果设计得当，还可以实现自动高可用性。
- en: An O'Reilly report defines serverless computing as "an architectural approach
    to software solutions that relies on small independent functions running on transient
    servers in an elastic runtime environment." So, there are servers—serverless is
    not the right term, but in some sense, the servers are transparent, managed by
    Amazon during the execution of a Lambda function, which is usually in milliseconds.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: O'Reilly 的报告将无服务器计算定义为“一种软件解决方案的架构方法，它依赖于在弹性运行时环境中运行的小型独立函数在短暂服务器上运行。”因此，存在服务器——无服务器并不是一个恰当的术语，但在某种程度上，服务器是透明的，由亚马逊在
    Lambda 函数执行期间管理，这通常在毫秒级别。
- en: Amazon Lambda and Function as a Service
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon Lambda 和 Function as a Service
- en: Essentially, serverless computing is enabled by functions, more precisely, **Function
    as a Service** (**FaaS**). Amazon Lambda is the prime example of an enabling platform
    for serverless computing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，无服务器计算是由函数驱动的，更准确地说，是由 **Function as a Service** (**FaaS**) 驱动的。Amazon
    Lambda 是无服务器计算的一个主要启用平台示例。
- en: You write the business logic as a set of Lambda functions that are event-driven,
    stateless, fault-tolerant, and autoscaling. A Lambda function has an upstream
    side and a downstream side—it responds to upstream events; the runtime processor
    executes the embedded code and the results are sent to downstream destinations.
    The upstream events could be generated by something put into a queue or something
    that is dropped into an S3 bucket or a **Simple Notification Service** (**SNS**)
    message. And the downstream can be S3 buckets, queues, DynamoDB, and so forth.
    The runtime supports multiple languages, such as Python, Go, Java, Ruby, Node.js,
    and .NET.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您将业务逻辑编写为一系列事件驱动的 Lambda 函数，这些函数是无状态的、容错的、自动扩展的。Lambda 函数有一个上游和一个下游——它响应上游事件；运行时处理器执行嵌入的代码，并将结果发送到下游目的地。上游事件可能是由放入队列中的某些内容或掉入
    S3 存储桶或 **简单通知服务** (**SNS**) 消息中的某些内容生成的。下游可以是 S3 存储桶、队列、DynamoDB 等等。运行时支持多种语言，例如
    Python、Go、Java、Ruby、Node.js 和 .NET。
- en: A Lambda function is much more granular than a microservice—you can think of
    it as a nano service. It is charged on a 100 ms basis and will time out after
    15 minutes. The payload size is 6 MB. That gives you an estimate of the size of
    a Lambda function. Also, as you have noticed, there are no charges when a Lambda
    function is idling – that means we can scale down to zero. And you can implement
    data parallelism easily—trigger a Lambda function for each row of data. As one
    Lambda function can trigger another Lambda function, you can even do task parallelism.
    Of course, all of this requires careful architecture, but it's worth the effort.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 函数比微服务更细粒度——您可以将其视为一个纳米服务。它按 100 毫秒计费，并在 15 分钟后超时。有效负载大小为 6 MB。这为您提供了
    Lambda 函数大小的估计。此外，正如您所注意到的，当 Lambda 函数空闲时没有费用——这意味着我们可以缩减到零。您还可以轻松实现数据并行化——为每行数据触发一个
    Lambda 函数。由于一个 Lambda 函数可以触发另一个 Lambda 函数，您甚至可以进行任务并行化。当然，所有这些都要求仔细的架构设计，但这是值得的。
- en: Amazon's serverless platform covers compute, storage, networking, orchestration,
    API proxy, analytics, and developer tooling. We will look at some of these components—Lambda
    for compute, S3 for storage, API Gateway for networking.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊的无服务器平台涵盖了计算、存储、网络、编排、API 代理、分析和开发者工具。我们将探讨其中的一些组件——Lambda 用于计算，S3 用于存储，API
    Gateway 用于网络。
- en: Serverless Computing as an Approach
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无服务器计算作为一种方法
- en: Industry analysts and technologists consider serverless computing as an approach
    and a set of principles. Amazon Lambda is not serverless computing but an enabler
    of the approach. The serverless computing architecture does reduce what you have
    to build—some of the traditional code that we write now manifests as a function
    chaining pipeline, the configuration of events, triggers, and attributes of Lambda
    functions. The essential business logic does need to be written, and that will
    reside inside the Lambda functions. As a result, there is a very well-defined
    separation between the platform and the business code, and that is the value of
    serverless computing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 行业分析师和技术人员将无服务器计算视为一种方法和一套原则。Amazon Lambda 不是无服务器计算，而是该方法的推动者。无服务器计算架构确实减少了您需要构建的内容——我们现在编写的一些传统代码现在表现为函数链式管道、事件配置、触发器和
    Lambda 函数的属性。基本业务逻辑确实需要编写，并将位于 Lambda 函数内部。因此，平台和业务代码之间有一个非常明确的分离，这就是无服务器计算的价值。
- en: Amazon Comprehend
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Comprehend
- en: 'Amazon Comprehend is a text analytics service. It has a broad spectrum of capabilities.
    Amazon Comprehend can extract key phrases and entities. It can do language detection
    and topic modeling. It can also perform sentiment analysis as well as syntax analysis.
    Amazon Comprehend is multilingual. Some of the applications of Amazon Comprehend
    include:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 是一种文本分析服务。它具有广泛的功能。Amazon Comprehend 可以提取关键短语和实体。它可以进行语言检测和主题建模。它还可以执行情感分析和语法分析。Amazon
    Comprehend 支持多语言。Amazon Comprehend 的应用包括：
- en: Understanding the main themes and topics of various unstructured text items
    such as support tickets, social media posts, customer feedback, customer complaints,
    and business documents such as contracts and medical records.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解各种非结构化文本项（如支持票、社交媒体帖子、客户反馈、客户投诉以及合同和医疗记录等业务文档）的主要主题和话题。
- en: Knowledge management by categorizing business documents such as internal procedures,
    white papers, notes and descriptions, media posts, and emails.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过对内部程序、白皮书、笔记和描述、媒体帖子以及电子邮件等业务文档进行分类来管理知识。
- en: Brand monitoring—effectively responding to social media posts, reviews, and
    other user-generated content from various channels. Respond faster by prioritizing
    the content as well as routing the content to the appropriate person or process.
    To prioritize and respond faster, businesses need to analyze the content for language,
    topics, and the entities mentioned in the media – all of which are capabilities
    of Amazon Comprehend.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 品牌监控——有效地响应来自各种渠道的社交媒体帖子、评论和其他用户生成内容。通过优先处理内容并将内容路由到适当的人员或流程来加快响应速度。为了优先处理和更快地响应，企业需要分析内容中的语言、主题和媒体中提到的实体——所有这些都是
    Amazon Comprehend 的功能。
- en: One important capability of Comprehend is the fact that underneath the hood,
    it improves models by monitoring errors and training AI models with new and improved
    data.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Comprehend 的一项重要功能是，在底层，它通过监控错误并使用新的和改进的数据训练人工智能模型来改进模型。
- en: Also, you can fine-tune models with your domain-specific data, thus increasing
    the accuracy to fit your application while leveraging the general capability of
    the AI models.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，您还可以使用您特定领域的数据进行模型微调，从而提高准确性以适应您的应用程序，同时利用人工智能模型的一般能力。
- en: One interesting application of Comprehend is to extract information from business
    documents such as contract numbers, terms of contracts, various codes, and even
    the dosage of medication
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Comprehend 的一项有趣的应用是从业务文档（如合同编号、合同条款、各种代码甚至药物剂量）中提取信息。
- en: An interesting end-to-end use case is to use Amazon Comprehend to analyze a
    collection of text documents and organize the articles by topic, identify the
    most frequently mentioned features, and group articles by subject matter, to enable
    personalized recommendations for website visitors.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的端到端用例是使用 Amazon Comprehend 分析一组文本文档，按主题组织文章，识别最常提到的特征，并按主题分组文章，以便为网站访客提供个性化推荐。
- en: '![Figure 2.2: Amazon Comprehend search flow'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2：Amazon Comprehend 搜索流程'
- en: '](img/B16061_02_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16061_02_02.jpg)'
- en: 'Figure 2.2: Amazon Comprehend search flow'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：Amazon Comprehend 搜索流程
- en: '**Amazon Comprehend Medical** is a feature-rich service for analyzing patient
    health records, doctor''s notes, and reports from clinical trials as well as links
    to medical ontologies. It can even figure out medication dosages, test results,
    and treatment information that can be used for analysis by healthcare professionals:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Comprehend Medical** 是一个功能丰富的服务，用于分析患者健康记录、医生笔记和临床试验报告，以及医学本体学的链接。它甚至可以确定用于分析的药物剂量、测试结果和治疗信息：'
- en: '![Figure 2.3: Amazon Comprehend Medical flow'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3：Amazon Comprehend Medical 流程'
- en: '](img/B16061_02_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16061_02_03.jpg)'
- en: 'Figure 2.3: Amazon Comprehend Medical flow'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：Amazon Comprehend Medical 流程
- en: The Amazon Comprehend service continually learns from new data from Amazon product
    descriptions and consumer reviews, and thus, it perpetually improves its ability
    to understand a variety of topics from government, health, media, education, advertising,
    and so on.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 服务不断从 Amazon 产品描述和消费者评论的新数据中学习，因此，它不断改进其理解来自政府、健康、媒体、教育、广告等各种主题的能力。
- en: In *Chapter 1*, *An Introduction to AWS*, you learned how to use Amazon Comprehend
    to extract insights by using **Natural Language Processing** **(NLP)** from the
    contents of documents. In this chapter, we will dig deeper and you will learn
    how to use the Amazon Comprehend API to produce insights by recognizing the language,
    entities, key phrases, sentiments, and topics in a document. This will allow you
    to understand deep learning-based NLP to build more complex applications, which
    we will cover further.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第一章*，*AWS 简介* 中，你学习了如何使用 Amazon Comprehend 通过文档内容中的 **自然语言处理** **(NLP**)
    提取洞察。在本章中，我们将深入探讨，你将学习如何使用 Amazon Comprehend API 通过识别文档中的语言、实体、关键词、情感和主题来产生洞察。这将使你能够理解基于深度学习的
    NLP，以构建更复杂的应用程序，我们将在后续内容中介绍。
- en: In the second part of this chapter, you will learn about AWS Lambda, and how
    to integrate this service with Amazon Comprehend. You will also integrate a database
    to provide the foundation to build scalable NLP processing applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，你将了解 AWS Lambda，以及如何将此服务与 Amazon Comprehend 集成。你还将集成数据库，为构建可扩展的 NLP
    处理应用程序提供基础。
- en: What Is an NLP Service?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 NLP 服务？
- en: Amazon Comprehend is an NLP service. The overall goal of an NLP service is to
    make machines understand our spoken and written language. Virtual assistants,
    such as Alexa or Siri, use NLP to produce insights from input data. The input
    data is structured by a language, which has a unique grammar, syntax, and vocabulary.
    Thus, processing text data requires identifying the language first and applying
    subsequent rules to identify the document's information. NLP's general task is
    to capture this information as a numeral representation. This general task is
    split into specific tasks, such as identifying languages, entities, key phrases,
    emotional sentiments, and topics.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 是一个 NLP 服务。NLP 服务的总体目标是使机器理解我们的口语和书面语言。虚拟助手，如 Alexa 或 Siri，使用
    NLP 从输入数据中产生洞察。输入数据由一种语言结构化，该语言具有独特的语法、句法和词汇。因此，处理文本数据需要首先识别语言，然后应用后续规则来识别文档的信息。NLP
    的通用任务是捕获这些信息作为数值表示。这个通用任务被分解为具体任务，例如识别语言、实体、关键词、情感和主题。
- en: '![Figure 2.4: Amazon Comprehend data flow'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4：Amazon Comprehend 数据流'
- en: '](img/B16061_02_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16061_02_04.jpg)'
- en: 'Figure 2.4: Amazon Comprehend data flow'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：Amazon Comprehend 数据流
- en: As we discussed earlier, Amazon Comprehend uses pre-trained models to perform
    document analysis tasks. This is very good because it enables a business to develop
    capabilities without going through an exhaustive AI model training effort. And
    Amazon keeps up with the latest developments in ML and AI, constantly retraining
    the models—so the models get better without any work from users. Also, there are
    capabilities for fine-tuning the models by training them with your domain-specific content.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前讨论的，Amazon Comprehend 使用预训练的模型来执行文档分析任务。这非常好，因为它使企业能够在不进行耗时的 AI 模型训练努力的情况下开发能力。而且
    Amazon 不断跟进 ML 和 AI 的最新发展，不断重新训练模型——因此，模型在没有用户任何工作的情况下变得更好。此外，还有通过使用你的特定领域内容来微调模型的能力。
- en: Using Amazon Comprehend to Inspect Text and Determine the Primary Language
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Comprehend 检查文本并确定主要语言
- en: Amazon Comprehend is used for searching and examining texts and then gathering
    insights from a variety of topics (health, media, telecom, education, government,
    and so on) and languages in the text data format. Thus, the first step to analyze
    text data and utilize more complex features (such as topic, entity, and sentiment
    analysis) is to determine the dominant language. Determining the dominant language
    ensures the accuracy of more in-depth analysis. To examine the text in order to
    determine the primary language, there are two operations (`DetectDominantLanguage`
    and `BatchDetectDominantLanguage`).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend用于搜索和检查文本，然后从各种主题（健康、媒体、电信、教育、政府等）和文本数据格式中的语言中收集见解。因此，分析文本数据并利用更复杂的功能（如主题、实体和情感分析）的第一步是确定主导语言。确定主导语言确保了更深入分析的正确性。为了检查文本以确定主要语言，有两种操作（`DetectDominantLanguage`和`BatchDetectDominantLanguage`）。
- en: Both operations expect the text in the UTF-8 format with a length of at least
    20 characters and a maximum of 5,000 bytes. If you are sending a list, it should
    not contain more than 25 items.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个操作都期望文本以UTF-8格式，长度至少为20个字符，最大为5,000字节。如果你发送一个列表，它不应包含超过25个项目。
- en: 'The response includes what language was identified using a two-letter code.
    The following table shows the language codes for different languages:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 响应包括使用两位字母代码识别出的语言。以下表格显示了不同语言的代码：
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Check out [https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html](https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html)
    for an updated list of the supported languages.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 查看有关支持语言更新的列表：[https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html](https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html)。
- en: '![Figure 2.5: Amazon Comprehend''s supported languages'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.5：Amazon Comprehend的编程语言支持'
- en: '](img/B16061_02_05.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16061_02_05.jpg)'
- en: 'Figure 2.5: Amazon Comprehend''s supported languages'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：Amazon Comprehend支持的编程语言
- en: 'There are three ways to invoke dominant language detection. The result is the
    code for the dominant language in the content and a confidence score determined
    by the Comprehend algorithms:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方式可以调用主导语言检测。结果是内容中的主导语言代码和由Comprehend算法确定的置信度分数：
- en: '`DetectDominantLanguage` will return the dominant language in a single document.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetectDominantLanguage`将返回单个文档中的主导语言。'
- en: '`BatchDetectDominantLanguage` works on a set of documents and will return a
    list of the dominant language in each of the documents.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BatchDetectDominantLanguage`在文档集上工作，并将返回每个文档中的主导语言列表。'
- en: While both of the preceding APIs work in synchronous mode, that is, you send
    the content to the API and it will return the results, `StartDominantLanguageDetectionJob`
    works on a collection of jobs asynchronously. This API is well suited to large
    jobs that take more time.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然前面的两个API都在同步模式下工作，即你将内容发送到API，它将返回结果，但`StartDominantLanguageDetectionJob`在异步模式下处理作业集合。此API非常适合需要更多时间的长作业。
- en: '![Figure 2.6: Dominant language score confidence output'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6：主导语言分数置信度输出'
- en: '](img/B16061_02_06.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16061_02_06.jpg)'
- en: 'Figure 2.6: Dominant language score confidence output'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：主导语言分数置信度输出
- en: 'Exercise 2.01: Detecting the Dominant Language in a Text Document Using the
    Command-Line Interface'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.01：使用命令行界面检测文本文档中的主导语言
- en: 'In this exercise, you will learn how to detect the dominant language in a text
    using Comprehend''s `DetectDominantLanguage` function. The following steps describe
    how to detect the dominant language:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用Comprehend的`DetectDominantLanguage`函数检测文本中的主导语言。以下步骤描述了如何检测主导语言：
- en: Note
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for the Jupyter notebook is available via GitHub in the repository
    at [https://packt.live/2O4cw0V](https://packt.live/2O4cw0V).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter笔记本的源代码可通过GitHub在以下存储库中获取：[https://packt.live/2O4cw0V](https://packt.live/2O4cw0V)。
- en: The files for this chapter are located in the `Chapter02` folder in the GitHub
    repository [https://packt.live/31TIzbU](https://packt.live/31TIzbU). As we mentioned
    in *Chapter 1*, *An Introduction to AWS*, you should have downloaded the GitHub
    files into a local subdirectory.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的文件位于GitHub存储库的`Chapter02`文件夹中：[https://packt.live/31TIzbU](https://packt.live/31TIzbU)。正如我们在*第1章*，*AWS简介*中提到的，你应该已经将GitHub文件下载到本地子目录中。
- en: As an example, we have downloaded the files in the `Documents/aws-book/The-Applied-AI-and-Natural-Language-Processing-with-AWS`
    directory.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们已经下载了`Documents/aws-book/The-Applied-AI-and-Natural-Language-Processing-with-AWS`目录中的文件。
- en: Open a new Jupyter Notebook.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter Notebook。
- en: Note
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'For configuration instructions, refer the section titled *Pre checkup* on GitHub:
    [https://packt.live/2O4cw0V](https://packt.live/2O4cw0V).'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于配置说明，请参阅 GitHub 上的 *预检查* 部分标题：[https://packt.live/2O4cw0V](https://packt.live/2O4cw0V)。
- en: 'Before we begin, the `boto3` library must be installed. On a fresh Jupyter
    Notebook cell, type in the following command to install it:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们开始之前，必须安装 `boto3` 库。在一个新的 Jupyter Notebook 单元格中，输入以下命令来安装它：
- en: '[PRE0]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s go ahead and import Boto3\. Boto3 is nothing but the AWS SDK for
    Python. ([https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)):'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们继续导入 Boto3。Boto3 仅仅是 AWS SDK for Python。[https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)）：
- en: '[PRE1]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, import the JSON module to serialize the JSON ([https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)):'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，导入 JSON 模块以序列化 JSON（[https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)）：
- en: '[PRE2]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instantiate a new Comprehend client:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个新的 Comprehend 客户端：
- en: '[PRE3]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we assign English and Spanish strings to be analyzed by Comprehend:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将英语和西班牙语字符串分配给 Comprehend 进行分析：
- en: '[PRE4]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we print a string to indicate the respective variable that our script
    is about to execute:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们打印一个字符串来指示我们的脚本即将执行的相应变量：
- en: '[PRE5]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Lastly, call Comprehend's `detect_dominant_language` method with the `english_string`
    and `spanish_string` variables ([https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html)).
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 `english_string` 和 `spanish_string` 变量调用 Comprehend 的 `detect_dominant_language`
    方法（[https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html)）。
- en: '`json.dumps()` writes the JSON data to a Python string in the terminal:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`json.dumps()` 将 JSON 数据写入终端中的 Python 字符串：'
- en: '[PRE6]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the notebook.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存笔记本。
- en: 'Press *Shift* + *Enter* to run the two notebook cells. Executing the cells
    will produce the following output (see the following screenshot):![Figure 2.7:
    Detecting the dominant language output – English and Spanish'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Shift* + *Enter* 来运行两个笔记本单元格。执行单元格将产生以下输出（见以下截图）：![图 2.7：检测主要语言输出 – 英语和西班牙语](img/B16061_02_07.jpg)
- en: '](img/B16061_02_07.jpg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_07.jpg)'
- en: 'Figure 2.7: Detecting the dominant language output – English and Spanish'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：检测主要语言输出 – 英语和西班牙语
- en: As expected, the `english_text` string is identified as English (with the `en`
    language code) with a ~0.99 confidence score.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，`english_text` 字符串被识别为英语（使用 `en` 语言代码），置信度分数约为 ~0.99。
- en: Also as expected, the `spanish_text` string is identified as Spanish (with the
    `es` language code) with a ~0.99 confidence score.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，`spanish_text` 字符串被识别为西班牙语（使用 `es` 语言代码），置信度分数约为 ~0.99。
- en: 'Exercise 2.02: Detecting the Dominant Language in Multiple Documents by Using
    the CLI'
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.02：使用 CLI 检测多个文档中的主要语言
- en: 'In this exercise, you will learn how to use Comprehend''s `DetectDominantLanguage`
    operation for multiple documents. The following steps describe how to detect the
    dominant language:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用 Comprehend 的 `DetectDominantLanguage` 操作来处理多个文档。以下步骤描述了如何检测主要语言：
- en: Note
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *Pre checkup instructions* and the source code for this exercise are available
    via GitHub in the repository at [https://packt.live/2Z8Vbu4](https://packt.live/2Z8Vbu4).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*预检查说明* 和本练习的源代码可通过 GitHub 上的仓库获取：[https://packt.live/2Z8Vbu4](https://packt.live/2Z8Vbu4)。'
- en: Open a new Jupyter Notebook.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter Notebook。
- en: 'On a fresh empty cell, import the AWS SDK for Python (boto3:[https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)):'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个全新的空单元格中，导入 AWS SDK for Python（boto3：[https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)）：
- en: '[PRE7]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, import the JSON module to serialize the JSON ([https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)):'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，再次导入 JSON 模块以序列化 JSON（[https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)）：
- en: '[PRE8]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Instantiate a new Comprehend client:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个新的 Comprehend 客户端：
- en: '[PRE9]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, assign a list of English and Spanish strings to be analyzed by Comprehend:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将一组英语和西班牙语字符串分配给 Comprehend 进行分析：
- en: '[PRE10]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Lastly, we call Comprehend''s `batch_detect_dominant_language` method with
    the `english_string_list` and `spanish_string_list` variables ([https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html)).
    Then, `json.dumps()` writes the JSON data to a Python string to the terminal:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用`english_string_list`和`spanish_string_list`变量调用Comprehend的`batch_detect_dominant_language`方法（[https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html)）。然后，`json.dumps()`将JSON数据写入Python字符串到终端：
- en: '[PRE11]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save the notebook.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存笔记本。
- en: 'Press *Shift* + *Enter* to run the two notebook cells. Executing the cells
    will produce the following output (see the following partial screenshot—the output
    is too long to fit; you can see the full output in the notebook):![Figure 2.8:
    Detecting the dominant language (multiple documents) output—English'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Shift* + *Enter* 运行两个笔记本单元格。执行单元格将产生以下输出（见以下部分截图——输出太长无法全部显示；您可以在笔记本中查看完整输出）：![图
    2.8：检测主要语言（多文档）输出——英语
- en: '](img/B16061_02_08.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16061_02_08.jpg](img/B16061_02_08.jpg)'
- en: 'Figure 2.8: Detecting the dominant language (multiple documents) output—English'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：检测主要语言（多文档）输出——英语
- en: The important concepts to remember are that Comprehend has the ability to detect
    different languages and can take text input as a single string or in a batch format
    as a list of strings.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的重要概念是Comprehend具有检测不同语言的能力，并且可以接受单个字符串或字符串列表的批量格式作为文本输入。
- en: In this topic, we reviewed how Comprehend's `DetectDominantLanguage` method
    is structured, and how to pass in both strings and a list of strings. Next, we
    will extract entities, phrases, and sentiments from a set of documents.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们回顾了Comprehend的`DetectDominantLanguage`方法的架构，以及如何传入字符串和字符串列表。接下来，我们将从一组文档中提取实体、短语和情感。
- en: Extracting Information from a Set of Documents
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一组文档中提取信息
- en: At a business level, knowing if and why a customer is angry or happy when they
    contact a virtual assistant is extremely important, to retain the customer. At
    an NLP level, this requires more information to be extracted and a more complex
    algorithm. The additional information to extract and quantify is `entities`, `key
    phrases`, `emotional sentiment`, and `topics`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在业务层面，了解客户在联系虚拟助手时是否愤怒或高兴以及原因，对于保留客户至关重要。在NLP层面，这需要提取更多信息并使用更复杂的算法。需要提取和量化的附加信息是`实体`、`关键短语`、`情感倾向`和`主题`。
- en: Detecting Named Entities—AWS SDK for Python (boto3)
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测命名实体——AWS SDK for Python (boto3)
- en: An entity is a broader concept—it is something that has an identity of its own.
    An entity can be a person or a place, a company name or an organization; it can
    also be a number (say quantity, price, number of days) or a date, a title, a policy
    number, or a medical code. For example, in the text "Martin lives at 27 Broadway
    St.", **Martin** might be detected as a **PERSON**, while **27 Broadway St** might
    be detected as a **LOCATION**.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 实体是一个更广泛的概念——它是有自己身份的东西。实体可以是人、地点、公司名称或组织；它也可以是数字（例如数量、价格、天数）或日期、标题、政策编号或医疗代码。例如，在文本“Martin住在27
    Broadway St.”中，**Martin**可能被检测为**人物**，而**27 Broadway St**可能被检测为**地点**。
- en: 'Entities also have a score to indicate the confidence level that the entity
    type was detected correctly. The following table shows a complete list of entity
    types and descriptions:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 实体还有一个分数来表示检测到的实体类型是否正确被检测到的置信水平。以下表格显示了完整的实体类型和描述列表：
- en: '![Figure 2.9: AWS Comprehend entity types and descriptions'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.9：AWS Comprehend实体类型和描述'
- en: '](img/B16061_02_09.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16061_02_09.jpg](img/B16061_02_09.jpg)'
- en: 'Figure 2.9: AWS Comprehend entity types and descriptions'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：AWS Comprehend实体类型和描述
- en: 'There are three ways to invoke the detection of entities:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方式来调用实体检测：
- en: '`DetectEntities` will return the entities in a single document.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetectEntities`将返回单个文档中的实体。'
- en: '`BatchDetectEntities` works on a set of documents and will return a list of
    the entities in each of the documents.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BatchDetectEntities`在文档集上工作，并将返回每个文档中的实体列表。'
- en: While both the preceding APIs work in synchronous mode, that is, you send the
    content to the API and it will return the results, `StartEntitiesDetectionJob`
    works on a collection of jobs asynchronously. This API is well suited to large
    jobs that take more time.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然前面的两个API都工作在同步模式下，即您将内容发送到API，它将返回结果，但`StartEntitiesDetectionJob`在异步模式下对一系列作业进行处理。此API非常适合需要更多时间的长作业。
- en: DetectEntities – Input and Output
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DetectEntities – 输入和输出
- en: '`DetectEntities` takes a `LanguageCode` and a string of text as an input and
    then provides the following information about each entity within the input text:
    `BeginOffset`, `EndOffset`, `Score`, `Text`, and `Type`. The following table shows
    a complete list of AWS Comprehend `DetectEntities`, types, and descriptions:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`DetectEntities` 接收一个 `LanguageCode` 和一个文本字符串作为输入，然后提供关于输入文本中每个实体的以下信息：`BeginOffset`、`EndOffset`、`Score`、`Text`
    和 `Type`。以下表格显示了 AWS Comprehend `DetectEntities`、类型和描述的完整列表：'
- en: '![Figure 2.10: AWS Comprehend entity types and descriptions'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.10：AWS Comprehend 实体类型和描述'
- en: '](img/B16061_02_10.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16061_02_10.jpg]'
- en: 'Figure 2.10: AWS Comprehend entity types and descriptions'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：AWS Comprehend 实体类型和描述
- en: 'Exercise 2.03: Determining the Named Entities in a Document (the DetectEntities
    method)'
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.03：确定文档中的命名实体（DetectEntities 方法）
- en: 'In this exercise, we will determine the named entities in a document. For this,
    we will use Amazon Comprehend''s `DetectEntities` operation. The following are
    the steps for detecting named entities:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将确定文档中的命名实体。为此，我们将使用 Amazon Comprehend 的 `DetectEntities` 操作。以下是检测命名实体的步骤：
- en: Note
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *Pre checkup instructions* and the source code for this exercise are available
    via GitHub in the repository at [https://packt.live/2ADssUI](https://packt.live/2ADssUI).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该练习的 *预检查说明* 和源代码可通过 GitHub 在以下存储库中获取：[https://packt.live/2ADssUI](https://packt.live/2ADssUI)。
- en: Open a new Jupyter Notebook.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter Notebook。
- en: 'Import the AWS SDK for Python (boto3: [https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html))
    by using the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用以下命令导入 AWS SDK for Python (boto3: [https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html))：'
- en: '[PRE12]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, import the `JSON` module to serialize `JSON` from [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)
    by using the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导入 `JSON` 模块以使用以下命令序列化来自 [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)
    的 `JSON`：
- en: '[PRE13]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, instantiate a new Comprehend client:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，实例化一个新的 Comprehend 客户端：
- en: '[PRE14]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, after instantiating a new Comprehend client, provide the `English` text
    to analyze:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在实例化一个新的 Comprehend 客户端后，提供要分析的分析文本：
- en: '[PRE15]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, `json.dumps()` writes JSON data to a Python string:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`json.dumps()` 将 JSON 数据写入 Python 字符串：
- en: '[PRE16]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Press *Shift* + *Enter* to run the two notebook cells. The output of the preceding
    code is shown in the following screenshot:![Figure 2.11: AWS Comprehend DetectEntities
    output'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Shift* + *Enter* 运行两个笔记本单元。前面代码的输出如下所示：![图 2.11：AWS Comprehend DetectEntities
    输出
- en: '](img/B16061_02_11.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16061_02_11.jpg]'
- en: 'Figure 2.11: AWS Comprehend DetectEntities output'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：AWS Comprehend DetectEntities 输出
- en: 'The confidence scores were both ~0.99, as the inputs were simple examples.
    As expected, `Seattle` was detected as a `LOCATION`, and `Thursday` was detected
    as a `DATE`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 置信度得分均为 ~0.99，因为输入是简单的示例。正如预期的那样，`Seattle` 被检测为 `LOCATION`，而 `Thursday` 被检测为
    `DATE`：
- en: '![Figure 2.12: AWS Comprehend BeginOffset and EndOffset review'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.12：AWS Comprehend BeginOffset 和 EndOffset 检查'
- en: '](img/B16061_02_12.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16061_02_12.jpg]'
- en: 'Figure 2.12: AWS Comprehend BeginOffset and EndOffset review'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：AWS Comprehend BeginOffset 和 EndOffset 检查
- en: 'Exercise 2.04: Detecting Entities in a Set of Documents (Text Files)'
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.04：在文档集中检测实体（文本文件）
- en: 'In this exercise, we will determine the named entities in multiple documents.
    For this, we will use Amazon Comprehend''s `DetectEntities` operation. The following
    are the steps for detecting the named entities from a set of documents:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将确定多份文档中的命名实体。为此，我们将使用 Amazon Comprehend 的 `DetectEntities` 操作。以下是检测一组文档中命名实体的步骤：
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *Pre checkup instructions* and the source code for this exercise are available
    via GitHub in the repository at [https://packt.live/31UCuMs](https://packt.live/31UCuMs).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 该练习的 *预检查说明* 和源代码可通过 GitHub 在以下存储库中获取：[https://packt.live/31UCuMs](https://packt.live/31UCuMs)。
- en: Open a new Jupyter Notebook.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter Notebook。
- en: 'Import the AWS SDK for Python (boto3: [https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html))
    by using the following command:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用以下命令导入 AWS SDK for Python (boto3: [https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html))：'
- en: '[PRE17]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, import the `JSON` module to serialize `JSON` from [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)
    by using the following command:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导入 `JSON` 模块以使用以下命令序列化来自 [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)
    的 `JSON`：
- en: '[PRE18]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We also need to do some file operations to iterate through the documents. Import
    the `glob` module to find text files ending `.txt` from [https://docs.python.org/3.6/library/glob.html](https://docs.python.org/3.6/library/glob.html)
    by using the following command:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要进行一些文件操作来遍历文档。导入 `glob` 模块，使用以下命令从 [https://docs.python.org/3.6/library/glob.html](https://docs.python.org/3.6/library/glob.html)
    查找以 `.txt` 结尾的文本文件：
- en: '[PRE19]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also need the `os` library. Import the `os` module from [https://docs.python.org/3.6/library/os.html](https://docs.python.org/3.6/library/os.html)
    by using the following command:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要 `os` 库。使用以下命令从 [https://docs.python.org/3.6/library/os.html](https://docs.python.org/3.6/library/os.html)
    导入 `os` 模块：
- en: '[PRE20]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, instantiate a new Comprehend client:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，实例化一个新的 Comprehend 客户端：
- en: '[PRE21]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s get a list of all the documents (assumes in Jupyter notebook you navigated
    to `Chapter02/Exercise02.04/` directory and the opened the notebook `Exercise2.04.ipynb`):'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们获取所有文档的列表（假设在 Jupyter 笔记本中您已导航到 `Chapter02/Exercise02.04/` 目录并打开了 `Exercise2.04.ipynb`
    笔记本）：
- en: '[PRE22]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we can iterate through the documents and detect the entities in the documents.
    We will be calling `detect_entities` on each of the documents. As before, we will
    also use `json.dumps()` to write the JSON data to a Python string:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以遍历文档并检测文档中的实体。我们将对每个文档调用 `detect_entities`。和之前一样，我们也将使用 `json.dumps()`
    将 JSON 数据写入 Python 字符串：
- en: '[PRE23]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Press *Shift* + *Enter* to run the two notebook cells. The output of the preceding
    code is shown in the following screenshot. It is a long output—we are showing
    the output for one file. You will see the entities listed for all the files in
    the `/reviews__pos/*.txt` subdirectory:![Figure 2.13: DetectEntities output'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Shift* + *Enter* 运行两个笔记本单元。前面代码的输出如下所示。这是一个长输出——我们只显示了单个文件的输出。您将看到 `/reviews__pos/*.txt`
    子目录中所有文件的实体列表：![图 2.13：DetectEntities 输出
- en: '](img/B16061_02_13.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_13.jpg](img/B16061_02_13.jpg)'
- en: 'Figure 2.13: DetectEntities output'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13：DetectEntities 输出
- en: In this exercise, we extended entity detection to a set of documents, calling
    Amazon Comprehend's `DetectEntities` recursively.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将实体检测扩展到一组文档中，通过递归调用 Amazon Comprehend 的 `DetectEntities` 方法。
- en: Detecting Key Phrases
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测关键短语
- en: A key phrase for AWS is analogous to a noun phrase, which represents an actual
    thing. In English, when we put together different words that represent one concrete
    idea, we call it a noun phrase.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 的关键短语与名词短语类似，代表一个实际事物。在英语中，当我们把代表一个具体想法的不同单词组合在一起时，我们称之为名词短语。
- en: For example, **A fast machine** is a noun phrase because it consists of **A**,
    the article; **fast**, an adjective; and **machine**, which is a noun. AWS looks
    for appropriate word combinations and gives scores that indicate the confidence
    that a string is a noun phrase.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**一台快速机器**是一个名词短语，因为它由**一台**（冠词）、**快速**（形容词）和**机器**（名词）组成。AWS 会寻找合适的词组组合，并给出分数，以表示字符串是名词短语的置信度。
- en: 'Exercise 2.05: Detecting Key Phrases'
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.05：检测关键短语
- en: 'In this exercise, we will detect key phrases. To do so, we will use Amazon
    Comprehend''s `DetectKeyPhrase` operation. The following are the steps for detecting
    key phrases:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将检测关键短语。为此，我们将使用 Amazon Comprehend 的 `DetectKeyPhrase` 操作。以下是检测关键短语的操作步骤：
- en: Note
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *Pre checkup instructions* and the source code for this exercise are available
    via GitHub in the repository at [https://packt.live/2Z75cI4](https://packt.live/2Z75cI4).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 该练习的**预检查说明**和源代码可通过 GitHub 上的存储库获取，地址为 [https://packt.live/2Z75cI4](https://packt.live/2Z75cI4)。
- en: 'Import the AWS SDK for Python (boto3: [http://boto3.readthedocs.io/en/latest/](http://boto3.readthedocs.io/en/latest/))
    by using the following command:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用以下命令导入 AWS SDK for Python (boto3: [http://boto3.readthedocs.io/en/latest/](http://boto3.readthedocs.io/en/latest/))：'
- en: '[PRE24]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, import the JSON module to serialize the JSON from [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html
    ) by using the following command:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导入 JSON 模块以序列化来自 [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)
    的 JSON，使用以下命令：
- en: '[PRE25]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, instantiate a new Comprehend client by using the following code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下代码实例化一个新的 Comprehend 客户端：
- en: '[PRE26]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, provide the `English` text to analyze using the following code:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，提供以下代码以分析使用的 `English` 文本：
- en: '[PRE27]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the code by executing the cells with *Shift* + *Enter*. You will see the
    following output:![Figure 2.14: AWS Comprehend DetectKeyPhrase output'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行带有 *Shift* + *Enter* 的单元格来运行代码。您将看到以下输出：![图 2.14：AWS Comprehend DetectKeyPhrase
    输出
- en: '](img/B16061_02_14.jpg)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_14.jpg](img/B16061_02_14.jpg)'
- en: 'Figure 2.14: AWS Comprehend DetectKeyPhrase output'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14：AWS Comprehend DetectKeyPhrase 输出
- en: Detecting Sentiments
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测情感
- en: 'Amazon Comprehend has the capability to detect sentiments, usually used for
    social media posts, blog posts, reviews, emails, and other user-generated content.
    Amazon Comprehend can determine the four shades of sentiment polarity: positive,
    negative, neutral, and mixed. Mixed sentiment is interesting as it can differentiate
    between different aspects; for example, a user might like your website but not
    be thrilled about the price of a product.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 有检测情感的能力，通常用于社交媒体帖子、博客文章、评论、电子邮件和其他用户生成内容。Amazon Comprehend
    可以确定四种情感极性：积极、消极、中立和混合。混合情感很有趣，因为它可以区分不同的方面；例如，一个用户可能喜欢你的网站，但可能对产品的价格不感兴趣。
- en: 'Exercise 2.06: Conducting Sentiment Analysis'
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.06：进行情感分析
- en: 'In this exercise, we will carry out sentiment analysis. To do so, we will use
    Amazon Comprehend''s `DetectSentiment` operation. The following are the steps
    for detecting sentiment:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将执行情感分析。为此，我们将使用 Amazon Comprehend 的 `DetectSentiment` 操作。以下是检测情感的步骤：
- en: Note
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The *Pre checkup instructions* and the source code for this exercise are available
    via GitHub in the repository at [https://packt.live/3ebVNU1](https://packt.live/3ebVNU1).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '*预检查说明* 和此练习的源代码可通过 GitHub 在以下存储库中获取：[https://packt.live/3ebVNU1](https://packt.live/3ebVNU1)。'
- en: Open a new Jupyter Notebook.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter Notebook。
- en: 'Import the `AWS SDK` for Python (boto3) from [http://boto3.readthedocs.io/en/latest/](http://boto3.readthedocs.io/en/latest/)
    by using the following command:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从 [http://boto3.readthedocs.io/en/latest/](http://boto3.readthedocs.io/en/latest/)
    导入 Python 的 `AWS SDK` (boto3)：
- en: '[PRE28]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, import the `JSON` module to serialize JSON from [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)
    by using the following command:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令导入 `JSON` 模块以序列化 JSON，来自 [https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)：
- en: '[PRE29]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, instantiate a new Comprehend client, using the following code:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下代码创建一个新的 Comprehend 客户端：
- en: '[PRE30]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, provide a text string to analyze, using the following code:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，提供要分析的文字字符串，使用以下代码：
- en: '[PRE31]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the code by executing the cells with *Shift* + *Enter*. The output is as
    follows:![Figure 2.15: AWS Comprehend—DetectSentiment output'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Shift* + *Enter* 执行单元格来运行代码。输出如下：![图 2.15：AWS Comprehend—DetectSentiment
    输出
- en: '](img/B16061_02_15.jpg)'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_15.jpg)'
- en: 'Figure 2.15: AWS Comprehend—DetectSentiment output'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15：AWS Comprehend—DetectSentiment 输出
- en: In this exercise, we saw how easy it is to perform sentiment analysis using
    AWS Comprehend. `DetectSentiment` correctly predicted the sentiment of the statement
    *Today is my birthday, I am so happy* as positive.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了使用 AWS Comprehend 进行情感分析是多么容易。`DetectSentiment` 准确地预测了语句 *Today
    is my birthday, I am so happy* 的情感为积极。
- en: Setting Up a Lambda Function and Analyzing Imported Text Using Comprehend
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Lambda 函数并使用 Comprehend 分析导入的文本
- en: We have used Amazon Comprehend to do various NLP tasks, such as detecting entities
    and key phrases and carrying out sentiment analysis.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 Amazon Comprehend 来执行各种 NLP 任务，例如检测实体和关键词以及进行情感分析。
- en: Integrating Comprehend and AWS Lambda for responsive NLP
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成 Comprehend 和 AWS Lambda 以实现响应式 NLP
- en: In this topic, we will be integrating AWS Lambda functions with Comprehend,
    which provides a more powerful, scalable infrastructure. You can use AWS Lambda
    to run your code in response to events, such as changes to data in an Amazon S3
    bucket.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将集成 AWS Lambda 函数与 Comprehend，这提供了一个更强大、可扩展的基础设施。您可以使用 AWS Lambda 来响应事件运行您的代码，例如
    Amazon S3 存储桶中数据的更改。
- en: Executing code in response to events provides a real-world solution for developing
    scalable software architecture. Overall, this increases our data pipeline and
    provides the ability to handle more complex big data volumes and NLP operations.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行代码来响应事件，为开发可扩展的软件架构提供了一个现实世界的解决方案。总体而言，这增加了我们的数据管道，并提供了处理更复杂的大数据量和 NLP 操作的能力。
- en: What Is AWS Lambda?
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 AWS Lambda？
- en: 'AWS Lambda is a compute service that runs code without provisioning or managing
    servers. AWS Lambda executes code only when needed, and scales automatically.
    AWS Lambda runs your code on a high-availability compute infrastructure, which
    performs the administration of the compute service. More specifically, AWS Lambda
    performs the following: server and operating system maintenance, capacity provisioning
    and automatic scaling, code monitoring, and logging.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda是一种无需配置或管理服务器的计算服务。AWS Lambda仅在需要时执行代码，并自动扩展。AWS Lambda在高度可用的计算基础设施上运行你的代码，该基础设施执行计算服务的管理。更具体地说，AWS
    Lambda执行以下操作：服务器和操作系统维护、容量配置和自动扩展、代码监控和日志记录。
- en: Overall, the goal of AWS Lambda is to make short, simple, modular code segments
    that you can tie together into a larger processing infrastructure.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，AWS Lambda的目标是创建短小、简单、模块化的代码段，你可以将它们组合成更大的处理基础设施。
- en: What Does AWS Lambda Do?
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Lambda是做什么的？
- en: Lambda allows users to run small segments of code (Java, Node, or Python) to
    complete a specific task. These specific tasks can be storing and then executing
    changes to your AWS setup, or responding to events in S3 (we will explore the
    latter later in this topic). Before Lambda, you would typically need a separate
    EC2 server to run your entire code; however, Lambda allows small segments of code
    to run without the need for EC2.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda允许用户运行小段代码（Java、Node或Python）以完成特定任务。这些特定任务可以是存储并执行对AWS设置的更改，或者响应S3中的事件（我们将在本主题的后续部分探讨）。在Lambda之前，你通常需要一个单独的EC2服务器来运行整个代码；然而，Lambda允许小段代码在没有EC2的情况下运行。
- en: Lambda Function Anatomy
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lambda函数解剖
- en: AWS Lambda provides two options for implementing Python code. First, you can
    upload a complete Python code file. Second, you can use the Lambda function editor
    entirely inline, which means that you can enter and modify the code directly,
    without having to upload any files to AWS. The code that you enter will be executed
    when the Lambda function is invoked. The second option will allow for easier testing,
    so we will use it.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda提供了两种实现Python代码的选项。首先，你可以上传一个完整的Python代码文件。其次，你可以完全内联使用Lambda函数编辑器，这意味着你可以直接输入和修改代码，无需将任何文件上传到AWS。你输入的代码将在Lambda函数被调用时执行。第二种选项将允许更容易的测试，因此我们将使用它。
- en: 'Let''s examine the structure of a Lambda function:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查Lambda函数的结构：
- en: 'When you create a function (for example, `s3_trigger`), AWS creates a folder
    named the same, with a Python file named `Lambda_function.py` within the folder.
    This file contains a stub for the `Lambda_handler` function, which is the entry
    point of our Lambda function. The entry point takes two parameters as arguments:
    The `event` argument and the `context` argument.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你创建一个函数（例如，`s3_trigger`）时，AWS会创建一个同名的文件夹，并在文件夹内创建一个名为`Lambda_function.py`的Python文件。此文件包含`Lambda_handler`函数的占位符，这是我们的Lambda函数的入口点。入口点接受两个参数作为参数：`event`参数和`context`参数。
- en: The `event` argument provides the value of the payload, which is sent to the
    function from the `calling` process. It typically takes the form of a Python `dict`
    type, although it could also be one of `list`, `str`, `int`, `float`, or `NoneType`.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event`参数提供了从`调用`进程发送到函数的有效负载值。它通常采用Python `dict`类型的格式，尽管它也可能是`list`、`str`、`int`、`float`或`NoneType`之一。'
- en: The `context` argument is of the type `LambdaContext` and contains runtime information.
    You will be using this parameter for an exercise in a later section. The return
    value of the function can be any type that is JSON-serializable. This value gets
    returned to the calling application, after serializing.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`参数的类型是`LambdaContext`，包含运行时信息。你将在后续章节的练习中使用这个参数。函数的返回值可以是任何可JSON序列化的类型。这个值在序列化后返回给调用应用程序。'
- en: 'We will incorporate Lambda, S3, and Amazon Comprehend, to automatically perform
    document analysis when a text document is uploaded to S3\. The architecture of
    a Lambda function is as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将结合Lambda、S3和Amazon Comprehend，在文本文档上传到S3时自动执行文档分析。Lambda函数的架构如下：
- en: '![Figure 2.16: Architecture diagram'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.16：架构图'
- en: '](img/B16061_02_16.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16061_02_16.jpg)'
- en: 'Figure 2.16: Architecture diagram'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16：架构图
- en: 'Exercise 2.07: Setting Up a Lambda Function for S3'
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.07：为S3设置Lambda函数
- en: 'In this exercise, we will integrate the following AWS services: S3, Lambda,
    and Amazon Comprehend. To perform this exercise, the architecture should be recollected.
    Upload a file (`test_s3trigger_configured.txt`) to S3 and view the results of
    Comprehend''s analysis. The following are the steps for setting up a Lambda function:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将集成以下AWS服务：S3、Lambda和Amazon Comprehend。为了执行此练习，应回顾架构。将文件(`test_s3trigger_configured.txt`)上传到S3并查看Comprehend分析的结果。以下是为设置Lambda函数的步骤：
- en: '**Creating the S3 bucket**'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建S3存储桶**'
- en: You should have an AWS account and have completed the exercises and activities
    in *Chapter 1*, *An Introduction to AWS*.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该拥有一个AWS账户，并且已经完成了*第1章*，*AWS简介*中的练习和活动。
- en: 'First, navigate to the Amazon S3 service, [https://console.aws.amazon.com/s3/](https://console.aws.amazon.com/s3/),
    and click `Create bucket`:![Figure 2.17: S3 Bucket creation for the Lambda trigger'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导航到Amazon S3服务，[https://console.aws.amazon.com/s3/](https://console.aws.amazon.com/s3/)，并点击`创建存储桶`：![图2.17：为Lambda触发器创建S3存储桶
- en: '](img/B16061_02_17.jpg)'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_17.jpg](img/B16061_02_17.jpg)'
- en: 'Figure 2.17: S3 Bucket creation for the Lambda trigger'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.17：为Lambda触发器创建S3存储桶
- en: 'For `Bucket name`, type `aws-ml-s3-trigger`, and then click `Create`:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`存储桶名称`，键入`aws-ml-s3-trigger`，然后点击`创建`：
- en: Note
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Bucket names in AWS have to be unique, otherwise you will get an error "`Bucket
    name already exists`". One easy way to get a unique name is to append the bucket
    name with today's date plus the time, for instance, YYYYMMDDHHMM. While writing
    this chapter, I created the bucket `aws-ml-s3-trigger-202001181023` .
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AWS中的存储桶名称必须是唯一的，否则您将收到错误"`存储桶名称已存在`"。一种简单的方法是将日期和时间附加到存储桶名称上，例如，YYYYMMDDHHMM。在编写本章时，我创建了存储桶`aws-ml-s3-trigger-202001181023`。
- en: '![Figure 2.18: Creating an S3 bucket'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图2.18：创建S3存储桶'
- en: '](img/B16061_02_18.jpg)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_18.jpg](img/B16061_02_18.jpg)'
- en: 'Figure 2.18: Creating an S3 bucket'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.18：创建S3存储桶
- en: 'Your bucket will be created, and you will be redirected to the bucket list
    in the `S3 buckets` screen as shown:![Figure 2.19: S3 Bucket list screen'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的存储桶将被创建，并且您将被重定向到`S3存储桶`屏幕中的存储桶列表，如图所示：![图2.19：S3存储桶列表屏幕
- en: '](img/B16061_02_19.jpg)'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_19.jpg](img/B16061_02_19.jpg)'
- en: 'Figure 2.19: S3 Bucket list screen'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.19：S3存储桶列表屏幕
- en: 'Next, navigate to Amazon Lambda, under `Services`, and click `Lambda` under `Compute`:![Figure
    2.20: Services | Compute | Lambda'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到Amazon Lambda，在`服务`下，然后点击`计算`下的`Lambda`：![图2.20：服务 | 计算 | Lambda
- en: '](img/B16061_02_20.jpg)'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_20.jpg](img/B16061_02_20.jpg)'
- en: 'Figure 2.20: Services | Compute | Lambda'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.20：服务 | 计算 | Lambda
- en: 'You will see the Lambda console, as shown here:![Figure 2.21: Lambda console'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到Lambda控制台，如图所示：![图2.21：Lambda控制台
- en: '](img/B16061_02_21.jpg)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_21.jpg](img/B16061_02_21.jpg)'
- en: 'Figure 2.21: Lambda console'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.21：Lambda控制台
- en: 'In the Lambda console, click `Create function`:![Figure 2.22: AWS Lambda Create
    function button'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Lambda控制台中，点击`创建函数`：![图2.22：AWS Lambda创建函数按钮
- en: '](img/B16061_02_22.jpg)'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_22.jpg](img/B16061_02_22.jpg)'
- en: 'Figure 2.22: AWS Lambda Create function button'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.22：AWS Lambda创建函数按钮
- en: 'Choose `Author from scratch` from the options. For `Name`, type `s3_trigger`:![Figure
    2.23: AWS Lambda—Creating a function with the Author from scratch option'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从选项中选择`从头开始创建作者`。对于`名称`，键入`s3_trigger`：![图2.23：AWS Lambda—使用从头开始创建作者选项创建函数
- en: '](img/B16061_02_23.jpg)'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_23.jpg](img/B16061_02_23.jpg)'
- en: 'Figure 2.23: AWS Lambda—Creating a function with the Author from scratch option'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.23：AWS Lambda—使用从头开始创建作者选项创建函数
- en: 'For the runtime options, choose `Python 3.6` from the list:![Figure 2.24: AWS
    Lambda—Python 3.6 selection'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于运行时选项，从列表中选择`Python 3.6`：![图2.24：AWS Lambda—Python 3.6选择
- en: '](img/B16061_02_24.jpg)'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_24.jpg](img/B16061_02_24.jpg)'
- en: 'Figure 2.24: AWS Lambda—Python 3.6 selection'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.24：AWS Lambda—Python 3.6选择
- en: 'Click `Choose or create an execution role` and choose `Create new role from
    AWS policy template(s)` and enter the name `s3TriggerRole` in the `Role name`
    field:![Figure 2.25: AWS Lambda Create Role template'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`选择或创建执行角色`，并选择`从AWS策略模板创建新角色`，在`角色名称`字段中输入`s3TriggerRole`：![图2.25：AWS Lambda创建角色模板
- en: '](img/B16061_02_25.jpg)'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_25.jpg](img/B16061_02_25.jpg)'
- en: 'Figure 2.25: AWS Lambda Create Role template'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.25：AWS Lambda创建角色模板
- en: 'Click the dropdown in `Policy templates` and select `Amazon S3 object read-only
    permissions`. You will see AWS Lambda Policy template dropdown box, as shown here:![Figure
    2.26: AWS Lambda Policy templates dropdown box'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`策略模板`下拉菜单，并选择`Amazon S3对象只读权限`。您将看到AWS Lambda策略模板下拉框，如图所示：![图2.26：AWS Lambda策略模板下拉框
- en: '](img/B16061_02_26.jpg)'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片B16061_02_26.jpg](img/B16061_02_26.jpg)'
- en: 'Figure 2.26: AWS Lambda Policy templates dropdown box'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.26：AWS Lambda策略模板下拉框
- en: 'Then, click the `Create function` button to create the Lambda function in AWS.
    The final AWS Lambda Create function screen looks as follows:![Figure 2.27: AWS
    Lambda—Create a function screen'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '然后，点击 `创建函数` 按钮以在 AWS 中创建 Lambda 函数。最终的 AWS Lambda 创建函数屏幕如下所示：![图 2.27: AWS
    Lambda—创建函数屏幕'
- en: '](img/B16061_02_27.jpg)'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_27.jpg)'
- en: 'Figure 2.27: AWS Lambda—Create a function screen'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.27: AWS Lambda—创建函数屏幕'
- en: 'You will see the Lambda function designer. There is lot of information displayed.
    Let''s focus on the essentials for this exercise:![Figure 2.28: AWS Lambda—function
    designer'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '您将看到 Lambda 函数设计器。显示了很多信息。让我们专注于这次练习的要点：![图 2.28: AWS Lambda—函数设计器'
- en: '](img/B16061_02_28.jpg)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_28.jpg)'
- en: 'Figure 2.28: AWS Lambda—function designer'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.28: AWS Lambda—函数设计器'
- en: 'Click `Add trigger`, and from the drop-down menu, select `S3`:![Figure 2.29:
    Trigger configuration drop-down menu'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击 `添加触发器`，然后从下拉菜单中选择 `S3`：![图 2.29: 触发器配置下拉菜单'
- en: '](img/B16061_02_29.jpg)'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_29.jpg)'
- en: 'Figure 2.29: Trigger configuration drop-down menu'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.29: 触发器配置下拉菜单'
- en: 'Take a quick look at the options and select `Add`:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快速浏览一下选项，然后选择 `添加`：
- en: 'The bucket name should be the S3 trigger bucket you created (in my case, it
    was `aws-ml-s3-trigger-202001181023`); in the `Event type` section, `All object
    create events` must be selected in the dropdown and `Enable Trigger` should be
    checked, as shown here:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存储桶名称应该是您创建的 S3 触发器存储桶（在我的情况下，它是 `aws-ml-s3-trigger-202001181023`）；在 `事件类型`
    部分，必须在下拉菜单中选择 `所有对象创建事件`，并勾选 `启用触发器`，如图所示：
- en: Note
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'You might get the error "`An error occurred when creating the trigger: Configurations
    overlap. Configurations on the same bucket cannot share a common event type`."
    This would happen if you created a function and deleted it. The easiest way is
    to delete the event via `Services | Storage/S3 | Click the bucket | Properties
    | Events` and deleting the Lambda event. Make sure you click the `Save` button
    after deleting the event.'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可能会遇到错误 "`创建触发器时发生错误：配置冲突。同一存储桶上的配置不能共享相同的事件类型`。" 这可能发生在您创建了一个函数然后删除了它的情况下。最简单的方法是通过
    `服务 | 存储/S3 | 点击存储桶 | 属性 | 事件` 删除事件，并确保在删除事件后点击 `保存` 按钮。
- en: '![Figure 2.30: Amazon S3 Trigger configuration'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.30: Amazon S3 触发器配置'
- en: '](img/B16061_02_30.jpg)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_30.jpg)'
- en: 'Figure 2.30: Amazon S3 Trigger configuration'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.30: Amazon S3 触发器配置'
- en: 'You will see S3 on the Lambda `Designer` screen:'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将在 Lambda `设计器` 屏幕上看到 S3：
- en: '![Figure 2.31: Lambda function designer with S3'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.31: 带有 S3 的 Lambda 函数设计器'
- en: '](img/B16061_02_31.jpg)'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_31.jpg)'
- en: 'Figure 2.31: Lambda function designer with S3'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.31: 带有 S3 的 Lambda 函数设计器'
- en: 'Again, choose `Add trigger` and choose `CloudWatch/Events/EventBridge`:![Figure
    2.32: Adding the trigger configuration'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '再次，选择 `添加触发器` 并选择 `CloudWatch/Events/EventBridge`：![图 2.32: 添加触发器配置'
- en: '](img/B16061_02_32.jpg)'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_32.jpg)'
- en: 'Figure 2.32: Adding the trigger configuration'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.32: 添加触发器配置'
- en: 'Then click the box next to `Rule`:![Figure 2.33: Add trigger – creating a new
    rule'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '然后点击 `规则` 旁边的框：![图 2.33: 添加触发器 – 创建新规则'
- en: '](img/B16061_02_33.jpg)'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_33.jpg)'
- en: 'Figure 2.33: Add trigger – creating a new rule'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.33: 添加触发器 – 创建新规则'
- en: 'Select `Create a new rule`. The following screen will be displayed. Type `s3_trigger_CWRule`
    for the rule name.![Figure 2.34: Add Trigger—New Rule Configuration'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '选择 `创建新规则`。将显示以下屏幕。将规则名称输入为 `s3_trigger_CWRule`。![图 2.34: 添加触发器—新规则配置'
- en: '](img/B16061_02_34.jpg)'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_34.jpg)'
- en: 'Figure 2.34: Add Trigger—New Rule Configuration'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.34: 添加触发器—新规则配置'
- en: 'Choose `Event pattern` in `Rule type`. Then select `Simple Storage Service
    (S3)` from the dropdown and `All events` and click `Add`:![Figure 2.35: Adding
    an S3 rule type'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 `规则类型` 中选择 `事件模式`。然后从下拉菜单中选择 `简单存储服务 (S3)` 和 `所有事件`，然后点击 `添加`：![图 2.35: 添加
    S3 规则类型'
- en: '](img/B16061_02_35.jpg)'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_35.jpg)'
- en: 'Figure 2.35: Adding an S3 rule type'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.35: 添加 S3 规则类型'
- en: 'Let''s explore the interface a bit more so that you can get comfortable navigating
    through different pages. Click `Functions` in the top-left corner:![Figure 2.36:
    Top navigation bar to navigate back to functions'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '让我们更深入地探索一下界面，以便您能够熟悉在不同页面间导航。点击左上角的 `函数`：![图 2.36: 顶部导航栏返回函数'
- en: '](img/B16061_02_36.jpg)'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_36.jpg)'
- en: 'Figure 2.36: Top navigation bar to navigate back to functions'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.36: 顶部导航栏返回函数'
- en: 'Click `s3_trigger` to go back to the function you are working on:![Figure 2.37:
    Selecting the lambda function to work on'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击 `s3_trigger` 返回您正在工作的函数：![图 2.37: 选择要工作的 lambda 函数'
- en: '](img/B16061_02_37.jpg)'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_37.jpg)'
- en: 'Figure 2.37: Selecting the lambda function to work on'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.37：选择要工作的lambda函数
- en: 'Next, scroll down the screen to the `Function code` section. The default code
    will be the same as, or similar to, the following:![Figure 2.38: AWS Lambda—the
    default lambda_function screen'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将屏幕向下滚动到`函数代码`部分。默认代码将与以下内容相同或类似：![图2.38：AWS Lambda——默认的lambda_function屏幕
- en: '](img/B16061_02_38.jpg)'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_38.jpg)'
- en: 'Figure 2.38: AWS Lambda—the default lambda_function screen'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.38：AWS Lambda——默认的lambda_function屏幕
- en: Here, we can enter and edit our code entirely within the `lambda_function` screen
    (as long as `Code entry type` is set to `Edit code inline`, which is the default
    value in the drop-down menu).
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以在`lambda_function`屏幕中完全输入和编辑我们的代码（只要`代码输入类型`设置为`编辑内联代码`，这是下拉菜单中的默认值）。
- en: Note
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For this step, you may either follow along and type in the code or obtain it
    from the source code folder at [https://packt.live/2O6WsLW](https://packt.live/2O6WsLW).
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这一步，你可以选择跟随操作并输入代码，或者从源代码文件夹中获取它，源代码文件夹位于[https://packt.live/2O6WsLW](https://packt.live/2O6WsLW)。
- en: 'First, we import the **AWS SDK** for Python (boto3: [http://boto3.readthedocs.io/en/latest/](http://boto3.readthedocs.io/en/latest/)):'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '首先，我们导入Python的**AWS SDK**（boto3: [http://boto3.readthedocs.io/en/latest/](http://boto3.readthedocs.io/en/latest/))）：'
- en: '[PRE32]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, import the JSON module to serialize the JSON ([https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html)):'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，导入JSON模块以序列化JSON ([https://docs.python.org/3.6/library/json.html](https://docs.python.org/3.6/library/json.html))：
- en: '[PRE33]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, create a function that takes two parameters—`event` and `context`:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个接受两个参数——`event`和`context`的函数：
- en: '[PRE34]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, create the `s3` client object:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`s3`客户端对象：
- en: '[PRE35]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Add an `if` event to check whether an event occurs.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`if`事件来检查是否发生事件。
- en: 'Next, replace `<input Bucket name>` with the bucket you created (`aws-ml-s3-trigger-202001181023`,
    in are example):'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`<输入存储桶名称>`替换为你创建的存储桶（在我们的例子中是`aws-ml-s3-trigger-202001181023`）：
- en: '[PRE36]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, access the first index of the `Records` event to obtain the text file
    object:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，访问`Records`事件的第一个索引以获取文本文件对象：
- en: '[PRE37]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, assign the `filename` text to a variable and print the filename:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`filename`文本分配给一个变量并打印文件名：
- en: '[PRE38]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, create the file object by getting the bucket and key:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过获取存储桶和键来创建文件对象：
- en: '[PRE39]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Assign the text to the `body_str_obj` variable:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本分配给`body_str_obj`变量：
- en: '[PRE40]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create the `comprehend` variable:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`comprehend`变量：
- en: '[PRE41]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The next three lines of code call the respective Comprehend functions to detect
    the sentiment, entities, and key phrases from the text document. Then, the output
    is printed to the console:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下三条代码调用相应的Comprehend函数，从文本文档中检测情感、实体和关键短语。然后，输出将打印到控制台：
- en: '[PRE42]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The final statement returns the `''Hello from Lambda''` string, like so:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一条语句返回`'Hello from Lambda'`字符串，如下所示：
- en: '[PRE43]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, click the `Save` button:![Figure 2.39: AWS Lambda – save screen'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`保存`按钮：![图2.39：AWS Lambda – 保存屏幕
- en: '](img/B16061_02_39.jpg)'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_39.jpg)'
- en: 'Figure 2.39: AWS Lambda – save screen'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.39：AWS Lambda – 保存屏幕
- en: From this exercise, the `s3_trigger` function has access to S3, but not Amazon
    Comprehend. We need to attach a policy to the `s3_trigger` function to allow it
    to access Amazon Comprehend to execute the text analysis functions (`detect_sentiment`,
    `detect_entities`, and `detect_key_phrases`).
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个练习中，`s3_trigger`函数可以访问S3，但不能访问Amazon Comprehend。我们需要将策略附加到`s3_trigger`函数，以便它能够访问Amazon
    Comprehend以执行文本分析函数（`detect_sentiment`、`detect_entities`和`detect_key_phrases`）。
- en: 'Exercise 2.08: Assigning Policies to S3_trigger to Access Comprehend'
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.08：将策略分配给S3_trigger以访问Comprehend
- en: 'In this exercise, we will attach the policies to the `S3_trigger` function
    to allow it to access Comprehend. The steps for completion for assigning the policies
    are as follows:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将策略附加到`S3_trigger`函数，以便它能够访问Comprehend。分配策略的完成步骤如下：
- en: 'In the Amazon Management Console, click `Services` at the top left:![Figure
    2.40: AWS Services from the AWS Management Console'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Amazon管理控制台中，点击左上角的`服务`：![图2.40：AWS Management Console中的AWS服务
- en: '](img/B16061_02_40.jpg)'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_40.jpg)'
- en: 'Figure 2.40: AWS Services from the AWS Management Console'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.40：AWS Management Console中的AWS服务
- en: 'Navigate to the `Identity and Access Management` dashboard in the `Security,
    Identity, & Compliance` section. You can also type `IAM` and select it from the
    dropdown:![Figure 2.41: IAM dashboard'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`安全、身份和合规性`部分中的`身份和访问管理`仪表板。您也可以输入`IAM`并从下拉菜单中选择它：![图2.41：IAM仪表板
- en: '](img/B16061_02_41.jpg)'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16061_02_41.jpg)'
- en: 'Figure 2.41: IAM dashboard'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.41：IAM仪表板
- en: 'Now, once you get to the IAM dashboard, click `Roles`:![Figure 2.42: Left-hand
    side of the IAM dashboard'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦你进入 IAM 控制台，点击 `Roles`：![图 2.42：IAM 控制台的左侧
- en: '](img/B16061_02_42.jpg)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_42.jpg]'
- en: 'Figure 2.42: Left-hand side of the IAM dashboard'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.42：IAM 控制台的左侧'
- en: 'Now, the screen will be populated with the role list. Click `s3TriggerRole`
    in the role list:![Figure 2.43: Role list—selecting s3TriggerRole'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，屏幕将填充角色列表。在角色列表中点击 `s3TriggerRole`：![图 2.43：选择 s3TriggerRole 的角色列表
- en: '](img/B16061_02_43.jpg)'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_43.jpg]'
- en: 'Figure 2.43: Role list—selecting s3TriggerRole'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.43：选择 s3TriggerRole 的角色列表'
- en: 'The `s3TriggerRole` option will be enabled. Then, click `Attach policies`:![Figure
    2.44: Permissions tab for s3TriggerRole'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`s3TriggerRole` 选项将被启用。然后，点击 `Attach policies`：![图 2.44：s3TriggerRole 的权限选项卡'
- en: '](img/B16061_02_44.jpg)'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_44.jpg]'
- en: 'Figure 2.44: Permissions tab for s3TriggerRole'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.44：s3TriggerRole 的权限选项卡'
- en: 'Type `Comprehend` to filter the policies. Then, click the checkbox next to
    `ComprehendFullAccess`:![Figure 2.45: ComprehendFullAccess policy selection'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `Comprehend` 以过滤策略。然后，点击 `ComprehendFullAccess` 旁边的复选框：![图 2.45：选择 ComprehendFullAccess
    策略
- en: '](img/B16061_02_45.jpg)'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_45.jpg]'
- en: 'Figure 2.45: ComprehendFullAccess policy selection'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.45：选择 ComprehendFullAccess 策略'
- en: 'Once you have selected the checkbox, click `Attach policy` (located in the
    lower right-hand corner of the screen):![Figure 2.46: Attaching the selected policies'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你选中了复选框，点击屏幕右下角的 `Attach policy`：![图 2.46：附加所选策略
- en: '](img/B16061_02_46.jpg)'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_46.jpg]'
- en: 'Figure 2.46: Attaching the selected policies'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.46：附加所选策略'
- en: 'You will be redirected to the `s3TriggerRole` screen, and you will receive
    the following message:![Figure 2.47: Successfully attached policies message'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被重定向到 `s3TriggerRole` 屏幕，你将收到以下消息：![图 2.47：成功附加策略的消息
- en: '](img/B16061_02_47.jpg)'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16061_02_47.jpg]'
- en: 'Figure 2.47: Successfully attached policies message'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.47：成功附加策略的消息'
- en: With that, we have successfully attached the policies to the `S3_trigger` function
    thus allowing it to access Comprehend.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经成功将策略附加到 `S3_trigger` 函数，从而允许它访问 Comprehend。
- en: 'Activity 2.01: Integrating Lambda with Amazon Comprehend to Perform Text Analysis'
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 2.01：将 Lambda 与 Amazon Comprehend 集成以执行文本分析
- en: In this activity, we will integrate the Lambda functions with Comprehend to
    perform text analysis (`detect_sentiment`, `detect_entities`, and `detect_key_phrases`)
    when a document is uploaded to S3.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将集成 Lambda 函数与 Comprehend，以便在文档上传到 S3 时执行文本分析（`detect_sentiment`、`detect_entities`
    和 `detect_key_phrases`）。
- en: Suppose that you are creating a chatbot. You have identified a business topic
    and the corresponding text documents, with content that will allow the chatbot
    to make your business successful. Your next step is to integrate the Lambda functions
    with Comprehend, for sentiment, key phrases, and entities. To ensure that this
    happens correctly, you will need to have `test_s3trigger_configured.txt`.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在创建一个聊天机器人。你已经确定了一个商业主题和相应的文本文档，其中包含的内容可以使聊天机器人使你的业务成功。你的下一步是将 Lambda 函数与
    Comprehend 集成，用于情感分析、关键词和实体。为了确保这一点正确执行，你需要拥有 `test_s3trigger_configured.txt`
    文件。
- en: Note
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `test_s3trigger_configured.txt` file can be found on GitHub at link [https://packt.live/3gAxqku](https://packt.live/3gAxqku).
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_s3trigger_configured.txt` 文件可以在 GitHub 上找到，链接为 [https://packt.live/3gAxqku](https://packt.live/3gAxqku)。'
- en: 'Before you execute `s3_trigger`, consider the output, based on the following
    aspects of the text: sentiment (positive, negative, or neutral), entities (quantity,
    person, place, and so on), and key phrases:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行 `s3_trigger` 之前，请考虑以下文本的以下方面：情感（正面、负面或中性）、实体（数量、人物、地点等）和关键词：
- en: First, navigate to the `S3_trigger` Lambda function.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导航到 `S3_trigger` Lambda 函数。
- en: Add `test_s3trigger_configured.txt` to the S3 bucket, to verify the Lambda `S3_trigger`
    function.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `test_s3trigger_configured.txt` 文件添加到 S3 存储桶中，以验证 Lambda `S3_trigger` 函数。
- en: Now, upload the file into the bucket and monitor the file.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将文件上传到存储桶并监控文件。
- en: Next, click `View logs` in `CloudWatch` by using the log stream.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用日志流在 `CloudWatch` 中点击 `View logs`：
- en: Now, expand the output in a text format.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，以文本格式展开输出。
- en: 'The following will be the output:'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的输出将是：
- en: '`Sentiment_response` -> Classified as 60.0% likely to be positive'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Sentiment_response` -> 被分类为 60.0% 可能是正面的'
- en: '`Sentiment_response`:'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Sentiment_response`：'
- en: '[PRE44]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`entity_response` -> Classified as 70.5% likely to be a quantity'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`entity_response` -> 被分类为 70.5% 可能是数量'
- en: '`entity_response`:'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`entity_response`：'
- en: '[PRE45]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`key_phases_response` -> Classified as 89.9% likely "a test file" and 98.5%
    likely "the s3 trigger" are the key phrases:'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`key_phases_response` -> 被归类为89.9%可能“测试文件”和98.5%可能“s3触发”的关键短语：'
- en: '`key_phases_response`:'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`key_phases_response`：'
- en: '[PRE46]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 279.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的解决方案可在第279页找到。
- en: Amazon Textract
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊Textract
- en: Another interesting NLP Amazon service is Textract. Essentially, Textract can
    extract information from documents, usually business documents such as tax forms,
    legal documents, medical forms, bank forms, patent registrations, and so forth.
    It is an **optical character recognition (OCR**) solution for scanning structured
    documents, suitable for **robotic process automation** (**RPA**). Textract is
    a relatively new service—previewed in November 2018 and generally available in
    May 2019.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的NLP亚马逊服务是Textract。本质上，Textract可以从文档中提取信息，通常是商业文档，如税务表格、法律文件、医疗表格、银行表格、专利注册等。它是一种用于扫描结构化文档的**光学字符识别（OCR**）解决方案，适用于**机器人流程自动化（RPA**）。Textract是一项相对较新的服务——于2018年11月预览，并于2019年5月正式推出。
- en: The advantage of Textract is that it understands documents and can extract tables
    and/or key-value pairs suitable for downstream processing. A lot of business processes,
    such as health insurance processing, tax preparation, loan application processing,
    monitoring and evaluation of existing loans, compliance evaluation, and engineering
    evaluations take in these documents, usually processing them manually to extract
    information and then start digital processes. Using Amazon Textract, the manual
    intake of various documents can be automated, resulting in a faster turnaround
    when approving loans, accelerated processing of health claims, or approving an
    engineering design quickly, thus achieving good business value.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: Textract的优势在于它理解文档，可以提取适合下游处理的表格和/或键值对。许多业务流程，如健康保险处理、税务准备、贷款申请处理、现有贷款的监控和评估、合规评估和工程评估，都需要这些文档，通常手动处理以提取信息，然后开始数字化流程。使用Amazon
    Textract，可以自动化各种文档的手动接收，从而在批准贷款、加速健康索赔处理或快速批准工程设计时实现更快的周转，从而实现良好的商业价值。
- en: 'Exercise 2.09: Extracting Tax Information Using Amazon Textract'
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.09：使用亚马逊Textract提取税务信息
- en: 'In this exercise, you will take a page of a sample tax return document from
    documentcloud.org ([https://www.documentcloud.org/documents/3462212-Sample-2016-Tax-Return.html](https://www.documentcloud.org/documents/3462212-Sample-2016-Tax-Return.html))
    and see how much information Textract can extract:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将从一个来自documentcloud.org（[https://www.documentcloud.org/documents/3462212-Sample-2016-Tax-Return.html](https://www.documentcloud.org/documents/3462212-Sample-2016-Tax-Return.html)）的样本税务申报文件中提取一页，看看Textract可以提取多少信息：
- en: Note
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The sample document (page 1 of US Tax form 1040) is available at [https://packt.live/2O5e1Mn](https://packt.live/2O5e1Mn).
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 样本文件（美国税表1040的第一页）可在[https://packt.live/2O5e1Mn](https://packt.live/2O5e1Mn)找到。
- en: For this exercise, we will use the Textract interface directly. This is very
    useful to try out and to see how a document is amenable to OCR.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个练习，我们将直接使用Textract界面。这非常有用，可以尝试并了解文档是否适合OCR。
- en: 'First, go to the Textract dashboard by selecting `Services | Machine Learning
    | Amazon Textract`. There are lots of interesting details on that page. Take the
    time to read through the materials:![Figure 2.48: Amazon Textract dashboard'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过选择`服务 | 机器学习 | 亚马逊Textract`进入Textract仪表板。该页面上有很多有趣的细节。花时间阅读材料：![图2.48：亚马逊Textract仪表板
- en: '](img/B16061_02_48.jpg)'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16061_02_48.jpg)'
- en: 'Figure 2.48: Amazon Textract dashboard'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.48：亚马逊Textract仪表板
- en: 'Click `Try Amazon Textract`. A very simple utilitarian page appears:![Figure
    2.49: Amazon Textract Analyze document'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`尝试亚马逊Textract`。出现一个非常简单的实用页面：![图2.49：亚马逊Textract分析文档
- en: '](img/B16061_02_49.jpg)'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16061_02_49.jpg)'
- en: 'Figure 2.49: Amazon Textract Analyze document'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.49：亚马逊Textract分析文档
- en: 'Click `Upload document` and upload the `Sample-2016-Tax-Return.jpeg` file.
    The service thinks for a minute and shows very informative tabs and the information
    it has extracted:![Figure 2.50: Amazon Textract Analyze document screen with the
    sample tax form'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`上传文档`并上传`Sample-2016-Tax-Return.jpeg`文件。服务思考一分钟，并显示非常信息丰富的标签页和它提取的信息：![图2.50：带有示例税务表格的亚马逊Textract分析文档屏幕
- en: '](img/B16061_02_50.jpg)'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16061_02_50.jpg)'
- en: 'Figure 2.50: Amazon Textract Analyze document screen with the sample tax form'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.50：带有示例税务表格的亚马逊Textract分析文档屏幕
- en: The raw text is interesting, but we are looking for more value for our automation pipeline.
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 原始文本很有趣，但我们正在寻找为我们的自动化流程带来更多价值。
- en: Click the `Forms` tab and you will see a very interesting page—it can get the
    value as well as the key. For example, line 7 is extracted as `7 Wages, salaries,
    tips, etc. Attach Form(s) W-2 7` and a value of `93,500`. Now, a downstream loan
    processing application can get the value as well as the context and act on it.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“表格”标签，您将看到一个非常有意思的页面——它可以获取键和值。例如，第7行提取为`7 Wages, salaries, tips, etc. Attach
    Form(s) W-2 7`，值为`93,500`。现在，下游的贷款处理应用程序可以获取值以及上下文并据此采取行动。
- en: You can click other fields on the image on the left-hand side and see the extracted
    entry on the right-hand side.
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以点击左侧图像上的其他字段，并在右侧看到提取的条目。
- en: 'You can download the results as JSON, CSV, table, and text formats. As expected,
    `keyvalues.csv` has the line 7 we saw earlier as the key and `93,500` as the value:'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以将结果下载为JSON、CSV、表格和文本格式。正如预期的那样，`keyvalues.csv`具有我们之前看到的第7行作为键，`93,500`作为值：
- en: '![Figure 2.51: Amazon Textract Analyze document screen with the sample tax
    document form'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图2.51：显示示例税表文档形式的 Amazon Textract 分析文档屏幕'
- en: '](img/B16061_02_51.jpg)'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16061_02_51.jpg)'
- en: 'Figure 2.51: Amazon Textract Analyze document screen with the sample tax document
    form'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.51：显示示例税表文档形式的 Amazon Textract 分析文档屏幕
- en: 'You can see the extracted fields in a table format (with the keys as the caption
    and the value in the grey box under the captions) as shown below:![Figure 2.52:
    Amazon Textract Analyze document screen with the sample tax document Forms tab
    showing the key value'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到以下表格格式中提取的字段（键作为标题，值在标题下的灰色框中）：![图2.52：Amazon Textract 分析文档屏幕，显示示例税表文档“表格”标签中的键值
- en: '](img/B16061_02_52.jpg)'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16061_02_52.jpg)'
- en: 'Figure 2.52: Amazon Textract Analyze document screen with the sample tax document
    Forms tab showing the key value'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.52：Amazon Textract 分析文档屏幕，显示示例税表文档“表格”标签中的键值
- en: 'The `Tables` tab is also interesting. Textract was able to extract two tables—the
    top and the bottom portion—but was not able to extract the middle one:![Figure
    2.53: Amazon Textract Analyze document screen'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “表格”标签也很有趣。Textract能够提取两个表格——顶部和底部部分，但不能提取中间部分：![图2.53：Amazon Textract 分析文档屏幕
- en: with the sample tax form showing Tables (form)
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示表格（表格）
- en: '](img/B16061_02_53.jpg)'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16061_02_53.jpg)'
- en: 'Figure 2.53: Amazon Textract Analyze document screen with the sample tax form
    showing Tables (form)'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.53：显示表格（表格）的示例税表分析文档屏幕
- en: 'You can see the extracted fields in a table format by clicking the `Tables`
    tab:![Figure 2.54: Amazon Textract Analyze document screen'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过点击“表格”标签来以表格格式查看提取的字段：![图2.54：Amazon Textract 分析文档屏幕
- en: with the sample tax form showing Tables (extracted)
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示表格（提取）
- en: '](img/B16061_02_54.jpg)'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16061_02_54.jpg)'
- en: 'Figure 2.54: Amazon Textract Analyze document screen with the sample tax form
    showing Tables (extracted)'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.54：显示表格（提取）的示例税表分析文档屏幕
- en: Now that you have a feel for what Textract can do, another useful exercise would
    be to develop a loan processing pipeline using Lambda. When page 1 of US Tax 1040
    is dropped into an S3 bucket as a JPEG file, trigger a Lambda that takes the file
    and invokes Textract and stores the key-value file as a CSV in another bucket.
    If you feel adventurous, you can develop another Lambda downstream of Textract
    that gets triggered when the output file is created, and it can either alert a
    loan officer via SMS or a queue or even a mobile app alert.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经对Textract的功能有了了解，另一个有用的练习是开发一个使用Lambda的贷款处理管道。当美国税表1040的第1页作为JPEG文件被投入S3桶中时，触发一个Lambda函数，该函数接收文件并调用Textract，并将键值文件作为CSV存储在另一个桶中。如果您愿意冒险，您还可以开发一个位于Textract下游的Lambda函数，当输出文件创建时被触发，并且它可以通过短信或队列甚至移动应用警报通知贷款官员。
- en: Summary
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started with high-level concepts around Amazon AI services
    and serverless computing. On a conceptual level, you learned about serverless
    computing as well as the various AI services available on the AWS platform.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从Amazon AI服务和无服务器计算的高级概念开始。在概念层面上，您了解了无服务器计算以及AWS平台上可用的各种AI服务。
- en: Overall, the culmination of these independent functions provides the foundation
    for building complex machine learning-based NLP applications (for example, Siri,
    Alexa, and so on). Knowing how and why the individual functions operate will allow
    you to build your own AWS-based NLP applications.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，这些独立功能的综合为构建基于复杂机器学习的NLP应用（例如，Siri、Alexa等）奠定了基础。了解每个函数如何以及为什么工作将允许您构建自己的基于AWS的NLP应用。
- en: Then, we dived into the details of Amazon Comprehend—how Comprehend's `DetectDominantLanguage`
    method is structured, and how to pass in both strings and a list of strings. You
    learned how to extract entities, sentiments, key phrases, and topics, which provide
    the data for complex NLP. This allows Amazon Comprehend to become more efficient
    by automating text analysis upon a text document that's been uploaded to S3.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们深入探讨了 Amazon Comprehend 的细节——Comprehend 的 `DetectDominantLanguage` 方法是如何构建的，以及如何传入字符串和字符串列表。你学习了如何提取实体、情感、关键词和主题，这些为复杂的
    NLP 提供了数据。这使得 Amazon Comprehend 通过在已上传到 S3 的文本文档上自动进行文本分析而变得更加高效。
- en: You also learned how to use Amazon Textract to extract structured information
    (tables and key-value pairs) out of scanned documents as a prelude to process automation.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了如何使用 Amazon Textract 从扫描的文档中提取结构化信息（表格和键值对），作为处理自动化的前奏。
- en: In the next chapter, we will explore topic modeling and perform theme extraction.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨主题建模并执行主题提取。
