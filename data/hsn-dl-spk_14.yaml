- en: Image Classification
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像分类
- en: In the previous chapter, after a quick recap on the concept of convolution,
    we learned more about the strategies for object recognition and more implementation
    details through examples in Python (Keras) and Scala (DL4J). This chapter covers
    the implementation of a full image classification web application or web service.
    The goal here is to show you how to apply the concepts from the previous chapter
    to an end-to-end classification system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们简要回顾了卷积的概念，并通过 Python（Keras）和 Scala（DL4J）的示例深入学习了物体识别的策略及更多实现细节。本章将介绍如何实现一个完整的图像分类
    web 应用程序或 web 服务。这里的目标是向你展示如何将上一章的概念应用到端到端的分类系统中。
- en: 'The steps to complete this goal are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一目标的步骤如下：
- en: Pick up a proper Keras (with TensorFlow backend) pre-trained CNN model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个合适的 Keras（带 TensorFlow 后端）预训练 CNN 模型
- en: Load it and test it in DL4J (and Spark)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 DL4J（和 Spark）中加载并测试它
- en: Understand how to retrain the Python model on Apache Spark
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何在 Apache Spark 上重新训练 Python 模型
- en: Implement an image classification web application that uses it
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个使用该模型的图像分类 web 应用程序
- en: Implement an alternative image classification web service that uses it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个使用该模型的替代图像分类 web 服务
- en: All of the open source technologies that we have come across in the previous
    chapters of this book while learning to use DL scenarios are involved in the implementation
    process that's explained here.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们学习使用 DL 场景时遇到的所有开源技术，都在这里的实现过程中得到了应用。
- en: Implementing an end-to-end image classification web application
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一个端到端的图像分类 web 应用程序
- en: Using all of the things that we learned about in the previous chapters of this
    book, we should now be able to implement a real-world web application that allows
    users to upload an image and then properly classify it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在本书前几章学到的所有知识，现在我们应该能够实现一个实际的 web 应用程序，允许用户上传图像并对其进行正确的分类。
- en: Picking up a proper Keras model
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个合适的 Keras 模型
- en: 'We are going to use an existing, pre-trained Python Keras CNN model. Keras
    applications ([https://keras.io/applications/](https://keras.io/applications/))
    are a set of DL models that are available as part of the framework with pre-trained
    weights. Among those models is VGG16, a 16-layer CNN that was implemented by the
    Visual Geometry Group at the University of Oxford in 2014\. This model is compatible
    with a TensorFlow backend. It has been trained on the ImageNet database ([http://www.image-net.org/](http://www.image-net.org/)).
    The ImageNet dataset is an excellent training set for general image classification,
    but it isn''t suitable for facial recognition model training. Here is the way
    you can load and use the VGG16 model in Keras. We are using a TensorFlow backend.
    Let''s import the model:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个现有的、预训练的 Python Keras CNN 模型。Keras 应用程序（[https://keras.io/applications/](https://keras.io/applications/)）是一组包含预训练权重的
    DL 模型，作为框架的一部分提供。其中的模型包括 VGG16，这是一个由牛津大学视觉几何组在 2014 年实现的 16 层 CNN。该模型兼容 TensorFlow
    后端，并且已经在 ImageNet 数据库（[http://www.image-net.org/](http://www.image-net.org/)）上进行了训练。ImageNet
    数据集是一个非常适合一般图像分类的优秀训练集，但它不适合面部识别模型的训练。下面是加载和使用 Keras 中的 VGG16 模型的方法。我们使用 TensorFlow
    后端。让我们导入该模型：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we need to import the other necessary dependencies (including NumPy and
    Pillow):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要导入其他必要的依赖（包括 NumPy 和 Pillow）：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can create an instance of the model:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建模型的实例：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The pre-trained weights are automatically downloaded the first time we run this
    application. Successive runs will pick up the weights from the local `~/.keras/models/`
    directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 预训练的权重将在第一次运行该应用程序时自动下载。后续运行将从本地 `~/.keras/models/` 目录中加载权重。
- en: 'Here''s the model architecture:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模型的架构：
- en: '![](img/4dec12d6-3628-42c8-9da5-50ed04ec9345.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4dec12d6-3628-42c8-9da5-50ed04ec9345.png)'
- en: 'We can test the model by loading an image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过加载一张图像来测试模型：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can then prepare it to be passed as input to the model (by transforming
    the image pixels into a NumPy array and preprocessing it):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其准备好作为模型的输入（通过将图像像素转换为 NumPy 数组并进行预处理）：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we can make predictions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以进行预测：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we save the model configuration (in JSON format):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们保存模型配置（以 JSON 格式）：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can also save the weights of the model that we want to import into DL4J:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以保存模型的权重，以便导入到 DL4J 中：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we pass the following image into the model as input:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将以下图像作为输入传递给模型：
- en: '![](img/0d17d699-4fe3-495d-8af8-24915b71bb35.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d17d699-4fe3-495d-8af8-24915b71bb35.png)'
- en: The image is correctly classified as a tabby cat, with a likelihood of almost
    64%.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该图像被正确分类为虎斑猫，可能性接近64%。
- en: Importing and testing the model in DL4J
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DL4J中导入并测试模型
- en: In [Chapter 10](1066b0d4-c2f3-44f9-9cc4-d38469d72c3f.xhtml), *Deploying on a
    Distributed System*, we learned how to import a pre-trained Keras model into DL4J.
    Let's apply the same process here.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](1066b0d4-c2f3-44f9-9cc4-d38469d72c3f.xhtml)中，*在分布式系统上部署*，我们学习了如何将预训练的Keras模型导入到DL4J中。现在我们在这里应用相同的过程。
- en: The dependencies for the Scala project are DL4J DataVec, NN, model import, zoo,
    and ND4J plus Apache common math 3.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Scala项目的依赖项包括DL4J DataVec、NN、模型导入、动物园和ND4J，以及Apache common math 3。
- en: 'The first thing we need to do is copy the model configuration (from the `vgg-16.json` file)
    and weights (from the `vgg-16.h5` file) into the resource folder of the project.
    Then, we can load them through the `importKerasModelAndWeights` method of the
    `KerasModelImport` class:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是将模型配置（来自`vgg-16.json`文件）和权重（来自`vgg-16.h5`文件）复制到项目的资源文件夹中。然后，我们可以通过`KerasModelImport`类的`importKerasModelAndWeights`方法加载它们：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The third argument to pass to the method is a Boolean; if `false`, this means
    that the pre-trained model has been imported to do inference only and won't be
    re-trained.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给方法的第三个参数是一个布尔值；如果为`false`，则表示该预训练模型仅用于推理，不会重新训练。
- en: 'Let''s test the model using the image in the preceding screenshot. We need
    to copy it into the resource directory for the application. Then, we can load
    it and resize it to be the required size (224 × 224 pixels):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用前面截图中的图像来测试模型。我们需要将它复制到应用程序的资源目录中。然后，我们可以加载它，并将其调整为所需的大小（224 × 224像素）：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this, we are using the `NativeImageLoader` class ([https://jar-download.com/javaDoc/org.datavec/datavec-data-image/1.0.0-alpha/org/datavec/image/loader/NativeImageLoader.html](https://jar-download.com/javaDoc/org.datavec/datavec-data-image/1.0.0-alpha/org/datavec/image/loader/NativeImageLoader.html))
    of the DataVec Image API.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用的是DataVec图像API中的`NativeImageLoader`类（[https://jar-download.com/javaDoc/org.datavec/datavec-data-image/1.0.0-alpha/org/datavec/image/loader/NativeImageLoader.html](https://jar-download.com/javaDoc/org.datavec/datavec-data-image/1.0.0-alpha/org/datavec/image/loader/NativeImageLoader.html)）。
- en: 'Then, we need to transform the image into an NDArray and preprocess it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将图像转换为NDArray并进行预处理：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Afterwards, we need to do inference through the model:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要通过模型进行推理：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To consume the result in a human readable format, we use the `org.deeplearning4j.zoo.util.imagenet.ImageNetLabels`
    class, which is available in the DL4J zoo library. The input for the `decodePredictions`
    method of this class is the array of the NDArray that''s returned from the `output`
    method of the model:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以人类可读的格式消费结果，我们使用`org.deeplearning4j.zoo.util.imagenet.ImageNetLabels`类，它在DL4J的动物园库中可用。该类`decodePredictions`方法的输入是从模型的`output`方法返回的NDArray数组：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the output of the preceding code. It presents
    the prediction results (in descending order) for the uploaded image. According
    to the model, the highest probability (around 53.3%) is that the main subject
    in the input picture is a tabby cat (which is the correct one):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了前面代码的输出。它呈现了上传图像的预测结果（按降序排列）。根据模型的预测，最高概率（大约53.3%）是输入图像中的主要物体是一只虎斑猫（这是正确的）：
- en: '![](img/043c9836-e850-4181-b971-7b41f3c87ebc.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/043c9836-e850-4181-b971-7b41f3c87ebc.png)'
- en: You should have noticed that, once the model has been imported, the steps to
    load an image and make an inference through the DL4J API are the same as for the
    example in Keras that we presented in the previous section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意到，一旦模型被导入，通过DL4J API加载图像并进行推理的步骤与我们在上一节中展示的Keras示例相同。
- en: 'After the model has been tested, it is a good practice to save it through the
    `ModelSerializer` class:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型经过测试后，最好通过`ModelSerializer`类将其保存：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, we can load it through the same class because it is less expensive in
    terms of resource usage than loading from Keras.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过相同的类加载它，因为与从Keras加载相比，这样的资源消耗更少。
- en: Re-training the model in Apache Spark
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Apache Spark中重新训练模型
- en: To improve the accuracy of the Keras VGG16 pre-trained model that we have considered
    for the use case of this chapter, we could also decide to retrain it and apply
    all of the best practices we have learned from the previous chapter (running more
    epochs, image augmentation, and so on). Once the model has been imported into
    DL4J, its training can be done exactly the same way it was explained in [Chapter
    7](3b6f47c0-6e17-484b-ad30-b6f92eb0473c.xhtml), *Training Neural Networks with
    Spark* (training with DL4J and Apache Spark). After loading, an instance of `org.deeplearning4j.nn.graph.ComputationGraph`
    is created, so the exact same principles for training multilayer networks apply
    here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高我们在本章使用案例中考虑的 Keras VGG16 预训练模型的准确性，我们还可以决定对其进行再训练，并应用我们从上一章学到的所有最佳实践（运行更多的
    epochs、图像增强等等）。一旦模型导入到 DL4J 中，其训练可以按照 [第七章](3b6f47c0-6e17-484b-ad30-b6f92eb0473c.xhtml)《*使用
    Spark 训练神经网络*》（使用 DL4J 和 Apache Spark 进行训练）中解释的方式进行。在加载后，会创建一个 `org.deeplearning4j.nn.graph.ComputationGraph`
    实例，因此，训练多层网络的相同原则在这里同样适用。
- en: 'For completeness of information, you have to know that it is possible to train
    Keras models in parallel mode on Apache Spark, too. This can be done through the
    `dist-keras` Python framework ([https://github.com/cerndb/dist-keras/](https://github.com/cerndb/dist-keras/)),
    which was created for **Distributed Deep Learning** (**DDL**). The framework can
    be installed through `pip`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了信息的完整性，你需要知道，Keras 模型也可以在 Apache Spark 上以并行模式进行训练。这可以通过 `dist-keras` Python
    框架实现（[https://github.com/cerndb/dist-keras/](https://github.com/cerndb/dist-keras/)），该框架是为
    **分布式深度学习** (**DDL**) 创建的。可以通过 `pip` 安装该框架：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It requires TensorFlow (this will be used as a backend) and the following variables
    to be set:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要 TensorFlow（将作为后端使用）并且需要设置以下变量：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let's have a quick look at the typical flow for distributed training with `dist-keras`.
    The following code isn't a complete working example; the goal here is to make
    you aware of how data parallelism training could be set.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下使用 `dist-keras` 进行分布式训练的典型流程。以下代码不是完整的工作示例；这里的目标是让你了解如何设置数据并行训练。
- en: 'First, we need to import all of the required classes for Keras, PySpark, Spark
    MLLib, and `dist-keras`. We will import Keras first:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要导入 Keras、PySpark、Spark MLLib 和 `dist-keras` 所需的所有类。我们将首先导入 Keras：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we can import PySpark:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以导入 PySpark：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we import Spark MLLib:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们导入 Spark MLLib：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we import `dist-keras`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们导入 `dist-keras`：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We then need to create the Spark configuration, like so:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建 Spark 配置，如下所示：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can then use this to create a `SparkSession`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用它来创建一个 `SparkSession`：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The dataset is now as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集现在如下所示：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can use this dataset to perform data preprocessing and normalization using
    the API provided by the Spark core and Spark MLLib (the strategy depends on the
    nature of the dataset, so it doesn't make sense to present some code here). Once
    this phase has been completed, we can define our model using the Keras API.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此数据集通过 Spark 核心和 Spark MLLib 提供的 API 执行数据预处理和标准化（策略取决于数据集的性质，因此在此无法展示代码）。一旦完成此阶段，我们可以使用
    Keras API 来定义我们的模型。
- en: 'Here''s an example with a simple `Sequential` model:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 `Sequential` 模型的示例：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, you can start the training process by choosing one of the multiple
    optimization algorithms that''s available with `dist-keras`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过选择 `dist-keras` 提供的多个优化算法之一来启动训练过程：
- en: Sequential trainer
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序训练器
- en: ADAG
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ADAG
- en: Dynamic SDG
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态 SDG
- en: AEASGD
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AEASGD
- en: AEAMSGD
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AEAMSGD
- en: DOWNPOUR
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOWNPOUR
- en: Ensemble training
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成训练
- en: Model averaging
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型平均
- en: 'While those later in this list are more performant, the first one, `SingleTrainer`,
    which is typically used as a benchmarking `trainer`, could be a good `trainer`
    choice in situations where a dataset is too big to fit in memory. Here''s a code
    example of training with `SingleTrainer`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然列表中的后面几种方法性能更好，但第一个 `SingleTrainer`，通常作为基准 `trainer` 使用，在数据集过大无法完全加载到内存时，可能是一个不错的
    `trainer` 选择。以下是使用 `SingleTrainer` 进行训练的代码示例：
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Implementing the web application
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 Web 应用程序
- en: Let's go back to our main task and start implementing a web application that
    allows users to upload an image, and then use the serialized VGG16 model to make
    an inference on it. Several frameworks exist for the JVM to implement web applications.
    In this case, to minimize our efforts, we are going to use SparkJava ([http://sparkjava.com/](http://sparkjava.com/),
    not to be confused with Apache Spark), a micro framework for JVM programming languages,
    which has being implemented to keep rapid prototyping in mind. Compared to other
    web frameworks, it has a minimal boilerplate. SparkJava isn't for web applications
    only; it is possible to implement the REST API in very few lines of code (it will
    also be used in the next section to implement our image classification web service).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到主要任务，开始实现一个允许用户上传图片的网页应用程序，然后使用序列化的VGG16模型对其进行推断。JVM上有多个框架可以用来实现网页应用程序。在这种情况下，为了最小化我们的工作量，我们将使用SparkJava（[http://sparkjava.com/](http://sparkjava.com/)，不要与Apache
    Spark混淆），这是一个为JVM编程语言设计的微框架，旨在快速原型开发。与其他网页框架相比，它的模板代码最少。SparkJava不仅仅是为网页应用程序设计的；也可以用非常少的代码行来实现REST
    API（它将在下一节中用于实现我们的图像分类网页服务）。
- en: 'We have to add SparkJava to the dependencies list of the Java project for the
    web app:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将SparkJava添加到Java项目的依赖项列表中：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The reference version for this example is `2.7.2` (the latest at the time of
    writing this book).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的参考版本为`2.7.2`（在写这本书时是最新版本）。
- en: 'In its simplest implementation, a SparkJava web application can be made of
    a single line of code in the `main` method:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的实现中，一个SparkJava网页应用程序只需在`main`方法中写一行代码：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Running the application, the `hello` page is accessible from a web browser
    at the following URL:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，`hello`页面可以通过以下URL从网页浏览器访问：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`4567` is the default port for SparkJava web apps.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`4567`是SparkJava网页应用程序的默认端口。'
- en: 'The main building block of a SparkJava application is a route. A route is made
    up of three pieces: a verb (`get`, `post`, `put`, `delete`, `head`, `trace`, `connect`,
    and `options` are the available verbs), a path (`/hello` in the preceding code
    example), and a callback (`request` or `response`). The SparkJava API also includes
    classes for sessions, cookies, filters, redirection, and custom errors handling.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: SparkJava应用程序的主要构建块是路由。路由由三部分组成：一个动词（`get`、`post`、`put`、`delete`、`head`、`trace`、`connect`和`options`是可用的动词）、一个路径（在前面的代码示例中是`/hello`）和一个回调（`request`或`response`）。SparkJava
    API还包括用于会话、Cookie、过滤器、重定向和自定义错误处理的类。
- en: 'Let''s start implementing our web application. The other dependencies for the
    project are DL4J core, DataVec, NN, model import and zoo, and ND4J. We need to
    add the DL4J serialized model (the `Vgg-16.zip` file) to the resources of the
    project. The model can then be loaded programmatically through the `ModelSerializer`
    class:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现我们的网页应用程序。项目的其他依赖项包括DL4J核心、DataVec、NN、模型导入和动物园（zoo），以及ND4J。我们需要将DL4J的序列化模型（`Vgg-16.zip`文件）添加到项目的资源中。然后，可以通过`ModelSerializer`类在程序中加载该模型：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We need to create a directory where the images from the users will be uploaded:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个目录，用于存放用户上传的图片：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The next step is the creation of the form where users can upload an image.
    In SparkJava, it is possible to use custom styles for web pages. In this example,
    we are going to add the responsive Foundation 6 framework ([https://foundation.zurb.com/](https://foundation.zurb.com/)),
    CSS. We add the minimal Foundation CSS library (`foundation-float.min.css`) in
    a subdirectory called `public` of the resource folder of the project. This way,
    the web application can access it within its classpath. The registration of the
    static file''s location can be done programmatically:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个表单，让用户可以上传图片。在SparkJava中，可以为网页使用自定义样式。在这个例子中，我们将添加响应式的Foundation 6框架（[https://foundation.zurb.com/](https://foundation.zurb.com/)）和CSS。我们将最小的Foundation
    CSS库（`foundation-float.min.css`）添加到项目资源文件夹下的一个名为`public`的子目录中。这样，网页应用程序就可以在类路径中访问它。静态文件的位置可以通过编程方式注册：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The Foundation CSS and any other static CSS files can be registered in the
    header of the pages. Here''s the method that has been implemented for this example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation CSS和其他静态CSS文件可以在页面的头部注册。这里是为此示例实现的方法：
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We now implement a method called `buildUploadForm` that returns the HTML content
    for it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在实现一个名为`buildUploadForm`的方法，它返回该表单的HTML内容：
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We then use this when defining the route to the upload page:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在定义上传页面路由时使用这个方法：
- en: '[PRE33]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can now define the `post` request:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义`post`请求：
- en: '[PRE34]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We do this to handle the image upload and classification. In the body of this
    `post` request, we have to take the following actions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是为了处理图像上传和分类。在此`post`请求的主体中，我们需要执行以下操作：
- en: Upload the image file to the `upload` directory
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像文件上传到`upload`目录
- en: Convert the image to NDArray
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像转换为NDArray
- en: Delete the file (there's no need to keep it in the web server disk after the
    conversion)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除文件（转换后不需要将其保留在Web服务器磁盘上）
- en: Preprocess the image
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预处理图像
- en: Do an inference
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行推理
- en: Display the results
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示结果
- en: 'When translated into Java, this is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当转换成Java时，代码如下所示：
- en: '[PRE35]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You will notice that the image preparation and the inference part that's done
    through DL4J is the exact same as for the standalone application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，通过DL4J进行的图像准备和推理部分与独立应用程序中的完全相同。
- en: 'After starting the application, it will be accessible at the following URL:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序后，可以通过以下URL访问它：
- en: '[PRE36]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'It is possible to programmatically set up a different listening port:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过编程方式设置不同的监听端口：
- en: '[PRE37]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following screenshot shows the upload page layout:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了上传页面的布局：
- en: '![](img/04332b95-57a3-44fc-bfc5-ee17830ec73c.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04332b95-57a3-44fc-bfc5-ee17830ec73c.png)'
- en: 'The following screenshot shows us uploading the required image:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了我们上传所需图像：
- en: '![](img/9026c652-8ee6-417f-afef-21b458a182b5.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9026c652-8ee6-417f-afef-21b458a182b5.png)'
- en: 'The results for this are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下所示：
- en: '![](img/0cf3cf17-6a52-4762-b774-6a55a5974cd0.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cf3cf17-6a52-4762-b774-6a55a5974cd0.png)'
- en: Implementing a web service
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Web服务
- en: As we mentioned in the previous section, SparkJava can be used to quickly implement
    a REST API. The example web application we implemented in the previous section
    is monolithic, but looking back at its source code, we can notice how easily it
    would be to separate the frontend from the backend and move this to a REST API.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中提到的，SparkJava可以快速实现REST API。我们在前一节中实现的示例Web应用程序是单体的，但回顾其源代码，我们可以注意到将前端与后端分离并将其移至REST
    API会变得非常容易。
- en: The frontend client presenting a form for image submission could be implemented
    with any web frontend framework. The client would then make a call to a REST service
    that's implemented through SparkJava, which performs the inference with the VGG16
    model and finally returns the prediction results in JSON format. Let's see how
    easy it is to implement this service, starting from the existing code for the
    web application.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 提供图像提交表单的前端客户端可以通过任何Web前端框架实现。客户端然后会调用通过SparkJava实现的REST服务，后者使用VGG16模型进行推理，最终返回JSON格式的预测结果。让我们看看从现有的Web应用程序代码开始，实现这个服务有多么简单。
- en: 'The web service is a Java class with the main method as an entry point. Let''s
    define a custom listening port:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务是一个带有主方法作为入口点的Java类。我们来定义一个自定义监听端口：
- en: '[PRE38]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now that we''ve done this, we need to define the `upload` endpoint:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了这一步，我们需要定义`upload`端点：
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We need to move the code that was part of the original `post` body into the
    `uploadFile` method (the only difference is the returned value, which is the prediction
    content only and not the full HTML content):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将原始`post`体中的代码移到`uploadFile`方法中（唯一的区别是返回值，它只是预测内容，而不是完整的HTML内容）：
- en: '[PRE40]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After running the application, you can test it with a simple `curl` ([https://curl.haxx.se/](https://curl.haxx.se/))
    command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，你可以通过简单的`curl`（[https://curl.haxx.se/](https://curl.haxx.se/)）命令进行测试：
- en: '[PRE41]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output will be as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/228ec6e2-a872-41d9-8a70-049fdf144063.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/228ec6e2-a872-41d9-8a70-049fdf144063.png)'
- en: 'If we want to return the output in JSON format, this is the only change to
    the web service code that we have to perform:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望以JSON格式返回输出，这是我们需要对Web服务代码进行的唯一更改：
- en: '[PRE42]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We just need to create an instance of `com.google.gson.Gson` and pass it as
    the last argument to the `post` method. The output from our example will be as
    follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要创建一个`com.google.gson.Gson`实例，并将其作为最后一个参数传递给`post`方法。我们的示例输出将如下所示：
- en: '![](img/6751468a-ed0b-4424-91ea-12c955d7bdba.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6751468a-ed0b-4424-91ea-12c955d7bdba.png)'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have implemented our first end-to-end image classification
    web application by putting together several open source frameworks that we got
    familiar with throughout the previous chapters of this book. The readers should
    now have all of the knowledge of the building blocks to start working on their
    DL models or applications using Scala and/or Python and DL4J and/or Keras or TensorFlow.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过结合本书前几章中学习的多个开源框架，成功实现了我们的第一个端到端图像分类 web 应用程序。读者现在应该掌握了构建块的所有知识，可以开始使用
    Scala 和/或 Python 以及 DL4J 和/或 Keras 或 TensorFlow 开发自己的 DL 模型或应用程序。
- en: This chapter ends the hands-on section of this book. The next and final chapter
    will discuss the future of DL and AI, with particular focus on DL4J and Apache
    Spark.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了本书的实践部分。接下来的最后一章将讨论 DL 和 AI 的未来，重点讨论 DL4J 和 Apache Spark。
