- en: Setup and Introduction to Deep Learning Frameworks
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习框架的设置与介绍
- en: At this point, you are now familiar with **machine learning** (**ML**) and **deep
    learning** (**DL**) - this is great! You should feel ready to begin making the
    preparations for writing and running your own programs. This chapter helps you
    in the process of setting up TensorFlow and Keras, and introduces their usefulness
    and purpose in deep learning. Dopamine is presented as the new reinforcement learning
    framework that we will use later on. This chapter also briefly introduces other
    deep learning libraries that are important to know.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经熟悉了**机器学习**（**ML**）和**深度学习**（**DL**）——这非常棒！你应该已经准备好开始为编写和运行你自己的程序做准备。本章将帮助你在设置TensorFlow和Keras的过程中，并介绍它们在深度学习中的用途和重要性。Dopamine作为一种新的强化学习框架将在后续使用。本章还简要介绍了其他一些重要的深度学习库。
- en: 'The topics that will be covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to Colaboratory
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Colaboratory的介绍
- en: Introduction and setup of TensorFlow
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow的介绍与设置
- en: Introduction and setup of Keras
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras的介绍与设置
- en: Introduction to PyTorch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch的介绍
- en: Introduction to Dopamine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dopamine的介绍
- en: Other deep learning libraries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他深度学习库
- en: Introduction to Colaboratory
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Colaboratory的介绍
- en: What is Colaboratory? Colaboratory is a web-based research tool for doing machine
    learning and deep learning. It is essentially like Jupyter Notebook. Colaboratory is
    becoming very popular these days as it requires no setup.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是Colaboratory？Colaboratory是一个基于网页的研究工具，用于进行机器学习和深度学习。它本质上类似于Jupyter Notebook。Colaboratory如今非常流行，因为它不需要任何设置。
- en: Throughout this book, we will be using Python 3 running on Colaboratory which
    will have installed all the libraries we may need.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们将使用运行在Colaboratory上的Python 3，它将安装我们可能需要的所有库。
- en: 'Colaboratory is free to use and is compatible with most major browsers. The
    company in charge of the development of the Colaboratory tool is Google^™. As
    opposed to Jupyter notebooks, in Colaboratory you are running everything on the
    cloud and not on your own computer. Here is the catch: you need a Google account
    since all the Colaboratory notebooks are saved into your personal Google Drive
    space. However, if you do not have a Google account, you can still continue reading
    to see how you can install every piece of Python library you will need to run
    things on your own. Still, I highly recommend you create a Google account, if
    only just to learn deep learning using the Colaboratory notebooks of this book.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Colaboratory免费使用，且兼容大多数主流浏览器。开发Colaboratory工具的公司是Google^™。与Jupyter笔记本不同，在Colaboratory中，你的一切都运行在云端，而不是你自己的电脑上。有个要点：你需要一个Google账号，因为所有的Colaboratory笔记本都保存在你的个人Google
    Drive空间里。然而，如果你没有Google账号，你仍然可以继续阅读，了解如何安装你需要的每个Python库来在自己电脑上运行。不过，我强烈建议你创建一个Google账号，至少为了能使用本书中的Colaboratory笔记本进行深度学习学习。
- en: 'When you run your code on Colaboratory, it runs on a dedicated virtual machine,
    and here is the fun part: you can have a GPU allocated to use! Or you can also
    use a CPU if you want. Whenever you are not running something, Colaboratory will
    deallocate resources (you know, because we all want to work), but you can reconnect
    them at any time.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Colaboratory上运行代码时，它会在一个专用的虚拟机上运行，接下来是有趣的部分：你可以分配一个GPU来使用！或者，如果你愿意，也可以使用CPU。每当你没有运行程序时，Colaboratory会取消分配资源（因为大家都希望有效工作），但你可以随时重新连接它们。
- en: If you are ready, go ahead and navigate to this link: [https://colab.research.google.com/](https://colab.research.google.com/)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备好了，可以前往这个链接：[https://colab.research.google.com/](https://colab.research.google.com/)
- en: If you are interested in more information and a further introduction to Colaboratory,
    search for *Welcome to Colaboratory!*. Now that you have accessed the previous
    link, let us get started with TensorFlow.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Colaboratory有兴趣并希望进一步了解，可以搜索*欢迎使用Colaboratory！*。现在你已经访问了上面的链接，我们可以开始使用TensorFlow了。
- en: From now on, we will refer to **Colaboratory** as **Colab** for short. This
    is actually how people refer to it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将**Colaboratory**简称为**Colab**，这实际上是人们对它的常见称呼。
- en: Introduction and setup of TensorFlow
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow的介绍与设置
- en: '**TensorFlow** (**TF**) has in its name the word *Tensor*, which is a synonym
    of vector. TF, thus, is a Python framework that is designed to excel at vectorial
    operations pertaining to the modeling of neural networks. It is the most popular
    library for machine learning.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**TensorFlow**（**TF**）的名字中有一个词是*Tensor*，即向量的同义词。因此，TF是一个Python框架，旨在在与神经网络建模相关的向量运算中表现出色。它是最受欢迎的机器学习库。'
- en: As data scientists, we have a preference towards TF because it is free, opensource
    with a strong user base, and it uses state-of-the-art research on the graph-based
    execution of tensor operations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，我们更偏向使用TF，因为它是免费的、开源的并且有着强大的用户基础，同时它采用了基于图形的张量操作执行的最前沿研究。
- en: Setup
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: 'Let us now begin with instructions to set up or verify that you have the proper
    setup:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来开始设置或验证你是否拥有正确设置的指令：
- en: 'To begin the installation of TF, run the following command in your Colaboratory:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始安装TF，请在Colaboratory中运行以下命令：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will install about 20 libraries that are required to run TF, including `numpy`,
    for example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装大约20个必需的库来运行TF，其中包括`numpy`，例如。
- en: Notice the exclamation mark (!) at the beginning of the command? This is how
    you will run shell commands on Colaboratory. For example, say that you want to
    remove a file named `model.h5`, then you would issue the command `!rm model.h5`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意命令前面的感叹号（!）吗？这是在Colaboratory上运行shell命令的方式。例如，假设你想删除名为`model.h5`的文件，那么你可以运行命令`!rm
    model.h5`。
- en: 'If the execution of the installation ran properly, you will be able to run
    the following command, which will print the version of TF that is installed on
    your Colaboratory:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果安装过程顺利执行，你将能够运行以下命令，这将打印出你在Colaboratory上安装的TF版本：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will produce the following output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This version of TF is the current version of TF at the time of writing this
    book. However, we all know that TF versions change frequently and it is likely
    that there will be a new version of TF when you are reading this book. If that
    is the case, you can install a specific version of TF as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本版本的TF是写这本书时的当前版本。然而，大家都知道TF版本经常变化，可能在你阅读这本书时会有一个新版本。如果是这样，你可以按照以下方式安装特定版本的TF：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We are assuming that you are familiar with Python, thus, we will trust you with
    the responsibility of matching the proper libraries to the versions that we are
    using in this book. This is not difficult and can easily be done as shown previously,
    for example, using the `==` sign to specify the version. We will be showing the
    versions used as we continue.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你已经熟悉Python，因此我们将相信你能够根据本书中使用的版本来匹配适当的库版本。这并不困难，可以像之前那样轻松完成，例如，使用`==`符号来指定版本。我们将在继续时展示所使用的版本。
- en: TensorFlow with GPU support
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持GPU的TensorFlow
- en: 'Colaboratory, by default, has GPU support automatically enabled for TensorFlow.
    However, if you have access to your own system with a GPU and want to set up TensorFlow
    with GPU support, the installation is very simple. Just type the following command
    on your personal system:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Colaboratory默认会自动启用TensorFlow的GPU支持。不过，如果你有自己的GPU系统并希望设置支持GPU的TensorFlow，安装非常简单。只需在你的个人系统中输入以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice, however, that this assumes that you have set up all the necessary drivers
    for your system to give access to the GPU. However, fear not, there is plenty
    of documentation about this process that can be searched on the internet, for
    example, [https://www.tensorflow.org/install/gpu](https://www.tensorflow.org/install/gpu).
    If you run into any problems and you need to move forward, I highly recommend
    that you come back and do the work on Colaboratory, as it is the easiest way to
    learn.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，这假设你已经为你的系统安装了所有必要的驱动程序，以便访问GPU。不过，不用担心，关于这个过程有很多文档可以在网上找到，举个例子，[https://www.tensorflow.org/install/gpu](https://www.tensorflow.org/install/gpu)。如果遇到任何问题并且你需要继续前进，我强烈建议你返回并在Colaboratory上进行操作，因为这是学习最简单的方式。
- en: Let us now address how TensorFlow works and how its graph paradigm makes it
    very robust.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看TensorFlow是如何工作的，以及它的图形化范式如何使其变得非常强大。
- en: Principles behind TensorFlow
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TensorFlow背后的原理
- en: This book is for absolute beginners in deep learning. As such, here is what
    we want you to know about how TF works. TF creates a graph that contains the execution
    from its input tensors, up to the highest level of abstraction of operations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是为深度学习的绝对初学者准备的。因此，关于 TF 如何工作的知识，我们希望你了解以下内容。TF 创建一个图形，包含从输入张量到操作的最高抽象层次的执行过程。
- en: 'For example, let''s say that we have tensors ***x*** and ***w*** that are known
    input vectors, and that we have a known constant *b*, and say that you want to
    perform this operation:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有已知的输入向量 ***x*** 和 ***w***，并且有一个已知常量 *b*，假设你想执行以下操作：
- en: '![](img/af40ade0-45f9-4dcb-acc5-f5c7296f964b.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af40ade0-45f9-4dcb-acc5-f5c7296f964b.png)'
- en: 'If we create this operation by declaring and assigning tensors, the graph will
    look like the one in *Figure 2.1*:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过声明和赋值张量来创建这个操作，图形将如下所示，在*图 2.1*中：
- en: '![](img/1d9b0258-46f6-44c7-a14d-425d966d2247.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d9b0258-46f6-44c7-a14d-425d966d2247.png)'
- en: Figure 2.1 - Example of a tensor multiplication and addition operation
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 - 张量乘法和加法操作示例
- en: In this figure, there is a tensor multiplication operation, *mul*, whose result
    is a scalar and needs to be added, *add*, with another scalar, *b*. Note that
    this might be an intermediate result and, in real computing graphs, the outcome
    of this goes up higher in the execution tree. For more detailed information on
    how TF uses graphs, please refer to this paper (Abadi, M., et.al., 2016).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在此图中，有一个张量乘法操作，*mul*，其结果是一个标量，并且需要与另一个标量 *b* 相加，*add*。请注意，这可能是一个中间结果，并且在实际计算图中，结果会向上移动到执行树的更高层次。有关
    TF 如何使用图形的更详细信息，请参考这篇论文（Abadi, M., 等，2016）。
- en: In a nutshell, TF finds the best way to execute tensor operations delegating
    specific parts to GPUs if available, or otherwise parallelizing operations on
    the CPU cores if available. It is open source with a growing community of users
    around the world. Most deep learning professionals know about TF.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，TF 寻找执行张量操作的最佳方式，将特定部分委托给 GPU（如果可用），否则如果可用的话，将操作并行化在 CPU 核心上。它是开源的，拥有一个不断壮大的全球用户社区。大多数深度学习专业人员都了解
    TF。
- en: Now let us discuss how to set up Keras and how it abstracts TensorFlow functionalities.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论如何设置 Keras，以及它如何抽象化 TensorFlow 的功能。
- en: Introduction and setup of Keras
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras 的简介和设置
- en: If you search on the internet for sample TensorFlow code, you will find that
    it may not be super easy to understand or follow. You can find tutorials for beginners
    but, in reality, things can get complicated very easily and editing someone else's
    code can be very difficult. Keras comes as an API solution to develop deep learning
    Tensorflow model prototypes with relative ease. In fact, Keras supports running
    not only on top of TensorFlow, but also over CNTK and Theano.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在互联网上搜索 TensorFlow 的示例代码，你会发现它可能并不容易理解或跟随。你可以找到适合初学者的教程，但实际上，事情往往很容易变得复杂，编辑别人写的代码也可能非常困难。Keras
    作为一种 API 解决方案，可以相对轻松地开发深度学习 TensorFlow 模型原型。事实上，Keras 不仅支持在 TensorFlow 上运行，还支持在
    CNTK 和 Theano 上运行。
- en: We can think of Keras as an abstraction to actual TensorFlow models and methods.
    This symbiotic relationship has become so popular that TensorFlow now unofficiallyencourages
    its use for those who are beginning to use TensorFlow. Keras is very user friendly,
    it is easy to follow in Python, and it is easy to learn in a general sense.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 Keras 看作是对实际 TensorFlow 模型和方法的抽象。这种共生关系已经变得如此流行，以至于 TensorFlow 现在非正式地鼓励那些刚开始使用
    TensorFlow 的人使用 Keras。Keras 非常友好，易于在 Python 中跟随，并且从总体上来说，学习起来也很简单。
- en: Setup
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: 'To set up Keras on your Colab, do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的 Colab 中设置 Keras，请执行以下操作：
- en: 'Run the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The system will proceed to install the necessary libraries and dependencies.
    Once finished, type and run the following code snippet:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统将开始安装所需的库和依赖项。安装完成后，输入并运行以下代码片段：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This outputs a confirmation message of it using TensorFlow as the backend as
    well as the latest version of Keras, which at the time of writing this book is
    2.2.4\. Thus, the output looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一个确认消息，显示它使用 TensorFlow 作为后台，并且使用的是最新版的 Keras，在本书编写时，Keras 的版本是 2.2.4。因此，输出如下所示：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Principles behind Keras
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Keras 背后的原理
- en: 'There are two major ways in which Keras provides functionality to its users:
    a sequential model and the Functional API.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 提供给用户的功能主要有两种方式：顺序模型和功能性 API。
- en: 'These can be summarized as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容可以总结如下：
- en: '**Sequential model**: This refers to a way of using Keras that allows you to
    linearly (or sequentially) stack layer instances. A layer instance, in this case,
    has the same meaning as in our previous discussions in [Chapter 1](e3181710-1bb7-4069-825a-a235355bc116.xhtml), *Introduction
    to Machine Learning*. That is, a layer has some type of input, some type of behavior
    or main model operation, and some type of output.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顺序模型**：这是指使用Keras的一种方式，允许你线性（或顺序地）堆叠层实例。在这里，层实例的含义与我们在[第1章](e3181710-1bb7-4069-825a-a235355bc116.xhtml)中讨论的一致，*机器学习简介*中提到过的。也就是说，层具有某种输入、某种行为或主要模型操作，以及某种输出。'
- en: '**Functional API**: This is the best way to go deeper in defining more complex
    models, such as merge models, models with multiple outputs, models with multiple
    shared layers, and many other possibilities. Don''t worry, these are advanced
    topics that will become clear in further chapters. The Functional API paradigm
    gives the coder more freedom to do different innovative things.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能性API**：这是深入定义更复杂模型的最佳方法，如合并模型、多输出模型、具有多个共享层的模型以及许多其他可能性。别担心，这些是高级话题，会在后续章节中讲解清楚。功能性API范式为程序员提供了更多自由，能做出不同的创新。'
- en: We can think of the sequential model as an easy way of starting with Keras,
    and the Functional API as the way to go for more complex problems.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把顺序模型看作是开始使用Keras的简便方法，而功能性API则适用于更复杂的问题。
- en: 'Remember the shallow neural network from [Chapter 1](https://cdp.packtpub.com/deep_learning_for_beginners/wp-admin/post.php?post=25&action=edit#post_24), *Introduction
    to Machine Learning*? Well, this is how you would do that model using the sequential
    model paradigm in Keras:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 记得[第1章](https://cdp.packtpub.com/deep_learning_for_beginners/wp-admin/post.php?post=25&action=edit#post_24)中的浅层神经网络吗？好吧，这就是你如何使用Keras的顺序模型范式来构建该模型的方法：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first two lines of code import the `Sequential` model and the `Dense` and
    `Activation` layers, respectively. A `Dense` layer is a fully connected neural
    network, whereas an `Activation` layer is a very specific way of invoking a rich
    set of activation functions, such as ReLU and SoftMax, as in the previous example
    (these will be explained in detail later).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的前两行分别导入了`Sequential`模型和`Dense`层与`Activation`层。`Dense`层是一个全连接的神经网络，而`Activation`层是以特定方式调用丰富的激活函数集，例如ReLU和SoftMax，正如前面的例子所示（这些将在后文详细解释）。
- en: 'Alternatively, you could do the same model, but using the `add()` method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以使用`add()`方法来实现相同的模型：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This second way of writing the code for the neural model looks more linear,
    while the first one looks more like a Pythonic way to do so with a list of items.
    It is really the same thing and you will probably develop a preference for one
    way or the other. However, remember, both of the previous examples use the Keras
    sequential model.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种写法看起来更线性，而第一种更像是通过列表的方式在Python中实现。这实际上是相同的，最终你可能会偏好某一种方法。不过，记住，之前的两个例子都使用了Keras的顺序模型。
- en: 'Now, just for comparison purposes, this is how you would code the exact same
    neural network architecture, but using the Keras Functional API paradigm:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，仅为比较之用，这是如何使用Keras功能性API范式编写完全相同的神经网络架构：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you are an experienced programmer, you will notice that the Functional API
    style allows more flexibility. It allows you to define input tensors to use them
    as input to different pieces of the model, if needed. However, using the Functional
    API does assume that you are familiar with the sequential model. Therefore, in
    this book, we will start with the sequential model and move forward with the Functional
    API paradigm as we make progress toward more complex neural models.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是经验丰富的程序员，你会注意到功能性API风格提供了更多的灵活性。它允许你定义输入张量，并将其用作模型不同部分的输入（如果需要的话）。然而，使用功能性API假设你已经熟悉顺序模型。因此，在本书中，我们将从顺序模型开始，随着向更复杂神经网络模型的进展，逐步引入功能性API范式。
- en: Just like Keras, there are other Python libraries and frameworks that allow
    us to do machine learning with relatively low difficulty. At the time of writing
    this book, the most popular is Keras and the second most popular is PyTorch.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Keras一样，还有其他一些Python库和框架可以让我们以相对较低的难度进行机器学习。在写这本书的时候，最流行的是Keras，其次是PyTorch。
- en: Introduction to PyTorch
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch简介
- en: At the time of writing this book, PyTorch is the third most popular overall
    deep learning framework. Its popularity has been increasing in spite of being
    relatively new in the world compared to TensorFlow. One of the interesting things
    about PyTorch is that it allows some customizations that TensorFlow does not.
    Furthermore, PyTorch has the support of Facebook™.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书编写时，PyTorch是第三大最受欢迎的深度学习框架。尽管与TensorFlow相比，PyTorch在全球的历史较短，但它的受欢迎程度仍在不断增加。PyTorch的一个有趣特点是，它允许一些TensorFlow不具备的定制功能。此外，PyTorch还得到了Facebook™的支持。
- en: 'Although this book covers TensorFlow and Keras, I think it is important for
    all of us to remember that PyTorch is a good alternative and it looks very similar
    to Keras. As a mere reference, here is how the exact same shallow neural network
    we showed earlier would look if coded in PyTorch:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书涵盖了TensorFlow和Keras，但我认为我们都应该记住，PyTorch是一个很好的替代方案，而且它与Keras非常相似。作为参考，以下是如果用PyTorch编写，我们之前展示的相同浅层神经网络的代码：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The similarities are many. Also, the transition from Keras to PyTorch should
    not be too difficult for the motivated reader, and it could be a nice skill to
    have in the future. However, for now, most of the interest of the community is
    on TensorFlow and all its derivatives, especially Keras. If you want to know more
    about the beginnings and basic principles of PyTorch, you might find this reading
    useful (Paszke, A., et.al., 2017).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 相似之处很多。此外，从Keras到PyTorch的过渡对于有动机的读者来说不应太困难，而且这可能是未来的一项很好的技能。然而，目前社区的大部分兴趣仍集中在TensorFlow及其所有衍生版本上，特别是Keras。如果你想了解更多关于PyTorch的起源和基本原理，或许这篇文章会对你有所帮助（Paszke,
    A., 等，2017年）。
- en: Introduction to Dopamine
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dopamine简介
- en: An interesting recent development in the world of deep reinforcement learning
    is Dopamine. Dopamine is a framework for the fast prototyping of deep reinforcement
    learning algorithms. This book will deal very briefly with reinforcement learning,
    but you need to know how to install it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 深度强化学习领域的一个有趣的最新发展是Dopamine。Dopamine是一个用于快速原型设计深度强化学习算法的框架。本书将简要介绍强化学习，但你需要知道如何安装它。
- en: Dopamine is known for being easy to use for new users in the world of reinforcement
    learning. Also, although it is not an official product of Google, most of its
    developers are Googlers. In its current state, at the time of writing this book,
    the framework is very compact and provides ready-to-use algorithms.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Dopamine以对强化学习新用户易于使用而闻名。此外，尽管它不是Google的官方产品，但大多数开发者都是Google的员工。在编写本书时，它的框架非常紧凑，并提供了现成可用的算法。
- en: 'To install Dopamine, you can run the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Dopamine，你可以运行以下命令：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can test the correct installation of Dopamine by simply executing the following
    command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行以下命令来测试Dopamine是否正确安装：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This provides no output, unless there are errors. Usually, Dopamine will make
    use of a lot of libraries outside of it to allow doing many more interesting things.
    Right now, some of the most interesting things one can do with reinforcement learning
    is to train agents with reward policies, which has direct applications in gaming.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会输出任何内容，除非发生错误。通常，Dopamine会使用大量外部库，以便做更多有趣的事情。目前，利用强化学习进行训练的一个最有趣的应用就是通过奖励策略训练代理，这在游戏中有直接的应用。
- en: 'As an example, see *Figure 2.2*, which displays a time snapshot of a video
    game as it learns, using policies that reinforce desired behavior depending on
    the actions taken by an agent:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，参见*图 2.2*，该图展示了一个视频游戏在学习过程中，使用强化行为的策略根据代理采取的动作来强化期望行为的时间快照：
- en: '![](img/63c1363e-7bef-466b-92ce-e1314d83ce37.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63c1363e-7bef-466b-92ce-e1314d83ce37.png)'
- en: Figure 2.2 - Sample visualization of Dopamine's agent in a reinforcement learning
    problem in gaming
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 - Dopamine在游戏强化学习问题中的代理样本可视化
- en: An agent in reinforcement learning is the piece that decides what action to
    take next. The agent accomplishes this by observing the world and the rules of
    the world. The more defined the rules are, the more constrained the result will
    be. If the rules are too loose, the agent may not make good decisions on what
    actions to take.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 强化学习中的代理是决定下一步采取什么行动的角色。代理通过观察世界及其规则来完成这一任务。规则越明确，结果就越受约束。如果规则太宽松，代理可能无法做出好的行动决策。
- en: Although this book does not dive a great deal into reinforcement learning, we
    will cover an interesting gaming application in the last chapter of the book.
    For now, you can read the following white paper for more information about Dopamine
    (Castro, P. S., et.al., 2018).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书没有深入探讨强化学习，但我们将在本书的最后一章介绍一个有趣的游戏应用。现在，你可以阅读以下白皮书，了解更多关于Dopamine的信息（Castro,
    P. S., *等，*2018）。
- en: Other deep learning libraries
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他深度学习库
- en: Besides the big two, TensorFlow and Keras, there are other competitors that
    are making their way in the world of deep learning. We already discussed PyTorch,
    but there are more. Here we talk about them briefly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 除了两个大头——TensorFlow和Keras外，还有其他一些竞争者正在深度学习领域崭露头角。我们已经讨论过PyTorch，但还有更多。这里我们简要地谈一谈它们。
- en: Caffe
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Caffe
- en: Caffe is also a popular framework developed at UC Berkeley (Jia, Y., et.al.
    2014). It became very popular in 2015-2016\. A few employers still demand this
    skillset and scholarly articles still mention its usage. However, its usage is
    in decay in part due to the major success of TF and the accessibility of Keras.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe也是一个流行的框架，由加州大学伯克利分校开发（Jia, Y., 等，2014）。它在2015-2016年间变得非常流行。一些雇主仍然要求具备这种技能，学术文章中也仍然提到它的使用。然而，由于TF的成功和Keras的可访问性，其使用正在逐渐衰退。
- en: For more information about Caffe, visit: [https://caffe.berkeleyvision.org](https://caffe.berkeleyvision.org).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于Caffe的信息，请访问：[https://caffe.berkeleyvision.org](https://caffe.berkeleyvision.org)。
- en: Note also the existence of Caffe2, which is developed by Facebook and is open
    source. It was built based on Caffe, but now Facebook has its new champion, PyTorch.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意到Caffe2的存在，它是由Facebook开发并且开源的。它是基于Caffe构建的，但现在Facebook有了新的“冠军”——PyTorch。
- en: Theano
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Theano
- en: Theano was developed by Yoshua Bengio's group at the University of Montreal
    in 2007 (Al-Rfou, R., *et.al. *2016). Theano has a relatively old user base that
    probably saw the rise of TF. The latest major release was made in late 2017 and,
    although there are no clear plans of new major releases, updates are still being
    made by the community.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Theano是由Yoshua Bengio的团队在蒙特利尔大学于2007年开发的（Al-Rfou, R., *等，*2016）。Theano有一个相对较老的用户群，可能见证了TF的崛起。最新的重大版本发布于2017年底，尽管没有明确的计划发布新的重大版本，但社区仍在持续更新。
- en: 'For more information about Theano, please visit:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于Theano的信息，请访问：
- en: '[http://deeplearning.net/software/theano/](http://deeplearning.net/software/theano/)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://deeplearning.net/software/theano/](http://deeplearning.net/software/theano/)'
- en: Honorable mentions
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 荣誉提名
- en: 'There are other alternatives out there that may not be as popular, for a variety
    of reasons, but are worth mentioning here in case their future changes. These
    are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些替代方案，可能由于各种原因不如它们流行，但值得在此提及，以防它们的未来发生变化。以下是这些替代方案：
- en: '| **Name** | **Developed by** | **More information** |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **开发者** | **更多信息** |'
- en: '| MXNET | Apache | [https://mxnet.apache.org/](https://mxnet.apache.org/) |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| MXNET | Apache | [https://mxnet.apache.org/](https://mxnet.apache.org/) |'
- en: '| CNTK | Microsoft | [https://cntk.ai](https://cntk.ai) |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| CNTK | Microsoft | [https://cntk.ai](https://cntk.ai) |'
- en: '| Deeplearning4J | Skymind | [https://deeplearning4j.org/](https://deeplearning4j.org/)
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| Deeplearning4J | Skymind | [https://deeplearning4j.org/](https://deeplearning4j.org/)
    |'
- en: '| Chainer | Preferred Networks | [https://chainer.org/](https://chainer.org/)
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| Chainer | Preferred Networks | [https://chainer.org/](https://chainer.org/)
    |'
- en: '| FastAI | Jeremy Howard | [https://www.fast.ai/](https://www.fast.ai/) |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| FastAI | Jeremy Howard | [https://www.fast.ai/](https://www.fast.ai/) |'
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This introductory chapter showed how to set up the necessary libraries to run
    TensorFlow, Keras, and Dopamine. Hopefully, you will use Colabs to make things
    easier for you to learn. You also learned the basic mindset and design concept
    behind these frameworks. Although such frameworks are the most popular at the
    time of writing this book, there are other competitors out there, which we also
    introduced briefly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何设置必要的库以运行TensorFlow、Keras和Dopamine。希望你能使用Colab来让学习变得更轻松。你还学到了这些框架背后的基本思维方式和设计理念。尽管在编写本书时，这些框架是最受欢迎的，但仍有其他竞争者，我们也简要介绍了它们。
- en: At this point, you are all set to begin the journey to mastering deep learning.
    Our first milestone is to know how to prepare data for deep learning applications.
    This item is crucial for the success of the model. No matter how good the models
    are and how deep they are, if the data is not properly formatted or treated, it
    can lead to catastrophic performance results. For that reason, we will now go
    to [Chapter 3](8300fba9-620e-4bc3-8d81-3b02c5043a0d.xhtml), *Preparing Data.* In
    that chapter, you will learn how to take a dataset and prepare it for the specific
    task you are trying to solve with a specific type of deep learning model. However,
    before you go there, please try to quiz yourself with the following questions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经准备好开始掌握深度学习之旅。我们的第一个里程碑是了解如何为深度学习应用准备数据。这个步骤对模型的成功至关重要。无论模型多么优秀，结构多么深，如果数据没有正确格式化或处理，都会导致灾难性的性能结果。因此，我们将前往[第3章](8300fba9-620e-4bc3-8d81-3b02c5043a0d.xhtml)，*准备数据。*
    在该章节中，你将学习如何处理数据集，并将其准备好用于你想要用特定类型的深度学习模型解决的具体任务。然而，在你进入该章节之前，请先尝试通过以下问题自测。
- en: Questions and answers
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题与答案
- en: '**Does Colab run on my personal computer?**'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Colab 是否在我的个人计算机上运行？**'
- en: No, it runs in the cloud, but with some skill and setup, you could connect it
    to your own personal cloud.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 不，Keras 运行在云端，但通过一些技巧和设置，你可以将其连接到你自己的个人云。
- en: '**Does Keras use GPUs? **'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Keras 使用 GPU 吗？**'
- en: Yes. Since Keras runs on TensorFlow (in the setup of this book) and TensorFlow
    uses GPUs, then Keras also does.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。因为 Keras 运行在 TensorFlow 上（在本书的设置中），而 TensorFlow 使用 GPU，所以 Keras 也使用 GPU。
- en: '**What are the two main coding paradigms in Keras?**'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Keras 中的两种主要编码范式是什么？**'
- en: (A) Sequential model; (B) Functional API.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: (A) 顺序模型；(B) 功能性 API。
- en: '**Why do we care about Dopamine?**'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我们为什么关心多巴胺？**'
- en: Because there are only a few reinforcement learning frameworks you can trust
    out there, and Dopamine is one of them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因为市面上只有少数几个你可以信任的强化学习框架，而多巴胺就是其中之一。
- en: References
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Abadi, M., Barham, P., Chen, J., Chen, Z., Davis, A., Dean, J., Devin, M.,
    Ghemawat, S., Irving, G., Isard, M., and Kudlur, M. (2016). *Tensorflow: A system
    for large-scale machine learning.* In*12th {USENIX} Symposium on Operating Systems
    Design and Implementation* ({OSDI} 16) (pp. 265-283).'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Abadi, M., Barham, P., Chen, J., Chen, Z., Davis, A., Dean, J., Devin, M.,
    Ghemawat, S., Irving, G., Isard, M., 和 Kudlur, M. (2016). *Tensorflow: 一个大规模机器学习系统.*
    在*第12届 {USENIX} 操作系统设计与实现研讨会*（{OSDI} 16）（第265-283页）。'
- en: Paszke, A., Gross, S., Chintala, S., Chanan, G., Yang, E., DeVito, Z., Lin,
    Z., Desmaison, A., Antiga, L. and Lerer, A. (2017). *Automatic differentiation
    in pytorch.*
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Paszke, A., Gross, S., Chintala, S., Chanan, G., Yang, E., DeVito, Z., Lin,
    Z., Desmaison, A., Antiga, L. 和 Lerer, A. (2017). *Pytorch 中的自动微分。*
- en: 'Castro, P. S., Moitra, S., Gelada, C., Kumar, S., and Bellemare, M. G. (2018).
    *Dopamine: A research framework for deep reinforcement learning*. arXiv preprint
    arXiv:1812.06110.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Castro, P. S., Moitra, S., Gelada, C., Kumar, S., 和 Bellemare, M. G. (2018).
    *Dopamine: 一个深度强化学习的研究框架.* arXiv 预印本 arXiv:1812.06110。'
- en: 'Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R., Guadarrama,
    S., and Darrell, T. (2014, November). *Caffe: Convolutional architecture for fast
    feature embedding.* In *Proceedings of the 22nd ACM* *international conference
    on Multimedia* (pp. 675-678). *ACM*.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R., Guadarrama,
    S., 和 Darrell, T. (2014年11月). *Caffe: 用于快速特征嵌入的卷积架构.* 在*第22届 ACM 国际多媒体会议论文集*（第675-678页）。*ACM*。'
- en: 'Al-Rfou, R., Alain, G., Almahairi, A., Angermueller, C., Bahdanau, D., Ballas,
    N., Bastien, F., Bayer, J., Belikov, A., Belopolsky, A. and Bengio, Y. (2016).
    *Theano: A Python framework for fast computation of* *mathematical expressions*. arXiv
    preprint arXiv:1605.02688.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Al-Rfou, R., Alain, G., Almahairi, A., Angermueller, C., Bahdanau, D., Ballas,
    N., Bastien, F., Bayer, J., Belikov, A., Belopolsky, A. 和 Bengio, Y. (2016). *Theano:
    一个用于快速计算数学表达式的 Python 框架.* arXiv 预印本 arXiv:1605.02688。'
