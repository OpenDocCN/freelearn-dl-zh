- en: 'Appendix A: Functional Programming in Scala'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A：Scala中的函数式编程
- en: Scala combines functional programming and object-oriented programming in a single
    high-level language. This appendix contains a reference to the principles of functional
    programming in Scala.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Scala将函数式编程和面向对象编程结合在一个高级语言中。该附录包含了有关Scala中函数式编程原则的参考。
- en: Functional programming (FP)
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程（FP）
- en: 'In FP, functions are first-class citizens—this means that they are treated
    like any other values and can be passed as arguments to other functions or be
    returned as a result of a function. In FP, it is also possible to work with functions
    in the so-called literal form, with no need to name them. Let''s look at the following
    Scala example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式编程中，函数是第一类公民——这意味着它们像其他值一样被对待，可以作为参数传递给其他函数，或者作为函数的返回结果。在函数式编程中，还可以使用所谓的字面量形式来操作函数，无需为其命名。让我们看一下以下的Scala示例：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`i => i % 2 == 0` is a function literal without a name. It checks whether a
    number is even. It can be passed as another function argument or it can be used
    as a return value.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`i => i % 2 == 0`是一个没有名称的函数字面量。它检查一个数字是否为偶数。它可以作为另一个函数的参数传递，或者可以作为返回值使用。'
- en: Purity
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯度
- en: One of the pillars of functional programming is pure functions. A pure programming
    function is a function that is analogous of a mathematical function. It depends
    only on its input parameters and its internal algorithm and always returns an
    expected result for a given input, since it doesn't rely on anything from outside.
    (This is a big difference compared to the OOP methods.) You can easily understand
    that this makes a function easier to test and maintain. The fact that a pure function
    doesn't rely on anything else from the outside means that it doesn't have side
    effects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程的支柱之一是纯函数。一个纯函数是类似于数学函数的函数。它仅依赖于其输入参数和内部算法，并且对于给定的输入始终返回预期的结果，因为它不依赖于外部的任何东西。（这与面向对象编程的方法有很大的不同。）你可以很容易理解，这使得函数更容易测试和维护。一个纯函数不依赖外部的任何内容，这意味着它没有副作用。
- en: Purely functional programs work on immutable data. Rather than altering existing
    values, altered copies are created while the originals are preserved. This means
    that they can be shared between the old and new copies because the unchanged parts
    of the structure cannot be modified. An outcome of this behavior is a significant
    saving in terms of memory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 纯粹的函数式程序在不可变数据上进行操作。与其修改现有的值，不如创建修改后的副本，而原始值则被保留。这意味着它们可以在旧副本和新副本之间共享，因为结构中未改变的部分无法被修改。这样的行为带来的一个结果是显著的内存节省。
- en: Examples of pure functions in Scala (and Java) include the `size` method of
    `List` ([https://docs.oracle.com/javase/8/docs/api/java/util/List.html](https://docs.oracle.com/javase/8/docs/api/java/util/List.html))
    or the `lowercase` method of `String` ([https://docs.oracle.com/javase/8/docs/api/java/lang/String.html](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)).
    `String` and `List` are both immutable, and, as a consequence, all of their methods
    act like pure functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala（以及Java）中，纯函数的例子包括`List`的`size`方法（[https://docs.oracle.com/javase/8/docs/api/java/util/List.html](https://docs.oracle.com/javase/8/docs/api/java/util/List.html)）或者`String`的`lowercase`方法（[https://docs.oracle.com/javase/8/docs/api/java/lang/String.html](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)）。`String`和`List`都是不可变的，因此它们的所有方法都像纯函数一样工作。
- en: But not all abstractions can be directly implemented with pure functions (some
    such as reading and writing from a database or object storage or logging). FP
    provides two approaches that allow developers to deal with impure abstractions
    in a pure way, therefore making the final code much cleaner and maintainable.
    The first approach, which is used in some other FP languages but not in Scala,
    is to extend the language's purely functional core with side effects. Then, the
    responsibility to avoid using impure functions in situations where only pure functions
    are expected is up to the developers. The second approach, which happens in Scala,
    is by introducing side effects to the pure language simulating them with *monads*
    ([https://www.haskell.org/tutorial/monads.html](https://www.haskell.org/tutorial/monads.html)).
    This way, while the programming language remains pure and referentially transparent,
    the monads can provide implicit state by threading it inside them. The compiler
    doesn't have to know about the imperative features because the language itself
    stays pure, while, usually, the implementations know about them due to efficiency
    reasons.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但并非所有抽象都可以直接通过纯函数实现（例如读取和写入数据库或对象存储，或日志记录等）。FP提供了两种方法，使开发人员能够以纯粹的方式处理不纯抽象，从而使最终代码更加简洁和可维护。第一种方法在某些其他FP语言中使用，但在Scala中没有使用，即通过将语言的纯函数核心扩展到副作用来实现。然后，避免在只期望纯函数的情况下使用不纯函数的责任就交给开发人员。第二种方法出现在Scala中，它通过引入副作用来模拟纯语言中的副作用，使用*monads*（[https://www.haskell.org/tutorial/monads.html](https://www.haskell.org/tutorial/monads.html)）。这样，虽然编程语言保持纯粹且具有引用透明性，但monads可以通过将状态传递到其中来提供隐式状态。编译器不需要了解命令式特性，因为语言本身保持纯粹，而通常实现会出于效率原因了解这些特性。
- en: Since pure computations are referentially transparent, they can be performed
    at any time while still yielding the same result, making it possible to defer
    the computation of values until they are really needed (lazy computation). This
    lazy evaluation avoids unnecessary computations and allows infinite data structures
    to be defined and used.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于纯计算具有引用透明性，它们可以在任何时间执行，同时仍然产生相同的结果，这使得计算值的时机可以延迟，直到真正需要时再进行（懒惰计算）。这种懒惰求值避免了不必要的计算，并允许定义和使用无限数据结构。
- en: Allowing side effects only through monads as in Scala and keeping the language
    pure makes it possible to have a lazy evaluation that doesn't conflict with the
    effects of impure code. While lazy expressions can be evaluated in any order,
    the monad structure forces these effects to be executed in the correct order.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过像Scala一样仅通过monads允许副作用，并保持语言的纯粹性，使得懒惰求值成为可能，而不会与不纯代码的副作用冲突。虽然懒惰表达式可以按任何顺序进行求值，但monad结构迫使这些副作用按正确的顺序执行。
- en: Recursion
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归
- en: 'Recursion is heavily used in FP, as it is the canonical, and often the only,
    way to iterate. Functional language implementations will often include optimizations
    based on the so-called **tail recursion** ([https://alvinalexander.com/scala/fp-book/tail-recursive-algorithms](https://alvinalexander.com/scala/fp-book/tail-recursive-algorithms))
    to ensure that heavy recursion doesn''t have a significant or excessive impact
    on memory consumption. Tail recursion is a particular instance of recursion where
    the return value of a function is calculated only as a call to itself*.* Here
    is a Scala example of calculating a Fibonacci sequence recursively. This first
    piece of code represents an implementation of the recursive function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 递归在函数式编程（FP）中被广泛使用，因为它是经典的，也是唯一的迭代方式。函数式语言的实现通常会包括基于所谓的**尾递归**（[https://alvinalexander.com/scala/fp-book/tail-recursive-algorithms](https://alvinalexander.com/scala/fp-book/tail-recursive-algorithms)）的优化，以确保重度递归不会对内存消耗产生显著或过度的影响。尾递归是递归的一个特例，其中函数的返回值仅仅是对自身的调用*。*
    以下是一个使用Scala语言递归计算斐波那契数列的例子。第一段代码表示递归函数的实现：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This other piece of code represents an implementation of the same function
    in a tail-recursive way:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一段代码表示同一函数的尾递归实现：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While the return line of the first function contains a call to itself, it also
    does something to its output, so the return value isn't really the recursive call's
    return value. The second implementation is a regular recursive (and in particular
    tail-recursive) function.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第一个函数的返回行包含对自身的调用，但它还对输出做了一些处理，因此返回值并不完全是递归调用的返回值。第二个实现是一个常规的递归（特别是尾递归）函数。
