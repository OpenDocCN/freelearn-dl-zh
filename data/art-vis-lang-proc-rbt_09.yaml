- en: '*Chapter 9*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第九章*'
- en: Computer Vision for Robotics
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器人视觉
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您将能够：
- en: Evaluate objects using artificial vision
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用人工视觉评估物体
- en: Combine external frameworks with ROS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将外部框架与 ROS 结合
- en: Use a robot to interact with objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用机器人与物体交互
- en: Create a robot to understand natural language
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个能够理解自然语言的机器人
- en: Develop your own end-to-end robotics applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发自己的端到端机器人应用
- en: In this chapter, you'll learn how to work with Darknet and YOLO. You'll also
    evaluate objects using AI and integrate YOLO and ROS to enable your virtual robot
    to predict objects in the virtual environment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用 Darknet 和 YOLO。您还将使用 AI 评估物体，并将 YOLO 与 ROS 集成，使您的虚拟机器人能够在虚拟环境中预测物体。
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In previous chapters, you came across many technologies and techniques that
    may be new to you. You have learned many concepts and techniques that help solve
    real-world problems. Now, you are going to use all the acquired skills to complete
    this last chapter and build your own end-to-end robotics application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，您接触了许多可能对您来说是新的技术和方法。您学到了许多概念和技术，帮助解决现实世界中的问题。现在，您将运用所有学到的技能，完成本章并构建自己的端到端机器人应用。
- en: In this chapter, you'll use a deep learning framework, Darknet, to build robots
    that recognize objects in real time. This framework will be integrated with ROS
    so that the final application can be applied to any robot. Furthermore, it's important
    to say that object recognition can be used for building different kinds of robotics
    applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用一个深度学习框架 Darknet 来构建能够实时识别物体的机器人。该框架将与 ROS 集成，使最终的应用可以应用于任何机器人。此外，重要的是要说明，物体识别可以用于构建不同种类的机器人应用。
- en: The end-to-end applications you are going to build will not only have academic
    value but will also be useful for real-world problems and live situations. You
    will even be able to adapt how the application functions depending on circumstances.
    This will give you a lot of opportunities to solve real-world problems when working
    with robots.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您将构建的端到端应用不仅具有学术价值，而且对解决实际问题和应对现实情况非常有用。您甚至可以根据不同情况调整应用的功能。这将为您在与机器人合作时解决实际问题提供很多机会。
- en: Darknet
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Darknet
- en: Darknet is an open source neural network framework, which has been written in
    C and CUDA. It is very fast, as it allows GPU as well as CPU computation. It was
    developed by Joseph Redmon, a computer scientist focused on artificial vision.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Darknet 是一个开源神经网络框架，采用 C 和 CUDA 编写。它非常快速，因为支持 GPU 和 CPU 计算。它由计算机科学家 Joseph Redmon
    开发，Redmon 专注于人工视觉领域。
- en: 'Although we are not going to study all of the functionalities in this chapter,
    Darknet includes a lot of interesting applications. As we mentioned earlier, we
    are going to use YOLO, but the following is a list of other Darknet functionalities:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在本章不会研究所有功能，Darknet 包含了许多有趣的应用。正如我们之前提到的，我们将使用 YOLO，但以下是其他 Darknet 功能的列表：
- en: '**ImageNet Classification**: This is an image classifier, which uses known
    models such as AlexNet, ResNet, and ResNeXt. After classifying some ImageNet images
    with all these models, a comparison between them is performed. They are based
    on time, accuracy, weights etc..'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ImageNet 分类**：这是一种图像分类器，使用已知的模型，如 AlexNet、ResNet 和 ResNeXt。在使用这些模型对一些 ImageNet
    图像进行分类后，会对它们进行比较。比较依据包括时间、准确性、权重等。'
- en: '**RNN''s**: Recurrent neural networks are used for generating and managing
    natural language. They use an architecture called a vanilla RNN with three recurrent
    modules, which achieves good results in tasks such as speech recognition and natural
    language processing.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RNN**：循环神经网络用于生成和管理自然语言。它们使用一种叫做 Vanilla RNN 的架构，包含三个循环模块，能够在语音识别和自然语言处理等任务中取得良好的效果。'
- en: '**Tiny Darknet**: Consists of another image classifier, but this time, the
    generated model is much lighter. This network obtains similar results to Darknet,
    but the model weight is only 4 MB.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tiny Darknet**：由另一个图像分类器组成，但这次生成的模型要轻得多。该网络获得与 Darknet 类似的结果，但模型大小仅为 4 MB。'
- en: Note
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'Apart from the preceding, Darknet has some other applications as well. You
    can get more information about the framework by heading to its website: [https://pjreddie.com/darknet/](https://pjreddie.com/darknet/).'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了前面提到的，Darknet 还有其他一些应用。您可以通过访问其网站 [https://pjreddie.com/darknet/](https://pjreddie.com/darknet/)
    获取更多关于该框架的信息。
- en: Basic Installation of Darknet
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Darknet 的基本安装
- en: The Darknet basic installation won't let you use the entire YOLO power, but
    it will be enough to check how it works and make your first few object detection
    predictions. It won't let you use GPU computation to make real-time predictions.
    For more complex tasks, go to the next section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Darknet 的基础安装不会让你使用 YOLO 的全部功能，但足以检查其工作原理并进行第一次对象检测预测。它不会让你使用 GPU 进行实时预测。对于更复杂的任务，请参阅下一部分。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For detailed steps regarding the basic and advanced installation of Darknet,
    refer to the preface, page vii.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Darknet 的基础和高级安装的详细步骤，请参阅前言，第 vii 页。
- en: YOLO
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YOLO
- en: YOLO is a real-time object detection system based on deep learning and is included
    in the Darknet framework. Its name comes from the acronym *You Only Look Once*,
    which references to how fast YOLO can work.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: YOLO 是一个基于深度学习的实时对象检测系统，包含在 Darknet 框架中。其名称来源于缩写 *You Only Look Once*，指的是 YOLO
    的处理速度之快。
- en: 'On the website ([https://pjreddie.com/darknet/yolo/](https://pjreddie.com/darknet/yolo/)),
    the author has added an image where this system is compared to others with the
    same purpose:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站上（[https://pjreddie.com/darknet/yolo/](https://pjreddie.com/darknet/yolo/)），作者添加了一张图像，在其中将该系统与其他具有相同目的的系统进行了比较：
- en: '![Figure 9.1: A comparison of object detection systems](img/C13550_09_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1：对象检测系统的比较](img/C13550_09_01.jpg)'
- en: 'Figure 9.1: A comparison of object detection systems'
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.1：对象检测系统的比较
- en: In the preceding graphic, the **y** axis represents the **mAP** (mean Average
    Precision), and the **x** axis represents the time in milliseconds. So, you can
    see that YOLO achieves a higher mAP in lesser time than the other systems.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，**y** 轴表示 **mAP**（平均精度），**x** 轴表示时间（毫秒）。因此，你可以看到，YOLO 在更短时间内达到了比其他系统更高的
    mAP。
- en: It is also important to understand how YOLO works. It uses a neural network,
    which is applied to the entire image and splits it into different parts, predicting
    the bounding boxes. These bounding boxes are similar to rectangles marking off
    certain objects, which will be identified later in the process. YOLO is fast,
    because it is able to make predictions with only an evaluation of the neural network,
    while other recognition systems need several evaluations.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，理解 YOLO 的工作原理也很重要。它使用一个神经网络，应用于整张图像，并将图像分割成不同的部分，预测边界框。这些边界框类似于矩形，用来标示出某些物体，后续过程将对其进行识别。YOLO
    之所以快速，是因为它只需要对神经网络进行一次评估就能进行预测，而其他识别系统需要多次评估。
- en: 'The mentioned network has 53 convolutional layers, alternating 3x3 and 1x1
    layers. Here''s an image of the architecture extracted from a YOLO author''s paper
    ([https://pjreddie.com/media/files/papers/YOLOv3.pdf](https://pjreddie.com/media/files/papers/YOLOv3.pdf)):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述网络具有 53 层卷积层，交替使用 3x3 和 1x1 的层。以下是从 YOLO 作者论文中提取的架构图（[https://pjreddie.com/media/files/papers/YOLOv3.pdf](https://pjreddie.com/media/files/papers/YOLOv3.pdf)）：
- en: '![Figure 9.2: The YOLO architecture](img/C13550_09_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2：YOLO 架构](img/C13550_09_02.jpg)'
- en: 'Figure 9.2: The YOLO architecture'
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.2：YOLO 架构
- en: First Steps in Image Classification with YOLO
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 YOLO 进行图像分类的第一步
- en: 'In this section, we are going to make our first predictions with YOLO. You
    are required to complete the basic installation. Let''s start recognizing objects
    in a single image:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将进行第一次 YOLO 预测。你需要完成基本安装。让我们开始识别单张图像中的物体：
- en: 'We are going to use a pretrained model in order to avoid the training process,
    so the first step is to download the network weights in the Darknet directory:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个预训练模型以避免训练过程，所以第一步是下载 Darknet 目录中的网络权重：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, we are going to make predictions with YOLO. In this first example,
    we are trying to recognize a single object, a dog. This is the sample image we
    are using:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将使用 YOLO 进行预测。在这个第一个示例中，我们尝试识别一个单一物体，一只狗。这是我们使用的样本图像：
- en: '![Figure 9.3: Sample image to predict](img/C13550_09_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：要预测的样本图像](img/C13550_09_03.jpg)'
- en: 'Figure 9.3: Sample image to predict'
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.3：要预测的样本图像
- en: 'Save this image as a .jpg file in the Darknet directory and run YOLO on it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将此图像保存为 .jpg 文件，并在 Darknet 目录中运行 YOLO：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the execution is finished, you should see an output like the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行完成后，你应该会看到类似以下的输出：
- en: '![Figure 9.4: The predicted output](img/C13550_09_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4：预测输出](img/C13550_09_04.jpg)'
- en: 'Figure 9.4: The predicted output'
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.4：预测输出
- en: 'As you can see, YOLO detects that there''s a dog in the image with 100% accuracy.
    It also generates a new file named `predictions.jpg`, where it is possible to
    see the location of the dog in the image. You can open it from the Darknet directory:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，YOLO 以 100% 准确度检测到图像中的狗。它还生成了一个名为 `predictions.jpg` 的新文件，在该文件中可以看到狗在图像中的位置。你可以从
    Darknet 目录中打开它：
- en: '![Figure 9.5: Recognized objects in the image](img/Image47221.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5：图像中的识别物体](img/Image47221.jpg)'
- en: 'Figure 9.5: Recognized objects in the image'
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.5：图像中的识别物体
- en: 'Another possibility when using YOLO is to make predictions for several images
    with a single execution. To do this, you must enter the same command as before,
    but this time do not enter the image path:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 YOLO 的另一种可能性是通过一次执行对多张图像进行预测。为此，你需要输入与之前相同的命令，但这次不要输入图像路径：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this case, you will see the following output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你将看到以下输出：
- en: '![](img/C13550_09_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C13550_09_06.jpg)'
- en: 'Figure 9.6: The prediction command output'
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.6：预测命令输出
- en: 'As you can see, it is asking you to enter an image. You could enter, for instance,
    the same image as before by typing `dog.jpg`. You''ll then be asked to enter another
    image path. This way, you can make predictions for all the images you want. This
    could be an example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它要求你输入一张图像。例如，你可以通过输入 `dog.jpg` 来使用之前的图像。然后，它会要求你输入另一张图像的路径。这样，你可以对所有想要预测的图像进行预测。这可能是一个示例：
- en: '![Figure 9.7: The output after image prediction](img/C13550_09_07.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7：图像预测后的输出](img/C13550_09_07.jpg)'
- en: 'Figure 9.7: The output after image prediction'
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.7：图像预测后的输出
- en: 'If you do so, you will obtain this image:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你这样做，你将得到这张图像：
- en: '![Figure 9.8: Image prediction](img/C13550_09_08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.8：图像预测](img/C13550_09_08.jpg)'
- en: 'Figure 9.8: Image prediction'
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.8：图像预测
- en: There's one more interesting command to know when working with YOLO. It can
    be used to modify the detection threshold.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 YOLO 时，还有一个有趣的命令需要了解。它可以用来修改检测阈值。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The detection threshold is an accuracy limit to consider if a prediction is
    incorrect. For example, if you set your threshold to 0.75, objects detected with
    a lower accuracy won't be considered as a correct prediction.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 检测阈值是判断预测是否正确的准确度限制。例如，如果你将阈值设置为 0.75，那么准确度低于此值的物体将不会被视为正确预测。
- en: 'By default, YOLO includes an object in its output when it is predicted with
    an accuracy of 0.25 or higher. You can change the threshold value using the last
    flag of the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，YOLO 会将预测准确度为 0.25 或更高的物体包括在输出中。你可以使用以下命令的最后一个标志来更改阈值：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you may suppose, the preceding command sets the threshold to 0.5\. Let''s
    look at a practical example of this. Follow these steps to test the functioning
    of the threshold modification:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，前面的命令将阈值设置为 0.5。我们来看看一个实际的示例。按照以下步骤来测试阈值修改的功能：
- en: 'Make predictions for images until you find one where an object is predicted
    with less than 100% accuracy. We are going to use this as an example, where the
    dog is recognized with 60% accuracy:![Figure 9.9: Example image with less than
    100% accuracy](img/C13550_09_09.jpg)'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对图像进行预测，直到你找到一个预测准确度低于 100% 的图像。我们将使用这个示例，在该示例中，狗的识别准确度为 60%：![图 9.9：准确度低于 100%
    的示例图像](img/C13550_09_09.jpg)
- en: 'Figure 9.9: Example image with less than 100% accuracy'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.9：准确率低于 100% 的示例图像
- en: 'Now, use the `predict` command modifying the detection threshold. As the dog
    is detected with 60% accuracy, if we change the threshold to 70%, no object should
    be detected:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 `predict` 命令修改检测阈值。由于狗的检测准确度为 60%，如果我们将阈值改为 70%，则不应检测到任何物体：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we check the `predictions` file, we can confirm that the dog was not detected.
    Hence, you can see how threshold plays an important role in recognition as well:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们检查 `predictions` 文件，就可以确认狗没有被检测到。因此，你可以看到阈值在识别中的重要作用：
- en: '![Figure 9.10: The final prediction with the modified threshold](img/C13550_09_10.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.10：修改阈值后的最终预测](img/C13550_09_10.jpg)'
- en: 'Figure 9.10: The final prediction with the modified threshold'
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.10：修改阈值后的最终预测
- en: YOLO on a Webcam
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: YOLO 在网络摄像头上
- en: 'Once you have made your first predictions with YOLO, it''s time to try a more
    interesting feature of this system. You''re going to detect your own real objects
    by connecting YOLO to your personal webcam. To do this, you must complete the
    advanced installation because it needs a GPU and OpenCV:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你用 YOLO 做出了第一次预测，接下来是尝试这个系统的一个更有趣的功能。你将通过将 YOLO 连接到个人网络摄像头来检测你自己的真实物体。为此，你必须完成高级安装，因为它需要
    GPU 和 OpenCV：
- en: Make sure your webcam is connected and can be detected by your system.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的网络摄像头已连接并且能被系统检测到。
- en: 'Enter the following command in the Darknet directory:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Darknet 目录下输入以下命令：
- en: '[PRE5]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Try to recognize an object in your environment; for example, we have detected
    the books on our shelves:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试识别环境中的物体；例如，我们已在书架上检测到书籍：
- en: '![Figure 9.11: Books recognized using a webcam](img/C13550_09_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11：使用网络摄像头识别的书籍](img/C13550_09_11.jpg)'
- en: 'Figure 9.11: Books recognized using a webcam'
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.11：使用网络摄像头识别的书籍
- en: 'Exercise 28: Programming with YOLO'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 28：使用 YOLO 编程
- en: 'In this exercise, we are going to see how to make predictions with YOLO using
    Python. We will create a dataset and check how many images containing a certain
    object are present in the dataset. To build the dataset, check the following images:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们将学习如何使用 YOLO 和 Python 进行预测。我们将创建一个数据集，并检查数据集中包含某个特定物体的图像数量。要构建数据集，请查看以下图像：
- en: '![Figure 9.12: Images contained in the dataset](img/C13550_09_12.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12：数据集中包含的图像](img/C13550_09_12.jpg)'
- en: 'Figure 9.12: Images contained in the dataset'
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.12：数据集中包含的图像
- en: As you can see, it is a very simple dataset containing animals and landscape
    images. The Python program you are going to implement will have to obtain the
    number of images in which dogs appear.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这是一个非常简单的数据集，包含了动物和景观图像。你将要实现的 Python 程序需要获取包含狗的图像数量。
- en: 'We will begin by cloning Darknet files from GitHub:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 GitHub 克隆 Darknet 文件开始：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Create a new folder named `dataset` in the Darknet directory.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Darknet 目录下创建一个名为 `dataset` 的新文件夹。
- en: Place these images or others of your choice inside the new folder.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些图像或你选择的其他图像放入新文件夹中。
- en: Note
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The images can be found in the Chapter 9/exercise28/dataset/ folder on GitHub
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图像可以在 GitHub 的 Chapter 9/exercise28/dataset/ 文件夹中找到
- en: 'URL: [https://github.com/PacktPublishing/Artificial-Vision-and-Language-Processing-for-Robotics/tree/master/Lesson09/Exercise28/dataset](https://github.com/PacktPublishing/Artificial-Vision-and-Language-Processing-for-Robotics/tree/master/Lesson09/Exercise28/dataset)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'URL: [https://github.com/PacktPublishing/Artificial-Vision-and-Language-Processing-for-Robotics/tree/master/Lesson09/Exercise28/dataset](https://github.com/PacktPublishing/Artificial-Vision-and-Language-Processing-for-Robotics/tree/master/Lesson09/Exercise28/dataset)'
- en: Create a Python file, `excercise1.py`, and start the implementation.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Python 文件 `excercise1.py`，并开始实现。
- en: 'Import Python itself and the required libraries:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导入 Python 及所需的库：
- en: '[PRE7]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Tell the system where to find the Darknet framework and then import it. If
    you have created a file inside the Darknet directory, you can do this as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉系统在哪里可以找到 Darknet 框架，然后导入它。如果你已经在 Darknet 目录下创建了文件，可以按以下方式操作：
- en: Note
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE8]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Tell Darknet which GPU to use for the program execution:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉 Darknet 使用哪个 GPU 执行程序：
- en: Note
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE9]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Configure the network you are going to use for making your predictions. In
    this case, we are using the same configuration as before:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你将用来进行预测的网络。在这种情况下，我们使用的是与之前相同的配置：
- en: '[PRE10]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Pay attention to the paths entered here; they may change if your Python file
    is not inside Darknet's folder.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意输入的路径；如果你的 Python 文件不在 Darknet 文件夹内，路径可能会发生变化。
- en: 'Declare the variables to count the total number of images and the number of
    images containing dogs:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明变量以计算图像的总数和包含狗的图像数量：
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Implement a loop for iterating over the files in the dataset:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个循环，遍历数据集中的文件：
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Use Darknet''s `detect` method to recognize the objects of each image:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Darknet 的 `detect` 方法识别每张图像中的物体：
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Iterate over the recognized objects and check whether any of them are dogs.
    If they are, add one to the dog images counter and stop checking the rest of the
    objects. Add one to the total counter too:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历已识别的物体，检查它们中是否有狗。如果有，将狗图像计数器加一，并停止检查其余物体。总计数器也加一：
- en: Note
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE14]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, print the obtained results. For example:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打印得到的结果。例如：
- en: '[PRE15]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE16]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Here the `cd ..` command switches to the directory where your file is located
    and downloads the weights and run the script.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的 `cd ..` 命令切换到文件所在的目录，并下载权重文件和运行脚本。
- en: For example `cd <your_script_location>`
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`cd <your_script_location>`
- en: 'You can test whether it works as expected by running the script. If you used
    the proposed dataset, the output should be as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行脚本来测试它是否按预期工作。如果你使用了建议的数据集，输出应该如下所示：
- en: '![Figure 9.13: Exercise 1 final output](img/C13550_09_13.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.13：练习1最终输出](img/C13550_09_13.jpg)'
- en: 'Figure 9.13: Exercise 28 final output'
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.13：练习28最终输出
- en: ROS Integration
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ROS 集成
- en: Now, you have already learned how to use YOLO in a common Python program. It's
    time to see how to integrate it with Robot Operating System (ROS) so that you
    can use it in real robotics problems. You can combine it with any robot camera
    to allow the robot to detect and recognize objects, achieving the goal of artificial
    vision. After the completion of the following exercise, you will be able to do
    it by yourself.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经学会了如何在常见的Python程序中使用YOLO。接下来，看看如何将其与机器人操作系统（ROS）集成，以便你可以在实际的机器人问题中使用它。你可以将它与任何机器人相机结合，允许机器人检测和识别物体，实现人工视觉的目标。在完成以下练习后，你将能够独立完成它。
- en: 'Exercise 29: ROS and YOLO Integration'
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习29：ROS与YOLO集成
- en: 'This exercise consists of a new ROS node implementation that uses YOLO to recognize
    objects. We will test it using TurtleBot, the ROS simulator we used in *Chapter
    6, Robot Operating System (ROS)*, but it will be easily adaptable for any robot
    with a camera. These are the steps that must be followed:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习包括一个新的ROS节点实现，该节点使用YOLO识别物体。我们将使用TurtleBot进行测试，这是我们在*第6章 机器人操作系统（ROS）*中使用的ROS模拟器，但它将很容易适配任何带有相机的机器人。以下是必须遵循的步骤：
- en: 'Create a new package in your catkin workspace to contain the integration node.
    Do it with this command to include the correct dependencies:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的catkin工作空间中创建一个新的包来包含集成节点。使用以下命令来包含正确的依赖项：
- en: '[PRE17]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Switch to the package folder and create a new `scripts` directory. Then, create
    the Python file and make it executable:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到包文件夹并创建一个新的`scripts`目录。然后，创建Python文件并使其可执行：
- en: '[PRE18]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Begin with the implementation.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从实现开始。
- en: 'Import the libraries you will use for node implementation. You will need `sys`
    and `os` to import Darknet from its path, `OpenCV` to process images, and `Image`
    from `sensor_msgs` to publish them:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导入你将用于节点实现的库。你需要`sys`和`os`来从路径中导入Darknet，`OpenCV`来处理图像，以及从`sensor_msgs`导入`Image`来发布它们：
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Tell the system where to find Darknet:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 告诉系统在哪里找到Darknet：
- en: '[PRE20]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE21]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the class where the node logic will be coded and its constructor:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个类，在其中编写节点逻辑和其构造函数：
- en: '[PRE22]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Code the constructor:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编写构造函数：
- en: 'Now, we will initialize the node:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将初始化节点：
- en: '[PRE23]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a bridge object:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个桥接对象：
- en: '[PRE24]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Subscribe to the camera topic:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 订阅相机话题：
- en: '[PRE25]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the variable to store the obtained images:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个变量来存储获取到的图像：
- en: '[PRE26]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define the corresponding paths for YOLO configuration:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为YOLO配置定义相应的路径：
- en: '[PRE27]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE28]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Define the name that will be used for storing the images:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义用于存储图像的名称：
- en: '[PRE29]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Implement the callback function to obtain the images with the OpenCV format:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现回调函数以获取OpenCV格式的图像：
- en: '[PRE30]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a function for making predictions over the obtained images. The node
    must keep making predictions until the user stops the execution. This will be
    done by storing the image to the disk and making predictions over it using the
    detection function. Finally, the results will be constantly printed:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个函数，用于对获取的图像进行预测。节点必须不断进行预测，直到用户停止执行。这将通过将图像存储到磁盘并使用检测函数进行预测来完成。最后，结果将持续打印：
- en: '[PRE31]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Implement the main program entry. Here, you will have to initialize Darknet,
    make an instance of the created class, and call its main method:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现主程序入口。在这里，你需要初始化Darknet，创建已创建类的实例，并调用其主方法：
- en: '[PRE32]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Test whether the node works as it should.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试节点是否按预期工作。
- en: 'Open a terminal and start ROS:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开终端并启动ROS：
- en: '[PRE33]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open another terminal and run Gazebo with TurtleBot:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开另一个终端并运行Gazebo与TurtleBot：
- en: '[PRE34]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Insert YOLO recognizable objects and make TurtleBot **look at** them. You can
    insert new objects by clicking on the **insert** button located in the upper-left
    corner. You could insert, for example, a bowl:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 插入YOLO可识别的物体并让TurtleBot**查看**它们。你可以通过点击位于左上角的**插入**按钮插入新物体。例如，你可以插入一个碗：
- en: '![Figure 9.14: Inserted bowl in Gazebo](img/C13550_09_14.jpg)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 9.14：在Gazebo中插入的碗](img/C13550_09_14.jpg)'
- en: 'Figure 9.14: Inserted bowl in Gazebo'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.14：在Gazebo中插入的碗
- en: 'Open a new terminal and run the created node:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端并运行创建的节点：
- en: '[PRE35]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you used a bowl, check that you get an output like the one that follows:'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用了一个碗，检查你是否得到了如下输出：
- en: '![Figure 9.15: Object predicted by the node](img/C13550_09_15.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图9.15：节点预测的物体](img/C13550_09_15.jpg)'
- en: 'Figure 9.15: Object predicted by the node'
  id: totrans-177
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.15：节点预测的物体
- en: 'Activity 9: A Robotic Security Guard'
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动9：机器人安全守卫
- en: 'Let''s suppose a scenario similar to the one in the *Chapter 6, Activity 6,
    Simulator and Sensors* activity: You are working for a robotics company that has
    recently got a new client, a shopping center. The client wants your company to
    provide some robots for the shopping center at night to avoid robbery. These robots
    must consider any person a thief and alert the client if they detect one.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个场景，类似于*第6章，第6活动，模拟器与传感器*活动：你在一家机器人公司工作，该公司最近获得了一个新客户——一家购物中心。客户希望你的公司为购物中心提供一些机器人，晚上防止盗窃。这些机器人必须将任何人视为小偷，如果检测到小偷，则需要警告客户。
- en: 'Use Gazebo to give the desired functionality to TurtleBot or any other simulator.
    You should follow these steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Gazebo为TurtleBot或其他模拟器提供所需的功能。你应该按照以下步骤进行：
- en: Create a catkin package for storing the required nodes.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为存储所需节点创建一个catkin包。
- en: Now, implement the first node. It should obtain the images from the robot camera
    and run YOLO on them.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，实现第一个节点。它应该从机器人摄像头获取图像，并对其运行YOLO。
- en: Next, it should publish the list of detected objects in string format.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它应该以字符串格式发布检测到的物体列表。
- en: Implement the second node. It should subscribe to the topic where the detected
    objects are being published and obtain them. Finally, it should check whether
    a person is one of these objects and print an alert message if it is.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现第二个节点。它应该订阅发布检测到的物体的主题，并获取它们。最后，它应该检查这些物体中是否有一个人，并在是的话打印警告信息。
- en: Run both nodes simultaneously.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时运行两个节点。
- en: Note
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Although it's not the main goal of this activity, it would be interesting to
    combine the execution of these nodes with another one to move the robot (you can
    use the one implemented in *Chapter 6, Robot Operating System (ROS)*).
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然这不是本活动的主要目标，但将这些节点的执行与另一个节点（例如用于移动机器人的节点，可以使用*第6章，机器人操作系统（ROS）*中实现的节点）结合起来会很有趣。
- en: The solution of this activity can be found on page 330.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在第330页找到。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: We have now achieved the objective of this book and built an end-to-end application
    for a robot. This has only been an example application; however, you could use
    the techniques that you learned during this book to build other applications for
    robotics. In this chapter, you also learned how to install and work with Darknet
    and YOLO. You worked through evaluating objects using AI and integrating YOLO
    and ROS to enable your virtual robot to predict objects.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经达到了本书的目标，并为机器人构建了一个端到端的应用程序。这只是一个示例应用程序；然而，你可以使用在本书中学到的技术，构建其他机器人应用程序。在本章中，你还学习了如何安装和使用Darknet和YOLO。你学习了使用AI评估物体，并集成YOLO和ROS，使你的虚拟机器人能够预测物体。
- en: You have learned how to control the robot with natural language processing commands,
    along with studying various models in this book, such as Word2Vec, GloVe embedding
    techniques, and non-numeric data. After this, you worked with ROS and built a
    conversational agent to manage your virtual robot. You developed the skills needed
    to build a functional application that could integrate with ROS to extract useful
    information about your environment. You worked with tools that are not only useful
    for robotics; you can use artificial vision and language processing as well.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学习了如何使用自然语言处理命令控制机器人，并研究了本书中的各种模型，如Word2Vec、GloVe嵌入技术和非数值数据。在此之后，你还与ROS一起工作，并构建了一个对话代理来管理你的虚拟机器人。你开发了构建一个功能性应用所需的技能，能够与ROS集成，从你的环境中提取有用的信息。你还使用了不仅对机器人有用的工具；你也可以使用人工视觉和语言处理。
- en: We end this book by encouraging you to start your own robotics projects and
    practicing with the technologies you most enjoyed during the book. You can now
    compare different methods used to work with robots and explore computer vision,
    algorithms, and limits. Always remember that a robot is a machine that can possess
    the behavior you want it to.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的结尾，我们鼓励你开始自己的机器人项目，并且在本书中练习你最喜欢的技术。现在你可以比较不同的工作方法，并探索计算机视觉、算法和极限。始终记住，机器人是一种机器，它可以拥有你希望它具备的行为。
