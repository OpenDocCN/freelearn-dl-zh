- en: '*Chapter 10*: Exporting and Visualizing the Models'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：导出与可视化模型'
- en: In this chapter, we will see how to export and import our AutoKeras models.
    Once trained, we will also learn to visualize in a graphic way and in real time
    what is happening during the training of our models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何导出和导入我们的AutoKeras模型。训练完成后，我们还将学习如何以图形方式实时可视化模型训练过程中发生的事情。
- en: Once you have completed this chapter, you will be able to export and import
    your models to disk and you will have in your toolkit a powerful visualization
    tool that will help you to know what is happening during the training of your
    models.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将能够将模型导出和导入到磁盘，并且您将拥有一个强大的可视化工具，帮助您了解在模型训练过程中发生的情况。
- en: 'Specifically, in this chapter, we will cover these main points:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讲解以下要点：
- en: 'Exporting your models: How to save and load your models from disk'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出您的模型：如何从磁盘保存和加载模型
- en: 'Visualizing your models with TensordBoard: How to visualize your models in
    real time using this powerful tool'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TensorBoard可视化您的模型：如何使用这个强大的工具实时可视化您的模型
- en: Visualizing and comparing your models with ClearML
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ClearML可视化和比较您的模型
- en: Let's start with the first point, but first make sure, as usual, that we have
    all the requirements installed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一点开始，但首先像往常一样确保我们已经安装了所有的要求。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All coding examples in this book are available as Jupyter notebooks that can
    be downloaded from the website: [https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有编码示例均以Jupyter笔记本形式提供，可以从以下网站下载：[https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras)。
- en: As code cells can be executed, each notebook can be self-installable, adding
    a code snippet with the requirements you need. For this reason, at the beginning
    of each notebook, there is a code cell for environment setup, which installs AutoKeras
    and its dependencies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于代码单元可以执行，每个笔记本都可以自我安装，您只需添加包含所需要求的代码片段。因此，在每个笔记本的开始部分，都会有一个代码单元用于环境设置，安装AutoKeras及其依赖项。
- en: 'So, in order to run the coding examples, you only require a computer with Ubuntu
    Linux as the OS and can install the Jupyter notebook with the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了运行编码示例，您只需要一台运行Ubuntu Linux操作系统的计算机，并可以使用以下命令安装Jupyter notebook：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Alternatively, you can also run these notebooks using Google Colaboratory. In
    this instance, you will only require a web browser; refer to the *AutoKeras with
    Google Colaboratory* section in [*Chapter 2*](B16953_02_Final_PG_ePub.xhtml#_idTextAnchor029),
    *Getting Started with Autokeras*, for more details. Furthermore, in the main section,
    *Installing AutoKeras*, you will also find other installation options.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您也可以使用Google Colaboratory运行这些笔记本。在这种情况下，您只需要一个网页浏览器；有关详细信息，请参阅[*第2章*](B16953_02_Final_PG_ePub.xhtml#_idTextAnchor029)中的*AutoKeras与Google
    Colaboratory*部分，*AutoKeras入门*。此外，在主要章节*安装AutoKeras*中，您还可以找到其他安装选项。
- en: Now, let's put the concepts of the previous section into practice with a practical
    example.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个实际示例将上一节中的概念付诸实践。
- en: Exporting your models
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出模型
- en: The best model found by AutoKeras can be easily exported as a Keras model.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: AutoKeras找到的最佳模型可以轻松导出为Keras模型。
- en: 'When saving your models to disk, this can be done in two different formats:
    the TensorFlow SavedModel format, and the older Keras H5 format. The recommended
    format is SavedModel, and this is the option used by default when we call to `model.save()`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在将模型保存到磁盘时，可以选择两种不同的格式：TensorFlow SavedModel格式和较旧的Keras H5格式。推荐使用SavedModel格式，这是我们调用`model.save()`时的默认选项。
- en: How to save and load a model
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何保存和加载模型
- en: 'Let''s now see how to export and restore a model step by step:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们一步步来看如何导出和恢复模型：
- en: 'Export the model to a Keras model using the following code block:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块将模型导出为Keras模型：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, try to save to the TensorFlow format using the h5 format as backup as
    something is wrong:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，尝试使用h5格式作为备份保存为TensorFlow格式，因为出现了问题：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Reload the model, as shown in the following code block:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块重新加载模型：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The code is almost self-explanatory, but we are going to explain the loading
    function in a bit more detail. In this function, which is responsible for loading
    our model from disk into memory, we are passing the `ak.CUSTOM_OBJECTS` value
    as a `custom_objects` parameter. This indicates to the Keras function that the
    model we want to load has custom AutoKeras objects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 代码几乎不需要解释，但我们将详细说明加载功能。在这个函数中，负责将模型从磁盘加载到内存中，我们将 `ak.CUSTOM_OBJECTS` 作为 `custom_objects`
    参数传递。这告诉 Keras 函数我们要加载的模型具有自定义的 AutoKeras 对象。
- en: Once we know how to import and export our models, it is time to move on to the
    next section, where we will learn to visualize during the training process. This
    will help us to extract perspectives from the learning processes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道如何导入和导出模型，就该进入下一部分，在这一部分中，我们将学习在训练过程中进行可视化。这将帮助我们从学习过程提取观点。
- en: Visualizing your models with TensorBoard
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TensorBoard 可视化你的模型
- en: To develop efficient and successful models, you will need to know what is happening
    during your experiments so that you can react as soon as possible by correcting
    possible anomalous or unwanted results, such as overfitting and slow learning.
    This is where the concept of a tactile callback comes into play.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发高效且成功的模型，你需要了解实验过程中发生的事情，以便尽早反应，修正可能的异常或不想要的结果，例如过拟合和学习缓慢。这就是触觉回调概念发挥作用的地方。
- en: 'A callback is an object (a class instance that implements specific methods)
    that is passed to the model on the call to fit and that is called by the model
    at various points during training. You have access to all available data on the
    status of the model and its performance and, based on this, take measures including
    the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 回调是一个对象（实现特定方法的类实例），它在调用拟合时传递给模型，并且在训练过程中模型会在不同的时刻调用它。你可以访问模型状态和性能的所有可用数据，并根据这些数据采取以下措施：
- en: Interrupt training, because you have stopped learning or are overfitting
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中断训练，因为你已经停止学习或正在过拟合
- en: Save a model; in this way, the training could be resumed from the saved point
    in the future
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存模型；这样，训练可以从保存的点在未来恢复
- en: Record metrics, such as precision or loss
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录度量指标，例如精度或损失
- en: Alter its state, and modify its structure or hyperparameters, such as the learning
    rate
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改其状态，并修改其结构或超参数，例如学习率
- en: 'Here are some examples of the ways in which you can use callbacks:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用回调的一些示例：
- en: 'Model checkpoints: Save current model weights at different points during training.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型检查点：在训练过程中的不同点保存当前模型的权重。
- en: 'Early stop: Interrupt training when the loss of validation is no longer improving
    (and of course, saving the best model obtained during training).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前停止：当验证的损失不再改善时中断训练（并且当然保存训练过程中获得的最佳模型）。
- en: Dynamically adjust the value of certain parameters during training, such as
    the learning rate.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在训练过程中动态调整某些参数的值，例如学习率。
- en: Record training and validation metrics during training, or view representations
    learned by the model as they are updated.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在训练过程中记录训练和验证指标，或查看模型学习的表示方式，随着更新而变化。
- en: There are two especially useful callbacks for training, `EarlyStopping` and
    `ModelCheckpoint`. The first one serves to interrupt training once the observed
    metric has stopped improving for the number of times initially set. For example,
    this callback allows you to interrupt training as soon as you start overfitting,
    thereby avoiding having to retrain your model with fewer epochs. This callback
    is typically used in conjunction with `ModelCheckpoint`, which allows you to continuously
    save the model during training.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个特别有用的回调函数用于训练，`EarlyStopping` 和 `ModelCheckpoint`。第一个用于在观察到的指标停止改进时中断训练，直到初始设置的次数。例如，使用此回调可以在开始过拟合时中断训练，从而避免需要用更少的轮次重新训练模型。这个回调通常与
    `ModelCheckpoint` 一起使用，后者允许在训练过程中不断保存模型。
- en: '![Figure 10.1 – Example of how to train a model with callbacks'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – 使用回调训练模型的示例'
- en: '](img/B16953_10_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_10_01.jpg)'
- en: Figure 10.1 – Example of how to train a model with callbacks
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 使用回调训练模型的示例
- en: AutoKeras always saves the best model during training and uses `EarlyStopping`
    by default, setting a number of epochs that varies depending on the type of model
    we are training. However, this behavior can be customized through the callback's
    parameter of the `fit` function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: AutoKeras 会在训练过程中始终保存最好的模型，并默认使用 `EarlyStopping`，设定的 epoch 数量根据我们训练的模型类型而有所不同。不过，这种行为可以通过回调函数的
    `fit` 参数进行自定义。
- en: Using callbacks to log the model state
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用回调函数记录模型状态
- en: Callbacks that record metrics are essential for monitoring since they allow
    tools such as TensorBoard, which we will see here, to visualize in real time the
    learning progress of a model during its training.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 记录指标的回调函数对于监控至关重要，因为它们允许像 TensorBoard 这样的工具实时可视化模型在训练过程中的学习进展，正如我们在这里所看到的。
- en: 'So, in our case, we will set the callbacks to log the training progress with
    the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的案例中，我们将设置回调函数来记录训练进度，使用以下命令：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous code, we defined a log directory (`log_dir`) and created a callback
    to save the model checkpoints there, which means that AutoKeras will automatically
    save the metrics for each epoch in multiple log files in this folder. We have
    also activated the histograms (`histogram_freq=1`), so in the **Histograms** tab
    of TensorBoard, you can view the histograms of activation values in each layer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们定义了一个日志目录（`log_dir`），并创建了一个回调函数将模型检查点保存到该目录，这意味着 AutoKeras 会自动将每个
    epoch 的指标保存到该文件夹中的多个日志文件中。我们还激活了直方图（`histogram_freq=1`），因此在 TensorBoard 的**直方图**标签中，你可以查看每一层的激活值的直方图。
- en: In the next section, we will visualize the logs with TensorBoard, a web application
    for viewing information regarding TensorFlow models. Since AutoKeras has TensorFlow
    under the hood, we can use this tool in an easy way to visualize our models.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 TensorBoard 可视化日志，它是一个用于查看 TensorFlow 模型信息的 web 应用。由于 AutoKeras
    是基于 TensorFlow 的，我们可以通过这种简单方式使用该工具来可视化我们的模型。
- en: Setting up and loading TensorBoard
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置和加载 TensorBoard
- en: TensorBoard allows us to visualize different metrics in real time, such as loss
    and precision, as well as render the model graph (by layers and operations), along
    with histograms of weights, biases, or other tensors.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard 允许我们实时可视化不同的指标，例如损失和精度，同时渲染模型图（按层和操作分层），并显示权重、偏置或其他张量的直方图。
- en: TensorBoard can be used directly in the Jupyter notebook and in Colab. This
    is done by loading the TensorBoard extension into the notebook. This is the approach
    we will use in this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard 可以直接在 Jupyter notebook 和 Colab 中使用。通过在 notebook 中加载 TensorBoard
    扩展，可以实现这一功能。这是我们在本章中将采用的方法。
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have installed Jupyter and TensorBoard on the same virtualenv, you should
    be good to go. If you are using a more complicated setup, such as a global installation
    of Jupyter and kernels for different Conda/virtualenv environments, you need to
    make sure that the TensorBoard binary is in your `PATH` within the context of
    the Jupyter notebook.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在同一个虚拟环境中安装了 Jupyter 和 TensorBoard，那么应该可以直接使用。如果你使用的是更复杂的设置，例如全局安装了 Jupyter
    并为不同的 Conda/virtualenv 环境配置了内核，那么你需要确保 TensorBoard 二进制文件在 Jupyter notebook 的上下文中已经添加到
    `PATH`。
- en: 'First, we have to set `callbacks`, as we explained in the previous section,
    to record the training progress in the `logs` directory:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要设置 `callbacks`，正如在上一节中解释的那样，记录训练进度到 `logs` 目录：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we pass `callbacks` to the training function:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将 `callbacks` 传递给训练函数：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the training is done, we are ready to load the `tensorboard` extension
    to visualize the results:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练完成，我们就可以加载 `tensorboard` 扩展来可视化结果：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous lines of code loads the TensorBoard dashboard, feeding it with
    the model `logs` directory:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码行加载了 TensorBoard 仪表板，并将模型的 `logs` 目录作为输入：
- en: '![Figure 10.2 – TensorBoard showing model training results'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2 – TensorBoard 显示模型训练结果'
- en: '](img/B16953_10_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_10_02.jpg)'
- en: Figure 10.2 – TensorBoard showing model training results
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – TensorBoard 显示模型训练结果
- en: In the previous screenshot, there are two graphs each with four different lines
    representing the learning progress of two candidate models.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的截图中，有两个图形，每个图形上有四条不同的线，表示两个候选模型的学习进度。
- en: In the first graph, the two highest lines show the epoch accuracy on the training
    and validation set, respectively, while the lower lines show the accuracy of the
    epochs for the training and validation datasets of the other model.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个图中，两个最高的曲线分别显示了训练集和验证集的 epoch 精度，而较低的曲线则显示了另一个模型在训练集和验证集上的精度。
- en: The same happens in the second graph, but in this case, it represents the loss
    instead of the accuracy.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个图表中也发生了类似的情况，但在这种情况下，它表示的是损失值，而不是准确率。
- en: 'We can also see the elements of the model in the **GRAPHS** tab. The **GRAPHS**
    tab displays an interactive low-level TensorFlow graph display of the features
    used by your AutoKeras model:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在 **GRAPHS** 标签页中看到模型的各个元素。**GRAPHS** 标签页显示了一个交互式低级 TensorFlow 图，展示了你的
    AutoKeras 模型使用的特征：
- en: '![Figure 10.3 – TensorBoard showing the model graph'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – TensorBoard 显示模型图](img/B16953_10_03.jpg)'
- en: '](img/B16953_10_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_10_03.jpg)'
- en: Figure 10.3 – TensorBoard showing the model graph
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – TensorBoard 显示模型图
- en: In the preceding screenshot, we can see part of the model graph with its different
    layers and operations. As you can see, the model is much more complex than you
    might expect. When you define the classifier, it's only three lines of code, but
    under the hood, AutoKeras builds a fairly complex graph structure to make it work.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到模型图的一部分，以及它的不同层和操作。正如你所看到的，模型比你预期的要复杂得多。当你定义分类器时，代码只有三行，但在幕后，AutoKeras
    构建了一个相当复杂的图结构来使其工作。
- en: 'Here, we can also visualize the weight/bias distributions in the different
    layers:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还可以可视化不同层中的权重/偏差分布：
- en: '![Figure 10.4 – TensorBoard showing the distribution of the model layers'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – TensorBoard 显示模型层的分布](img/B16953_10_04.jpg)'
- en: '](img/B16953_10_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_10_04.jpg)'
- en: Figure 10.4 – TensorBoard showing the distribution of the model layers
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – TensorBoard 显示模型层的分布
- en: 'There are many more options available to us that we will not explain here.
    TensorBoard is a very powerful and complete tool, and its domain is beyond the
    scope of this book. The following URL is a very good starting point: [https://www.tensorflow.org/tensorboard/get_started](https://www.tensorflow.org/tensorboard/get_started).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他可用的选项，我们在此不做详细解释。TensorBoard 是一个非常强大且完整的工具，它的功能范围超出了本书的讨论。以下网址是一个很好的起点：[https://www.tensorflow.org/tensorboard/get_started](https://www.tensorflow.org/tensorboard/get_started)。
- en: Let's see now in the next section how we can share our experiments with the
    world.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在下一节中看看如何将我们的实验分享给全世界。
- en: Sharing your ML experiment results with TensorBoard.dev
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 TensorBoard.dev 分享你的 ML 实验结果
- en: TensorBoard.dev is a free public service that allows you to upload your TensorBoard
    records and get a permanent link that can be shared with whoever you want, while
    also being used in your academic articles, blog posts, social media, and so on.
    This can allow better reproducibility and collaboration.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard.dev 是一个免费的公共服务，允许你上传 TensorBoard 记录并获得一个永久链接，可以与任何人分享，同时也可以用于你的学术文章、博客、社交媒体等。这可以提高实验的可重复性和协作性。
- en: 'You can use TensorBoard.dev simply by running the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令简单地使用 TensorBoard.dev：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous command uploads to TensorBoard.dev the model `logs` directory:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令会将模型的 `logs` 目录上传到 TensorBoard.dev：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, clicking on the link will open a browser in which we will see the TensorBoard
    panel on the TensorBoard.dev website, as shown here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击链接将会打开一个浏览器，在其中我们可以看到 TensorBoard 面板，网址显示为 TensorBoard.dev 网站，如下所示：
- en: '![Figure 10.5 – Model training results shared on TensorBoard.dev](img/B16953_10_05.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 在 TensorBoard.dev 上分享的模型训练结果](img/B16953_10_05.jpg)'
- en: Figure 10.5 – Model training results shared on TensorBoard.dev
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 在 TensorBoard.dev 上分享的模型训练结果
- en: As we have seen, TensorBoard is a very powerful tool for monitoring your models,
    but if you need to track your experiments, as well as compare and share them with
    other teams, there is an AutoKeras extension called ClearML that is specially
    designed for monitoring and tracking experiments, allowing access to TensorBoard
    logs, and complementing it with many more added functions. Let's take a look at
    this in the next section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，TensorBoard 是一个非常强大的工具，用于监控你的模型，但如果你需要追踪实验结果，并与其他团队进行比较和共享，那么有一个名为
    ClearML 的 AutoKeras 扩展专门用于监控和追踪实验，它允许访问 TensorBoard 日志，并为其补充了许多额外的功能。我们将在下一节中详细了解这一点。
- en: Visualizing and comparing your models with ClearML
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ClearML 可视化和比较你的模型
- en: ClearML (formerly Trains) is a complete open source ML/DL experimentation solution
    that automatically tracks everything you need to document your work, visualize
    results, and reproduce, adjust, and compare experiments using an intuitive web
    interface.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ClearML（前身为 Trains）是一个完整的开源 ML/DL 实验解决方案，它会自动跟踪你需要的所有内容，帮助你记录工作、可视化结果，并通过直观的
    Web 界面重现、调整和比较实验。
- en: 'ClearML allows you to perform the following tasks:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ClearML 允许你执行以下任务：
- en: Visualize experiment results in the ClearML Web UI.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 ClearML Web UI 中可视化实验结果。
- en: Track and upload models.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪并上传模型。
- en: Track model performance and create tracking leaderboards.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪模型性能并创建跟踪排行榜。
- en: Rerun experiments, reproduce experiments on any target machine, and tune experiments.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新运行实验，在任何目标机器上重现实验，并调整实验。
- en: Compare experiments.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较实验。
- en: To use it in your AutoKeras project, you just have to initialize a ClearML Task
    in your code, and ClearML automatically records scalars, graphs, and images reported
    to TensorBoard, Matplotlib, Plotly, and Seaborn, as well as all the other automatic
    logs and explicit reports that you add to your code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的 AutoKeras 项目中使用它，你只需要在代码中初始化一个 ClearML 任务，ClearML 会自动记录报告给 TensorBoard、Matplotlib、Plotly
    和 Seaborn 的标量、图形和图像，以及你添加到代码中的所有其他自动日志和显式报告。
- en: Adding ClearML to code
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 ClearML 添加到代码中
- en: 'Just add these two lines of code to your project:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将这两行代码添加到你的项目中：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the code runs, it initializes a Task in ClearML Server. A hyperlink to
    the experiment''s log is output to the console:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码运行时，它会在 ClearML 服务器中初始化一个任务，并在控制台输出指向实验日志的超链接：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ClearML will inspect the AutoKeras training process and look for TensorBoard
    callbacks, as well as any kind of output, including logs, metrics, images, and
    so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ClearML 会检查 AutoKeras 的训练过程，查找 TensorBoard 回调函数，以及任何类型的输出，包括日志、指标、图像等。
- en: 'In the generated experiment link, you can see in real time the dashboards with
    different graphics related to the models autogenerated by AutoKeras. This is done
    during training, and their accuracy, their performance in the training and evaluation
    datasets, console outputs, and many more metrics can also be seen:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的实验链接中，你可以实时查看与 AutoKeras 自动生成的模型相关的仪表板，这些仪表板包含不同的图表。这些图表会在训练过程中生成，并且可以看到它们的准确性、在训练和评估数据集上的表现、控制台输出以及更多的指标：
- en: '![Figure 10.6 – ClearML dashboard showing TensorBoard metrics](img/B16953_10_06.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – ClearML 仪表板显示 TensorBoard 指标](img/B16953_10_06.jpg)'
- en: Figure 10.6 – ClearML dashboard showing TensorBoard metrics
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – ClearML 仪表板显示 TensorBoard 指标
- en: 'In the previous screenshot, we can see how the precision and loss of our models
    evolves throughout the epochs and, in the next one, we can see the distributions
    of the weights in one of the convolutional layers:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的截图中，我们可以看到我们的模型在各个训练轮次中的精度和损失变化，在接下来的截图中，我们可以看到其中一个卷积层的权重分布：
- en: '![Figure 10.7 – ClearML dashboard showing some model layer distributions](img/B16953_10_07.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – ClearML 仪表板显示一些模型层分布](img/B16953_10_07.jpg)'
- en: Figure 10.7 – ClearML dashboard showing some model layer distributions
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – ClearML 仪表板显示一些模型层分布
- en: In the previous screenshots, we can see ClearML panels similar to those shown
    previously in the TensorBoard dashboards.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的截图中，我们可以看到类似于之前 TensorBoard 仪表板中的 ClearML 面板。
- en: AutoKeras will generate multiple models during the training process, so let's
    see how ClearML shows us each model's results at the same time.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: AutoKeras 在训练过程中会生成多个模型，所以让我们看看 ClearML 如何同时展示每个模型的结果。
- en: Comparing experiments
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较实验
- en: 'With this tool, you can also compare experiments and contrast results in a
    powerful way. There are many comparison options, such as comparing model artifacts,
    hyperparameters, data series graphs, and debug samples for each iteration. It
    also allows you to browse samples with a viewer (for images and video) and a player
    (for audio):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此工具，你还可以强有力地比较实验并对比结果。有许多比较选项，例如比较模型工件、超参数、数据系列图和每次迭代的调试样本。它还允许你使用查看器（用于图像和视频）和播放器（用于音频）浏览样本：
- en: '![Figure 10.8 – ClearML dashboard comparing the training results of two models'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.8 – ClearML 仪表板比较两个模型的训练结果](img/B16953_10_08.jpg)'
- en: '](img/B16953_10_08.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_10_08.jpg)'
- en: Figure 10.8 – ClearML dashboard comparing the training results of two models
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – ClearML 仪表板比较两个模型的训练结果
- en: Detailed information on these options and many more can be found in the ClearML
    Web UI documentation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项的详细信息以及更多内容可以在 ClearML Web UI 文档中找到。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to define Keras callbacks to monitor your
    models during training, how to use TensorBoard to view histograms, model graphs,
    and many more metrics besides, and how to monitor and track your experiments using
    the ClearML extension.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何定义 Keras 回调函数以在训练过程中监控模型，如何使用 TensorBoard 查看直方图、模型图表和其他许多指标，并且如何使用
    ClearML 扩展来监控和跟踪实验。
- en: With these new tools, you will be better equipped to build your deep learning
    models in the real world and debug potential problems.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些新工具，你将能更好地在现实世界中构建深度学习模型并调试潜在的问题。
- en: Throughout this book, we have learned the basic concepts necessary to use AutoKeras
    to solve any task based on text, images, or structured data, as well as the visualization
    techniques seen in this chapter. AutoKeras, Keras, and TensorFlow have excellent
    documentation that you can dig into for as long as you need. The foundations are
    already laid; now it's time to finish the building.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们学习了使用AutoKeras解决基于文本、图像或结构化数据的任务所需的基本概念，以及本章中看到的可视化技术。AutoKeras、Keras和TensorFlow都有出色的文档，你可以根据需要深入研究。基础已经打好，现在是时候完成建设了。
- en: A final few words
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的几句话
- en: This is the end of *Automated Machine Learning with AutoKeras*! I hope you have
    learned that it will help you to implement your own AI projects or to improve
    the ones you already had, especially in the field of AI, where new concepts are
    born every day. Therefore, I encourage you to keep walking, delving into this
    exciting world, and enjoying every step.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是*《使用AutoKeras进行自动化机器学习》*的结束！我希望你已经学会了，它将帮助你实现自己的AI项目，或者提升你已有的项目，特别是在AI领域，每天都有新的概念诞生。因此，我鼓励你继续前行，深入探索这个令人兴奋的世界，享受每一步。
- en: In Spain, on the Camino de Santiago, a phrase is often repeated that says "wanderer,
    there is no path. The path is made by walking."
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在西班牙的圣地亚哥之路上，经常有一句话被反复提到：“旅行者，路并不存在。路是走出来的。”
- en: I hope this book serves as a starting point to continue on that path.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这本书能作为一个起点，帮助你继续走这条路。
