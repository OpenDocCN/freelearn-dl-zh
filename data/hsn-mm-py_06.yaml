- en: Time Series Predicting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列预测
- en: In the previous chapters, we discussed **Hidden Markov Models** (**HMMs**) and
    various algorithms associated with inference in great theoretical detail. From
    this chapter onward, we will be discussing the use of HMMs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们详细讨论了 **隐马尔可夫模型**（**HMMs**）及与推断相关的各种算法。从本章开始，我们将讨论 HMM 的应用。
- en: HMMs are capable of predicting and analyzing time-based phenomena. Because of
    this, they can be used in fields such as speech recognition, natural language
    processing, and financial market prediction. In this chapter, we will be looking
    into applications of HMMs in the field of financial market analysis, mainly stock
    price prediction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: HMM（隐马尔可夫模型）能够预测和分析基于时间的现象。因此，它们可以用于语音识别、自然语言处理和金融市场预测等领域。在本章中，我们将探讨 HMM 在金融市场分析中的应用，主要是股票价格预测。
- en: Stock price prediction using HMM
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 HMM 进行股票价格预测
- en: Stock market prediction has been one of the more active research areas in the
    past, given the obvious interest of a lot of major companies. Historically, various
    machine learning algorithms have been applied with varying degrees of success.
    However, stock forecasting is still severely limited due to its non-stationary,
    seasonal, and unpredictable nature. Predicting forecasts from just the previous
    stock data is an even more challenging task since it ignores several outlying
    factors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多大公司对股票市场的浓厚兴趣，股票市场预测一直是过去活跃的研究领域之一。从历史上看，各种机器学习算法已被应用，且取得了不同程度的成功。然而，由于股票市场的非平稳性、季节性和不可预测性，股票预测仍然受到严重限制。仅凭前期的股票数据预测未来的股票走势更具挑战性，因为它忽略了多个外部因素。
- en: As seen previously, HMMs are capable of modeling hidden state transitions from
    the sequential observed data. The problem of stock prediction can also be thought
    as following the same pattern. The price of the stock depends upon a multitude
    of factors which generally remain invisible to the investor (hidden variables).
    The transition between the underlaying factors change based on company policy
    and decisions, its financial conditions, and management decisions, and these affect
    the price of the stock (observed data). So HMMs are a natural fit to the problem
    of price prediction.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，HMM 能够基于顺序观察到的数据建模隐藏状态转换。股票预测问题也可以看作是遵循相同的模式。股票价格取决于多种因素，这些因素通常对投资者来说是不可见的（隐藏变量）。这些潜在因素之间的转换会根据公司政策和决策、财务状况及管理决策发生变化，并且这些变化会影响股票价格（观察数据）。因此，HMM
    非常适合股票价格预测问题。
- en: In this chapter, we will try to predict the stock prices for Alphabet Inc. (GOOGL),
    **Facebook** (**FB**), and **Apple Inc.** (**AAPL**).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试预测 Alphabet Inc.（GOOGL）、**Facebook**（**FB**）和 **Apple Inc.**（**AAPL**）的股票价格。
- en: Collecting stock price data
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集股票价格数据
- en: We will use pystock data ([http://data.pystock.com](http://data.pystock.com))
    to get the historical stock prices data. Every day, before the US stock exchanges
    open at 9:30 EST/EDT, the pystock crawler collects the stock prices and financial
    reports, and pushes the data, such as the previous day's opening price, closing
    price, highest price, and lowest price for a given stock, to the repository. This
    data is day-based, meaning we won't be having any hour or minute-level data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 pystock 数据 ([http://data.pystock.com](http://data.pystock.com)) 来获取历史股票价格数据。每天，在美国股市开盘前的
    9:30 EST/EDT，pystock 爬虫会收集股票价格和财务报告，并将数据推送到仓库，包括前一天的开盘价、收盘价、最高价和最低价等信息。这些数据是按天收集的，意味着我们不会有小时或分钟级别的数据。
- en: 'Let''s try to download the `pystock` data for a given year. As the dataset
    is large, we will create a Python script to download the data for a given year
    and we can run the program simultaneously for three different years to download
    all the data in parallel:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试下载给定年份的 `pystock` 数据。由于数据集较大，我们将创建一个 Python 脚本来下载给定年份的数据，并且可以同时运行该程序来并行下载三个不同年份的所有数据：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following scripts simultaneously for three different years:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同时运行以下脚本来获取三个不同年份的数据：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the data is downloaded, let''s try to get all the data for each of the
    preceding stated stocks by combining data corresponding to all the years:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据下载完成，我们将通过结合所有年份的相关数据来尝试获取每只前述股票的全部数据：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the following scripts to create a `.csv` file containing all the historical
    data for the `GOOGL`, `FB`, and `AAPL` stocks:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下脚本，以创建一个包含 `GOOGL`、`FB` 和 `AAPL` 股票所有历史数据的 `.csv` 文件：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Features for stock price prediction
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 股票价格预测的特征
- en: Once we have the data for each of the stock prices, we want to predict the price
    of the stock. As we mentioned earlier, we have very limited features for each
    day, namely the opening price of stock for that day, closing price, highest price
    of stock, and lowest price of stock. So we are going to use them to compute the
    stock prices. Generally, we want to compute the closing stock price for a day,
    given the opening stock price for that day, and previous some *d* days data. Our
    predictor would have a latency of *d* days.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们拥有每个股票价格的数据，我们就可以开始预测股票的价格了。如前所述，我们每一天的特征非常有限，具体是该天的开盘价、收盘价、股票最高价和最低价。因此，我们将利用这些数据来计算股票价格。通常，我们希望在给定当天开盘价以及前几天的某些
    *d* 天数据的情况下，计算该天的收盘价。我们的预测器会有 *d* 天的延迟。
- en: Let's create a predictor called `StockPredictor`, which will contain all the
    logic to predict the stock price for a given company during a given day.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`StockPredictor`的预测器，它将包含所有预测特定公司在特定日期股票价格的逻辑。
- en: 'Instead of directly using the opening, closing, low, and high prices of a stock,
    let''s try to extract the fractional changes in each of them that would be used
    to train our HMM. As we move further, the reason for choosing these features will
    become clearer. We could define three parameters as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不直接使用股票的开盘价、收盘价、最低价和最高价，而是尝试提取它们的分数变化，这些变化将用于训练我们的HMM。随着我们深入研究，选择这些特征的原因会变得更加清晰。我们可以定义三个参数如下：
- en: '![](img/1d89e031-07e8-42b2-87a5-e2fc32b9878e.png)![](img/d68767ff-b9f5-4035-950b-d4c4ed216795.png)![](img/e4f4c3df-861b-4997-83ac-96eb04e46704.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d89e031-07e8-42b2-87a5-e2fc32b9878e.png)![](img/d68767ff-b9f5-4035-950b-d4c4ed216795.png)![](img/e4f4c3df-861b-4997-83ac-96eb04e46704.png)'
- en: 'So, for the stock price predictor HMM, we can represent a single observation
    as a vector these parameters, namely *X[t] = < frac[change], frac[high], frac[low]
    >*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于股票价格预测HMM，我们可以将单个观测值表示为一个向量，这些参数为 *X[t] = < frac[change], frac[high], frac[low]
    >*：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Predicting price using HMM
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HMM预测价格
- en: Once we extract the features from the data, we can now move on to predicting
    the price of the stock. We want to predict the closing price of a stock on a particular
    day, given the opening price of the stock on that day and stock prices of previous
    days.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们从数据中提取了特征，就可以开始预测股票的价格了。我们希望预测某一天股票的收盘价，已知该天的开盘价和前几天的股票价格。
- en: The first step would be to train an HMM to compute the parameters from the given
    sequence of observations that we computed earlier. As the observations are a vector
    of continuous random variables, we have to assume that the emission probability
    distribution is continuous. For simplicity, let's assume that it is a multinomial
    Gaussian distribution with parameters (*μ* and *Σ*). So we have to determine the
    following parameters for the transition matrix, *A*, prior probabilities, *π*,
    along with *μ* and *Σ* which represent the multinomial Gaussian distribution.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是训练一个HMM，从我们之前计算的给定观测序列中计算参数。由于观测值是连续随机变量的向量，我们必须假设发射概率分布是连续的。为了简化，我们假设它是一个多项式高斯分布，具有参数（*μ*
    和 *Σ*）。因此，我们需要确定以下参数：过渡矩阵 *A*、先验概率 *π*，以及表示多项式高斯分布的 *μ* 和 *Σ*。
- en: 'For now, let''s assume that we have four hidden states. In the coming sections,
    we will look into ways of finding the optimal number of hidden states. We will
    use the `GaussianHMM` class provided by the `hmmlearn` package as our HMM, and
    we will try to perform parameter estimation using the `fit()` method provided
    by it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，假设我们有四个隐藏状态。在接下来的章节中，我们将探讨如何找到最优的隐藏状态数量。我们将使用`hmmlearn`包提供的`GaussianHMM`类作为我们的HMM，并尝试使用它提供的`fit()`方法进行参数估计：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In machine learning, we divide the entire dataset into two categories. The
    first set, the training dataset, is used to train the model. The second set, the
    test dataset, is used to provide an unbiased evaluation of a final model fit on
    the training dataset. Separating the training dataset from the test dataset prevents
    us from overfitting the data to the model. So, in our case, we would also split
    the dataset into two categories, `train_data` for training the model and `test_data`
    for evaluating the model. To do so, we will use the `train_test_split` method
    provided by the `sklearn.model_selection` module:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，我们将整个数据集划分为两类。第一类是训练数据集，用于训练模型。第二类是测试数据集，用于提供对最终模型在训练数据集上拟合的无偏评估。将训练数据集与测试数据集分开，避免了我们将数据过拟合到模型上。因此，在我们的案例中，我们也会将数据集分为两类，`train_data`用于训练模型，`test_data`用于评估模型。为此，我们将使用`sklearn.model_selection`模块提供的`train_test_split`方法：
- en: '`train_test_split` can split arrays or matrices into random train and test
    subsets. As we are training our HMM with sequential data, we do not want to randomly
    split the data. To prevent random splitting of the test and train data, pass `shuffle=False`
    as the argument.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`train_test_split`可以将数组或矩阵随机拆分成训练集和测试集。由于我们用的是顺序数据来训练HMM，因此我们不希望随机拆分数据。为了防止随机拆分测试数据和训练数据，可以将`shuffle=False`作为参数传递。'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once your model is trained, we need to predict the stock closing price. As
    we mentioned earlier, we want to predict the stock closing price for a day given
    that we know the opening price. This means that if we are able to predict *frac[change]* for
    a given day, we can compute the closing price as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型训练完成，我们需要预测股票的收盘价。正如我们之前提到的，我们想预测给定开盘价的一天的收盘价。这意味着，如果我们能够预测给定日期的*frac[change]*，就能按如下方式计算收盘价：
- en: '![](img/c2bdedc6-f140-4774-a837-75e59d9f45a3.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2bdedc6-f140-4774-a837-75e59d9f45a3.png)'
- en: 'Thus our problem boils down to computing the *X[t+1] = < frac[change], frac[high],
    frac[low] >* observation vector for a day given the observation data for *t* days, *x[1],...,x[t]*,
    and the parameters of the HMM ![](img/fb2a521e-09bf-4fc6-985d-87900072e99f.png),
    which is finding the value of *X[t+1]* that maximizes the posterior probability
    *P(X[t+1]|X[1],...,X[t],θ)*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的问题归结为计算给定*X[1],...,X[t]*和HMM参数下的一天的*X[t+1] = < frac[change], frac[high],
    frac[low] >*观测向量的值！[](img/fb2a521e-09bf-4fc6-985d-87900072e99f.png)，即找到一个*X[t+1]*的值，使得后验概率*P(X[t+1]|X[1],...,X[t],θ)*最大化：
- en: '![](img/29e89e8c-b429-4529-a14e-3c1f8e0c6f31.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29e89e8c-b429-4529-a14e-3c1f8e0c6f31.png)'
- en: As you can see, once you remove all the parameters that are independent of *X[t+1]* from
    the maximization equation, we are left with the problem of finding the value of
    *X[t+1]*, which optimizes the probability of *P(X[1],...,X[t+1]|θ)*. We came across
    this problem in [Chapter 4](8d06a68a-e427-4f7d-9472-9be25b5351c0.xhtml), *Parameter
    Learning using Maximum Likelihood*, while evaluating the probability of a sequence
    given the model parameters. It can be computed efficiently using the forward-backward
    algorithm.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一旦我们从最大化方程中去除所有与*X[t+1]*无关的参数，我们就剩下了一个问题：找到*X[t+1]*的值，该值能够优化*P(X[1],...,X[t+1]|θ)*的概率。我们在[第4章](8d06a68a-e427-4f7d-9472-9be25b5351c0.xhtml)《最大似然法中的参数学习》中遇到过这个问题，当时我们在评估给定模型参数下的序列概率。这个问题可以通过前向后向算法有效计算。
- en: 'If we assume *frac[change ]*is a continuous variable, the optimization of the
    problem would be computationally difficult. So we can divide these fractional
    changes into some discrete values ranging between two finite variables (as stated
    in the following table) and try to find a set of fractional changes, *< frac[change],
    frac[high], frac[low] >*, that would maximize the probability, *P(X[1],...,X[t+1]|θ)*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设*frac[change]*是一个连续变量，问题的优化将是计算上非常困难的。因此，我们可以将这些分数变化划分为一些离散值，范围在两个有限变量之间（如下表所示），并尝试找到一组分数变化，*<
    frac[change], frac[high], frac[low] >*，使得概率*P(X[1],...,X[t+1]|θ)*最大化：
- en: '| **Observation** | **Minimum value** | **Maximum value** | **Number of points**
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **观测值** | **最小值** | **最大值** | **点数** |'
- en: '| *frac[change]* | -0.1 | 0.1 | 20 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| *frac[change]* | -0.1 | 0.1 | 20 |'
- en: '| *frac[high]* | 0 | 0.1 | 10 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| *frac[high]* | 0 | 0.1 | 10 |'
- en: '| *frac[low]* | 0 | 0.1 | 10 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| *frac[low]* | 0 | 0.1 | 10 |'
- en: 'So, with the preceding discrete set of values, we need to run (20 x 10 x 10
    =) 2,000 operations:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用前面列出的离散值集合，我们需要进行（20 x 10 x 10 =) 2,000次操作：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can implement the method to predict the closing price, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以实现该方法来预测收盘价，如下所示：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s try to predict the closing price for a some days and plot both the curves:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试预测未来几天的收盘价格，并绘制两条曲线：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![](img/190f7477-da9b-4be8-9916-3f263cc2cbb8.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/190f7477-da9b-4be8-9916-3f263cc2cbb8.png)'
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we predicted the price of stocks using HMM. We applied the
    parameter-estimation and evaluation-of-model methods to determine the closing
    price of a stocks. Using HMM in stock market analysis is just another example
    of the application of HMM in analyzing time series data.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用隐马尔可夫模型（HMM）预测了股票价格。我们应用了参数估计和模型评估方法来确定股票的收盘价格。使用HMM进行股市分析只是HMM应用于时间序列数据分析的另一个例子。
- en: In the next chapter, we will look at an interesting application of HMM in the
    field of natural language processing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨HMM在自然语言处理领域中的一个有趣应用。
