- en: Monitoring and Debugging Neural Network Training
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和调试神经网络训练
- en: The previous chapter focused on training **Multilayer Neural Networks** (**MNNs**),
    and presenting code examples for CNNs and RNNs in particular. This chapter describes
    how monitoring a network can be done while training is in progress and how to
    use this monitoring information to tune a model. DL4J provides UI facilities for
    monitoring and tuning purposes, and will be the centerpiece of this chapter. These
    facilities also work in a training context with DL4J and Apache Spark. Examples
    for both situations (training using DL4J only and DL4J with Spark) will be presented.
    A list of potential baseline steps or tips for network training will also be discussed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章重点介绍了**多层神经网络**（**MNNs**）的训练，并特别展示了CNN和RNN的代码示例。本章将介绍如何在训练过程中监控网络，以及如何利用这些监控信息来调整模型。DL4J提供了用于监控和调整的UI功能，这将是本章的重点。这些功能也可以在DL4J和Apache
    Spark的训练环境中使用。将提供两种情况的示例（仅使用DL4J训练和DL4J与Spark结合使用）。同时，本章还将讨论一些潜在的基础步骤或网络训练的技巧。
- en: Monitoring and debugging neural networks during their training phases
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在神经网络训练阶段进行监控和调试
- en: Between [Chapter 5](fbec1d8a-a92f-4899-af0f-11f3d545e0eb.xhtml), *Convolutional
    Neural Networks*, and [Chapter 7](3b6f47c0-6e17-484b-ad30-b6f92eb0473c.xhtml),
    *Training Neural Networks with Spark*, a full example was presented regarding
    a CNN model's configuration and training. This was an example of image classification.
    The training data that was used came from the `MNIST` database. The training set
    contained 60,000 examples of handwritten digits, with each image labeled by an
    integer. Let's use the same example to show the visual facilities that are provided
    by DL4J for monitoring and debugging a network at training time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](fbec1d8a-a92f-4899-af0f-11f3d545e0eb.xhtml)，*卷积神经网络*，和[第7章](3b6f47c0-6e17-484b-ad30-b6f92eb0473c.xhtml)，*使用Spark训练神经网络*之间，提供了一个完整的例子，涉及CNN模型的配置和训练。这是一个图像分类的示例。所使用的训练数据来自`MNIST`数据库。训练集包含60,000个手写数字的例子，每张图片都带有一个整数标签。我们将使用相同的例子来展示DL4J提供的可视化工具，以便在训练时监控和调试网络。
- en: 'At the end of training, you can programmatically save the generated model as
    a ZIP archive and throw the `writeModel` method of the `ModelSerializer` class
    ([https://static.javadoc.io/org.deeplearning4j/deeplearning4j-nn/0.9.1/org/deeplearning4j/util/ModelSerializer.html](https://static.javadoc.io/org.deeplearning4j/deeplearning4j-nn/0.9.1/org/deeplearning4j/util/ModelSerializer.html)):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练结束时，你可以通过编程方式将生成的模型保存为ZIP压缩包，并调用`ModelSerializer`类的`writeModel`方法（[https://static.javadoc.io/org.deeplearning4j/deeplearning4j-nn/0.9.1/org/deeplearning4j/util/ModelSerializer.html](https://static.javadoc.io/org.deeplearning4j/deeplearning4j-nn/0.9.1/org/deeplearning4j/util/ModelSerializer.html)）：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The generated archive contains three files:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的压缩包包含三个文件：
- en: '`configuration.json`: The model configuration in JSON format'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration.json`：以JSON格式表示的模型配置'
- en: '`coefficients.bin`: The estimated coefficients'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coefficients.bin`：估算的系数'
- en: '`updaterState.bin`: The historical states for updaters'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updaterState.bin`：更新器的历史状态'
- en: 'It is possible to implement a standalone UI using, for example, the JavaFX
    ([https://en.wikipedia.org/wiki/JavaFX](https://en.wikipedia.org/wiki/JavaFX))
    features of the JDK to test the model that is built after training a network.
    Check out the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以使用JDK的JavaFX功能（[https://en.wikipedia.org/wiki/JavaFX](https://en.wikipedia.org/wiki/JavaFX)）来实现一个独立的UI，用于测试在训练网络后构建的模型。查看以下截图：
- en: '![](img/511f951b-e0af-43b9-b2b7-a91a2b157649.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/511f951b-e0af-43b9-b2b7-a91a2b157649.png)'
- en: 'Figure 8.1: The test UI for the handwritten digit classification CNN example'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：手写数字分类CNN示例的测试UI
- en: However, this is almost useless for monitoring purposes, where you would like
    to check in the current network status and the progress of its training in real
    time. The DL4J training UI, which we will go into the details of in the next two
    sections of this chapter, fulfills all of your monitoring needs. The implementation
    details of the test UI, as shown in the preceding screenshot, will be described
    in the next chapter, which discusses network evaluation – this implementation
    will make more sense after you've read this.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这对于监控目的几乎没什么用处，因为在实际应用中，你可能希望实时查看当前网络状态和训练进展。DL4J训练UI将满足你所有的监控需求，我们将在本章接下来的两节中详细介绍这一功能。上面截图中显示的测试UI的实现细节将在下一章中讨论，该章节将讲解网络评估——在阅读过这一部分之后，你会更容易理解这些实现。
- en: 8.1.1 The DL4J training UI
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1.1 DL4J训练UI
- en: The DL4J framework provides a web user interface to visualize the current network
    status and progress of training in real time. It is used to understand how to
    tune a neural network. In this section, we are going to examine a use case with
    CNN training where only DL4J is involved. The next section will show the differences
    between when the training is done through both DL4J and Spark.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DL4J 框架提供了一个网页用户界面，用于实时可视化当前网络状态和训练进展。它用于帮助理解如何调整神经网络。在本节中，我们将讨论一个仅使用 DL4J 进行
    CNN 训练的用例。下一节将展示通过 DL4J 和 Spark 进行训练时的不同之处。
- en: 'The first thing we need to do is add the following dependency to the project:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要做的是将以下依赖添加到项目中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, we can start adding the necessary code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以开始添加必要的代码。
- en: 'Let''s initialize the backend for the UI:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 UI 初始化后端：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Configure the information that is generated for the network during its training:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 配置在训练过程中为网络生成的信息：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, we have chosen to store the information in memory.
    It is also possible to store it on disk so that it can be loaded for later use:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们选择将信息存储在内存中。也可以选择将其存储在磁盘上，以便稍后加载使用：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a listener ([https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/stats/StatsListener.html](https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/stats/StatsListener.html))
    so that you can collect information from the network while it is training:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 添加监听器（[https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/stats/StatsListener.html](https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/stats/StatsListener.html)），这样你可以在网络训练时收集信息：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, to allow for visualization, attach the `StatsStorage` ([https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/storage/InMemoryStatsStorage.html](https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/storage/InMemoryStatsStorage.html))
    instance to the backend:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了实现可视化，将`StatsStorage`（[https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/storage/InMemoryStatsStorage.html](https://deeplearning4j.org/api/latest/org/deeplearning4j/ui/storage/InMemoryStatsStorage.html)）实例附加到后端：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'By running the application as soon as the training starts (the `fit` method
    is executed), it is possible to access the UI through a web browser at the following
    URL:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当训练开始时（执行`fit`方法），可以通过网页浏览器访问 UI，网址为：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The default listening port is `9000`. It is possible to choose a different
    port through the `org.deeplearning4j.ui.port` system property, for example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认监听端口为`9000`。可以通过`org.deeplearning4j.ui.port`系统属性选择不同的端口，例如：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The landing page of the UI is the Overview page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: UI 的登陆页面是概览页面：
- en: '![](img/e7faec0f-5f28-41db-9868-790981d5dff3.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7faec0f-5f28-41db-9868-790981d5dff3.png)'
- en: 'Figure 8.2: The Overview page of the DL4J UI'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：DL4J UI 的概览页面
- en: As we can see in the preceding screenshot, you can see four different sections.
    On the top left of the page there's the Score vs. Iteration chart. It presents
    the loss function for the current minibatch. On the top right, there's information
    about the model and its training. On the bottom left, there is a chart presenting
    the ratio of parameters to update (by layer) for all networks in Weights vs. Iteration.
    The values are displayed as logarithm base 10\. On the bottom right, there is
    a chart presenting the standard deviations of updates, gradients, and activations.
    For this last chart, the values are displayed as logarithm base 10 too.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，页面上有四个不同的部分。在页面的左上方是“得分与迭代”图表，展示了当前小批量的损失函数。在右上方是有关模型及其训练的信息。在左下方，有一个展示所有网络中参数更新比率（按层）的图表，称为“权重与迭代”。该图表中的值以对数底数
    10 展示。在右下方是一个图表，展示了更新、梯度和激活的标准差。该图表的值同样以对数底数 10 展示。
- en: 'Another page of the UI is the Model page:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: UI 的另一个页面是模型页面：
- en: '![](img/710eef5e-3912-4676-8ba0-493957a80ec0.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/710eef5e-3912-4676-8ba0-493957a80ec0.png)'
- en: 'Figure 8.3: The Model page of the DL4J UI'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：DL4J UI 的模型页面
- en: 'It shows a graphical representation of the neural network. By clicking on a
    layer in the graph, detailed information about it is given:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它展示了神经网络的图形表示。通过点击图中的某一层，可以显示该层的详细信息：
- en: '![](img/ed5dd8ab-f2d5-4f8f-af8b-7c36e07ac4b8.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed5dd8ab-f2d5-4f8f-af8b-7c36e07ac4b8.png)'
- en: 'Figure 8.4: Single layer details in the Model page of the DL4J UI'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4：DL4J UI 模型页面中的单层详细信息
- en: On the right-hand side section of the page, we can find a table containing the
    details for the selected layer and a chart presenting the update to parameter
    ratio for this layer (as per the Overview page). Scrolling down, we can also find
    in the same section, other charts presenting the layer activations over time,
    histograms of parameters, and updates for each parameter type and the learning
    Rate vs. Time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面的右侧部分，我们可以找到一个包含所选层详细信息的表格，以及一个展示此层参数更新比例的图表（根据概述页面）。向下滚动，我们还可以在同一部分找到其他图表，展示层激活随时间变化的情况、参数的直方图，以及每种参数类型和学习率与时间的更新。
- en: 'The third page of the UI is the System page:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: UI的第三页是系统页面：
- en: '![](img/d4b7e368-4574-4ff4-8813-0da2d6a5b5cd.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4b7e368-4574-4ff4-8813-0da2d6a5b5cd.png)'
- en: 'Figure 8.5: The System page of the DL4J UI'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5：DL4J UI的系统页面
- en: It presents system information (JVM and off-heap memory utilization percentages,
    hardware, and software details) for each of the machines where the training is
    happening.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它展示了每台进行训练的机器的系统信息（JVM和堆外内存利用率百分比、硬件和软件详情）。
- en: 'The left menu of the UI presents a fourth item, Language, which lists all of
    the supported language translations for this UI:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: UI的左侧菜单呈现了第四个选项，语言，它列出了此UI所支持的所有语言翻译：
- en: '![](img/20efa761-15e5-42cc-9a77-c2c0087e1b2d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20efa761-15e5-42cc-9a77-c2c0087e1b2d.png)'
- en: 'Figure 8.6: The list of supported languages for the DL4J UI'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：DL4J UI支持的语言列表
- en: 8.1.2 The DL4J training UI and Spark
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1.2 DL4J训练UI和Spark
- en: 'The DL4J UI can also be used when training and including Spark into the tech
    stack. The main difference with a case where only DL4J is involved is as follows:
    some conflicting dependencies require that UI and Spark are running on different
    JVMs. There are two possible alternatives:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当在技术栈中训练并包括Spark时，也可以使用DL4J UI。与仅使用DL4J的情况相比，主要区别在于：一些冲突的依赖关系要求UI和Spark运行在不同的JVM上。这里有两个可能的替代方案：
- en: Collect and save the relevant training stats at runtime, and then visualize
    them offline later.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行时收集并保存相关的训练统计信息，然后稍后离线可视化它们。
- en: Execute the DL4J UI and use the remote UI functionality in separate JVMs (servers).
    The data is then uploaded from the Spark master to the UI server.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行DL4J UI并在不同的JVM（服务器）中使用远程UI功能。数据随后会从Spark主节点上传到UI服务器。
- en: Let's take a look at how to implement an alternative to *Step 1*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何实现*步骤1*的替代方案。
- en: 'Let''s reference the CNN example we presented in [Chapter 5](fbec1d8a-a92f-4899-af0f-11f3d545e0eb.xhtml),
    *Convolutional Neural Networks*, in the *Hands-on CNN with Spark* section, once
    the Spark network has been created:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Spark网络创建完成，让我们参考我们在[第5章](fbec1d8a-a92f-4899-af0f-11f3d545e0eb.xhtml)中展示的CNN示例，*卷积神经网络*部分，在*基于Spark的CNN实战*章节中：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We need to create a `FileStatsStorage` object so that we can save the results
    to a file and set a listener for the Spark network:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个`FileStatsStorage`对象，以便将结果保存到文件中并为Spark网络设置监听器：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Later, we can load and display the saved data offline by implementing the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过实现以下步骤离线加载并显示已保存的数据：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, let's explore an alternative to *Step 2*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索一下*步骤2*的替代方案。
- en: 'As we mentioned previously, the UI server needs to run on a separate JVM. From
    there, we need to start the UI server:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，UI服务器需要在单独的JVM上运行。从那里，我们需要启动UI服务器：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we need to enable the remote listener:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要启用远程监听器：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The dependency that we need to set is the same one (DL4J UI) that we used for
    the example we presented in the *The DL4J training UI* section:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置的依赖项与我们在*DL4J训练UI*部分中展示的示例相同（DL4J UI）：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the Spark application (we are still referring to the CNN example we presented
    in [Chapter 5](fbec1d8a-a92f-4899-af0f-11f3d545e0eb.xhtml), *Convolutional Neural
    Networks*), after the Spark network has been created, we need to create an instance
    of `RemoteUIStatsStorageRouter` ([https://static.javadoc.io/org.deeplearning4j/deeplearning4j-core/0.9.1/org/deeplearning4j/api/storage/impl/RemoteUIStatsStorageRouter.html](https://static.javadoc.io/org.deeplearning4j/deeplearning4j-core/0.9.1/org/deeplearning4j/api/storage/impl/RemoteUIStatsStorageRouter.html)),
    which asynchronously posts all updates to the remote UI and finally sets it as
    a listener for the Spark network:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spark应用程序中（我们仍然指的是[第5章](fbec1d8a-a92f-4899-af0f-11f3d545e0eb.xhtml)中展示的CNN示例，*卷积神经网络*），在创建了Spark网络之后，我们需要创建一个`RemoteUIStatsStorageRouter`的实例（[https://static.javadoc.io/org.deeplearning4j/deeplearning4j-core/0.9.1/org/deeplearning4j/api/storage/impl/RemoteUIStatsStorageRouter.html](https://static.javadoc.io/org.deeplearning4j/deeplearning4j-core/0.9.1/org/deeplearning4j/api/storage/impl/RemoteUIStatsStorageRouter.html)），该实例会异步地将所有更新推送到远程UI，并最终将其设置为Spark网络的监听器：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`UI_HOST_IP` is the IP address of the machine where the UI server is running
    and `UI_HOST_PORT` is the listening port of the UI server.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`UI_HOST_IP`是UI服务器运行的机器的IP地址，`UI_HOST_PORT`是UI服务器的监听端口。'
- en: 'To avoid dependency conflicts with Spark, we need to add to the dependency
    list for this application, and not the full DL4J UI model:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与Spark的依赖冲突，我们需要将此应用程序的依赖项添加到依赖列表中，而不是整个DL4J UI模型：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Choosing the alternative to *Step 2*, the monitoring of the network happens
    in real-time during training and not offline after the training execution has
    completed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 选择*步骤2*的替代方案时，网络的监控发生在训练过程中，并且是实时的，而不是在训练执行完成后离线进行。
- en: The DL4J UI pages and content are the same as those shown for the scenario of
    network training without Spark (*The DL4J training UI* section of this chapter).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: DL4J UI页面和内容与没有Spark的网络训练场景中展示的相同（本章*DL4J训练UI*部分）。
- en: 8.1.3 Using visualization to tune a network
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1.3 使用可视化调优网络
- en: Now, let's look at how we can interpret the visual results presented in the
    DL4J UI and use them to tune a neural network. Let's start from the Overview page.
    The Model Score vs. Iteration chart, which presents the loss function for the
    current minibatch, should go down over time (as shown in the example in *Figure
    8.2*). Regardless of whether the observed score should increase consistently,
    the learning rate is likely set too high. In this case, it should be reduced until
    the scores become more stable. Observing increasing scores could also be indicative
    of other issues, such as incorrect data normalization. On the other hand, if the
    score is flat or decreases very slowly, this means that the learning rate may
    be too low or that optimization is difficult. In this second case, training should
    be tried again using a different updater.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何解读DL4J UI中展示的可视化结果，并利用它们来调优神经网络。我们从概览页面开始。模型得分与迭代图表展示了当前小批量的损失函数，应该随着时间推移而下降（如*图8.2*中的示例所示）。无论观察到的得分是否应持续增加，学习率可能设得太高。在这种情况下，应降低学习率，直到得分变得更稳定。得分不断增加也可能表明存在其他问题，比如数据归一化不正确。另一方面，如果得分平稳或下降非常缓慢，则表示学习率可能设置得太低，或者优化很困难。在这种情况下，应尝试使用不同的更新器重新进行训练。
- en: 'In the example presented in the *The DL4J training UI* section, the Nesterov''s
    momentum updater was used (see *Figure 8.4*) and came up with good results (see
    *Figure 8.2*). You can change the updater through the `updater` method of the
    `NeuralNetConfiguration.Builder` class:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在*DL4J训练UI*一节中展示的示例中，使用了Nesterov动量更新器（见*图8.4*），并取得了良好的结果（见*图8.2*）。你可以通过`NeuralNetConfiguration.Builder`类的`updater`方法来更改更新器：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Some noise in this line chart should be expected, but if the scores vary quite
    significantly between runs, this is a problem. The root cause could be one of
    the issues that we mentioned previously (learning rate, normalization) or data
    shuffling. Also, setting the minibatch size to a very small number of examples
    can also contribute in terms of noise for this chart – this might also lead to
    optimization difficulties.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张折线图中，应该预期会有一些噪声，但如果分数在不同的运行之间变化较大，那就成了一个问题。根本原因可能是我们之前提到的一些问题（学习率、归一化）或数据洗牌。另外，将小批量大小设置为非常小的样本数量也会增加图表中的噪声——这也可能导致优化困难。
- en: Other important information that's useful for understanding how to tune a neural
    network during training comes from combining some details from the Overview and
    Model pages. The mean magnitude for parameters (or updates) is the average of
    their absolute values at a given time step. At training runtime, the ratio of
    mean magnitudes is provided by the Overview page (for the overall network) and
    the Model page (for a given layer). We can use these ratio values when selecting
    a learning rate. The general rule, which applies to most part of the networks
    (not all of them, but it is always a good starting point) is that the ratio should
    be around 0.001 (1:1000), which in the *log[10]* chart (like those in the Overview
    and Model pages) corresponds to -3\. When the ratio diverges significantly from
    this value, it means that the network parameters may be too unstable or that they
    may change too slowly to learn useful features. By adjusting the learning rate
    for the overall network or one or more layers, it is possible to change the ratio
    of mean magnitudes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练过程中，其他有助于理解如何调整神经网络的重要信息来自于结合概述页和模型页的一些细节。参数（或更新）的平均幅度是指在给定时间步长下，它们绝对值的平均值。在训练运行时，平均幅度的比率由概述页（对于整个网络）和模型页（对于特定层）提供。当选择学习率时，我们可以使用这些比率值。通常的规则是，大多数网络的比率应接近0.001（1:1000），在*log[10]*图表（如概述页和模型页中的图表）中，该比率对应于-3。当比率显著偏离此值时，意味着网络参数可能不稳定，或者它们变化太慢，无法学习到有用的特征。通过调整整个网络或一个或多个层的学习率，可以改变平均幅度的比率。
- en: Now, let's explore other useful information from the Model page that could help
    a lot during the tuning process.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索模型页中其他有助于调整过程的有用信息。
- en: The Layer Activations chart of the Model page (see the following diagram) can
    be used to detect vanishing or exploding activations. This chart should ideally
    stabilize over time. A good standard deviation for activations is between 0.5
    and 2.0.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 模型页中的层激活图（见下图）可以用来检测梯度消失或爆炸现象。理想情况下，这个图应该随着时间的推移趋于稳定。激活值的标准差应介于0.5和2.0之间。
- en: 'Values significantly outside of this range indicate that some problem in terms
    of lack of data normalization, high learning rate, or poor weight initialization
    is happening:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 值显著超出此范围表明可能存在数据未归一化、高学习率或权重初始化不当等问题：
- en: '![](img/f92605b4-e75e-4f27-9df9-9f87cdd7d38b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f92605b4-e75e-4f27-9df9-9f87cdd7d38b.png)'
- en: 'Figure 8.7: The Layer Activations chart of the Model page'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：模型页的层激活图
- en: 'The Layer Parameters Histogram chart for the weight and biases of the Model
    page (see the following diagram), which is displayed for the most recent iteration
    only, provides other usual insights:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 模型页中层参数直方图图（权重和偏置，见下图）仅显示最新迭代的结果，提供了其他常见的洞察：
- en: '![](img/a4514051-af05-4a15-8848-4d13083c5e7e.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4514051-af05-4a15-8848-4d13083c5e7e.png)'
- en: 'Figure 8.8: The Layer Parameters Histogram chart (weights)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：层参数直方图图（权重）
- en: After some time, during the training process, these histograms for weights should
    assume an approximately Gaussian normal distribution, while for biases, they generally
    start at 0 and then usually end up being approximately Gaussian. Parameters that
    are diverging toward +/- infinity may be a good sign of too high a learning rate
    or insufficient regularization on the network. Biases becoming very large means
    that the distribution of classes is very imbalanced.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练过程中，经过一段时间后，这些权重的直方图应该呈现近似的高斯正态分布，而偏置通常从0开始，并最终趋于高斯分布。参数向+/-无穷大发散通常是学习率过高或网络正则化不足的良好指示。偏置变得非常大意味着类别分布非常不平衡。
- en: 'The Layer Updates Histogram chart for weight and biases of the Model page (see
    the following diagram), which is displayed for the most recent iteration only
    for the Layer Parameters Histogram, provides other usual information too:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 模型页中的层更新直方图图（权重和偏置，见下图）也仅显示最新迭代的结果，与层参数直方图一样，提供了其他常见的信息：
- en: '![](img/0b11ae09-d3ef-4dc5-9f44-95f32b1ec88a.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b11ae09-d3ef-4dc5-9f44-95f32b1ec88a.png)'
- en: 'Figure 8.9: The Layer Updates Histogram chart (weights)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9：层更新直方图图（权重）
- en: This is the same as the parameter graphs – after some time, they should assume
    an approximately Gaussian normal distribution. Very large values indicate exploding
    gradients in the network. In those cases, the root cause could be in weight initialization,
    input or labels data normalization, or the learning rate.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这与参数图相同——经过一段时间后，它们应该呈现大致的高斯正态分布。非常大的值表示网络中的梯度爆炸。在这种情况下，根本原因可能出在权重初始化、输入或标签数据的归一化，或是学习率上。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about the details of the UI that DL4J provides
    for the monitoring and tuning purposes of a neural network at training time. We
    have also learned how to use the UI when training with DL4J and when Apache Spark
    is part of the game too. Finally, we understood what useful insights we could
    obtain from the charts that are presented in the DL4J UI pages to spot potential
    issues and some ways to remedy them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了DL4J为神经网络训练时的监控和调优提供的UI细节。我们还学习了在使用DL4J进行训练时，尤其是在Apache Spark参与的情况下，如何使用该UI。最后，我们理解了从DL4J
    UI页面上展示的图表中可以获得哪些有用的见解，以识别潜在问题以及一些解决方法。
- en: The next chapter focuses on how to evaluate a neural network so that we can
    understand the accuracy of a model. Different evaluation techniques will be presented
    before we dive into practical examples of implementation through the DL4J API
    and the Spark API.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将重点介绍如何评估神经网络，以便我们能理解模型的准确性。在深入探讨通过DL4J API和Spark API实现的实际示例之前，我们将介绍不同的评估技术。
