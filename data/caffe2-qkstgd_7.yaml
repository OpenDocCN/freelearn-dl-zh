- en: Caffe2 at the Edge and in the cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边缘计算中的 Caffe2 和云端中的 Caffe2
- en: In chapters 1-6 of this book, we have learned how to install and use Caffe2
    to train DL neural networks and how to work with other popular DL frameworks.
    We have also learnt how to deploy our trained Caffe2 models on popular inference
    engines. In this last chapter, we will look at applications of Caffe2 that exploit
    its ability to scale from tiny edge devices such as the Raspberry Pi to running
    on containers in the cloud. We will also look at visualizing Caffe2 models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第 1 到第 6 章中，我们已经学习了如何安装和使用 Caffe2 来训练深度学习（DL）神经网络，以及如何与其他流行的 DL 框架一起工作。我们还学习了如何将训练好的
    Caffe2 模型部署到流行的推理引擎中。在本章的最后，我们将探讨 Caffe2 的应用，特别是它如何从小型边缘设备（如 Raspberry Pi）扩展到在云中的容器运行。我们还将学习如何可视化
    Caffe2 模型。
- en: 'The topics that will be covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Caffe2 at the edge on Raspberry Pi
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 上的 Caffe2 边缘计算
- en: Caffe2 in the cloud using containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用容器在云中运行 Caffe2
- en: Caffe2 model visualization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caffe2 模型可视化
- en: Caffe2 at the edge on Raspberry Pi
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 上的 Caffe2 边缘计算
- en: 'There is a lot of interest in using deep learning at the edge. This is the
    application of deep learning to compute solutions on or near the devices that
    capture data using sensors and cameras. An alternative solution to deep learning
    at the edge is to capture edge data and send it to in the cloud for processing.
    But, deep learning at the edge has the advantage of lower latency and higher security.
    Devices at the edge are typically cheap, have a small form factor and use less
    power, and their processors or accelerators have less compute capability. One
    of the key advantages of Caffe2 is that it has been designed and developed from
    the beginning to scale: from multi-GPU, multi-CPU servers, down to tiny edge devices.
    In this section, we will use the Raspberry Pi as an example of an edge device
    and learn how to use Caffe2 on it.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在边缘计算中使用深度学习的兴趣非常大。这是将深度学习应用于在设备上或靠近设备进行计算的方案，这些设备使用传感器和摄像头捕捉数据。另一种深度学习边缘计算的替代方案是将边缘数据捕获后发送到云中进行处理。然而，边缘计算中的深度学习具有较低的延迟和更高的安全性优势。边缘设备通常便宜、小巧且功耗较低，处理器或加速器的计算能力较弱。Caffe2
    的一个关键优势是它从一开始就被设计和开发为具有可扩展性：从多 GPU、多 CPU 服务器到微小的边缘设备。在这一节中，我们将以 Raspberry Pi 作为边缘设备的例子，学习如何在其上使用
    Caffe2。
- en: Raspberry Pi
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi（树莓派）
- en: 'The Raspberry Pi is a series of single-board general-purpose computers introduced
    by the Raspberry Pi Foundation from the UK. *Figure 7.1* shows the latest Rv3
    board of the Raspberry Pi B+ unit, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 是一系列由英国 Raspberry Pi 基金会推出的单板通用计算机。*图 7.1* 展示的是 Raspberry Pi B+
    单元的最新 Rev3 板，如下所示：
- en: '![](img/fa3ebe16-1ea5-4f44-9649-bd767ed2c26b.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa3ebe16-1ea5-4f44-9649-bd767ed2c26b.png)'
- en: 'Figure 7.1: A Raspberry Pi B+ Rev3 board, released in 2018'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：2018 年发布的 Raspberry Pi B+ Rev3 板
- en: Since its introduction in 2012, the Pi has taken the world by storm, being used
    for teaching in schools, for hobby projects, and real-world deployments at the
    edge. Costing about $35 each, the Pi is affordable for all types of projects.
    What makes the Raspberry Pi computer so useful is its small form factor; it is
    about the size of a pack of cards. The Pi requires little power, running off a
    5V micro-USB power supply. And the Pi is a fully general-purpose computer, with
    all common storage and I/O ports, such as SD/microSD card slots, USB ports, wireless
    connectivity, an Ethernet port, an HDMI out, and a composite video out. Probably
    the biggest advantage of the Pi over other devices in its form factor is the availability
    of Raspbian, a port of the popular Debian Linux distribution for the Pi. With
    Raspbian, Pi users get to use the same tools, compilers and programming libraries
    that are available on a mainstream Linux distribution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自2012年推出以来，Raspberry Pi（树莓派）已经在全球掀起了一股热潮，广泛应用于学校教学、个人项目和边缘计算的实际部署。每个树莓派的价格大约为
    $35，非常适合各种类型的项目。树莓派计算机如此有用的原因在于其小巧的外形，它大约和一副扑克牌的大小相当。树莓派需要的电力很少，只需要一个 5V 的 micro-USB
    电源供应。树莓派是一台完全通用的计算机，配备了常见的存储和 I/O 接口，如 SD/microSD 卡插槽、USB 接口、无线连接、以太网端口、HDMI 输出和复合视频输出。树莓派相比其他同类设备的最大优势之一是它提供了
    Raspbian 操作系统，这是一个专门为树莓派移植的流行 Debian Linux 发行版。通过 Raspbian，树莓派用户可以使用与主流 Linux
    发行版上相同的工具、编译器和编程库。
- en: 'Our Caffe2 experiment on the Raspberry Pi will involve the following steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Raspberry Pi 上进行的 Caffe2 实验将涉及以下步骤：
- en: Installing Raspbian
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Raspbian
- en: Building and using Caffe2 on Raspbian
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Raspbian 上构建和使用 Caffe2
- en: Installing Raspbian
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Raspbian
- en: 'Follow these steps to install Raspbian:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 Raspbian：
- en: Download Raspbian releases from [https://www.raspberrypi.org/downloads/raspbian/](https://www.raspberrypi.org/downloads/raspbian/).
    There is a Raspbian release corresponding to every Debian release. The latest
    Debian version 9 is called **Stretch** and the corresponding Raspbian is called
    Raspbian 9 or Raspbian Stretch.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://www.raspberrypi.org/downloads/raspbian/](https://www.raspberrypi.org/downloads/raspbian/)
    下载 Raspbian 版本。每个 Debian 版本都有一个对应的 Raspbian 版本。最新的 Debian 版本 9 被称为 **Stretch**，对应的
    Raspbian 被称为 Raspbian 9 或 Raspbian Stretch。
- en: Choose a Raspbian bundle that is appropriate for you. To suit various applications,
    there are three type of Raspbian Stretch bundles that are available. For our purpose,
    the smallest bundle called Raspbian Stretch Lite is adequate. If you would like
    to use a desktop and GUI apps, then you can try the other bundles that ship with
    those features. Once your Raspbian is connected to your network, you can SSH into
    it and get full access to a Bash shell to run commands and console tools and editors.
    You could also choose to install other GUI applications later if you required
    them. Stretch Lite is sufficient for all these purposes.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适合你的 Raspbian 版本。为了满足不同的应用需求，提供了三种类型的 Raspbian Stretch 套件。对于我们的目的，最小的套件 Raspbian
    Stretch Lite 就足够了。如果你想使用桌面环境和图形应用程序，可以尝试其他带有这些功能的套件。一旦你的 Raspbian 连接到网络，你可以通过
    SSH 进入并获得完全访问权限，使用 Bash shell 执行命令、控制台工具和编辑器。如果你需要，之后也可以选择安装其他图形应用程序。Stretch Lite
    足以满足所有这些需求。
- en: Pick a tool to flash the Raspbian disk image to an SD card. A recommended easy-to-use
    tool for this purpose is **Etcher**. Download it from [https://www.balena.io/etcher/](https://www.balena.io/etcher/).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个工具将 Raspbian 镜像刷写到 SD 卡中。一个推荐的易用工具是 **Etcher**。你可以从 [https://www.balena.io/etcher/](https://www.balena.io/etcher/)
    下载它。
- en: Once you have installed Etcher, plug in an SD card with a minimum of 4 GB capacity
    into your computer's SD card slot. Use Etcher to flash the Raspbian disk image
    to the SD card.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Etcher 后，将一个最小容量为 4 GB 的 SD 卡插入电脑的 SD 卡槽。使用 Etcher 将 Raspbian 镜像刷写到 SD 卡中。
- en: The Raspberry Pi can be used as a headless computer by SSHing to it instead
    of working at it locally. If you would like this feature to be enabled from the
    very first boot up of Raspbian then put back the flashed SD card into your computer.
    Then, create an empty file named `ssh` in the root directory of the SD card.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 可以作为一个无头计算机使用，通过 SSH 登录而不是直接本地操作。如果你希望从 Raspbian 的第一次启动就启用此功能，请将已经刷写的
    SD 卡重新插入电脑。然后，在 SD 卡的根目录下创建一个名为 `ssh` 的空文件。
- en: Now we are done with flashing the SD card with Raspbian. Insert this SD card
    into the SD card slot on the Raspberry Pi board. Make sure your Pi is connected
    to your home wireless router with an Ethernet cable. Optionally, you can also
    connect your Pi to your TV or computer display with an HDMI cable to watch its
    boot messages.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到此，我们已经完成了将 Raspbian 刷写到 SD 卡的操作。将这张 SD 卡插入 Raspberry Pi 板上的 SD 卡槽。确保 Pi 通过以太网电缆连接到你的家庭无线路由器。你还可以选择通过
    HDMI 电缆将 Pi 连接到电视或电脑显示器，以便查看其启动信息。
- en: 'Power on the Pi. You can see the boot messages of Raspbian on your TV or display.
    At the end of the boot-up sequence, it displays the IP address assigned to it
    by DHCP and asks you to log in locally. Alternatively, you can also figure out
    the IP address allocated to the Pi by checking the admin console of your wireless
    router. Now you can SSH into the Raspbian from any computer on the network using
    the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Pi 电源。你可以在电视或显示器上看到 Raspbian 的启动信息。在启动过程结束时，它会显示由 DHCP 分配的 IP 地址，并要求你进行本地登录。你也可以通过检查无线路由器的管理控制台来找出
    Pi 的 IP 地址。现在，你可以使用以下命令从任何网络上的计算机通过 SSH 登录到 Raspbian。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use the default password: `raspberry`. After your first successful login, Raspbian
    will remind you to change the default password. Please do so by typing the `passwd`
    command at the shell. You can use this new password from the next time you SSH
    into the Pi.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认密码：`raspberry`。首次成功登录后，Raspbian 会提醒你更改默认密码。请通过在命令行中输入 `passwd` 命令来更改密码。从下次通过
    SSH 登录到 Pi 时，可以使用此新密码。
- en: 'Finally, make sure to update the package repositories and update the installed
    packages using the following commands:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，确保使用以下命令更新软件包仓库并更新已安装的包：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building Caffe2 on Raspbian
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Raspbian 上构建 Caffe2
- en: Caffe2 has been ported to Raspbian. But there is no easy way to cross-compile
    to the Raspberry Pi from your x86_64 computer, so Caffe2 has to be built on the
    diminutive Pi itself.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2已经移植到Raspbian上。但是，没有简单的方法可以从你的x86_64计算机交叉编译到树莓派，因此必须在树莓派本身上构建Caffe2。
- en: We could SSH to the Pi and clone the Caffe2 Git repository on it. However, the
    full PyTorch and Caffe2 repository, along with their submodules, is more than
    400 MB, and that clone operation could take a long time to complete on the Pi.
    Also, note that it is fastest to clone to the SD card rather than a hard disk
    connected by USB to the Pi. The latter can be painfully slow because Pi only has
    USB 2.0 (which is slower than USB 3.0) and the USB ports and Ethernet ports share
    the same bus, further limiting the Git clone speed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以SSH连接到Pi并在其上克隆Caffe2 Git仓库。然而，完整的PyTorch和Caffe2仓库以及它们的子模块总大小超过400 MB，这样的克隆操作在树莓派上可能需要很长时间才能完成。此外，请注意，克隆到SD卡比克隆到通过USB连接到树莓派的硬盘更快。后者速度非常慢，因为树莓派仅支持USB
    2.0（比USB 3.0慢），并且USB端口和以太网端口共享同一总线，进一步限制了Git克隆速度。
- en: 'Let''s get started with building Caffe 2 on Raspbian:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始在Raspbian上构建Caffe 2：
- en: 'Since it is easiest to clone on your local computer, let''s do that first using
    the following commands:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于在本地计算机上克隆最为简便，首先使用以下命令在本地进行克隆：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the clone is done, reduce the size of this directory by deleting the Git
    repository data, as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆完成后，通过删除Git仓库数据来减少此目录的大小，操作如下：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now compress this into a `.tar.gz` archive and copy it over SSH to the Pi,
    as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将其压缩为`.tar.gz`档案并通过SSH复制到Pi，操作如下：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'SSH to the Pi and decompress the copied archive there, as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH连接到Pi并解压复制到那里的压缩档案，操作如下：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The script to build Caffe2 on Raspbian is `scripts/build_raspbian.sh`. Note
    that this Raspbian build has not been maintained in recent times. So, before we
    run it, we need to install a few Python packages that are necessary for successful
    compilation, as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于在Raspbian上构建Caffe2的脚本是`scripts/build_raspbian.sh`。请注意，这个Raspbian构建最近没有得到维护。因此，在运行它之前，我们需要安装一些对于成功编译至关重要的Python包，具体如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We are now ready to build by invoking the following script:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备好通过调用以下脚本来进行构建：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Just like the build process we used in [Chapter 1](5f3ecee9-fc6c-4a3f-bc8f-3bffb7cb2269.xhtml),
    *Introduction and Installation*, this also uses CMake, first to configure the
    make process and then to invoke `make` to build the necessary components, placing
    the built artifacts in the `build` subdirectory.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像我们在[第1章](5f3ecee9-fc6c-4a3f-bc8f-3bffb7cb2269.xhtml)中使用的构建过程一样，*简介与安装*，这个过程也使用了CMake，首先配置构建过程，然后调用`make`来构建必要的组件，并将构建的产物放入`build`子目录中。
- en: Note that the build process takes a long time and could take as much as half
    a day. The Raspberry Pi has 500 MB to 1 GB of RAM (depending on which variant
    of Pi you have) and Raspbian, by default, allocates only about 100 MB of swap
    space. So, the build can fail sometimes because it runs out of memory. If that
    happens, you can increase the swap space by opening the `/etc/dphys-swapfile`
    file and increasing the `CONF_SWAPSIZE` value. I found that increasing it from
    `100` to `1000` was sufficient for successful compilation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，构建过程需要很长时间，可能会花费半天时间。树莓派的内存为500 MB到1 GB（取决于你使用的Pi型号），而Raspbian默认只分配大约100
    MB的交换空间。因此，构建过程有时会因为内存不足而失败。如果发生这种情况，你可以通过打开`/etc/dphys-swapfile`文件并增加`CONF_SWAPSIZE`值来增加交换空间。我发现将其从`100`增加到`1000`就足以成功编译。
- en: 'After compilation, you can install and test Caffe2 just as we did in [Chapter
    1](5f3ecee9-fc6c-4a3f-bc8f-3bffb7cb2269.xhtml), *Introduction and Installation*,
    as shown in the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，你可以像我们在[第1章](5f3ecee9-fc6c-4a3f-bc8f-3bffb7cb2269.xhtml)中所做的那样，安装并测试Caffe2，*简介与安装*，如以下示例所示：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You now have Caffe2 working on the Raspberry Pi. You can now attach sensors
    or camera modules to the Pi, read images and data from them, and run them through
    DL networks for classification, detection, and understanding.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在树莓派上成功运行Caffe2。你可以连接传感器或摄像头模块，读取其中的图像和数据，并通过深度学习网络进行分类、检测和理解。
- en: Caffe2 in the cloud using containers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用容器在云端运行Caffe2
- en: Containers are now a ubiquitous and necessary tool for robustly deploying software
    in production, both locally and in the cloud. They enable developers to create
    the ideal software environment for the application and ensure that this software
    environment is exactly replicated on developer workstations, test computers, staging
    computers, and the final deployment to local servers or instances in the cloud.
    Containers also help create a sanitized software environment for every single
    application, enabling multiple software environments, one for each application,
    when multiple applications are running on the same server.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 容器现在是一个普遍存在且必要的工具，用于在生产环境中强健地部署软件，既可以在本地，也可以在云端。它们使开发者能够为应用程序创建理想的软件环境，并确保在开发者工作站、测试计算机、预发布计算机以及最终部署到本地服务器或云实例时，完全复制这一软件环境。容器还帮助为每个应用程序创建一个独立的软件环境，在同一服务器上运行多个应用程序时，为每个应用程序创建一个专属的环境。
- en: Among the many available container tools, *Docker* is the most popular. We will
    focus on using Docker in this section. Docker is available for all popular Linux
    distributions, macOS X, and Windows. With Docker, you can create an Ubuntu software
    environment from a specific Ubuntu version and run your Caffe2 application inside
    that on a RedHat host OS from a different version. Docker makes such varied deployments
    easy and doable in mere minutes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在众多可用的容器工具中，*Docker* 是最受欢迎的。我们将在本节中重点介绍如何使用 Docker。Docker 适用于所有流行的 Linux 发行版、macOS
    X 和 Windows。通过 Docker，你可以从指定的 Ubuntu 版本创建一个 Ubuntu 软件环境，并在不同版本的 RedHat 主机操作系统上运行你的
    Caffe2 应用程序。Docker 使得这种多样化的部署变得轻松可行，并且只需几分钟。
- en: Installing Docker
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: 'Follow these steps for installation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行安装：
- en: To install Docker using package repositories and packages specific to your OS
    or distribution, please follow the instructions here [https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用与你的操作系统或发行版特定的软件包仓库和包来安装 Docker，请按照这里的说明进行操作 [https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/)。
- en: 'After the installation is successful, remember to add your username to the
    `docker` user group using a command like the one shown in the following example:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装成功后，记得使用如下命令将你的用户名添加到 `docker` 用户组中：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this addition to the group to take full effect, you may need to log out
    and log back in again.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个小组的更改生效，你可能需要注销并重新登录。
- en: 'And, finally, to test if your Docker setup is working correctly, run the `hello-world`
    image. If successful, you will see a welcoming message similar to the following
    example:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了测试你的 Docker 设置是否正确，可以运行 `hello-world` 镜像。如果成功，你将看到类似于以下示例的欢迎信息：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As a final experiment, you can get a Bash shell inside an Ubuntu container
    and explore inside that Ubuntu instance by using the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的实验，你可以在一个 Ubuntu 容器内获取 Bash shell，并使用以下命令在该 Ubuntu 实例内进行探索：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here we are launching an Ubuntu container. The `-it` option indicates that this
    is an interactive session. That is, we want to run the application (bash) and
    stay with it until we quit the container. This is opposed to the normal flow (such
    as in the `hello-world` container) where Docker executes an application and quits
    once it is completed. The `--rm` option indicates that Docker should tear down
    the container once we quit it. Normally, it would keep it around in the background,
    ready for use again.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们启动一个 Ubuntu 容器。`-it` 选项表示这是一个交互式会话。也就是说，我们希望运行应用程序（bash）并保持该会话，直到退出容器。这与正常流程（例如在
    `hello-world` 容器中的操作）相反，后者会在 Docker 执行应用程序并完成后自动退出。`--rm` 选项表示 Docker 应在我们退出容器后自动销毁容器。通常，Docker
    会将容器保留在后台，随时准备再次使用。
- en: You will notice that Docker logs you in as the `root` user and you get a root
    shell. You are placed at the root of the filesystem. The root privileges are only
    inside this Docker container. Any files you create or change inside the container
    are ephemeral. They are lost when you exit the container.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到 Docker 会以 `root` 用户身份登录，并且你会获得一个 root shell。你会被放置在文件系统的根目录下。root 权限仅在此
    Docker 容器内有效。在容器内创建或更改的任何文件都是临时的。当你退出容器时，这些文件会丢失。
- en: Once you are done exploring the Ubuntu container, you can quit by pressing *Ctrl
    + D* or typing `exit`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 完成对 Ubuntu 容器的探索后，你可以通过按 *Ctrl + D* 或输入 `exit` 来退出。
- en: Installing nvidia-docker
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 nvidia-docker
- en: You can run Caffe2, Python, and C++ applications on the CPU in Docker after
    following the preceding steps. However, if you want to run Caffe2 applications
    on the GPU, then you need to install and use nvidia-docker.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行前述步骤后，你可以在 Docker 中运行 Caffe2、Python 和 C++ 应用程序（CPU 版本）。但是，如果你想在 GPU 上运行 Caffe2
    应用程序，那么你需要安装并使用 nvidia-docker。
- en: NVIDIA-Docker provides full and unfettered access to the NVIDIA GPUs on your
    system to your applications running inside Docker. Note that this feature relies
    on the NVIDIA GPU driver installed on your host system. However, you do not need
    to install CUDA or cuDNN on your host system because you can spin up a container
    having any CUDA version you want installed inside it. This is a convenient way
    to build and test your applications against different CUDA versions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: NVIDIA-Docker 为运行在 Docker 内的应用程序提供完全和不受限制的访问权限，能够访问系统上的 NVIDIA GPU。请注意，此功能依赖于安装在主机系统上的
    NVIDIA GPU 驱动程序。然而，你无需在主机系统上安装 CUDA 或 cuDNN，因为你可以启动一个容器，并在其中安装你想要的任何 CUDA 版本。这是一种方便的方式，可以在不同的
    CUDA 版本下构建和测试应用程序。
- en: 'The instructions for installing NVIDIA Docker can be found at [https://github.com/NVIDIA/nvidia-docker](https://github.com/NVIDIA/nvidia-docker).
    At the time of writing, nvidia-docker could be installed using the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: NVIDIA Docker 安装的说明可以在 [https://github.com/NVIDIA/nvidia-docker](https://github.com/NVIDIA/nvidia-docker)
    上找到。撰写本文时，可以使用以下步骤安装 nvidia-docker：
- en: 'First, add the `nvidia-docker` repositories and update the package cache, as
    follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加 `nvidia-docker` 仓库并更新软件包缓存，操作如下：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, install the NVIDIA Docker runtime, as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装 NVIDIA Docker 运行时，操作如下：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And, finally, restart the Docker daemon, as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，重启 Docker 守护进程，操作如下：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are now ready to test if our NVIDIA Docker is working and can access the
    NVIDIA GPU on our system. To do this we need to run the application `nvidia-smi`
    in the container, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好测试我们的 NVIDIA Docker 是否正常工作并能访问系统上的 NVIDIA GPU。为此，我们需要在容器内运行 `nvidia-smi`
    应用程序，操作如下：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`nvidia-smi` is a tool that talks to the NVIDIA GPU driver on your host system
    to print information about the GPUs available on your system. If your NVIDIA Docker
    installation is successful, you should be able to see the `nvidia-smi` list, the
    NVIDIA GPU driver version and the GPUs you have installed on it.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`nvidia-smi` 是一个与主机系统上的 NVIDIA GPU 驱动程序通信的工具，用于打印系统上可用的 GPU 信息。如果你的 NVIDIA
    Docker 安装成功，你应该能够看到 `nvidia-smi` 列表、NVIDIA GPU 驱动程序版本和已安装的 GPU。'
- en: 'Note the Docker tag we used in this command: `nvidia/cuda:9.0-base`. This is
    a Docker image that has CUDA 9.0 installed inside it. The full list of available
    Docker images and tags can be seen here: [https://hub.docker.com/r/nvidia/cuda/tags](https://hub.docker.com/r/nvidia/cuda/tags).
    A table of CUDA versions and GPU driver versions compatible with each CUDA version
    can be found at [https://github.com/NVIDIA/nvidia-docker/wiki/CUDA](https://github.com/NVIDIA/nvidia-docker/wiki/CUDA).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们在此命令中使用的 Docker 标签：`nvidia/cuda:9.0-base`。这是一个包含 CUDA 9.0 的 Docker 镜像。可用的
    Docker 镜像和标签的完整列表可以在此处查看：[https://hub.docker.com/r/nvidia/cuda/tags](https://hub.docker.com/r/nvidia/cuda/tags)。每个
    CUDA 版本兼容的 GPU 驱动版本的表格可以在 [https://github.com/NVIDIA/nvidia-docker/wiki/CUDA](https://github.com/NVIDIA/nvidia-docker/wiki/CUDA)
    上找到。
- en: 'In the preceding command, we specified that we wanted to use the NVIDIA Docker
    runtime using the `--runtime=nvidia` option. We can also run the same command
    without specifying the runtime by using the alias `nvidia-docker`, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述命令中，我们通过 `--runtime=nvidia` 选项指定了使用 NVIDIA Docker 运行时。我们也可以使用 `nvidia-docker`
    别名来运行相同的命令，而无需指定运行时，操作如下：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Running Caffe2 containers
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Caffe2 容器
- en: The Caffe2 project provides Docker images for different versions of Caffe2 and
    Ubuntu, both for CPU and GPU. The full list of available Docker images can be
    found at [https://hub.docker.com/r/caffe2ai/caffe2/tags](https://hub.docker.com/r/caffe2ai/caffe2/tags).
    The Caffe2 image Docker tag describes its capabilities succinctly. For example,
    the `c2v0.8.1.cpu.min.ubuntu16.04` tag indicates that the image has Caffe2 v0.8.1
    for CPU on Ubuntu 16.04\. The `c2v0.8.1.cuda8.cudnn7.ubuntu16.04` tag indicates
    that the image has Caffe2 v0.8.1 for GPU on Ubuntu 16.04 with CUDA 8.1 and cuDNN
    7 installed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2 项目为不同版本的 Caffe2 和 Ubuntu 提供了 Docker 镜像，既有 CPU 版本，也有 GPU 版本。可用 Docker
    镜像的完整列表可以在 [https://hub.docker.com/r/caffe2ai/caffe2/tags](https://hub.docker.com/r/caffe2ai/caffe2/tags)
    找到。Caffe2 镜像的 Docker 标签简明扼要地描述了其功能。例如，`c2v0.8.1.cpu.min.ubuntu16.04` 标签表示该镜像包含了
    Ubuntu 16.04 上的 Caffe2 v0.8.1 CPU 版本。`c2v0.8.1.cuda8.cudnn7.ubuntu16.04` 标签表示该镜像包含了
    Ubuntu 16.04 上带有 CUDA 8.1 和 cuDNN 7 的 Caffe2 v0.8.1 GPU 版本。
- en: 'We can spin up a Caffe2 CPU image and check whether Caffe2 works inside it
    in the following way:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以启动一个 Caffe2 CPU 镜像，并检查 Caffe2 是否在其中工作，方法如下：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can spin up a Caffe2 GPU image and check whether Caffe2 works inside it
    in the following way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以启动一个 Caffe2 GPU 镜像，并检查 Caffe2 是否在其中工作，方法如下：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note how we need to use `nvidia-docker` instead of `docker` if we are using
    a Caffe2 GPU image.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们使用的是 Caffe2 GPU 镜像，我们需要使用`nvidia-docker`而不是`docker`。
- en: 'Once your Caffe2 containers are working, you can mount your Caffe2 applications
    and data inside it and execute them. You can mount your host directories inside
    a Docker container using the `-v` option and indicating the guest directory to
    mount them to, as shown in the following example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的 Caffe2 容器工作正常，你可以将 Caffe2 应用和数据挂载到容器中并执行它们。你可以使用`-v`选项将主机目录挂载到 Docker 容器中，并指定要挂载到的目标目录，如下所示：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This mounts your `/home/joe/caffe2_apps` directory as `/joe_caffe2_apps` inside
    the container. You are now ready to build Caffe2 applications inside containers
    and deploy those applications to servers locally or in the cloud using containers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将你的`/home/joe/caffe2_apps`目录挂载为容器内的`/joe_caffe2_apps`。现在你可以在容器内构建 Caffe2 应用，并将这些应用通过容器部署到本地或云服务器上。
- en: Caffe2 model visualization
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffe2 模型可视化
- en: DL models contain a high number of layers. Layers have many parameters, such
    as their name, type, weight dimensions, layer-type-specific parameters, input,
    and output tensor names. While typical feedforward network structures do not have
    cycles, the **Recurrent Neural Network** (**RNN**) and other network structures
    have cycles and other topologies. So, the ability to visualize the structure of
    a DL model is important, both for researchers devising new networks to solve problems,
    and for practitioners using new networks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习模型包含大量的层。每一层都有许多参数，例如它们的名称、类型、权重维度、特定层类型的参数、输入和输出张量名称。虽然典型的前馈神经网络结构没有循环，但**递归神经网络**（**RNN**）和其他网络结构有循环和其他拓扑结构。因此，能够可视化深度学习模型的结构非常重要，既对设计新网络来解决问题的研究人员来说如此，也对使用新网络的实践者来说如此。
- en: Visualization using Caffe2 net_drawer
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Caffe2 net_drawer 进行可视化
- en: Caffe2 ships with a simple visualization tool written in Python named `net_drawer`.
    This Python script can be found in your Caffe2 installation directory. For example,
    if you installed Caffe2 at `/usr/local`, then this tool is available at `/usr/local/lib/python2.7/dist-packages/caffe2/python/net_drawer.py`
    on your system. You can also find this tool in your Caffe2 source code at `caff2/python/net_drawer.py`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2 附带了一个用 Python 编写的简单可视化工具，名为`net_drawer`。你可以在 Caffe2 安装目录中找到这个 Python
    脚本。例如，如果你将 Caffe2 安装在`/usr/local`，那么该工具会位于你的系统中`/usr/local/lib/python2.7/dist-packages/caffe2/python/net_drawer.py`。你也可以在
    Caffe2 源代码中找到这个工具，路径为`caffe2/python/net_drawer.py`。
- en: 'We can visualize the AlexNet model from [Chapter 4](95863955-3504-48ab-a217-e95339a754d3.xhtml),
    *Working with Caffe*, using `net_drawer`, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`net_drawer`来可视化来自[第4章](95863955-3504-48ab-a217-e95339a754d3.xhtml)的AlexNet模型，*与
    Caffe 配合使用*，如下所示：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We are indicating that we want to visualize the nodes of the graph in a top-to-bottom
    order using the option `--rankdir TB`. This command renders the AlexNet graph
    shown in *Figure 4.3* in [Chapter 4](95863955-3504-48ab-a217-e95339a754d3.xhtml),
    *Working with Caffe*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了要使用`--rankdir TB`选项按照从上到下的顺序可视化图中的节点。该命令渲染了在[第4章](95863955-3504-48ab-a217-e95339a754d3.xhtml)中显示的AlexNet图，图示见*图
    4.3*，*与 Caffe 配合使用*。
- en: This command writes two files. The first is a text file named `AlexNet.dot`
    that holds the graph structure in the human-readable GraphViz DOT format. The
    second is a PDF file named `AlexNet.pdf` with a graphical rendering of the structure.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令会生成两个文件。第一个是名为`AlexNet.dot`的文本文件，包含以易于人类阅读的 GraphViz DOT 格式表示的图结构。第二个是名为`AlexNet.pdf`的
    PDF 文件，包含该结构的图形渲染。
- en: 'Note that this tool provides other options to customize the visualization.
    You can find these by using the `--help` option, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个工具提供了其他选项来定制可视化。你可以通过使用`--help`选项来查找这些选项，如下所示：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Visualization using Netron
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Netron 进行可视化
- en: '**Netron** is a browser based DL model visualization written in Python. It
    is open source and available at [https://github.com/lutzroeder/netron](https://github.com/lutzroeder/netron).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Netron** 是一个基于浏览器的深度学习模型可视化工具，使用 Python 编写。它是开源的，并且可以在[https://github.com/lutzroeder/netron](https://github.com/lutzroeder/netron)找到。'
- en: Compared to `net_drawer`, Netron has a modern visualization style and allows
    a far better interaction with the graph nodes to view their parameters. Also,
    Netron's zoom capability makes it easier to use on larger networks. The biggest
    advantage of using Netron is that it supports the visualization of models from
    a large number of DL frameworks, such as Caffe2, Caffe, TensorFlow, and also the
    ONNX format.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与`net_drawer`相比，Netron具有现代化的可视化风格，并允许更好地与图形节点交互，以查看其参数。此外，Netron的缩放功能使其在处理大型网络时更加方便。使用Netron的最大优势是它支持来自多个深度学习框架的模型可视化，如Caffe2、Caffe、TensorFlow，以及ONNX格式。
- en: 'Netron can be installed from PyPI repository using the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下命令从PyPI仓库安装Netron：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can visualize our Caffe2 AlexNet protobuf file using Netron, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Netron可视化我们的Caffe2 AlexNet protobuf文件，如下所示：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This opens a new tab in your browser at `http://localhost:8080` with a visualization
    of the AlexNet model. We can zoom in and out using the scroll feature of the mouse.
    Clicking on any layer in the model shows its parameters on the right. This can
    be seen in *Figure 7.2* for our AlexNet model, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的浏览器中打开一个新标签页，地址为`http://localhost:8080`，并展示AlexNet模型的可视化。我们可以通过鼠标的滚动功能进行缩放。点击模型中的任何一层，会在右侧显示该层的参数。如*图7.2*所示，我们的AlexNet模型如下：
- en: '![](img/eba9a08d-39f8-4fb2-8434-6c8168e9e83e.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eba9a08d-39f8-4fb2-8434-6c8168e9e83e.png)'
- en: 'Figure 7.2: Netron visualization of AlexNet with the parameters of the first
    Convolution layer shown on the right'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：Netron可视化的AlexNet，右侧显示第一层卷积层的参数
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In the final chapter of this guide, we looked at two applications of Caffe2
    that demonstrate its ability. As an application of Caffe2 to edge devices, we
    looked at how to build Caffe2 on the Raspberry Pi single-board computers and run
    Caffe2 applications on them. As an application of Caffe2 to the cloud, we looked
    at how to build and run Caffe2 applications inside Docker containers. As an aid
    to understanding the structure of DL models, we examined two tools that helped
    in the visualization of Caffe2 models.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南的最后一章，我们介绍了Caffe2的两个应用案例，展示了它的能力。作为Caffe2在边缘设备上的应用，我们探讨了如何在树莓派单板计算机上构建Caffe2并在其上运行Caffe2应用程序。作为Caffe2在云端的应用，我们探讨了如何在Docker容器内构建和运行Caffe2应用程序。作为帮助理解深度学习模型结构的工具，我们还研究了两个有助于可视化Caffe2模型的工具。
