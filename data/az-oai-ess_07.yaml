- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Code Generation and Documentation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码生成与文档
- en: In the previous chapter, we learned about using Azure Communication Services.
    We practically applied this creating a synthetic chat between a helper and a customer
    using ChatGPT (`gpt-3.5-turbo`). We then looked at the chat to understand what
    was said.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用 Azure Communication Services。我们通过创建一个模拟的帮助者和客户之间的聊天，实际应用了这个技术，使用了
    ChatGPT (`gpt-3.5-turbo`)。接着，我们分析了聊天内容，了解了其中的对话。
- en: Even though we mainly focused on written messages, it’s good to know that Azure
    Communication Services can do more than just text. It can handle voice, video,
    or even a mix of different media as inputs. This flexible approach helps us learn
    important information from customer content. The stats we obtain from this analysis
    can guide us in making our products better in the future. By trying different
    types of conversations, we can find where customers are having trouble and use
    that information to make our products and services better.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们主要集中在书面消息上，但值得注意的是，Azure Communication Services 不仅仅局限于文本。它还可以处理语音、视频，甚至是多种媒体的混合输入。这种灵活的方式帮助我们从客户的内容中获取重要信息。通过分析这些数据，我们可以为未来的产品改进提供指导。通过尝试不同类型的对话，我们可以发现客户遇到的问题，并利用这些信息来提升我们的产品和服务。
- en: Imagine you’re a teacher, and you’ve got a student named Taylor who’s just starting
    to learn how to code. Taylor is excited but a bit confused about where to begin.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你是老师，而你的学生 Taylor 刚开始学习如何编程。Taylor 很兴奋，但对于从哪里开始有些困惑。
- en: 'Now, enter your secret weapon: a smart bot powered by Azure OpenAI. This bot
    is like a helpful friend who can create code and explain things in simple terms.
    Taylor can ask it questions such as, “How do I make the computer say ‘Hello, World!’?”
    And boom! The bot generates the code and explains it step by step.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，登场的是你的秘密武器：一款由 Azure OpenAI 提供支持的智能机器人。这个机器人就像一个能帮助你创建代码并用简单术语解释的朋友。Taylor
    可以问它问题，比如，“我如何让电脑说‘Hello, World!’？”然后，砰！机器人生成代码，并逐步解释它的工作原理。
- en: Taylor’s face lights up because they’re making the computer do cool stuff. But
    here’s the best part – the bot isn’t just a one-trick pony. Taylor can ask it
    more questions, such as “How do I make the computer do something over and over?”
    And the bot responds with a loop (a fancy term for repeating things) and explains
    how it works.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Taylor 的脸上露出了笑容，因为他们让电脑做了一些很酷的事情。但最棒的部分是，机器人不仅仅是一个单纯的功能。Taylor 还可以问它更多的问题，比如“我如何让电脑做某件事反复执行？”然后，机器人会给出一个循环（即重复操作的高级术语），并解释它是如何工作的。
- en: In this chapter, we’re going to explore how you, as a teacher, and Taylor, the
    eager learner, can use this magic bot to make coding easy and fun. We’ll learn
    together, play with different questions, and see how Azure OpenAI turns coding
    into a cool adventure. Get ready for a coding party where you and the bot are
    the VIP guests, making learning to code a blast! Let’s dive in and have some fun!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索你作为老师，以及 eager 学习者 Taylor，如何利用这个智能机器人使编程变得简单有趣。我们将一起学习，玩转不同的问题，并看看
    Azure OpenAI 如何将编程变成一场酷炫的冒险。准备好参加这场编程派对了吗？你和机器人是 VIP 嘉宾，一起享受编程学习的乐趣！让我们一起深入，享受其中的乐趣吧！
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the practical exercises in this chapter, access the source
    code available in this chapter's GitHub repository at [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的实践练习，请访问本章的 GitHub 仓库中的源代码：[https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb)。
- en: 'The technical requirements are the same as for [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
    As a reminder, install the following tools on your local machine to start working
    on the solution:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 技术要求与[*第 4 章*](B21019_04.xhtml#_idTextAnchor059)相同。作为提醒，请在本地计算机上安装以下工具，以开始解决方案的工作：
- en: Python 3.9, 3.10, or 3.11 – [https://www.python.org/downloads/](https://www.python.org/downloads/)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.9、3.10 或 3.11 – [https://www.python.org/downloads/](https://www.python.org/downloads/)
- en: Azure Developer CLI – Azure developer CLI Installation
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 开发者 CLI – Azure 开发者 CLI 安装
- en: Node.js 14+ – [https://nodejs.org/en/download](https://nodejs.org/en/download)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 14+ – [https://nodejs.org/en/download](https://nodejs.org/en/download)
- en: Git – [https://git-scm.com/downloads](https://git-scm.com/downloads)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git – [https://git-scm.com/downloads](https://git-scm.com/downloads)
- en: PowerShell 7+ (`pwsh`) – [https://github.com/powershell/powershell](https://github.com/powershell/powershell)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 7+ (`pwsh`) – [https://github.com/powershell/powershell](https://github.com/powershell/powershell)
- en: 'You’ll also need the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要以下内容：
- en: '**Azure account** – If you’re new to Azure, get an Azure account for free,
    and you’ll get some free Azure credits to get started.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 账户** – 如果您是 Azure 新手，可以免费注册 Azure 账户，开始时将获得一些免费的 Azure 积分。'
- en: 'Azure subscription with access enabled for the Azure OpenAI service. You can
    request access with this form: [https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUNTZBNzRKNlVQSFhZMU9aV09EVzYxWFdORCQlQCN0PWcu](https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUNTZBNzRKNlVQSFhZMU9aV09EVzYxWFdORCQlQCN0PWcu).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 Azure OpenAI 服务访问的 Azure 订阅。您可以通过以下表单申请访问权限：[https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUNTZBNzRKNlVQSFhZMU9aV09EVzYxWFdORCQlQCN0PWcu](https://customervoice.microsoft.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR7en2Ais5pxKtso_Pz4b1_xUNTZBNzRKNlVQSFhZMU9aV09EVzYxWFdORCQlQCN0PWcu)。
- en: 'Azure OpenAI connection and model information:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure OpenAI 连接和模型信息：
- en: OpenAI API key
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI API 密钥
- en: OpenAI embedding model deployment name
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI 嵌入模型部署名称
- en: OpenAI API version
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI API 版本
- en: In addition to the system requirements mentioned here, it is crucial to have
    a solid foundation in fundamental Azure services and a basic proficiency in the
    Python programming language, equivalent to a beginner level (Python 100). These
    skills are vital for efficiently harnessing and leveraging Azure services in this
    chapter’s context. Rest assured, even if you are new to the Azure environment,
    we have designed this chapter to be beginner-friendly. It offers clear explanations
    and includes detailed screenshots to facilitate your learning and get you started
    on the right track.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这里提到的系统要求外，拥有扎实的基础 Azure 服务知识以及基本的 Python 编程能力（相当于 Python 100 初学者级别）也至关重要。这些技能对于高效地利用和发挥
    Azure 服务在本章中的作用非常关键。即使您是 Azure 环境的新手，也可以放心，本章设计时考虑到了初学者，提供了清晰的解释和详细的截图，帮助您顺利学习并走上正轨。
- en: Architecture diagram
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构图
- en: 'For this chapter, the flow is straightforward – the user submits a prompt to
    the OpenAI model that we prepare, which then generates the required code snippets:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，流程很简单——用户向我们准备的 OpenAI 模型提交一个提示，模型随后生成所需的代码片段：
- en: '![Figure 7.1: Architecture diagram](img/B21019_07_1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1：架构图](img/B21019_07_1.jpg)'
- en: 'Figure 7.1: Architecture diagram'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：架构图
- en: Let’s get started.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Building the code generator and documenter solution
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建代码生成器和文档生成解决方案
- en: Since we have set up all the essential services in our Azure portal in our previous
    chapters, we can begin constructing our solution for code generation and documentation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在前面的章节中已经在 Azure 门户中设置了所有必要的服务，因此可以开始构建我们的代码生成和文档化解决方案。
- en: Solution using Azure OpenAI
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Azure OpenAI 的解决方案
- en: 'To build this solution, we mainly need to use two services:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建此解决方案，我们主要需要使用两个服务：
- en: Azure Cognitive Search
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 认知搜索
- en: Azure OpenAI Service
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure OpenAI 服务
- en: We explained the process to create these services in [*Chapter 2*](B21019_02.xhtml#_idTextAnchor023),
    in the *Accessing Azure OpenAI (AOAI) Service* section, and [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059),
    in the *Developing a question answering solution using Azure OpenAI and Azure
    Cognitive Search index* section. Please refer to these chapters for more information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第 2 章*](B21019_02.xhtml#_idTextAnchor023)的 *访问 Azure OpenAI（AOAI）服务* 部分和[*第
    4 章*](B21019_04.xhtml#_idTextAnchor059)的 *使用 Azure OpenAI 和 Azure 认知搜索索引开发问答解决方案*
    部分中解释了创建这些服务的过程。有关更多信息，请参阅这些章节。
- en: We can begin constructing our solution. To develop the code, we will be working
    within a Jupyter notebook.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以开始构建我们的解决方案。为了开发代码，我们将使用 Jupyter notebook。
- en: 'In the following sections, we are going to develop our solution:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将开发我们的解决方案：
- en: Importing packages
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入包
- en: Creating code from a user prompt
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据用户提示生成代码
- en: Importing packages
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入包
- en: 'We need to import the required packages before we develop the solution:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发解决方案之前，我们需要先导入所需的包：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see a variety of libraries being used in the preceding code. Let’s
    delve into each of these libraries in the following table:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在前面的代码中使用了各种库。接下来，我们将深入了解这些库，并在下表中逐一介绍：
- en: '| **Imported Packages** | **Description** |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **导入的包** | **描述** |'
- en: '| `openai` | The OpenAI Python library, which provides access to OpenAI’s **Generative
    Pre-trained Transformer** (**GPT**) models. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `openai` | OpenAI Python 库，提供对 OpenAI **生成预训练变换器**（**GPT**）模型的访问。 |'
- en: '| `os` | Provides a way to interact with the operating system, including reading
    or setting environment variables. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `os` | 提供了一种与操作系统交互的方式，包括读取或设置环境变量。 |'
- en: '| `dotenv.load_dotenv` | Loads environment variables from a `.env` file into
    the script’s environment. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `dotenv.load_dotenv` | 将环境变量从 `.env` 文件加载到脚本的环境中。 |'
- en: 'Table 7.1: Explanation of usage of imported packages'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.1：导入包的使用说明
- en: With all the necessary packages imported and the variables configured in the
    `.env` file, as outlined in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059), we
    can now proceed to extract these variables from the `.``env` file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入了所有必需的包并配置了 `.env` 文件中的变量后，如 [*第 4 章*](B21019_04.xhtml#_idTextAnchor059)
    所述，我们现在可以继续从 `.env` 文件中提取这些变量。
- en: 'The following code loads the `.env` file and then accesses the variables and
    connections defined in the `.``env` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码加载 `.env` 文件，然后访问 `.env` 文件中定义的变量和连接：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We get the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '![Figure 7.2: Output to identify the loading of .env file](img/B21019_07_2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2：用于识别 .env 文件加载的输出](img/B21019_07_2.jpg)'
- en: 'Figure 7.2: Output to identify the loading of .env file'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：用于识别 .env 文件加载的输出
- en: Creating code from a user prompt
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从用户提示生成代码
- en: We have now loaded all the required data into our code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经将所有必需的数据加载到我们的代码中了。
- en: 'The following code instructs an AI language model to come up with a function
    that can be used to add first and last names to a database, based on a provided
    prompt. The generated function code is then printed out for examination:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码指示 AI 语言模型根据提供的提示生成一个可以将名字和姓氏添加到数据库中的函数。生成的函数代码随后会被打印出来以供检查：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get the following output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '![Figure 7.3: Generated output for the user prompt](img/B21019_07_3.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3：用户提示的生成输出](img/B21019_07_3.jpg)'
- en: 'Figure 7.3: Generated output for the user prompt'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：用户提示的生成输出
- en: 'Now, we will create code from a user prompt on the previously generated database.
    This code instructs an AI language model to come up with a function that can be
    used to add first and last names to a database, based on a provided prompt. The
    generated function code is then printed out for examination:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将基于之前生成的数据库从用户提示中创建代码。此代码指示 AI 语言模型根据提供的提示生成一个可以将名字和姓氏添加到数据库中的函数。生成的函数代码随后会被打印出来以供检查：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We get the following output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '![Figure 7.4: Output of the generated query](img/B21019_07_4.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4：生成查询的输出](img/B21019_07_4.jpg)'
- en: 'Figure 7.4: Output of the generated query'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：生成查询的输出
- en: With this, we have explored how ChatGPT can simplify coding tasks by generating
    code and documentation for users through SQL and GPT.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经探讨了 ChatGPT 如何通过 SQL 和 GPT 为用户生成代码和文档，从而简化编码任务。
- en: 'The code snippets for this chapter are available on GitHub and can be accessed
    here: [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码片段可以在 GitHub 上找到，访问链接：[https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/chapter%207.ipynb)
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we installed the necessary tools on our local machine, including
    Python, the Azure Developer CLI, Node.js, Git, and PowerShell. We also ensured
    we had an Azure account and subscription with access to the Azure OpenAI service.
    Additionally, we made sure to have a basic understanding of Azure services and
    Python.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在本地机器上安装了必要的工具，包括 Python、Azure Developer CLI、Node.js、Git 和 PowerShell。我们还确保我们拥有
    Azure 账户并订阅了可以访问 Azure OpenAI 服务的权限。此外，我们确保对 Azure 服务和 Python 有基本的了解。
- en: Next, we focused on building the solution using Azure Cognitive Search and Azure
    OpenAI Service. We worked within a Jupyter notebook to develop the code. We started
    by importing the required packages, such as `openai`, `os`, and `dotenv.load_dotenv`.
    Then, we loaded the `.env` file and extracted the necessary variables, such as
    `OPENAI_API_KEY`, `OPENAI_DEPLOYMENT_ENDPOINT`, and others. We initialized Azure
    OpenAI with these variables.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们集中精力构建使用 Azure Cognitive Search 和 Azure OpenAI 服务的解决方案。我们在 Jupyter Notebook
    中开发代码。首先，我们导入了所需的包，如 `openai`、`os` 和 `dotenv.load_dotenv`。然后，我们加载了 `.env` 文件并提取了必要的变量，如
    `OPENAI_API_KEY`、`OPENAI_DEPLOYMENT_ENDPOINT` 等。我们使用这些变量初始化了 Azure OpenAI。
- en: After setting up the environment, we generated a function to add names to a
    database based on a provided prompt. Following that, we created a SQL query to
    retrieve all records from the database we had just created. Finally, we achieved
    a functional solution that could generate code from user prompts and interact
    with the database effectively.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置环境后，我们生成了一个函数，根据提供的提示将名称添加到数据库中。接着，我们创建了一个 SQL 查询，从刚刚创建的数据库中检索所有记录。最后，我们实现了一个能够根据用户提示生成代码并有效地与数据库交互的功能性解决方案。
