- en: 'Function Optimizations: How and Why'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数优化：如何以及为什么
- en: bAnd now it's time to have some fun. We are going to develop a very powerful,
    three-dimensional application that you won't find anywhere else. This application
    will allow you to visualize how individual functions optimize over time, with
    a two and three-dimensional graphic of each. The source code for this application
    is located in the instructions given for access of the book's source code. This
    application will be very unique in that we will use a mixture of open source and
    third-party controls to create an unbelievably powerful application. Open source
    doesn't handle everything all the time, and for those of you serious about graphics
    I wanted to expose you to some controls aside from the open source standards such
    as ZedGraph, Microsoft Charting Controls, and others. As you will see in a moment,
    the difference is astounding and worth the ride. You can decide later if you want
    to change anything back to completely open source.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: b现在是我们享受乐趣的时候了。我们将开发一个非常强大、三维的应用程序，您在其他地方找不到这样的应用程序。此应用程序将允许您以二维和三维图形的方式可视化单个函数随时间优化。此应用程序的源代码位于本书源代码访问说明中。此应用程序将非常独特，因为我们将在创建一个令人难以置信的强大应用程序时使用开源和第三方控件。开源并不总是处理所有事情，对于那些对图形认真的您，我想让您接触到一些除了开源标准（如
    ZedGraph、Microsoft Charting Controls 等）之外的控制。您将很快看到，这种差异令人震惊，值得这一趟旅程。您可以在以后决定是否要将任何内容改回完全开源。
- en: We are also going to show you how we can use Particle Swarm Optimization to
    enhance visualizations of function optimizations. By doing so  you will see how
    each particle in the swarm converges to the optimal solution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将向您展示如何使用粒子群优化来增强函数优化的可视化。通过这样做，您将看到群中的每个粒子如何收敛到最优解。
- en: 'In this chapter, we are going to accomplish the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将完成以下任务：
- en: Build a Visual Studio WinForms project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个 Visual Studio WinForms 项目
- en: Create a function optimization tester
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个函数优化测试器
- en: Implement graphic controls for our visualizations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现用于可视化的图形控件
- en: Talk about various third-party controls used in this project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论在此项目中使用的各种第三方控件
- en: Learn about the various hyperparameters available
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解可用的各种超参数
- en: Learn to tune and adjust hyperparameters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何调整和调整超参数
- en: Learn the effect of adjusting hyperparameters
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习调整超参数的影响
- en: Learn about the purpose of functions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解函数的目的
- en: Learn how to add new functions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何添加新函数
- en: Demonstrate adding a new function and running a test
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示添加新函数并运行测试
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have a basic knowledge of .NET development using Microsoft
    Visual Studio and C#. You will need to download the code for this chapter from
    the book's website.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要具备使用 Microsoft Visual Studio 和 C# 进行 .NET 开发的基本知识。您需要从本书的网站上下载本章的代码。
- en: Check out the following video to see Code in Action: [http://bit.ly/2ppBmvI](http://bit.ly/2ppBmvI).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际应用：[http://bit.ly/2ppBmvI](http://bit.ly/2ppBmvI)。
- en: Getting started
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'Before we get started, let me show you the product we are going to create.
    When we are done you will have an application that allows you to view graphically
    how a function minimizes or maximizes over iterations. This is contrary to the
    typical text-based representations of such systems, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我向您展示我们将要创建的产品。完成之后，您将拥有一个应用程序，允许您以图形方式查看函数在迭代过程中的最小化或最大化。这与典型的基于文本的系统表示相反，如下所示：
- en: '![](img/244ea886-fc86-4f45-bd1e-f3a6354126b4.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/244ea886-fc86-4f45-bd1e-f3a6354126b4.png)'
- en: 3D Plot
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 绘图
- en: As you can see, this is a very visual application. Let's go ahead and break
    this down into sections that we will refer to as we progress.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是一个非常直观的应用程序。让我们继续将其分解为我们在进展过程中将引用的各个部分。
- en: The first section is the three-dimensional plot and is located on our main page.
    Three dimensions can provide much more insight into the path that each particle
    in the swarm takes, and the swarm itself is taking. It is also much easier to
    see when a particle or the swarm converges on the global minimum. For this plot
    we will use the incredible Nevron chart control. You can find more information
    about this Chart control at [https://www.nevron.com/products-open-vision-nov-chart-control-overview.aspx](https://www.nevron.com/products-open-vision-nov-chart-control-overview.aspx).
    The main user interface is developed with DotNetBar. For those looking for a different
    user interface with all the bells and whistles such as crumbbars, tabs, grids,
    listviews, charts, sparklines, and more, this is a great and more affordable choice
    than say Infragistics or DevExpress. You can find more information about this
    suite of controls at [http://www.devcomponents.com/dotnetbar/](http://www.devcomponents.com/dotnetbar/)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分是三维图，位于我们的主页上。三维图可以提供更多关于群中每个粒子所走的路径以及群本身所走的路径的洞察。当粒子或群收敛到全局最小值时，也更容易看到。对于这个图，我们将使用令人难以置信的Nevron图表控件。您可以在[https://www.nevron.com/products-open-vision-nov-chart-control-overview.aspx](https://www.nevron.com/products-open-vision-nov-chart-control-overview.aspx)找到更多关于此图表控件的信息。主用户界面是用DotNetBar开发的。对于那些寻找具有所有功能，如面包屑栏、标签、网格、列表视图、图表、Sparklines等不同用户界面的人来说，这比Infragistics或DevExpress是一个更棒且更经济的选择。您可以在[http://www.devcomponents.com/dotnetbar/](http://www.devcomponents.com/dotnetbar/)找到更多关于这个控件套件的信息。
- en: '![](img/45942ee6-311c-4ef9-819f-5b1e1bec58bf.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/45942ee6-311c-4ef9-5b1e1bec58bf.png)'
- en: Main Page
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 主页
- en: 'The second section is the two-dimensional plot, and is located on our fourth
    page, the **Charts** tab. Some people would also call this type of plot a spaghetti
    plot. Its job is to plot the swarm on a two-dimensional plane. For this plot we
    will use the Microsoft Chart control. As you can see, this control becomes very
    busy when trying to plot on a two-dimensional surface. The more particles in the
    swarm that you have, the busier your chart will become:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分是二维图，位于我们的第四页，**图表**标签页。有些人也会称这种类型的图为意大利面图。它的任务是绘制群在二维平面上的位置。对于这个图，我们将使用Microsoft图表控件。如您所见，当尝试在二维表面上绘制时，此控件会变得非常繁忙。群中的粒子越多，您的图表就会越繁忙：
- en: '![](img/e4424b8f-313f-4448-9fb1-f4fea9e7fed4.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4424b8f-313f-4448-9fb1-f4fea9e7fed4.png)'
- en: 2D Visualization
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 2D 可视化
- en: 'The third section is the information tree, and is located on our third page,
    the **Details** tab. This tree houses detailed information from each iteration.
    The total number of iterations is a hyperparameter we will discuss shortly. Each
    iteration will track all swarm particle information such as position, speed, best
    position, and fitness, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第三部分是信息树，位于我们的第三页，**详情**标签页。此树包含每个迭代的详细信息。迭代总数是我们将要讨论的超参数之一。每个迭代将跟踪所有群粒子信息，如位置、速度、最佳位置和适应度，如下所示：
- en: '![](img/9c7a92a0-9f87-40c3-9676-7be2a34e354d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9c7a92a0-9f87-40c3-9676-7be2a34e354d.png)'
- en: Information Tree
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 信息树
- en: 'The fourth section is the function hyperparameters and is located on our main
    page. These parameters control the function and function optimizations and are
    essential for plotting both the two and three-dimensional plots. The individual
    parameters themselves will be discussed in a later section:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第四部分是函数超参数，位于我们的主页上。这些参数控制函数和函数优化，对于绘制二维和三维图是必不可少的。这些参数本身将在稍后的部分进行讨论：
- en: '![](img/1dea8c0c-0baf-4411-8942-256ca28657bd.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dea8c0c-0baf-4411-8942-256ca28657bd.png)'
- en: Parameters
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: 'The fifth section is the plot replay controls, also located on our main page
    at the bottom, underneath the hyperparameters. Aside from running the main function
    optimization iteration loop, they are responsible for replaying the function optimization
    plot for both the two and three-dimensional plots. You can play, pause, rewind,
    step forward, and step backward, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第五部分是绘图回放控件，也位于我们的主页底部，在超参数之下。除了运行主函数优化迭代循环外，它们还负责回放二维和三维图的功能优化图。您可以播放、暂停、倒退、快进和后退，如下所示：
- en: '![](img/4c1d72a7-4206-4d74-b41b-905a23cf8861.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4c1d72a7-4206-4d74-b41b-905a23cf8861.png)'
- en: Run controls
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行控件
- en: With the details behind us, let's move on to discussing exactly how we are going
    to create our application. Let the fun begin!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解细节之后，让我们继续讨论我们如何创建应用程序的确切方法。让我们开始享受乐趣吧！
- en: Function minimization and maximization
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数的最小化和最大化
- en: Function minimization and maximization are the process of finding the smallest
    and largest value of a given function. Let's talk briefly about that value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的最小化和最大化是寻找给定函数的最小值和最大值的过程。让我们简要地谈谈这个值。
- en: If the value is within a given range, then it is called the local extrema; if
    it is within the entire domain of a function then it is called the global extrema.
    Let's say we have a function f, and it's defined against a domain X. The maximum,
    or global, point at x* is f(x*) is greater than or equal to f(x) for all x in
    the domain X. Conversely, the function's global minimum point at x* is f(x*) is
    less than or equal to f(x) for all x in the domain X.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值在一个给定的范围内，那么它被称为局部极值；如果它在函数的整个定义域内，那么它被称为全局极值。假设我们有一个函数 f，它定义在域 X 上。在 x*
    处的极值，即 f(x*)，对于域 X 中的所有 x 都大于或等于 f(x)。相反，函数在 x* 处的全局最小值是 f(x*)，对于域 X 中的所有 x 都小于或等于
    f(x)。
- en: 'In a simpler fashion, the maximum point is also called the maximum value, and
    the minimum point is called the minimum value, of the function. The global maximum
    or minimum is either the highest or lowest function value in the entire domain
    space (search space), and the local maximum or minimum is the highest or lowest
    value in a defined neighborhood within that search space (it is not allowed to
    reside on the boundary at all), as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以更简单的方式，最大点也被称为最大值，最小点被称为最小值，函数。全局最大值或最小值是整个域空间（搜索空间）中的最高或最低函数值，局部最大值或最小值是在该搜索空间内定义的某个邻域中的最高或最低值（不允许位于边界上），如下所示：
- en: '![](img/e7eb27d7-f4ad-4896-b80d-b47b71219a96.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e7eb27d7-f4ad-4896-b80d-b47b71219a96.png)'
- en: Global and Local Optimums
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 全局和局部最优解
- en: 'In this simple illustration, **D** is the global minimum and **G** is the global
    maximums. **A**, **C**, and **E** are local maximums (it is important to note
    that a function can have more than one global or local maximum or minimum). **B**
    and **F** are considered local minimum. **X**, **Y**, and **Z** exist around the
    minimum value **F**, since the value of **Y** is less than both **X** and **Z**:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的示意图中，**D** 是全局最小值，**G** 是全局最大值。**A**、**C** 和 **E** 是局部最大值（重要的是要注意，一个函数可以有一个以上的全局或局部最大值或最小值）。**B**
    和 **F** 被认为是局部最小值。**X**、**Y** 和 **Z** 存在于最小值 **F** 附近，因为 **Y** 的值小于 **X** 和 **Z**：
- en: '![](img/a40b965b-5c2c-4935-ad0c-c837894bdf10.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a40b965b-5c2c-4935-ad0c-c837894bdf10.png)'
- en: 3D Tape Plot
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 磁带图
- en: Let's take a real example. Let's say we are using the function sin(x). The maximum
    value for this function is +1, and the minimum value would be -1\. Therefore,
    we have the global minimum and maximum. Sin(x) can take on any value between negative
    and positive infinity, but over all of these values, the maximum can only be +1
    and, the minimum can only be -1.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个真实的例子。假设我们使用函数 sin(x)。这个函数的最大值是 +1，最小值会是 -1。因此，我们有了全局最小值和最大值。sin(x) 可以取负无穷大到正无穷大之间的任何值，但在这个所有值中，最大值只能是
    +1，最小值只能是 -1。
- en: If we then restrict the search space (global domain) to between 0 and 90 (sometimes
    people call this the interval), sin(x) will now have a minimum of 0, and its value
    will be 0\. However, the global or maximum value will now be 90 and the value
    is 1, because we restricted our search space to between 0 and 90\. All values
    of sin(x) will lie between 0 and 1, within the interval of 0 to 90.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将搜索空间（全局域）限制在 0 到 90 之间（有时人们称之为区间），那么 sin(x) 现在的最小值将是 0，其值也将是 0。然而，现在的全局或最大值将是
    90，其值是 1，因为我们限制了我们的搜索空间在 0 到 90 之间。sin(x) 的所有值都将位于 0 到 1 之间，在 0 到 90 的区间内。
- en: What is a particle?
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是粒子？
- en: One of the main components we are going to be dealing with is what is known
    as a **particle—**hence, Particle Swarm Optimization. To briefly provide an analogy
    as to what a particle is, let's look at it this way. Let's say that we see a flock
    of birds flying in the sky. Each bird in this flock is a particle. We see a school
    of fish swimming in the water. Each fish is a particle. We knocked down that bee
    hive and were attacked by hundreds of bees. Each bee that attacked us was, you
    got it, a particle!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要处理的主要组成部分之一是所谓的 **粒子**——因此，粒子群优化。为了简要地提供一个关于什么是粒子的类比，让我们这样看。假设我们看到一群鸟在天空中飞翔。这群鸟中的每一只鸟都是一个粒子。我们看到一群鱼在水中游动。每条鱼都是一个粒子。我们撞倒了那个蜂巢，被数百只蜜蜂攻击。攻击我们的每一只蜜蜂，没错，都是一个粒子！
- en: Each particle has fitness values which, once evaluated by the fitness function
    to be optimized, will tell us how it ranks in the swarm. Additionally, we also
    have velocities that direct the flying of each particle. The particles, like the
    birds, fly through our problem space by following the *optimum* particle, which
    would be the leader of the flock of birds.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个粒子都有适应度值，一旦通过要优化的适应度函数评估，就会告诉我们它在群体中的排名。此外，我们还有速度，这些速度指导每个粒子的飞行。粒子，就像鸟儿一样，通过跟随*最优*粒子（鸟群中的领导者）在我们的问题空间中飞行。
- en: 'Now that we know exactly what a particle is, how do we describe it in computational
    terms? We will define a structure like the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确切地知道了一个粒子是什么，我们如何用计算术语来描述它？我们将定义如下结构：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With that behind us, let''s go ahead and create our project. You should have
    Microsoft Visual Studio installed and open. If you have not installed Microsoft
    Visual Studio yet, you can install the free Community Version from the Microsoft
    web site. Once this is complete, open Microsoft Visual Studio and create a Windows
    Forms project as shown in the following screenshot. In our instance we are using
    .NET version 4.7.1\. Feel free to use whatever version you have, but it needs
    to be at least version 4.5.2 or higher:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，让我们继续创建我们的项目。你应该已经安装并打开了Microsoft Visual Studio。如果你还没有安装Microsoft Visual
    Studio，你可以从Microsoft网站安装免费的社区版。一旦完成，打开Microsoft Visual Studio并创建一个如图所示的Windows表单项目。在我们的例子中，我们使用的是.NET版本4.7.1。你可以自由使用你有的任何版本，但需要至少是4.5.2或更高版本：
- en: '![](img/376b6c61-cf99-46d5-861e-30e450919bc0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/376b6c61-cf99-46d5-861e-30e450919bc0.png)'
- en: New Project Window
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 新项目窗口
- en: Next, let me mention that our user interface is created with a third-party product
    called **DotNetBar**. This is a fantastic, light weight user-interface library.
    It can be found here: [http://www.devcomponents.com/dotnetbar/](http://www.devcomponents.com/dotnetbar/)[.We
    are now free to begin to focus on the formulation of our project. We will need
    to initialize some general areas of our program, such as the Swarm, the Chart,
    and the State.](http://www.devcomponents.com/dotnetbar/)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我提一下，我们的用户界面是用一个名为**DotNetBar**的第三方产品创建的。这是一个出色的轻量级用户界面库。它可以在以下位置找到：[http://www.devcomponents.com/dotnetbar/](http://www.devcomponents.com/dotnetbar/)。我们现在可以开始专注于我们项目的公式化。我们需要初始化我们程序的一些通用区域，例如群体、图表和状态。](http://www.devcomponents.com/dotnetbar/)
- en: Swarm initialization
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 群体初始化
- en: To begin, we need to initialize our swarm and all the variables and properties
    that go along with it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要初始化我们的群体以及与之相关的所有变量和属性。
- en: 'To begin the process, let''s create a particle called `GlobalBest` (which I
    will refer to throughout the book as `gbest`) and initialize its best fitness
    value to either positive or negative infinity, depending upon whether the user
    has selected a strategy of `Minimization` or `Maximization`. We do so like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始这个过程，让我们创建一个名为`GlobalBest`的粒子（我在整本书中会将其称为`gbest`），并将其最佳适应度值初始化为正无穷或负无穷，具体取决于用户是否选择了`最小化`或`最大化`策略。我们这样做：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we will determine which swarm size the user desires, and then initialize
    all the particles in the swarm. Each particle will have several properties that
    will need to be initialized. They are:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将确定用户想要的群体大小，然后初始化群体中的所有粒子。每个粒子将需要初始化几个属性。它们是：
- en: 'Position:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Speed:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 速度：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Fitness value:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 适应度值：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Best fitness value:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳适应度值：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Best position:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳位置：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With this done, we need to check and see if the individual particles'' best
    fitness value (`pbest`) is better than the global particle (the team''s) fitness
    value (`gbest`). If so we will update the global particle to that best position
    and fitness value and the other particles will follow it. We do so like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们需要检查个体粒子的最佳适应度值（`pbest`）是否优于全局粒子（团队）的适应度值（`gbest`）。如果是这样，我们将更新全局粒子到那个最佳位置和适应度值，其他粒子将跟随它。我们这样做：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we will fill the swarm and global plot matrix like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将填充群体和全局图矩阵，如下所示：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once this is done, we will update our information tree with all the details
    associated with the swarm now. To do so we need to iterate through the entire
    swarm and record our information for display. Since we are using a Windows Tree
    Control, we will plot each swarm particle as a separate node, indicated by the
    identifier `PSODisplayType.Swarm`. The information underneath each node will be
    indicated by the identifier `PSODisplayType.SwarmPosition`. We accomplish this
    like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们将使用与群相关的所有详细信息更新我们的信息树。为此，我们需要遍历整个群并记录我们的信息以供显示。由于我们使用的是 Windows 树控件，我们将每个群粒子作为单独的节点绘制，标识为
    `PSODisplayType.Swarm`。每个节点下的信息将由标识符 `PSODisplayType.SwarmPosition` 指示。我们是这样完成的：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Chart initialization
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表初始化
- en: In our application, which we will call the workbench for short, we are dealing
    with two charts. The first chart is three-dimensional, the second is two-dimensional.
    Each one reflects the same data albeit from a different perspective. In our chart
    initialization function, we will initialize both charts at the same time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将简称为工作台，我们正在处理两个图表。第一个图表是三维的，第二个是二维的。每个图表都反映了相同的数据，尽管是从不同的角度。在我们的图表初始化函数中，我们将同时初始化两个图表。
- en: '`chartPSO` is the name of our two-dimensional Microsoft Chart Control chart'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chartPSO` 是我们二维 Microsoft Chart 控件图表的名称'
- en: '`nChartControl2` is the name of our three-dimensional Nevron chart'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nChartControl2` 是我们三维 Nevron 图表的名称'
- en: Why not use the same control for both visualizations? That certainly could have
    been the case, but this way you, the reader, get exposure to two different types
    of control and can decide which you prefer.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不使用相同的控件进行两种可视化呢？这当然可能是一个案例，但这样你可以，读者，接触到两种不同类型的控件，并决定你更喜欢哪一种。
- en: 'The first thing that we will do is to create a random variable called `_MarkerStyle`.
    Each particle will have a different marker style in the two-dimensional plot,
    and we will use this random variable to control the correct creation of the style
    like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的第一件事是创建一个名为 `_MarkerStyle` 的随机变量。每个粒子在二维图中将具有不同的标记样式，我们将使用这个随机变量来控制样式的正确创建，如下所示：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next on our list of things to do is to clear the series data from both controls,
    just in case there is data left over. We do so with the following two lines of
    code. Remember, `chartPSO` is our two-dimensional chart and, `nChartControl2`
    is our three-dimensional chart control:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的待办事项列表中，我们需要清除两个控件中的系列数据，以防有数据残留。我们使用以下两行代码来完成此操作。记住，`chartPSO` 是我们的二维图表，而
    `nChartControl2` 是我们的三维图表控件：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To get the best visualization from our three-dimensional control, we need to
    ensure that it fits the entire chart area. We do that by setting the bounds mode
    like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从我们的三维控制中获得最佳的可视化效果，我们需要确保它适合整个图表区域。我们通过设置边界模式如下来实现：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we need to make sure that each particle in the swarm has an area of representation
    in both charts. We do that by iterating through the swarm size and setting each
    variable correctly. We start by adding the two-dimensional chart configuration
    first:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要确保群中的每个粒子在两个图表中都有一个表示区域。我们通过迭代群的大小并正确设置每个变量来实现这一点。我们首先添加二维图表配置：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then the three-dimensional chart configuration, like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是三维图表配置，如下所示：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, let''s set the final variables of the two-dimensional chart as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按照以下方式设置二维图表的最终变量：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And finally, to give our three-dimensional chart the most flexibility for use,
    we need to add the following toolbars:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使我们的三维图表在使用时具有最大的灵活性，我们需要添加以下工具栏：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: State initialization
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态初始化
- en: With the swarm and chart created and initialized, we now focus on initializing
    the state of the application itself. This means we are going to collect all the
    user-defined values and use them to initialize the hyperparameters themselves.
    We will delve into each in more detail in our chapter on hyperparameters, but
    for now you just need to be aware that they exist. Let's talk about each as it
    relates to state initialization.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 群和图表创建并初始化后，我们现在专注于初始化应用程序本身的状态。这意味着我们将收集所有用户定义的值并使用它们来初始化超参数本身。我们将在关于超参数的章节中详细探讨每个参数，但就目前而言，你只需要知道它们存在。让我们就它们与状态初始化的关系逐一讨论。
- en: 'First, we will determine the strategy we will use to initialize our function
    optimization. We will store this choice in a variable labeled `PSO_Type`. Our
    two choices of strategy are `Minimization` and `Maximization`. We determine the
    type like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将确定我们将用于初始化函数优化的策略。我们将把这个选择存储在一个标记为`PSO_Type`的变量中。我们的两种策略选择是`最小化`和`最大化`。我们是这样确定类型的：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we will initialize the number of dimensions, upper and lower bounds,
    and speed limits:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将初始化维度数量、上限和下限以及速度限制：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We continue with initializing our inertia, cognitive, and social intelligence
    weights:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续初始化惯性、认知和社会智能权重：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'One of our most critical hyperparameters relates to our swarm and its population
    size – how many particles will be in the swarm. Remember, even though we have
    not placed boundary checks in the source code itself, this value should ideally
    be a value between 5 and 40\. I often use a value of 5 to start my testing. We
    determine the swarm size by looking at the value that the user entered like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最重要的超参数之一与我们的群体及其种群大小有关——群体中将有多少个粒子。记住，尽管我们在源代码本身中没有放置边界检查，但这个值理想情况下应该在5到40之间。我通常使用5作为开始测试的值。我们通过查看用户输入的值来确定群体大小，如下所示：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we initialize our global variables to track the maximum efficiency
    of the swarm:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们初始化全局变量以跟踪群体的最大效率：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Controlling randomness
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制随机性
- en: 'As the initialize process continues, position, speed, and fitness are initialized
    in the Swarm Initialization section. Here''s a brief look at how we do randomization.
    We start with each of those hyperparameters, and then randomize the values between
    the upper and lower bounds we stated in our hyperparameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 随着初始化过程的继续，位置、速度和适应度在群体初始化部分被初始化。以下是我们如何进行随机化的简要概述。我们从每个超参数开始，然后在我们超参数中指定的上限和下限之间随机化值：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Updating the swarm position
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新群体位置
- en: 'The swarm position is the current position of the swarm relative to the global
    optimum – in this case, the hidden treasure. It is constrained within the upper
    and lower domain bounds as shown in the following. But remember, these two are
    hyperparameters entered in the same panel!:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 群体位置是群体相对于全局最优解（在这种情况下，隐藏的宝藏）的当前位置。它被限制在上限和下限域界限内，如下所示。但记住，这两个是在同一面板中输入的超参数！：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Updating the swarm speed
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新群体速度
- en: 'The swarm speed is the speed at which the entire swarm heads towards the global
    optimum, that is, the hidden treasure. It is first calculated based upon the formula
    seen as follows, and then constrained within the upper and lower bound speed hyperparameter
    values. As you can see, we also apply various weights and randomization values
    to calculate and adjust the speed, like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 群体速度是指整个群体朝向全局最优解（即隐藏的宝藏）前进的速度。它首先根据以下公式计算得出，然后被限制在上限和下限速度超参数值内。正如你所见，我们还应用了各种权重和随机化值来计算和调整速度，如下所示：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Main program initialization
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主程序初始化
- en: When the main form initially loads, this is when our main initialization process
    begins. Let's walk through this method and talk about what exactly happens. In
    this method we are concerned with three-dimensional chart initialization.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当主窗体首次加载时，这是我们的主要初始化过程开始的时候。让我们来分析这个方法，并讨论到底发生了什么。在这个方法中，我们关注的是三维图表的初始化。
- en: 'First, we establish some general parameters for the chart:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为图表建立一些通用参数：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we handle showing our interlaced strip on the back-left wall:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们处理显示背左墙上的交错条纹：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we handle showing our *x* axis gridlines like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们处理显示*x*轴网格线，如下所示：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Running Particle Swarm Optimization
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行粒子群优化
- en: With our main functions in place and everything initialized from our hyperparameters,
    we can now focus on being able to run higher level functions. One of our PSO functions
    is the `PSORun` method. This method is executed once the user clicks on the **Run**
    button ![](img/366eaec3-5a3a-40c4-b358-f73338c16da5.png). Let's walk through this
    higher-level function now.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主要函数就位并且从我们的超参数中初始化了一切之后，我们现在可以专注于能够运行高级函数。我们PSO函数中的一个函数是`PSORun`方法。当用户点击**运行**按钮时，这个方法会被执行![图片](img/366eaec3-5a3a-40c4-b358-f73338c16da5.png)。现在让我们来分析这个高级函数。
- en: 'The first thing that we do is to initialize our state by calling our `InitState` function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过调用我们的`InitState`函数来初始化我们的状态：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After this we will clear out our information tree, create a new stopwatch responsible
    for timing our function, then run our `Swarm_Run` method. This will perform the
    actual function optimization behind the scenes, which usually will happen in just
    milliseconds depending upon the swarm size, iterations, and dimensions:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们将清除我们的信息树，创建一个新的计时器，用于计时我们的函数，然后运行我们的`Swarm_Run`方法。这将在幕后执行实际的功能优化，这通常只需要毫秒，具体取决于群体大小、迭代次数和维度：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we create the variables responsible for tracking the global and individual
    positions of the entire swarm:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建负责跟踪整个群体全局和个体位置的变量：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And finally, we initialize our charts, and play back the swarm''s plot at a
    much slower pace so the end user can see what has transpired. We do this via a
    call to the three methods as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们初始化我们的图表，以较慢的速度回放群体的绘图，以便最终用户可以看到发生了什么。我们通过以下三种方法的调用来完成此操作：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Our user interface
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的用户界面
- en: 'When we initially start our application, we have the proverbial blank slate.
    After initialization, we have completed the following items. Please note that
    the numbers relate to the screenshot showing the screen, shown as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们最初启动我们的应用程序时，我们有一个典型的空白石板。初始化后，我们已经完成了以下项目。请注意，数字与显示屏幕的截图相关，如下所示：
- en: Our parameters are initialized to the default values
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的参数初始化为默认值
- en: 'Our three-dimensional chart is initialized to the default values and has no
    series data:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的三维图表初始化为默认值，没有系列数据：
- en: '![](img/35b11939-5834-4c79-870b-166287b77a41.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/35b11939-5834-4c79-870b-166287b77a41.png)'
- en: Blank 3D Chart
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 空白3D图表
- en: Run button
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行按钮
- en: 'The run button executes the Particle Swarm Optimizer based upon the function
    and the strategy selected:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 运行按钮根据所选函数和策略执行粒子群优化器：
- en: '![](img/ce918769-844c-4710-801f-e5e34cc38514.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ce918769-844c-4710-801f-e5e34cc38514.png)'
- en: Rewind button
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快退按钮
- en: 'The Rewind button completely rewinds a PSO plot to the beginning:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 快退按钮将PSO图完全倒退到开始位置：
- en: '![](img/dc09e7cd-7384-4262-842f-d65c8961a217.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc09e7cd-7384-4262-842f-d65c8961a217.png)'
- en: Back button
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后退按钮
- en: 'The Back button takes one step backward in the particle swarm optimization
    test run:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 后退按钮在粒子群优化测试运行中向后迈出一步：
- en: '![](img/bddde3e5-68d8-4b7e-89ed-0a75a6ed1bc3.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bddde3e5-68d8-4b7e-89ed-0a75a6ed1bc3.png)'
- en: Play button
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放按钮
- en: 'The Play button replays a particle swarm optimization run from the beginning:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 播放按钮从头开始回放粒子群优化运行：
- en: '![](img/54050c94-424d-47b9-8876-88bf985e9df3.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54050c94-424d-47b9-8876-88bf985e9df3.png)'
- en: Pause button
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停按钮
- en: 'The Pause button pauses a replay of a particle swarm optimization run:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停按钮暂停粒子群优化运行的回放：
- en: '![](img/73f9d717-3342-4c2a-8c5f-e55cc94ab5e8.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/73f9d717-3342-4c2a-8c5f-e55cc94ab5e8.png)'
- en: Forward button
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前进按钮
- en: 'The Forward button takes one step forward in the particle swarm optimization
    test run:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 前进按钮在粒子群优化测试运行中向前迈出一步：
- en: '![](img/59c35c1a-236b-4860-a84b-8113a789b85a.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59c35c1a-236b-4860-a84b-8113a789b85a.png)'
- en: Hyperparameters and tuning
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超参数和调整
- en: Hyperparameters in general are parameters used for tuning various machine learning
    functions. This is no different in our application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 超参数通常用于调整各种机器学习函数的参数。在我们的应用程序中也是如此。
- en: 'On the front screen of our application, the following is what our hyperparameter
    panel looks like. We will discuss each hyperparameter in detail:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用程序的前端屏幕上，以下是我们超参数面板的外观。我们将详细讨论每个超参数：
- en: '![](img/e9f7006f-5d01-4754-8b6c-e7218c1f6a1e.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e9f7006f-5d01-4754-8b6c-e7218c1f6a1e.png)'
- en: Parameters
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: Function
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'This is a list of all available functions for optimization. Simply select the
    function you would like to use, set the strategy and other parameters, and click
    the **Run** button. Please see the function optimization reference for more detailed
    information about each function. There are over 50 different functions currently
    available at the time of writing, and we will cover in a later chapter how you
    can add many of your own, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个所有可用优化函数的列表。只需选择您想使用的函数，设置策略和其他参数，然后点击**运行**按钮。请参阅函数优化参考，以获取有关每个函数的更详细信息。在撰写本文时，有超过50种不同的函数可用，我们将在后面的章节中介绍如何添加您自己的函数，如下所示：
- en: '![](img/06d8aac6-1d08-4c4c-9bf6-144ddbdbe355.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/06d8aac6-1d08-4c4c-9bf6-144ddbdbe355.png)'
- en: Functions
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 函数
- en: Strategy
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略
- en: 'There are two types of strategy one can apply to function optimization. You
    can either *maximize* or *minimize* your function optimization, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将两种策略应用于函数优化。您可以选择最大化或最小化函数优化，如下所示：
- en: '![](img/cacd44fa-51a2-4071-a715-245bc4057f54.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cacd44fa-51a2-4071-a715-245bc4057f54.png)'
- en: What do we mean by this? When we talk of maximizing or minimizing a function,
    what we mean is what the minimum or maximum value of that function can be. This
    is usually discussed in terms of either a *global range* or *local range*.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里所说的“最大化”或“最小化”一个函数，指的是该函数的最小值或最大值可能是什么。这通常是在全局范围或局部范围内进行讨论的。
- en: A global range would mean we want to determine the minimum or maximum value
    of the function over the whole range of input over which the function can be defined.
    This is commonly known as the domain of the function.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 全局范围意味着我们想要确定函数在整个定义域上的最小值或最大值。这通常被称为函数的定义域。
- en: A local range, on the other hand, would mean we want to determine the minimum
    or maximum value of the function over the given local range, which will be a subset
    of the global range.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，局部范围意味着我们想要确定函数在给定局部范围内的最小值或最大值，这将是全局范围的一个子集。
- en: Dim size
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dim size
- en: 'Dimension size is used within the main loop (the final inner loop) to process
    the optimization for the function selected. 2 is the default value:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 维度大小在主循环（最内层循环）中用于处理所选函数的优化。默认值为 2：
- en: '![](img/1464a482-8d72-41f9-90e6-d05fdc3772cd.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1464a482-8d72-41f9-90e6-d05fdc3772cd.png)'
- en: 'The relevant code is as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 相关代码如下：
- en: '[PRE32]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Upper bound
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上限
- en: 'The upper bound is the upper limit of constraint which the swarm must adhere
    to. This is used to update the swarm position and to scale it within range. 10
    is the default value:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上限是群必须遵守的约束的上限。这用于更新群的位置并在范围内进行缩放。默认值为 10：
- en: '![](img/f22b1902-19f1-4bcf-9dff-c1ed08803731.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f22b1902-19f1-4bcf-9dff-c1ed08803731.png)'
- en: 'Please note that, depending upon the function you are optimizing, the upper
    and lower bounds could be quite different from the default. Consult the reference
    guide for your function and see what the upper and lower constraints are:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据你正在优化的函数，上限和下限可能与默认值有很大不同。请参考你函数的参考指南，看看上限和下限约束是什么：
- en: '[PRE33]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Upper Bound = 10:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 上限 = 10：
- en: '![](img/81242ff8-a8a8-4c0a-86e1-86943f8b0094.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/81242ff8-a8a8-4c0a-86e1-86943f8b0094.png)'
- en: 3D Plot
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Upper Bound = 20:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 上限 = 20：
- en: '![](img/7fcfbe87-aa33-4e04-bb23-758c9fa223ab.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7fcfbe87-aa33-4e04-bb23-758c9fa223ab.png)'
- en: 3D Plot
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Lower bound
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下限
- en: 'This is the lower limit of constraint which the swarm must adhere to. This
    is used to update the swarm position and to scale it within range. -10 is the
    default value:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是群必须遵守的约束的下限。这用于更新群的位置并在范围内进行缩放。默认值为 -10：
- en: '![](img/d2f0b983-fc5b-4387-a0df-9529b159dc31.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d2f0b983-fc5b-4387-a0df-9529b159dc31.png)'
- en: 'The relevant code is as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 相关代码如下：
- en: '[PRE34]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Upper bound speed
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上限速度
- en: 'The upper bound speed is used to help determine the swarm speed. 10 is the
    default value:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 上限速度用于帮助确定群速度。默认值为 10：
- en: '![](img/058bc8d8-438a-45ab-9f2d-7439095fb534.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/058bc8d8-438a-45ab-9f2d-7439095fb534.png)'
- en: 'The code is as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Upper Bound Speed = 10:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上限速度 = 10：
- en: '![](img/08b29e94-bcfe-4f19-9c37-9048bc5c35ec.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08b29e94-bcfe-4f19-9c37-9048bc5c35ec.png)'
- en: 3D Plot
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Upper Bound Speed = 20:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 上限速度 = 20：
- en: '![](img/e66d7cf3-498b-42d6-bc2a-141bf941f379.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e66d7cf3-498b-42d6-bc2a-141bf941f379.png)'
- en: 3D Plot
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Lower bound speed
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下限速度
- en: 'The lower bound speed is used to help determine the swarm speed. **-10** is
    the default value:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 下限速度用于帮助确定群速度。默认值为 **-10**：
- en: '![](img/1feab5d0-c808-4d8a-897d-fe8847ad25aa.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1feab5d0-c808-4d8a-897d-fe8847ad25aa.png)'
- en: 'The code is as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE36]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Decimal places
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小数位数
- en: 'This is the total number of decimal places rounding occurs to. 5 is the default
    value:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这是四舍五入时发生的总小数位数。默认值为 5：
- en: '![](img/9d053175-9ba6-4080-88c9-bf5e513a6f35.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9d053175-9ba6-4080-88c9-bf5e513a6f35.png)'
- en: 'The code is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE37]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Swarm size
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 群体大小
- en: 'The total size of the swarm. This equates to the total number of particles
    available for optimization. There is a considerable amount of theory as to the
    appropriate number to use here. Remember, as we stated before, no free lunch!
    Generally, a value of 20-40 seems to be the most widely acceptable. 20 is the
    default value:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 群体总大小。这等于可用于优化的总粒子数。关于这里应该使用多少的理论有很多。记住，正如我们之前所说的，没有免费的午餐！一般来说，20-40 似乎是最广泛接受的值。默认值为
    20：
- en: '![](img/dda0a875-d56a-458e-9e8e-c5bd652b82f3.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dda0a875-d56a-458e-9e8e-c5bd652b82f3.png)'
- en: 'The code is as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE38]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Swarm Size = 10:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 群体大小 = 10：
- en: '![](img/b862f6ff-512d-4541-ac02-be36b595cfa8.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b862f6ff-512d-4541-ac02-be36b595cfa8.png)'
- en: 3D Plot
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Swarm Size = 3:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '群体大小 = 3:'
- en: '![](img/b30141ee-b78e-4570-8b76-60cce9883f4e.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b30141ee-b78e-4570-8b76-60cce9883f4e.png)'
- en: 3D Plot
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Max iterations
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大迭代次数
- en: 'The total number of iterations used for testing. 100 is the default value:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试的总迭代次数。默认值为100：
- en: '![](img/1b6973c4-15e6-4d80-a504-8d604529f802.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b6973c4-15e6-4d80-a504-8d604529f802.png)'
- en: 'The code is as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE39]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Max Iterations = 100:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '最大迭代次数 = 100:'
- en: '![](img/e717c141-9978-44a7-ae8c-5846317065e0.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e717c141-9978-44a7-ae8c-5846317065e0.png)'
- en: 3D Plot
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Max Iterations = 25:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '最大迭代次数 = 25:'
- en: '![](img/bf12eea9-6fb7-4c33-8a8a-6dd807f916ad.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bf12eea9-6fb7-4c33-8a8a-6dd807f916ad.png)'
- en: 3D Plot
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Inertia
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惯性
- en: 'Inertia weight was initially introduced to balance optimization between the global
    and local search abilities. In our case, inertia is multiplied by the inertia
    weight to adjust the swarm speed. Generally, the accepted values range from 0.4
    to 1 for this variable. 0.729 is the default value:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 惯性权重最初被引入以平衡全局和局部搜索能力之间的优化。在我们的情况下，惯性乘以惯性权重以调整群体速度。通常，这个变量的接受值范围在0.4到1之间。默认值为0.729：
- en: '![](img/73048129-cd53-45e7-b79d-5216229d392f.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/73048129-cd53-45e7-b79d-5216229d392f.png)'
- en: 'The code is as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE40]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Inertia = 0.729:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '惯性 = 0.729:'
- en: '![](img/e5b20d6d-23a3-485c-9c84-11e0a4387a51.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5b20d6d-23a3-485c-9c84-11e0a4387a51.png)'
- en: 3D Plot
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Inertia = 0.4:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '惯性 = 0.4:'
- en: '![](img/818ef43f-69e4-4f9b-9249-b2643cd689ec.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/818ef43f-69e4-4f9b-9249-b2643cd689ec.png)'
- en: 3D Plot
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Social weight
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社会权重
- en: 'Social weight is used to adjust the swarm speed. It is the factor that determines
    the extent to which the particle will follow the swarms'' best solution. **1.49445**
    is the default value:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 社会权重用于调整群体速度。它是决定粒子将跟随群体最佳解的程度的一个因素。**1.49445**是默认值：
- en: '![](img/bfde6d77-883c-443f-b63f-35e3fb18473b.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bfde6d77-883c-443f-b63f-35e3fb18473b.png)'
- en: 'The code is as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE41]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Social Weight = 1.49445:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '社会权重 = 1.49445:'
- en: '![](img/64167fb4-2449-400b-8904-beeb5d202b3b.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64167fb4-2449-400b-8904-beeb5d202b3b.png)'
- en: 3D Plot
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Social Weight = 1.19445:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '社会权重 = 1.19445:'
- en: '![](img/b93ee286-5a6b-4a8d-ab91-ea68550f94df.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b93ee286-5a6b-4a8d-ab91-ea68550f94df.png)'
- en: 3D Plot
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Cognitive weight
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认知权重
- en: 'Cognitive weight is also used to adjust the swarm speed. It is the factor that
    determines the extent to which the particle will follow its own best solution.
    **1.49445** is the default value:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 认知权重也用于调整群体速度。它是决定粒子将跟随其自身最佳解的程度的一个因素。**1.49445**是默认值：
- en: '![](img/b632277a-a99d-4a40-b848-d44b0c272893.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b632277a-a99d-4a40-b848-d44b0c272893.png)'
- en: 'The code is as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE42]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Cognitive Weight = 1.49445:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '认知权重 = 1.49445:'
- en: '![](img/07bd0de0-54be-40f0-89ea-4c2f1037fc28.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07bd0de0-54be-40f0-89ea-4c2f1037fc28.png)'
- en: 3D Plot
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Cognitive Weight = 1.19445:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '认知权重 = 1.19445:'
- en: '![](img/00a52014-dbec-4266-b792-d0e3743b2e56.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00a52014-dbec-4266-b792-d0e3743b2e56.png)'
- en: 3D Plot
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Inertia weight
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惯性权重
- en: 'The inertia weight is multiplied by the inertia during each iteration of function
    optimization. **0.99** is the default value:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 惯性权重在每次函数优化迭代中乘以惯性。**0.99**是默认值：
- en: '![](img/f4b52868-ccf5-4ac2-9697-32397edb56e7.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f4b52868-ccf5-4ac2-9697-32397edb56e7.png)'
- en: 'The code is as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE43]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Inertia Weight = 0.99:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '惯性权重 = 0.99:'
- en: '![](img/0bb3b6e3-15ad-4bcc-856a-1ccaa038c1ae.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0bb3b6e3-15ad-4bcc-856a-1ccaa038c1ae.png)'
- en: 3D Plot
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: 'Inertia Weight = 0.75:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '惯性权重 = 0.75:'
- en: '![](img/6574ac58-cfad-4f4c-a097-3543263e4fe4.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6574ac58-cfad-4f4c-a097-3543263e4fe4.png)'
- en: 3D Plot
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 图
- en: Understanding visualizations
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解可视化
- en: In this section we will go over some of the many that you will see in our program.
    This includes both two and three dimensional plots.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍您将在我们的程序中看到的一些众多内容。这包括二维和三维图。
- en: Understanding two-dimensional visualizations
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解二维可视化
- en: 'For our application, we have several two-dimensional visualizations that we
    need to explain. The first is the two-dimensional plot of the function optimization,
    be it maximized or minimized. This visualization is shown as follows. Remember,
    for this we are using Microsoft Chart control, which is available from: [https://www.microsoft.com/en-us/download/details.aspx?id=14422](https://www.microsoft.com/en-us/download/details.aspx?id=14422):'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '对于我们的应用，我们需要解释几个二维可视化。首先是函数优化的二维图，无论是最大化还是最小化。这个可视化如下所示。记住，为此我们使用的是Microsoft
    Chart控件，它可以从以下链接获取：[https://www.microsoft.com/en-us/download/details.aspx?id=14422](https://www.microsoft.com/en-us/download/details.aspx?id=14422):'
- en: '![](img/87685f4f-aeb3-4924-b4e2-f972cc48eb8a.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/87685f4f-aeb3-4924-b4e2-f972cc48eb8a.png)'
- en: 2D Visualization
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 2D 可视化
- en: For each particle that we are plotting (up to a maximum of 10), we will have
    a different marker style. A marker is the diamonds, circles, x's, and so on that
    you see plotted in the preceding diagram. We will also rotate colors based upon
    each particle being a different color. If you are not viewing this book in color,
    you hopefully will have shades of grey.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们正在绘制的每个粒子（最多10个），我们将使用不同的标记样式。标记就是您在前面的图中看到的菱形、圆形、x等。我们还将根据每个粒子使用不同的颜色来旋转颜色。如果您没有用彩色查看这本书，您可能会有灰度的阴影。
- en: The lines you are seeing in the preceding diagram (or, to be more technically
    accurate, the splines you are seeing above them) are the plots of each particle
    in the swarm. The global optimum value (gbest) is the black diamond in the middle
    of the plot area. As you can see, we always remain within the bounds of our hyperparameters.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您在前面的图中看到的线条（或者，更准确地说，您在上面看到的样条曲线）是群中每个粒子的轨迹。全局最优值（gbest）是图表区域中间的黑钻石。如您所见，我们始终保持在超参数的界限内。
- en: Understanding three-dimensional visualizations
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解三维可视化
- en: 'In my opinion, the three-dimensional view is the easiest to interpret and the
    most intuitive, especially if it is a part of your model verification package
    that you will show to someone else. You can easily see in the following when each
    particle arrives (if it arrives) at a global optimum. The result is a flat line
    indicated by one or more line segments at the 0 axis:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，三维视图最容易解释，也是最直观的，尤其是如果它是您将展示给别人的模型验证包的一部分。您可以在下面的图中轻松地看到每个粒子何时（如果到达）到达全局最优。结果是0轴上的一条或多条线段表示的平坦线：
- en: '![](img/788b27ad-8ffd-4ec1-bd9c-b3d377b9e9bc.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/788b27ad-8ffd-4ec1-bd9c-b3d377b9e9bc.png)'
- en: 3D Visualization
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 3D可视化
- en: 'There are several toolbars available for working with the three-dimensional
    view, of which you have rotational options, placement options, color options,
    and more:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个工具栏可用于处理三维视图，其中包括旋转选项、放置选项、颜色选项等：
- en: '![](img/3953198f-65d4-4cf9-a9fa-afc3ca24752c.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3953198f-65d4-4cf9-a9fa-afc3ca24752c.png)'
- en: 'You can use the **Trackball** to rotate the chart to see the view from virtually
    any direction:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**Trackball**旋转图表，从几乎任何方向查看视图：
- en: '![](img/a64b8b6b-353c-40a4-8bb8-9ac3274bbebd.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a64b8b6b-353c-40a4-8bb8-9ac3274bbebd.png)'
- en: 'Just select the Trackball, and then select the chart, click on the left mouse
    button and drag the chart to your new view like this:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 只需选择Trackball，然后选择图表，点击左鼠标按钮并像这样拖动图表到您的新视图：
- en: '![](img/07820860-528d-4834-897d-5b318d69b014.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07820860-528d-4834-897d-5b318d69b014.png)'
- en: Rotating the View
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转视图
- en: 'You can change the lighting of the chart by changing the **Predefined Light
    Model**:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过更改**预定义光模型**来更改图表的照明：
- en: '![](img/2dc1e107-6484-460b-afe8-3cab516afe88.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2dc1e107-6484-460b-afe8-3cab516afe88.png)'
- en: Pre-defined Light Models
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义光模型
- en: 'You can then select from any of the predefined models, as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择以下任何预定义的模型：
- en: '![](img/e5ea8878-b212-4641-a077-6177f4f10cc4.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5ea8878-b212-4641-a077-6177f4f10cc4.png)'
- en: Pre-defined Light Models
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义的光模型
- en: 'The depth and width controls allow you to change both dimensions on the chart
    to suit your needs:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 深度和宽度控件允许您更改图表上的两个维度以满足您的需求：
- en: '![](img/f6f91dd2-ac97-49a7-b575-86679e4e16ac.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f6f91dd2-ac97-49a7-b575-86679e4e16ac.png)'
- en: 'Simply click on the button you desire and continue to click to apply the transformation,
    as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 简单点击您想要的按钮，并继续点击以应用变换，如下所示：
- en: '![](img/63af16a4-b83e-4515-b090-784cd81227c6.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/63af16a4-b83e-4515-b090-784cd81227c6.png)'
- en: Transformations
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 变换
- en: '**Nudging** allows you to make minor adjustments to the chart area and location.
    You can **Nudge** up, down, left, or right, as well as any combination of these,
    by simply clicking on the button(s) you desire, as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**微调**允许您对图表区域和位置进行细微调整。您可以通过简单地点击所需的按钮，向上、向下、向左或向右**微调**，以及这些组合中的任何一种，如下所示：'
- en: '![](img/823de99e-b81e-4c1d-b9b0-a26dd3369c3a.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/823de99e-b81e-4c1d-b9b0-a26dd3369c3a.png)'
- en: 'In the main toolbar, you can open, save, and print charts, a valuable feature
    if you need to have images for a report based upon your testing. You can also use
    the Chart editor and Chart Wizard, as shown here:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在主工具栏中，您可以打开、保存和打印图表，如果您需要基于测试的图像来制作报告，这是一个非常有用的功能。您还可以使用图表编辑器和图表向导，如下所示：
- en: '![](img/b43bf5b5-44ad-421c-a06d-f817bf476c3d.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b43bf5b5-44ad-421c-a06d-f817bf476c3d.png)'
- en: 'Simply select the button you desire, in this case **Show Chart Wizard**, and
    the wizard dialog will appear:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 简单选择您想要的按钮，在这种情况下是**显示图表向导**，向导对话框将出现：
- en: '![](img/e4c99515-66e5-40c1-88de-065b203c8165.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4c99515-66e5-40c1-88de-065b203c8165.png)'
- en: Chart Wizard
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图表向导
- en: You can also use the 3D button to switch between two and three-dimensional views
    of the same chart.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用3D按钮在二维和三维视图之间切换同一图表。
- en: 'The two dimensional view:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 二维视图：
- en: '![](img/aa2a936e-5955-48a3-a1d9-2f6ddb24457b.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa2a936e-5955-48a3-a1d9-2f6ddb24457b.png)'
- en: 2D View
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 2D视图
- en: 'This can change to 3D with the click of a single button:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过单击单个按钮变为3D：
- en: '![](img/a7098bcc-3403-444a-ad14-051806e91dfb.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7098bcc-3403-444a-ad14-051806e91dfb.png)'
- en: 3D View
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 3D视图
- en: Plotting results
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制结果
- en: The following section details how our information is displayed once results
    have been obtained.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分详细说明了一旦获得结果，我们的信息是如何显示的。
- en: Playing back results
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放结果
- en: 'Once the swarm optimization is complete, the job of playing back the results
    comes to the forefront. Our main function in replaying plots is called `PlaybackPlot`.
    Let''s discuss the function in detail:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦群体优化完成，播放结果的工作就变得突出。我们在重新播放图表中的主要函数称为 `PlaybackPlot`。让我们详细讨论这个函数：
- en: '[PRE44]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Get our current iteration, as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 获取我们的当前迭代，如下所示：
- en: '[PRE45]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If we have played back all our points, then leave, as follows:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经播放了所有点，那么就离开，如下所示：
- en: '[PRE46]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Update the progress bar, as follows:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 更新进度条，如下所示：
- en: '[PRE47]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Go through all iterations, as follows:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历所有迭代，如下所示：
- en: '[PRE48]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Update the progress bar value, as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 更新进度条值，如下所示：
- en: '[PRE49]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Plot a single swarm iteration point, as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制单个群体迭代点，如下所示：
- en: '[PRE50]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Briefly pause to allow the UI to remain responsive, as follows:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 简单暂停以允许UI保持响应，如下所示：
- en: '[PRE51]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You will notice in the preceding function a call to `PlotSwarmIterationPoint`.
    This function call (or method, if you prefer) is responsible for plotting a single
    movement of the particles. One step, if you will. Let''s take you through that
    function and describe what is happening, as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在前面的函数中注意到对 `PlotSwarmIterationPoint` 的调用。这个函数调用（或者如果你更喜欢，方法）负责绘制粒子的单个运动。一步，如果可以这样说的話。让我们带你了解这个函数，并描述正在发生的事情，如下所示：
- en: '[PRE52]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If we have reached our final iteration, then leave, as follows:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经达到最终迭代，那么就离开，如下所示：
- en: '[PRE53]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We need to plot a single point for each particle in the swarm, as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为群体中的每个粒子绘制一个单独的点，如下所示：
- en: '[PRE54]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add a series for each point, as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个点添加一个序列，如下所示：
- en: '[PRE55]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add a data point for the series we just created, as follows:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们刚刚创建的序列添加一个数据点，如下所示：
- en: '[PRE56]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Dynamically handle the colors based upon the range values each particle is
    in, as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 根据每个粒子所在的范围值动态处理颜色，如下所示：
- en: '[PRE57]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, add a point for the optimal global position, as follows:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加一个表示最优全局位置的点，如下所示：
- en: '[PRE58]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Get the next iteration in line, paint the control, and show the text for what
    is going on:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 获取下一个迭代，绘制控件，并显示正在发生的事情的文本：
- en: '[PRE59]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Updating the information tree
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新信息树
- en: 'The information tree is on the **Details** tab page of our user interface.
    It houses the information treeview control. Depending upon the `PSODispType`,
    we will either create a new node or use the one previously created to write out
    our text:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 信息树位于我们用户界面的**详细信息**标签页上。它包含了信息树视图控件。根据 `PSODispType`，我们将创建一个新的节点或使用之前创建的节点来写入我们的文本：
- en: '[PRE60]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Create a brand-new node in the tree. This is the highest level for a particle
    in the tree and represents the global best values found, as follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在树中创建一个新的节点。这是树中粒子的最高级别，代表找到的全局最佳值，如下所示：
- en: '[PRE61]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add details to the previous node. This is an individual particle in the swarm,
    and its sub details will be plotted in our next function, as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 向前面的节点添加详细信息。这是一个群体中的单个粒子，其子详细信息将在我们的下一个函数中绘制，如下所示：
- en: '[PRE62]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add details to the previous node. These are the exact details of the particle,
    and form the bottom-level node for this particle in the swarm, as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 向前面的节点添加详细信息。这些是粒子的确切详细信息，并形成群体中该粒子的底层节点，如下所示：
- en: '[PRE63]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: And that's it. We now have a fully populated information tree!
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们现在有一个完全填充的信息树！
- en: Adding new optimization functions
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的优化函数
- en: One of the beautiful things about our visual test workbench is the ease of which
    we can add new optimization functions for testing.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们视觉测试工作台的一个美妙之处在于，我们可以轻松地添加新的优化函数进行测试。
- en: The purpose of functions
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数的目的
- en: Some problems are evaluated in terms of quality versus correct or incorrect.
    Such problems are known as optimization problems because the goal is the identification
    of the optimal value. Functions (sometimes called cost functions, objective functions,
    error functions, and so on.) achieve that goal by mapping n-dimensional real-valued
    items into one-dimensional real-valued items (some folks will prefer the termspaces
    over items' as it more closely aligns with the total search space we have talked
    about).
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 一些问题是通过质量与正确或错误来评估的。这类问题被称为优化问题，因为目标是识别最优值。函数（有时称为成本函数、目标函数、误差函数等）通过将n维实值项映射到一维实值项来实现这一目标（有些人可能更喜欢使用“空间”而不是“项”，因为它与我们讨论过的总搜索空间更接近）。
- en: 'There are two types of function we will deal with. They are:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将处理两种类型的函数。它们是：
- en: '**Minimization**: Looking for the solution with the smallest value'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化**：寻找具有最小值的解决方案'
- en: '**Maximization**: Looking for the solution with the largest value'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大化**：寻找具有最大值的解决方案'
- en: It is not always the case that we can find the minimum or maximum, but sometimes
    must settle on a value that we deem sufficiently good enough for what we are trying
    to accomplish.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 并非总是能够找到最小值或最大值，有时我们必须满足于一个我们认为足够好的值，以实现我们的目标。
- en: Adding new functions
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新功能
- en: 'Adding new functions is a very simple process comprised of only a few steps
    to follow. The steps are:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新功能是一个非常简单的流程，只需遵循几个步骤。这些步骤是：
- en: Create a new function based upon the signatures shown as follows
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下签名创建一个新函数
- en: Add the new function name to the `GetFitnessValue` function
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新函数名称添加到`GetFitnessValue`函数中
- en: Add the new function name to the user interface
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新函数名称添加到用户界面
- en: 'Let''s now cover these steps on by one. First, we will deal with the function
    signature itself. The function signature is as follows:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一介绍这些步骤。首先，我们将处理函数签名本身。函数签名如下：
- en: '[PRE64]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Here, xxxxxx is the name of the function that will be displayed in the UI,
    as you can see in the following:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，xxxxxx是将在UI中显示的函数名称，正如您在以下内容中可以看到的：
- en: '![](img/664a9681-2b7d-4abe-a439-7fa0af2b2524.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![](img/664a9681-2b7d-4abe-a439-7fa0af2b2524.png)'
- en: Optimization Function Window
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 优化函数窗口
- en: 'After this, you must update the `GetFitnessValue` function so that it knows
    how to relate what is displayed on the user interface to an actual function. Here
    is a sample of what that function looks like. We will in fill this information
    later in the *Let''s add a new function* section:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，你必须更新`GetFitnessValue`函数，使其知道如何将用户界面上的显示内容与实际函数相关联。以下是一个该函数的示例。我们将在“让我们添加一个新函数”部分中填写这些信息：
- en: '[PRE65]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The `fitnessFunction` text is what appears in the user interface:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`fitnessFunction`文本是用户界面中显示的内容：'
- en: '[PRE66]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Let's add a new function
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们添加一个新函数
- en: Now it's time for us to demonstrate how to add a new function. The function
    we are going to deal with is a modified version of the original `Levy` function
    and is the 13^(th) version known to exist. This function is a minimization function.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是我们展示如何添加新函数的时候了。我们将处理的函数是原始`Levy`函数的修改版，是已知存在的第13版。这是一个最小化函数。
- en: 'The function itself, which you can find in the visual workbench source code,
    looks like this:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 函数本身，您可以在可视化工作台源代码中找到，看起来如下：
- en: '[PRE67]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Definitely a lot of math there, right? Many times, functions such as this would
    be created in editors that make the math much easier to view. For instance, if
    I were to represent this code mathematically, it would look like this:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里有很多数学知识，对吧？很多时候，这样的函数会在使数学更容易查看的编辑器中创建。例如，如果我要用数学方式表示这段代码，它看起来会是这样：
- en: '[PRE68]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'If we were to take that and plot it with a tool such as MATLAB, here''s what
    it would look like graphically:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用MATLAB之类的工具来绘制这个图表，它看起来会是这样：
- en: '![](img/42e7ede3-45e2-4a5d-a2ff-c4b4424e281f.png)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42e7ede3-45e2-4a5d-a2ff-c4b4424e281f.png)'
- en: Our view under MATLAB
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在MATLAB中的视角
- en: Why did I say and show all of that? Because, as you use this tool to validate
    your testing, you need to be able to relay, and sometimes justify, this information
    to others. No doubt just showing the C# code will not be enough, and the math
    and visualizations are many times what others expect to see. Don't let that put
    you off; you'll see how easy it is to create these functions, and our application
    makes it very easy to produce the kind of information you need.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我要说和展示所有那些内容呢？因为，当你使用这个工具来验证你的测试时，你需要能够传达，有时还需要为他人辩护，这些信息。毫无疑问，仅仅展示C#代码是不够的，数学和可视化在很多情况下是其他人期望看到的。不要因此而气馁；你会看到创建这些函数是多么容易，我们的应用程序使得生成所需的信息变得非常简单。
- en: Let's get back on track with adding that function.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到正轨，继续添加那个函数。
- en: 'Once we have added our new function, we now need to add it to the `GetFitnessValue` function
    so that what is selected in the user interface can relate to our specific function:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们添加了我们的新函数，现在我们需要将其添加到`GetFitnessValue`函数中，以便用户界面中选择的选项可以与我们特定的函数相关联：
- en: '[PRE69]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Once this is complete, we need to add it to our dropdown function list box
    on the user interface. Just select the combo box on the user interface, go to
    the Items property, and click on the button:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这个步骤，我们需要将其添加到用户界面的下拉函数列表框中。只需在用户界面上选择组合框，转到“Items”属性，然后点击按钮：
- en: '![](img/c0343899-78ed-4fc3-9251-8b194acf6865.png)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c0343899-78ed-4fc3-9251-8b194acf6865.png)'
- en: 'Next, simply add the text you want displayed, as follows:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，简单地添加你想要显示的文本，如下所示：
- en: '![](img/e34ab8e6-a27f-40ab-9196-43902e75229d.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e34ab8e6-a27f-40ab-9196-43902e75229d.png)'
- en: String Collection Editor
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串收集编辑器
- en: 'Once this is complete, build the project, run it, and you should see the function
    displayed in the dropdown:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这个步骤，构建项目，运行它，你应该会看到函数在下拉列表中显示：
- en: '![](img/16f6292e-3643-4298-a51c-c2b208c1eb1b.png)'
  id: totrans-414
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/16f6292e-3643-4298-a51c-c2b208c1eb1b.png)'
- en: New Function
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数
- en: 'After you select the Levy13 function, click on the **Run** button and voilà,
    you''ve successfully added a new function and tested its execution. You can view
    the two and three-dimensional plots as a validation of your success. Before you
    reach your maximum number of iterations (100 in this case), you should have reached
    a global optimum of 0 (the flat tape segments on the right-hand side of the three-dimensional
    plot):'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在你选择了Levy13函数后，点击**运行**按钮， voilà，你已经成功添加了一个新函数并测试了它的执行。你可以查看二维和三维图来验证你的成功。在你达到最大迭代次数（在本例中为100）之前，你应该已经达到了全局最优解0（三维图右侧的平坦带状区域）：
- en: '![](img/f6943263-95b1-4cf4-ae80-a031e9121240.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f6943263-95b1-4cf4-ae80-a031e9121240.png)'
- en: 3D View
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 3D视图
- en: Summary
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed functions, what they are, and why we use them.
    We developed a very powerful and flexible application with which to test function
    optimization. We also showed you the complete process of adding a new function
    and how to run it once added. You are now free to add as many new functions as
    you like; just follow the process outlined herein and you should have no problems.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了函数，它们是什么，以及为什么我们使用它们。我们开发了一个非常强大且灵活的应用程序来测试函数优化。我们还展示了添加新函数的完整过程以及添加后如何运行它。你现在可以自由地添加你喜欢的任何新函数；只需遵循此处概述的过程，你应该不会有任何问题。
- en: In the next chapter, we are going to learn how to replace back propagation with
    particle swarm-optimized algorithms, so hold on to your hats!
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何用粒子群优化算法替换反向传播，所以请系好你的帽子！
