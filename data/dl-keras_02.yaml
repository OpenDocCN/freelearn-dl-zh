- en: Keras Installation and API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras 安装与 API
- en: In the previous chapter, we discussed the basic principles of neural networks
    and provided a few examples of nets that are able to recognize MNIST handwritten
    numbers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了神经网络的基本原理，并提供了一些能够识别 MNIST 手写数字的网络示例。
- en: This chapter explains how to install Keras, Theano, and TensorFlow. Step by
    step, we will look at how to get the environment working and move from intuition
    to working nets in very little time. Then we will discuss how to install on a
    dockerized infrastructure based on containers, and in the cloud with Google GCP,
    Amazon AWS, and Microsoft Azure. In addition to that, we will present an overview
    of Keras APIs, and some commonly useful operations such as loading and saving
    neural networks' architectures and weights, early stopping, history saving, checkpointing,
    and interactions with TensorBoard and Quiver. Let us start.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讲解如何安装 Keras、Theano 和 TensorFlow。我们将逐步介绍如何使环境正常运行，并在短时间内从直觉走向实际的神经网络。接下来，我们将讨论如何在基于容器的
    Docker 化基础设施上安装这些工具，并在 Google GCP、Amazon AWS 和 Microsoft Azure 云平台上进行安装。此外，我们还将介绍
    Keras API 的概述，以及一些常用操作，例如加载和保存神经网络的架构与权重、早期停止、历史保存、检查点以及与 TensorBoard 和 Quiver
    的交互。让我们开始吧。
- en: 'By the end of this chapter, we will have covered the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将涵盖以下主题：
- en: Installing and configuring Keras
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Keras
- en: Keras architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras 架构
- en: Installing Keras
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Keras
- en: In the sections to follow, we will show how to install Keras on multiple platforms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将展示如何在多个平台上安装 Keras。
- en: Step 1 — install some useful dependencies
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 步 — 安装一些有用的依赖项
- en: 'First, we install the `numpy` package, which provides support for large, multidimensional
    arrays and matrices as well as high-level mathematical functions. Then we install
    `scipy`, a library used for scientific computation. After that, it might be appropriate
    to install `scikit-learn`, a package considered the Python Swiss army knife for
    machine learning. In this case, we will use it for data exploration. Optionally,
    it could be useful to install `pillow`, a library useful for image processing,
    and `h5py`, a library useful for data serialization used by Keras for model saving.
    A single command line is enough for installing what is needed. Alternatively,
    one can install Anaconda Python, which will automatically install `numpy`, `scipy`,
    `scikit-learn`, `h5py`, `pillow`, and a lot of other libraries that are needed
    for scientific computing (for more information, refer to: *Batch Normalization:
    Accelerating Deep Network Training by Reducing Internal Covariate Shift*, by S.
    Ioffe and C. Szegedy, [arXiv.org/abs/1502.03167](https://arxiv.org/abs/1502.03167),
    2015). You can find the packages available in Anaconda Python at [https://docs.continuum.io/anaconda/pkg-docs](https://docs.continuum.io/anaconda/pkg-docs). The
    following screenshot shows how to install the packages for our work:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们安装 `numpy` 包，它提供对大型多维数组和矩阵的支持，以及高级数学函数。然后安装 `scipy`，这是一个用于科学计算的库。之后，可以安装
    `scikit-learn`，这是一个被认为是机器学习的 Python 瑞士军刀的包。在本例中，我们将用它来进行数据探索。可选地，可以安装 `pillow`，一个用于图像处理的库，以及
    `h5py`，这是一个用于数据序列化的库，Keras 用它来保存模型。只需要一条命令行即可安装所需的所有内容。或者，您可以安装 Anaconda Python，它会自动安装
    `numpy`、`scipy`、`scikit-learn`、`h5py`、`pillow` 和其他很多科学计算所需的库（更多信息请参考：*批量归一化：通过减少内部协变量偏移加速深度网络训练*，作者
    S. Ioffe 和 C. Szegedy，[arXiv.org/abs/1502.03167](https://arxiv.org/abs/1502.03167)，2015）。您可以在
    [https://docs.continuum.io/anaconda/pkg-docs](https://docs.continuum.io/anaconda/pkg-docs)
    查找 Anaconda Python 中可用的包。以下截图展示了如何为我们的工作安装这些包：
- en: '![](img/image_02_001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_001.png)'
- en: Step 2 — install Theano
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 步 — 安装 Theano
- en: 'We can use `pip` to install Theano, as shown in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `pip` 来安装 Theano，如下图所示：
- en: '![](img/image_02_002.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_002.png)'
- en: Step 3 — install TensorFlow
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 步 — 安装 TensorFlow
- en: 'Now we can install TensorFlow using the instructions found on the TensorFlow
    website at [https://www.tensorflow.org/versions/r0.11/get_started/os_setup.html#pip-installation](https://www.tensorflow.org/versions/r0.11/get_started/os_setup.html#pip-installation).
    Again, we simply use `pip` for installing the correct package, as shown in the
    following screenshot. For instance, if we need to use GPUs, it is important to
    pick the appropriate package:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 TensorFlow 官方网站上的说明来安装 TensorFlow，[https://www.tensorflow.org/versions/r0.11/get_started/os_setup.html#pip-installation](https://www.tensorflow.org/versions/r0.11/get_started/os_setup.html#pip-installation)。同样，我们只是使用
    `pip` 安装正确的包，如下图所示。例如，如果我们需要使用 GPU，那么选择适当的包非常重要：
- en: '![](img/image_02_003.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_003.png)'
- en: Step 4 — install Keras
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 步 — 安装 Keras
- en: 'Now we can simply install Keras and start testing the installed environment.
    Pretty simple; let''s use `pip` again, as shown in this screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以简单地安装 Keras 并开始测试已安装的环境。非常简单；我们再次使用 `pip`，如下面的截图所示：
- en: '![](img/image_02_004.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_004.png)'
- en: Step 5 — testing Theano, TensorFlow, and Keras
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 步 — 测试 Theano、TensorFlow 和 Keras
- en: 'Now let''s test the environment. First let''s look at how to define the sigmoid
    function in Theano. As you see, it is very simple; we just write the mathematical
    formula and compute the function element-wise on a matrix. Just run the Python
    Shell and write the code as shown in the following screenshot to get the result:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们测试一下环境。首先来看一下如何在 Theano 中定义 sigmoid 函数。如你所见，这非常简单；我们只需写出数学公式并在矩阵上按元素计算该函数。只需运行
    Python Shell 并按如下截图所示写下代码，即可得到结果：
- en: '![](img/image_02_005.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_005.png)'
- en: 'So, Theano works. Let''s test TensorFlow by simply importing the MNIST dataset
    as shown in the following screenshot. We have already seen, in [Chapter 1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml),
    *Neural Networks Foundations*, a few working examples of the Keras network:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Theano 可以正常工作。接下来，我们通过简单地导入 MNIST 数据集来测试 TensorFlow，如下截图所示。在[第 1 章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)《*神经网络基础*》中，我们已经看到了几个
    Keras 网络的实际示例：
- en: '![](img/image_02_006.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_006.png)'
- en: Configuring Keras
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Keras
- en: 'Keras has a very minimalist configuration file. Let''s load it with a `vi`
    session. The parameters are very simple:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 具有一个非常简洁的配置文件。我们通过 `vi` 会话加载它。参数非常简单：
- en: '| **Parameters** | **Values** |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **值** |'
- en: '| `image_dim_ordering` | Can be either `tf` for the TensorFlow image ordering
    or `th` for Theano image ordering |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `image_dim_ordering` | 可以是 `tf` 表示 TensorFlow 的图像顺序，或者 `th` 表示 Theano 的图像顺序
    |'
- en: '| `epsilon` | The `epsilon` value used during computation |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `epsilon` | 计算过程中使用的 `epsilon` 值 |'
- en: '| `floatx` | Can be either `float32` or `float64` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `floatx` | 可以是 `float32` 或 `float64` |'
- en: '| `backend` | Can be either `tensorflow` or `theano` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `backend` | 可以是 `tensorflow` 或 `theano` |'
- en: 'The `image_dim_ordering` of `th` value gives you a somewhat non-intuitive dimension
    ordering for images (depth, width, and height), instead of (width, height, and
    depth), for `tf`. The following are the default parameters in my machine:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`image_dim_ordering` 的 `th` 值会为你提供一个相对不直观的图像维度顺序（深度、宽度和高度），而不是 `tf` 的（宽度、高度和深度）。以下是我机器上的默认参数：'
- en: '![](img/image_02_007.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_007.png)'
- en: If you install a GPU-enabled TensorFlow version, then Keras will automatically
    use your configured GPU when TensorFlow is selected as the backend.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装了支持 GPU 的 TensorFlow 版本，那么当 TensorFlow 被选作后端时，Keras 会自动使用你配置的 GPU。
- en: Installing Keras on Docker
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Docker 上安装 Keras
- en: 'One of the easiest ways to get started with TensorFlow and Keras is running
    in a Docker container. A convenient solution is to use a predefined Docker image
    for deep learning created by the community that contains all the popular DL frameworks
    (TensorFlow, Theano, Torch, Caffe, and so on). Refer to the GitHub repository
    at [https://github.com/saiprashanths/dl-docker](https://github.com/saiprashanths/dl-docker) for
    the code files. Assuming that you already have Docker up and running (for more
    information, refer to [https://www.docker.com/products/overview](https://www.docker.com/products/overview)),
    installing it is pretty simple and is shown as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 TensorFlow 和 Keras 的最简单方法之一是运行在 Docker 容器中。一个方便的解决方案是使用社区创建的深度学习预定义 Docker
    镜像，它包含所有流行的深度学习框架（TensorFlow、Theano、Torch、Caffe 等）。请参考 GitHub 仓库 [https://github.com/saiprashanths/dl-docker](https://github.com/saiprashanths/dl-docker)
    获取代码文件。假设你已经启动并运行了 Docker（有关更多信息，请参考 [https://www.docker.com/products/overview](https://www.docker.com/products/overview)），安装过程非常简单，如下所示：
- en: '![](img/image_02_008.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_008.png)'
- en: 'The following screenshot, says something like, after getting the image from
    Git, we build the Docker image:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图中显示的内容大致是：从 Git 获取图像后，我们构建 Docker 镜像：
- en: '![](img/image_02_009.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_009.png)'
- en: 'In this screenshot, we see how to run it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到如何运行它：
- en: '![](img/image_02_010.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_010.png)'
- en: 'From within the container, it is possible to activate support for Jupyter Notebooks
    (for more information, refer to [http://jupyter.org/](http://jupyter.org/)):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从容器内，可以启用对 Jupyter Notebooks 的支持（有关更多信息，请参见 [http://jupyter.org/](http://jupyter.org/)）：
- en: '![](img/image_02_011.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_011.png)'
- en: 'Access it directly from the host machine on port:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从主机机器直接通过端口访问：
- en: '![](img/image_02_012.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_012.png)'
- en: 'It is also possible to access TensorBoard (for more information, refer to [https://www.tensorflow.org/how_tos/summaries_and_tensorboard/](https://www.tensorflow.org/how_tos/summaries_and_tensorboard/))
    with the help of the command in the screenshot that follows, which is discussed
    in the next section:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过下面截图中的命令访问 TensorBoard（有关更多信息，请参见 [https://www.tensorflow.org/how_tos/summaries_and_tensorboard/](https://www.tensorflow.org/how_tos/summaries_and_tensorboard/)），该命令将在下一部分讨论：
- en: '![](img/image_02_013.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_013.png)'
- en: 'After running the preceding command, you will be redirected to the following
    page:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前述命令后，您将被重定向到以下页面：
- en: '![](img/image_02_014.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_014.png)'
- en: Installing Keras on Google Cloud ML
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Google Cloud ML 上安装 Keras
- en: 'Installing Keras on Google Cloud is very simple. First, we can install Google
    Cloud (for the downloadable file, refer to [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/))*,*
    a command-line interface for Google Cloud Platform; then we can use CloudML, a
    managed service that enables us to easily build machine, learning models with
    TensorFlow. Before using Keras, let''s use Google Cloud with TensorFlow to train
    an MNIST example available on GitHub. The code is local and training happens in
    the cloud:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Cloud 上安装 Keras 非常简单。首先，我们可以安装 Google Cloud （有关可下载文件，请参见 [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)），它是
    Google Cloud Platform 的命令行界面；然后我们可以使用 CloudML，这是一个托管服务，允许我们轻松构建使用 TensorFlow 的机器学习模型。在使用
    Keras 之前，让我们使用 Google Cloud 和 TensorFlow 来训练 GitHub 上提供的 MNIST 示例。代码是本地的，训练发生在云端：
- en: '![](img/image_02_015.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_015.png)'
- en: 'In the following screenshot, you can see how to run a training session:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，您可以看到如何运行训练会话：
- en: '![](img/image_02_016.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_016.png)'
- en: 'We can use TensorBoard to show how cross-entropy decreases across iterations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 TensorBoard 显示交叉熵如何随着迭代减少：
- en: '![](img/image_02_017.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_017.png)'
- en: 'In the next screenshot, we see the graph of cross-entropy:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，我们看到交叉熵的图形：
- en: '![](img/image_02_018.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_018.png)'
- en: 'Now, if we want to use Keras on the top of TensorFlow, we simply download the
    Keras source from PyPI (for the downloadable file, refer to [https://pypi.Python.org/pypi/Keras/1.2.0](https://pypi.Python.org/pypi/Keras/1.2.0)
    or later versions) and then directly use Keras as a CloudML package solution,
    as in the following example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想在 TensorFlow 上使用 Keras，只需从 PyPI 下载 Keras 源代码（有关可下载文件，请参见 [https://pypi.Python.org/pypi/Keras/1.2.0](https://pypi.Python.org/pypi/Keras/1.2.0)
    或更高版本），然后像使用 CloudML 包解决方案一样直接使用 Keras，如以下示例所示：
- en: '![](img/image_02_019.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_019.png)'
- en: 'Here, `trainer.task2.py` is an example script:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`trainer.task2.py` 是一个示例脚本：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing Keras on Amazon AWS
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Amazon AWS 上安装 Keras
- en: 'Installing TensorFlow and Keras on Amazon is very simple. Indeed, it is possible
    to use a prebuilt AMI named `TFAMI.v3` that is open and free (for more information,
    refer to [https://github.com/ritchieng/tensorflow-aws-ami](https://github.com/ritchieng/tensorflow-aws-ami)),
    shown as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Amazon 上安装 TensorFlow 和 Keras 非常简单。事实上，可以使用一个名为 `TFAMI.v3` 的预构建 AMI，该 AMI
    是开放且免费的（有关更多信息，请参见 [https://github.com/ritchieng/tensorflow-aws-ami](https://github.com/ritchieng/tensorflow-aws-ami)），如下所示：
- en: '![](img/image_02_020.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_020.png)'
- en: 'This AMI runs TensorFlow in less than five minutes and supports TensorFlow,
    Keras, OpenAI Gym, and all dependencies. As of January 2017, it supports the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此 AMI 在不到五分钟内运行 TensorFlow，并支持 TensorFlow、Keras、OpenAI Gym 及所有依赖项。截至 2017 年
    1 月，它支持以下内容：
- en: TensorFlow 0.12
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow 0.12
- en: Keras 1.1.0
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras 1.1.0
- en: TensorLayer 1.2.7
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorLayer 1.2.7
- en: CUDA 8.0
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CUDA 8.0
- en: CuDNN 5.1
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CuDNN 5.1
- en: Python 2.7
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.7
- en: Ubuntu 16.04
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04
- en: 'In addition, `TFAMI.v3` works on P2 computing instances (for more information,
    refer to [https://aws.amazon.com/ec2/instance-types/#p2](https://aws.amazon.com/ec2/instance-types/#p2)),
    as shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`TFAMI.v3` 可在 P2 计算实例上运行（有关更多信息，请参见 [https://aws.amazon.com/ec2/instance-types/#p2](https://aws.amazon.com/ec2/instance-types/#p2)），如以下截图所示：
- en: '![](img/image_02_021.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_021.png)'
- en: 'Some features of P2 instances are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: P2 实例的一些特点如下：
- en: Intel Xeon E5-2686v4 (Broadwell) processors
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intel Xeon E5-2686v4（Broadwell）处理器
- en: NVIDIA K80 GPUs, each with 2,496 parallel cores and 12 GB of GPU memory
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NVIDIA K80 GPU，每个具有 2,496 个并行核心和 12 GB GPU 内存
- en: Supports peer-to-peer GPU communication
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持点对点 GPU 通信
- en: Provides enhanced networking (for more information, refer to [https://aws.amazon.com/ec2/faqs/#What_networking_capabilities_are_included_in_this_feature](https://aws.amazon.com/ec2/faqs/#What_networking_capabilities_are_included_in_this_feature))
    with 20 Gbps of aggregate network bandwidth
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供增强的网络功能（更多信息，请参阅 [https://aws.amazon.com/ec2/faqs/#What_networking_capabilities_are_included_in_this_feature](https://aws.amazon.com/ec2/faqs/#What_networking_capabilities_are_included_in_this_feature)），提供
    20 Gbps 的总网络带宽
- en: 'The `TFAMI.v3` also works on G2 computing instances (for more information,
    refer to [https://aws.amazon.com/ec2/instance-types/#g2](https://aws.amazon.com/ec2/instance-types/#g2)).
    Some features of G2 instances are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`TFAMI.v3` 也适用于 G2 计算实例（更多信息，请参阅 [https://aws.amazon.com/ec2/instance-types/#g2](https://aws.amazon.com/ec2/instance-types/#g2)）。G2
    实例的一些特点如下：'
- en: Intel Xeon E5-2670 (Sandy Bridge) processors
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intel Xeon E5-2670（Sandy Bridge）处理器
- en: NVIDIA GPUs, each with 1,536 CUDA cores and 4 GB of video memory
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NVIDIA GPU，每个具有 1,536 个 CUDA 核心和 4 GB 显存
- en: Installing Keras on Microsoft Azure
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Microsoft Azure 上安装 Keras
- en: One way to install Keras on Azure is to install the support for Docker and then
    get a containerized version of TensorFlow plus Keras. Online, it is also possible
    to find a detailed set of instructions on how to install Keras and TensorFlow
    with Docker, but this is essentially what we have seen already in a previous section
    (for more information, refer to [https://blogs.msdn.microsoft.com/uk_faculty_connection/2016/09/26/tensorflow-on-docker-with-microsoft-azure/](https://blogs.msdn.microsoft.com/uk_faculty_connection/2016/09/26/tensorflow-on-docker-with-microsoft-azure/)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 上安装 Keras 的一种方法是安装 Docker 支持，然后获取包含 TensorFlow 和 Keras 的容器化版本。在线上，您也可以找到关于如何通过
    Docker 安装 Keras 和 TensorFlow 的详细说明，但这本质上是我们在前面章节中已经看到的内容（更多信息，请参阅 [https://blogs.msdn.microsoft.com/uk_faculty_connection/2016/09/26/tensorflow-on-docker-with-microsoft-azure/](https://blogs.msdn.microsoft.com/uk_faculty_connection/2016/09/26/tensorflow-on-docker-with-microsoft-azure/)）。
- en: If you use Theano as the only backend, then Keras can run with just a click
    by loading a pre-built package available on Cortana Intelligence Gallery (for
    more information, refer to [https://gallery.cortanaintelligence.com/Experiment/Theano-Keras-1](https://gallery.cortanaintelligence.com/Experiment/Theano-Keras-1)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仅使用 Theano 作为后端，那么通过加载在 Cortana Intelligence Gallery 上提供的预构建包，Keras 只需点击即可运行（更多信息，请参阅
    [https://gallery.cortanaintelligence.com/Experiment/Theano-Keras-1](https://gallery.cortanaintelligence.com/Experiment/Theano-Keras-1)）。
- en: 'The following sample shows how to import Theano and Keras into Azure ML directly
    as a ZIP file and use them in the Execute Python Script module. This example is
    due to Hai Ning (for more information, refer to [https://goo.gl/VLR25o](https://goo.gl/VLR25o)),
    and it essentially runs the Keras code within the `azureml_main()` method:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何将 Theano 和 Keras 作为 ZIP 文件直接导入 Azure ML，并在执行 Python 脚本模块中使用它们。此示例由
    Hai Ning 提供（更多信息，请参阅 [https://goo.gl/VLR25o](https://goo.gl/VLR25o)），本质上是在 `azureml_main()`
    方法内运行 Keras 代码：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this screenshot, you see an example use of Microsoft Azure ML to run Theano
    and Keras:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在此截图中，您看到一个使用 Microsoft Azure ML 运行 Theano 和 Keras 的示例：
- en: '![](img/image_02_022.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_022.png)'
- en: Keras API
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras API
- en: 'Keras has a modular, minimalist, and easy extendable architecture. Francois
    Chollet, the author of Keras, says:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 拥有模块化、简洁且易于扩展的架构。Keras 的作者 Francois Chollet 说：
- en: The library was developed with a focus on enabling fast experimentation. Being
    able to go from idea to result with the least possible delay is key to doing good
    research.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该库的开发重点是实现快速实验。能够以尽可能短的延迟从想法到结果是进行良好研究的关键。
- en: 'Keras defines high-level neural networks running on top of either TensorFlow
    (for more information, refer to [https://github.com/tensorflow/tensorflow](https://github.com/tensorflow/tensorflow)) or
    Theano (for more information, refer to [https://github.com/Theano/Theano](https://github.com/Theano/Theano)).
    In details:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 定义了在 TensorFlow（更多信息，请参阅 [https://github.com/tensorflow/tensorflow](https://github.com/tensorflow/tensorflow)）或
    Theano（更多信息，请参阅 [https://github.com/Theano/Theano](https://github.com/Theano/Theano)）之上运行的高层神经网络。具体来说：
- en: '**Modularity**: A model is either a sequence or a graph of standalone modules
    that can be combined together like LEGO blocks for building neural networks. Namely,
    the library predefines a very large number of modules implementing different types
    of neural layers, cost functions, optimizers, initialization schemes, activation
    functions, and regularization schemes.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：模型要么是一个序列，要么是一个独立模块的图，这些模块可以像 LEGO 积木一样组合在一起，构建神经网络。即，该库预定义了大量的模块，包含不同类型的神经网络层、损失函数、优化器、初始化方案、激活函数和正则化方案。'
- en: '**Minimalism**: The library is implemented in Python and each module is kept
    short and self-describing.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**极简主义**：该库是用 Python 实现的，每个模块都简洁且自描述。'
- en: '**Easy extensibility**: The library can be extended with new functionalities,
    as we will describe in [Chapter 7](9384823c-eb58-4a0f-91e7-1a5508eeb520.xhtml), *Additional
    Deep Learning Models*.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于扩展**：该库可以通过新功能进行扩展，正如我们将在[第七章](9384823c-eb58-4a0f-91e7-1a5508eeb520.xhtml)中描述的那样，*附加深度学习模型*。'
- en: Getting started with Keras architecture
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Keras 架构
- en: In this section, we review the most important Keras components used for defining
    neural networks. First, we define what a tensor is, then we discuss different
    ways of composing predefined modules, and we conclude with an overview of the
    ones most commonly used.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们回顾了用于定义神经网络的最重要的 Keras 组件。首先，我们定义张量的概念，然后讨论组合预定义模块的不同方式，最后概述最常用的模块。
- en: What is a tensor?
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是张量？
- en: Keras uses either Theano or TensorFlow to perform very efficient computations
    on tensors. But what is a tensor anyway? A tensor is nothing but a multidimensional
    array or matrix. Both the backends are capable of efficient symbolic computations
    on tensors, which are the fundamental building blocks for creating neural networks.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 使用 Theano 或 TensorFlow 执行对张量的高效计算。但张量到底是什么？张量其实就是一个多维数组或矩阵。这两个后端都能够高效地进行符号计算，张量是创建神经网络的基本构建块。
- en: Composing models in Keras
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Keras 中组合模型
- en: 'There are two ways of composing models in Keras. They are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Keras 中有两种组合模型的方式。它们如下：
- en: Sequential composition
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序组合
- en: Functional composition
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能组合
- en: Let us take a look at each one in detail.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每一个。
- en: Sequential composition
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 顺序组合
- en: 'The first one is the sequential composition, where different predefined models
    are stacked together in a linear pipeline of layers similar to a stack or a queue.
    In [Chapter 1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml), *Neural Networks Foundations*,
    we saw a few examples of sequential pipelines. For instance:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种是顺序组合，将不同的预定义模型按顺序堆叠在一起，形成类似于堆栈或队列的线性层次结构。在[第一章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)，*神经网络基础*中，我们看到了几个顺序流水线的示例。例如：
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Functional composition
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能组合
- en: The second way of composing modules is via the functional API, where it is possible
    to define complex models, such as directed acyclic graphs, models with shared
    layers, or multi-output models. We will see such examples in [Chapter 7](9384823c-eb58-4a0f-91e7-1a5508eeb520.xhtml),
    *Additional Deep Learning Models*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 组合模块的第二种方式是通过功能性 API，这种方式可以定义复杂的模型，如有向无环图、具有共享层的模型或多输出模型。我们将在[第七章](9384823c-eb58-4a0f-91e7-1a5508eeb520.xhtml)中看到这样的示例，*附加深度学习模型*。
- en: An overview of predefined neural network layers
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预定义神经网络层概览
- en: Keras has a number of prebuilt layers. Let us review the most commonly used
    ones and highlight in which chapter these layers are mostly used.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 有许多预构建的层。让我们回顾一下最常用的层，并指出这些层在何种章节中最常使用。
- en: Regular dense
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常规密集
- en: 'A dense model is a fully connected neural network layer. We have already seen
    examples of usage in [Chapter 1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml),
    *Neural Networks Foundations*. Here is the prototype with a definition of the
    parameters:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一个密集模型是一个全连接的神经网络层。我们已经在[第一章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)，*神经网络基础*中看到了使用示例。这里是一个带有参数定义的原型：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Recurrent neural networks — simple, LSTM, and GRU
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环神经网络——简单的、LSTM 和 GRU
- en: 'Recurrent neural networks are a class of neural networks that exploit the sequential
    nature of their input. Such inputs could be a text, a speech, time series, and
    anything else where the occurrence of an element in the sequence is dependent
    on the elements that appeared before it. We will discuss simple, LSTM, and GRU
    recurrent neural networks in [Chapter 6](57a694a6-93f4-4eec-9fbf-e4eafd2d6824.xhtml),
    *Recurrent Neural Network — RNN*. Here you can see some prototypes with a definition
    of the parameters:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 循环神经网络是一类利用输入序列特性的神经网络。这类输入可以是文本、语音、时间序列或任何其他序列中元素的出现依赖于前面元素的情况。我们将在[第6章](57a694a6-93f4-4eec-9fbf-e4eafd2d6824.xhtml)，*循环神经网络——RNN*中讨论简单的LSTM和GRU循环神经网络。这里展示了一些带有参数定义的原型：
- en: '[PRE4]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Convolutional and pooling layers
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷积层和池化层
- en: 'ConvNets are a class of neural networks using convolutional and pooling operations
    for progressively learning rather sophisticated models based on progressive levels
    of abstraction. This learning via progressive abstraction resembles vision models
    that have evolved over millions of years inside the human brain. People called
    it *deep* with 3-5 layers a few years ago, and now it has gone up to 100-200\.
    We will discuss convolutional neural networks in [Chapter 3](4be2a04a-4545-4051-bcd9-32764d21f0f2.xhtml),
    *Deep Learning with ConvNets*. Here are some prototypes with a definition of the
    parameters:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 卷积网络（ConvNets）是一类使用卷积和池化操作，通过逐步学习基于不同抽象层次的复杂模型的神经网络。这种通过逐步抽象的学习方式，类似于人类大脑中经过数百万年演化的视觉模型。几年前，人们称其为*深度*，通常指的是3到5层，而现在它已经发展到100到200层。我们将在[第3章](4be2a04a-4545-4051-bcd9-32764d21f0f2.xhtml)，*深度学习与卷积网络*中讨论卷积神经网络。以下是带有参数定义的原型：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Regularization
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则化
- en: 'Regularization is a way to prevent overfitting. We have already seen examples
    of usage in [Chapter 1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml), *Neural Networks
    Foundations*. Multiple layers have parameters for regularization.  The following
    is the list of regularization parameters commonly used for dense, and convolutional
    modules:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正则化是一种防止过拟合的方法。我们已经在[第1章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)，*神经网络基础*中看到过使用示例。多个层有用于正则化的参数。以下是常用于全连接和卷积模块的正则化参数列表：
- en: '`kernel_regularizer`: Regularizer function applied to the weight matrix'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kernel_regularizer`：应用于权重矩阵的正则化函数'
- en: '`bias_regularizer`: Regularizer function applied to the bias vector'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bias_regularizer`：应用于偏置向量的正则化函数'
- en: '`activity_regularizer`: Regularizer function applied to the output of the layer
    (its activation)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activity_regularizer`：应用于层输出（激活）的正则化函数'
- en: In addition is possible to use Dropout for regularization and that is frequently
    a very effective choice
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以使用Dropout进行正则化，这通常是一个非常有效的选择
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Where:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '`rate`: It is a float between 0 and 1 which represents the fraction of the
    input units to drop'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rate`：它是一个介于0和1之间的浮动数，表示丢弃的输入单元的比例'
- en: '`noise_shape`: It is a 1D integer tensor which represents the shape of the
    binary dropout mask that will be multiplied with the input'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noise_shape`：它是一个一维整数张量，表示将与输入相乘的二进制丢弃掩码的形状'
- en: '`seed`: It is a integer which is used use as random seed'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seed`：它是一个整数，用作随机种子'
- en: Batch normalization
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批量归一化
- en: 'Batch normalization (for more information, refer to [https://www.colwiz.com/cite-in-google-docs/cid=f20f9683aaf69ce](https://www.colwiz.com/cite-in-google-docs/cid=f20f9683aaf69ce)) is
    a way to accelerate learning and generally achieve better accuracy. We will look
    at examples of usage in [Chapter 4](a67ea944-b1a6-48a3-b8aa-4e698166c0eb.xhtml),
    *Generative Adversarial Networks and WaveNet*, when we discuss GANs. Here is the
    prototype with a definition of the parameters:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 批量归一化（欲了解更多信息，请参考[https://www.colwiz.com/cite-in-google-docs/cid=f20f9683aaf69ce](https://www.colwiz.com/cite-in-google-docs/cid=f20f9683aaf69ce)）是一种加速学习并通常实现更高准确率的方法。我们将在[第4章](a67ea944-b1a6-48a3-b8aa-4e698166c0eb.xhtml)，*生成对抗网络与WaveNet*中讨论GAN时展示使用示例。以下是带有参数定义的原型：
- en: '[PRE7]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: An overview of predefined activation functions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预定义激活函数概述
- en: 'Activation includes commonly used functions such as sigmoid, linear, hyperbolic
    tangent, and ReLU. We have seen a few examples of activation functions in [Chapter
    1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml), *Neural Networks Foundations*,
    and more examples will be presented in the next chapters. The following diagrams
    are examples of sigmoid, linear, hyperbolic tangent, and ReLU activation functions:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 激活函数包括常用的函数，如 Sigmoid、线性、双曲正切和 ReLU。我们在[第1章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)《神经网络基础》中看到了一些激活函数的示例，更多示例将在后续章节中呈现。以下图示为
    Sigmoid、线性、双曲正切和 ReLU 激活函数的示例：
- en: '| **Sigmoid**![](img/image_02_023.png) | **Linear**![](img/image_02_024.png)
    |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| **Sigmoid**![](img/image_02_023.png) | **线性**![](img/image_02_024.png) |'
- en: '| **Hyperbolic tangent**![](img/image_02_025.png) | **ReLU**![](img/image_02_026.png)
    |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| **双曲正切**![](img/image_02_025.png) | **ReLU**![](img/image_02_026.png) |'
- en: An overview of losses functions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 损失函数概述
- en: 'Losses functions (or objective functions, or optimization score function; for
    more information, refer to [https://keras.io/losses/](https://keras.io/losses/)) can
    be classified into four categories:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 损失函数（或目标函数，或优化得分函数；更多信息，请参见[https://keras.io/losses/](https://keras.io/losses/)）可以分为四类：
- en: 'Accuracy which is used for classification problems. There are multiple choices:
    `binary_accuracy` (mean accuracy rate across all predictions for binary classification
    problems), `categorical_accuracy` (mean accuracy rate across all predictions for
    multiclass classification problems), `sparse_categorical_accuracy` (useful for
    sparse targets), and `top_k_categorical_accuracy` (success when the target class
    is within the `top_k` predictions provided).'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准确率用于分类问题。可选择多种方法：`binary_accuracy`（二分类问题中所有预测的平均准确率），`categorical_accuracy`（多分类问题中所有预测的平均准确率），`sparse_categorical_accuracy`（适用于稀疏目标），以及`top_k_categorical_accuracy`（当目标类别位于提供的
    `top_k` 预测之内时成功）。
- en: 'Error loss, which measures the difference between the values predicted and
    the values actually observed. There are multiple choices: `mse` (mean square error
    between predicted and target values), `rmse` (root square error between predicted
    and target values), `mae` (mean absolute error between predicted and target values),
    `mape` (mean percentage error between predicted and target values), and `msle`
    (mean squared logarithmic error between predicted and target values).'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误损失，用于衡量预测值与实际观察值之间的差异。可选择多种方法：`mse`（预测值与目标值之间的均方误差），`rmse`（预测值与目标值之间的均方根误差），`mae`（预测值与目标值之间的均绝对误差），`mape`（预测值与目标值之间的均百分比误差），以及`msle`（预测值与目标值之间的均平方对数误差）。
- en: Hinge loss, which is generally used for training classifiers. There are two
    versions: *hinge* defined as ![](img/image_02_027.png) and *squared hinge* defined
    as the the squared value of the hinge loss.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 铰链损失，通常用于训练分类器。有两个版本：*hinge* 定义为 ![](img/image_02_027.png) 和 *平方铰链* 定义为铰链损失的平方值。
- en: Class loss is used to calculate the cross-entropy for classification problems.
    There are multiple versions, including binary cross-entropy (for more information,
    refer to [https://en.wikipedia.org/wiki/Cross_entropy](https://en.wikipedia.org/wiki/Cross_entropy)),
    and categorical cross-entropy.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别损失用于计算分类问题的交叉熵。有多个版本，包括二元交叉熵（更多信息，请参见[https://en.wikipedia.org/wiki/Cross_entropy](https://en.wikipedia.org/wiki/Cross_entropy)），以及类别交叉熵。
- en: We have seen a few examples of objective functions in [Chapter 1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml),
    *Neural Networks Foundations*, and more examples will be presented in the next
    chapters.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)《神经网络基础》中看到了一些目标函数的示例，更多示例将在后续章节中呈现。
- en: An overview of metrics
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 度量函数概述
- en: A metric function (for more information, refer to [https://keras.io/metrics/](https://keras.io/metrics/))
    is similar to an objective function. The only difference is that the results from
    evaluating a metric are not used when training the model. We have seen a few examples
    of metrics in [Chapter 1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml), *Neural
    Networks Foundations*, and more examples will be presented in the next chapters.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 度量函数（更多信息，请参见[https://keras.io/metrics/](https://keras.io/metrics/)）类似于目标函数，唯一的区别是评估度量函数时得到的结果不会用于训练模型。我们在[第1章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)《神经网络基础》中看到了一些度量函数的示例，更多示例将在后续章节中呈现。
- en: An overview of optimizers
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化器概述
- en: Optimizers include SGD, RMSprop, and Adam. We have seen a few examples of optimizers
    in [Chapter 1](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml), *Neural Networks Foundations*,
    and more examples (Adagrad and Adadelta; for more information, refer to [https://keras.io/optimizers/](https://keras.io/optimizers/))
    will be presented in the next chapters.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 优化器包括SGD、RMSprop和Adam。我们在[第1章](c2484fb4-248d-49ed-8166-06aff812e5e9.xhtml)《神经网络基础》中看到了几个优化器的示例，更多的示例（如Adagrad和Adadelta；更多信息，请参考[https://keras.io/optimizers/](https://keras.io/optimizers/)）将在后续章节中展示。
- en: Some useful operations
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些有用的操作
- en: Here we report some utility operations that can be carried out with Keras APIs.
    The goal is to facilitate the creation of networks, the training process, and
    the saving of intermediate results.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们报告了一些可以通过Keras API执行的实用操作。目标是简化网络的创建、训练过程和中间结果的保存。
- en: Saving and loading the weights and the architecture of a model
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和加载模型的权重和架构
- en: 'Model architectures can be easily saved and loaded as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 模型架构可以轻松保存和加载，如下所示：
- en: '[PRE8]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Model parameters (weights) can be easily saved and loaded as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 模型参数（权重）可以轻松保存和加载，如下所示：
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Callbacks for customizing the training process
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于自定义训练过程的回调函数
- en: 'The training process can be stopped when a metric has stopped improving by
    using an appropriate `callback`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当某个指标停止改善时，可以使用适当的`callback`停止训练过程：
- en: '[PRE10]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Loss history can be saved by defining a `callback` like the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义如下的`callback`，可以保存损失历史：
- en: '[PRE11]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Checkpointing
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查点
- en: Checkpointing is a process that saves a snapshot of the application's state
    at regular intervals, so the application can be restarted from the last saved
    state in case of failure. This is useful during training of deep learning models,
    which can often be a time-consuming task. The state of a deep learning model at
    any point in time is the weights of the model at that time. Keras saves these
    weights in HDF5 format (for more information, refer to [https://www.hdfgroup.org/](https://www.hdfgroup.org/)) and
    provides checkpointing using its callback API.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点是一个过程，它定期保存应用程序的状态快照，以便在失败时从最后保存的状态重新启动应用程序。这在训练深度学习模型时非常有用，因为这通常是一个耗时的任务。深度学习模型在任何时刻的状态就是该时刻的模型权重。Keras将这些权重以HDF5格式保存（更多信息，请参考[https://www.hdfgroup.org/](https://www.hdfgroup.org/)），并通过其回调API提供检查点功能。
- en: 'Some scenarios where checkpointing can be useful include the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一些可能需要使用检查点的场景包括以下几点：
- en: If you want the ability to restart from your last checkpoint after your AWS
    Spot instance (for more information, refer to [http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html)) or
    Google preemptible virtual machine (for more information, refer to [https://cloud.google.com/compute/docs/instances/preemptible](https://cloud.google.com/compute/docs/instances/preemptible)) is
    unexpectedly terminated
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你希望在AWS Spot实例（更多信息，请参考[http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot-instances-work.html)）或Google抢占式虚拟机（更多信息，请参考[https://cloud.google.com/compute/docs/instances/preemptible](https://cloud.google.com/compute/docs/instances/preemptible)）意外终止后，能够从上次检查点重新开始
- en: If you want to stop training, perhaps to test your model on test data, then
    continue training from the last checkpoint
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想停止训练，可能是为了在测试数据上测试模型，然后从上次检查点继续训练
- en: If you want to retain the best version (by some metric such as validation loss)
    as it trains over multiple epochs
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你希望保留训练过程中最好的版本（通过某些指标，如验证损失）
- en: 'The first and second scenarios can be handled by saving a checkpoint after
    each epoch, which is handled by the default usage of the `ModelCheckpoint` callback.
    The following code illustrates how to add checkpointing during training of your
    deep learning model in Keras:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第一和第二种场景可以通过在每个epoch后保存检查点来处理，这可以通过默认使用`ModelCheckpoint`回调来实现。以下代码演示了如何在Keras中训练深度学习模型时添加检查点：
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The third scenario involves monitoring a metric, such as validation accuracy
    or loss, and only saving a checkpoint if the current metric is better than the
    previously saved checkpoint. Keras provides an additional parameter, `save_best_only`,
    which needs to be set to `true` when instantiating the checkpoint object in order
    to support this functionality.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种场景涉及监控某个指标，如验证准确率或损失，并且仅在当前指标优于之前保存的检查点时才保存检查点。Keras提供了一个额外的参数`save_best_only`，在实例化检查点对象时需要将其设置为`true`以支持此功能。
- en: Using TensorBoard and Keras
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TensorBoard 和 Keras
- en: 'Keras provides a callback for saving your training and test metrics, as well
    as activation histograms for the different layers in your model:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 提供了一个回调函数，用于保存训练和测试指标，以及模型中不同层的激活直方图：
- en: '[PRE13]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Saved data can then be visualized with TensorBoad launched at the command line:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的数据可以通过在命令行启动的 TensorBoard 进行可视化：
- en: '[PRE14]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using Quiver and Keras
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Quiver 和 Keras
- en: 'In [Chapter 3](4be2a04a-4545-4051-bcd9-32764d21f0f2.xhtml), *Deep Learning
    with ConvNets*, we will discuss ConvNets, which are an advanced deep learning
    technique for dealing with images. Here we give a preview of Quiver (for more
    information, refer to [https://github.com/jakebian/quiver](https://github.com/jakebian/quiver)),
    a tool useful for visualizing ConvNets features in an interactive way. The installation
    is pretty simple, and after that Quiver can be used with one single line:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](4be2a04a-4545-4051-bcd9-32764d21f0f2.xhtml)，*卷积神经网络与深度学习*中，我们将讨论卷积神经网络（ConvNets），这是一种用于处理图像的高级深度学习技术。这里我们预览一下
    Quiver（更多信息请参见[https://github.com/jakebian/quiver](https://github.com/jakebian/quiver)），它是一个用于以交互方式可视化卷积神经网络特征的工具。安装过程相当简单，安装后，Quiver
    可以通过一行命令来使用：
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will launch the visualization at `localhost:5000`. Quiver allows you to
    visually inspect a neural network, as in the following example:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `localhost:5000` 启动可视化。Quiver 允许你像下面的示例一样直观地检查神经网络：
- en: '![](img/image_02_028.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_028.png)'
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we discussed how to install Theano, TensorFlow, and Keras
    on the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们讨论了如何在以下环境中安装 Theano、TensorFlow 和 Keras：
- en: Your local machine
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上
- en: A dockerized infrastructure based on containers
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于容器的 Docker 化基础设施
- en: In the cloud with Google GCP, Amazon AWS, and Microsoft Azure
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云端使用 Google GCP、Amazon AWS 和 Microsoft Azure
- en: In addition to that, we looked at a few modules defining Keras APIs and some
    commonly useful operations such as loading and saving neural networks' architectures
    and weights, early stopping, history saving, checkpointing, interactions with
    TensorBoard, and interactions with Quiver.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还查看了几个模块，这些模块定义了 Keras API 以及一些常用操作，如加载和保存神经网络的架构和权重、早期停止、历史保存、检查点、与
    TensorBoard 的交互以及与 Quiver 的交互。
- en: In the next chapter, we will introduce the concept of convolutional networks
    a fundamental innovation in deep learning which has been used with success in
    multiple domains from text, to video, to speech going well beyond the initial
    image processing domain where they were originally conceived.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍卷积网络的概念，它是深度学习中的一项基础创新，已经在多个领域取得了成功应用，从文本、视频到语音，远远超出了最初在图像处理领域的应用。
