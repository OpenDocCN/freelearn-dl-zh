- en: What's Next for Deep Learning?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习的下一步是什么？
- en: This final chapter will try to give an overview of what's in store for the future
    of **deep learning** (**DL**) and, more generally, for AI.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后将尝试概述**深度学习**（**DL**）的未来，以及更广泛的人工智能的未来。
- en: 'We will be covering the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: DL and AI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习（DL）与人工智能（AI）
- en: Hot topics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热点话题
- en: Spark and **Reinforcement Learning** (**RL**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spark 和 **强化学习** (**RL**)
- en: Support for **Generative Adversarial Networks** (**GANs**) in DL4J
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成对抗网络**（**GANs**）在DL4J中的支持'
- en: The rapid advancement of technology not only speeds up the implementation of
    existing AI ideas, it creates new opportunities in this space that would have
    been unthinkable one or two years ago. Day by day, AI is finding new practical
    applications in diverse areas and is radically transforming the way we do business
    in them. Therefore, it would be impossible to cover all of the new scenarios,
    so we are going to focus on some particular contexts/areas where we have been
    directly or indirectly involved.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 技术的快速进步不仅加速了现有人工智能理念的实施，还在这一领域创造了新的机会，这些机会在一两年前是不可想象的。人工智能日复一日地在各个领域发现新的实际应用，并且正在彻底改变我们在这些领域中的业务方式。因此，覆盖所有的新场景是不可能的，所以我们将专注于一些特定的领域/情境，那里我们直接或间接地有所参与。
- en: What to expect next for deep learning and AI
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对深度学习和人工智能的未来期望
- en: As mentioned previously, there are daily advances in technology and there's
    a growing availability of greater, but at the same time cheaper, computational
    power, along with a greater availability of data, which is driving toward the
    implementation of deeper and more complex models. So, at the same time, the limit
    for both DL and AI seems to be the sky. Trying to understand what we have to expect
    for these fields is speculation that could help us clearly understand what would
    happen in a short period of time (2-3 years), but what can happen next could be
    less predictable, as it has been observed that any new idea in this space is bringing
    up other ideas and is contributing to radically transforming ways of doing business
    in several areas. So, what I am going to describe in this section is related to
    the immediate future rather than a long-term period.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，技术每天都在进步，同时计算能力的提升变得更加普及，且变得更加廉价，数据的可得性也在增加，这一切都推动着更深层次和更复杂模型的实现。因此，深度学习和人工智能的边界似乎没有上限。尝试理解我们对这些领域的期望，可能有助于我们清晰地了解短期内（2-3年）会发生什么，但接下来可能发生的事情则较为不可预测，因为在这一领域中，任何新的想法都带来了其他的想法，并且正在推动多个行业的业务方式发生根本性的变化。因此，我将在本节中描述的是关于近期未来的内容，而非长期的变化。
- en: DL has played a key role in shaping the future of AI. In some areas, such as,
    for example, image classification and recognition, object detection, and NLP,
    DL has outperformed ML, but this doesn't mean that ML algorithms became obsolete.
    For some particular problems, DL is probably overkill, so ML would still be enough.
    In some other more complex cases, a combination of algorithms (DL and non-DL)
    have led to significant results; a perfect example is the AlphaGo system ([https://deepmind.com/research/alphago/](https://deepmind.com/research/alphago/))
    by the DeepMind team, which uses a combination of the **Monte Carlo tree search**
    (**MCTS**): [http://mcts.ai/about/](http://mcts.ai/about/), with a DL network
    to quickly search for winning moves. This huge progress in DL has also led to
    other more complex and advanced techniques such as RL and GANs, which are discussed
    in the last two sections of this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习在塑造人工智能的未来中发挥了关键作用。在某些领域，如图像分类和识别、物体检测和自然语言处理（NLP）中，深度学习已经超越了机器学习（ML），但这并不意味着机器学习算法已经过时。对于一些特定问题，深度学习可能有些过于复杂，因此机器学习仍然足够。在一些更复杂的情况下，深度学习与非深度学习算法的结合已经取得了显著成果；一个完美的例子是DeepMind团队的AlphaGo系统（[https://deepmind.com/research/alphago/](https://deepmind.com/research/alphago/)），它使用**蒙特卡洛树搜索**（**MCTS**）：[http://mcts.ai/about/](http://mcts.ai/about/)，结合深度学习网络来快速寻找制胜的棋步。深度学习的这一巨大进展也促成了其他更复杂和更先进的技术，如强化学习和生成对抗网络，这些将在本章的最后两节中讨论。
- en: 'However, while algorithms and models are making incredibly fast progress, there
    are still plenty of obstacles that require significant human intervention (and
    extra time) to remove them before data can be taken and turned into machine intelligence.
    As discussed in the paper *Hidden Technical Debt in Machine Learning Systems*
    ([https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf](https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf))
    by a research group at Google, in DL and ML systems the cost of data dependencies
    is difficult to detect and it could easily become higher than the cost of code
    dependencies. The following diagram, which has been taken from the same Google
    research paper, shows the proportion of the dependencies in ML or DL code versus
    the rest of the dependencies in an ML or DL system:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，虽然算法和模型正在取得令人惊人的快速进展，仍然存在许多障碍需要显著的人工干预（和额外的时间），才能在将数据提取并转化为机器智能之前消除它们。正如谷歌研究小组在论文*Hidden
    Technical Debt in Machine Learning Systems*（[https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf](https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf)）中讨论的那样，在
    DL 和 ML 系统中，数据依赖的成本难以检测，并且可能轻易高于代码依赖的成本。以下图表取自同一篇谷歌研究论文，显示了 ML 或 DL 系统中 ML 或 DL
    代码相对于其他依赖的比例：
- en: '![](img/9b3e64a5-dd2b-48ef-b401-925ae338744e.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b3e64a5-dd2b-48ef-b401-925ae338744e.png)'
- en: 'Figure 15.1: Only a small fraction (the black rectangle at the center of the
    image) of real-world ML/DL systems are composed of ML/DL code'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1：现实世界中的大部分 ML/DL 系统只有一个很小的部分（图像中央的黑色矩形）由 ML/DL 代码组成
- en: As you can see from the preceding diagram, things such as data collection and
    the setup and maintenance of the serving infrastructure are more time and money
    consuming than the model's implementation and training. Therefore, I would expect
    significant improvements when automating these tasks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从上述图表中可以看到的那样，诸如数据收集、设置和维护服务基础设施等事项比模型的实施和训练更为耗时和花费。因此，我期望在自动化这些任务时会有显著的改进。
- en: Topics to watch for
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需关注的话题
- en: In the past few months, a new debate started about the so-called explainable
    AI, an AI which isn't a sort of black box (where we understand only the underlying
    mathematical principles) and whose actions or decisions can be easily understood
    by humans. Criticism has been also been made (in general for AI, but in particular
    DL) about the generated results from models not being compliant with **GDPR**
    (short for **General Data Protection Regulation**): [https://ec.europa.eu/commission/priorities/justice-and-fundamental-rights/data-protection/2018-reform-eu-data-protection-rules_en](https://ec.europa.eu/commission/priorities/justice-and-fundamental-rights/data-protection/2018-reform-eu-data-protection-rules_en) for
    data related to EU citizens, or other data regulations that will probably be defined
    next in other parts of the world, which require the right to an explanation to
    prevent discriminatory effects based on different factors.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几个月中，关于所谓的可解释 AI，即不是黑匣子类型（我们只理解其基础数学原理）并且其行动或决策可以被人类轻松理解的 AI，引发了一场新的辩论。批评也已经开始（一般针对
    AI，但特别是 DL），关于模型生成的结果不符合**GDPR**（即**通用数据保护条例**）的问题：[https://ec.europa.eu/commission/priorities/justice-and-fundamental-rights/data-protection/2018-reform-eu-data-protection-rules_en](https://ec.europa.eu/commission/priorities/justice-and-fundamental-rights/data-protection/2018-reform-eu-data-protection-rules_en)
    ，涉及欧盟公民的数据，或其他可能在全球其他地区定义的数据法规，这些法规要求有权要求解释，以防止基于不同因素的歧视效应。
- en: While this is a real hot and not negligible topic, and since several interesting
    analyze and proposals (such as [https://www.academia.edu/18088836/Defeasible_Reasoning_and_Argument-Based_Systems_in_Medical_Fields_An_Informal_Overview](https://www.academia.edu/18088836/Defeasible_Reasoning_and_Argument-Based_Systems_in_Medical_Fields_An_Informal_Overview) from
    Dr. Luca Longo ([https://ie.linkedin.com/in/drlucalongo](https://ie.linkedin.com/in/drlucalongo))
    from the Dublin Institute of Technology) have been done, I (and the readers of
    this book most probably too) have had the chance to listen to a few others' opinions
    and points of view in predicting a bad future for DL in particular, where DL applications
    will be restricted to non-business apps and games. In this section, I am not going
    to make comments on that point of view, which is often based more on opinions
    than facts, and is sometimes done by people who are not fully involved in production
    or research projects in the DL or ML spaces. Instead, I would prefer to present
    a list of practical DL applications that should still stay valid for a while.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个非常热门且不容忽视的话题，而且已有一些有趣的分析和提案（例如来自都柏林科技学院的Luca Longo博士的[https://www.academia.edu/18088836/Defeasible_Reasoning_and_Argument-Based_Systems_in_Medical_Fields_An_Informal_Overview](https://www.academia.edu/18088836/Defeasible_Reasoning_and_Argument-Based_Systems_in_Medical_Fields_An_Informal_Overview)以及[https://ie.linkedin.com/in/drlucalongo](https://ie.linkedin.com/in/drlucalongo)的研究），我（以及本书的读者们大概也是）有机会听取了其他一些人对深度学习（DL）未来不佳的预测观点，认为DL的应用将仅限于非商业性应用和游戏。在本节中，我不会对这种观点做评论，因为它通常更多是基于意见而非事实，而且有时由那些没有完全参与DL或机器学习（ML）领域的生产或研究项目的人提出。相反，我更愿意展示一份关于仍然有效且可以持续一段时间的实际DL应用列表。
- en: Healthcare is one of the sectors that has a higher number of practical applications
    of AI and DL. Optum ([https://www.optum.com/](https://www.optum.com/)), a tech
    company that's part of the UnitedHealth Group, has achieved, as part of its overall
    strategy to transform healthcare operations, significant results when applying
    NLP to several of its business use cases. The ability of AI to understand both
    structured and unstructured data plays a critical role in medical record review
    (where most parts of the data are unstructured). Optum's so-called clinically
    intelligent NLP unlocks the unstructured content to get structured data elements,
    such as diagnoses, procedures, drugs, labs, and more that make up complete and
    accurate clinical documentation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 医疗保健是AI和DL实际应用数量较多的行业之一。Optum（[https://www.optum.com/](https://www.optum.com/)），作为UnitedHealth
    Group的一部分，已经在其整体战略中取得了显著成果，特别是在将自然语言处理（NLP）应用于多个商业用例中。AI理解结构化和非结构化数据的能力在医疗记录审查中起着至关重要的作用（大多数数据都是非结构化的）。Optum的所谓临床智能NLP能够解锁非结构化内容，以获取结构化数据元素，如诊断、治疗过程、药物、实验室检查等，进而形成完整且准确的临床文档。
- en: Data from unstructured sources is automatically retrieved through NLP technology
    that complements the structured data coming through more *traditional* clinical
    models and rules engines. This level of automation can accurately identify diagnoses,
    along with related conditions and procedures to implement the care that's provided,
    but it is also necessary to define the appropriate reimbursement, quality initiatives,
    and other critical healthcare operations. But understanding what has been documented
    in a record is only a part of what makes NLP so valuable in healthcare. Clinically
    intelligent NLP technology can also identify documentation gaps; it can understand
    not only what is in a record, but also what is missing. This way, clinicians can
    get valuable feedback so that they can improve documentation. Other remarkable
    applications of AI in Optum have been related to payment integrity, simplified
    population analysis, and call centers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 来自非结构化来源的数据通过NLP技术自动提取，与通过更*传统*临床模型和规则引擎获得的结构化数据互补。这种自动化水平能够准确识别诊断、相关疾病和治疗过程，以实施提供的护理，但它也有助于定义适当的报销、质量措施以及其他关键的医疗保健操作。然而，理解记录中已经记录了什么，仅仅是NLP在医疗领域价值的一个方面。临床智能NLP技术还能够识别文档中的空白；它不仅能理解记录中有什么，还能理解缺少了什么。通过这种方式，临床医生可以获得有价值的反馈，从而改善文档记录。Optum在AI方面的其他显著应用还包括支付完整性、简化的人口分析和呼叫中心等。
- en: Another hot topic in AI is robotics. While, technically speaking, it is a separate
    branch, it has a lot of overlap with AI. Advances in DL and RL provide answers
    to several questions in robotics. Robots have being defined by first being able
    to sense, then compute the inputs of their sensors, and finally take action based
    on the results of those computations. AI comes into play to move them away from
    an industrial step-and-repeat model and make them smarter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能的另一个热门话题是机器人技术。从技术角度讲，机器人学是一个独立的领域，但它与人工智能有很多交集。深度学习（DL）和强化学习（RL）的进展为机器人技术中的多个问题提供了解决方案。机器人定义为首先能够感知，然后计算传感器的输入，最后根据这些计算结果采取行动。人工智能的介入使得机器人摆脱了工业化的“步步重复”模式，使它们变得更加智能。
- en: A perfect example of a successful user story in this direction is the German
    startup Kewazo ([https://www.kewazo.com/](https://www.kewazo.com/)). They have
    implemented a smart robotic scaffolding transportation system that addresses several
    problems such as understaffing, efficiency, high costs, time-consuming activities,
    and worker's safety. AI has made it possible for them to implement a robotic system
    that, through data about the overall scaffolding assembly process delivered in
    real time, allows constant control and significant optimization or tuning. AI
    has also helped Kewazo engineers to identify other use cases, such as roofing
    or solar panel installations, where their robots can work and help achieve the
    same results as a scaffolding assembly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一方向上，一个成功的用户案例是德国初创公司Kewazo（[https://www.kewazo.com/](https://www.kewazo.com/)）。他们实施了一种智能机器人脚手架运输系统，解决了人手不足、效率低下、高成本、耗时工作和工人安全等问题。人工智能使得他们能够实现一个机器人系统，通过实时传递关于整体脚手架组装过程的数据，实现持续控制和显著优化或调优。人工智能还帮助Kewazo的工程师识别出其他应用场景，例如屋顶或太阳能面板安装，机器人可以在这些场景中工作并帮助实现与脚手架组装相同的结果。
- en: The **Internet of Things** (**IoT**) is another area where AI is becoming more
    pervasive every day. IoT is based on the concept that daily use physical devices
    are connected to the internet and can communicate with each other to exchange
    data. The data that's collected could be processed intelligently to make devices
    smarter. The number of AI and IoT use cases is constantly growing due to the rapidly
    increasing number of connected devices (and the data that's generated by them).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网**（**IoT**）是人工智能日益普及的另一个领域。物联网的基本概念是日常使用的物理设备通过互联网连接，并能够相互通信以交换数据。这些收集到的数据可以被智能处理，从而使设备变得更加智能。随着连接设备数量的急剧增加（以及由这些设备生成的数据），人工智能和物联网的应用场景也在不断增长。'
- en: 'Among these use cases, I would like to mention the potential of AI for smart
    buildings. The rapid growth of the Irish economy in the past 5 years, which has
    been driven by industries such as IT, banking, finance, and pharma, has led to
    a radical transformation of the area where I work at the present time, the Dublin
    city center between the Docklands and the Grand Canal Dock. To address the constant
    increasing need for office space from new or expanding companies, hundreds of
    new buildings have been built (and many more are coming). All of these recent
    buildings use some AI, combined with IoT, to become smarter. Significant results
    have been achieved in the following areas:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些应用场景中，我想提到人工智能在智能建筑中的潜力。过去五年，由信息技术、银行、金融和制药等行业推动的爱尔兰经济迅速增长，导致我目前工作的地区发生了根本性变化，即都柏林市中心的Docklands和Grand
    Canal Dock之间。为了应对新兴或扩张中的公司对办公空间日益增长的需求，数百座新建筑应运而生（还有更多在建）。所有这些新建的建筑都使用了一些人工智能技术，结合物联网，使建筑变得更智能。在以下领域取得了显著成果：
- en: Making buildings more comfortable for humans
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让建筑对人类更加舒适
- en: Making building safer for humans
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让建筑对人类更加安全
- en: Improving energy savings (and helping the environment)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善能源节约（并有助于环保）
- en: Traditional controllers (for temperature, lights, doors, and so on) use a limited
    number of sensors to automatically adjust the devices to a constant end result.
    This paradigm used to leave out an important thing: buildings are occupied by
    humans, but they are controlled the same, regardless of whether occupants are
    present or not. This means that things like making the people comfortable or saving
    energy, just to mention a couple issues, weren't taken into account. IoT combined
    with AI can add this critical missing piece. Therefore, buildings can have priorities
    and not simply follow a rigid programming paradigm.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的控制器（例如温度、灯光、门等）使用有限数量的传感器自动调整设备以实现恒定的最终结果。这个范式以前忽视了一个重要的因素：建筑物是由人类居住的，但无论是否有人在场，建筑物的控制方式都是一样的。这意味着像让人们感到舒适或节省能源之类的问题，根本没有被考虑在内。物联网与人工智能相结合，可以填补这个关键的空白。因此，建筑物可以有优先级，而不仅仅是遵循严格的编程范式。
- en: Another interesting real-world use case for IoT and AI is farming. The farming
    sector (dairy, in particular) is a significant part of the Irish GDP and not a
    negligible voice in Irish exports. Farming has new and old challenges (such as
    producing more food on the same acres, meeting strict emissions requirements,
    protecting plantations from pests, taking the climate into account and global
    climate change, controlling water flow, monitoring extensive orchards, fighting
    fires, monitoring soil quality, monitoring the health of animals, and so on).
    This means that farmers can't rely just on traditional practices. AI, IoT, and
    IoT-enabled sensors are now helping them in solving the challenges we mentioned
    previously, and many others. Lots of practical applications of smart farming are
    in place in Ireland (some of them were presented at the Predict 2018 conference: [https://www.tssg.org/projects/precision-dairy/](https://www.tssg.org/projects/precision-dairy/))
    and more are to be expected across 2019.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网和人工智能的另一个有趣的实际应用场景是农业。农业部门（特别是乳制品）是爱尔兰国内生产总值的重要组成部分，也是爱尔兰出口中不可忽视的一部分。农业面临着新的和旧的挑战（例如在相同的土地面积上生产更多的食物、满足严格的排放要求、保护种植园免受害虫侵害、考虑气候及全球气候变化、控制水流、监控大规模果园、抗击火灾、监控土壤质量、监测动物健康等等）。这意味着农民不能仅仅依赖传统的做法。人工智能、物联网和物联网支持的传感器正在帮助他们解决我们之前提到的挑战以及更多的问题。爱尔兰已经在多个实际应用中部署了智能农业（其中一些在2018年Predict大会上展示过：[https://www.tssg.org/projects/precision-dairy/](https://www.tssg.org/projects/precision-dairy/)），预计2019年还会有更多应用落地。
- en: Speaking about AI and IoT, edge analytics is another hot topic. Edge analytics,
    which is an alternative to traditional big data analytics that is performed in
    centralized ways, is the analysis of data from some non-central point in a system,
    such as a connected device or sensor. Several real-world applications of edge
    analytics are currently in place, but are not restricted to it, in the industry
    4.0 space ([https://en.wikipedia.org/wiki/Industry_4.0](https://en.wikipedia.org/wiki/Industry_4.0)).
    Analyzing data as it is generated can decrease latency in the decision-making
    process on connected devices.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 说到人工智能和物联网，边缘分析是另一个热门话题。边缘分析是传统的大数据分析的替代方案，传统大数据分析通常是在集中式方式下执行的，而边缘分析则是在系统中的某个非中心点（例如连接设备或传感器）分析数据。目前，边缘分析在工业4.0领域中已有多个实际应用（但不限于此）([https://en.wikipedia.org/wiki/Industry_4.0](https://en.wikipedia.org/wiki/Industry_4.0))。在数据生成的同时进行分析，可以减少决策过程中的延迟，尤其是在连接设备上。
- en: Imagine, for example, a situation where sensor data from a manufacturing system
    points to the probable failure of a specific part; rules built into a ML or DL
    algorithm interpreting the data at the network edge can automatically shut down
    the machine and send an alert to maintenance managers so that that part can be
    promptly replaced. This can save lot of time compared to transmitting the data
    to a centralize data location for processing and analysis and reduce, if not avoid,
    the risk of unplanned machinery downtime.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设在某制造系统中，传感器数据指示某个特定部件可能会故障；内置在机器学习（ML）或深度学习（DL）算法中的规则可以自动在网络边缘解读这些数据，进而关闭机器并向维修经理发送警报，以便及时更换该部件。与将数据传输到集中数据位置进行处理和分析相比，这可以节省大量时间，并减少甚至避免计划外机械停机的风险。
- en: Edge analytics also brings benefits in terms of scalability. In those cases
    where the number of connected devices in an organization increases (and the amount
    of generated and collected data too), by pushing algorithms to sensors and network
    devices, it is possible to alleviate the processing strain on enterprise data
    management and centralized analytics systems. There are some promising open source
    projects in this space to keep an eye on. One is DL4J itself; its mobile features
    allow multi-layer neural network model definition, training, and inference on
    Android devices (there's no support for other mobile platforms, since Android
    is the natural choice as it's a DL4J a framework for the JVM). TensorFlow Lite
    ([https://www.tensorflow.org/lite/](https://www.tensorflow.org/lite/)) enables
    on‑device ML inference with low latency and a small binary size on several mobile
    operating systems (Android, iOS, and others) and embedded devices. The latest
    releases of the StreamSets data collector edge ([https://streamsets.com/products/sdc-edge](https://streamsets.com/products/sdc-edge))
    allow you to trigger advanced analytics and ML (TensorFlow) in devices (Linux,
    Android, iOS, Windows, and MacOS are the supported operating systems for it).
    I would expect much more to come from the open source world on this front.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘分析还带来了可伸缩性方面的好处。在那些组织中，连接设备数量增加（以及生成和收集的数据量也增加）的情况下，通过将算法推送到传感器和网络设备，可以减轻企业数据管理和集中分析系统的处理压力。在这个领域有一些值得关注的有前途的开源项目。DL4J本身就是其中之一；其移动特性允许在Android设备上定义多层神经网络模型、训练和推理（由于Android是JVM框架的自然选择，其他移动平台不支持）。TensorFlow
    Lite ([https://www.tensorflow.org/lite/](https://www.tensorflow.org/lite/)) 可以在几种移动操作系统（包括Android、iOS和其他）和嵌入式设备上实现低延迟、小二进制大小的设备端ML推理。StreamSets数据收集器边缘的最新版本（[https://streamsets.com/products/sdc-edge](https://streamsets.com/products/sdc-edge)）允许在设备上触发高级分析和ML（TensorFlow）（Linux、Android、iOS、Windows和MacOS是其支持的操作系统）。我期待在这个领域会有更多来自开源世界的发展。
- en: The rise of DL has led researchers to develop hardware chips that can directly
    implement neural network architectures. They are designed to mimic the human brain
    at the hardware level. In a traditional chip, the data needs to be transferred
    between CPUs and storage blocks, while in an neuromorphic chip, data is both processed
    and stored in the chip and can generate synapses when required. This second approach
    results in no time overhead and an energy saving. Therefore, the future of AI
    would most probably be more neuromorphic than based on CPUs or GPUs. With about
    100 billion neurons densely packed into a small volume, the human brain can handle complex
    computations at lightning speed using very little energy. These past few years
    saw brain-inspired algorithms that can do things like identify faces, mimic voices,
    play games, and more. But software is only part of the bigger picture. Our state-of-the-art
    computers can't really run these powerful algorithms. That's where neuromorphic
    computing comes into the game.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: DL的崛起促使研究人员开发出可以直接实现神经网络架构的硬件芯片。它们设计为在硬件级别模仿人脑。在传统芯片中，数据需要在CPU和存储块之间传输，而在神经形态芯片中，数据既在芯片内处理又存储，并且在需要时可以生成突触。这种第二种方法不会产生时间开销，并且节省能量。因此，未来的人工智能很可能更多地基于神经形态芯片而不是基于CPU或GPU。人类大脑中大约有1000亿个神经元密集地打包在一个小体积内，使用非常少的能量就能以闪电般的速度处理复杂计算。在过去几年中，出现了受大脑启发的算法，可以做到识别人脸、模仿声音、玩游戏等。但软件只是更大图景的一部分。我们现代的计算机实际上无法运行这些强大的算法。这就是神经形态计算进入游戏的地方。
- en: The scenarios that have been presented in this section definitely confirm that,
    when considering GDPR or other data regulations, DL and AI definitely wouldn't
    be restricted to useless applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中展示的场景确实证实了，在考虑到GDPR或其他数据法规时，深度学习和人工智能绝对不会局限于无用的应用。
- en: Is Spark ready for RL?
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spark准备好接受RL了吗？
- en: Throughout this book, we have understood how DL can address several problems
    in computer vision, natural language processing, and time series forecasting.
    This combination of DL with RL can lead to more astonishing applications to solve
    more complex problems. But what is RL? It is a specific area of ML, where agents
    have to take action to maximize the reward in a given environment. The term reinforcement
    comes from the similarity of this learning process to what happens when children
    are incentivized by sweets; the RL algorithms are rewarded when making the right
    decision and penalized when making a wrong one. RL differs from supervised learning,
    where the training data brings the answer key with it and a model is then trained
    with the correct answer itself. In RL, the agents decide what to do to perform
    the given task and, if no training dataset is available, they are tied to learn
    only from their experience.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经理解了深度学习（DL）如何解决计算机视觉、自然语言处理和时间序列预测中的多个问题。将DL与强化学习（RL）结合起来，可以解决更复杂的问题，并带来更惊人的应用。那么，什么是强化学习（RL）呢？它是机器学习（ML）中的一个特定领域，在这个领域中，代理必须采取行动，以最大化给定环境中的奖励。强化学习这个术语来源于这种学习过程与孩子们通过糖果获得激励的相似性；当RL算法做出正确决策时会获得奖励，做出错误决策时会受到惩罚。RL与监督学习不同，后者中的训练数据本身就带有答案，然后通过正确的答案来训练模型。在RL中，代理决定该做什么来完成任务，如果没有训练数据集可用，它们只能通过自己的经验来学习。
- en: One of the principal practical applications of RL is in computer gaming (one
    of the best and most popular results is from AlphaGo ([https://deepmind.com/research/alphago/](https://deepmind.com/research/alphago/)),
    from Alphabet's DeepMind team), but it can also be used in other areas such as
    robotics, industrial automation, chatbot systems, autonomous cars, data processing,
    and many others.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 强化学习的一个主要应用领域是计算机游戏（其中最优秀且最受欢迎的成果之一是来自Alphabet公司DeepMind团队的AlphaGo，详见[https://deepmind.com/research/alphago/](https://deepmind.com/research/alphago/)），但它也可以应用于其他领域，如机器人技术、工业自动化、聊天机器人系统、自动驾驶汽车、数据处理等。
- en: Let's look at the basics of RL before we understand what the availability of
    support for it in Apache Spark is and what it could become.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解Apache Spark中对RL的支持以及它可能的发展之前，让我们先看一下强化学习的基本概念。
- en: 'Here are the main concepts:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是主要的概念：
- en: '**Agent**: It is the algorithm that takes actions.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理**：它是执行动作的算法。'
- en: '**Action**: It is one of the possible moves that an agent can make.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：它是代理可以采取的可能行动之一。'
- en: '**Discount factor**: It quantifies the difference, in terms of importance,
    between immediate and future rewards.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**折扣因子**：它量化了即时奖励与未来奖励在重要性上的差异。'
- en: '**Environment**: It is the world through which agents move. The environment
    takes the agent''s current state and action as input. It returns the agent reward
    and next state as output.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**：它是代理所处的世界。环境以代理的当前状态和动作作为输入，返回代理的奖励和下一个状态作为输出。'
- en: '**State**: It is a concrete situation in which an agent finds itself.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：它是代理所处的具体情境。'
- en: '**Reward**: It is the feedback by which the success or failure of an agent''s
    action (which makes a transition from one state to another) can be measured.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**奖励**：它是衡量代理行动成功或失败的反馈（该行动使得从一个状态到另一个状态的转变）。'
- en: '**Policy**: It is the strategy that an agent follows to determine its next
    action, based on the current state.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略**：它是一个代理根据当前状态来决定其下一步动作的策略。'
- en: '**Value**: It is the expected long-term return of the current state under a
    given policy.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**价值**：它是当前状态下，在给定策略下的预期长期回报。'
- en: '**Q-value**: It is similar to value, but it also takes into account the current
    action.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q值**：它类似于价值，但还考虑了当前的动作。'
- en: '**Trajectory**: It is a sequence of states and actions that influence them.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轨迹**：它是影响状态和动作的状态与动作序列。'
- en: 'We can summarize RL as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以总结强化学习（RL）如下：
- en: '![](img/ebe1cc81-df0a-459d-bb4a-6b96cfe1df3c.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebe1cc81-df0a-459d-bb4a-6b96cfe1df3c.png)'
- en: 'Figure 15.2: RL feedback loop'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：强化学习反馈回路
- en: 'A good example to explain these concepts is the popular Pac-Man video game
    ([https://en.wikipedia.org/wiki/Pac-Man](https://en.wikipedia.org/wiki/Pac-Man)); see
    the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子来解释这些概念的是流行的吃豆人视频游戏，详见[https://en.wikipedia.org/wiki/Pac-Man](https://en.wikipedia.org/wiki/Pac-Man)；请看下面的截图：
- en: '![](img/6280cd9e-4e53-44ba-b03f-eeb290ac771b.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6280cd9e-4e53-44ba-b03f-eeb290ac771b.png)'
- en: 'Figure 15.3: The Pac-Man video game'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：吃豆人视频游戏
- en: Here, the agent is the Pac-Man character, whose goal is to eat all of the food
    items in a maze, while avoiding some ghosts that try to kill it. The maze is the
    environment for the agent. It receives a reward for eating food and punishment
    (game over) when it gets killed by a ghost. The states are the locations of the
    agent in the maze. The total cumulative reward is the agent winning the game and
    moving to the next level. After starting its exploration, Pac-Man (agent) might
    find one of the four power pellets (which make it invulnerable to the ghosts)
    near the four corners of the maze and decide to spend all its time exploiting
    that discovery by continually going around that small portion of the overall maze
    and never going further into the rest of the environment to pursue the bigger
    prize. To build an optimal policy, the agent faces the dilemma of exploring new
    states while maximizing its reward at the same time. This way, it would then miss
    out on the ultimate reward (moving to the next level). This is called an exploration
    versus exploitation trade-off.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，代理是吃豆人角色，目标是在迷宫中吃掉所有食物，同时避开一些试图杀死它的鬼怪。迷宫是代理的环境。它吃到食物会获得奖励，被鬼怪杀死时则会受到惩罚（游戏结束）。状态是代理在迷宫中的位置。总累计奖励是代理赢得游戏并进入下一个关卡。开始探索后，吃豆人（代理）可能会发现迷宫四个角落附近的四颗能量豆（使它对鬼怪免疫），并决定花费所有时间利用这一发现，不断绕着迷宫的这小块区域转，永远不深入迷宫的其他部分去追求更大的奖励。为了构建一个最优策略，代理面临一个两难选择：一方面是探索新的状态，另一方面是最大化其奖励。这样，它可能错过了最终奖励（进入下一个关卡）。这被称为探索与利用的权衡。
- en: The most popular algorithms for RL are the **Markov decision process** (**MDP**): [https://en.wikipedia.org/wiki/Markov_decision_process](https://en.wikipedia.org/wiki/Markov_decision_process),
    **Q-learning** ([https://en.wikipedia.org/wiki/Q-learning](https://en.wikipedia.org/wiki/Q-learning)),
    and **A3C** ([https://arxiv.org/pdf/1602.01783.pdf](https://arxiv.org/pdf/1602.01783.pdf)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的RL算法是**马尔可夫决策过程**（**MDP**）：[https://en.wikipedia.org/wiki/Markov_decision_process](https://en.wikipedia.org/wiki/Markov_decision_process)，**Q学习**
    ([https://en.wikipedia.org/wiki/Q-learning](https://en.wikipedia.org/wiki/Q-learning))，和**A3C**
    ([https://arxiv.org/pdf/1602.01783.pdf](https://arxiv.org/pdf/1602.01783.pdf))。
- en: 'Q-learning is widely use in gaming (or gaming-like) spaces. It can be summarized
    with the following equation (the source code is from the Wikipedia page for Q-learning):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Q学习广泛应用于游戏（或类似游戏的）领域。它可以用以下方程式概括（源代码来自Q学习的Wikipedia页面）：
- en: '![](img/f16df61e-ff74-4da3-aba9-809885b22226.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f16df61e-ff74-4da3-aba9-809885b22226.png)'
- en: Here, *s[t]* is the state at time *t*, *a[t]* is the action taken by the agent,
    *r[t]* is the reward at time *t*, *s[t+1]* is the new state (time *t+1*), ![](img/645aec1f-4361-4b81-ac15-021c0fae6d8e.png)
    is the learning rate (![](img/653aec36-6dd8-4058-b906-55647168e2d6.png)), and
    ![](img/d2d3c192-68f8-46c1-afc4-962f9294af48.png) is the discount factor. This
    last one determines the importance of future rewards. If it is zero, it will make
    the agent short-sighted because it means that it will only consider current rewards.
    If its value is close to one, the agent will work hard to achieve a long-term
    high reward. If the discount factor value is or exceeds one, then the action values
    could diverge.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*s[t]* 是时刻 *t* 的状态，*a[t]* 是代理采取的行动，*r[t]* 是时刻 *t* 的奖励，*s[t+1]* 是新的状态（时刻
    *t+1*），![](img/645aec1f-4361-4b81-ac15-021c0fae6d8e.png) 是学习率 (![](img/653aec36-6dd8-4058-b906-55647168e2d6.png))，而
    ![](img/d2d3c192-68f8-46c1-afc4-962f9294af48.png) 是折扣因子。最后一个参数决定了未来奖励的重要性。如果它为零，代理会变得目光短浅，因为它只会考虑当前的奖励。如果其值接近1，代理则会努力实现长期的高奖励。如果折扣因子值为1或更高，则行动值可能会发散。
- en: The MLLib component of Apache Spark currently doesn't have any facility for
    RL and it seems that there is no plan, at the time of writing this book, to implement
    support for it in future Spark releases. However, there are some open source stable
    initiatives for RL that integrate with Spark.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Spark的MLLib组件目前没有针对RL的任何功能，而且在编写本书时，似乎没有计划在未来的Spark版本中实现对此的支持。然而，确实有一些与Spark集成的开源稳定RL项目。
- en: The DL4J framework provides a specific module for RL, RL4J, which was originally
    a separate project. As for all of the other DL4J components, it is fully integrated
    with Apache Spark. It implements the DQN (Deep Q Learning with double DQN) and
    AC3 RL algorithms.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: DL4J框架提供了一个专门的RL模块——RL4J，最初是一个独立的项目。和所有其他DL4J组件一样，它完全与Apache Spark集成。它实现了DQN（深度Q学习与双DQN）和AC3
    RL算法。
- en: Interesting implementations have been done by Yuhao Yang ([https://www.linkedin.com/in/yuhao-yang-8a150232](https://www.linkedin.com/in/yuhao-yang-8a150232))
    from Intel, which led to the analytics zoo initiative ([https://github.com/intel-analytics/analytics-zoo](https://github.com/intel-analytics/analytics-zoo)).
    Here's the link to the presentation he did at the Spark-AI summit 2018 ([https://databricks.com/session/building-deep-reinforcement-learning-applications-on-apache-spark-using-bigdl](https://databricks.com/session/building-deep-reinforcement-learning-applications-on-apache-spark-using-bigdl)). Analytics
    zoo provides a unified analytics and AI platform that seamlessly puts the Spark,
    TensorFlow, Keras, and BigDL programs into an integrated pipeline that can scale
    out to a large Spark cluster for distributed training or inference.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔的杨宇豪（[https://www.linkedin.com/in/yuhao-yang-8a150232](https://www.linkedin.com/in/yuhao-yang-8a150232)）做了有趣的实现，促成了Analytics
    Zoo计划的启动（[https://github.com/intel-analytics/analytics-zoo](https://github.com/intel-analytics/analytics-zoo)）。这是他在2018年Spark-AI峰会上的演讲链接（[https://databricks.com/session/building-deep-reinforcement-learning-applications-on-apache-spark-using-bigdl](https://databricks.com/session/building-deep-reinforcement-learning-applications-on-apache-spark-using-bigdl)）。Analytics
    Zoo提供了一个统一的分析和AI平台，可以将Spark、TensorFlow、Keras和BigDL程序无缝集成到一个可以扩展到大规模Spark集群进行分布式训练或推理的管道中。
- en: While RL4J, as part of DL4J, provides APIs for the JVM languages (including
    Scala) and BigDL provides APIs for both Python and Scala, a Python-only, end-to-end,
    open source platform for large-scale RL is available from Facebook. The name of
    this platform is Horizon ([https://github.com/facebookresearch/Horizon](https://github.com/facebookresearch/Horizon)).
    It is used by Facebook itself in production to optimize systems in large-scale
    environments. It supports the discrete-action DQN, parametric-action DQN, double
    DQN, DDPG ([https://arxiv.org/abs/1509.02971](https://arxiv.org/abs/1509.02971)),
    and SAC ([https://arxiv.org/abs/1801.01290](https://arxiv.org/abs/1801.01290))
    algorithms. The workflows and algorithms included in this platform have been built
    on open source frameworks (PyTorch 1.0, Caffe2, and Apache Spark). There's currently
    no support for their use with other popular Python ML frameworks such as TensorFlow
    and Keras.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然RL4J作为DL4J的一部分，为JVM语言（包括Scala）提供API，而BigDL则为Python和Scala提供API，但Facebook提供了一个仅支持Python的端到端开源平台，用于大规模强化学习。这个平台的名称是Horizon（[https://github.com/facebookresearch/Horizon](https://github.com/facebookresearch/Horizon)）。Facebook自己也在生产环境中使用它来优化大规模环境中的系统。它支持离散动作DQN、参数化动作DQN、双DQN、DDPG（[https://arxiv.org/abs/1509.02971](https://arxiv.org/abs/1509.02971)）和SAC（[https://arxiv.org/abs/1801.01290](https://arxiv.org/abs/1801.01290)）算法。该平台中的工作流和算法都是建立在开源框架（PyTorch
    1.0、Caffe2和Apache Spark）上的。目前尚不支持与其他流行的Python机器学习框架（如TensorFlow和Keras）一起使用。
- en: The Ray framework ([https://ray-project.github.io/](https://ray-project.github.io/))
    by RISELab ([https://rise.cs.berkeley.edu/](https://rise.cs.berkeley.edu/)) deserves
    a special mention. While DL4J and the other frameworks that we mentioned previously
    work in a distributed mode on top of Apache Spark, in the mind of the Berkley
    researchers, Ray is a replacement for Spark itself, which is seen by them as more
    general purpose and not the perfect fit for some real-world AI applications. Ray
    has been implemented in Python; it is fully compatible with the most popular Python
    DL frameworks, including TensorFlow and PyTorch; and it allows us to use a combination
    of more than one of them in the same application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: RISELab（[https://rise.cs.berkeley.edu/](https://rise.cs.berkeley.edu/)）的Ray框架（[https://ray-project.github.io/](https://ray-project.github.io/)）值得特别提及。尽管DL4J和我们之前提到的其他框架是在Apache
    Spark之上以分布式模式工作，但在伯克利的研究人员眼中，Ray是Spark本身的替代品，他们认为Spark更通用，但并不完全适合某些实际的AI应用。Ray是用Python实现的，完全兼容最流行的Python深度学习框架，包括TensorFlow和PyTorch；并且它允许在同一应用中使用多个框架的组合。
- en: In the specific case of RL, the Ray framework also provides a dedicated library,
    RLLib ([https://ray.readthedocs.io/en/latest/rllib.html](https://ray.readthedocs.io/en/latest/rllib.html)),
    which implements the AC3, DQN, evolution strategy ([https://en.wikipedia.org/wiki/Evolution_strategy](https://en.wikipedia.org/wiki/Evolution_strategy)),
    and PPO ([https://blog.openai.com/openai-baselines-ppo/](https://blog.openai.com/openai-baselines-ppo/))
    algorithms. At the time of writing this book, I am not aware of any real-world
    AI applications that are using this framework, but I believe it is worth following
    how it is going to evolve and its level of adoption by the industry.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在强化学习（RL）的特定情况下，Ray框架还提供了一个专门的库RLLib（[https://ray.readthedocs.io/en/latest/rllib.html](https://ray.readthedocs.io/en/latest/rllib.html)），它实现了AC3、DQN、进化策略（[https://en.wikipedia.org/wiki/Evolution_strategy](https://en.wikipedia.org/wiki/Evolution_strategy)）和PPO（[https://blog.openai.com/openai-baselines-ppo/](https://blog.openai.com/openai-baselines-ppo/)）算法。写这本书时，我不知道任何真实世界的AI应用正在使用这个框架，但我相信值得关注它如何发展以及行业的采用程度。
- en: DeepLearning4J future support for GANs
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeepLearning4J未来对GAN的支持
- en: '**Generative Adversarial Networks** (**GANs**) are deep neural network architectures
    that include two nets that are pitted against each other (that''s the reason for
    the *adversarial* adjective in the name). GAN algorithms are used in unsupervised
    machine learning. The main focus for GANs is to generate data from scratch. Among
    the most popular use cases of GANs, there''s image generation from text, image-to-image-translation,
    increasing image resolution to make more realistic pictures, and doing predictions
    on the next frames of videos.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**生成对抗网络**（**GANs**）是包括两个互相对抗的网络的深度神经网络架构（这也是名称中使用*对抗*一词的原因）。GAN算法用于无监督机器学习。GAN的主要焦点是从零开始生成数据。在GAN的最流行应用场景中，包括从文本生成图像、图像到图像的翻译、提高图像分辨率以制作更真实的图片，以及对视频的下一帧进行预测。'
- en: As we mentioned previously, a GAN is made up of two deep networks, the **generator**
    and the **discriminator**; the first one generates candidates, while the second
    one evaluates them. Let's see how generative and discriminative algorithms work
    at a very high level. Discriminative algorithms try to classify the input data.
    Therefore, they predict a label or category to which that input data belongs.
    Their only concern is to map features to labels. Generative algorithms, instead
    of predicting a label when given certain features, attempt to predict features
    when given a certain label. Essentially, they do the opposite thing from what
    the discriminative algorithms do.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，GAN由两个深度网络组成，**生成器**和**判别器**；第一个生成候选数据，第二个评估这些候选数据。让我们从很高的层次来看生成性和判别性算法是如何工作的。判别性算法尝试对输入数据进行分类，因此它们预测输入数据属于哪个标签或类别。它们唯一关心的是将特征映射到标签。生成性算法则不同，它们在给定某个标签时尝试预测特征，而不是像判别性算法那样预测标签。实际上，它们做的事情正好与判别性算法相反。
- en: 'Here''s how a GAN works. The generator generates new data instances, while
    the discriminator evaluates them to assess their authenticity. Using the same
    MNIST dataset ([http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/))
    that has been considered to illustrate more than one code example throughout this
    book, let''s think of a scenario to make it clear what happens in GANs. Suppose
    we have the generator generating an MNIST dataset like hand-written numerals and
    then we''re passing them to the discriminator. The goal of the generator is to
    generate passable hand-written digits without being caught, while the goal of
    the discriminator is to identify those images coming from the generator as fake
    hand-written digits. With reference to the following diagram, these are the steps
    that this GAN takes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是GAN的工作原理。生成器生成新的数据实例，而判别器评估这些数据以判断其真实性。使用本书中多次举例的相同MNIST数据集（[http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/)），让我们通过一个场景来明确GAN中发生的过程。假设我们有一个生成器生成像手写数字这样的MNIST数据集，然后将它们传递给判别器。生成器的目标是生成看起来像手写数字的图像，而不被发现；而判别器的目标是识别出来自生成器的这些图像是假手写数字。参考下面的图示，GAN的步骤如下：
- en: The generator net takes some random numbers as input and then returns an image.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成器网络接受一些随机数字作为输入，然后返回一张图像。
- en: The generated image is used to feed the discriminator net alongside a stream
    of other images that have been taken from the training dataset.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的图像被用来喂给判别器网络，同时传入其他从训练数据集中获取的图像流。
- en: 'While taking in both real and fake images, the discriminator returns probabilities,
    which are numbers between zero and one. Zero represents a prediction of fake,
    while one represents a prediction of authenticity:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判别器在接收真实和伪造图像时，会返回概率值，这些概率值介于零和一之间。零代表伪造的预测，而一代表真实性的预测：
- en: '![](img/ab766101-1770-4c23-a226-532ce41bf581.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab766101-1770-4c23-a226-532ce41bf581.png)'
- en: 'Figure 15.4: The typical flow of the MNIST example GAN'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：MNIST示例GAN的典型流程
- en: In terms of implementation, the **Discriminator Net** is a standard CNN that
    can categorize the images fed to it, while the **Generator Net** is an inverse
    CNN. Both nets try to optimize a different and opposing loss function in a zero-sum
    game. This model is essentially an actor-critic model ([https://cs.wmich.edu/~trenary/files/cs5300/RLBook/node66.html](https://cs.wmich.edu/~trenary/files/cs5300/RLBook/node66.html)),
    whereas the **Discriminator Net** changes its behavior, so does the generator
    net, and vice versa.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现方面，**判别器网络**是一个标准的卷积神经网络（CNN），可以对输入的图像进行分类，而**生成器网络**是一个反向卷积神经网络（CNN）。这两个网络在零和博弈中优化不同且相对立的损失函数。该模型本质上是一个演员-评论员模型（[https://cs.wmich.edu/~trenary/files/cs5300/RLBook/node66.html](https://cs.wmich.edu/~trenary/files/cs5300/RLBook/node66.html)），其中**判别器网络**会改变其行为，生成器网络也是如此，反之亦然。
- en: At the time of writing this book, DL4J doesn't provide any direct API for GANs,
    but it allows you to import existing Keras (like those you can find it at [https://github.com/eriklindernoren/Keras-GAN](https://github.com/eriklindernoren/Keras-GAN),
    which is our GitHub repository) or TensorFlow (like this one: [https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/gan.py](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/gan.py))
    GAN models and then retrain them and/or make predictions using the DL4J API in
    a JVM environment (which can include Spark), as explained in [Chapter 10](1066b0d4-c2f3-44f9-9cc4-d38469d72c3f.xhtml), *Deploying
    on a Distributed System*, and [Chapter 14](0b58f375-cfc1-4b9e-89d1-437ce6eff839.xhtml),
    *Image Classification*. No direct capabilities for GANs are in the immediate plan
    for DL4J, but the Python model's import is a valid way to train and make inference
    with them.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，DL4J并未提供任何直接支持生成对抗网络（GAN）的API，但它允许你导入现有的Keras（如你可以在[https://github.com/eriklindernoren/Keras-GAN](https://github.com/eriklindernoren/Keras-GAN)找到的那样，这是我们的GitHub仓库）或TensorFlow（如这个：[https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/gan.py](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/gan.py)）的GAN模型，然后在JVM环境中（包括Spark）使用DL4J
    API重新训练它们和/或进行预测，正如[第10章](1066b0d4-c2f3-44f9-9cc4-d38469d72c3f.xhtml)《*在分布式系统上的部署*》和[第14章](0b58f375-cfc1-4b9e-89d1-437ce6eff839.xhtml)《*图像分类*》所解释的那样。目前，DL4J没有针对GAN的直接功能，但导入Python模型是训练和推理的有效方法。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter wraps up this book. In this book, we got familiar with Apache Spark
    and its components, and then we moved on to discover the fundamentals of DL before
    getting practical. We started our Scala hands-on journey with the DL4J framework
    by understanding how to ingest training and testing data from diverse data sources
    (in both batch and streaming modes) and transform it into vectors through the
    DataVec library. The journey then moved on to exploring the details of CNNs and
    RNNs the implementation of those network models through DL4J, how to train them
    in a distributed and Spark-based environment, how to get useful insights by monitoring
    them using the visual facilities of DL4J, and how to evaluate their efficiency
    and do inference.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了本书的内容。在本书中，我们熟悉了Apache Spark及其组件，随后我们开始探索深度学习（DL）的基础知识，并开始实际操作。我们通过理解如何从不同的数据源（无论是批处理还是流模式）导入训练和测试数据，并通过DataVec库将其转化为向量，开始了我们的Scala实操之旅。接着，我们探索了卷积神经网络（CNN）和递归神经网络（RNN）的细节，以及通过DL4J实现这些网络模型的方法，如何在分布式和基于Spark的环境中训练它们，如何使用DL4J的可视化工具监控它们并获取有用的见解，以及如何评估它们的效率并进行推理。
- en: We also learned some tips and best practices that we should use when configuring
    a production environment for training, and how it is possible to import Python
    models that have been implemented in Keras and/or TensorFlow and make them run
    (or be retrained) in a JVM-based environment. In the last part of this book, we
    applied what we learned previously to implementing NLP use cases with DL first
    and then an end-to-end image classification application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了一些配置生产环境进行训练时应遵循的技巧和最佳实践，以及如何将已经在 Keras 和/或 TensorFlow 中实现的 Python 模型导入并使其在基于
    JVM 的环境中运行（或重新训练）。在本书的最后部分，我们将之前学到的知识应用于先使用深度学习实现自然语言处理（NLP）应用场景，再到实现一个端到端的图像分类应用。
- en: I hope that all of the readers who went through all of the chapters of this
    book have reached my initial goal: they have all of the building blocks to start
    tackling their own specific DL use case scenarios in Scala and/or Python, in a
    distributed system such as Apache Spark.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望所有阅读完本书所有章节的读者都达成了我的初衷目标：他们已经掌握了所有的构建块，可以开始在分布式系统（如 Apache Spark）中，使用 Scala
    和/或 Python 处理他们自己特定的深度学习（DL）应用场景。
