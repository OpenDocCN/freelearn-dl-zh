- en: Creating a Deep Learning Workflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建深度学习工作流
- en: In this chapter, you will learn about the AWS Step Functions service and also
    create AWS step functions by connecting to AWS Lambda using the AWS Console. You
    will also learn to create an AWS step function connection using the serverless
    framework and finally you will look into an example project for a deep learning
    workflow.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习 AWS Step Functions 服务，并通过使用 AWS 控制台连接到 AWS Lambda 来创建 AWS Step Functions。你还将学习如何使用
    Serverless 框架创建 AWS Step Functions 连接，最后，你将查看一个深度学习工作流的示例项目。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Introduction to the AWS Step Functions service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Step Functions 服务介绍
- en: Creating an AWS Step Functions connection to AWS Lambda using the AWS Console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS 控制台创建连接到 AWS Lambda 的 AWS Step Functions 连接
- en: Creating an AWS Step Functions connection using the serverless framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Serverless 框架创建 AWS Step Functions 连接
- en: Deep learning workflow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习工作流
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: AWS subscription
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 订阅
- en: Python 3.6
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: AWS CLI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: Serverless framework
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Serverless 框架
- en: You can find all the code at [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)找到所有代码。
- en: Introduction to the AWS Step Functions service
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Step Functions 服务介绍
- en: In this section, we will cover  the AWS Step Functions service, including its
    features and also the pricing for using this service.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将介绍 AWS Step Functions 服务，包括其功能以及使用该服务的定价信息。
- en: Processing workflow
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理工作流
- en: The processing workflow is an additional method for interaction between the
    different services. If you want to build a multi-step process in deep learning,
    it could mean loading the data, then pre-processing data and running the model
    on it. While you can put queries between each of these backend nodes, it would
    be very hard to monitor the processing for a single task. This is where the workflow
    can be extremely convenient. Basically, the workflow service takes care of the
    invocation of each node when needed and handles the intermediate state of the
    processing job. It allows you to have a high-level view of what is happening with
    each task, and track task failures and timeouts. Finally, it allows you to have
    very flexible component usage as part of the workflow.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 处理工作流是不同服务之间交互的额外方法。如果你想在深度学习中构建一个多步骤的过程，它可能意味着加载数据、预处理数据然后运行模型。虽然你可以在每个后端节点之间放置查询，但监控单个任务的处理将变得非常困难。这就是工作流非常方便的地方。基本上，工作流服务在需要时负责调用每个节点，并处理处理作业的中间状态。它让你能够高层次地查看每个任务的状态，并跟踪任务失败和超时。最后，它允许你在工作流中非常灵活地使用组件。
- en: AWS Step Functions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Step Functions
- en: AWS Step Function is an AWS service that allows you to manage the workflow as
    a state machine. It can be connected to any processing backend and has a native
    integration with AWS Lambda. It has a pay-as-you-go system, which makes it very
    convenient.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Step Functions 是一个 AWS 服务，允许你将工作流管理为一个状态机。它可以连接到任何处理后端，并与 AWS Lambda 进行原生集成。它采用按需计费系统，非常便捷。
- en: AWS step function features
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Step Functions 功能
- en: 'We will now look at the specific features of step functions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看 Step Functions 的具体功能：
- en: Step functions are extremely scalable and you don't have to manage neither the
    scanning nor the workflow.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Step Functions 极具可扩展性，你无需管理扫描或工作流。
- en: Step functions have a great visual UI, which enables easy monitoring of the
    processing jobs.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Step Functions 提供了出色的可视化 UI，便于监控处理作业。
- en: State management allows you to add complex logic, such as choosing the next
    node based on the results of previous nodes, and it also allows for running several
    nodes in parallel.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态管理允许你添加复杂的逻辑，例如根据前一个节点的结果选择下一个节点，并且它还支持并行运行多个节点。
- en: Some functions have convenient logic for retrying tasks, which enables you to
    ensure processing.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些功能提供了方便的重试任务逻辑，使你能够确保任务的处理。
- en: Built-in error handling allows you to handle cases. For example, when you encounter
    some exception and you need a way to add logic for error handling, such as marking
    a task as failed in the database.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的错误处理功能允许你处理各种情况。例如，当你遇到某些异常时，你需要一种方式来为错误处理添加逻辑，例如在数据库中将任务标记为失败。
- en: Scheduling allows you to run delayed processing tasks, which is very convenient
    for when you have to wait for another process to complete.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度允许你运行延迟处理任务，非常方便当你需要等待另一个过程完成时。
- en: AWS Step Functions pricing
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Step Functions定价
- en: One of the main advantages of step functions is the pay-as-you go system. It
    is very simple 25 cents per 10,000 requests, of which the  first 4,000 requests
    are free per month. This makes it perfect for early projects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Step Functions的主要优势之一是按需付费系统。非常简单，每10,000次请求收费25美分，其中每月前4,000次请求是免费的。这使其非常适合早期项目。
- en: Step functions versus SQS
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Step Functions与SQS的对比
- en: If we dive deep into how the step functions are different from SQS in terms
    of features and possible use cases, we can say that SQS is most suitable for short,
    simple, low-priority tasks that can come in very large volumes (millions of tasks
    per day). Step functions, on the other hand, are most suitable for cases where
    we have complex multi-step processes, which can take a lot of time and where we
    would like to guarantee delivery of every task (thousands of tasks per day). In
    the next section, you will learn how to create an AWS Step Functions connection
    to AWS Lamda using the AWS Console.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们深入分析Step Functions与SQS在功能和可能的使用场景上的区别，可以说SQS最适合处理简短、简单、低优先级的任务，这些任务的数量可能非常庞大（每天可能有数百万个任务）。而Step
    Functions则最适合处理那些需要多步骤、耗时较长的复杂过程，并且我们希望保证每个任务的交付（每天可能有数千个任务）。在接下来的部分中，你将学习如何使用AWS控制台创建AWS
    Step Functions与AWS Lambda的连接。
- en: Creating an AWS Step Functions connection to AWS Lambda using the AWS Console
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS控制台创建AWS Step Functions与AWS Lambda的连接
- en: 'In this section, we will create setp functions using the AWS Console. To create
    a step function, there are two main steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用AWS控制台创建Step Functions。创建Step Function有两个主要步骤：
- en: Creating the AWS Lambda instance
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建AWS Lambda实例
- en: Creating the step function that will use the Lambda instance
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建将使用Lambda实例的Step Function
- en: Creating the AWS Lambda instance
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AWS Lambda实例
- en: 'Now we will create an AWS Lambda instance using the AWS Console:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用AWS控制台创建一个AWS Lambda实例：
- en: Navigate to Lambda to create the Lambda instance.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Lambda来创建Lambda实例。
- en: 'Now enter the Name as `testLambdaStepFunction`, Runtime as Python 3.6, Role
    as Choose an existing role**,** and the existing role as `lamdaAdminRole`**.** Then
    click on Create function**,** which is at the bottom-right part of the screen:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入名称为`testLambdaStepFunction`，运行时选择Python 3.6，角色选择“选择现有角色”，现有角色选择`lamdaAdminRole`。然后点击“创建功能”，位于屏幕的右下角：
- en: '![](img/00e5c249-acd6-4662-bee7-31721498178e.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00e5c249-acd6-4662-bee7-31721498178e.png)'
- en: 'The Lambda instance has been successfully created:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda实例已成功创建：
- en: '![](img/de5327bf-d4ad-43d1-b9c6-a7419822ac4a.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de5327bf-d4ad-43d1-b9c6-a7419822ac4a.png)'
- en: Creating the step function
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Step Function
- en: 'To create the step function, we need to perform the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Step Function时，我们需要执行以下步骤：
- en: 'Go to the Step Functions service and click on Create state machine:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入Step Functions服务并点击“创建状态机”：
- en: '![](img/9ba76c2a-c3c4-49ed-add0-adbaeecd6ecf.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ba76c2a-c3c4-49ed-add0-adbaeecd6ecf.png)'
- en: In the Define state machine tab, enter the name as `testLambda:`
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“定义状态机”标签中，输入名称为`testLambda:`：
- en: '![](img/b1850fe2-2c5a-41b1-9644-7a1dc5d66338.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1850fe2-2c5a-41b1-9644-7a1dc5d66338.png)'
- en: 'Now we need to define `Type` as `Task` and the `Resource`. For the resource,
    you will need to use the ARN address of your Lambda, which you will find in the
    top-right corner of the tab. You can copy and paste this in the state machine
    definition section, as shown in the following screenshot:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将`Type`定义为`Task`和`Resource`。对于资源，你需要使用你Lambda的ARN地址，可以在标签的右上角找到。你可以将其复制并粘贴到状态机定义部分，如下图所示：
- en: '![](img/9a5a4d88-95b3-4a7a-a2ff-0f01fbc9eefa.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a5a4d88-95b3-4a7a-a2ff-0f01fbc9eefa.png)'
- en: 'We will now create an IAM role, which is done automatically. Enter the name
    as `StepFunctionTestRole` and click on Create function**.** This will take up
    a minute before your state machine has permissions to execute properly:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建一个IAM角色，这一步是自动完成的。输入名称为`StepFunctionTestRole`，然后点击“创建功能”。在你的状态机获得执行权限之前，这将花费一分钟时间：
- en: '![](img/b9269fed-f3f4-4d8f-97ff-5ccaa9177f9a.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9269fed-f3f4-4d8f-97ff-5ccaa9177f9a.png)'
- en: 'Now, once we have created the step function, we can test and send a simple
    message. To do this, click on Start execution:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们创建了Step Function后，我们可以测试并发送一条简单的消息。为此，请点击“开始执行”：
- en: '![](img/6eeb1272-b7ac-49bf-834b-17cc5274b0b2.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6eeb1272-b7ac-49bf-834b-17cc5274b0b2.png)'
- en: 'We can see the graph of execution here:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在这里看到执行图：
- en: '![](img/9207d192-9679-4c39-a4af-4075e247888a.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9207d192-9679-4c39-a4af-4075e247888a.png)'
- en: 'For each execution, you can see the input and output of the whole step function:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每次执行，你可以看到整个步进函数的输入和输出：
- en: '![](img/61cf30c5-e891-44cf-8836-a2a60be86e29.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61cf30c5-e891-44cf-8836-a2a60be86e29.png)'
- en: 'We can see the input and output of each node (this can be seen in the Step
    details tab). If there is an error, we will be able to see it in the Exception
    tab. Also, if you scroll down, you can also see the timeline of execution:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到每个节点的输入和输出（这可以在“步进详情”标签中查看）。如果有错误，我们将在“异常”标签中看到它。此外，如果你向下滚动，还可以看到执行的时间线：
- en: '![](img/18d7bb8b-5034-45ae-9976-2456b01b2aee.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18d7bb8b-5034-45ae-9976-2456b01b2aee.png)'
- en: 'We can also check logs by using the link present in the Resource tab under
    the Step details tab by clicking on it. This will lead you to the following page:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过点击“步进详情”标签下的“资源”标签中的链接来检查日志。这将带你到以下页面：
- en: '![](img/91a97835-4c06-42cb-940b-2862cfec6508.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91a97835-4c06-42cb-940b-2862cfec6508.png)'
- en: Therefore, we can see that step function is a very convenient service for managing
    Lambda execution.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到步进函数是一个非常方便的服务，用于管理Lambda执行。
- en: Creating AWS step functions for an AWS Lambda instance using the serverless
    framework
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无服务器框架为AWS Lambda实例创建AWS步进函数
- en: 'In this section, we''ll create step functions using the serverless framework. First,
    let''s take a look at our project files: one Python file and the serverless configuration
    file. In the configuration file, we will be adding a few plugins and describing
    step functions, which is a complex thing.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用无服务器框架创建步进函数。首先，让我们看看我们的项目文件：一个Python文件和无服务器配置文件。在配置文件中，我们将添加一些插件，并描述步进函数，这是一个复杂的内容。
- en: 'So, let''s explore the step functions in the serverless configuration file
    by beginning with the live code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们通过开始实时代码来探索无服务器配置文件中的步进函数：
- en: Deploy the serverless framework.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署无服务器框架。
- en: Using the CLI, check the deployment status of the serverless framework.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CLI，检查无服务器框架的部署状态。
- en: Now, check the step function result using the AWS Console.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过AWS控制台检查步进函数结果。
- en: Step functions
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步进函数
- en: Let's check the list of files that we have by executing the `ls` command. As
    you can see, we have the `index.py` file and the `serverless.yml` configuration
    file service document. We also have installed plugins for the serverless framework.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过执行`ls`命令来检查我们拥有的文件列表。如你所见，我们有`index.py`文件和`serverless.yml`配置文件服务文档。我们还为无服务器框架安装了插件。
- en: 'Let''s take a look at the configuration file and its two main parts here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看配置文件及其两个主要部分：
- en: 'First, we will be adding several functions, which will be used in different
    states of the step function:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将添加几个函数，这些函数将在步进函数的不同状态下使用：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we will add some plugins, which are required to work with step functions:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一些插件，这是与步进函数一起工作的必要条件：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let''s take a look at the `index.py` file, where you can see all the parts
    discussed so far:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们看一下`index.py`文件，在那里你可以看到到目前为止讨论的所有部分：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Serverless deployment
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器部署
- en: 'Now, let''s deploy our service by executing the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过执行以下命令来部署我们的服务：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding command deploys your service, as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将部署你的服务，如下图所示：
- en: '![](img/3fd7abbc-8d56-49fe-a645-bbf47f4bb674.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fd7abbc-8d56-49fe-a645-bbf47f4bb674.png)'
- en: 'As part of the deployment, it will give us the URL of the API Gateway, as shown
    in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为部署的一部分，它将提供API网关的URL，如下图所示：
- en: '![](img/15414d25-539f-4323-9630-cd4b6c5f0af1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15414d25-539f-4323-9630-cd4b6c5f0af1.png)'
- en: 'Now let''s test the URL in the command line:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在命令行中测试这个URL：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can check with the results in your browser. In the following screenshot,
    you can see our step function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器中检查结果。在以下截图中，你可以看到我们的步进函数：
- en: '![](img/34adc7b7-87bb-4a80-a839-07fcd728150f.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34adc7b7-87bb-4a80-a839-07fcd728150f.png)'
- en: 'In the following screenshot, we can see that the latest execution went successfully:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到最新的执行成功完成：
- en: '![](img/10f5436d-2d88-401d-973e-078edbe7d840.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10f5436d-2d88-401d-973e-078edbe7d840.png)'
- en: You can check the input and output of each node. If there are any errors, you
    can check them in the Exception section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查每个节点的输入和输出。如果有任何错误，可以在“异常”部分检查。
- en: 'Both branches returned hello world and the step node combines the result and
    returns it as the result of the step function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 两个分支都返回了hello world，步进节点将结果合并并将其作为步进函数的结果返回：
- en: '![](img/bd522dd4-b292-4a6a-b092-d2dd3757f580.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd522dd4-b292-4a6a-b092-d2dd3757f580.png)'
- en: Here, let's check with the timeline of the execution. You can also see that
    the branches have started almost at the same time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，让我们检查一下执行的时间线。你还可以看到这些分支几乎是同时启动的。
- en: In the next section, we will look at an example of the deep learning workflow
    project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看深度学习工作流项目的一个示例。
- en: Example project – deep learning workflow
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例项目 – 深度学习工作流
- en: First, let's take a look at our following project files. We have the main Python
    file, the service integration file, and a few libraries and inception models. In
    the configuration file, we will be adding a few plugins and describing step functions,
    which is a complex thing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看以下的项目文件。我们有主 Python 文件、服务集成文件，以及一些库和 Inception 模型。在配置文件中，我们将添加一些插件并描述步骤函数，这是一个复杂的内容。
- en: The main difference with our Python file will be that we will have three functions
    . One will map a list of URL links into separate things. Another will run a model
    on the link. The final one will combine the results. The structure of the deployment
    will be similar to the one in the previous section. We will skip the deployment
    of the model to S3, since we covered it in the previous chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的 Python 文件的主要区别在于，我们将有三个函数。其中一个将把一组 URL 链接映射成不同的对象。另一个将在链接上运行模型。最后一个将把结果合并。部署结构与上一节中的类似。由于我们在上一章已经覆盖过模型部署到
    S3 的部分，这里就跳过。
- en: Creating the model
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'Here, we will need to deploy the serverless framework and then we can check
    the trance using the CLI:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们需要部署无服务器框架，然后使用 CLI 检查痕迹：
- en: 'Let''s look at the configuration file. You can see all the main parts and roles
    that we need to define to access the model:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看看配置文件。你可以看到我们需要定义的所有主要部分和角色，以便访问模型：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here are the functions, which we will use in different states of the step function:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是我们将在步骤函数的不同状态下使用的函数：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`map` will enable the mapping of the incoming event into different Lambdas,
    range will enable the processing of each link separately in parallel, and `reduce`
    will help in combining them in one response.  We have the state machine definition,
    which is very similar to that previously discussed:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`map` 将启用将传入的事件映射到不同的 Lambda，range 将使得每个链接可以并行地单独处理，而 `reduce` 则有助于将它们合并成一个响应。我们有状态机定义，它与之前讨论的非常相似：'
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we have plugins, which are required to work the functions:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是我们所需的插件，以便使函数正常工作：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The main difference in our index file from the previous section is that we
    added the MapReduce logic. This will enable the processing of each URL separately:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的索引文件与上一节的主要区别是，我们添加了 MapReduce 逻辑。这将使得每个 URL 可以单独处理：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this case, we'll have three URLs,for the dog, panda, and red panda images
    taken from the free images website.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将使用三个 URL，分别对应来自免费图片网站的狗、熊猫和红熊猫图像。
- en: 'Now we have our model ready, let''s deploy the service using the following
    command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的模型已经准备好，接下来使用以下命令部署服务：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You will have the URL for the API to test.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将会得到一个 API 的 URL 用于测试。
- en: Let's test this URL. We will need to use the `curl` command, which will be a
    little different from its usages previously.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们测试一下这个 URL。我们将需要使用 `curl` 命令，它与之前的用法略有不同。
- en: 'First of all, we will use `POST` requests instead of `GET` requests, and we
    will provide a list of links as both of the request. As you can see, it returned
    successfully. This execution indicates that it successfully sent the command to
    the step function:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用 `POST` 请求而不是 `GET` 请求，并且会提供一个包含链接的列表作为请求的一部分。正如你所看到的，它成功返回了。这次执行表明它成功地将命令发送到了步骤函数：
- en: '![](img/46ee1384-e17a-44cf-bf3d-6da9e89362a9.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46ee1384-e17a-44cf-bf3d-6da9e89362a9.png)'
- en: 'Now let''s look at the graph in the browser. We can see that it has already
    finished the execution:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们在浏览器中查看图表。我们可以看到它已经完成了执行：
- en: '![](img/7432b778-a596-4b95-90c2-de0d4257f6b0.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7432b778-a596-4b95-90c2-de0d4257f6b0.png)'
- en: 'We can see that each branch received a separate URL, and we can see that the
    final note combined results from different branches as single, and that it successfully
    recognized the images:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到每个分支都收到了一个独立的 URL，并且我们可以看到最终的节点成功地将不同分支的结果合并为一个，并且成功识别了这些图像：
- en: '![](img/74d04458-0193-4cda-9049-e2770a6e231d.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74d04458-0193-4cda-9049-e2770a6e231d.png)'
- en: Also, we can check the timeline of the execution and see that almost all the
    branches started at the same time.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以查看执行的时间线，看到几乎所有分支几乎同时开始。
- en: This means that the parallelization really enabled us to process a list of links
    faster.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着并行化真正使我们能够更快地处理链接列表。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we studied the AWS Step Functions service, including its features
    and pricing. We also learned how to connect AWS Step Functions to AWS Lambda using
    the AWS Console. We also saw how to create a step function using the serverless
    framework and even created a deep learning workflow.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了AWS Step Functions服务，包括其功能和定价。我们还了解了如何通过AWS控制台将AWS Step Functions连接到AWS
    Lambda。我们还看到了如何使用无服务器框架创建步骤函数，并且甚至创建了一个深度学习工作流。
