- en: '*Chapter 12*: AI and NLP in Healthcare'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：医疗行业中的AI和NLP'
- en: In the previous chapter, we covered how AWS AI services can be used to set up
    a chatbot with your document workflows using **Amazon Lex** and **Amazon Kendra**.
    In this chapter, we will talk about how **Amazon Textract** and **Amazon Comprehend
    Medical** can help digitize medical claims in healthcare. We will talk about the
    healthcare industry's claims processing system and why it's important to automate
    medical claims. Then, we will walk you through how you can use Amazon Textract
    to digitize these claims in paper form and use postprocessing to validate them.
    Then, we will show you how you can extract NLP insights from these claims, such
    as whether the person was diabetic or not, using Amazon Comprehend Medical APIs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何使用AWS AI服务，通过**Amazon Lex**和**Amazon Kendra**为您的文档工作流设置聊天机器人。在这一章中，我们将讨论**Amazon
    Textract**和**Amazon Comprehend Medical**如何帮助数字化医疗索赔。我们将讨论医疗行业的索赔处理系统，以及为什么自动化医疗索赔如此重要。接着，我们将引导您如何使用Amazon
    Textract将这些纸质索赔数字化，并使用后处理进行验证。然后，我们将展示如何使用Amazon Comprehend Medical API从这些索赔中提取NLP洞察，例如判断个人是否患有糖尿病。
- en: For invalid claims, we will show you how to easily set up notifications to notify
    the person submitting the claims to resubmit it with the right data, such as ZIP
    code or claim ID. Lastly, we will show you some architecture patterns that help
    automate everything using AWS Lambda functions. By doing so, you will spin up
    an end-to-end serverless solution that will reduce time to market for the claims
    processing workflow. This happens because you do not have to set up and manage
    servers or scale to process millions of such claims.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于无效的索赔，我们将向您展示如何轻松设置通知，以提醒提交索赔的人重新提交正确数据，如邮政编码或索赔ID。最后，我们将向您展示一些架构模式，帮助您使用AWS
    Lambda函数自动化所有流程。通过这种方式，您将创建一个端到端的无服务器解决方案，从而缩短索赔处理工作流的市场时间。这是因为您无需设置和管理服务器，也无需扩展以处理数百万个此类索赔。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing the automated claims processing use case
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍自动化索赔处理的使用案例
- en: Understanding how to extract and validate data from medical intake forms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何从医疗入院表单中提取和验证数据
- en: Understanding clinical data with Amazon Comprehend Medical
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解使用Amazon Comprehend Medical的临床数据
- en: Understanding invalid medical form processing with notifications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解无效医疗表单处理及通知
- en: Understanding how to create a serverless pipeline for medical claims
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何为医疗索赔创建无服务器管道
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need access to an AWS account:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要您访问一个AWS账户：
- en: Please make sure that you follow the instructions specified in the *Technical
    requirements* section of [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027),
    *Introducing Amazon Textract*, to create your AWS account.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请确保按照[*第二章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中的*技术要求*部分的说明，创建您的AWS账户。
- en: Log into the AWS Management Console before trying the steps in the *Improving
    the accuracy of document processing workflows* section.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在尝试*提高文档处理工作流准确性*部分的步骤之前，请登录AWS管理控制台。
- en: The Python code and sample datasets for our solution can be found at [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2012](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2012).
    Please use the instructions in the following sections, along with the code in
    the preceding repository, to build the solution.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决方案的Python代码和示例数据集可以在[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2012](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2012)找到。请使用以下章节中的说明，并结合前面仓库中的代码来构建解决方案。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3GrClSK](https://bit.ly/3GrClSK).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用：[https://bit.ly/3GrClSK](https://bit.ly/3GrClSK)。
- en: Introducing the automated claims processing use case
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍自动化索赔处理的使用案例
- en: In the healthcare industry, there were approximately 6.1 billion medical claims
    submitted in 2018 according to the *2018 CAHQ index report* ([https://www.caqh.org/sites/default/files/explorations/index/report/2018-index-report.pdf](https://www.caqh.org/sites/default/files/explorations/index/report/2018-index-report.pdf)),
    and this number is expected to continue rising in the upcoming years.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*2018 CAHQ指数报告*（[https://www.caqh.org/sites/default/files/explorations/index/report/2018-index-report.pdf](https://www.caqh.org/sites/default/files/explorations/index/report/2018-index-report.pdf)），2018年，医疗行业共提交了约61亿个医疗理赔，预计这一数字在未来几年将继续增长。
- en: Healthcare payer companies are constantly looking for efficient and cost-effective
    ways to process such volumes of claims in a scalable manner. With the current
    manual process of claim processing, it takes too much time to process these claims.
    So, healthcare companies are looking at AI and ML approaches to automating and
    digitizing these claims. Once they can digitize these, it becomes really easy
    to drive insights such as improving the population's overall health. Moreover,
    analyzing these claim documents might help you identify behaviors that can help
    prevent a medical condition from being developed. Also, healthcare payers are
    looking for a solution that is also compliant, such as *HIPAA-compliant*. For
    those of you outside the US, HIPAA is a healthcare-specific compliance law for
    the healthcare industry in the US.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 医疗支付公司不断寻找高效且具有成本效益的方式，以可扩展的方式处理如此大量的理赔。由于当前理赔处理的手工流程，处理这些理赔需要花费大量时间。因此，医疗公司正在寻找使用AI和机器学习方法来自动化和数字化这些理赔。一旦他们能够将这些理赔数字化，就能够轻松推动一些洞察力，比如改善整体人群健康。此外，分析这些理赔文件可能有助于你发现一些行为，帮助预防某些医疗状况的发生。同时，医疗支付方也在寻找符合法规的解决方案，如*HIPAA合规*。对于美国以外的朋友，HIPAA是美国医疗行业特定的合规法律。
- en: So, we now understand why automating claims is so important. Now, we will talk
    about how we can help you automate this pipeline using AWS AI services such as
    Amazon Textract to digitize the claim process. You can do this by extracting text
    from these scanned claim documents and verifying them using NLP, along with Amazon
    Comprehend Medical, to get some patient health insights from these claims.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们理解了为什么自动化理赔如此重要。接下来，我们将讨论如何帮助你使用AWS AI服务，如Amazon Textract，来自动化这一流程，数字化理赔处理。你可以通过从这些扫描的理赔文件中提取文本，并使用自然语言处理（NLP）和Amazon
    Comprehend Medical来验证它们，从中获取一些患者健康洞察。
- en: In this use case, our fictitious company, *LiveRight Holdings Private Limited*,
    is working with a healthcare insurance provider known as *AwakenLife* to process
    the claims that have been submitted by their insurance holders. These claims are
    mostly scanned images and most of their time and effort is spent on processing
    these claims since some of them are invalid. This leads to a loss to the organization.
    Since LiveRight has already been using Amazon Textract to automate, digitize,
    and further innovate their document processing workflows in the preceding chapters,
    they have recommended using *AwakenLife* so that they can use some of these AWS
    AI services to improve and automate their overall claims process. In this chapter,
    we will set up a simple AI-based workflow to validate the claims for AwakenLife,
    which can further reduce their overall processing time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个用例中，我们的虚构公司*LiveRight Holdings Private Limited*与一家名为*AwakenLife*的医疗保险提供商合作，处理由他们的保险持有人提交的理赔。这些理赔大多数是扫描图像，他们的大部分时间和精力都花费在处理这些理赔上，因为其中一些是无效的。这给组织带来了损失。由于LiveRight公司已经在前几章中使用了Amazon
    Textract来自动化、数字化并进一步创新他们的文档处理工作流，他们推荐使用*AwakenLife*，这样他们就可以利用一些AWS AI服务来改善和自动化他们的整体理赔流程。在本章中，我们将设置一个简单的基于AI的工作流来验证AwakenLife的理赔，从而进一步减少他们的整体处理时间。
- en: 'This solution is highly cost-effective and scalable as these services are serverless
    and scale to process documents based on your need. In this chapter, we will walk
    you through the following architecture:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案具有高度的成本效益和可扩展性，因为这些服务是无服务器的，并且可以根据你的需求扩展来处理文档。在本章中，我们将向你展示以下架构：
- en: '![Figure 12.1 – Medical claim processing architecture for the notebook'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.1 – 用于笔记本的医疗理赔处理架构'
- en: '](img/B17528_12_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_12_01.jpg)'
- en: Figure 12.1 – Medical claim processing architecture for the notebook
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 用于笔记本的医疗理赔处理架构
- en: 'In the preceding diagram, we can see the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以看到以下内容：
- en: You have your medical intake forms, which can be in image or PDF format, that
    are sent to Amazon Textract for digitization or text extraction.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的医疗接待表单可以是图像或 PDF 格式，并且会被发送到 Amazon Textract 进行数字化或文本提取。
- en: Amazon Textract extracts text from these highly unstructured medical intake
    documents.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Textract 从这些高度非结构化的医疗接待文档中提取文本。
- en: You must *postprocess* Amazon Textract's response to validate the claims. For
    this blog, we are using a ZIP code and claim ID to make sure the claims are valid.
    You can customize these validation rules based on your business case.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须对 Amazon Textract 的响应进行 *后处理*，以验证索赔。对于本博客，我们使用邮政编码和索赔 ID 来确保索赔的有效性。您可以根据您的业务案例自定义这些验证规则。
- en: Once the ZIP code and claim ID have been validated, valid data is sent to Amazon
    Comprehend Medical to gain insights and entities such as patient procedure.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦邮政编码和索赔 ID 被验证，合法的数据将被发送到 Amazon Comprehend Medical，以获得关于患者程序等的洞察和实体。
- en: If the ZIP code and claim ID are not valid, an email is sent to the stakeholder,
    notifying them that it's an invalid claim.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果邮政编码和索赔ID无效，将向相关人员发送电子邮件，通知他们这是一个无效的索赔。
- en: We will walk through the previous architecture using a Jupyter notebook. Once
    we've done this, we will cover an architecture on how to make this implementation
    automated using event-based lambda functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Jupyter 笔记本来演示之前的架构。一旦完成这部分内容，我们将介绍如何使用基于事件的 Lambda 函数自动化实现该架构。
- en: In the next section, we will talk about how you can use Amazon Textract to extract
    data from medical intake forms.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将讨论如何使用 Amazon Textract 从医疗接待表单中提取数据。
- en: Understanding how to extract and validate data from medical intake forms
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解如何从医疗接待表单中提取和验证数据
- en: In this section, we will show you how to use Amazon Textract to extract key-value
    pairs or form data from a medical intake form. Then, using simple logic, you will
    verify whether the extracted values are valid or invalid.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将展示如何使用 Amazon Textract 从医疗接待表单中提取关键值对或表单数据。然后，通过简单的逻辑，您将验证提取的值是否有效或无效。
- en: If you have not done so in the previous chapters, you will have to create an
    Amazon SageMaker Jupyter notebook and set up `Chapter 12` folder, and open the
    `ch 12 automating claims processing.ipynb` notebook.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在之前的章节中没有这样做，您需要创建一个 Amazon SageMaker Jupyter 笔记本，并设置 `Chapter 12` 文件夹，打开
    `ch 12 automating claims processing.ipynb` 笔记本。
- en: 'Note:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: Make sure that the IAM role in the notebook has **AmazonSNSFullAccess**, **AmazonComprehendMedicalFullAccess**,
    and **AmazonTextractFullAccess**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 确保笔记本中的 IAM 角色具备 **AmazonSNSFullAccess**、**AmazonComprehendMedicalFullAccess**
    和 **AmazonTextractFullAccess** 权限。
- en: 'Now, using this notebook, we will learn how to extract data using Textract
    APIs and validate them using some postprocessing logic via a sample medical intake
    form:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用这个笔记本，我们将学习如何使用 Textract API 提取数据，并通过一个示例医疗接待表单使用一些后处理逻辑进行验证：
- en: 'We will use the following sample medical intake form to get started. Run the
    following code block to load the sample medical form, which is a valid medical
    form for claims:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下示例医疗接待表单开始。运行以下代码块加载示例医疗表单，这是一份有效的索赔医疗表单：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will see that the following medical intake form has been loaded:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到以下医疗接待表单已经加载：
- en: '![Figure 12.2 – Sample valid medical intake form'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图12.2 – 示例有效的医疗接待表单'
- en: '](img/B17528_12_02.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_02.jpg)'
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With that, we''ve defined a Textract function. Now, we will call this function
    by passing the scanned medical intake form. We will get a Textract response back.
    Run the following cell:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至此，我们已经定义了一个 Textract 函数。现在，我们将通过传递扫描的医疗接待表单来调用此函数，并获取 Textract 响应。运行以下单元格：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If the response from Textract is a success, you will get the following message,
    along with a JSON response with extracted data:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 Textract 的响应成功，您将收到以下消息，并附有提取数据的 JSON 响应：
- en: '![Figure 12.3 – Textract JSON response for the medical form'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图12.3 – 医疗表单的 Textract JSON 响应'
- en: '](img/B17528_12_03.jpg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_03.jpg)'
- en: Figure 12.3 – Textract JSON response for the medical form
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.3 – 医疗表单的 Textract JSON 响应
- en: The preceding response contains a lot of information, such as geometry, pages,
    and text in document metadata.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的响应包含了大量信息，例如几何、页面以及文档元数据中的文本。
- en: 'Now, we will create a function to parse form data or key-value text responses
    from this JSON response. We are using a Textract parser to parse this JSON response.
    Here, we have created a method that accepts a JSON response and uses a Textract
    parser to parse the form key values and return a key-value pair:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个函数来解析从此 JSON 响应中提取的表单数据或键值文本响应。我们使用 Textract 解析器来解析此 JSON 响应。在这里，我们创建了一个方法，它接受一个
    JSON 响应并使用 Textract 解析器解析表单键值并返回键值对：
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we will pass the Textract JSON response to the `def getformkeyvalue(response)`
    method to get the key-value pairs or form data from the Textract JSON response:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将把 Textract 的 JSON 响应传递给`def getformkeyvalue(response)`方法，以从 Textract JSON
    响应中获取键值对或表单数据：
- en: '[PRE4]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will get the following output:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到如下输出：
- en: '![Figure 12.4 – Parsed Textract form data from the JSON response'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 12.4 – 从 JSON 响应解析的 Textract 表单数据](img/B17528_12_04.jpg)'
- en: '](img/B17528_12_04.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_04.jpg)'
- en: Figure 12.4 – Parsed Textract form data from the JSON response
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.4 – 从 JSON 响应解析的 Textract 表单数据
- en: All the form entries are extracted as key-value pairs.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有表单项都作为键值对提取。
- en: 'Now, we will check whether these key-value or form entries are valid using
    some defined business rules. For this book, we are checking for form validity
    based on a valid ZIP Code and Claim ID. You can also modify the validation code
    based on your business needs. We have created a method that accepts key-value
    pairs and checks whether the ZIP Code or ID Number information that has been extracted
    from Textract is valid. If it is valid, it will return the required ID, while
    if it is not valid, it will return a message stating that Claim ID and ZIP Code
    are not valid:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用一些定义好的业务规则检查这些键值对或表单项是否有效。对于本书来说，我们通过有效的邮政编码和索赔 ID 来检查表单的有效性。你也可以根据自己的业务需求修改验证代码。我们创建了一个方法，它接受键值对并检查从
    Textract 提取的邮政编码或 ID 号码信息是否有效。如果有效，它将返回所需的 ID，如果无效，它将返回一条消息，说明索赔 ID 和邮政编码无效：
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we will test this validation method for a valid medical form by sending
    the key-value pair we extracted from the `getformdata(response)` method:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过发送从`getformdata(response)`方法提取的键值对来测试这种验证方法是否适用于有效的医疗表单：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since it''s a valid claim, both ZIP code and Claim ID are valid, and this method
    returns a true response (a valid response):'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是有效的索赔，邮政编码和索赔 ID 都是有效的，因此此方法返回有效的响应（有效的响应）：
- en: '![Figure 12.5 – Valid claim response'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.5 – 有效的索赔响应](img/B17528_12_05.jpg)'
- en: '](img/B17528_12_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_12_05.jpg)'
- en: Figure 12.5 – Valid claim response
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 有效的索赔响应
- en: As you can see, we get an `Ok` response, along with the valid claim ID.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们得到了一个`Ok`响应，并附带有效的索赔 ID。
- en: 'Now, going back to the architecture, two things can happen:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到架构，有两种情况可能发生：
- en: If the form is valid or the response from this method is `Ok`, we will send
    this data to Comprehend Medical to gain insights, as we will cover in the next
    section.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果表单有效或此方法的响应是`Ok`，我们将把这些数据发送到 Comprehend Medical 以获得洞察，这将在下一节中讲解。
- en: If the form is invalid, we will notify the customer, using Amazon **Simple Notification
    Service** (**SNS**), that this service is used to send email or phone notifications.
    We will cover this in the last section, *Understanding how to create a serverless
    pipeline for medical claims*.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果表单无效，我们将使用 Amazon **Simple Notification Service**（**SNS**）通知客户，该服务用于发送电子邮件或电话通知。我们将在最后一节中讨论这个内容，*理解如何为医疗索赔创建无服务器管道*。
- en: In this section, we covered how you can use the Amazon Textract Analyze Document
    API to extract the form values from a medical intake form. We also covered how
    you can validate a Textract response.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了如何使用 Amazon Textract Analyze Document API 从医疗接收表单中提取表单值。我们还讨论了如何验证
    Textract 响应。
- en: Since the response is valid for the medical intake form, in the next section,
    we will show you how you can use Amazon Comprehend Medical to extract medical
    insights.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于响应对于医疗接收表单有效，在下一节中，我们将向你展示如何使用 Amazon Comprehend Medical 提取医疗洞察。
- en: Understanding clinical data with Amazon Comprehend Medical
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Comprehend Medical 理解临床数据
- en: 'In this section, we will talk about how you can use **Amazon Comprehend Medical**
    to gain insights from a valid medical intake form. We covered Amazon Comprehend''s
    features in [*Chapter 3*](B17528_03_Final_SB_ePub.xhtml#_idTextAnchor049), *Introducing
    Amazon Comprehend*. In this chapter, we will learn how to use the Amazon Comprehend
    Medical Entity API to extract entities such as *patient diagnosis* and PHI data
    types such as *claim ID* from the medical intake form. Let''s get started:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何使用**Amazon Comprehend Medical**从有效的医疗接收表单中获取洞察。我们在[*第3章*](B17528_03_Final_SB_ePub.xhtml#_idTextAnchor049)中介绍了Amazon
    Comprehend的功能，*介绍Amazon Comprehend*。在本章中，我们将学习如何使用Amazon Comprehend Medical Entity
    API提取诸如*患者诊断*和个人健康信息（PHI）数据类型，如*申诉ID*等医疗接收表单中的实体。让我们开始吧：
- en: 'Go back to your notebook and run the following cell to use the Comprehend Medical
    `boto3` API:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到您的笔记本并运行以下单元格，使用Comprehend Medical `boto3` API：
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we will use the `comprehend.detect_entities_v2` API ([https://docs.aws.amazon.com/comprehend/latest/dg/API_medical_DetectEntitiesV2.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_medical_DetectEntitiesV2.html))
    to analyze the clinical text data from medical intake forms and return entities
    specific to the medical text, such as type or diagnosis. Run the following cell
    to see what entities we are going to get from the valid medical intake form:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用`comprehend.detect_entities_v2` API ([https://docs.aws.amazon.com/comprehend/latest/dg/API_medical_DetectEntitiesV2.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_medical_DetectEntitiesV2.html))
    来分析来自医疗接收表单的临床文本数据，并返回与医疗文本相关的实体，如类型或诊断。运行以下单元格查看我们从有效医疗接收表单中提取的实体：
- en: '[PRE8]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will get the following medical insights by using this API:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将使用此API获得以下医疗洞察：
- en: '![Figure 12.6 – Medical entities'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图12.6 – 医疗实体'
- en: '](img/B17528_12_06.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_06.jpg)'
- en: Figure 12.6 – Medical entities
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.6 – 医疗实体
- en: It was able to determine the phone number and medical ID as PHI. If you have
    regulatory requirements, you can mask or redact these entity types easily as they
    have been correctly identified by this API.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它能够将电话号码和医疗ID识别为个人健康信息（PHI）。如果您有合规要求，您可以轻松地屏蔽或删除这些实体类型，因为它们已经被该API正确识别。
- en: 'Now that we have extracted the entities, we will save this extracted data in
    Amazon S3 in a CSV file. For large-scale medical intake form processing, you would
    want to save all these insights in a CSV file, in an S3 bucket, and analyze them
    by using an analytics service such as *Amazon Athena*, which we covered in [*Chapter
    8*](B17528_08_Final_SB_ePub.xhtml#_idTextAnchor106), *Leveraging NLP to Monetize
    Your Media Content*. We have created a function that takes Comprehend Medical''s
    response and validated ID from the medical intake form and saves it in Amazon
    S3\. Run the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经提取了实体，我们将把这些提取的数据保存在Amazon S3中的CSV文件里。对于大规模的医疗接收表单处理，您会希望将所有这些洞察保存在CSV文件中，放入S3桶中，并使用分析服务进行分析，如我们在[*第8章*](B17528_08_Final_SB_ePub.xhtml#_idTextAnchor106)中介绍的，*利用NLP将您的媒体内容货币化*。我们已经创建了一个函数，该函数接受Comprehend
    Medical的响应和来自医疗接收表单的验证ID，并将其保存到Amazon S3中。运行以下代码：
- en: '[PRE9]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we will call the `printtocsv(cm_json_data,formid)` method by passing the
    JSON response from the Comprehend Medical Entity API and `formid` from the validation
    logic:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过传递Comprehend Medical Entity API的JSON响应和来自验证逻辑的`formid`，调用`printtocsv(cm_json_data,formid)`方法：
- en: '[PRE10]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will get the following response:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将获得以下响应：
- en: '[PRE11]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this section, we covered how you can extract medical insights or entities
    using the Amazon Comprehend Medical API for valid claims from Amazon Textract.
    In the next section, we will take an invalid claim form and extract data using
    Amazon Textract and postprocess this data to check for validation. If it's not
    valid, we will show you how you can set up SNs to notify the stakeholder via email.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了如何使用Amazon Comprehend Medical API提取来自Amazon Textract的有效申诉中的医疗洞察或实体。在下一节中，我们将使用Amazon
    Textract提取一个无效申诉表单的数据，并对这些数据进行后处理以检查其有效性。如果无效，我们将向您展示如何设置SNS，通过电子邮件通知相关方。
- en: Understanding invalid medical form processing with notifications
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解无效医疗表单处理及通知
- en: 'In this section, we will walk through the architecture specified in *Figure
    12.1* when the claim is identified as invalid by Textract postprocessing. We will
    send the message to the stakeholder via Amazon SNS. Let''s go back to the notebook:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讲解当Textract后处理识别为无效时，如何按照*图12.1*中指定的架构进行操作。我们将通过Amazon SNS向相关方发送消息。现在让我们回到笔记本：
- en: 'In the notebook, we will start by loading the scanned medical intake form by
    running the following code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在笔记本中，我们将通过运行以下代码开始加载扫描的医疗入院表单：
- en: '[PRE12]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will get the following sample medical form, which we will check for invalid
    use cases:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下示例医疗表单，我们将检查其中的无效用例：
- en: '![Figure 12.7 – Medical intake invalid claim form'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 12.7 – 医疗入院无效索赔表单'
- en: '](img/B17528_12_07.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_07.jpg)'
- en: Figure 12.7 – Medical intake invalid claim form
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.7 – 医疗入院无效索赔表单
- en: In this form, **ZIP CODE** and **ID NUMBER** have been entered incorrectly.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此表单中，**邮政编码**和**身份证号码**输入错误。
- en: 'Now, we will call the `calltextract(document)` function that we created in
    the previous section and pass this document to extract the text or data using
    the Amazon Textract Sync API. To do so, run the following code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将调用之前章节中创建的`calltextract(document)`函数，并传入该文档以使用Amazon Textract Sync API提取文本或数据。为此，请运行以下代码：
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After this, we will call the `getformdata(response)` method that we defined
    in the previous sections, which takes Textract''s response as input and returns
    the form''s key-value data:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，我们将调用在前面章节中定义的`getformdata(response)`方法，该方法以Textract的响应作为输入，并返回表单的键值数据：
- en: '[PRE14]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will get the following output:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![Figure 12.8 – Extracted form data using Textract'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 12.8 – 使用Textract提取的表单数据'
- en: '](img/B17528_12_08.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_08.jpg)'
- en: Figure 12.8 – Extracted form data using Textract
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.8 – 使用Textract提取的表单数据
- en: Here, we get all the key-value pairs or form data.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们获取了所有的键值对或表单数据。
- en: 'Now, we will check whether the extracted key-value pairs, such as `ZIP CODE`
    and `ID NUMBER`, are valid by sending this as input to the `validate(body)` method
    that we defined in the previous section. This method returns true if the content
    is valid but will return false if invalid claim data is submitted concerning `ZIP
    CODE` and `ID NUMBER`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过将提取的键值对，如`邮政编码`和`身份证号码`，作为输入传递给前面章节中定义的`validate(body)`方法来检查其有效性。如果内容有效，该方法返回true；如果提交的`邮政编码`和`身份证号码`无效，则返回false：
- en: '[PRE15]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will get the following response:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下响应：
- en: '![Figure 12.9 – Invalid claim response'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 12.9 – 无效索赔响应'
- en: '](img/B17528_12_09.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_09.jpg)'
- en: Figure 12.9 – Invalid claim response
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.9 – 无效索赔响应
- en: The valid method returns an invalid claim and `false`, along with the invalid
    claim ID.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有效的方法返回一个无效的索赔和`false`，以及无效的索赔ID。
- en: 'Now, we want to notify the users that this claim is invalid. To do this, we
    will walk you through how you can set up **Amazon SNS** through the Amazon SNS
    console. Go to this link to create a topic where you will publish this invalid
    message: [https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-topic](https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-topic).'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想通知用户此索赔无效。为此，我们将引导你如何通过Amazon SNS控制台设置**Amazon SNS**。请访问此链接创建一个主题，在该主题中发布无效消息：[https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-topic](https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-topic)。
- en: For `invalid-claims-notify`, as shown in the following screenshot:![Figure 12.10
    – Creating a topic in the SNS AWS console
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`invalid-claims-notify`，如以下截图所示：![图 12.10 – 在SNS AWS控制台创建主题
- en: '](img/B17528_12_10.jpg)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_10.jpg)'
- en: Figure 12.10 – Creating a topic in the SNS AWS console
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.10 – 在SNS AWS控制台创建主题
- en: Make sure you choose the **Standard** topic type.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保选择**标准**主题类型。
- en: Scroll down and click on the **Create topic** button.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并点击**创建主题**按钮。
- en: After creating a topic, we must add subscribers or people who are going to subscribe
    to this topic for notifications by going to [https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-subscription](https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-subscription).
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建主题后，我们必须添加订阅者或将要订阅此主题以接收通知的人，方法是访问[https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-subscription](https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/create-subscription)。
- en: Select your **topic ARN** from the drop-down menu, set **Email** for **Protocol**,
    and enter your email ID in the **Endpoint** box, as shown in the following screenshot:![Figure
    12.11 – Subscribing to the topic via email
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择你的**主题ARN**，设置**协议**为**电子邮件**，并在**终端**框中输入你的电子邮件ID，如以下截图所示：![图 12.11
    – 通过电子邮件订阅主题
- en: '](img/B17528_12_11.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_11.jpg)'
- en: Figure 12.11 – Subscribing to the topic via email
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.11 – 通过电子邮件订阅主题
- en: Scroll down and click on **Create Subscription**.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向下滚动并点击**创建订阅**。
- en: An email will be sent to the address you just used to subscribe. Check your
    email or spam for an email from SNS with a form email ID of **AWS Notification
    - Subscription Confirmation** and click on **Confirm Subscription**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一封电子邮件将发送到你刚刚用于订阅的地址。请检查你的邮箱或垃圾邮件，查看来自 SNS 的电子邮件，邮件主题为 **AWS 通知 - 订阅确认**，点击
    **确认订阅**。
- en: 'Note:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意：
- en: It's important to confirm the subscription; otherwise, you will not be notified.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确认订阅非常重要，否则你将无法收到通知。
- en: Now, go back to [https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/topics](https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/topics)
    to copy the `invalid-claims-notify`:![Figure 12.12 – Copying the topic's ARN from
    the AWS console
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回 [https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/topics](https://console.aws.amazon.com/sns/v3/home?region=us-east-1#/topics)
    复制 `invalid-claims-notify`：![图 12.12 – 从 AWS 控制台复制主题的 ARN
- en: '](img/B17528_12_12.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_12.jpg)'
- en: Figure 12.12 – Copying the topic's ARN from the AWS console
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.12 – 从 AWS 控制台复制主题的 ARN
- en: 'After copying this ARN, go back to the notebook and paste it into the following
    notebook cell to load the SNS `boto3` client. Here, enter a topic:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制此 ARN 后，返回到笔记本，并将其粘贴到以下笔记本单元格中，以加载 SNS `boto3` 客户端。在这里，输入一个主题：
- en: '[PRE16]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we will convert the invalid message into a payload that we can publish
    to this topic:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将把无效信息转换为负载，并发布到此主题：
- en: '[PRE17]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we will use the `sns.publish` Python `boto3` API ([https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.publish](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.publish))
    to send an invalid email message in the body to the registered email:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `sns.publish` Python `boto3` API ([https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.publish](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.publish))，将无效电子邮件信息发送到已注册的电子邮件地址：
- en: '[PRE18]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will get the following response:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将收到如下响应：
- en: '![Figure 12.13 – Pushing the invalid claim message to the topic'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 12.13 – 将无效索赔信息推送到主题'
- en: '](img/B17528_12_13.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_12_13.jpg)'
- en: Figure 12.13 – Pushing the invalid claim message to the topic
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.13 – 将无效索赔信息推送到主题
- en: 'Check the email address you subscribed with for an email notifying you of invalid
    medical claims:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你订阅时使用的电子邮件地址，查看是否有通知无效医疗索赔的电子邮件：
- en: '![Figure 12.14 – Email notification sent'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.14 – 发送的电子邮件通知'
- en: '](img/B17528_12_14.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_12_14.jpg)'
- en: Figure 12.14 – Email notification sent
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – 发送的电子邮件通知
- en: You can always opt out of the topic you have created.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时选择退出你创建的主题。
- en: In this section, we covered how to process a medical claim using Amazon Textract,
    check for invalid medical claims, and notify the stakeholders about this. Next,
    we'll learn how to create a serverless pipeline for medical claims.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讲解了如何使用 Amazon Textract 处理医疗索赔，检查无效医疗索赔，并通知相关方。接下来，我们将学习如何为医疗索赔创建一个无服务器管道。
- en: Understanding how to create a serverless pipeline for medical claims
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解如何为医疗索赔创建无服务器管道
- en: 'In the previous sections, we covered the building blocks of the architecture
    by using the Amazon Textract Sync API, the Amazon Comprehend Medical Detect Entities
    Sync API, and Amazon SNS to send invalid claims. We defined functions for this
    workflow and called the text extraction and validation functions to showcase the
    use case or workflow with both a valid and invalid medical claim form. These functions
    can be moved into lambda code and, along with **S3 event notifications**, can
    be invoked to create a scalable pipeline for medical claims processing. We can
    do this by using the following architecture:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们通过使用 Amazon Textract Sync API、Amazon Comprehend Medical Detect Entities
    Sync API 和 Amazon SNS 发送无效索赔，讲解了架构的构建模块。我们为此工作流定义了函数，并调用了文本提取和验证函数，展示了有效和无效医疗索赔表单的用例或工作流。这些函数可以移入
    Lambda 代码中，并与 **S3 事件通知** 一起被触发，用于创建一个可扩展的医疗索赔处理管道。我们可以通过以下架构来实现：
- en: '![Figure 12.15 – Automating an architecture for scale with AWS Lambda'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.15 – 使用 AWS Lambda 自动化扩展架构'
- en: '](img/B17528_12_15.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_12_15.jpg)'
- en: Figure 12.15 – Automating an architecture for scale with AWS Lambda
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – 使用 AWS Lambda 自动化扩展架构
- en: 'We walked through a Jupyter notebook showing individual code components for
    processing medical claims using a single intake form. We created Python functions
    to extract data, validate data, gather insights, and convert those insights into
    CSV files. To process millions of such documents, we will learn how to make the
    code functions AWS Lambda functions to create an end-to-end automated serverless
    architecture using the preceding diagram. The medical claims form we''ll be using
    has been dropped into an Amazon S3 bucket by payers of *AwakenLife Ltd*:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过一个 Jupyter 笔记本，展示了使用单一接收表单处理医疗理赔的各个代码组件。我们创建了 Python 函数来提取数据、验证数据、收集洞察，并将这些洞察转换为
    CSV 文件。为了处理数百万这样的文档，我们将学习如何将代码函数转换为 AWS Lambda 函数，利用前面的架构图创建一个端到端的自动化无服务器架构。我们将使用的医疗理赔表单已由*AwakenLife
    Ltd*的付款方上传到 Amazon S3 存储桶：
- en: Amazon S3 claims that the upload creates an Amazon S3 event notification, which
    triggers the lambda function.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon S3 声明上传会触发一个 Amazon S3 事件通知，进而触发 lambda 函数。
- en: In this lambda, you can call the `textract` function we defined in the *Understanding
    how to extract and validate data from medical intake forms* section and call Amazon
    Textract by passing this image as input.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个 lambda 中，你可以调用我们在*理解如何从医疗接收表单中提取和验证数据*部分定义的`textract`函数，并通过传递该图像作为输入来调用
    Amazon Textract。
- en: You get a text response back. This extracted text can be sent to the `validation`
    function we defined in the previous section.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会收到一个文本响应。这些提取的文本可以被发送到我们在前一节中定义的`validation`函数。
- en: For valid claims, valid claim data is sent to Amazon Comprehend Medical to extract
    insights. Extracted insights are sent back to AWS Lambda.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于有效的理赔，验证过的数据将发送到 Amazon Comprehend Medical 以提取洞察。提取的洞察将被返回给 AWS Lambda。
- en: You can move the code for the `printtocsv` (`cm_json_data`, `formid`) function,
    which we defined in the *Understanding clinical data with Amazon Comprehend Medical*
    section, to this lambda function to convert this extracted insight into a CSV
    file and save it to Amazon S3.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将我们在*使用 Amazon Comprehend Medical 理解临床数据*部分定义的`printtocsv`（`cm_json_data`，`formid`）函数代码移到这个
    lambda 函数中，将提取的洞察转换为 CSV 文件，并将其保存到 Amazon S3。
- en: For invalid claims, you can use SNS to notify the stakeholders.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于无效的理赔，你可以使用 SNS 通知相关方。
- en: We can use scale and process medical claims documents at a large scale with
    just a few lines of code. This architecture can be quickly automated and deployed
    in the form of a *CloudFormation template*, which lets you set up **Infrastructure
    as Code** (**IaC**). We have provided a similar scalable implementation in the
    form of a blog in the *Further reading* section if you're interested.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过几行代码，在大规模处理医疗理赔文档时使用扩展性和流程化的方式。这种架构可以快速实现自动化，并以*CloudFormation 模板*的形式进行部署，从而让你能够设置**基础设施即代码**（**IaC**）。如果你有兴趣，我们已经在*进一步阅读*部分提供了一个类似的可扩展实现，以博客的形式呈现。
- en: In this section, we covered how to use the code we defined in the previous sections
    and move that to an AWS Lambda section to architect an end-to-end automated workflow
    using a walkthrough architecture. Now, let's summarize this chapter.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讲解了如何使用我们在前面各节中定义的代码，并将其移至 AWS Lambda 部分，以构建一个使用逐步架构的端到端自动化工作流。现在，让我们总结一下这一章。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the medical claim processing use case. We then
    covered how you can use AWS AI services such as Amazon Textract to extract form
    data from these scanned medical forms. Then, we spoke about how you can perform
    some postprocessing on the extracted text based on your business rules to validate
    their form data. Once the form data had been validated, we showed you how to use
    Amazon Comprehend Medical, as covered in [*Chapter 3*](B17528_03_Final_SB_ePub.xhtml#_idTextAnchor049),
    *Introducing Amazon Comprehend*, to extract medical insights. Once you have medical
    insights, this data can be converted into a CSV file and saved in Amazon S3\.
    Once you've done this, you can analyze this data for population health analytics
    by using **Amazon Athena** or **Amazon QuickSight**. We also discussed how to
    handle invalid claims processing by showing how to quickly configure Amazon SNS
    through the AWS console and add subscribers. You can notify your subscribers by
    email regarding the medical claims that have been submitted as invalid.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了医疗理赔处理的使用案例。然后，我们讨论了如何使用AWS AI服务，如Amazon Textract来从这些扫描的医疗表单中提取表单数据。接着，我们讨论了如何根据您的业务规则对提取的文本进行一些后处理，以验证其表单数据。一旦表单数据经过验证，我们向您展示了如何使用Amazon
    Comprehend Medical来提取医疗见解，正如在[*第3章*](B17528_03_Final_SB_ePub.xhtml#_idTextAnchor049)，*介绍Amazon
    Comprehend*中所涵盖的那样。一旦您获得了医疗见解，这些数据可以转换为CSV文件并保存在Amazon S3中。完成这些步骤后，您可以使用**Amazon
    Athena**或**Amazon QuickSight**来分析这些数据以进行人口健康分析。我们还讨论了如何通过显示如何快速通过AWS控制台配置Amazon
    SNS并添加订阅者来处理无效理赔。您可以通过电子邮件通知您的订阅者提交的无效医疗索赔。
- en: Lastly, we showed you how to architect a serverless scalable solution using
    AWS Lambda to call these Textract Sync and Amazon Comprehend Medical Sync APIs.
    This ensures that you have an end-to-end working automated architecture with the
    claim documents you uploaded in Amazon S3.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们向您展示了如何使用AWS Lambda架构一个无服务器可扩展解决方案，以调用这些Textract Sync和Amazon Comprehend
    Medical Sync API。这确保了您在Amazon S3中上传的理赔文档具有端到端的自动化工作架构。
- en: In the next chapter, we will cover how to improve the accuracy of your existing
    document processing workflows using *Amazon Augmented AI* with the human-in-the-loop
    process. We will also deep dive into aspects of why you need a human-in-the-loop
    process and how it helps improve the accuracy of your existing AI predictions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何使用*Amazon增强AI*和人工协作流程来提高现有文档处理工作流程的准确性。我们还将深入探讨为什么需要人工协作流程以及如何帮助提高现有AI预测准确性的方面。
- en: Further reading
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resource:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章涵盖的主题的更多信息，请查看以下资源：
- en: '*Automating claims adjudication workflows using Amazon Textract and Amazon
    Comprehend Medical*, by Sonali Sahu and Ujjwal Ratan ([https://aws.amazon.com/blogs/industries/automating-claims-adjudication-workflows-using-amazon-textract-and-amazon-comprehend-medical/](https://aws.amazon.com/blogs/industries/automating-claims-adjudication-workflows-using-amazon-textract-and-amazon-comprehend-medical/))'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Amazon Textract和Amazon Comprehend Medical自动化理赔审批工作流*，作者为Sonali Sahu和Ujjwal
    Ratan（[https://aws.amazon.com/blogs/industries/automating-claims-adjudication-workflows-using-amazon-textract-and-amazon-comprehend-medical/](https://aws.amazon.com/blogs/industries/automating-claims-adjudication-workflows-using-amazon-textract-and-amazon-comprehend-medical/)）'
