- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Short Introduction to Plugins
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件简介
- en: Welcome to [*Chapter 4*](B21128_04.xhtml#_idTextAnchor052)! In this chapter,
    we will provide a brief introduction to **plugins** in **Auto-GPT**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 [*第 4 章*](B21128_04.xhtml#_idTextAnchor052)! 在这一章中，我们将简要介绍 **Auto-GPT**
    中的 **插件**。
- en: As more and more people came up with new ideas on what Auto-GPT could do, we
    realized that it would be impossible to implement all of them into the core project
    of Auto-GPT, so we decided to create a plugin system that allows users to extend
    the functionality of Auto-GPT by adding their own plugins.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的人提出关于 Auto-GPT 的新想法，我们意识到将所有这些功能实现到 Auto-GPT 核心项目中是不可能的，因此我们决定创建一个插件系统，允许用户通过添加自己的插件来扩展
    Auto-GPT 的功能。
- en: 'In this chapter, we will go through these topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讲解以下内容：
- en: Going through an overview of plugins in Auto-GPT
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Auto-GPT 中插件的概览
- en: Knowing the types of plugins and their use cases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解插件的类型及其使用场景
- en: Learning how to use plugins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用插件
- en: Understanding how plugins are built
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解插件是如何构建的
- en: Using my Telegram plugin as a hands-on example
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我的 Telegram 插件作为实际操作示例
- en: Going through an overview of plugins in Auto-GPT
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Auto-GPT 中插件的概览
- en: Plugins in Auto-GPT serve as modular extensions that enable additional functionality
    and customization of your own Auto-GPT instance. They provide a way to integrate
    external tools, services, and models seamlessly into the Auto-GPT framework. By
    leveraging plugins, you can tailor Auto-GPT to suit specific tasks, domains, or
    applications, such as having your own customer support chat, having your own researching
    AI that gives you suggestions or helps you schedule your calendar, and so much
    more!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Auto-GPT 中的插件作为模块化扩展，提供额外的功能和自定义选项，以扩展你自己的 Auto-GPT 实例。它们为将外部工具、服务和模型无缝集成到 Auto-GPT
    框架中提供了一种方式。通过利用插件，你可以根据特定任务、领域或应用定制 Auto-GPT，例如拥有自己的客户支持聊天、拥有自己的研究型 AI，帮助你提供建议或安排日程，等等！
- en: Auto-GPT has interfaces that allow you to integrate it with almost anything
    that has text output or non-visual interface (with a little bit of coding, you
    may even make a VS Code plugin that allows Auto-GPT to navigate through projects
    and lines of code).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Auto-GPT 提供了接口，允许你与几乎任何有文本输出或非视觉界面的工具进行集成（稍微编写一些代码，你甚至可以制作一个 VS Code 插件，让 Auto-GPT
    在项目和代码行之间进行导航）。
- en: Auto-GPT has an official plugin repository that contains a wide range of plugins.
    These plugins were developed as standalone plugins at first, but anyone who wants
    to add their plugin to the official list can do so by submitting a pull request.
    The official plugins are maintained by the Auto-GPT team and are thoroughly tested
    to ensure compatibility with the latest version of Auto-GPT. Although the original
    creator is responsible for maintaining the plugin, the Auto-GPT team will provide
    support and assistance as needed but also remove plugins that are no longer maintained
    and do not work anymore.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Auto-GPT 拥有一个官方插件库，包含了广泛的插件。这些插件最初作为独立插件开发，但任何想要将自己的插件加入官方列表的人都可以通过提交拉取请求来实现。官方插件由
    Auto-GPT 团队维护，并经过充分测试，以确保与 Auto-GPT 的最新版本兼容。虽然原始创作者负责维护插件，但 Auto-GPT 团队会根据需要提供支持和帮助，也会移除那些不再维护且不再有效的插件。
- en: To help everyone get started with creating a plugin, the Auto-GPT team has created
    a plugin template that can be used as a starting point for creating your own plugin.
    The template contains all the necessary files and folders required for a plugin,
    including a `README` file with instructions on how to use it. The template is
    available on GitHub and can be downloaded from the repository at [https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template](https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助大家开始创建插件，Auto-GPT 团队提供了一个插件模板，可以作为创建自己插件的起点。该模板包含了插件所需的所有必要文件和文件夹，包括一个 `README`
    文件，内含如何使用模板的说明。模板可在 GitHub 上获取，可以从 [https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template](https://github.com/Significant-Gravitas/Auto-GPT-Plugin-Template)
    仓库下载。
- en: Knowing the types of plugins and their use cases
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解插件的类型及其使用场景
- en: Plugins can be created for any purpose, given that the plugin template allows
    it. There are various types of plugins available in `Auto-GPT-Plugins`, each catering
    to different use cases.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以根据插件模板创建任何用途的插件。`Auto-GPT-Plugins` 提供了多种类型的插件，每种插件都针对不同的应用场景。
- en: 'Here are a few examples of official plugins:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些官方插件的示例：
- en: '**Astro Info**: This provides Auto-GPT with information about astronauts'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Astro Info**：此插件为 Auto-GPT 提供有关宇航员的信息'
- en: '**API Tools**: This allows Auto-GPT to make API calls of various kinds'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API Tools**：此插件允许 Auto-GPT 发起各种类型的 API 调用'
- en: '**Baidu Search**: This integrates Baidu search engines into Auto-GPT'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Baidu Search**：此插件将百度搜索引擎集成到 Auto-GPT 中'
- en: '**Bing Search**: This integrates Bing search engines into Auto-GPT'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bing Search**：此插件将 Bing 搜索引擎集成到 Auto-GPT 中'
- en: '**Bluesky**: This enables Auto-GPT to retrieve posts from Bluesky and create
    new posts'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bluesky**：此插件使 Auto-GPT 能够从 Bluesky 获取帖子并创建新帖子'
- en: '**Email**: This automates email drafting and intelligent replies using AI'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Email**：此插件自动化电子邮件草拟和智能回复功能，使用 AI 提供支持'
- en: '**News Search**: This integrates news article searches, using the NewsAPI aggregator,
    into Auto-GPT'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**News Search**：此插件通过 NewsAPI 聚合器将新闻文章搜索功能集成到 Auto-GPT 中'
- en: '**Planner**: This provides a simple task planner module for Auto-GPT'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Planner**：此插件为 Auto-GPT 提供一个简单的任务规划模块'
- en: '**Random Values**: This enables Auto-GPT to generate various random numbers
    and strings'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Random Values**：此插件使 Auto-GPT 能够生成各种随机数字和字符串'
- en: '**SceneX**: This explores image storytelling beyond pixels with Auto-GPT'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SceneX**：此插件与 Auto-GPT 一起探索超越像素的图像讲故事功能'
- en: '**Telegram**: This provides a smoothly working Telegram bot that gives you
    all the messages you would normally get through the Terminal'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Telegram**：此插件提供一个平稳运行的 Telegram 机器人，能够让你通过终端接收所有消息'
- en: '**Twitter**: This retrieves Twitter posts and other related content by accessing
    the Twitter platform via the v1.1 API using Tweepy'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Twitter**：此插件通过使用 Tweepy 访问 Twitter 平台的 v1.1 API，检索 Twitter 帖子和其他相关内容'
- en: '**Wikipedia Search**: This allows Auto-GPT to use Wikipedia directly'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wikipedia Search**：此插件允许 Auto-GPT 直接使用维基百科'
- en: '**WolframAlpha Search**: This allows Auto-GPT to use WolframAlpha directly'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WolframAlpha Search**：此插件允许 Auto-GPT 直接使用 WolframAlpha'
- en: 'The community is also coming up with new plugins all the time. These are then
    found in the official Auto-GPT Discord server in the **#****plugins** channel:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 社区也在不断推出新的插件。这些插件会出现在官方的 Auto-GPT Discord 服务器中的 **#****plugins** 频道：
- en: '**Language model (LM) plugins**: LM plugins allow you to incorporate specialized
    LMs into Auto-GPT. These plugins enable fine-tuned models that are designed for
    specific tasks or domains, such as code generation, translation, summarization,
    sentiment analysis, and more.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言模型 (LM) 插件**：LM 插件允许将专门的语言模型集成到 Auto-GPT 中。这些插件支持针对特定任务或领域（如代码生成、翻译、总结、情感分析等）进行微调的模型。'
- en: '**Data source plugins**: Data source plugins enable Auto-GPT to access external
    data sources and retrieve information on demand. These plugins can connect Auto-GPT
    to databases, APIs, web scraping tools, or other data repositories. With data
    source plugins, you can enrich Auto-GPT’s knowledge and enable it to provide up-to-date
    and relevant information to users.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据源插件**：数据源插件使 Auto-GPT 能够访问外部数据源并按需检索信息。这些插件可以将 Auto-GPT 连接到数据库、API、网页抓取工具或其他数据存储库。借助数据源插件，你可以丰富
    Auto-GPT 的知识库，使其能够为用户提供最新和相关的信息。'
- en: '**Chatbot plugins**: Chatbot plugins facilitate interactive and dynamic conversations
    with Auto-GPT. These plugins incorporate dialogue management techniques, allowing
    Auto-GPT to maintain context, remember previous interactions, and generate coherent
    responses. Chatbot plugins are useful for building chat assistants, customer support
    bots, virtual companions, and more.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chatbot plugins**：聊天机器人插件促进了与 Auto-GPT 的互动和动态对话。这些插件融合了对话管理技术，使 Auto-GPT
    能够保持上下文、记住之前的互动并生成连贯的回应。聊天机器人插件非常适合构建聊天助手、客户支持机器人、虚拟伴侣等。'
- en: Learning how to use plugins
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何使用插件
- en: Using plugins in Auto-GPT can be a bit tricky at first, but once you get the
    hang of it, it’s pretty easy.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Auto-GPT 中使用插件一开始可能会有点棘手，但一旦掌握了方法，就变得非常简单。
- en: Auto-GPT has a `plugins` folder in its root directory, where all the plugins
    are stored.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Auto-GPT 在其根目录下有一个 `plugins` 文件夹，所有插件都存储在该文件夹中。
- en: The method of how the plugins are installed has changed a bit over time – you
    can either clone the desired plugin repository into the `plugins` folder and zip
    it or just leave it there and Auto-GPT will find it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装方式随着时间的推移有所变化——你可以将所需插件的仓库克隆到 `plugins` 文件夹中并压缩，或者直接将其保留在那里，Auto-GPT 会自动找到它。
- en: By the time you read this book, the plugin system might be updated to use a
    plugin manager, which will make it easier to install and manage plugins.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在你阅读本书时，插件系统可能已经更新为使用插件管理器，这将使安装和管理插件变得更加容易。
- en: 'After placing the plugin, you have to install the dependencies that are required
    for the plugin to work. This can be done by running the following command while
    starting Auto-GPT:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 放置插件后，你需要安装插件所需的依赖项。可以在启动 Auto-GPT 时运行以下命令来完成此操作：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Sometimes, this function does not work. If the plugin is not installed, navigate
    to the `plugins` folder and into the folder of your plugin run the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，此功能无法正常工作。如果插件没有安装，导航到 `plugins` 文件夹，进入插件文件夹并运行以下命令：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Auto-GPT should automatically install the dependencies for the plugin, and it
    should now tell you that it found the plugin. It should also tell you that the
    plugin is not configured yet and that you should configure it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Auto-GPT 应该会自动安装插件的依赖项，并且现在应该会告诉你它已找到该插件。它还会告诉你插件尚未配置，并提示你进行配置。
- en: Some of the plugins may still indicate that you have to make changes to the
    `.env` file, but currently, the `.env` file is not used anymore, so you have to
    configure the plugin config file, or if by the release of this book, we have finished
    the plugin manager, you can configure the plugin via the plugin manager.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插件可能仍然会提示你需要修改 `.env` 文件，但目前 `.env` 文件已不再使用，因此你需要配置插件的配置文件，或者如果本书发布时，我们已经完成了插件管理器，你可以通过插件管理器配置插件。
- en: To figure out what names to use, just start Auto-GPT normally and it will list
    the plugins it found. If it wasn’t configured automatically, it will tell you
    that it is not.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要弄清楚使用什么名称，只需正常启动 Auto-GPT，它会列出找到的插件。如果没有自动配置，它会告诉你没有配置。
- en: If by the time you read this book, the architecture of the plugin system has
    changed, you can find the information on how to configure the plugin in the `README.md`
    file of the `Auto-GPT-Plugins` repository.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在你阅读本书时，插件系统的架构已经发生变化，你可以在 `Auto-GPT-Plugins` 仓库的 `README.md` 文件中找到如何配置插件的信息。
- en: Understanding how plugins are built
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解插件是如何构建的
- en: Plugins in Auto-GPT are built using a modular and extensible architecture. The
    exact process of building a plugin may vary depending on the type and complexity
    of the plugin.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Auto-GPT 中的插件是使用模块化和可扩展的架构构建的。构建插件的具体过程可能因插件的类型和复杂性而有所不同。
- en: Structure of a plugin
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件的结构
- en: 'The plugin should be in its own folder and contain `a __init__.py`, which contains
    the `AutoGPTPluginsTemplate` class reference. Each of the class methods contains
    a method that determines whether the following method is active, for example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 插件应该放在自己的文件夹中，并包含 `__init__.py` 文件，该文件包含 `AutoGPTPluginsTemplate` 类的引用。每个类方法都包含一个方法，用于确定以下方法是否处于活动状态，例如：
- en: '`post_prompt` is only active if `can_ post_prompt` returns `True`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`post_prompt` 仅在 `can_ post_prompt` 返回 `True` 时激活。'
- en: As we are limited to the plugin template, we can only use the methods that the
    template provides. Each method has a `can_handle` method that returns a `boolean`
    value, which is used to determine whether the plugin can handle the current prompt
    or method. The plugin methods are scattered all over the Auto-GPT code and allow
    plugins to add functions as commands that Auto-GPT can cognitively call to give
    Auto-GPT agents new abilities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们受限于插件模板，因此只能使用模板提供的方法。每个方法都有一个 `can_handle` 方法，返回一个 `boolean` 值，用于确定插件是否可以处理当前的提示或方法。插件方法分布在整个
    Auto-GPT 代码中，允许插件将功能作为命令添加，这些命令可以被 Auto-GPT 理解并调用，从而赋予 Auto-GPT 代理新的能力。
- en: 'Here are some of these interface methods:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些接口方法：
- en: '`post_prompt`: This adds access to the prompt generator. This allows the plugins
    to edit the prompts or add new functions as commands.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_prompt`：此方法为提示生成器提供访问权限。它允许插件编辑提示或将新功能作为命令添加。'
- en: '`on_response`: This forwards the content of a chat completion response to the
    plugin and returns the edited content to Auto-GPT.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_response`：此方法将聊天完成响应的内容转发到插件，并将编辑后的内容返回给 Auto-GPT。'
- en: '`on_planning`: This allows the plugin to edit the message sequence before it
    is sent to the Auto-GPT agent, for example, to summarize the history of the messages
    or to add a new message to the sequence.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_planning`：此方法允许插件在消息发送到 Auto-GPT 代理之前编辑消息顺序，例如总结消息历史或向消息序列中添加新消息。'
- en: '`post_planning`: This allows the editing of the response JSON of the agent’s
    thought planning. For example, this could be used to add another step of thought
    such as reevaluating the decision of the agent and which command it chose to execute.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_planning`：此方法允许编辑代理思维规划的响应 JSON。例如，可以用来添加另一个思考步骤，比如重新评估代理的决策以及它选择执行的命令。'
- en: '`pre_command`: After the user approves the command the agent chooses, the plugin
    can edit the command before it is executed.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre_command`：在用户批准代理选择的命令后，插件可以在执行命令之前编辑该命令。'
- en: '`post_command`: After the command has been executed and right before the results
    of that command are returned to the user, the plugin can edit the result and also
    has access to the command name that was executed.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post_command`：在命令执行后，并且在命令结果返回给用户之前，插件可以编辑结果，并且可以访问执行的命令名称。'
- en: '`handle_chat_completion`: This is used to add a custom chat completion function
    to Auto-GPT agents. If this is enabled, OpenAI’s GPT will not be used for chat
    completion mostly but could still be used if at certain places only GPT can be
    used or just not implemented cleanly.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handle_chat_completion`：用于向 Auto-GPT 代理添加自定义的聊天完成函数。如果启用此功能，OpenAI 的 GPT 通常不会用于聊天完成，但在某些情况下，如果只有
    GPT 能够完成某些操作，或者某些地方未实现时，可能仍会使用 GPT。'
- en: '`handle_text_embedding`: This adds the ability to add text embedding to Auto-GPT
    agents other than the memory module.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handle_text_embedding`：此功能使得除了记忆模块外，还可以为 Auto-GPT 代理添加文本嵌入功能。'
- en: '`user_input`: This is used to forward the user input query to the plugin instead
    of the console or terminal.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user_input`：用于将用户输入的查询转发到插件，而不是控制台或终端。'
- en: '`report`: This is used to forward logs to the plugin that would usually only
    be printed to the console or terminal.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`report`：用于将日志转发到插件，这些日志通常只会打印到控制台或终端。'
- en: You are also free to copy and paste parts of other plugins that you find useful
    and use them in your own plugin, as long as you give credit to the original author
    of the code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以自由地复制并粘贴你认为有用的其他插件的部分内容，并在自己的插件中使用，只要你给原作者注明代码的出处。
- en: The Planner plugin is a good example of how to use the `PromptGenerator` class
    to add new commands to Auto-GPT agents.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Planner 插件是一个很好的例子，展示了如何使用 `PromptGenerator` 类将新命令添加到 Auto-GPT 代理中。
- en: If you want to create a plugin that enables communication, you may also check
    what already exists in the Auto-GPT Discord.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想创建一个启用沟通的插件，也可以检查 Auto-GPT Discord 中已经存在的内容。
- en: Multiple projects exist now that also enable multiple ways to communicate with
    Auto-GPT and maybe you can even come up with the ultimate communication plugin
    that enables Auto-GPT to communicate with their humans in any way possible.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有多个项目也使得与 Auto-GPT 进行多种方式的沟通成为可能，也许你甚至可以开发出一种终极的沟通插件，使 Auto-GPT 能以任何可能的方式与人类进行交流。
- en: How to build plugins
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何构建插件
- en: As you embark on the journey of building plugins for Auto-GPT, it’s crucial
    to approach the process with a well-rounded strategy. Here, we outline a step-by-step
    guide to help you plan, develop, and share your plugin effectively within the
    community.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始为 Auto-GPT 构建插件时，采取一个全面的策略至关重要。在这里，我们概述了一个逐步指南，帮助你有效地规划、开发并在社区内分享你的插件。
- en: 'It is a good idea to plan out what you want to do with your plugin and what
    you want to achieve with it. A basic procedure would be as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 规划插件的功能和目标是个好主意。一种基本的流程如下：
- en: '**Define functionality**: Start by defining the functionality or features the
    plugin will provide. Identify the specific task, domain, or integration point
    that the plugin aims to address.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义功能**：首先定义插件将提供的功能或特性。确定插件旨在解决的具体任务、领域或集成点。'
- en: '**Implement plugin logic**: Develop the necessary code to implement the desired
    functionality. This may involve writing custom classes, functions, or methods
    that interact with Auto-GPT or external services.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实现插件逻辑**：编写必要的代码以实现所需的功能。这可能涉及编写自定义类、函数或方法，与你的 Auto-GPT 或外部服务交互。'
- en: '**Handle integration**: Consider how the plugin will integrate with Auto-GPT.
    This may involve hooking into specific events or methods within the Auto-GPT framework
    to intercept prompts, modify responses, or access data sources.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**处理集成**：考虑插件如何与 Auto-GPT 集成。这可能涉及到挂钩到 Auto-GPT 框架中的特定事件或方法，以拦截提示、修改响应或访问数据源。'
- en: '**Test and refine**: Thoroughly test the plugin to ensure its functionality
    and compatibility with Auto-GPT. Iterate and refine the plugin based on feedback
    and testing results. If you can, write unit tests for your plugin to ensure that
    it works as intended.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试和优化**：彻底测试插件，确保其功能和与 Auto-GPT 的兼容性。根据反馈和测试结果进行迭代和优化。如果可能，编写单元测试以确保插件按预期工作。'
- en: Although the team is very forthcoming, if you want your plugin to become an
    official “first party” plugin, you should write unit tests for it and document
    it properly. Otherwise, if people don’t understand your plugin and it is not documented
    properly, it will not stay in the official plugin repository for long as it requires
    more time to read into the code to check how it works.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然团队非常乐于帮助，但如果你希望你的插件成为官方的“第一方”插件，你应该为它编写单元测试并正确文档化。否则，如果人们不了解你的插件且文档不完整，它将不会长时间保留在官方插件库中，因为需要花更多的时间阅读代码来检查它的工作原理。
- en: '`README.md` file of the plugin or just skip steps and just tell you stuff that
    is nowhere related to your plugin).'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件的 `README.md` 文件，或者跳过步骤，直接告诉你一些与插件无关的内容。
- en: Now that we have learned a simple way of planning a plugin that would be then
    qualified to join Auto-GPT’s plugin list, we can use one of the plugins as an
    example to build one ourselves.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何规划一个插件，之后它将符合加入 Auto-GPT 插件列表的条件，我们可以使用其中一个插件作为示例，自行构建一个插件。
- en: Using my Telegram plugin as a hands-on example
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以我的 Telegram 插件作为实际示例
- en: 'Here, we will go through the plugin example and see the steps we need to follow:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过插件示例，了解需要遵循的步骤：
- en: To demonstrate how plugins are made, I decided to include my Auto-GPT plugin
    for Telegram integration.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了展示如何创建插件，我决定包括我的 Auto-GPT 插件，展示如何进行 Telegram 集成。
- en: It involves simply forwarding messages to the user and is also capable of asking
    the user a question and awaiting a response. Basically, your Telegram chat becomes
    a remote extension to the console/terminal application and you can leave Auto-GPT
    running on your machine and operate it remotely with your phone.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它只是简单地将消息转发给用户，并且还可以向用户提问并等待回答。基本上，你的 Telegram 聊天就变成了控制台/终端应用程序的远程扩展，你可以让 Auto-GPT
    在你的机器上运行，并通过手机远程操作它。
- en: Fill the interface class in the `__init__.py` file. This file acts as the core
    of the `AutoGPTTelegram` plugin. It houses the `AutoGPTTelegram` class, which
    inherits from `AutoGPTPluginTemplate`. To get the template, go to the `__init__.py`
    and return `False` on the methods you do not intend to use.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填充 `__init__.py` 文件中的接口类。这个文件作为 `AutoGPTTelegram` 插件的核心，包含了继承自 `AutoGPTPluginTemplate`
    的 `AutoGPTTelegram` 类。要获取模板，请前往 `__init__.py` 并对你不打算使用的方法返回 `False`。
- en: 'The `__init__` method is crucial for setting up the plugin. It initializes
    a `TelegramUtils` object that will be used for interactions with the Telegram
    API:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`__init__` 方法对于插件的设置至关重要。它初始化一个 `TelegramUtils` 对象，用于与 Telegram API 进行交互：'
- en: '[PRE2]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `self._name`, `self._version`, and `self._description` are attributes
    to describe the plugin while `self.telegram_chat_id` and `self.telegram_api_key`
    are placeholders for your Telegram credentials. The `TelegramUtils` object is
    created with these credentials.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`self._name`、`self._version` 和 `self._description` 是描述插件的属性，而 `self.telegram_chat_id`
    和 `self.telegram_api_key` 是存放 Telegram 凭据的占位符。`TelegramUtils` 对象是通过这些凭据创建的。
- en: 'The `can_handle_user_input` and `user_input` methods work in tandem to handle
    user input:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`can_handle_user_input` 和 `user_input` 方法协同工作来处理用户输入：'
- en: '[PRE3]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `can_handle_user_input` method returns `True`, indicating that this plugin
    can handle user input. The `user_input` method takes the user’s input and calls
    the `ask_user` method of `TelegramUtils` to interact with the user via Telegram.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`can_handle_user_input` 方法返回 `True`，表示此插件可以处理用户输入。`user_input` 方法接收用户输入并调用
    `TelegramUtils` 的 `ask_user` 方法，通过 Telegram 与用户互动。'
- en: 'The `can_handle_report` and `report` methods are designed to manage reporting:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`can_handle_report` 和 `report` 方法的设计目的是管理报告功能：'
- en: '[PRE4]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Similar to user input handling, `can_handle_report` returns `True` to signify
    that this plugin can handle reporting. The `report` method sends a message to
    the user via Telegram using the `send_message` method of `TelegramUtils`.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与用户输入处理类似，`can_handle_report` 返回 `True`，表示此插件可以处理报告。`report` 方法通过 `TelegramUtils`
    的 `send_message` 方法使用 Telegram 向用户发送消息。
- en: 'Other methods in this class are disabled by default but can be enabled to extend
    functionality:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此类中的其他方法默认被禁用，但可以启用以扩展功能：
- en: '[PRE5]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `can_handle_on_response` method here is a placeholder that could be enabled
    to process responses in a certain way.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的 `can_handle_on_response` 方法是一个占位符，可以启用以特定方式处理响应。
- en: The `telegram_chat.py` file contains the `TelegramUtils` class, which houses
    utility methods for Telegram interactions. Of course, you could write all you
    need in the `init` file, but it would be less than readable in the end. This walk-through
    might even be chunked into more files, but as I try to cover as many readers with
    different levels of knowledge as possible, we only do two files in total.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`telegram_chat.py` 文件包含 `TelegramUtils` 类，其中封装了与 Telegram 交互的实用方法。当然，你可以在 `init`
    文件中编写所有需要的内容，但最终可能不够清晰易读。这个教程可能会被拆分到更多文件中，但为了尽可能覆盖不同知识水平的读者，我们总共只做两个文件。'
- en: 'We will first write a `TelegramUtils` class:'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先编写一个 `TelegramUtils` 类：
- en: '[PRE6]'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `__init__` method in the `TelegramUtils` class initializes the `TelegramUtils`
    object with the API key and chat ID or guides the user on how to obtain them if
    they’re not provided:'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TelegramUtils` 类中的 `__init__` 方法用 API 密钥和聊天 ID 初始化 `TelegramUtils` 对象，或指导用户如何获取它们（如果未提供）：'
- en: '[PRE7]'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, if `api_key` or `chat_id` is not provided, instructions are displayed
    to the user on how to obtain them.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，如果未提供 `api_key` 或 `chat_id`，则向用户显示获取这些信息的说明。
- en: 'In the actual plugin, I decided to add more information for the user; the `__init__`
    method of the `TelegramUtils` class is more extensive and the code further handles
    the scenario where `api_key` or `chat_id` is not provided:'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实际插件中，我决定为用户添加更多信息；`TelegramUtils` 类的 `__init__` 方法更为详细，并且进一步处理了未提供 `api_key`
    或 `chat_id` 的情况：
- en: '[PRE8]'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding block, the method first checks whether `api_key` is provided.
    If not, it instructs the user to set the `TELEGRAM_API_KEY` environment variable
    and provides guidance on where to obtain the API key. Similarly, for `chat_id`,
    it instructs the user to set the `TELEGRAM_CHAT_ID` environment variable and offers
    to send a test message to the bot to obtain the chat ID if the user agrees.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码块中，该方法首先检查是否提供了 `api_key`。如果没有，则指示用户设置 `TELEGRAM_API_KEY` 环境变量，并提供获取 API
    密钥的指导。类似地，对于 `chat_id`，它指示用户设置 `TELEGRAM_CHAT_ID` 环境变量，并在用户同意时提供发送测试消息到机器人以获取聊天
    ID 的选项。
- en: 'The `ask_user` method is designed to prompt the user for input through Telegram.
    It calls its asynchronous counterpart, `ask_user_async`, to handle the user input
    asynchronously:'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ask_user` 方法旨在通过 Telegram 提示用户进行输入。它调用其异步对应方法 `ask_user_async` 来异步处理用户输入：'
- en: '[PRE9]'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, the `ask_user` method calls `ask_user_async` within a try block to handle
    any `TimedOut` exceptions that might occur during the process.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`ask_user` 方法在 try 块中调用 `ask_user_async` 来处理可能发生的 `TimedOut` 异常。
- en: 'The `user_input` method handles user input within the plugin, using the `telegram_utils.ask_user`
    method to gather input from the user via Telegram:'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`user_input` 方法在插件内处理用户输入，使用 `telegram_utils.ask_user` 方法通过 Telegram 收集用户输入：'
- en: '[PRE10]'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `user_input` method first sanitizes the input to remove color codes, then
    calls the `ask_user` method of `TelegramUtils` to interact with the user on Telegram.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`user_input` 方法首先对输入进行清理以删除颜色代码，然后调用 `TelegramUtils` 的 `ask_user` 方法与 Telegram
    用户进行交互。'
- en: Write the `report` method in the `AutoGPTTelegram` class to send messages. This
    method is used for sending status reports or any other messages from Auto-GPT
    to the user via Telegram.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 `AutoGPTTelegram` 类中的 `report` 方法以发送消息。此方法用于通过 Telegram 将 Auto-GPT 的状态报告或任何其他消息发送给用户。
- en: '[PRE11]'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this method, any color codes in the message are removed first, and then the
    `send_message` method of `TelegramUtils` is called to send the message to the
    user on Telegram.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此方法中，首先移除消息中的任何颜色代码，然后调用 `TelegramUtils` 的 `send_message` 方法将消息发送给 Telegram
    用户。
- en: 'Moving on to the `telegram_chat.py` file, it contains the `TelegramUtils` class,
    which encapsulates the following utility methods for Telegram interactions:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续讲述 `telegram_chat.py` 文件，它包含了 `TelegramUtils` 类，该类封装了以下用于 Telegram 交互的实用方法：
- en: The `__init__` method in the `TelegramUtils` class, which has already been explained.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TelegramUtils` 类中的 `__init__` 方法，已有说明。'
- en: 'Implementing the `get_bot` method, which is responsible for obtaining a Telegram
    bot instance using the bot token:'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `get_bot` 方法，负责使用机器人令牌获取 Telegram 机器人实例：
- en: '[PRE12]'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this method, a new bot instance is created using the `Bot` class from the
    Telegram package. The `get_bot` method checks whether the bot has any commands
    set already, and if not, it calls `set_commands` to set the commands for the bot.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个方法中，使用 Telegram 包中的 `Bot` 类创建了一个新的机器人实例。`get_bot` 方法检查机器人是否已设置任何命令，如果没有，则调用
    `set_commands` 来设置机器人的命令。
- en: 'Implementing `poll_anyMessage` and `poll_anyMessage_async` methods, which are
    designed to poll for any message sent to the bot:'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `poll_anyMessage` 和 `poll_anyMessage_async` 方法，旨在轮询任何发送到机器人消息：
- en: '[PRE13]'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, `poll_anyMessage` sets up a new `asyncio` event loop and calls `poll_anyMessage_async`
    to poll for messages asynchronously.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`poll_anyMessage` 设置了一个新的 `asyncio` 事件循环，并调用 `poll_anyMessage_async` 异步轮询消息。
- en: 'Implementing the `send_message` and `_send_message` methods, which are utilized
    for sending messages to the Telegram chat:'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `send_message` 和 `_send_message` 方法，用于向 Telegram 聊天发送消息：
- en: '[PRE14]'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In `send_message`, it first tries to get the current running `asyncio` event
    loop. If there isn’t one running, it sets `loop` to `None`. `_send_message` is
    the asynchronous counterpart that actually sends the message to Telegram.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `send_message` 中，它首先尝试获取当前正在运行的 `asyncio` 事件循环。如果没有正在运行的事件循环，它会将 `loop` 设置为
    `None`。`_send_message` 是异步方法，实际上负责将消息发送到 Telegram。
- en: 'Implementing `ask_user`, `ask_user_async`, and `_poll_updates` methods, which
    manage the interaction of asking the user a question and waiting for their response
    on Telegram:'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `ask_user`、`ask_user_async` 和 `_poll_updates` 方法，用于管理向用户提问并等待他们在 Telegram
    上回应的互动：
- en: '[PRE15]'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In `ask_user_async`, a question is sent to the user on Telegram and `_poll_updates`
    is called to wait for their response. The `ask_user` method serves as a synchronous
    wrapper around `ask_user_async`.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `ask_user_async` 中，向用户发送问题，并调用 `_poll_updates` 来等待他们的回答。`ask_user` 方法是对 `ask_user_async`
    的同步封装。
- en: Each of these methods plays a critical role in the Telegram interaction, allowing
    Auto-GPT to communicate with the user via a Telegram bot. The process is well
    structured, ensuring that the plugin can handle various scenarios that might arise
    during the interaction.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法在 Telegram 互动中起着至关重要的作用，使 Auto-GPT 能够通过 Telegram 机器人与用户进行交流。这个过程结构合理，确保插件能够处理在互动过程中可能出现的各种情况。
- en: The methods and code snippets discussed thus far provide a well-rounded framework
    for integrating Auto-GPT with a Telegram bot. The `telegram_chat.py` file encapsulates
    Telegram-specific logic, while the `__init__.py` file handles the interaction
    with Auto-GPT using the `TelegramUtils` class.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止讨论的方法和代码片段为将 Auto-GPT 与 Telegram 机器人集成提供了一个全面的框架。`telegram_chat.py` 文件封装了
    Telegram 特定的逻辑，而 `__init__.py` 文件则通过 `TelegramUtils` 类处理与 Auto-GPT 的互动。
- en: 'Now, let’s delve further into some specific segments of the code that may require
    additional elaboration:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨一些可能需要额外解释的代码段：
- en: '`_send_message` method, there’s a segment of code dedicated to handling messages
    that exceed 2000 characters:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `_send_message` 方法中，有一段代码专门处理超过 2,000 个字符的消息：
- en: '[PRE16]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This segment ensures that if a message is longer than 2,000 characters, it’s
    split into chunks of 2,000 characters each, and each chunk is sent as a separate
    message to Telegram. This is essential for ensuring the integrity of the message
    being sent, given the maximum message length constraint in Telegram.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一部分确保如果消息长度超过 2,000 个字符，消息会被分割成每段 2,000 个字符的块，并将每一块作为独立的消息发送到 Telegram。这对于确保消息在
    Telegram 中发送时的完整性至关重要，因为 Telegram 对单条消息的最大长度有限制。
- en: '`ask_user` method, there’s logic to handle a `TimedOut` exception by re-trying
    the `ask_user` method:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `ask_user` 方法中，有处理 `TimedOut` 异常的逻辑，通过重新尝试调用 `ask_user` 方法：
- en: '[PRE17]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a robust way to handle timeouts, ensuring that the plugin retries to
    ask the user for input until successful.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是处理超时的强健方式，确保插件会一直重试请求用户输入，直到成功为止。
- en: '**Asynchronous handling**: Various parts of the code utilize asynchronous programming
    principles to ensure non-blocking operations, such as the following:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步处理**：代码中的多个部分使用了异步编程原理，以确保操作不会阻塞，如以下所示：'
- en: '[PRE18]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Utilizing asynchronous methods such as `await bot.send_message(...)` ensures
    that the IO-bound operations do not block the execution of the program, leading
    to a more responsive and performant plugin.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用异步方法，如 `await bot.send_message(...)`，确保 I/O 密集型操作不会阻塞程序的执行，从而使插件更具响应性和性能。
- en: '**Error handling**: Throughout the code, exception handling is employed to
    catch and handle errors gracefully, ensuring that any issues are logged and dealt
    with appropriately:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：在整个代码中，使用异常处理来捕获并优雅地处理错误，确保任何问题都会被记录并得到恰当的处理：'
- en: '[PRE19]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This approach promotes robustness and error resilience in the plugin’s operation.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种方法促进了插件操作的健壮性和错误恢复能力。
- en: 'The walk-through of the code has covered the fundamental aspects of how the
    Telegram plugin for Auto-GPT operates, from initialization to user interaction
    and error handling. However, there are still some nuanced elements and potential
    enhancements that could be considered to refine or expand the plugin’s functionality.
    Here are a few additional points and recommendations:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码的逐步讲解已涵盖了 Telegram 插件在 Auto-GPT 中操作的基本方面，从初始化到用户交互和错误处理。然而，仍然有一些细微的元素和潜在的增强功能可以考虑，以优化或扩展插件的功能。以下是一些额外的要点和建议：
- en: '`is_authorized_user` method, which is called in `_poll_updates`. Implementing
    authorization checks can be crucial to ensure that the bot only responds to messages
    from authorized users:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_authorized_user` 方法，它在 `_poll_updates` 中被调用。实现授权检查至关重要，以确保机器人仅响应授权用户的消息：'
- en: '[PRE20]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`get_bot` method mentions setting commands for the bot, the `set_commands`
    method is not shown in the provided snippets. It’s advisable to implement command
    handling to provide users with a guide on how to interact with the bot:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_bot` 方法提到了为机器人设置命令，但提供的代码片段中没有显示 `set_commands` 方法。建议实现命令处理，以便为用户提供如何与机器人互动的指南：'
- en: '[PRE21]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Of course, we would also have to modify the `ask_user` method to handle the
    commands, but this is just a basic example of how to implement command handling:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，我们还需要修改 `ask_user` 方法来处理命令，但这只是如何实现命令处理的一个基本示例：
- en: '[PRE22]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Logging**: Incorporating a logging framework as opposed to using print statements
    would provide a more robust and configurable way to log messages and errors. I
    first tried using the built-in logging of Auto-GPT but importing code from Auto-GPT
    into the plugin caused some issues over time, so I decided to use the built-in
    logging module of Python instead:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：引入一个日志框架，而不是使用打印语句，将提供一种更健壮和可配置的方式来记录消息和错误。我最初尝试使用 Auto-GPT 内置的日志记录功能，但将
    Auto-GPT 的代码导入插件导致了一些问题，因此我决定改用 Python 的内置日志模块：'
- en: '[PRE23]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here is an example of its usage:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是其使用示例：
- en: '[PRE24]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Environment variable management**: The code retrieves the Telegram API key
    and chat ID directly. It’s a good practice to manage such sensitive information
    using environment variables, ensuring they are not hardcoded:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境变量管理**：代码直接获取 Telegram API 密钥和聊天 ID。管理这类敏感信息时，使用环境变量是一个好习惯，以确保这些信息不会硬编码在代码中：'
- en: '[PRE25]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Code modularity and reusability**: It might be beneficial to further modularize
    the code, separating concerns and making it easier to maintain and extend. For
    instance, the Telegram interaction logic could be encapsulated into a separate
    module or class, making the code more organized and reusable.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码模块化和可重用性**：将代码进一步模块化，分离关注点，并使其更易于维护和扩展可能会带来好处。例如，Telegram 交互逻辑可以封装到一个单独的模块或类中，从而使代码更加有序且可重用。'
- en: '**Unit testing**: Adding unit tests to verify the functionality of the plugin
    is crucial for ensuring its reliability and ease of maintenance, especially when
    changes or updates are made to the code base.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：为插件添加单元测试以验证其功能，对于确保插件的可靠性和维护的便利性至关重要，尤其是在对代码库进行更改或更新时。'
- en: '**Documentation**: Ensuring that the code is well documented, including comments
    explaining the functionality of methods and complex code segments, will make it
    easier for others to understand, use, and potentially contribute to the plugin.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档编写**：确保代码有良好的文档，包括注释解释方法和复杂代码段的功能，将使其他人更容易理解、使用并可能为插件贡献代码。'
- en: By considering these additional points and recommendations, developers can enhance
    the Telegram plugin’s functionality, making it more robust, user friendly, and
    maintainable. Furthermore, readers and developers following the guide will have
    a more comprehensive understanding of the considerations involved in building
    and refining a plugin for Auto-GPT.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 通过考虑这些额外的要点和建议，开发人员可以增强 Telegram 插件的功能，使其更加健壮、用户友好且易于维护。此外，跟随此指南的读者和开发人员将对构建和完善
    Auto-GPT 插件时需要考虑的事项有更全面的理解。
- en: The discussion thus far has provided a comprehensive overview of the Telegram
    plugin for Auto-GPT, covering the core functionality, error handling, asynchronous
    programming, and some additional considerations for refining the plugin. As we
    reach the conclusion of this walk-through, it’s a good time to summarize key takeaways
    and suggest further steps for readers or developers looking to work with or build
    upon this plugin.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的讨论已经全面概述了 Auto-GPT 的 Telegram 插件，涵盖了核心功能、错误处理、异步编程以及一些进一步完善插件的额外注意事项。在此步骤的结尾，我们可以总结一些关键要点，并建议读者或开发者在使用或构建该插件时采取进一步的步骤。
- en: 'Here is a summary of the key takeaways:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关键要点的总结：
- en: '`__init__.py` and `telegram_chat.py`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py` 和 `telegram_chat.py`'
- en: '`__init__.py` is the entry point where Auto-GPT interacts with the plugin,
    while `telegram_chat.py` encapsulates the Telegram-specific logic'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`__init__.py` 是 Auto-GPT 与插件交互的入口点，而 `telegram_chat.py` 封装了与 Telegram 相关的具体逻辑。'
- en: '`__init__` methods in both files are crucial for initializing and configuring
    the plugin, including setting up the Telegram bot credentials'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个文件中的 `__init__` 方法对于初始化和配置插件至关重要，包括设置 Telegram 机器人凭据。
- en: '`user_input`, `report`, `ask_user`, and `send_message`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user_input`，`report`，`ask_user` 和 `send_message`'
- en: '`asyncio` library enable non-blocking IO operations, improving the plugin’s
    responsiveness and performance'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asyncio` 库支持非阻塞 IO 操作，提高插件的响应性和性能。'
- en: '**Error handling**: Exception handling is employed throughout the code to catch
    and log errors, making the plugin more robust and resilient'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：代码中采用异常处理来捕获和记录错误，使插件更稳健、可靠。'
- en: 'Let us now look at the further steps that can be taken:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看可以采取的进一步步骤：
- en: '**Explore the GitHub repository**: You are encouraged to explore the GitHub
    repository ([https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram))
    for the latest version of the plugin and to understand any updates or modifications
    made to the code.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索 GitHub 仓库**：鼓励你探索 GitHub 仓库（[https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram)），获取插件的最新版本，并了解代码中所做的任何更新或修改。'
- en: '**Contribute to the project**: Developers interested in contributing can fork
    the repository, make their own improvements or additions, and submit pull requests.
    This collaborative approach can help enhance the plugin over time.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为项目做贡献**：有意贡献的开发者可以分叉代码库，进行自己的改进或新增功能，并提交拉取请求。这种协作方式有助于随着时间的推移不断改进插件。'
- en: '**Implement suggested enhancements**: Implementing the suggested enhancements
    such as authorization checks, command handling, logging, environment variable
    management, code modularity, unit testing, and documentation could significantly
    improve the plugin’s functionality and maintainability.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施建议的改进**：实施如授权检查、命令处理、日志记录、环境变量管理、代码模块化、单元测试和文档等建议的改进，可以显著提高插件的功能性和可维护性。'
- en: '**Experiment and customize**: Developers are encouraged to experiment with
    the plugin, customize it to fit their specific needs, and even extend it to incorporate
    additional features or integrations.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实验与定制**：鼓励开发者实验插件，定制插件以满足他们的特定需求，甚至将其扩展以融入更多功能或集成。'
- en: '**Learn and share**: Engaging with the community, learning from others, and
    sharing knowledge and experiences can be beneficial for everyone involved.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习与分享**：与社区互动，从他人那里学习，并分享知识和经验对每个参与者都有益。'
- en: This walk-through aims to provide a thorough understanding of the Telegram plugin
    for Auto-GPT and offer a foundation for developers and for you all who are looking
    to delve deeper into plugin development for Auto-GPT. Through exploration, experimentation,
    and collaboration, the community can continue to build and improve upon this and
    other plugins, enhancing the capabilities and applications of Auto-GPT.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在提供对 Auto-GPT 的 Telegram 插件的透彻理解，并为开发者以及希望深入了解 Auto-GPT 插件开发的读者提供基础。通过探索、实验和合作，社区可以继续构建和改进该插件及其他插件，增强
    Auto-GPT 的能力和应用。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By dissecting the various methods and logic within the `__init__.py` and `telegram_chat.py`
    files, you will gain a thorough understanding of how the Telegram plugin is structured
    and operates. This step-by-step breakdown elucidates how Auto-GPT communicates
    with Telegram, handles user input, and sends messages or reports back to the user.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解析`__init__.py`和`telegram_chat.py`文件中的各种方法和逻辑，你将对Telegram插件的结构和工作原理有一个透彻的了解。这一分步分析阐明了Auto-GPT如何与Telegram进行通信、处理用户输入并将消息或报告发送回用户。
- en: The complete code for this plugin, along with potential updates or modifications,
    can be found at [https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram).
    This repository is an excellent resource for those interested in exploring the
    plugin further or adapting it to their needs.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件的完整代码以及可能的更新或修改可以在[https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram](https://github.com/Significant-Gravitas/Auto-GPT-Plugins/tree/master/src/autogpt_plugins/telegram)找到。这个代码库是那些希望深入探索插件或根据自己需求进行调整的人的极好资源。
- en: In this chapter, we provided a short introduction to plugins in Auto-GPT. We
    gave an overview of plugins, the different types of plugins and their use cases,
    how to use plugins effectively, and the process of building plugins. By leveraging
    plugins, you can extend Auto-GPT’s functionality, tailor it to specific tasks
    or domains, and enhance its performance in various applications.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了Auto-GPT中的插件。我们概述了插件的基本概念、不同类型的插件及其应用场景、如何有效使用插件，以及构建插件的过程。通过利用插件，你可以扩展Auto-GPT的功能，将其定制为特定任务或领域，并提升其在各种应用中的表现。
- en: In the next chapter, we will delve into practical examples and case studies
    that demonstrate the power of plugins in real-world scenarios. If you have any
    specific requests or suggestions for modifications, please let me know!
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨一些实际示例和案例研究，展示插件在现实场景中的强大功能。如果你有任何具体需求或修改建议，欢迎告诉我！
