- en: '*Chapter 10*: Reducing Localization Costs with Machine Translation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第十章*：通过机器翻译降低本地化成本'
- en: About a decade and a half ago (before the internet was what it is today), one
    of the authors went on a sightseeing trip to Switzerland. It was an impulsive,
    last-minute decision and was carried out with not a lot of planning. The travel
    itself was uneventful, and the author was aware that German is an acceptable language
    in Switzerland, and so busied himself with the English to German *Rosetta tone*
    during the trip. Based on advice from friends who had been to Switzerland before,
    a rough itinerary was put together that included visits to Zurich, Interlaken,
    Bern, and so on. With his very naïve German and, more importantly, due to the
    excellent English spoken by the Swiss, the author relaxed and even started enjoying
    his trip – until, of course, he went to Geneva, where everyone spoke only French.
    His attempt to converse in English was met with indifference, and the only French
    words the author knew were "oui" (meaning "yes") and "au revoir" (meaning "goodbye")!
    The author ended up having to use sign language, pointing to menu items in restaurants,
    asking about places to visit by showing a tourist guidebook, and so on to get
    through his next few days. If only the author had access to the advanced ML-based
    translation solutions that are so common today – Geneva would have been a breeze.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大约十五年前（在互联网还不像今天这样发达的时候），其中一位作者去了瑞士进行观光旅行。这是一个冲动的、临时的决定，而且几乎没有太多规划。旅行本身很平淡，作者知道德语在瑞士是可接受的语言，于是在旅途中忙着进行英语到德语的*罗塞塔语音*练习。根据曾去过瑞士的朋友的建议，作者粗略地制定了一个行程，包括参观苏黎世、因特拉肯、伯尔尼等地。凭借他非常幼稚的德语，尤其是由于瑞士人流利的英语，作者逐渐放松了下来，甚至开始享受起旅行——直到，当然，他去了日内瓦，那里的每个人只说法语。他尝试用英语交谈时遭遇冷漠，他所知道的唯一法语单词就是“oui”（意思是“是”）和“au
    revoir”（意思是“再见”）！作者最终不得不使用手势语言，通过指着餐厅菜单上的项目、展示旅游指南书询问旅游景点等方式度过接下来的几天。如果当时作者能使用如今常见的基于机器学习的高级翻译解决方案——日内瓦本该是轻松愉快的。
- en: In his book *The World Is Flat* published in 2005 (almost the same time this
    author was on his way to Geneva), *Thomas L. Friedman* detailed the implications
    of globalization in the context of how technological advancements, including personal
    computers and the internet, have led to collapsing economical distinctions and
    boundaries, so much so that it has leveled the global arena. When enterprises
    go global, one of the most common tasks they encounter is the need to translate
    the language of their websites into the local language of the country or state
    they choose to operate in. This is called localization. Traditionally, organizations
    hired a team of translators who painstakingly translated the content of their
    websites, page by page, taking care to retain the correct context of what was
    being expressed. This was manually fed into multiple pages to stand up their websites.
    This was both time-consuming and cost-prohibitive but since it was a necessary
    task, organizations had no choice. Today, with the advent of ML-based translation
    capabilities such as Amazon Translate, localization can be performed at a fraction
    of the cost compared to before.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在他2005年出版的书籍《*世界是平的*》中（几乎在这位作者前往日内瓦的同一时期），*托马斯·L·弗里德曼*详细描述了全球化的意义，特别是技术进步（包括个人电脑和互联网）如何导致经济界限和界区的崩塌，甚至将全球竞争的舞台拉平。当企业走向全球化时，他们最常遇到的任务之一就是将其网站的语言翻译成他们选择运营的国家或地区的本地语言。这就是所谓的本地化。传统上，组织会雇佣一个翻译团队，
    painstakingly（辛苦地）逐页翻译其网站内容，确保准确表达原文的上下文。这些内容会手动输入到多个页面中以搭建网站。这既耗时又昂贵，但由于这是必要的任务，组织们别无选择。如今，随着基于机器学习的翻译技术，如亚马逊翻译的出现，本地化可以以以前的几分之一的成本完成。
- en: In the previous chapter, we saw how to harness the power of NLP with AWS AI
    services to extract metadata for financial filing reports for **LiveRight** so
    that their financial analysts can look into important information and make better
    decisions with respect to financial events such as mergers, acquisitions, and
    IPOs. In this chapter, we will see how NLP and AWS AI services help to automate
    website localization using **Amazon Translate** ([https://aws.amazon.com/translate/](https://aws.amazon.com/translate/)),
    a ML-based translation service that supports 71 languages. You do not need to
    perform any ML training to use Amazon Translate as it is pre-trained and supports
    invocations through a simple API call. For use cases that are unique to your business,
    you can use advanced features of Amazon Translate such as **Named Entity Translation
    Customization** ([https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html](https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html)),
    **Active Custom Translation** ([https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-parallel-data.html](https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-parallel-data.html)),
    and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到如何利用 AWS AI 服务的 NLP 功能为 **LiveRight** 提取财务报告的元数据，以便他们的财务分析师能够查看重要信息并就合并、收购和
    IPO 等财务事件做出更好的决策。在本章中，我们将看到 NLP 和 AWS AI 服务如何通过 **Amazon Translate**（[https://aws.amazon.com/translate/](https://aws.amazon.com/translate/)）帮助自动化网站本地化。Amazon
    Translate 是一个基于机器学习的翻译服务，支持 71 种语言。使用 Amazon Translate 不需要进行任何机器学习训练，因为它是预训练的，并且支持通过简单的
    API 调用进行调用。对于适用于您业务的特定用例，您可以使用 Amazon Translate 的高级功能，如**命名实体翻译自定义**（[https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html](https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html)）、**主动自定义翻译**（[https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-parallel-data.html](https://docs.aws.amazon.com/translate/latest/dg/customizing-translations-parallel-data.html)）等。
- en: 'To learn how to build a cost-effective localization solution, we will cover
    the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何构建一个高性价比的本地化解决方案，我们将涵盖以下主题：
- en: Introducing the localization use case
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍本地化用例
- en: Building a multi-language web page using machine translation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用机器翻译构建多语言网页
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need access to an AWS account. Please make sure that
    you follow the instructions specified in the *Technical requirements* section
    of [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027), *Introducing
    Amazon Textract*, to create your AWS account. Make sure that you log into the
    AWS Management Console before trying the steps in the *Building a multi-language
    web page using machine translation* section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要一个 AWS 账户。请确保按照[*第二章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中*技术要求*部分的说明，创建你的
    AWS 账户。在尝试执行*使用机器翻译构建多语言网页*部分的步骤之前，请确保已登录 AWS 管理控制台。
- en: 'The Python code and sample datasets for our solution can be found at the link
    here: [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2010](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2010).
    Please use the instructions in the following sections along with the code in the
    repository to build the solution.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决方案的 Python 代码和示例数据集可以在以下链接找到：[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2010](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2010)。请使用以下各节中的说明，并结合代码库中的代码来构建解决方案。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3meYsn0](https://bit.ly/3meYsn0).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码演示：[https://bit.ly/3meYsn0](https://bit.ly/3meYsn0)。
- en: Introducing the localization use case
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍本地化用例
- en: In the past few chapters, we looked at a variety of ways NLP can help us understand
    our customers better. We learned how we can build applications to detect sentiments,
    monetize content, detect unique entities, and understand context, references,
    and other analytics processes that help organizations gain important insights
    about their business. In this chapter, we will learn how to automate the process
    of translating website content into multiple languages. To illustrate this example,
    we'll assume that our fictitious banking corporation, **LiveRight Holdings Private
    Limited**, has decided to expand internationally to delight potential customers
    in Germany, Spain, and the cities Mumbai and Chennai in India. The launch date
    for these four pilot regions is coming up fast; that is, in the next 3 weeks.
    The expansions operations lead has escalated his concerns to senior management,
    stating that the IT teams may not be ready with the websites in the corresponding
    local languages of German, Spanish, Hindi, and Tamil on time for the launch. You
    get a frantic call from the director of IT, your boss, and she has asked you,
    the application architect, to design and build the websites within the next 2
    weeks so that they can use the last week for acceptance testing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们探讨了多种自然语言处理（NLP）如何帮助我们更好地理解客户。我们学习了如何构建应用程序来检测情感、实现内容货币化、识别独特实体，并理解上下文、引用及其他分析流程，这些都帮助组织获得关于其业务的重要洞察。在这一章中，我们将学习如何自动化将网站内容翻译成多种语言的过程。为了说明这个例子，我们假设我们的虚拟银行公司**LiveRight
    Holdings Private Limited**已经决定扩展到德国、西班牙以及印度的孟买和金奈等城市，以吸引潜在客户。这四个试点区域的上线日期即将来临，也就是在接下来的三周内。扩展项目负责人已向高层管理层提出了担忧，表示IT团队可能无法按时准备好对应地区的德语、西班牙语、印地语和泰米尔语网站，以迎接上线。你接到了一通来自IT总监的紧急电话，她要求你作为应用架构师，在接下来的两周内设计并构建这些网站，这样他们可以利用最后一周进行验收测试。
- en: You know that a manual approach is out of the question as it's going to be impossible
    to hire translators, complete the work, and build up the websites within 2 weeks.
    After some quick research, you decide to use **Amazon Translate**, an ML-based
    translation service, to automate the translation process for the websites. You
    check the Amazon Translate pricing page (https://aws.amazon.com/translate/pricing/)
    and realize that you can translate a million characters for as low as $15 and
    that, more importantly, for the first 12 months, you can take advantage of the
    **AWS Free Tier** ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)),
    which allows you to translate 2 million characters per month, free of charge.
    For the pilot sites, you perform a character count and see that it's around 500K
    characters. In the meantime, your director reaches out to ask you to create a
    quick demonstratable prototype of the **About Us** page ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/input/aboutLRH.html](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/input/aboutLRH.html))
    in the four target languages of German, Spanish, Hindi, and Tamil.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道手动方法不行，因为雇佣翻译人员、完成工作并在两周内构建网站几乎不可能。在进行了一些快速调研后，你决定使用**Amazon Translate**，这是一项基于机器学习的翻译服务，来自动化网站的翻译过程。你查看了Amazon
    Translate定价页面（https://aws.amazon.com/translate/pricing/），发现你可以以最低15美元的价格翻译一百万个字符，更重要的是，在前12个月内，你可以利用**AWS免费套餐**（[https://aws.amazon.com/free/](https://aws.amazon.com/free/)），每月免费翻译200万个字符。对于试点网站，你进行了字符计数，发现大约有50万个字符。与此同时，您的总监联系你，要求你快速创建一个**关于我们**页面的可展示原型（[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/input/aboutLRH.html](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/input/aboutLRH.html)），并支持德语、西班牙语、印地语和泰米尔语这四种目标语言。
- en: We will be walking through this solution using the AWS Management Console and
    an Amazon SageMaker Jupyter notebook. Please refer to the *Signing up for an AWS
    account* section of the *Setting up your AWS environment* section of [*Chapter
    2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027), *Introducing Amazon Textract*,
    for detailed instructions on how to sign up for an AWS account and sign into the
    **AWS Management Console**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过AWS管理控制台和Amazon SageMaker Jupyter笔记本来演示这个解决方案。请参考[*第二章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中*设置您的AWS环境*部分的*注册AWS账户*部分，获取关于如何注册AWS账户并登录**AWS管理控制台**的详细说明。
- en: 'First, we will create an **Amazon SageMaker** Jupyter notebook instance (if
    you haven''t done so already in the previous chapters), clone the repository into
    our notebook instance, open the Jupyter notebook for our solution walkthrough
    ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb)),
    and execute the steps in the notebook. Detailed instructions will be provided
    in the *Building a multi-language web page using machine translation* section.
    Let''s take a look:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个 **Amazon SageMaker** Jupyter 笔记本实例（如果您在前几章中还没有创建的话），将代码库克隆到我们的笔记本实例中，打开用于解决方案演示的
    Jupyter 笔记本 ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb))，并执行笔记本中的步骤。详细的操作说明将在
    *使用机器翻译构建多语言网页* 部分提供。让我们一起来看看：
- en: In the notebook, we will view the English version of the **About Us** page.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在笔记本中，我们将查看**关于我们**页面的英文版本。
- en: Then, we will review the HTML code of the **About Us** page to determine what
    tag components need translating.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将审查 **关于我们** 页面的 HTML 代码，以确定哪些标签组件需要翻译。
- en: Next, we will install an HTML parser library for Python ([https://www.crummy.com/software/BeautifulSoup/bs4/doc/](https://www.crummy.com/software/BeautifulSoup/bs4/doc/))
    and extract the text content of the tags we are interested in from our HTML page
    into a list.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为 Python 安装一个 HTML 解析器库（[https://www.crummy.com/software/BeautifulSoup/bs4/doc/](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)），并将我们感兴趣的标签的文本内容从
    HTML 页面提取到一个列表中。
- en: We will use the **boto3 AWS Python SDK** for **Amazon Translate** to get a handle
    on and invoke the translation function. We will do this in a loop to get the translated
    content in German, Spanish, Hindi, and Tamil.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 **boto3 AWS Python SDK** 通过 **Amazon Translate** 来调用翻译功能。我们将以循环的方式获取德语、西班牙语、印地语和泰米尔语的翻译内容。
- en: Then, we will take the original HTML (in English) and update it with content
    for the corresponding tags for each of the four languages to create four separate
    HTML pages.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将采用原始的 HTML（英文版），并用每种语言对应标签的内容进行更新，从而创建四个独立的 HTML 页面。
- en: Finally, we will display the HTML pages to review the translations.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将展示 HTML 页面，以审查翻译内容。
- en: 'Once you''ve done this, you can upload the HTML to an **Amazon S3** bucket
    and set up an **Amazon CloudFront** distribution to provision your website globally
    in minutes. For more details on how to do this, please refer to this link: [https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html).
    In this section, we introduced the localization requirements for **LiveRight**,
    the people who are looking to expand internationally, and who need local language-specific
    web pages for their launch in these markets. In the next section, we will learn
    how to build the solution.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以将 HTML 上传到 **Amazon S3** 桶，并设置 **Amazon CloudFront** 分发，几分钟内便能全球部署您的网站。有关如何操作的更多细节，请参阅此链接：[https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html)。在本节中，我们介绍了
    **LiveRight** 的本地化需求，该公司希望拓展国际市场，需要为这些市场的启动提供本地语言的网页。在下一节中，我们将学习如何构建解决方案。
- en: Building a multi-language web page using machine translation
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用机器翻译构建多语言网页
- en: In the previous section, we introduced a requirement for web page localization,
    covered the design aspects for the solution we will be building, and briefly walked
    through the solution components and workflow steps. In this section, we will start
    executing the tasks to build our solution. But first, there are some prerequisites
    we will have to take care of.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了网页本地化的需求，讨论了我们将要构建的解决方案的设计方面，并简要介绍了解决方案组件和工作流程步骤。在本节中，我们将开始执行构建解决方案的任务。但首先，我们需要处理一些前提条件。
- en: Setting up to solve the use case
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置以解决用例
- en: If you have not done so in the previous chapters, as a prerequisite, you will
    have to create an Amazon SageMaker Jupyter notebook instance and set up `Chapter
    10` folder and open the `Reducing-localization-costs-with-machine-translation-github.ipynb`
    notebook to start the execution process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在前面的章节中没有这样做，作为前提条件，您需要创建一个Amazon SageMaker Jupyter Notebook实例，设置`第10章`文件夹，并打开`Reducing-localization-costs-with-machine-translation-github.ipynb`笔记本以开始执行过程。
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please ensure you have completed the tasks mentioned in the *Technical requirements*
    section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您已经完成了*技术要求*部分提到的任务。
- en: 'Follow the instructions documented in the *Creating an Amazon SageMaker Jupyter
    Notebook instance* section of the *Setting up your AWS environment* section of
    [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027), *Introducing Amazon
    Textract*, to create your Jupyter Notebook instance. Let''s get started:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照[*第2章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中[*设置您的AWS环境*]章节的*创建Amazon
    SageMaker Jupyter Notebook实例*部分的说明，创建您的Jupyter Notebook实例。让我们开始吧：
- en: Important – IAM role permissions while creating Amazon SageMaker Jupyter notebooks
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重要 – 在创建Amazon SageMaker Jupyter笔记本时的IAM角色权限
- en: Accept the default for the IAM role at notebook creation time to allow access
    to any S3 bucket.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接受在笔记本创建时IAM角色的默认设置，以允许访问任何S3存储桶。
- en: Once you've created the notebook instance and set its status to `TranslateFullAccess`
    policy to your Amazon SageMaker notebook IAM role. To execute this step, please
    refer to the *Changing IAM permissions and trust relationships for the Amazon
    SageMaker notebook execution role* section of the *Setting up your AWS environment*
    section of [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027), *Introducing
    Amazon Textract*.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了笔记本实例并将其状态设置为`TranslateFullAccess`策略，接下来需要为您的Amazon SageMaker笔记本IAM角色设置权限。要执行此步骤，请参阅[*第2章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中*介绍Amazon
    Textract*部分的*更改IAM权限和信任关系以便执行Amazon SageMaker笔记本角色*章节。
- en: Now, go back to your notebook instance and click on **Open Jupyter** from the
    **Actions** menu:![Figure 10.1 – Opening the Jupyter notebook](img/B17528_10_01.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到您的笔记本实例并点击**操作**菜单中的**打开Jupyter**：![图10.1 – 打开Jupyter笔记本](img/B17528_10_01.jpg)
- en: Figure 10.1 – Opening the Jupyter notebook
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.1 – 打开Jupyter笔记本
- en: This will take you to the home folder of your notebook instance.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将带您进入笔记本实例的主文件夹。
- en: Click on **New** and select **Terminal**, as shown in the following screenshot:![Figure
    10.2 – Opening a terminal in Jupyter notebook
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建**并选择**终端**，如下图所示：![图10.2 – 在Jupyter笔记本中打开终端](img/B17528_10_02.jpg)
- en: '](img/B17528_10_02.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_10_02.jpg)'
- en: Figure 10.2 – Opening a terminal in Jupyter notebook
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.2 – 在Jupyter笔记本中打开终端
- en: In the terminal window, type `cd SageMaker` and then `git clone https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services`,
    as shown in the following screenshot. If you have already done this in the previous
    chapters for this notebook instance, you don't have to clone the repository again:![Figure
    10.3 – The git clone command
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，键入`cd SageMaker`，然后键入`git clone https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services`，如下图所示。如果您在前面的章节中已经为该笔记本实例执行了此操作，则无需再次克隆代码库：![图10.3
    – git clone命令](img/B17528_10_03.jpg)
- en: '](img/B17528_10_03.jpg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_10_03.jpg)'
- en: Figure 10.3 – The git clone command
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.3 – git clone命令
- en: Now, exit the terminal window and go back to the home folder – you will see
    a folder called `Natural-Language-Processing-with-AWS-AI-Services`. Upon clicking
    this folder, you will see `chapter-10-localization-with-machine-translation`.
    Click this folder and then open the `Reducing-localization-costs-with-machine-translation-github.ipynb`
    notebook.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，退出终端窗口并返回主文件夹–您将看到一个名为`Natural-Language-Processing-with-AWS-AI-Services`的文件夹。点击此文件夹后，您将看到`chapter-10-localization-with-machine-translation`。点击该文件夹，然后打开`Reducing-localization-costs-with-machine-translation-github.ipynb`笔记本。
- en: Now that we have created our notebook instance and cloned our repository, we
    can start running our notebook code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经创建了笔记本实例并克隆了我们的代码库，可以开始运行笔记本代码了。
- en: Running the notebook
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行笔记本
- en: 'Open the notebook you cloned from this book''s GitHub repository ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb)),
    as we discussed in the *Setting up to solve the use case* section, and execute
    the cells step by step, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你从本书 GitHub 仓库中克隆的笔记本（[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2010/Reducing-localization-costs-with-machine-translation-github.ipynb)），正如我们在*为解决用例做好准备*部分中讨论的那样，按照以下步骤逐步执行单元格：
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please ensure you have executed the steps in the *Technical requirements* and
    *Setting up to solve the use case* sections before you execute the cells in the
    notebook.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在执行笔记本中的单元格之前，您已完成*技术要求*和*为解决用例做好准备*部分中的步骤。
- en: 'Execute the first cell in the notebook, under the *Input HTML Web Page* section,
    to render the HTML for the English version of our web page:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行笔记本中的第一个单元格，位于*输入 HTML 网页*部分，渲染英文版网页的 HTML：
- en: '[PRE0]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will see that the page has a few headings and then a paragraph talking about
    **Family Bank**, a subsidiary of **LiveRight Holdings**:![Figure 10.4 – English
    version of the web page
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到页面中有几个标题，然后是一个段落，讲述**家庭银行**，它是**LiveRight Holdings**的子公司：![图 10.4 – 网页的英文版本
- en: '](img/B17528_10_04.jpg)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_10_04.jpg)'
- en: Figure 10.4 – English version of the web page
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.4 – 网页的英文版本
- en: 'Execute the following cell to review the HTML code for our web page:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下单元格以查看网页的 HTML 代码：
- en: '[PRE1]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will see the following output for the web page. The areas highlighted in
    the following output are the tags we are interested in translating for our target
    web pages. In this code block, we can define the title of the web page and some
    default JavaScript imports:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看到网页的以下输出。以下输出中突出显示的区域是我们感兴趣的、需要翻译的标签。在此代码块中，我们可以定义网页的标题以及一些默认的 JavaScript
    导入：
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we will define the body of the page with the h1, h2, and h3 headings,
    as shown in the following code block:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过 h1、h2 和 h3 标题来定义页面的主体，如下代码块所示：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will define the actual body of the text as an h4 heading to highlight
    it, as shown in the following code block:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义实际的正文部分为 h4 标题，以突出显示，如下代码块所示：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we will start the JavaScript section in the HTML to get the current date
    to be displayed, as shown in the following code block:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将开始 HTML 中的 JavaScript 部分，以获取当前日期并显示，如下代码块所示：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we will declare the CSS styles ([https://www.w3.org/Style/CSS/Overview.en.html](https://www.w3.org/Style/CSS/Overview.en.html))
    that we need for each of the sections. First, here is the style for the body of
    the web page:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将声明每个部分所需的 CSS 样式（[https://www.w3.org/Style/CSS/Overview.en.html](https://www.w3.org/Style/CSS/Overview.en.html)）。首先，这里是网页主体的样式：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is the style for the background and the background text widgets,
    which are called `home` and `hometext`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是背景和背景文本小部件的样式，这些小部件被称为 `home` 和 `hometext`：
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we will define the styles for each of the headings and paragraphs
    in our web page:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将为网页中的每个标题和段落定义样式：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we will execute the cells in the *Prepare for Translation* section. Execute
    the first cell to install the HTML parser we need for our solution, called `Beautiful
    Soup` ([https://www.crummy.com/software/BeautifulSoup/bs4/doc/](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)):'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将执行*准备翻译*部分中的单元格。执行第一个单元格以安装我们解决方案所需的 HTML 解析器，名为 `Beautiful Soup`（[https://www.crummy.com/software/BeautifulSoup/bs4/doc/](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)）：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, run the following cell to load our English HTML page code into a variable
    so that we can parse it using `Beautiful Soup`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行以下单元格将我们的英文 HTML 页面代码加载到一个变量中，以便我们可以使用 `Beautiful Soup` 解析它：
- en: '[PRE10]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, parse the HTML page:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解析 HTML 页面：
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s define the list of HTML tags we are interested in and load the text
    content for those HTML tags into a dictionary:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义我们感兴趣的 HTML 标签列表，并将这些 HTML 标签的文本内容加载到字典中：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will get the following response:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将收到以下响应：
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we will execute the cells in the *Translate to target languages* section.
    In the first cell, we will import the `boto3` library ([https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)),
    the Python SDK for AWS services, create a handle for Amazon Translate, and then
    translate our web page into our target languages:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将执行*翻译成目标语言*部分中的单元格。在第一个单元格中，我们将导入`boto3`库（[https://boto3.amazonaws.com/v1/documentation/api/latest/index.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)），AWS服务的Python
    SDK，创建Amazon Translate的句柄，然后将我们的网页翻译成目标语言：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s execute the cells in the *Build webpages for translated text* section.
    This section is split into four subsections – one for each target language. Execute
    the cells under *German Webpage*. The code assigns the HTML parser''s output to
    a new variable, updates the HTML tag values with translated content from the preceding
    step, and then writes the complete HTML to an output HTML file for the language.
    For simplicity, the code from the four separate cells under this subsection is
    grouped like so:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们执行*为翻译文本构建网页*部分中的单元格。该部分分为四个小节——每个目标语言一个。执行*德语网页*下的单元格。该代码将HTML解析器的输出分配给一个新变量，使用前一步翻译的内容更新HTML标签值，然后将完整的HTML写入输出HTML文件中。为简便起见，该小节下的四个独立单元格的代码被合并如下：
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will get the following output:![Figure 10.5 – The translated German web page
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：![图 10.5 – 翻译后的德语网页
- en: '](img/B17528_10_05.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_10_05.jpg)'
- en: Figure 10.5 – The translated German web page
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.5 – 翻译后的德语网页
- en: 'Execute the cells under *Spanish Webpage*. The code assigns the HTML parser''s
    output to a new variable, updates the HTML tag values with translated content
    from the preceding step, and then writes the complete HTML to an output HTML file
    for the language. For simplicity, the code from the four separate cells under
    this subsection is grouped, like so:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行*西班牙语网页*下的单元格。该代码将HTML解析器的输出分配给一个新变量，使用前一步翻译的内容更新HTML标签值，然后将完整的HTML写入输出HTML文件中。为简便起见，该小节下的四个独立单元格的代码被合并如下：
- en: '[PRE16]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We will get the following output:![Figure 10.6 – The translated Spanish web
    page
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：![图 10.6 – 翻译后的西班牙语网页
- en: '](img/B17528_10_06.jpg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_10_06.jpg)'
- en: Figure 10.6 – The translated Spanish web page
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.6 – 翻译后的西班牙语网页
- en: 'Execute the cells under *Hindi Webpage*. The code assigns the HTML parser''s
    output to a new variable, updates the HTML tag values with translated content
    from the preceding step, and then writes the complete HTML to an output HTML file
    for the language. For simplicity, the code from the four separate cells under
    this subsection is grouped, like so:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行*印地语网页*下的单元格。该代码将HTML解析器的输出分配给一个新变量，使用前一步翻译的内容更新HTML标签值，然后将完整的HTML写入输出HTML文件中。为简便起见，该小节下的四个独立单元格的代码被合并如下：
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will get the following output:![Figure 10.7 – The translated Hindi web page
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：![图 10.7 – 翻译后的印地语网页
- en: '](img/B17528_10_07.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_10_07.jpg)'
- en: Figure 10.7 – The translated Hindi web page
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.7 – 翻译后的印地语网页
- en: 'Execute the cells under *Tamil Webpage*. The code assigns the HTML parser''s
    output to a new variable, updates the HTML tag values with translated content
    from the preceding step, and then writes the complete HTML to an output HTML file
    for the language. For simplicity, the code from the four separate cells under
    this subsection is grouped, like so:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行*泰米尔语网页*下的单元格。该代码将HTML解析器的输出分配给一个新变量，使用前一步翻译的内容更新HTML标签值，然后将完整的HTML写入输出HTML文件中。为简便起见，该小节下的四个独立单元格的代码被合并如下：
- en: '[PRE18]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We will get the following output:![Figure 10.8 – The translated Tamil web page
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：![图 10.8 – 翻译后的泰米尔语网页
- en: '](img/B17528_10_08.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_10_08.jpg)'
- en: Figure 10.8 – The translated Tamil web page
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.8 – 翻译后的泰米尔语网页
- en: 'In some instances, you may see that custom brand names or product terms specific
    to your organization may not be translated into the required context in your target
    language. In these cases, use **Amazon Translate Custom Terminology** to ensure
    Amazon Translate can identify the context for these unique words. For more details,
    you can refer to the following documentation: [https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html).'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能会发现特定于你组织的自定义品牌名称或产品术语未能正确翻译成目标语言中的所需上下文。在这种情况下，使用**Amazon Translate
    自定义术语**来确保Amazon Translate能够识别这些独特单词的上下文。有关详细信息，你可以参考以下文档：[https://docs.aws.amazon.com/translate/latest/dg/how-custom-terminology.html](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)。
- en: And that concludes the solution build for this chapter. As we mentioned previously,
    you can upload your web pages to an Amazon S3 bucket ([https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html))
    and use Amazon CloudFront ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html))
    to distribute your website globally in minutes. Further with support for translating
    2 million characters per month for the first 12 months free of charge, and only
    $15 for every 1 million characters after that, your translation costs are significantly
    minimized. For additional ideas on how you can use Amazon Translate for your needs,
    please refer to the *Further reading* section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章解决方案的构建过程。如前所述，你可以将网页上传到Amazon S3存储桶 ([https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html))，并使用Amazon
    CloudFront ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-cloudfront-walkthrough.html))
    在几分钟内将你的网页全球分发。此外，Amazon Translate每月免费支持翻译200万字符，12个月后，每百万字符仅需$15，极大降低了翻译成本。有关如何利用Amazon
    Translate满足你的需求的更多想法，请参考*进一步阅读*部分。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to build content localization for web pages
    quickly and in a highly cost-efficient way with Amazon Translate, an ML-based
    translation service that provides powerful machine translation models behind an
    API endpoint for ease of access. First, we reviewed a use case for our fictitious
    corporation, called **LiveRight Holdings**, which was looking to expand internationally
    and needed to launch its website in four different languages in 3 weeks. LiveRight
    did not have the time or funding to hire experienced translators to perform the
    website conversion manually. The director of IT at LiveRight hired you to devise
    a solution that's quick and cost-effective.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Amazon Translate快速且高效地构建网页的内容本地化，Amazon Translate是一种基于机器学习的翻译服务，提供强大的机器翻译模型，并通过API端点便捷访问。首先，我们回顾了一个虚构公司的使用案例，该公司名为**LiveRight
    Holdings**，希望扩大国际市场，并需要在3周内将其网站推出四种不同语言版本。LiveRight没有足够的时间或资金聘请经验丰富的翻译人员来手动完成网站转换。LiveRight的IT总监雇佣了你来制定一个快速且具有成本效益的解决方案。
- en: For this, you designed a solution using Amazon Translate that used a Python
    HTML parser to extract the relevant tag content from the English version of the
    HTML page, translate it into German, Spanish, Hindi, and Tamil, and then create
    new HTML pages with the translated content included. To execute the solution,
    we created an Amazon SageMaker Jupyter notebook instance, assigned the IAM permissions
    for Amazon Translate to the notebook instance, cloned the GitHub repository for
    this chapter, and then walked through the solution by executing the code blocks
    one cell at a time. Finally, we displayed the HTML pages containing the translated
    content in the notebook for reviewing purposes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你设计了一个使用Amazon Translate的解决方案，利用Python HTML解析器从英文版本的HTML页面中提取相关标签内容，将其翻译成德语、西班牙语、印地语和泰米尔语，然后生成包含翻译内容的新HTML页面。为了执行该解决方案，我们创建了一个Amazon
    SageMaker Jupyter笔记本实例，并为该笔记本实例分配了Amazon Translate的IAM权限，克隆了本章的GitHub代码库，并通过逐个执行代码块的方式演示了解决方案。最后，我们在笔记本中展示了包含翻译内容的HTML页面以供审阅。
- en: 'In the next chapter, we will look at an interesting use case, as well as an
    important application of NLP: building conversational interfaces using chatbots
    to work with a document''s contents and provide this as a self-help tool for consumers.
    We will use **LiveRight Holdings** again to illustrate this use case, while specifically
    addressing the needs of the mortgage department officers who conduct homebuyer
    research for design product offerings. As we did in this chapter, we will introduce
    the use case, discuss how to design the architecture, establish the prerequisites,
    and walk through the various steps required to build the solution.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一个有趣的用例，以及NLP的一个重要应用：使用聊天机器人构建与文档内容交互并为消费者提供自助工具的会话界面。我们将再次以**LiveRight
    Holdings**为例，具体讨论贷款部门的需求，他们进行房屋买家研究以设计产品提供方案。与本章类似，我们将介绍用例，讨论架构设计，确立前提条件，并逐步介绍构建解决方案所需的各个步骤。
- en: Further reading
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要了解本章涉及的主题更多信息，请查看以下资源：
- en: '*Translating your website or application automatically with Amazon Translate
    in your CI/CD pipeline*, by Carlos Afonso ([https://aws.amazon.com/blogs/machine-learning/translating-your-website-or-application-automatically-with-amazon-translate-in-your-ci-cd-pipeline/](https://aws.amazon.com/blogs/machine-learning/translating-your-website-or-application-automatically-with-amazon-translate-in-your-ci-cd-pipeline/))'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在CI/CD流水线中使用Amazon Translate自动翻译您的网站或应用程序*，作者是Carlos Afonso ([https://aws.amazon.com/blogs/machine-learning/translating-your-website-or-application-automatically-with-amazon-translate-in-your-ci-cd-pipeline/](https://aws.amazon.com/blogs/machine-learning/translating-your-website-or-application-automatically-with-amazon-translate-in-your-ci-cd-pipeline/))'
- en: '*Customizing your machine translation using Amazon Translate Active Custom
    Translation*, by Watson Srivathsan and Xingyao Wang ([https://aws.amazon.com/blogs/machine-learning/customizing-your-machine-translation-using-amazon-translate-active-custom-translation/](https://aws.amazon.com/blogs/machine-learning/customizing-your-machine-translation-using-amazon-translate-active-custom-translation/))'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Amazon Translate Active Custom Translation自定义机器翻译*，作者是Watson Srivathsan和Xingyao
    Wang ([https://aws.amazon.com/blogs/machine-learning/customizing-your-machine-translation-using-amazon-translate-active-custom-translation/](https://aws.amazon.com/blogs/machine-learning/customizing-your-machine-translation-using-amazon-translate-active-custom-translation/))'
- en: '*Translate Text Between Languages in the Cloud* ([https://aws.amazon.com/getting-started/hands-on/translate-text-between-languages-cloud/](https://aws.amazon.com/getting-started/hands-on/translate-text-between-languages-cloud/))'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在云中翻译语言文本* ([https://aws.amazon.com/getting-started/hands-on/translate-text-between-languages-cloud/](https://aws.amazon.com/getting-started/hands-on/translate-text-between-languages-cloud/))'
- en: '*Translate video captions and subtitles using Amazon Translate*, by Siva Rajamani
    and Raju Penmatcha (https://aws.amazon.com/blogs/machine-learning/translate-video-captions-and-subtitles-using-amazon-translate/)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Amazon Translate翻译视频字幕*，作者是Siva Rajamani和Raju Penmatcha (https://aws.amazon.com/blogs/machine-learning/translate-video-captions-and-subtitles-using-amazon-translate/)'
- en: '*The World Is Flat* ([https://www.amazon.com/World-Flat-History-Twenty-first-Century/dp/0374292884](https://www.amazon.com/World-Flat-History-Twenty-first-Century/dp/0374292884))'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*世界是平的* ([https://www.amazon.com/World-Flat-History-Twenty-first-Century/dp/0374292884](https://www.amazon.com/World-Flat-History-Twenty-first-Century/dp/0374292884))'
