- en: Deploying TensorFlow Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署TensorFlow模型
- en: In this chapter, we will discuss the TensorFlow framework. Initially. We will
    begin by describing how the various approaches for building the algorithms differ.
    We will also cover deep learning and how to train neural networks but, more importantly,
    you will learn how to use pre-trained neural networks in the application and where
    you can find them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论TensorFlow框架。首先，我们将描述构建算法的各种方法如何不同。我们还将介绍深度学习及如何训练神经网络，但更重要的是，你将学习如何在应用中使用预训练的神经网络，以及如何找到它们。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Approaches for building algorithms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建算法的方法
- en: Why neural networks?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么是神经网络？
- en: Repositories for pre-trained TensorFlow models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预训练TensorFlow模型的代码库
- en: An example of image captioning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像标题的示例
- en: Technical Requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: AWS subscription
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS订阅
- en: Python 3.6
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: AWS CLI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: Serverless framework
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架
- en: You can find all the codes at [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)找到所有代码。
- en: Approaches for building algorithms
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建算法的方法
- en: 'The various approaches for building algorithms are :'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构建算法的各种方法是：
- en: First of all, there are deterministic algorithms that are very transparent and
    predictable, but it may be very difficult to build a custom algorithm for complex
    tasks, which will work in all cases.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，有确定性算法，它们非常透明和可预测，但对于复杂任务而言，构建一个能够在所有情况下都有效的自定义算法可能非常困难。
- en: Next, there's the machine learning technique, where we train the model based
    on features we get from data. We don't need a lot of data to train models in a
    reliable way, but we need to make a separate process for training validation and
    testing.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是机器学习技术，在这种方法中，我们根据从数据中获得的特征来训练模型。我们不需要大量的数据来可靠地训练模型，但我们需要为训练验证和测试创建一个单独的过程。
- en: Finally, there's the deep learning approach, where we train our own neural networks.
    The main advantage of this is that we can use raw data without predefined features.
    The downside is that we need a lot of data and a lot of computing resources for
    training.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后是深度学习方法，在这种方法中，我们训练自己的神经网络。其主要优点是我们可以使用原始数据，而不需要预定义的特征。缺点是我们需要大量的数据和计算资源来进行训练。
- en: 'The machine learning approach varies greatly from the classic approach. The
    classic approach uses rules and data as input and answers as output. In the machine
    learning approach, we use data and answers as input and we produce rules as output,
    as shown here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习方法与经典方法有很大的不同。经典方法使用规则和数据作为输入，答案作为输出。而在机器学习方法中，我们使用数据和答案作为输入，输出的是规则，如下所示：
- en: '![](img/4a39a3c2-c246-4aea-8d6d-3d1c0c931b82.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a39a3c2-c246-4aea-8d6d-3d1c0c931b82.png)'
- en: Let's look into why neural networks have become so popular in recent years.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为什么神经网络在近年来变得如此流行。
- en: Why neural networks?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么是神经网络？
- en: 'The reasons why neural networks have become popular in recent years are as
    follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络在近年来变得流行的原因如下：
- en: Computing resources have become a lot cheaper now compared to the prices in
    the past. With the introduction of a public cloud, it became extremely easy and
    affordable to use these resources at scale.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与过去的价格相比，计算资源现在变得便宜得多。随着公共云的引入，使用这些资源进行大规模运作变得异常简单且经济实惠。
- en: The machine learning approach requires a lot of data and, right now, there's
    a lot of public and private data that can be used for training.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习方法需要大量数据，而且现在有大量的公共和私人数据可以用于训练。
- en: Advanced algorithms were allowed to make and train more complex neural networks.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先进的算法使得可以构建和训练更复杂的神经网络。
- en: Let's discuss why we actually don't need to train neural networks to successfully
    use them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下为什么我们实际上不需要训练神经网络也能成功使用它们。
- en: Pre-trained networks
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预训练的网络
- en: Although training neural networks may require large processing power and a lot
    of data, deploying them can be done using a simple CPU. In this way, we can say
    that deploying a deep learning model is close to using an external library in
    your code. Secondly, there's a large community of people and companies that open
    source their pre-trained neural networks, which means that you can freely use
    them.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然训练神经网络可能需要大量的计算能力和数据，但部署神经网络可以通过简单的CPU来完成。这样，我们可以说，部署一个深度学习模型几乎和在代码中使用外部库一样简单。其次，有一个庞大的社区，很多人和公司将他们预训练的神经网络开源，这意味着你可以自由使用它们。
- en: 'There are two instances where using pre-trained neural networks can be extremely
    convenient:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预训练神经网络有两个场景非常方便：
- en: The first case is when your task has already been solved. For example, if you
    want to conduct image captioning with *X* classification, then you can use already
    existing neural networks.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种情况是当你的任务已经解决时。例如，如果你想进行图像描述并进行*X*分类，你可以使用已经存在的神经网络。
- en: The second case is when your task is fairly different from what has been done
    but it's close. Then, you can use pre-trained models to generate features that
    you can use later with deterministic or simple machine learning models.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种情况是当你的任务与已做的任务差别不大，但又有所不同时。然后，你可以使用预训练模型生成特征，稍后可以结合确定性方法或简单的机器学习模型使用这些特征。
- en: Majority of the pre-trained models use TensorFlow and therefore it currently
    is the most popular framework for deep learning. It has a very large community
    of people and a lot of people share the models they've trained. Most companies
    that are using neural networks in their production environment are using the TensorFlow
    framework. We will, therefore, learn the use of TensorFlow for the pre-trained
    models through an example in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数预训练模型使用TensorFlow，因此它目前是深度学习中最流行的框架。它拥有一个庞大的社区，很多人分享他们训练的模型。大多数在生产环境中使用神经网络的公司都在使用TensorFlow框架。因此，我们将在下一部分通过一个示例学习如何使用TensorFlow进行预训练模型的应用。
- en: Simple TensorFlow example
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的TensorFlow示例
- en: 'One of the great use cases for showing the power of deep learning is the **MNIST**
    (short for **Modified National Institute of Standards and Technology**) dataset.
    It consists of black and white pictures with handwritten digits, as shown in the
    following image:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 展示深度学习强大能力的一个典型案例是**MNIST**（**修改版美国国家标准与技术研究所数据集**）数据集。它由黑白图像和手写数字组成，如下图所示：
- en: '![](img/95d0fd34-71dd-42a5-bfd9-792414a009ef.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95d0fd34-71dd-42a5-bfd9-792414a009ef.png)'
- en: Each image is labeled based on the digit that's written on the image. The task,
    in this case, is to predict the label based on the image. This kind of task is
    very difficult to implement using deterministic methods; as you can see in the
    preceding image, there are a lot of different ways of writing the same number.
    Therefore, you can't use a single template for prediction.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每张图像都根据图像上写的数字进行标注。在这种情况下，任务是根据图像预测标签。使用确定性方法实现这种任务非常困难；正如你在前面的图像中看到的，写同一个数字有很多不同的方式。因此，你不能使用单一模板进行预测。
- en: Training for MNIST
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MNIST的训练
- en: 'In this section, we''ll discuss model training for MNIST:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论MNIST的模型训练：
- en: First, we start with importing the `tensorflow` library. For this example, we'll
    use the Keras deep learning framework, which makes it easy to set up layers for
    the neural network. In simple terms, Keras acts as a wrapper on top of TensorFlow,
    so everything is still based on TensorFlow.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们开始导入`tensorflow`库。在这个示例中，我们将使用Keras深度学习框架，它使得设置神经网络的层变得简单。简单来说，Keras是TensorFlow之上的一个封装，因此一切仍然是基于TensorFlow的。
- en: 'Next, we need to load data and present it in a binary format since the original
    image pixel values are 0 and 255\. We''ll also divide the dataset into training
    and test sets. This will allow us to measure the performance of the neural network.
    A good practice for the machine learning approach is to train the model on the
    training dataset and measure the final score on the test dataset. It enables us
    to be sure that the model doesn''t see data points on which it''ll be measured
    after training. We''ll see the explanation as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要加载数据并以二进制格式呈现它，因为原始图像的像素值为0和255。我们还将把数据集分为训练集和测试集。这将允许我们衡量神经网络的性能。机器学习方法的一个好习惯是，在训练数据集上训练模型，并在测试数据集上衡量最终得分。这可以确保模型在训练后不会看到它将被评估的数据点。接下来我们将看到具体的解释：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we need to set up the layers for our neural network. Basically, each layer
    consists of a number of neurons and an activation function. In this case, the
    first layer tries to get more useful data out of the raw data. The second layer
    tries to use this data to assign the probability of the image being one of 10
    digits.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的神经网络设置各个层。基本上，每一层由若干个神经元和一个激活函数组成。在这个例子中，第一层试图从原始数据中提取更多有用的数据。第二层则试图利用这些数据来为图像是否为10个数字中的一个分配概率。
- en: 'As part of the  model, you need to choose three parameters for the training
    process:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为模型的一部分，您需要选择三个参数来进行训练过程：
- en: First is the `loss` function, which the network will use to optimize its performance.
    The training process basically consists of decreasing the value of the `loss`
    function and trying to find weights for the neural network, so the `loss` function
    will be minimal.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先是`loss`函数，神经网络将使用它来优化性能。训练过程基本上就是通过减少`loss`函数的值，并试图为神经网络找到最优的权重，使得`loss`函数的值最小。
- en: Next is the `optimizer`, which handles how the neural network will iterate towards
    the most optimal solution, and how it'll change weights after each iteration.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是`optimizer`，它处理神经网络如何向最优解迭代，以及每次迭代后如何更新权重。
- en: 'Finally, `metrics` allows us to measure neural network performance over the
    dataset. For example, `accuracy` allows us to understand which part of the dataset
    was correctly classified. This metric doesn''t participate in the training process
    directly and mainly allows us to understand whether network performance has improved
    or not. We can  understand the preceding explanation from the following code:'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`metrics`允许我们在数据集上衡量神经网络的性能。例如，`accuracy`帮助我们理解数据集中哪些部分被正确分类。这个度量不会直接参与训练过程，主要帮助我们理解网络性能是否有所提升。我们可以通过以下代码来理解前面的解释：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once everything is set up, we can just run training on the training part of
    our dataset. It may take several minutes, depending on the configurations of your
    computer. After that, we can evaluate model performance and the test set. Our
    model will produce something around 97% accuracy/test set, which is very impressive,
    and as demonstrated, it can be achieved with even a simple neural network as shown
    in the code below:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切设置好后，我们只需要在训练数据集上进行训练。这可能需要几分钟，具体取决于您计算机的配置。之后，我们可以评估模型在测试集上的表现。我们的模型将达到大约97%的准确率/测试集，这非常令人印象深刻，正如演示所示，即使是一个简单的神经网络，也能通过如下代码实现这一点：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, once the neural network has been trained, we can save it so that we
    can use it later. As you can see, it''s a pretty simple process. The model file
    will contain the model architecture, a key composition of layers, the layer''s
    weights and training configuration, and the optimizer state, which allows us to
    continue training on the already trained model:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，一旦神经网络被训练好，我们可以保存它，以便以后使用。如您所见，这是一个非常简单的过程。模型文件将包含模型架构、层的组成、层的权重和训练配置，以及优化器的状态，这些都可以帮助我们在已经训练的模型上继续训练：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's discuss the available files. There's only one Python file, the `testMNIST.py`
    file, which we're about to run. In this file, we can see the parts that we've
    discussed, which include data transformation, model installation, model training,
    model evaluation, model export, and model import.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下可用的文件。这里只有一个Python文件，就是我们将要运行的`testMNIST.py`文件。在这个文件中，我们可以看到我们讨论过的部分，包括数据转换、模型安装、模型训练、模型评估、模型导出和模型导入。
- en: 'Now, let''s run the `testMNIST.py` file in the command line to see the results. By
    running the code, we can see the process of training, which happens in epochs.
    This kind of neural network doesn''t require a GPU to train and we can achieve
    very good results, even on the CPU:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在命令行中运行`testMNIST.py`文件来查看结果。通过运行代码，我们可以看到训练过程，它是以“epoch”为单位进行的。这种神经网络不需要GPU进行训练，即使在CPU上也可以取得非常好的结果：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see in the following screenshot, we achieved 97% accuracy with just
    two epochs and were able to successfully export and import the model. We can see
    the exported retrained model, which can now be used in different code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在下方的截图中所看到的，我们只用了两个epoch就达到了97%的准确率，并成功导出了并导入了模型。我们可以看到导出的重新训练的模型，现在可以在不同的代码中使用：
- en: '![](img/01018366-1582-48f2-9652-a36763e05cc8.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01018366-1582-48f2-9652-a36763e05cc8.png)'
- en: .In the next section, we talk about the repositories for pre-trained TensorFlow
    models.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将讨论预训练TensorFlow模型的代码库。
- en: Repositories for pre-trained TensorFlow models
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预训练的 TensorFlow 模型仓库
- en: 'The pre-trained models are pretty skilled when it comes to import and export.
    In a nutshell, declaring deployment consists of importing the trained model and
    transforming input data into the format that''s acceptable by the neural network.
    There are certain things that you need to keep in mind during deployment:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 预训练模型在导入和导出方面非常有能力。简而言之，部署声明包括导入训练好的模型并将输入数据转化为神经网络能够接受的格式。在部署过程中，有一些事情需要牢记：
- en: The model can be pretty large, for example, hundreds of megabytes, which makes
    deployment more difficult.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型可能非常大，例如，可能达到数百兆字节，这使得部署变得更加困难。
- en: We need to keep versions of the model and track their performance. If you train
    the model by yourself, you might need to update the model based on changes in
    incoming data or if you find better architecture.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要保持模型的版本并跟踪其性能。如果你自己训练模型，可能需要根据输入数据的变化或发现更好的架构来更新模型。
- en: Some models require additional files that translate predicted numbers or values
    into meaningful information.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些模型需要额外的文件，将预测的数字或值转换为有意义的信息。
- en: TensorFlow repository
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow 仓库
- en: TensorFlow has five main repositories with a number of selected models. They're
    a bit established and it's very easy to use them with the TensorFlow framework.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 有五个主要的仓库，包含多个精选的模型。它们已经有些成熟，并且非常容易与 TensorFlow 框架一起使用。
- en: 'For more information on the most popular models that are trained using TensorFlow,
    visit this site: [https://github.com/tensorflow/models](https://github.com/tensorflow/models).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于使用 TensorFlow 训练的最受欢迎模型的信息，请访问此网站：[https://github.com/tensorflow/models](https://github.com/tensorflow/models)。
- en: 'The different examples for the repositories are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 各个仓库的不同示例如下：
- en: Image to text models, which allow what's happening on the image to be described
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像到文本模型，可以将图像上的内容进行描述
- en: Image captioning, which classifies the image
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像标题生成，它对图像进行分类
- en: Deep speech, which allows speech to be recognized
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Deep speech，它可以识别语音
- en: Text summarization, which allows you to make a summary of the text article
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本摘要，它可以将文章内容进行总结
- en: Vid2depth, which produces a depth map based on the video stream
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vid2depth，它基于视频流生成深度图
- en: TensorFlow Hub
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow Hub
- en: There's the TensorFlow Hub hosting platform, which was specifically designed
    for neural networks. TensorFlow Hub has a lot of great models that are free to
    use and are mainly trained by Google. They're good and are of state-of-the-art
    quality. The advantage of TensorFlow Hub is that the models are checked before
    they're added and the disadvantage is that it has a high barrier for entry submissions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个专门为神经网络设计的 TensorFlow Hub 托管平台。TensorFlow Hub 拥有许多优秀的模型，这些模型可以免费使用，并且主要由
    Google 训练。它们质量很好，属于最先进的技术水平。TensorFlow Hub 的优势是，在添加模型之前会对其进行检查，而劣势则是它的提交门槛较高。
- en: 'TensorFlow Hub for different models can be viewed at the following link: [https://tfhub.dev/](https://tfhub.dev/).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不同模型的 TensorFlow Hub 可通过以下链接查看：[https://tfhub.dev/](https://tfhub.dev/)。
- en: GitHub
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub
- en: GitHub is considered the largest repository of open source code. There are countless
    models that are published there but, since there's no entry filter, you'll need
    to be more cautious about using these models in production. The advantage of GitHub
    is that it has a low barrier for entry and the disadvantages are that it may be
    difficult to find a relevant model and the user needs to check how the model works
    before deployment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 被认为是最大的开源代码仓库。那里发布了无数的模型，但由于没有入门过滤机制，你在生产环境中使用这些模型时需要更加小心。GitHub 的优点是入门门槛低，缺点是可能很难找到相关模型，并且用户需要在部署之前检查模型的工作原理。
- en: In this next section, we learn about Image captioning through an example.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们通过一个示例来学习图像标题生成。
- en: Image captioning example
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像标题生成示例
- en: Image captioning is a task where we need to recognize an object on the image.
    Although it sounds simple, it was considered one of the most difficult problems
    in computer vision since it was close to impossible to make a separate detector
    for each type of object. The main way to test the image captioning algorithm is
    to run it on the ImageNet dataset. The ImageNet dataset consists of 14 million
    images with over 20,000 labels. It was introduced in 2010\. Every year, there's
    a competition of different models, and accuracy has significantly improved in
    recent years due to the introduction of complex neural networks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图像标注是一个任务，我们需要识别图像中的物体。虽然听起来很简单，但它一直被认为是计算机视觉中最困难的问题之一，因为为每种物体类型制作一个单独的检测器几乎是不可能的。测试图像标注算法的主要方法是将其应用于
    ImageNet 数据集。ImageNet 数据集包含 1400 万张图像和超过 20,000 个标签。它于 2010 年推出，每年都会有不同模型的竞赛，近年来由于复杂神经网络的引入，准确率显著提高。
- en: There are a number of different models with different architectures that successfully
    work with ImageNet. We'll see that errors significantly decreased over the years.
     The following diagram shows a change in the error rate of winner models in the ImageNet dataset.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的模型和架构能够成功地与 ImageNet 一起工作。我们将看到，随着时间的推移，错误率显著下降。下图展示了 ImageNet 数据集中获胜模型的错误率变化。
- en: '![](img/2a33ec83-dd5a-4b2c-9c9f-0649c94e1cae.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a33ec83-dd5a-4b2c-9c9f-0649c94e1cae.png)'
- en: We'll now discuss Inception v3, which we'll use in the code sample later.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在来讨论 Inception v3，它将在稍后的代码示例中使用。
- en: Inception v3
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Inception v3
- en: Inception v3 was introduced by Google and achieved an error rate of 3.46%. You'll
    see that Inception v3 is significantly more complex. It also takes more resources
    to train this model, but the upside here is that we don't have to train it to
    use it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Inception v3 是由 Google 提出的，并且达到了 3.46% 的错误率。你会发现 Inception v3 显著更复杂。它也需要更多的资源来训练这个模型，但这里的好处是我们不需要训练它就可以使用它。
- en: We'll look into what we'll need to start using Inception v3 in our code. The
    model consists of layers and weight values present in `classify_image_graph_def.pb`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看使用 Inception v3 时我们需要什么。模型由 `classify_image_graph_def.pb` 文件中存在的层和权重值组成。
- en: We also have a list of labels, which the model can predict in  `imagenet_2012_challenge_label_map_proto.pbtxt`file
    and a document that allows the mapping of results of the neural network to the
    labels in`imagenet_synset_to_human_label_map``.txt`file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还拥有一份标签列表，模型可以在 `imagenet_2012_challenge_label_map_proto.pbtxt` 文件中预测这些标签，并且有一个文档允许将神经网络的结果映射到
    `imagenet_synset_to_human_label_map.txt` 文件中的标签。
- en: 'Here''s an example of the Panda image. First, we receive the IDs that score.
    The highest score means that the model has high confidence in the image having
    this label. After mapping IDs to label names, we can see that the model correctly
    detected Panda. The following screenshot explains this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个熊猫图像的例子。首先，我们接收得分的 ID。最高的得分意味着模型对图像具有该标签的高信心。将 ID 映射到标签名称后，我们可以看到模型正确地检测到了熊猫。以下截图解释了这一点：
- en: '![](img/579bdbe1-1e38-4c17-9929-b7c3ca5ffd7b.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/579bdbe1-1e38-4c17-9929-b7c3ca5ffd7b.png)'
- en: TensorFlow code for Inception v3
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Inception v3 的 TensorFlow 代码
- en: 'Now, let''s see how the code for any Inception v3 model will look like:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看任何 Inception v3 模型的代码是怎样的：
- en: First, we need to set up a TensorFlow session. A session is an environment in
    which tensors are evaluated.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要设置一个 TensorFlow 会话。会话是一个环境，在其中张量会被评估。
- en: We need to read and set up our neural network by loading it from the file.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要通过从文件中加载神经网络来读取并设置它。
- en: Next, we need to ask for our image in the format that'll be readable by the
    neural network.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要以神经网络能够读取的格式请求图像。
- en: 'We will need to run a power model and receive a list of row predictions, and
    transform these predictions into actual label values, as shown in the following
    code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要运行一个强大的模型并接收一系列行预测，然后将这些预测转化为实际的标签值，如下代码所示：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Running the code
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行代码
- en: Let's look at the available files, `inputimage.png` and `testinception.py`,
    which we're about to run. In this example, we'll be using the Panda image (`inputimage.png`).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看可用的文件，`inputimage.png` 和 `testinception.py`，我们即将运行这些文件。在这个例子中，我们将使用熊猫图像（`inputimage.png`）。
- en: 'As shown in the following code, there''s the `NodeLookup` class, which will
    help us to translate responses from the model to the label name:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下代码所示，存在 `NodeLookup` 类，它将帮助我们将模型的响应转换为标签名称：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code shows how we can read the image:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码展示了我们如何读取图像：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, this is the code that tells how we import the pre-trained model:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，这是导入预训练模型的代码：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we exchange the model:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们更换了模型：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we translate the results of the model:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们翻译模型的结果：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we can run the code and see the response. As you can see from the following
    output, the model successfully detected a panda on the image. The code will run
    fast since there''s no training involved. You can try the code on different images
    and get a sense of the possibilities of this model:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以运行代码并查看响应。从以下输出中可以看出，模型成功检测到了图片中的熊猫。由于不涉及训练，代码运行非常快。你可以在不同的图片上尝试此代码，体验一下该模型的潜力：
- en: '![](img/ab937d37-75f1-4fa0-8744-75b06c873bd5.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab937d37-75f1-4fa0-8744-75b06c873bd5.png)'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we studied different approaches for building algorithms. We
    discussed how to train TensorFlow models and repositories for pre-trained Tenserflow
    models. We also learned about image captioning using an Inception v3 TensorFlow
    example.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们研究了构建算法的不同方法。我们讨论了如何训练 TensorFlow 模型以及预训练 TensorFlow 模型的存储库。我们还了解了如何使用
    Inception v3 TensorFlow 示例进行图像描述。
- en: In the next chapter, we'll learn how to work with TensorFlow AWS Lambda, where
    we'll learn more about using TensorFlow models with AWS Lambda.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 TensorFlow AWS Lambda，在那里我们将进一步了解如何在 AWS Lambda 上使用 TensorFlow
    模型。
