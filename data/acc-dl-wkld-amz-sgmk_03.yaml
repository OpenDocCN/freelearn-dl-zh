- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Managing SageMaker Development Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 SageMaker 开发环境
- en: In previous chapters, we learned about the fundamental components and capabilities
    of Amazon SageMaker. By now, you know how to build and deploy your first simple
    models on SageMaker. In many more complex cases, however, you will need to write,
    profile, and test your DL code before deploying it to SageMaker-managed training
    or hosting clusters. Being able to perform this action locally while mocking SageMaker
    runtime will shorten development cycles and will avoid any unnecessary costs associated
    with provisioning SageMaker resources for development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了 Amazon SageMaker 的基本组件和功能。到现在为止，你已经知道如何在 SageMaker 上构建和部署第一个简单的模型。然而，在许多更复杂的情况下，你需要在将代码部署到
    SageMaker 管理的训练或托管集群之前，编写、分析和测试你的深度学习（DL）代码。能够在本地执行这一操作，同时模拟 SageMaker 运行时，将缩短开发周期，并避免为开发提供
    SageMaker 资源所带来的不必要成本。
- en: In this chapter, we will explore how to organize your development environment
    to effectively develop and test your DL models for SageMaker. This chapter includes
    considerations for choosing your IDE software for development and testing, as
    well as simulated SageMaker runtimes on your local machine. We will also provide
    an overview of available SDKs and APIs to manage your SageMaker resources.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何组织你的开发环境，以便有效地为 SageMaker 开发和测试你的 DL 模型。本章包括选择 IDE 软件进行开发和测试的注意事项，以及如何在本地机器上模拟
    SageMaker 运行时环境。我们还将概述用于管理 SageMaker 资源的可用 SDK 和 API。
- en: 'These topics will be covered in the following sections:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下主题将在后续章节中进行讲解：
- en: Selecting a development environment for SageMaker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 SageMaker 选择开发环境
- en: Debugging SageMaker code locally
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地调试 SageMaker 代码
- en: After reading this chapter, you will be able to set up an efficient development
    environment compatible with SageMaker, based on your specific use case requirements.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你将能够根据特定的使用案例要求，设置与 SageMaker 兼容的高效开发环境。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you can use code walk-through samples, so you can develop
    practical skills. Full code examples are available here: [https://github.com/PacktPublishing/Accelerate-Deep-Learning-Workloads-with-Amazon-SageMaker/blob/main/chapter3/](https://github.com/PacktPublishing/Accelerate-Deep-Learning-Workloads-with-Amazon-SageMaker/blob/main/chapter3/).
    To follow along with this code, you will need to have the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你可以通过代码示例进行演练，从而培养实际技能。完整的代码示例可以在这里找到：[https://github.com/PacktPublishing/Accelerate-Deep-Learning-Workloads-with-Amazon-SageMaker/blob/main/chapter3/](https://github.com/PacktPublishing/Accelerate-Deep-Learning-Workloads-with-Amazon-SageMaker/blob/main/chapter3/)。为了跟随这些代码，你需要具备以下条件：
- en: An AWS account and be an IAM user with permission to manage Amazon SageMaker
    resources.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有 AWS 账户，并且是具有管理 Amazon SageMaker 资源权限的 IAM 用户。
- en: Have Docker and Docker Compose installed on your local machine. If your development
    environment has a GPU device, you will need to install `nvidia-docker` ([https://github.com/NVIDIA/nvidia-docker](https://github.com/NVIDIA/nvidia-docker)).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地机器上安装 Docker 和 Docker Compose。如果你的开发环境中有 GPU 设备，你还需要安装 `nvidia-docker` ([https://github.com/NVIDIA/nvidia-docker](https://github.com/NVIDIA/nvidia-docker))。
- en: Have Conda installed ([https://docs.conda.io/en/latest/](https://docs.conda.io/en/latest/)).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Conda ([https://docs.conda.io/en/latest/](https://docs.conda.io/en/latest/))。
- en: Selecting a development environment for SageMaker
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 SageMaker 选择开发环境
- en: The choice of development environment and IDE is typically driven by personal
    preferences or corporate policies. SageMaker being a cloud platform doesn’t restrict
    you from using an IDE of your choice. You can run an IDE on your local machine
    or cloud machine (such as Amazon EC2). SageMaker also provides a set of SDKs and
    packages to simulate SageMaker runtime environments, so you can first test your
    code using local mocks before deploying anything to the cloud.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境和 IDE 的选择通常由个人偏好或公司政策驱动。由于 SageMaker 是一个云平台，它不会限制你使用任何你选择的 IDE。你可以在本地机器或云机器（例如
    Amazon EC2）上运行 IDE。SageMaker 还提供了一套 SDK 和软件包，用于模拟 SageMaker 运行时环境，这样你可以在将任何代码部署到云端之前，先在本地模拟环境中测试代码。
- en: With advances in data science, and machine learning specifically, a new type
    of development runtime environment has evolved – **interactive notebooks**, namely
    **Jupyter Notebooks** and **JupyterLab** (the next generation of Jupyter Notebooks
    with additional development capabilities such as code debugging). While not fully
    replacing a classical IDE, notebooks have become popular because they allow you
    to explore and visualize data, and develop and share your code with others.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据科学，特别是机器学习的进步，一种新的开发运行时环境应运而生——**交互式笔记本**，即 **Jupyter Notebooks** 和 **JupyterLab**（Jupyter
    Notebooks 的下一代，具有更多开发能力，如代码调试）。虽然它们并未完全取代传统 IDE，但笔记本因其能够探索和可视化数据、开发并与他人共享代码的功能而变得流行。
- en: 'SageMaker provides several managed notebook environments:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker 提供了几种托管的笔记本环境：
- en: The **SageMaker Studio** service – a proprietary serverless notebook IDE for
    ML development
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SageMaker Studio** 服务 —— 一个专有的无服务器笔记本 IDE，用于机器学习开发'
- en: '**SageMaker notebook instances** – a managed Jupyter Notebook/JupyterLab environment'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SageMaker 笔记本实例** —— 一种托管的 Jupyter Notebook/JupyterLab 环境'
- en: All three options – a classical IDE, SageMaker notebook instances, and SageMaker
    Studio – have certain benefits and may be optimal for a specific set of scenarios.
    In the following sections, we will review IDE options in detail with their pros
    and cons as they relate to DL development.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 三种选择——传统的 IDE、SageMaker 笔记本实例和 SageMaker Studio——都有各自的优点，并且在特定场景下可能是最优的选择。在接下来的部分，我们将详细审视这些
    IDE 选项，并讨论它们在深度学习开发中的优缺点。
- en: Setting up a local environment for SageMaker
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 SageMaker 设置本地环境
- en: 'There are a number of benefits of doing your initial development locally, specifically
    the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地进行初步开发有许多好处，具体包括以下几点：
- en: You don’t incur any running costs for doing your development locally
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地进行开发时，您不会产生任何运行成本。
- en: You can choose your preferred IDE, which results in more efficient development
    cycles
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以选择自己喜欢的 IDE，从而提高开发周期的效率。
- en: However, local development runtime also has certain limitations. For instance,
    you cannot test and profile your code on different hardware devices. Getting the
    latest GPU devices designed for DL workloads can be impractical and not cost-efficient.
    That’s why, in many cases, you will do initial development and testing of your
    DL code using a CPU device to troubleshoot initial issues, and then do the final
    code profiling and tweaking on cloud instances with access to target GPU devices.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，本地开发运行时也有一定的限制。例如，您无法在不同的硬件设备上测试和分析代码。获取最新的为深度学习工作负载设计的 GPU 设备可能不切实际且成本高昂。因此，在许多情况下，您会使用
    CPU 设备进行深度学习代码的初步开发和测试，以解决初期问题，然后在访问目标 GPU 设备的云实例上进行最终的代码分析和调优。
- en: SageMaker provides a number of SDKs to allow integration between the local environment
    and the AWS cloud. Let’s do a practical example of how to configure your local
    environment to work with remote SageMaker resources.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker 提供了多个 SDK，允许在本地环境与 AWS 云之间进行集成。让我们通过一个实际例子来演示如何配置本地环境以使用远程 SageMaker
    资源。
- en: Configuring a Python environment
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Python 环境
- en: 'We start our configuration by setting up and configuring a Python environment
    with AWS integration. It’s recommended to use Conda environment management software
    to isolate your SageMaker local environment:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过设置并配置一个与 AWS 集成的 Python 环境来开始配置。建议使用 Conda 环境管理软件来隔离您的 SageMaker 本地环境：
- en: 'You can start by installing Conda on your local machine using the appropriate
    installation method (it depends on your local OS). Once Conda is installed, you
    can create a new Python environment by running the following command in your terminal
    window:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过使用适当的安装方法（取决于您的本地操作系统）在本地机器上安装 Conda。安装完成后，您可以通过在终端窗口中运行以下命令来创建一个新的 Python
    环境：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that we are explicitly specifying which version of Python interpreter to
    use in this environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在此环境中明确指定使用的 Python 解释器版本。
- en: 'Next, we switch to create an environment and install the AWS and SageMaker
    SDKs:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们切换到创建环境并安装 AWS 和 SageMaker SDK：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s review the SDKs we just installed:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下刚刚安装的 SDK：
- en: '`awscli` is an AWS CLI toolkit that allows you to programmatically work with
    any AWS service. It also provides a mechanism to store and use AWS credentials
    locally.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awscli` 是一个 AWS CLI 工具包，允许您以编程方式与任何 AWS 服务进行交互。它还提供了一个机制，用于在本地存储和使用 AWS 凭证。'
- en: '`boto3` is a Python SDK to manage your AWS resources. It uses credentials established
    by the AWS CLI toolkit to cryptographically sign any management requests and,
    thus, authenticate in AWS.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3` 是一个 Python SDK，用于管理你的 AWS 资源。它使用 AWS CLI 工具包建立的凭证，通过加密签名任何管理请求，从而在
    AWS 中进行身份验证。'
- en: '`sagemaker` – This Python SDK should be already familiar to you at this point
    of book, as we used it in previous chapters to interact with SageMaker resources
    such as training jobs or inference endpoints. Unlike `boto3`, the SageMaker SDK
    abstracts many aspects of the management of underlying resources and is generally
    recommended whenever you need to programmatically manage your SageMaker workloads.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sagemaker` – 你应该已经熟悉这个 Python SDK，因为在本书的前几章中，我们使用它与 SageMaker 资源进行交互，如训练作业或推理端点。与
    `boto3` 不同，SageMaker SDK 抽象了许多底层资源管理的方面，通常建议在你需要编程管理 SageMaker 工作负载时使用。'
- en: 'Before we proceed, we first need to configure AWS credentials. To do so, you
    will need to run the following command in your terminal and provide your AWS access
    and secret keys:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要先配置 AWS 凭证。为此，你需要在终端中运行以下命令并提供你的 AWS 访问密钥和秘密密钥：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can read the details of how to set up AWS credentials here: [https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.xhtml](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.xhtml).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里阅读有关如何设置 AWS 凭证的详细信息：[https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.xhtml](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.xhtml)。
- en: Configuring a Jupyter environment
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Jupyter 环境
- en: 'Once we have the basic Python environments configured and our AWS credentials
    established, we are ready to start the Jupyter server. In this example, we will
    use the JupyterLab environment. However, you are free to configure your own IDE
    for this purpose, as many IDEs, such as PyCharm and Visual Studio Code, support
    Jupyter notebooks via plugins or natively. The additional benefit of such an approach
    is that you can easily switch between your notebooks and training and inference
    scripts within the same IDE:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们配置好基本的 Python 环境并设置好 AWS 凭证，我们就可以启动 Jupyter 服务器了。在这个例子中，我们将使用 JupyterLab
    环境。然而，你也可以根据自己的需求配置 IDE，因为许多 IDE（如 PyCharm 和 Visual Studio Code）都支持通过插件或原生方式使用
    Jupyter Notebook。此方法的额外好处是，你可以在同一 IDE 中轻松地在笔记本和训练、推理脚本之间切换：
- en: 'To install JupyterLab and create a kernel, run the following commands in your
    terminal:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 JupyterLab 并创建内核，请在终端中运行以下命令：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we start the JupyterLab server on our machine:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在本地机器上启动 JupyterLab 服务器：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Your JupyterLab server should be now available on `http://localhost:8888`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 JupyterLab 服务器现在应该可以通过 `http://localhost:8888` 访问。
- en: Running model training on SageMaker
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 SageMaker 上运行模型训练
- en: 'In the JupyterLab instance, let’s run some tests to make sure that we can connect
    and manage SageMaker resources from our local machine:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JupyterLab 实例中，我们运行一些测试以确保能够从本地机器连接和管理 SageMaker 资源：
- en: 'The full notebook code and training script are in the `chapter3` directory
    of this book’s GitHub repository:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本书 GitHub 仓库中的 `chapter3` 目录下包含完整的笔记本代码和训练脚本：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SageMaker execution role
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker 执行角色
- en: Please note that you will need to manually define your execution role. For SageMaker
    managed environments, such as SageMaker Studio or SageMaker notebook instances,
    you can use the `get_execution_role()` method to retrieve the execution role.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你需要手动定义执行角色。对于 SageMaker 管理的环境，如 SageMaker Studio 或 SageMaker Notebook 实例，你可以使用
    `get_execution_role()` 方法来获取执行角色。
- en: 'Now, we can configure and kick off our SageMaker training the same way as before:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以像之前一样配置并启动 SageMaker 训练：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the training job is done, you can explore locally training results and
    where output artifacts have been stored:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练作业完成，你可以查看本地的训练结果以及输出的工件存储位置：
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, having a local development environment provides you with the
    flexibility to choose your preferred IDE and avoid paying for SageMaker-managed
    development environments. At the same time, it requires you to carefully manage
    your development environment, which requires specific expertise and dedicated
    efforts. Another potential challenge is the synchronization of the development
    environment between team members.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，拥有本地开发环境为你提供了选择首选 IDE 的灵活性，同时避免了为 SageMaker 管理的开发环境付费。与此同时，它要求你仔细管理开发环境，这需要特定的专业知识和投入的努力。另一个潜在挑战是团队成员之间开发环境的同步。
- en: Using SageMaker Notebook instances
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 SageMaker Notebook 实例
- en: SageMaker notebook instances are managed by an AWS Jupyter environment running
    on top of EC2 instances. You can choose an instance type from a list of CPU and
    GPU-based instances. SageMaker provides a number of preconfigured Jupyter kernels
    with Python runtimes. It includes preconfigured runtimes with versions of PyTorch,
    TensorFlow, MXNet, and other popular DL and ML frameworks. You can also customize
    existing kernels (for instance, install new packages) or create fully custom kernels
    using Conda environment management.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker 笔记本实例由一个运行在 EC2 实例上的 AWS Jupyter 环境管理。你可以从基于 CPU 和 GPU 的实例列表中选择实例类型。SageMaker
    提供了多个预配置的 Jupyter 内核，支持 Python 运行时。它包括预配置的运行时，支持 PyTorch、TensorFlow、MXNet 和其他流行的深度学习和机器学习框架。你还可以自定义现有内核（例如，安装新软件包）或使用
    Conda 环境管理创建完全自定义的内核。
- en: Since a Jupyter environment runs directly on top of an EC2 instance, you can
    directly observe resource consumption during local training or inference (for
    example, by monitoring the `nvidia-smi` utility output). You can also run Docker
    operations such as building custom containers and testing them using SageMaker
    local mode, which we will discuss in detail in the *Debugging SageMaker code locally*
    section of this chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Jupyter 环境直接运行在 EC2 实例上，你可以在本地训练或推理时直接观察资源消耗（例如，通过监控 `nvidia-smi` 工具输出）。你还可以执行
    Docker 操作，如构建自定义容器并使用 SageMaker 本地模式进行测试，我们将在本章的 *本地调试 SageMaker 代码* 部分中详细讨论。
- en: 'There are scenarios when using notebook instances can be beneficial, such as
    the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景下，使用笔记本实例可能会带来好处，例如以下情况：
- en: You need to have access to a specific type of hardware to test and debug your
    model (for example, finding max training throughput without running into OOM issues)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要访问特定类型的硬件来测试和调试模型（例如，寻找最大训练吞吐量，而不遇到 OOM 问题）
- en: You want to baseline your model performance locally for a specific combination
    of hyperparameters and hardware before deploying to a remote environment
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将模型部署到远程环境之前，你希望在本地为特定的超参数组合和硬件基准化模型性能
- en: One downside of notebook instances is the lack of flexibility. You cannot change
    your instance type quickly if your hardware requirements have changed. That may
    lead to unnecessary costs when you have a combination of tasks with different
    resource requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本实例的一个缺点是缺乏灵活性。如果硬件需求发生变化，你无法快速更改实例类型。这可能导致在任务组合中有不同资源需求时产生不必要的成本。
- en: Let’s consider a scenario where you want to locally preprocess training data
    and then debug your training script on this data. Typically, data processing is
    a CPU-bound process and doesn’t require any GPU devices. However, training DL
    morning will require a GPU device. So, you will have to provision an instance
    that satisfies the highest hardware requirements among your tasks. Alternatively,
    you will have to store your work between tasks and reprovision your notebook instance
    altogether.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要在本地预处理训练数据，并在这些数据上调试训练脚本。通常，数据处理是一个 CPU 密集型过程，不需要 GPU 设备。然而，训练深度学习模型则需要
    GPU 设备。因此，你必须为任务中最高硬件需求的部分提供一个实例。或者，你需要在任务之间存储工作并重新配置笔记本实例。
- en: SageMaker addressed this lack of elasticity in a newer product called SageMaker
    Studio notebooks. Let’s review it in detail.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker 在一个名为 SageMaker Studio 笔记本的较新产品中解决了这一弹性不足的问题。我们来详细回顾一下。
- en: Using SageMaker Studio
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SageMaker Studio
- en: '**SageMaker Studio** is a web-based interface that allows you to interact with
    various SageMaker capabilities, from visual data exploration, to Model Zoo and
    model training, to code development and endpoint monitoring. SageMaker Studio
    is intended to simplify and optimize all steps of ML development by providing
    a single environment to work and collaborate.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**SageMaker Studio**是一个基于 Web 的界面，允许你与各种 SageMaker 功能进行交互，从可视化数据探索、模型库和模型训练，到代码开发和端点监控。SageMaker
    Studio 旨在通过提供一个单一的工作和协作环境，简化和优化机器学习开发的所有步骤。'
- en: 'There are multiple capabilities within SageMaker Studio. Let’s review two specific
    capabilities relevant for DL development:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker Studio 中有多种功能。我们来回顾一下与深度学习开发相关的两项具体功能：
- en: '**Studio notebooks** allow fast access to different compute instances and runtimes
    without the need to leave your JupyterLab application'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Studio 笔记本**允许快速访问不同的计算实例和运行时，无需离开 JupyterLab 应用程序'
- en: '**SageMaker JumpStart** is a collection of prebuilt solutions and Model Zoo
    that allows you to deploy your DL solutions in a couple of clicks'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SageMaker JumpStart**是一个预构建的解决方案和模型库，允许你通过几次点击部署你的深度学习解决方案。'
- en: Next, let’s discuss these capabilities and use cases.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论这些功能和使用案例。
- en: Studio notebooks
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Studio笔记本
- en: Studio notebooks provide a fully managed JupyterLab environment with the ability
    to quickly switch between different kernels and compute instances. During the
    switch, your work is persisted in a shared filesystem automatically. A shared
    filesystem is highly available and scales seamlessly as needed. Studio notebooks
    come with a set of prebuilt kernels similar to notebook instances, which can be
    further customized. You can also create a fully custom kernel image for Studio
    notebooks.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Studio笔记本提供了一个完全托管的JupyterLab环境，可以快速在不同的内核和计算实例之间切换。在切换过程中，你的工作会自动保存在共享文件系统中。共享文件系统具有高可用性，并根据需要无缝扩展。Studio笔记本配备了一组预构建的内核，类似于笔记本实例，并且可以进一步自定义。你还可以为Studio笔记本创建一个完全自定义的内核镜像。
- en: 'You can choose a compute instance from a wide spectrum of EC2 instances, the
    latest CPU instances, and specialized GPU instances for training and inference
    tasks. Studio notebooks have access to two types of EC2 instances:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从广泛的EC2实例、最新的CPU实例以及专用的GPU实例中选择用于训练和推理任务的计算实例。Studio笔记本可以访问两种类型的EC2实例：
- en: '**Fast instances**, which allows switching within 2 minutes.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速实例**，可以在2分钟内完成切换。'
- en: '**Regular instances**, for which you need to allow around 5 minutes to start.
    Note that this is approximate timing that may be impacted by resource availability
    in a given AWS region.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常规实例**，启动大约需要5分钟。请注意，这是一个大致的时间，可能会受到特定AWS区域资源可用性的影响。'
- en: Collaborative Capabilities
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 协作功能
- en: Studio notebooks support a sharing capability that allows you to share your
    code, kernel, and instance configuration with teammates in just a few clicks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Studio笔记本支持共享功能，允许你只需几次点击便能与团队成员共享代码、内核和实例配置。
- en: 'SageMaker notebook kernels run within Docker images. As a result, there are
    several limitations:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker笔记本内核在Docker镜像中运行。因此，存在若干限制：
- en: You cannot build or run containers in your Studio notebooks
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能在Studio笔记本中构建或运行容器。
- en: Studio notebooks don’t support local mode to debug containers before deployment
    on SageMaker
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Studio笔记本不支持在部署到SageMaker之前调试容器的本地模式。
- en: AWS provides an **Image Build CLI** to circumvent this limitation and allow
    users to build custom containers while working in Studio notebooks
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS提供了**Image Build CLI**来绕过这个限制，允许用户在使用Studio笔记本时构建自定义容器。
- en: For most scenarios, Studio notebooks will be a convenient and cost-efficient
    alternative to running your own JupyterLab on an EC2 instance or using SageMaker
    notebook instances. However, you should be mindful of the constraints of Studio
    notebooks mentioned previously, and assess whether these are a dealbreaker for
    your particular use case or usage pattern. Additionally, Studio notebooks come
    as part of the SageMaker Studio platform, which provides additional benefits such
    as visual data exploration and processing, visual model monitoring, prebuilt solutions,
    UI conveniences for managing your feature stores, model building pipelines, endpoints,
    experiments, and more.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数场景下，Studio笔记本将是运行你自己的JupyterLab在EC2实例上或使用SageMaker笔记本实例的一个方便且具有成本效益的替代方案。然而，你应该留意之前提到的Studio笔记本的限制，并评估这些限制是否会影响你的特定用例或使用模式。此外，Studio笔记本是SageMaker
    Studio平台的一部分，提供了更多的额外功能，如可视化数据探索和处理、可视化模型监控、预构建解决方案、用于管理特征存储、模型构建管道、端点、实验等的UI便捷功能。
- en: SageMaker JumpStart
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SageMaker JumpStart
- en: SageMaker JumpStart is a library of prebuilt end-to-end ML and DL solutions,
    sample notebooks, and models that can be deployed on SageMaker in one click. JumpStart’s
    library of solutions and models is large and continuously growing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker JumpStart是一个预构建的端到端机器学习（ML）和深度学习（DL）解决方案库，提供可在SageMaker上一键部署的示例笔记本和模型。JumpStart的解决方案和模型库庞大并持续增长。
- en: '**JumpStart solutions** are designed for specific industry use cases, such
    as transaction fraud detection, document understanding, and predictive maintenance.
    Each solution includes multiple integrated components and once deployed can be
    immediately used by end users. Note that you will need to provide your own dataset
    to train JumpStart models.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**JumpStart 解决方案**专为特定行业用例设计，例如交易欺诈检测、文档理解和预测性维护。每个解决方案都包括多个集成组件，部署后可以立即供最终用户使用。请注意，您需要提供自己的数据集来训练
    JumpStart 模型。'
- en: '**JumpStart models** provide access to the SOTA model zoo. Depending on your
    model architecture, you may choose to immediately deploy this model to inference,
    fine-tune, train from scratch, or resume incremental training on your own dataset.
    JumpStart allows users to fully customize user actions, such as defining a size
    and instance type of training cluster, a hyperparameter of a training job, and
    the location of data.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**JumpStart 模型**提供访问 SOTA 模型库。根据您的模型架构，您可以选择立即将该模型部署到推理、进行微调、从头训练或在自己的数据集上恢复增量训练。JumpStart
    允许用户完全自定义用户操作，如定义训练集群的大小和实例类型、训练作业的超参数以及数据的位置。'
- en: Model Zoo includes models for CV and NLP tasks from TensorFlow Hub, PyTorch
    Hub, and Hugging Face models.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 模型库包括来自 TensorFlow Hub、PyTorch Hub 和 Hugging Face 的 CV 和 NLP 任务模型。
- en: SageMaker JumpStart can come in handy in scenarios when your business problem
    can be addressed using generic solutions with your proprietary data. JumpStart
    can also be a friendly introduction to DL on SageMaker or for non-technical users
    who are looking to experiment with DL on their own.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的业务问题可以通过使用通用解决方案和专有数据来解决时，SageMaker JumpStart 可以派上用场。JumpStart 还可以作为向 SageMaker
    上的深度学习（DL）友好介绍，或者适合那些希望自己尝试深度学习的非技术用户。
- en: In this section, we reviewed available development environment options for SageMaker.
    All three options come with their pros and cons, and a specific choice is largely
    driven by personal preferences and use case requirements. It’s generally a good
    idea to have both a local environment and SageMaker Studio notebooks or notebook
    instances available. This setup allows you to develop, test, and do initial debugging
    locally without paying for any cloud resources. Once your code is working locally,
    you can then easily run the same code on cloud hardware. Studio notebooks can
    be especially useful, as they allow you to easily switch between different CPU
    and GPU runtimes without leaving your Jupyter notebook, so you can experiment
    with your training config (for instance, tweak the batch size or gradient accumulation).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了 SageMaker 可用的开发环境选项。所有三个选项都有其优缺点，具体选择主要取决于个人偏好和用例需求。通常，最好同时拥有本地环境和
    SageMaker Studio 笔记本或笔记本实例。这种设置允许您在不支付任何云资源费用的情况下，本地开发、测试和进行初步调试。一旦您的代码在本地工作，您就可以轻松地在云硬件上运行相同的代码。Studio
    笔记本尤其有用，因为它们允许您轻松切换不同的 CPU 和 GPU 运行时，而无需离开 Jupyter 笔记本，因此您可以实验训练配置（例如，调整批量大小或梯度累积）。
- en: In the next section, we will focus on how to efficiently debug your SageMaker
    code locally before moving your workload to SageMaker cloud resources.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将重点介绍如何在将工作负载迁移到 SageMaker 云资源之前，高效地在本地调试 SageMaker 代码。
- en: Debugging SageMaker code locally
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地调试 SageMaker 代码
- en: To simplify code development and testing locally, SageMaker supports **local
    mode**. This mode allows you to run your training, inference, or data processing
    locally in SageMaker containers. This is particularly helpful when you want to
    troubleshoot your scripts before provisioning any SageMaker resources.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化本地代码开发和测试，SageMaker 支持 **本地模式**。此模式允许您在 SageMaker 容器中本地运行训练、推理或数据处理。当您希望在配置任何
    SageMaker 资源之前先排查脚本问题时，这尤其有帮助。
- en: Local mode is supported for all SageMaker images as well as custom SageMaker-compatible
    images. It is implemented as part of the `sagemaker` Python SDK. When running
    your jobs in local mode, the SageMaker SDK under the hood creates a Docker Compose
    YAML file with your job parameters and starts a relevant container locally. The
    complexities of configuring a Docker runtime environment are abstracted from the
    user.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SageMaker 镜像以及自定义的 SageMaker 兼容镜像都支持本地模式。它作为 `sagemaker` Python SDK 的一部分实现。当您在本地模式下运行作业时，SageMaker
    SDK 会在后台创建一个包含作业参数的 Docker Compose YAML 文件，并在本地启动相关容器。配置 Docker 运行时环境的复杂性对用户进行了抽象。
- en: 'Local mode is supported for both CPU and GPU devices. You can run the following
    types of SageMaker jobs in local mode:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本地模式支持CPU和GPU设备。你可以在本地模式下运行以下类型的SageMaker作业：
- en: Training job
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练作业
- en: Real-time endpoint
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时端点
- en: Processing job
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理作业
- en: Batch transform job
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批处理转换作业
- en: Limitations of local mode
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地模式的限制
- en: 'There are several limitations when running your SageMaker jobs locally:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地运行SageMaker作业时有一些限制：
- en: Only one local endpoint is supported.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅支持一个本地端点。
- en: Distributed local training for a GPU is not supported. However, you can run
    distributed jobs on a CPU.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持GPU的分布式本地训练。然而，你可以在CPU上运行分布式作业。
- en: EFS and FSx for Lustre are not supported as data sources.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EFS和FSx for Lustre不支持作为数据源。
- en: '`Gzip` compression, Pipe mode, or manifest files for input are not supported.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持`Gzip`压缩、管道模式或输入的清单文件。
- en: Running training and inference in local mode
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在本地模式下运行训练和推理
- en: 'Let’s train a simple model in local mode and then deploy an inference endpoint
    locally. The full notebook code and training script are in the `chapter3` directory
    of the book repository:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在本地模式下训练一个简单的模型，然后将推理端点本地部署。完整的笔记本代码和训练脚本位于书籍仓库的`chapter3`目录：
- en: 'We start by installing all required dependencies for local mode:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先安装所有本地模式所需的依赖项：
- en: '[PRE8]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then configure the SageMaker local runtime. Note that we are using the `LocalSession`
    class to let the SageMaker SDK know that we want to provision resources locally:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们配置SageMaker本地运行时。请注意，我们使用`LocalSession`类来让SageMaker SDK知道我们希望在本地配置资源：
- en: '[PRE9]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this notebook, we intend to use a public PyTorch image from the SageMaker
    ECR repository. For this, we need to store credentials so that the Docker daemon
    can pull the images. Run the following command in your notebook (you can also
    run it in your terminal window; just remove `!`):'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本笔记本中，我们打算使用来自SageMaker ECR仓库的公共PyTorch镜像。为此，我们需要存储凭证，以便Docker守护进程可以拉取镜像。在笔记本中运行以下命令（你也可以在终端窗口中运行，只需移除`!`）：
- en: '[PRE10]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we need to decide whether we will use a GPU (if available) or CPU device
    (the default choice). The following code snippet determines whether a CUDA-compatible
    device is available (the `"local_gpu"` value) and, if not, defaults to a CPU device
    (the `"local"` value):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要决定是使用GPU（如果可用）还是CPU设备（默认选择）。以下代码片段判断是否有可用的CUDA兼容设备（`"local_gpu"`值），如果没有，则默认使用CPU设备（`"local"`值）：
- en: '[PRE11]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once we define which local device to use, we configure and run a SageMaker
    training job:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们定义了使用的本地设备，我们就可以配置并运行SageMaker训练作业：
- en: '[PRE12]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The SageMaker Python SDK performs the following operations automatically:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SageMaker Python SDK会自动执行以下操作：
- en: Pulls the appropriate PyTorch image from a public ECR repository
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从公共ECR仓库拉取适当的PyTorch镜像
- en: Generates a `docker-compose.yml` file with appropriate volume mount points to
    access code and training data
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个适当的`docker-compose.yml`文件，设置合适的卷挂载点以访问代码和训练数据
- en: Starts a Docker container with the `train` command
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`train`命令启动一个Docker容器
- en: SageMaker will output the Docker Compose command and the STDOUT/STDERR of the
    training container to a Jupyter cell.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker将输出Docker Compose命令及训练容器的STDOUT/STDERR到Jupyter单元格。
- en: Debugging code inside a container
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内调试代码
- en: Many modern IDEs support debugging an application running inside a container.
    For instance, you can set a breakpoint in your training code. The code execution
    inside the container will stop so that you can inspect whether it’s executing
    correctly. Consult your IDE documentation on how to set it up.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代IDE支持调试在容器内运行的应用程序。例如，你可以在训练代码中设置断点。容器中的代码执行将停止，这样你就可以检查它是否正确执行。请查阅你的IDE文档，了解如何进行设置。
- en: After the training job has finished, let’s see how we can deploy a trained model
    to a local real-time endpoint. Note that, by default, we are training only for
    a single epoch, so don’t expect great results!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 训练作业完成后，让我们看看如何将训练好的模型部署到本地实时端点。请注意，默认情况下，我们只训练单个epoch，因此不要期望很好的结果！
- en: 'You can deploy an inference container locally just by running the `deploy()`
    method on your estimator:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在估算器上运行`deploy()`方法，将推理容器本地部署：
- en: '[PRE13]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once the endpoint is deployed, the SageMaker SDK will start sending the output
    of the model server to a Jupyter cell. You can also observe container logs in
    the Docker client UI or via the `docker logs CONTAINER_ID` terminal command.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦端点部署完成，SageMaker SDK会开始将模型服务器的输出发送到Jupyter单元格。你也可以在Docker客户端UI中或通过`docker
    logs CONTAINER_ID`终端命令观察容器日志。
- en: 'We can now send a test image and observe how our inference scripts handle an
    inference request in the Docker logs:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以发送一张测试图像，并观察推理脚本如何处理Docker日志中的推理请求：
- en: '[PRE14]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding code block, we did the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们执行了以下操作：
- en: Formed an inference payload and serialized it to `bytes` objects
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造推理有效载荷并将其序列化为`bytes`对象
- en: Formed `content-type` and `accept-type` HTTP headers to indicate to the inference
    server what type of content the client is sending and what it expects
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造了`content-type`和`accept-type` HTTP头，指示推理服务器客户端发送的内容类型以及期望的内容类型
- en: Sent a request to the local SageMaker endpoint
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向本地SageMaker端点发送请求
- en: Read the response output
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取响应输出
- en: If there are any issues, you can log in to a running inference container to
    examine the runtime environment or set up a debugging session using your IDE capabilities.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现任何问题，您可以登录到运行中的推理容器中，检查运行时环境，或使用您的IDE功能设置调试会话。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed some available solutions and best practices on
    how to organize the development of DL code for Amazon SageMaker. Depending on
    your use case requirements and personal preferences, you can choose a DIY environment
    locally or use one of SageMaker’s notebook environments – notebook instances and
    Studio notebooks. You also learned how to test SageMaker DL containers locally
    to speed up your development efforts and avoid any additional testing costs.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了一些可用的解决方案和最佳实践，讲解了如何为Amazon SageMaker组织深度学习代码的开发。根据您的使用案例需求和个人偏好，您可以选择在本地创建DIY环境，或使用SageMaker的笔记本环境之一——笔记本实例或Studio笔记本。您还学习了如何在本地测试SageMaker深度学习容器，以加速开发过程并避免额外的测试费用。
- en: In the next chapter, we will focus on data management and data processing for
    SageMaker. As many training datasets for DL problems are large and require pre-
    or post-processing, it’s crucial to understand an optimal storage solution. We
    also discuss aspects of data labeling and data processing using SageMaker capabilities,
    as well as the best practices for accessing your training data.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点介绍SageMaker的数据管理和数据处理。由于许多深度学习（DL）问题的训练数据集较大，并且需要进行预处理或后处理，因此理解最佳的存储解决方案至关重要。我们还将讨论使用SageMaker功能进行数据标注和数据处理的各个方面，以及访问训练数据的最佳实践。
