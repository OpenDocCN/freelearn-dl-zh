- en: Creating the Deep Learning API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建深度学习 API
- en: In the previous chapter we learned about working with TensorFlow on AWS Lambda.
    This chapter briefs about the RESTful API along with the AWS API Gateway. We will
    learn how to create the API Gateway using the serverless framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何在 AWS Lambda 上使用 TensorFlow。本章简要介绍了 RESTful API 和 AWS API 网关。我们将学习如何使用无服务器框架创建
    API 网关。
- en: 'In this chapter , we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: API service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 服务
- en: The AWS API Gateway
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS API 网关
- en: Creating a deep learning API project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建深度学习 API 项目
- en: Technical Requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements in this chapter are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: AWS subscription
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 订阅
- en: Python 3.6
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: AWS CLI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: Serverless framework
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架
- en: You can find all the codes at: [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在以下链接找到所有代码：[https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
- en: RESTful API
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful API
- en: The RESTful API has become extremely popular in recent years, with the rising
    popularity of macro services as a universal way to communicate between different
    services inside an application—for example, we can use RESTful API services for
    different programming languages and different hosting platforms together in a
    single application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API 近年来变得极为流行，随着宏服务的普及，它成为了应用程序内部不同服务之间沟通的通用方式——例如，我们可以在一个应用程序中，使用 RESTful
    API 服务来连接不同的编程语言和不同的托管平台。
- en: The RESTful API is an interface that allows you to communicate between different
    applications, and it can serve a lot of purposes. The RESTful API enables you
    to easily integrate different services. It also allows you to make an easy connection
    between the frontend and backend of an application, and it allows other developers
    to use your service. The deep learning API, in this context, allows you to easily
    integrate deep learning models within your application or provide other developers
    with a way to use your model. Now let's look at the API Gateway service in more
    detail.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API 是一种允许不同应用程序之间进行通信的接口，它可以服务于许多用途。RESTful API 使你可以轻松地集成不同的服务。它还允许你在应用程序的前端和后端之间建立简单的连接，并且允许其他开发者使用你的服务。在此背景下，深度学习
    API 使你能够轻松地将深度学习模型集成到你的应用中，或者为其他开发者提供一种使用你模型的方式。现在让我们更详细地了解 API 网关服务。
- en: AWS API Gateway
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS API 网关
- en: The API Gateway is a double service that allows you to create, publish, monitor,
    and secure APIs. We can connect the API Gateway not only to business Lambda but
    also to AWS EC2 instances, **Elastic Clusters** (**ECS**), or even to **Elastic
    Beanstalk** (**EBS**). It has a pay-as-you-go system, which makes it very convenient
    as a starting service. Let's look at the specific features of the API Gateway.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: API 网关是一个双重服务，它允许你创建、发布、监控和保护 API。我们不仅可以将 API 网关连接到业务 Lambda，还可以连接到 AWS EC2
    实例、**弹性集群**（**ECS**），甚至是 **弹性 Beanstalk**（**EBS**）。它采用按需付费的系统，使其成为一个非常方便的起始服务。让我们来看看
    API 网关的具体功能。
- en: Features
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'The following are some of the features of the API Gateway:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 API 网关的一些功能：
- en: '**Easy to scale**: The API service takes care of scaling, which means we do
    not have to worry as to whether this is a good way to handle peak loads, and whether
    it will over-provision resources.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于扩展**：API 服务会自动处理扩展问题，这意味着我们不需要担心它是否适合处理峰值负载，也不必担心是否会过度配置资源。'
- en: '**Traffic management**: The API Gateway has a way to control the traffic. The
    main use case in traffic management is throttling when we want to have a more
    uniform load on the backend. This is not an issue with AWS Lambda, as it can scale
    almost indefinitely.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量管理**：API 网关有一种控制流量的方式。流量管理的主要用例是节流，特别是当我们希望对后端负载进行更均匀的分配时。对于 AWS Lambda
    来说，这不是一个问题，因为它几乎可以无限扩展。'
- en: '**Authorization**: This allows you to control user access to the API. This
    means that we can either keep the API private or commercialize it. This feature
    is essential for your application.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**：这允许你控制用户对 API 的访问。这意味着我们可以将 API 保持私密，或者将其商业化。这个功能对你的应用程序至关重要。'
- en: '**Monitoring**: This feature enables us to get usage statistics at the user
    level. This is important if we want to limit users based on their usage, and if
    we need to troubleshoot our API.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：此功能使我们能够获取用户级别的使用统计信息。如果我们希望根据用户的使用情况限制他们，或者需要排除故障 API，这将非常重要。'
- en: '**Caching**: This allows you to reduce the amount of requests, which go to
    the backend by caching some of the responses. If your application has to deal
    with the load of repetitive requests, then the switch would significantly reduce
    the amount of usage at the backend.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：这可以通过缓存部分响应来减少发送到后端的请求数量。如果您的应用程序需要处理大量重复请求，那么此功能可以显著减少后端的使用量。'
- en: '**Version control**: This allows you to manage multiple versions of the API,
    which is very important for the production of the application.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：这使您可以管理 API 的多个版本，这对于应用程序的生产非常重要。'
- en: Now, let's look at the pricing of the API.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下 API 的定价。
- en: Pricing
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定价
- en: One of the main advantages of the API Gateway is its pay-as-you-go feature.
    The pricing for the service amounts to 3.5 dollars per million requests and around
    0.09 dollars per 1 GB of data transfer charges. Other optional charges may apply
    to the services that are chosen. Therefore, we need to make sure that it helps
    to reduce the cost of the backend. The cost we saw for the API Gateway can be
    extremely affordable for our project. For beginners, the AWS API Gateway is part
    of the free tier, and you can get 1 million requests per month for free. Kindly
    note that the free tier is only for new users.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: API Gateway 的主要优点之一是按需付费功能。该服务的定价为每百万个请求 3.5 美元，数据传输费用为每 1 GB 大约 0.09 美元。根据选择的服务，可能会产生其他可选费用。因此，我们需要确保它有助于降低后端成本。我们看到的
    API Gateway 的费用对于我们的项目来说是非常实惠的。对于初学者来说，AWS API Gateway 是免费套餐的一部分，每月可免费获得 100 万个请求。请注意，免费套餐仅适用于新用户。
- en: Creating the API Gateway
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 API Gateway
- en: Now that we are aware of the costing and features of the API Gateway, we will
    create the API Gateway using the AWS console. But before we start, we will need
    to create and locate AWS Lambda (created in [Chapter 4](67913362-94d8-4c74-850e-f6b09ca49367.xhtml),
    *Working with TensorFlow on AWS Lambda*), and then we will learn how to create
    a connection between the AWS API Gateway and AWS Lambda.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了 API Gateway 的费用和功能后，我们将通过 AWS 控制台创建 API Gateway。但在开始之前，我们需要创建并定位 AWS
    Lambda（在[第 4 章](67913362-94d8-4c74-850e-f6b09ca49367.xhtml)，*在 AWS Lambda 上使用
    TensorFlow*中创建），然后我们将学习如何创建 AWS API Gateway 和 AWS Lambda 之间的连接。
- en: Creating an AWS Lambda instance
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 AWS Lambda 实例
- en: 'We will create the AWS Lambda instance and connect to a Gateway using the AWS
    console. Let''s start with creating the AWS Lambda instance and choose the administrative
    role that we created in the previous chapter, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过 AWS 控制台创建 AWS Lambda 实例并连接到 Gateway。让我们从创建 AWS Lambda 实例开始，并选择在上一章中创建的管理角色，如下图所示：
- en: '![](img/816e7fcc-b806-4732-b3af-8f46ff04ecf9.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/816e7fcc-b806-4732-b3af-8f46ff04ecf9.png)'
- en: 'Let''s test the function and check that it has been created using the Test
    option in the top-right side of the screen, as shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试该功能，并检查它是否已通过屏幕右上方的测试选项创建，如下图所示：
- en: '![](img/ee0b5cdb-5c4f-4738-8dbe-0c49b593072a.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee0b5cdb-5c4f-4738-8dbe-0c49b593072a.png)'
- en: 'Now, let''s add the API Gateway trigger by clicking on the API Gateway option
    on the left side under Add triggers. Now under the Configure triggers tab, select
    Create a new API and select an Open API endpoint. Now, under Additional setting**,**
    just check the API name and click on Add to create the API and save it. This will
    give you the page shown in the following screenshot, which has a link to the API
    to test on your browser:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过单击左侧“添加触发器”下的 API Gateway 选项来添加 API Gateway 触发器。在“配置触发器”选项卡下，选择“创建新的
    API”并选择 Open API 端点。然后，在“附加设置”中，只需检查 API 名称并单击“添加”以创建 API 并保存。这将为您提供如下图所示的页面，其中包含一个
    API 链接，可在浏览器中进行测试：
- en: '![](img/8136981c-e426-4441-b0fa-a3e3738f16f8.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8136981c-e426-4441-b0fa-a3e3738f16f8.png)'
- en: 'As you can see, it produced a result that is similar to the demo code, as seen
    in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它产生的结果与演示代码相似，如下图所示：
- en: '![](img/e35d989c-7f0f-4259-9c48-7c69cbbef1ae.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e35d989c-7f0f-4259-9c48-7c69cbbef1ae.png)'
- en: Now we are ready with the AWS Lambda and the API Gateway, we will be creating
    the connection using the serverless framework.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了 AWS Lambda 和 API Gateway，我们将使用无服务器框架创建连接。
- en: Creating the API Gateway using the serverless framework
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无服务器框架创建 API Gateway
- en: 'Before creating the API, let us look at our project files: the main Python
    file (`index.py`) and the serverless configuration file (`serverless.yml`). Let''s
    look at the Python file as shown in the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 API 之前，让我们看看我们的项目文件：主 Python 文件（`index.py`）和无服务器配置文件（`serverless.yml`）。让我们查看如下所示的
    Python 文件：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From the preceding code block, you can see that this file will be returning
    a JSON response instead of the string to the API request. For this, we need to
    change `status code` to `200` and change `body` to `transform` in the JSON format.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码块中，你可以看到这个文件将返回 JSON 响应，而不是字符串给 API 请求。为此，我们需要将 `status code` 更改为 `200`，并将
    `body` 更改为 JSON 格式的 `transform`。
- en: 'In the server configuration file, we will be adding a `events` and adding an
    API endpoint name:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器配置文件中，我们将添加一个 `events` 并添加一个 API 端点名称：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Deploying the serverless framework
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署无服务器框架
- en: 'Now let''s deploy the service by using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令来部署服务：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On successful completion of the deployment, it will return the URL for the
    API Gateway. Now test the URL we got on the command line using the `curl` command
    and URL:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 部署成功完成后，它将返回 API Gateway 的 URL。现在使用 `curl` 命令和 URL 测试我们在命令行中得到的 URL：
- en: '![](img/4e50043f-76b9-4473-923f-9ae5aed4d8f2.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e50043f-76b9-4473-923f-9ae5aed4d8f2.png)'
- en: We can also run the URL in the browser and test the deployment to find the desired
    output.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在浏览器中运行该 URL 并测试部署，找到期望的输出。
- en: Creating a first API project
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建第一个 API 项目
- en: 'Now let us start by creating the example of the deep learning API project.
    Before we start the project, let''s look at our files: the main Python file and
    the service configuration file, along with some libraries files and the inception
    model.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们从创建深度学习 API 项目的示例开始。在开始项目之前，先来看一下我们的文件：主 Python 文件和服务配置文件，以及一些库文件和 Inception
    模型。
- en: In this project, we will be adding one `events` section and the endpoint name.
    In the Python file, we will be returning a JSON response to a request. Also, we
    will make Lambda accept the link to the image in the request and then apply it
    to a module. The we will be deploying the server and testing the files in the
    command line and browser, as we checked out in the previous section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将添加一个 `events` 部分以及端点名称。在 Python 文件中，我们将对请求返回一个 JSON 响应。此外，我们将使 Lambda
    接受请求中的图片链接，并将其应用到一个模块中。然后，我们将部署服务器，并在命令行和浏览器中测试文件，就像在前一节中检查的那样。
- en: The present configuration file is a combination of changes from the previous
    section and is very much similar. An additional part where are will be making
    a change is in the Python file, where we have added reading URL parameters. As
    you can see, if no URL is present, we use our image taken earlier. But, if we
    have the URL path, we can download the image from the URL.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的配置文件是前一节修改内容的结合，并且非常相似。我们将要进行更改的另一个部分是 Python 文件，在其中我们添加了读取 URL 参数。如你所见，如果没有
    URL，我们使用之前获取的图片。但如果我们有 URL 路径，我们可以从该 URL 下载图片。
- en: 'Now let''s deploy the service using the `serverless deploy` command, which
    will provide you with the URL of the API Gateway. Let''s test this URL using the
    `curl` command and from the browser and you will find the same response that we
    had in the previous section:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用 `serverless deploy` 命令部署服务，该命令会提供 API Gateway 的 URL。让我们使用 `curl` 命令和浏览器测试这个
    URL，您将看到与前一节中相同的响应：
- en: '![](img/43272726-ba2f-4203-9d54-02619f8e20b9.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43272726-ba2f-4203-9d54-02619f8e20b9.png)'
- en: We can also test the deployment by downloading the image. To test this, we only
    have to add the URL of the image as a parameter to the API Gateway URL.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过下载图片来测试部署。为了测试这一点，我们只需要将图片的 URL 作为参数添加到 API Gateway URL 中。
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the API Gateway services and the RESTful API.
    We saw how the AWS Gateway is cost effective for our application. Then we looked
    at how to create the AWS API Gateway and AWS Lambda using the AWS console. We
    also created a connection between AWS Lambda and the AWS API Gateway using the
    serverless framework. Finally, we created the deep learning API project using
    the API Gateway.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了 API Gateway 服务和 RESTful API。我们看到 AWS Gateway 如何为我们的应用提供高性价比。然后，我们了解了如何使用
    AWS 控制台创建 AWS API Gateway 和 AWS Lambda。我们还通过无服务器框架创建了 AWS Lambda 和 AWS API Gateway
    之间的连接。最后，我们使用 API Gateway 创建了深度学习 API 项目。
- en: In the next chapter, we will be creating crossing pipelines by connected and
    obvious Lambda little bills is curious where we will learn how to make a deep
    learning pipeline.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将通过连接和明显的 Lambda 小组件来创建交叉管道，*小费很有意思*，我们将在这里学习如何构建深度学习管道。
