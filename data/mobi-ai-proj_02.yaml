- en: Creating a Real-Estate Price Prediction Mobile App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个房地产价格预测移动应用
- en: In the previous chapter, we covered the theoretical fundamentals; this chapter,
    on the other hand, will cover the setup of all the tools and libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，我们讲解了理论基础；而本章将会介绍所有工具和库的设置。
- en: First, we are going to set up our environment to build a Keras model to predict
    house prices with real estate data. Then we are going to serve this model using
    a RESTful API built using Flask. Next, we will set up our environment for Android
    and create an app that will consume this RESTful API to predict the house price
    based on features of real estate. Finally, we will repeat the same exercise for
    iOS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设置环境，构建一个Keras模型，用于通过房地产数据预测房价。接着，我们将使用Flask构建一个RESTful API来提供此模型。然后，我们将为Android设置环境，并创建一个应用，该应用将调用此RESTful
    API，根据房地产的特征预测房价。最后，我们将在iOS上重复相同的操作。
- en: The focus of this chapter is on the setup, tools, libraries, and exercising
    the concepts learned in [Chapter 1](1bfa8853-a79e-4b4a-aa9f-254392b158bb.xhtml), *Artificial
    Intelligence Concepts and Fundamentals*. The use case is designed to be simple,
    yet adaptable enough to accommodate similar use-cases. By the end of the chapter,
    you will be comfortable creating a mobile app for prediction or classification
    use cases.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是设置、工具、库，并应用在[第1章](1bfa8853-a79e-4b4a-aa9f-254392b158bb.xhtml)中学到的概念，*人工智能概念与基础*。此用例设计简洁，但足够灵活，可以适应类似的用例。通过本章的学习，你将能轻松创建用于预测或分类任务的移动应用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Setting up the artificial intelligence environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置人工智能环境
- en: Building an ANN model for prediction using Keras and Tenserflow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Keras和TensorFlow构建ANN模型进行预测
- en: Serving the model as an API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型作为API提供
- en: Creating an Android app to predict house prices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Android应用来预测房价
- en: Creating an iOS app to predict house prices
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个iOS应用来预测房价
- en: Setting up the artificial intelligence environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置人工智能 环境
- en: The first thing to do is install Python. We are going to use Python throughout
    this book for all our **artificial intelligence** (**AI**) tasks. There are two
    ways to install Python, either through the downloadable executable file provided
    from [https://www.python.org/downloads/](https://www.python.org/downloads/) or
    via Anaconda. Our approach will be the latter, that is, using Anaconda.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要做的事情是安装Python。我们将在本书中使用Python进行所有的**人工智能**（**AI**）任务。有两种方式可以安装Python，一种是通过[https://www.python.org/downloads/](https://www.python.org/downloads/)提供的可执行文件下载安装，另一种是通过Anaconda安装。我们将采用后一种方式，也就是使用Anaconda。
- en: Downloading and installing Anaconda
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载并安装Anaconda
- en: 'Now, let''s go to the official Anaconda installation page ([https://conda.io/docs/user-guide/install/index.html#regular-installation](https://conda.io/docs/user-guide/install/index.html#regular-installation))
    and choose the appropriate option based on your operating system:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们访问Anaconda的官方安装页面([https://conda.io/docs/user-guide/install/index.html#regular-installation](https://conda.io/docs/user-guide/install/index.html#regular-installation))，并根据你的操作系统选择合适的安装选项：
- en: '![](img/7ad40de0-48bf-4274-a70a-48405c216193.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ad40de0-48bf-4274-a70a-48405c216193.jpg)'
- en: Follow the instructions as per the documentation. The installation takes some
    time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按照文档中的说明操作，安装过程需要一些时间。
- en: 'Once it is installed, let''s test the installation. Open the command prompt
    and type the `conda list` command. You should see a list of libraries and packages
    that have been installed as part of the Anaconda installation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，让我们测试一下安装情况。打开命令提示符，输入`conda list`命令。你应该能看到一个包含所有已安装库和包的列表，这些库和包是通过Anaconda安装的：
- en: '![](img/eaf4227c-4431-4666-9847-a5810508a2dc.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaf4227c-4431-4666-9847-a5810508a2dc.png)'
- en: If you do not get this output, please follow the official documentation page
    we saw and try again.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有得到这个输出，请参考我们之前查看的官方文档页面，并重试。
- en: Advantages of Anaconda
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Anaconda的优点
- en: 'Let''s discuss a few positives of using a package-management tool:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论使用包管理工具的一些优点：
- en: Anaconda lets us create environments to install libraries and packages. This
    environment is completely independent of the operating system or admin libraries.
    This means we can create user-level environments with custom versions of libraries
    for specific projects, which helps us port the project across operating systems
    with minimal effort.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda允许我们创建环境以安装库和包。这个环境完全独立于操作系统或管理员库。这意味着我们可以为特定项目创建自定义版本的库的用户级环境，从而帮助我们以最小的努力在不同操作系统之间迁移项目。
- en: Anaconda can have multiple environments with different versions of Python and
    supporting libraries. This way, any version mismatch can be avoided and is not
    affected by existing packages and libraries of the operating system.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda可以拥有多个环境，每个环境都有不同版本的Python和支持库。这样可以避免版本不匹配，并且不受操作系统中现有包和库的影响。
- en: Anaconda comes preloaded with most of necessary packages and libraries for data-science-related tasks,
    including a highly popular and interactive Python editor called Jupyter Notebook.
    Throughout this book, we will be using Jupyter Notebook a lot, mostly when we
    need to interactively code our tasks.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda预装了大多数数据科学相关任务所需的包和库，包括一个非常流行的交互式Python编辑器——Jupyter Notebook。在本书中，我们将大量使用Jupyter
    Notebook，特别是在需要交互式编码任务时。
- en: Creating an Anaconda environment
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Anaconda环境
- en: 'We will create an environment named `ai-projects` that uses Python version
    3.6\. All our dependencies are going to be installed in this environment:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`ai-projects`的环境，使用Python版本3.6。所有的依赖项都将安装在这个环境中：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, proceed and accept the prompts that you are presented with, you should
    get an output that looks as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续并接受你看到的提示，你应该看到如下的输出：
- en: '![](img/0e2e117d-df7b-4639-a8b6-c7e28ff6b533.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e2e117d-df7b-4639-a8b6-c7e28ff6b533.png)'
- en: 'Before we start installing the dependencies, we need to activate the environment
    we just created using the `activate ai-projects` command, or `source activate
    ai-projects` if you are using bash shell. The prompt will change to indicate that
    the environment has been activated:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装依赖项之前，我们需要使用`activate ai-projects`命令激活我们刚刚创建的环境，如果你使用的是bash shell，可以输入`source
    activate ai-projects`。提示符会发生变化，表明环境已被激活：
- en: '![](img/6ea56944-b878-4bff-996f-a04e75176c77.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ea56944-b878-4bff-996f-a04e75176c77.png)'
- en: Installing dependencies
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'First, let''s install TensorFlow. It is an open source framework for building
    **Artificial Neural Network** (**ANN**):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装TensorFlow。它是一个开源框架，用于构建**人工神经网络**（**ANN**）：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see the following output, which indicates a successful installation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出，表示安装成功：
- en: '![](img/b31ba28b-8559-4a06-872c-9d6f6b0a3c23.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b31ba28b-8559-4a06-872c-9d6f6b0a3c23.jpg)'
- en: 'We can also manually check the installation. Type `python` to open the Python
    prompt on the command line. Once inside the Python prompt, type `import tensorflow`
    and hit *Enter*. You should see the following output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以手动检查安装情况。在命令行输入`python`打开Python提示符。进入Python提示符后，输入`import tensorflow`并按*Enter*。你应该看到以下输出：
- en: '![](img/c27ee804-673f-4076-aaf8-9cdbe2fa926c.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c27ee804-673f-4076-aaf8-9cdbe2fa926c.png)'
- en: Type `exit()` to return to the default command line, keep in mind that we are
    still inside the `ai-projects` conda environment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`exit()`返回到默认命令行，记住我们仍然在`ai-projects` conda环境中。
- en: 'Next, we are going to install Keras, a wrapper over TensorFlow that makes designing
    deep neural networks much more intuitive. We continue to use the `pip` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装Keras，它是TensorFlow的一个封装器，使得设计深度神经网络更加直观。我们继续使用`pip`命令：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On successful installation, we should see the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，我们应该看到以下输出：
- en: '![](img/c0c4df7c-c974-497b-8602-3630003cd1b9.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0c4df7c-c974-497b-8602-3630003cd1b9.jpg)'
- en: 'To manually check the installation, type `python` to open the Python prompt
    on the command line. Once inside the Python prompt, type `import keras` and hit
    *Enter*. You should see the following output, with no errors. Observe that the
    output mentions that Keras is using TensorFlow as its backend:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动检查安装情况，在命令行输入`python`打开Python提示符。进入Python提示符后，输入`import keras`并按*Enter*。你应该看到以下输出，没有错误。请注意，输出中提到Keras正在使用TensorFlow作为其后端：
- en: '![](img/aaa69964-684b-40a2-86f6-8612d33bd511.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aaa69964-684b-40a2-86f6-8612d33bd511.jpg)'
- en: Great! We have now installed the main dependencies required to create our very
    own neural networks. Let's go ahead and build an ANN to predict real estate prices.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们现在已经安装了创建我们自己神经网络所需的主要依赖项。接下来，让我们构建一个ANN来预测房地产价格。
- en: Building an ANN model for prediction using Keras and TensorFlow
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Keras和TensorFlow构建用于预测的ANN模型
- en: 'Now that we have our libraries installed, let''s create a folder called `aibook`
    and within that create another folder called `chapter2`. Move all the code for
    this chapter into the `chapter2` folder. Make sure that the conda environment
    is still active (the prompt will start with the environment name):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了必要的库，让我们创建一个名为`aibook`的文件夹，在其中创建另一个名为`chapter2`的文件夹。将本章的所有代码移动到`chapter2`文件夹中。确保conda环境仍然处于激活状态（提示符将以环境名称开头）：
- en: '![](img/2f8d52ea-805c-46a4-8937-ef6c14f333d2.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f8d52ea-805c-46a4-8937-ef6c14f333d2.jpg)'
- en: Once within the `chapter2` folder, type `jupyter notebook`. This will open an
    interactive Python editor on the browser.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入`chapter2`文件夹，输入`jupyter notebook`。这将在浏览器中打开一个交互式Python编辑器。
- en: 'Use the New dropdown in the top-right corner to create a new Python 3 notebook:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角使用“New”下拉菜单创建一个新的Python 3笔记本：
- en: '![](img/e30c7760-1f13-4aa1-ab80-9b62b18f8643.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e30c7760-1f13-4aa1-ab80-9b62b18f8643.png)'
- en: 'We are now ready to build our first ANN using Keras and TensorFlow, to predict
    real estate prices:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备使用Keras和TensorFlow构建第一个ANN模型，用于预测房地产价格：
- en: 'Import all the libraries that we need for this exercise. Use the first cell
    to import all the libraries and run it. Here are the four main libraries we will
    use:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们为此练习所需的所有库。使用第一个单元格导入所有库并运行它。这里是我们将使用的四个主要库：
- en: '`pandas`: We use this to read the data and store it in a dataframe'
  id: totrans-54
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas`：我们用它来读取数据并将其存储在数据框中'
- en: '`sklearn`: We use this to standardize data and for k-fold cross-validation'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sklearn`：我们用它来标准化数据和进行k折交叉验证'
- en: '`keras`: We use this to build our sequential neural network'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keras`：我们用它来构建顺序神经网络'
- en: '`numpy`: We use `numpy` for all math and array operations'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy`：我们使用`numpy`进行所有数学和数组操作'
- en: 'Let''s import these libraries:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入这些库：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Load the real estate housing data using `pandas`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pandas`加载房地产数据：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To view the feature variables, the target variables, and a few rows of the
    data, enter the following:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看特征变量、目标变量以及数据的几行，请输入以下内容：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This output will be a few rows of `dataframe`, which is shown in the following
    screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出将是几行`dataframe`，如以下截图所示：
- en: '![](img/251b1699-eadc-4873-a7ae-87182e276c88.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/251b1699-eadc-4873-a7ae-87182e276c88.png)'
- en: 'The dataset has eight columns, details of each column are given as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集有八列，每列的详细信息如下：
- en: BIZPROP: Proportion of non-retail business acres per town
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BIZPROP：每个城镇的非零售商业用地比例
- en: ROOMS: Average number of rooms per dwelling
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROOMS：每个住宅的平均房间数
- en: AGE: Proportion of owner-occupied units built before 1940
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AGE：建于1940年之前的自有住房单位的比例
- en: HIGHWAYS: Index of accessibility to radial highways
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HIGHWAYS：通往放射状高速公路的可达性指数
- en: 'TAX: Full-value property tax rate per $10,000'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TAX：每$10,000的全额财产税率
- en: 'PTRATIO: Pupil-to-teacher ratio by town'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PTRATIO：每个城镇的师生比
- en: LSTAT: Percentage of lower status of the population
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LSTAT：低社会阶层人口的百分比
- en: VALUE: Median value of owner-occupied homes in thousand dollars (target variable)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VALUE：拥有者自住住房的中位数价值，单位为千美元（目标变量）
- en: 'In our use case, we need to predict the VALUE column, so we need to split the
    dataframe into features and target values. We will use a 70/30 split, that is,
    70% of data for training and 30% data for testing:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用场景中，我们需要预测VALUE列，因此我们需要将数据框分为特征和目标值。我们将使用70/30的分割比例，即70%的数据用于训练，30%的数据用于测试：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Also, to make sure we can reproduce the results, let''s set a seed for random
    generation. This random function is used during cross-validation to randomly sample
    the data:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了确保我们能重现结果，我们为随机生成设置一个种子。这个随机函数在交叉验证时用于随机抽样数据：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we are ready to build our ANN:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备构建我们的人工神经网络（ANN）：
- en: Create a sequential neural network that has a simple and shallow architecture.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有简单且浅层架构的顺序神经网络。
- en: 'Make a function called `simple_shallow_seq_net()` that will define the architecture
    of the neural network:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`simple_shallow_seq_net()`的函数，定义神经网络的架构：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The function does the following:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该函数执行以下操作：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A sequential model is instantiated – a sequential model is an ANN model built
    using a linear stack of layers:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个顺序模型——顺序模型是一个通过线性堆叠的层构建的ANN模型：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, we are adding a dense layer or fully-connected layer with seven neurons
    that are added to this sequential network. This layer accepts an input with `7`
    features (since there are seven input or features for predicting house price),
    which is indicated by the `input_dim` parameter. The weights of all the neurons
    in this layer are initialized using a random normal distribution, as indicated
    by the `kernel_initializer` parameter. Similarly, all the neurons of this layer
    use the sigmoid activation function, as indicated by the `activation` parameter:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们向这个顺序网络添加了一个具有七个神经元的稠密层或全连接层。此层接受具有`7`个特征的输入（因为有七个输入或特征用于预测房价），这由`input_dim`参数指示。此层所有神经元的权重都使用随机正态分布初始化，这由`kernel_initializer`参数指示。同样，此层所有神经元使用sigmoid激活函数，这由`activation`参数指示：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add another layer with a single neuron initialized using a random normal distribution:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个使用随机正态分布初始化的单神经元层：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Set the network to use **Scalar Gradient Descent** (**SGD**) to learn, usually
    specified as `optimizers`. We also indicate that the network will use a learning
    rate (`lr`) of `0.01` at every step of learning:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置网络使用**标量梯度下降**（**SGD**）进行学习，通常作为`optimizers`指定。我们还表明网络将在每一步学习中使用学习率（`lr`）为`0.01`：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Indicate that the network needs to use the **mean squared error** (**MSE**)
    cost function to measure the magnitude of the error rate of the model, and use
    the SGD optimizer to learn from the wrongness measured or loss of the model:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指示网络需要使用**均方误差**（**MSE**）代价函数来衡量模型的误差幅度，并使用SGD优化器从模型的错误率或损失中学习：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, the function returns a model with the defined specifications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，该函数返回一个具有定义规范的模型。
- en: 'The next step is to set a random seed for reproducibility; this random function
    is used to split the data into training and validation. The method used is k-fold
    validation, where the data is randomly divided into 10 subsets for training and
    validation:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置一个用于可重现性的随机种子；此随机函数用于将数据分成训练和验证集。使用的方法是k-fold验证，其中数据随机分为10个子集进行训练和验证：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we need to fit this model to predict a numerical value (house price, in
    this case), therefore we use `KerasRegressor`. `KerasRegressor` is a Keras wrapper
    used to access the regression estimators for the model from `sklearn`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要适应这个模型以预测数值（在这种情况下是房价），因此我们使用`KerasRegressor`。`KerasRegressor`是一个Keras包装器，用于访问`sklearn`中的回归估计器模型：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: We pass `simple_shallow_seq_net`as a parameter to indicate the function that
    returns the model.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`simple_shallow_seq_net`作为参数传递，以指示返回模型的函数。
- en: The `epochs` parameter indicates that every sample needs to go through the network
    at least `100` times.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`epochs`参数表示每个样本需要至少经过网络`100`次。'
- en: The `batch_size` parameter indicates that during every learning cycle of the
    network there are `50` training samples used at a time.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch_size`参数表示在每次学习周期中，网络同时使用`50`个训练样本。'
- en: 'The next step is to train and cross-validate across the subsets of the data
    and print the MSE, which is the measure of how well the model performs:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是训练和跨验证数据子集，并打印MSE，这是评估模型表现的度量：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will output the MSE – as you can see, it is pretty high and we need to
    make this value as low as possible:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出MSE - 如您所见，这个值相当高，我们需要尽可能地降低它：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Save this model for later use:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个模型以备后用：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Great, we have built and saved our first neural net to predict real estate
    price. Our next efforts are to improve the neural net. The first thing to try
    before fiddling with the network parameters is to improve its performance (lower
    the MSE) when we standardize the data and use it:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我们已经建立并保存了第一个用于预测房地产价格的神经网络。我们接下来的努力是改进这个神经网络。在调整网络参数之前，首先尝试的是在标准化数据并使用它时提高其性能（降低MSE）：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the preceding code, we created a pipeline to standardize the data and then
    use it during every learning cycle of the network. In the following code block,
    we train and cross-evaluate the neural network:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了一个流水线来标准化数据，然后在每个学习周期中使用它。在以下代码块中，我们训练和交叉评估神经网络：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will output a much better MSE than before, hence standardizing and using
    the data makes a difference:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出比以前好得多的MSE，因此标准化和使用数据确实产生了差异：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Saving this model is slightly different than before as we have used  `pipeline`
    to fit the model:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个模型与之前略有不同，因为我们使用了`pipeline`来拟合模型：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s now fiddle with our network to see whether we can get better results.
    We can start by creating a deeper network. We will increase the number of hidden
    or fully-connected layers and use both the `sigmoid` and `tanh` activation functions
    in alternate layers:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们调整一下我们的网络，看看能否获得更好的结果。我们可以从创建一个更深的网络开始。我们将增加隐藏层或全连接层的数量，并在交替的层中使用`sigmoid`和`tanh`激活函数：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The next block of code is used to standardize the variables in the training
    data and then fit the shallow neural net model to the training data. Create the
    pipeline and fit the model using standardized data:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码块用于标准化训练数据中的变量，然后将浅层神经网络模型拟合到训练数据中。创建管道并使用标准化数据拟合模型：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we need to cross-validate the fit model across the subsets of the data
    and print the MSE:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在数据的各个子集上交叉验证拟合模型并打印均方误差（MSE）：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will output an MSE that is better than the previous shallow networks that
    we created:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一个比我们之前创建的浅层网络更好的MSE：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Save the model for later use:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 保存模型以便后续使用：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'So, we get better results when we increase the depth (layers) of the network.
    Now, let''s see what happens when we widen the network, that is, increase the
    number of neurons (nodes) in each layer. Let''s define a deep and wide network
    to tackle the problem, we increase the neurons in each layer to `21`. Also, this
    time around, we will use the `relu` and `sigmoid` activation functions for the
    hidden layers:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们增加网络的深度（层数）时，结果会更好。现在，让我们看看当我们加宽网络时会发生什么，也就是说，增加每一层中神经元（节点）的数量。我们定义一个深而宽的网络来解决这个问题，将每一层的神经元数增加到`21`。此外，这次我们将在隐藏层中使用`relu`和`sigmoid`激活函数：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The next block of code is used to standardize the variables in the training
    data and then fit the deep and wide neural net model to the training data:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码块用于标准化训练数据中的变量，然后将深而宽的神经网络模型拟合到训练数据中：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we need to cross-validate the fit model across the subsets of the data
    and print the MSE:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在数据的各个子集上交叉验证拟合模型并打印均方误差（MSE）：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This time, the MSE is again better than the previous networks we created. This
    is a good example of how a deeper network with more neurons abstracts the problem
    better:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，MSE再次优于我们之前创建的网络。这是一个很好的例子，展示了更深的网络和更多的神经元如何更好地抽象问题：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, save the network for later use. The saved network model will be used
    in the next section and served within a REST API:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，保存网络以便后续使用。保存的网络模型将在下一节中使用，并通过REST API提供服务：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So far, we have been able to build a sequential neural network for prediction
    using various network architectures. As an exercise, try the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经能够利用各种网络架构构建一个用于预测的序列神经网络。作为练习，尝试以下内容：
- en: Experiment with the shape of the network; play around with the depth and width
    of the network to see how it impacts the output
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试调整网络的形状；玩玩网络的深度和宽度，看看它如何影响输出结果
- en: Try out the various activation functions ([https://keras.io/activations/](https://keras.io/activations/))
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试不同的激活函数（[https://keras.io/activations/](https://keras.io/activations/)）
- en: Try out the various initializers, here we have only used the random normal initializer
    ([https://keras.io/initializers/](https://keras.io/initializers/))
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试不同的初始化器，这里我们只使用了随机正态初始化器（[https://keras.io/initializers/](https://keras.io/initializers/)）
- en: The data we used here is for demonstrating the technique, so try out different
    use cases for prediction using the preceding technique on other datasets ([https://data.world/datasets/prediction](https://data.world/datasets/prediction))
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在这里使用的数据是为了演示该技术，因此可以尝试在其他数据集上使用上述技术进行预测的不同用例（[https://data.world/datasets/prediction](https://data.world/datasets/prediction)）
- en: We will learn more about optimizers and regularizers, which are other parameters
    you can use to tune the network, in [Chapter 4](ed2667d7-0173-498a-ae53-1010580cf1de.xhtml), *Building
    a Machine Vision Mobile App to Classify Flower Species*. The complete code for
    our ANN model creation is available as a Python notebook named `sequence_networks_for_prediction.ipynb`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](ed2667d7-0173-498a-ae53-1010580cf1de.xhtml)，*构建一个用于分类花卉物种的机器视觉移动应用程序*中了解更多关于优化器和正则化器的知识，这些是你可以用来调整网络的其他参数。我们创建ANN模型的完整代码作为Python笔记本文件，名为`sequence_networks_for_prediction.ipynb`。
- en: Serving the model as an API
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型作为API提供服务
- en: Now that we have created a model for prediction, the next thing is to serve
    this model via a RESTful API. To achieve this, we will use lightweight Python
    framework called Flask: [http://flask.pocoo.org/](http://flask.pocoo.org/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个预测模型，接下来需要通过 RESTful API 来服务这个模型。为此，我们将使用一个轻量级的 Python 框架 Flask：[http://flask.pocoo.org/](http://flask.pocoo.org/)。
- en: 'Let''s start by installing the `Flask` library in our conda environment if
    it does not already exist:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的 conda 环境中尚未安装 `Flask` 库，首先安装它：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Building a simple API to add two numbers
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的 API 来添加两个数字
- en: Now we will build a very simple API to get a grip on the `Flask` library and
    framework. This API will accept a JSON object with two numbers and return the
    sum of the numbers as a response.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将构建一个非常简单的 API，以掌握 `Flask` 库和框架。这个 API 将接受一个包含两个数字的 JSON 对象，并返回这两个数字的和作为响应。
- en: 'Open a new notebook from your Jupyter home page:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Jupyter 主页面打开一个新的 notebook：
- en: 'Import all the libraries we need and create an app instance:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入我们需要的所有库，并创建一个应用实例：
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create the index page for the RESTful API using the `route()` decorator:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `route()` 装饰器创建 RESTful API 的首页：
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Create a `POST` API to add two numbers using the `route()` decorator. This
    API accepts a JSON object with the numbers to be added:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `route()` 装饰器创建一个 `POST` API 来添加两个数字。这个 API 接受一个包含要添加的数字的 JSON 对象：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Save the Python notebook and use the File menu to download the notebook as a
    Python file. Place the Python file in the same directory as the model file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 保存 Python notebook，并使用文件菜单将其下载为 Python 文件。将 Python 文件放置在与模型文件相同的目录中。
- en: 'Start a new command terminal and traverse to the folder with this Python file
    and the model. Make sure to activate the conda environment and run the following
    to start a server running the simple API:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个新的命令终端，进入包含此 Python 文件和模型的文件夹。确保激活 conda 环境，并运行以下命令启动一个服务器来运行简单的 API：
- en: 'If you are using Windows, enter the following:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在使用 Windows，输入以下命令：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you aren''t using Windows, enter this:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不是在使用 Windows，输入以下命令：
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then type the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下命令：
- en: '[PRE40]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You should see the following output when the server starts:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器启动时，你应该看到以下输出：
- en: '![](img/77ddebb5-0ed8-49cd-8ae8-66da25492323.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77ddebb5-0ed8-49cd-8ae8-66da25492323.jpg)'
- en: 'Open the browser and paste this address in the URL bar to go to the index page: `http://127.0.0.1:5000/`.
    Here is the output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，将此地址粘贴到 URL 栏中以访问首页：`http://127.0.0.1:5000/`。以下是输出：
- en: '![](img/43df027c-5e68-4e2e-aa8e-5c3233c7e2be.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43df027c-5e68-4e2e-aa8e-5c3233c7e2be.png)'
- en: 'Next, we will use `curl` to access the `POST` API that adds two numbers. Open
    a new terminal and enter the following curl command to test the `/add` API. The
    numbers to add in this example are `1` and `2`, and this is passed as a JSON object:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `curl` 来访问添加两个数字的 `POST` API。打开一个新的终端，并输入以下 curl 命令来测试 `/add` API。此示例中要添加的数字是
    `1` 和 `2`，并作为 JSON 对象传递：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We will get a response with the sum of the numbers if there are no errors:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，我们将收到一个包含数字和的响应：
- en: '![](img/cec53b9e-bbf0-43d0-b2ad-18bfda3a0dab.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cec53b9e-bbf0-43d0-b2ad-18bfda3a0dab.png)'
- en: The complete code for the simple API is available as a Python notebook named
    `simple_api.ipynb` and as a Python file named `simple_api.py`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 简单 API 的完整代码可以在名为 `simple_api.ipynb` 的 Python notebook 文件中找到，也可以在名为 `simple_api.py`
    的 Python 文件中找到。
- en: Building an API to predict the real estate price using the saved model
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个 API 来预测使用保存的模型进行房地产价格预测
- en: 'Now that we have seen how  `Flask` works, we need to implement an API to serve
    the model we built previously. Start a new Jupyter Notebook and follow these steps:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 `Flask` 的工作原理，我们需要实现一个 API 来服务我们之前构建的模型。启动一个新的 Jupyter Notebook 并按照以下步骤操作：
- en: 'Import the required Python modules and create a Flask app instance:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的 Python 模块并创建一个 Flask 应用实例：
- en: '[PRE42]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create `Index page` for the RESTful API using the `route()` decorator:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `route()` 装饰器为 RESTful API 创建 `Index page`：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a `POST` API to predict house price using the `route()` decorator. This
    accepts a JSON object with all the features required to predict the house or real
    estate price:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `POST` API 来预测房价，使用 `route()` 装饰器。该 API 接受一个包含预测房价所需所有特征的 JSON 对象：
- en: '[PRE44]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Save the Python notebook and use the File menu to download the notebook as a
    Python file. Place the Python file in the same directory as the model file.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 保存 Python notebook，并使用文件菜单将其下载为 Python 文件。将 Python 文件放置在与模型文件相同的目录中。
- en: 'Start a new command terminal and traverse to the folder with this Python file
    and the model. Make sure to activate the conda environment and run the following
    to start a server that runs the simple API:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 启动新的命令终端并转到包含此 Python 文件和模型的文件夹。确保激活 conda 环境并运行以下内容以启动运行简单 API 的服务器：
- en: 'If you are using Windows, enter the following:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是 Windows，请输入以下内容：
- en: '[PRE45]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If you aren''t using Windows, use this:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不使用 Windows，请使用以下内容：
- en: '[PRE46]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then type the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下内容：
- en: '[PRE47]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, we will use `curl` to access the `POST` API that predicts house prices.
    Open a new terminal and enter the following `curl` command to test the `/predict` API.
    We can pass the features to be used as input for the model as a JSON object:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `curl` 访问预测房价的 `POST` API。打开新的终端并输入以下 `curl` 命令以测试 `/predict` API。我们可以将要用作模型输入的特征作为
    JSON 对象传递：
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This will output the house price for the features provided using our prediction
    model:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出根据提供的特征预测的房价：
- en: '![](img/19cdc927-bbf0-4479-b019-3ee9ddec2f73.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19cdc927-bbf0-4479-b019-3ee9ddec2f73.jpg)'
- en: That's it! We just built an API to serve our prediction model and tested it
    using `curl`. The complete code for the prediction API is available as a Python
    notebook named `predict_api.ipynb` and as a Python file named `simple_api.py`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们刚刚构建了一个 API 来提供我们的预测模型，并使用 `curl` 进行了测试。预测 API 的完整代码以 Python 笔记本 `predict_api.ipynb`
    和 Python 文件 `simple_api.py` 的形式提供。
- en: Next, we are going to see how to make a mobile app that will use the API that
    hosts our model. We will start by creating an Android app that uses the prediction
    API and then repeat the same task on an iOS app.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何制作一个移动应用程序，该应用程序将使用托管我们模型的 API。我们将首先创建一个使用预测 API 的 Android 应用程序，然后在
    iOS 应用程序上重复相同的任务。
- en: Creating an Android app to predict house prices
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Android 应用程序来预测房价
- en: 'In this section, we are going to consume the model through the RESTful API
    via an Android app. The purpose of this section is to demonstrate how a model
    can be consumed and used by an Android app. Here, we have assumed that you are
    familiar with the basics of Java programming. The same approach can be used for
    any similar use case, even on web apps. The following steps are covered in this
    section:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过 Android 应用程序的 RESTful API 消耗模型。本节的目的是演示模型如何被 Android 应用程序消耗和使用。在这里，我们假设您熟悉
    Java 编程的基础知识。相同的方法也可以用于任何类似的用例，甚至是 Web 应用程序。本节涵盖以下步骤：
- en: Downloading and installing Android Studio
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装 Android Studio
- en: Creating a new Android project with a single screen
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个具有单个屏幕的新 Android 项目
- en: Designing the layout of the screen
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计屏幕布局
- en: Adding a functionality to accept input
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加接受输入功能
- en: Adding a functionality to consume the RESTful API that serves the model
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加消耗模型提供的 RESTful API 功能
- en: Additional notes
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加说明
- en: Downloading and installing Android Studio
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载并安装 Android Studio
- en: Android Studio is the development environment and sandbox for Android app development.
    All our Android projects will be made using Android Studio. We can use Android
    Studio to create, design, and test our apps before publishing them.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 是用于 Android 应用开发的开发环境和沙盒。所有我们的 Android 项目都将使用 Android Studio
    制作。我们可以使用 Android Studio 创建、设计和测试应用程序，然后再发布它们。
- en: 'Head over to the official Android Studio download page, [https://developer.android.com/studio/](https://developer.android.com/studio/),
    and choose the version that matches your OS. In this case, we are using a Windows
    executable:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 前往官方 Android Studio 下载页面，[https://developer.android.com/studio/](https://developer.android.com/studio/)，并选择与您操作系统匹配的版本。在本例中，我们使用的是
    Windows 可执行文件：
- en: '![](img/16d203e0-62e1-4319-87dd-91084a31fc4c.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16d203e0-62e1-4319-87dd-91084a31fc4c.png)'
- en: Run the executable once it is downloaded to start the installation process.
    You will be presented with progressive installation menu choices. Choose Next
    and progress through the installation process. Most of the options are chosen
    as default during the installation steps.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下载可执行文件后，运行以开始安装过程。您将看到逐步安装菜单选项。选择“下一步”并继续安装过程。在安装步骤中，大多数选项都将选择默认设置。
- en: Creating a new Android project with a single screen
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个具有单个屏幕的新 Android 项目
- en: Now that we have installed Android Studio, we will create a simple app to estimate
    the price of real estate based on certain input.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Android Studio，我们将创建一个简单的应用程序来根据某些输入估算房地产的价格。
- en: 'Once we start Android Studio, it gives us a menu to start creating projects.
    Click on the Start a new Android Studio project option:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动 Android Studio，它将提供一个菜单来开始创建项目。点击“开始一个新的 Android Studio 项目”选项：
- en: '![](img/4131112d-51a2-4203-a771-42bd378e4f3d.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4131112d-51a2-4203-a771-42bd378e4f3d.png)'
- en: 'The next dialog is to select the Application name and Project location. Choose
    whatever you want and click Next:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个对话框是选择应用名称和项目位置。选择你想要的，并点击下一步：
- en: '![](img/d9aae155-2d19-4601-878a-fd8008993202.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9aae155-2d19-4601-878a-fd8008993202.png)'
- en: 'Next, choose the target versions for the application to run on:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择应用程序要运行的目标版本：
- en: '![](img/1ba1f6d5-aa22-4139-b019-a890b09584de.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ba1f6d5-aa22-4139-b019-a890b09584de.png)'
- en: 'Then choose a screen for the app; in this case, select an Empty Activity:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后选择一个应用屏幕；在这种情况下，选择一个空白活动：
- en: '![](img/88b0a687-fec0-4f7f-af95-54a2a79ccb4e.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88b0a687-fec0-4f7f-af95-54a2a79ccb4e.png)'
- en: 'Choose the screen or Activity Name and the corresponding name for the layout
    or design of the activity screen:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 选择屏幕或活动名称以及相应的布局或活动屏幕的设计名称：
- en: '![](img/80508382-73a6-420d-b677-60fe007b8dc0.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80508382-73a6-420d-b677-60fe007b8dc0.png)'
- en: 'The project should load in a few seconds after the build is complete. In the
    project structure, there are three main folders:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建完成后，项目应该会在几秒钟内加载。在项目结构中，有三个主要文件夹：
- en: 'manifests: This folder contains the manifest file used for permissions and
    application versioning.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: manifests：这个文件夹包含了用于权限和应用版本管理的manifest文件。
- en: 'java: This folder has all the Java code files (java|app|chapter2|realestateprediction|MainActivity.java).'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: java：这个文件夹包含了所有的Java代码文件（java|app|chapter2|realestateprediction|MainActivity.java）。
- en: 'res: This folder has all the layout files and media files used in the application
    (res|layout|activity_main.xml):'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: res：这个文件夹包含了应用程序中使用的所有布局文件和媒体文件（res|layout|activity_main.xml）：
- en: '![](img/5821d790-164b-41e5-81d8-0e771d0a4d36.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5821d790-164b-41e5-81d8-0e771d0a4d36.png)'
- en: Designing the layout of the screen
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计屏幕的布局
- en: 'Let''s design the screen that will accept the factors of the model we created
    as input. The screen will have seven input boxes to accept the factors, one button,
    and an output textbox to display the predicted result:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设计一个屏幕，接受我们创建的模型的输入因素。屏幕将有七个输入框来接受这些因素，一个按钮和一个输出文本框来显示预测结果：
- en: '![](img/0b6aa2a2-7cdf-432b-b49c-5a1a058e6afd.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b6aa2a2-7cdf-432b-b49c-5a1a058e6afd.jpg)'
- en: 'Traverse to thelayout folder in res and select the activity_layout.xml file
    to open in the editing panel. Choose the Text option at the bottom to view the
    existing XML for the layout:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到res文件夹中的layout文件夹，并选择activity_layout.xml文件在编辑面板中打开。选择底部的Text选项以查看现有的布局XML：
- en: '![](img/073f2eb7-11ec-4426-899a-2693b6247880.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/073f2eb7-11ec-4426-899a-2693b6247880.png)'
- en: 'Now, replace the existing XML code with the new design template for the app.
    Please refer to the activity_layout.xml code file in the Android folder for the
    full design template. The following is only a skeletal reference of the XML code
    template:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，替换现有的XML代码，使用新的设计模板。请参考Android文件夹中的activity_layout.xml代码文件以查看完整的设计模板。以下仅是XML代码模板的骨架参考：
- en: '[PRE49]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here, we have designed a layout to accept the seven factors as input, as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设计了一个布局来接受七个因素作为输入，具体如下：
- en: 'BIZPROP: Proportion of non-retail business acres per town'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BIZPROP：每个城镇非零售商业用地的比例
- en: 'ROOMS: Average number of rooms per dwelling'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROOMS：每个住宅的平均房间数
- en: '**A****GE**: Proportion of owner-occupied units built prior to 1940'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A****GE**：1940年之前建成的业主自住单元的比例'
- en: '**HIGHWAYS**: Index of accessibility to radial highways'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HIGHWAYS**：通往辐射状高速公路的可达性指数'
- en: '**TAX**: Full-value property-tax rate per $10,000'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TAX**：每$10,000的全值财产税率'
- en: '**PTRATIO**: Pupil-to-teacher ratio by town'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PTRATIO**：每个城镇的学生与教师比例'
- en: '**LSTAT**: Percentage of lower status of the population'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSTAT**：低社会阶层人口的比例'
- en: There is also a button and a textbox to display the output. The predicted value
    is displayed when the button is clicked.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个按钮和一个文本框用于显示输出。当点击按钮时，预测值将显示出来。
- en: 'To view the design of the activity, run the Run app option in the **run** menu
    from the top menu bar. The first time you run it, the environment will ask you
    to create a virtual device to test your app. You can either create an **Android
    Virtual Device** (**AVD**) or use the traditional method, that is, use an USB
    cable to connect your Android phone to the PC so that you can run the output directly
    on your device:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看活动的设计，可以在顶部菜单栏的**run**菜单中选择运行应用程序选项。第一次运行时，环境会提示你创建一个虚拟设备来测试你的应用程序。你可以创建一个**Android虚拟设备**（**AVD**）或使用传统的方法，即使用USB线将你的Android手机连接到PC，这样你就可以直接在设备上运行输出：
- en: '![](img/e518d696-637a-457a-be1a-121b5203a0f1.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e518d696-637a-457a-be1a-121b5203a0f1.png)'
- en: 'You should see the design of the scrollable layout once the app starts on the
    device or AVD emulator:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用在设备或 AVD 模拟器上启动时，你应该能看到滚动布局的设计：
- en: '![](img/1c8e556b-4586-4f6b-9e1e-cea5afd364c7.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c8e556b-4586-4f6b-9e1e-cea5afd364c7.png)'
- en: Adding a functionality to accept input
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个功能来接受输入
- en: Now we need to accept the input and create a map to hold the values. We will
    then convert the map into a JSON object so that it can be passed as the data in
    the `POST` API request.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要接受输入并创建一个映射来保存这些值。然后，我们将把这个映射转换为一个 JSON 对象，以便它可以作为数据传递给`POST` API 请求。
- en: 'Traverse to the `MainActivity.java` file and open it in the edit panel of Android
    Studio. Declare the following class variables:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到`MainActivity.java`文件并在 Android Studio 的编辑面板中打开它。声明以下类变量：
- en: '[PRE50]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You will find a function called `onCreate()` that is already created. Add the
    following code into the `onCreate()` function to initialize the elements of the
    layout:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一个名为`onCreate()`的函数已经创建。将以下代码添加到`onCreate()`函数中，以初始化布局元素：
- en: '[PRE51]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now add another function called `makeJSON()` to the Java class. This function
    accepts the values from the edit boxes and returns the JSON object we need to
    pass as data in our API call:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，向 Java 类中添加另一个名为`makeJSON()`的函数。这个函数接受来自编辑框的值，并返回我们需要传递的 JSON 对象，以供 API 调用使用：
- en: '[PRE52]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Adding a functionality to consume the RESTful API that serves the model
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个功能来调用提供模型的 RESTful API
- en: 'Now we need to hit the API with the data on a click of the button. To achieve
    this, we need the flowing helper functions:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在按钮点击时提交数据给 API。为此，我们需要以下辅助函数：
- en: '`ByPostMethod`: Accepts the URL as a `String` and returns the response as an
    `InputStream`.  This function takes the server URL string that we created using
    the Flask framework and returns the response from the server as an input stream:'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ByPostMethod`: 接受一个 URL 作为`String`并返回一个`InputStream`作为响应。这个函数接受我们使用 Flask
    框架创建的服务器 URL 字符串，并返回来自服务器的响应流：'
- en: '[PRE53]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`ConvertStreamToString`: This function accepts `InputStream` and returns a
    `String` of the response. The input stream returned from the previous function
    is processed as a string object by the following function:'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConvertStreamToString`: 这个函数接受`InputStream`并返回响应的`String`。前一个函数返回的输入流将被此函数处理为字符串对象：'
- en: '[PRE54]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '`DisplayMessage`: This functions updates the textbox with the response, which
    is the predicted value:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DisplayMessage`: 这个函数更新文本框内容，显示响应，即预测值：'
- en: '[PRE55]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'A point to note is that whenever network calls are made on Android, it is a
    best practice to do it on a separate thread so it does not block the main **user
    interface** (**UI**) thread. So, we will write an inner class called `MakeNetworkCall`
    to achieve this:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在 Android 上进行网络调用时，最佳实践是将其放在单独的线程中，以避免阻塞主**用户界面**（**UI**）线程。因此，我们将编写一个名为`MakeNetworkCall`的内部类来实现这一点：
- en: '[PRE56]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Please note that we used `http://10.0.2.2:5000/predict` instead of `http://127.0.0.1:5000/predict`.
    This is done because in Android, when we use the emulator, it accesses the local
    host via `10.0.2.2` instead of `127.0.0.1`. As the example is run on an emulator,
    we used `10.0.2.2`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用了`http://10.0.2.2:5000/predict`而不是`http://127.0.0.1:5000/predict`。这是因为在
    Android 中，当我们使用模拟器时，它通过`10.0.2.2`访问本地主机，而不是`127.0.0.1`。由于示例是在模拟器中运行的，因此我们使用了`10.0.2.2`。
- en: 'Finally, we need to add the functionality to call the API on click of the button.
    So, within the `oncreate()` method, insert the following code after the button
    has been initialized. This will initiate a background thread to access the API
    on a click of the button:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一个功能，当按钮被点击时调用 API。因此，在`oncreate()`方法中，在按钮初始化后插入以下代码。这将启动一个后台线程，在按钮点击时访问
    API：
- en: '[PRE57]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We need to add permissions to use internet within the `AndroidManifest.xml`
    file. Place the following code inside the `<manifest>` tag:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`AndroidManifest.xml`文件中添加使用互联网的权限。将以下代码放入`<manifest>`标签内：
- en: '[PRE58]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Don''t forget to run your Flask app. If you haven''t already, make sure to
    run it within the conda environment activated:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了运行你的 Flask 应用。如果你还没有运行，请确保在激活的 conda 环境中运行它：
- en: '[PRE59]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'That is all the code required to run and test the app on Android. Now run the
    app in the emulator, enter the details on the screen, hit the ESTIMATE VALUE button,
    and you''ll get immediate results:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在 Android 上运行和测试应用所需的所有代码。现在，在模拟器中运行应用，输入屏幕上的信息，点击 ESTIMATE VALUE 按钮，你将立即获得结果：
- en: '![](img/fe3b6dbc-7420-4f10-9f37-995f866d0c02.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe3b6dbc-7420-4f10-9f37-995f866d0c02.png)'
- en: Additional notes
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外说明
- en: 'This was a demonstration of how we can use the AI models built on an Android
    device. Having said that, there are a lot of additional tasks that can be added
    to the existing app:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示，展示了如何在Android设备上使用构建的AI模型。话虽如此，仍有许多其他任务可以添加到现有的应用程序中：
- en: Improve the UI design
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进UI设计
- en: Add input checks to validate the data entered
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加输入检查以验证输入的数据
- en: Host the Flask app (Heroku, AWS, and more)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管Flask应用程序（Heroku、AWS等）
- en: Publish the app
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布应用程序
- en: All these tasks are independent of our core AI theme, so can be addressed as
    an exercise for the reader.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些任务都与我们的核心AI主题无关，因此可以作为读者的练习来处理。
- en: Creating an iOS app to predict house prices
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用于预测房价的iOS应用程序
- en: 'In this section, we are going to consume the model through the RESTful API
    via an iOS app. The purpose of this section is to demonstrate how a model can
    be consumed and used by an iOS app. Here, we have assumed that you are familiar
    with Swift programming. The same approach can be used for any similar use case.
    These are the following steps covered in this section:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过iOS应用程序通过RESTful API来使用模型。本节的目的是展示如何通过iOS应用程序使用和消费模型。这里假设您已经熟悉Swift编程。相同的方法可以用于任何类似的用例。以下是本节所涵盖的步骤：
- en: Downloading and installing Xcode
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装Xcode
- en: Creating a new iOS project with a single screen
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个单屏幕的iOS项目
- en: Designing the layout of the screen
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计屏幕的布局
- en: Adding a functionality to accept input
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加接受输入的功能
- en: Adding a functionality to consume the RESTful API that serves the model
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加功能以消费提供模型的RESTful API
- en: Additional notes
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加说明
- en: Downloading and installing Xcode
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载并安装Xcode
- en: You need a Mac (macOS 10.11.5 or later) to develop the iOS apps that are implemented
    in this book. Also, the latest version of Xcode is required to run those codes
    since it contains all the features that are necessary to design, develop, and
    debug any app.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一台Mac（macOS 10.11.5或更高版本）来开发本书中实现的iOS应用程序。此外，需要安装Xcode的最新版本才能运行这些代码，因为它包含了设计、开发和调试任何应用所必需的所有功能。
- en: 'To download the latest version of Xcode, follow these steps:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载最新版本的Xcode，请按以下步骤操作：
- en: Open the App Store on your Mac (it's in the Dock by default).
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Mac上的App Store（默认在Dock中）。
- en: Type `Xcode` in the search field, which is at the top-right corner. Then press
    the return key.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`Xcode`，它位于右上角。然后按下回车键。
- en: The first search result that turns up is the Xcode app.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索结果中的第一个就是Xcode应用程序。
- en: Click on Get and then click on Install App.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“获取”，然后点击“安装应用程序”。
- en: Enter your Apple ID and password.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的Apple ID和密码。
- en: Xcode will be downloaded in your `/Applications` directory.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xcode将被下载到您的`/Applications`目录中。
- en: Creating a new iOS project with a single screen
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个单屏幕的iOS项目
- en: 'Xcode includes several built-in app templates. We will start with a basic template:
    Single View Application. Open Xcode from the `/Applications` directory to create
    a new project.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode包含多个内置应用程序模板。我们将从一个基本模板开始：单视图应用程序。从`/Applications`目录中打开Xcode以创建一个新项目。
- en: If you are launching Xcode for the first time, it may ask you to agree to all
    the user agreements. Proceed by clicking on these prompts until Xcode is set up
    and ready to launch on your system.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您第一次启动Xcode，它可能会要求您同意所有用户协议。按照这些提示操作，直到Xcode安装并准备好在您的系统上启动。
- en: 'Once we launch Xcode, the following window appears:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Xcode后，以下窗口将会出现：
- en: '![](img/7a6aa306-1b07-4f5a-a055-31e05a850377.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a6aa306-1b07-4f5a-a055-31e05a850377.png)'
- en: 'Click on Create a new Xcode project. A new window will open that displays a
    dialog box that allows us to select the required template:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建一个新的Xcode项目”。将会打开一个新窗口，显示一个对话框，允许我们选择所需的模板：
- en: '![](img/dbdc672b-af4c-4db8-b9b2-fba77d240fea.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbdc672b-af4c-4db8-b9b2-fba77d240fea.png)'
- en: 'After we select a template, a dialog box appears. Here, you need to name your
    app for which you can use the following values. You can also choose some additional
    options for your project:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 选择模板后，会弹出一个对话框。在这里，您需要为您的应用程序命名，您可以使用以下值。您还可以选择一些附加选项来配置您的项目：
- en: '**Product Name**: Xcode will use the product name that you entered to name
    both the project and the app.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称**：Xcode将使用您输入的产品名称来命名项目和应用程序。'
- en: '**Team**: If there''s no value filled in, set the team to None.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队**：如果没有填写值，请将团队设置为“无”。'
- en: '**Organization Name**: This is an optional field. You can either enter your
    organization''s name or your name. You may also choose to leave this option blank.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织名称**：这是一个可选字段。您可以输入您的组织名称或您的名字。您也可以选择将此选项留空。'
- en: '**Organization Identifier**: If you have an organization identifier, use that
    value. If you don''t, use `com.example`.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织标识符**：如果您有组织标识符，请使用该值。如果没有，请使用`com.example`。'
- en: '**Bundle Identifier**: This value is automatically generated based on your
    product name and organization identifier.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捆绑标识符**：此值是根据您的产品名称和组织标识符自动生成的。'
- en: '**Language**: Swift.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**：Swift。'
- en: '**Devices**: Universal. An app that runs on both iPhones and iPads is considered
    a universal app.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**：通用。一个在iPhone和iPad上都能运行的应用程序被认为是通用应用程序。'
- en: '**Use Core Data**: We don''t need any core date. Hence, it remains unselected.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用核心数据**：我们不需要核心数据。因此，它保持未选中。'
- en: '**Include Unit Tests**: We need to include unit tests. So this option will
    be selected.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含单元测试**：我们需要包含单元测试。因此，这个选项将被选中。'
- en: '**Include UI Tests**: We don''t need to include any  UI tests. Hence, this
    option stays unselected.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含UI测试**：我们不需要包含任何UI测试。因此，这个选项保持未选中。'
- en: Now, click on Next. A dialog box will appear, where you need to select a location
    to save your project. After saving the project, click on Create. You new project
    will be opened by Xcode in the workspace window.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击下一步。一个对话框将出现，您需要选择一个位置来保存您的项目。保存项目后，点击创建。您的新项目将由Xcode在工作区窗口中打开。
- en: Designing the layout of the screen
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计屏幕的布局
- en: 'Let''s design the screen that will accept the factors of the model we created
    as input. The screen will have seven input boxes to accept the factors, one button,
    and an output textbox to display the predicted result:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设计一个屏幕，用于接收我们创建的模型因子的输入。该屏幕将有七个输入框用于接收因子，一个按钮，以及一个输出文本框来显示预测结果：
- en: '![](img/589a76d7-b37b-4dc7-9362-302898467a83.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](img/589a76d7-b37b-4dc7-9362-302898467a83.jpg)'
- en: Let's work on the storyboard that is required for the app. What is a storyboard? A
    storyboard displays the screen of content and the transitions between that content.
    It gives us a visual representation of the application's UI. We get a **WYSIWYG** (short
    for **what you see is what you get**) editor where we can see the changes in real-time.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来处理应用所需的故事板。什么是故事板？故事板展示了内容的屏幕及其之间的过渡。它为我们提供了应用程序UI的视觉表现。我们可以使用**所见即所得**（**WYSIWYG**）编辑器，在这里我们可以实时看到更改。
- en: 'To open the storyboard, select the Main.storyboard option in the project navigator. This
    will open a canvas where we can design the screen. We can now add elements and
    design the canvas:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开故事板，请在项目导航器中选择`Main.storyboard`选项。这将打开一个画布，我们可以在其中设计屏幕。现在我们可以添加元素并设计画布：
- en: '![](img/675b1bb5-e59c-4d18-a961-81fc301bccbf.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/675b1bb5-e59c-4d18-a961-81fc301bccbf.png)'
- en: 'The same can also be coded instead of using the drag-and-drop approach. To
    do so, start by defining the text fields that are used as input in the `ViewController`
    class:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用编码来代替拖放方法。为此，从定义作为输入使用的文本字段开始，放在`ViewController`类中：
- en: '[PRE60]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Then, within the `CreateView` method, we implement the design of each text field.
    The following is the sample for the first couple of text fields; the same approach
    can be used for the rest of the text fields. The completed project code is available
    in the `chapter2_ios_prediction` folder.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`CreateView`方法中，我们实现每个文本字段的设计。以下是前两个文本字段的示例；其余文本字段可以采用相同的方法。完成的项目代码可以在`chapter2_ios_prediction`文件夹中找到。
- en: 'First, create a header text field, `Estimate the value of real estate`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个标题文本字段，`估算房地产价值`：
- en: '[PRE61]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, create another text field, `Enter real estate details`:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建另一个文本字段，`输入房地产详细信息`：
- en: '[PRE62]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Next, create a field to enter the input for a proportion of non-retail business
    in acres:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个字段，用于输入非零售业务面积比例：
- en: '[PRE63]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now create a field to enter the input for the average number of rooms per dwelling:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个字段，用于输入每个住宅的平均房间数：
- en: '[PRE64]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then, create a button to hit the API:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个按钮来调用API：
- en: '[PRE65]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Adding a functionality to accept input
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加接受输入的功能
- en: 'Here, all the input from the text fields are packaged in an `NSString` object,
    which is used in the `POST` body of the request:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，所有来自文本字段的输入都被打包成一个`NSString`对象，并用于请求的`POST`正文中：
- en: '[PRE66]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Adding a functionality to consume the RESTful API that serves the model
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个功能来调用提供模型的RESTful API
- en: 'Now we need to use the `NSURLSession` object to hit the RESTful API with the
    input from the activity screen:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要使用`NSURLSession`对象，通过活动屏幕中的输入来调用RESTful API：
- en: '[PRE67]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Finally, display the output from the response received from the API:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，显示从API接收到的响应中的输出：
- en: '[PRE68]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The app can now run and is ready to be tested on the simulator.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用现在可以运行，并准备在模拟器上进行测试。
- en: Additional notes
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加说明
- en: 'This was a demonstration of how we can use AI models on an iOS device. Having
    said that, there are a lot of tasks that can be added to the existing app:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了我们如何在 iOS 设备上使用 AI 模型。话虽如此，现有应用中还有很多可以添加的任务：
- en: Improve the UI design
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进 UI 设计
- en: Add input checks to validate the data entered
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加输入检查以验证输入的数据
- en: Host the Flask app (Heroku, AWS, and more)
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管 Flask 应用（Heroku、AWS 等）
- en: Publish the app
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布应用
- en: All these tasks are independent of our core AI theme, so they can be addressed
    as an exercise for the reader. The complete code and project files for both the
    Android and iOS apps are available as `chapter2_android_prediction` and `chapter2_ios_prediction`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些任务与我们的核心 AI 主题无关，因此可以作为读者的练习来处理。安卓和 iOS 应用的完整代码和项目文件分别命名为`chapter2_android_prediction`和`chapter2_ios_prediction`。
- en: Summary
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the basic sequential network and consumed it on
    mobile devices. In the next chapter, we will take a look at a special kind of
    network called **Convolutional Neural Networks** (**CNN**). CNNs are the most
    common networks used with Machine Vision. Our goal in the next chapter is to get
    comfortable with machine vision and to build our own custom-purpose CNNs.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了基本的顺序网络，并在移动设备上使用了它。在下一章，我们将探讨一种特殊类型的网络——**卷积神经网络**（**CNN**）。CNN 是最常用于机器视觉的网络类型。下一章的目标是熟悉机器视觉，并构建我们自己的定制
    CNN。
