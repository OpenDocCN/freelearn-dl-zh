- en: Introduction to Artificial Intelligence on Amazon Web Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊网络服务上的人工智能简介
- en: In this chapter, we will start with a high-level overview of **artificial intelligence**
    (**AI**), including its history and the broad set of methods that it uses. Then,
    we will take a look at a few applications of AI that have the potential to profoundly
    change our world. With growing interests in AI, many companies, including Amazon,
    are offering a plethora of tools and services to help developers create intelligent-enabled
    applications. We will provide a high-level overview of AI offerings from Amazon
    Web Services, and we will also provide our guidance on how to best leverage them.
    Being a hands-on book, we will quickly dive into intelligent-enabled application
    development with Amazon Web Services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先从一个高层次概述**人工智能**（**AI**）开始，包括其历史和广泛使用的方法。然后，我们将看看一些人工智能的应用，它们有潜力深刻改变我们的世界。随着对人工智能兴趣的增加，许多公司，包括亚马逊，都提供了丰富的工具和服务，帮助开发者创建智能化应用。我们将提供亚马逊网络服务（AWS）人工智能产品的高层次概述，并为如何最佳利用这些工具提供指导。作为一本实践性强的书籍，我们将迅速深入亚马逊网络服务的智能化应用开发。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Overview of AI and its applications.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人工智能及其应用概览。
- en: Understanding the different types of Amazon Web Services offerings for AI.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解亚马逊网络服务在人工智能方面的不同产品。
- en: How to set up an Amazon Web Services account and the environment for intelligent-enabled
    application development.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置亚马逊网络服务账户以及智能化应用开发环境。
- en: Get hands-on experience with Amazon Rekognition and other supporting services.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取亚马逊 Rekognition 及其他支持服务的实践经验。
- en: Develop our first intelligent-enabled application.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发我们的第一个智能化应用。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book's GitHub repository, which contains the source code for this chapter,
    can be found at [https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services](https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的 GitHub 仓库，包含本章的源代码，可以在[https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services](https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services)找到。
- en: What is AI?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是人工智能？
- en: AI is an umbrella term that describes a branch of computer science that aims
    to create intelligent agents. The field of AI is highly technical and specialized;
    there is a broad set of theories, methods, and technologies in AI that allow computers
    to see (computer vision), to hear (speech recognition), to understand (natural
    language processing), to speak (text-to-speech), and to think (knowledge reasoning
    and planning).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能（AI）是一个总括性术语，描述了计算机科学的一个分支，旨在创建智能代理。人工智能领域高度技术化且专业化；其中包含了一整套理论、方法和技术，使计算机能够看（计算机视觉）、听（语音识别）、理解（自然语言处理）、说（文本转语音）以及思考（知识推理与规划）。
- en: It may seem that AI is a buzzword of our current times, but it has existed since
    the 1950s, when early work on artificial neural networks that mimic led the human
    brain stirred up excitement for thinking machines. With all the fanfare it receives
    in the media today, it is hard to believe that this field had to endure two AI
    winters, where interest in AI research and development dwindled. Today, AI has
    become popular again, thanks to the increased volume of data, cheaper storage,
    advancements in algorithms, and an increase in computing power.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 也许人工智能看起来是当下的流行词，但它自1950年代就已存在，当时模仿人脑的人工神经网络的早期工作激发了对思考机器的兴奋。尽管今天它在媒体中受到极大关注，但很难相信这个领域曾经历过两次“人工智能寒冬”，即对人工智能研究和发展的兴趣逐渐消退。如今，人工智能再次流行，得益于数据量的增加、存储成本的降低、算法的进步以及计算能力的提升。
- en: One of the most important subfields of AI is **machine learning** (**ML**).
    ML is such a prominent part of AI that these two terms are often used interchangeably
    today. ML is the most promising set of techniques to achieve AI. These techniques
    gave us a new way to program computers through self-learning algorithms that can
    derive knowledge from data. We can train ML models that can look for patterns
    and draw conclusions like humans would. With these self-learning algorithms, the
    data itself has become the most valuable asset. Data has become the competitive
    advantage in industries; it is the new intellectual property. Between similar
    ML techniques (even inferior ML techniques), the best data will win.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能最重要的子领域之一是**机器学习**（**ML**）。机器学习是人工智能中如此重要的一部分，以至于这两个术语如今经常被互换使用。机器学习是实现人工智能的最有前景的一组技术。这些技术为我们提供了一种通过自学习算法编程计算机的新方法，能够从数据中获取知识。我们可以训练机器学习模型，寻找模式并像人类一样得出结论。通过这些自学习算法，数据本身已经成为最有价值的资产。数据已成为各行业的竞争优势；它是新的知识产权。在类似的机器学习技术中（即便是较差的机器学习技术），最佳的数据将获胜。
- en: What's old is new again. Artificial neural networks, once again, became the
    focus for ML research and development. More data, more compute, and new algorithms
    such as backpropagation, are enabling neural networks to have many hidden layers,
    also known as deep neural networks or deep learning. The increase in the accuracy
    of deep neural network models was almost impossible just a few years ago. Today,
    deep learning is the major breakthrough that is driving the modern-day AI boom.
    This combination of data, software, and hardware is creating a new breed of intelligent
    agents that can often see, hear, understand, speak, and even think like humans
    when provided with abundant information that is related to the world.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的东西再次变得新颖。人工神经网络再次成为机器学习研究和开发的焦点。更多的数据、更强的计算能力以及新的算法，如反向传播，使得神经网络可以拥有许多隐藏层，这也被称为深度神经网络或深度学习。深度神经网络模型的准确度提高，在几年前几乎是不可能的。今天，深度学习是推动现代人工智能繁荣的重大突破。数据、软件和硬件的结合创造了一种新型智能代理，它们在获得与世界相关的丰富信息后，往往可以像人类一样看、听、理解、说话，甚至思考。
- en: AI has become a vital part of the technology landscape. Businesses, big and
    small, are solving problems by leveraging AI. AI capabilities are seeping into
    every aspect of our lives, giving us better memory, better vision, better cognitive
    abilities, and much more. In most cases, AI will not be sold as the product by
    itself. Rather, products you already use will be improved with AI, and will become
    intelligent-enabled solutions. What is most exciting to us is the democratization
    of AI and ML technologies and services. The abundance of such technologies and
    services means practitioners can easily leverage AI to add intelligence to products
    that affects the way we live, work, and play.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能已成为技术领域的重要组成部分。无论大小企业，都在通过利用人工智能解决问题。人工智能的能力正在渗透到我们生活的各个方面，提升我们的记忆力、视力、认知能力等。大多数情况下，人工智能不会单独作为产品出售。相反，您已经使用的产品将通过人工智能得到改善，并成为智能化解决方案。对我们来说，最令人兴奋的是人工智能和机器学习技术与服务的普及。这些技术和服务的丰富性意味着从业者可以轻松利用人工智能，为影响我们生活、工作和娱乐方式的产品增添智能。
- en: This book will help you become an AI practitioner. We will teach you, through
    hands-on projects, the tools and techniques that are needed to embed AI capabilities
    into software solutions. Successful intelligent-enabled solutions require a combination
    of architecture design, software engineering, and data science. You will learn
    how to design, develop, deploy, and maintain production-grade software solutions
    with AI capabilities. As an AI practitioner, it is important to see AI through
    the lens of business capabilities, rather than just technologies. This book aims
    to bring together various skills to help you develop an intuition for well-designed
    intelligent-enabled solutions that solve real-world problems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将帮助您成为一名人工智能从业者。我们将通过实践项目教您如何将人工智能能力嵌入软件解决方案所需的工具和技术。成功的智能化解决方案需要架构设计、软件工程和数据科学的结合。您将学习如何设计、开发、部署和维护具有人工智能能力的生产级软件解决方案。作为一名人工智能从业者，重要的是通过商业能力的视角看待人工智能，而不仅仅是技术视角。本书旨在将各种技能结合起来，帮助您培养直觉，以便设计出能够解决实际问题的优秀智能化解决方案。
- en: Applications of AI
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工智能的应用
- en: Our lives have already been greatly impacted by applications of AI, including
    the way we search for information, shop for products, communicate with each other,
    and much more. However, we are only in the nascency of this intelligent software
    renaissance. So many amazing AI applications already exist, so let's look at a
    few examples.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的生活已经被AI应用深刻影响，包括我们如何搜索信息、购买商品、与他人交流等等。然而，我们仍处在这个智能软件文艺复兴的初期阶段。虽然许多惊人的AI应用已经存在，但我们不妨看看其中几个例子。
- en: Autonomous vehicles
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动驾驶车辆
- en: One AI application that's getting much media attention is autonomous vehicles,
    also known as self-driving cars. These vehicles are capable of perceiving the
    world around them, and drive with little or no human intervention.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个受到媒体广泛关注的AI应用是自动驾驶车辆，也称为自驾车。这些车辆能够感知周围的世界，并在几乎不需要人类干预的情况下驾驶。
- en: These autonomous vehicles are the perfect fusion of sensors and AI technologies
    that have been combined to create the self-driving capability. To develop the
    self-driving capability, these vehicles have logged millions of miles on highways
    and local roads, and billions more in simulations. Gobs of data coming from arrays
    of sensors, including cameras, radar, lidar, sonar, GPS, and many more, are used
    to train numerous ML models to perform the various perception and actuation tasks
    that are required to move vehicles safely in real-world conditions. The resulting
    AI capabilities, such as computer vision, object detection, predictive modeling,
    and obstacle avoidance algorithms, can create complex models of the environment
    that onboard computers can understand in order to control, to plot paths, and
    to navigate.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些自动驾驶车辆是传感器与AI技术的完美融合，二者结合创造了自动驾驶能力。为了开发自动驾驶能力，这些车辆已经在高速公路和地方道路上行驶了数百万英里，此外还在模拟中完成了更多的训练。来自各种传感器的数据，包括摄像头、雷达、激光雷达、声纳、GPS等，被用于训练众多机器学习模型，以执行确保车辆在现实条件下安全行驶所需的感知与执行任务。最终的AI能力，如计算机视觉、物体检测、预测建模和障碍物避免算法，可以创建环境的复杂模型，使车载计算机能够理解，从而控制、规划路径和进行导航。
- en: Self-driving technology is less error-prone than human drivers, and can potentially
    save hundreds of thousands of lives from crashes and accidents. This technology
    can also be a mobility provider for individuals who are unable to drive themselves,
    such as the elderly or disabled. At the time of writing, there are no true fully
    autonomous vehicles in large deployment in the world. We can't even imagine how
    this technology will reshape and mold our world in the decades to come.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自动驾驶技术比人类驾驶员更不容易出错，并且有潜力拯救数十万人的生命免受车祸和事故的伤害。这项技术也可以成为无法自驾的人的出行方式，例如老年人或残疾人。撰写本文时，世界上并没有大规模部署的真正完全自动驾驶的车辆。我们甚至无法想象，这项技术将在未来几十年如何重新塑造我们的世界。
- en: AI in medical care
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 医疗保健中的AI
- en: AI and ML is starting to transform the healthcare industry. These technologies
    are being used to improve diagnostic capabilities and clinical decision-making
    to speed up the detection and treatment of many diseases. These AI programs do
    not just follow preprogrammed guidelines for how to diagnose a disease. Instead,
    the AI is *taught* to recognize the symptoms of particular medical conditions,
    such as heart arrhythmias, diabetes-related vision loss, and even cancer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: AI和机器学习正开始改变医疗行业。这些技术被用来改善诊断能力和临床决策，以加速许多疾病的检测与治疗。这些AI程序不仅仅是遵循预设的诊断流程来判断疾病。相反，AI被*教会*识别特定医疗状况的症状，例如心律失常、糖尿病引起的视力丧失，甚至癌症。
- en: A medical image is a rich source of data about a patient's health. With high-resolution
    images from X-rays, MRIs, and CAT scans, ML models can be trained with millions
    of example images labeled with particular medical conditions. With sufficient
    examples, the resulting ML models can diagnose diseases with accuracies that rival,
    if not surpass, human doctors. With AI programs tirelessly analyzing for valuable
    medical insights, they can aid doctors with faster and more accurate diagnoses,
    and the patients can receive treatment sooner.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 医学影像是关于病人健康的丰富数据源。通过来自X光、MRI和CT扫描的高分辨率图像，机器学习模型可以利用成千上万张带有特定医疗条件标签的示例图像进行训练。通过足够的示例，生成的机器学习模型能够以接近甚至超过人类医生的精确度诊断疾病。借助AI程序不知疲倦地分析宝贵的医学见解，它们可以帮助医生更快速、准确地做出诊断，从而让患者尽早接受治疗。
- en: More profoundly, the resulting AI capabilities incorporate the knowledge and
    experience of the best doctors and clinicians that helped to develop these capabilities.
    Once developed, the capabilities can be massively replicated and distributed to
    primary care offices and walk-in clinics, where this level of medical expertise
    was previously inaccessible. This can save thousands of lives through the early
    detection and treatment of diseases. It will have a profound impact on people's
    lives, especially in locations of the world where specialized doctors are scarce.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 更深刻的是，最终的人工智能能力融合了帮助开发这些能力的最优秀医生和临床专家的知识和经验。一旦开发完成，这些能力可以被大规模复制并分发到初级保健办公室和门诊诊所，这些地方以前无法获得这种水平的医学专业知识。这可以通过早期发现和治疗疾病拯救成千上万的生命。它将对人们的生活产生深远的影响，尤其是在那些专业医生稀缺的地区。
- en: Personalized predictive keyboards
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个性化预测键盘
- en: While there is a lot of excitement in ground-breaking, revolutionary, and even
    moon-shot AI applications that will no doubt change our world, you don't always
    have to chase after these fundamentally difficult problems to bring value to our
    world with AI.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在突破性的、革命性的甚至是登月级的人工智能应用中充满了兴奋，这些应用无疑将改变我们的世界，但你并不总是需要追求这些根本上困难的问题，就能用人工智能为我们的世界带来价值。
- en: One good example of an apt intelligent-enabled solution for a recent real-world
    problem is predictive keyboards on mobile devices. When touchscreen mobile devices
    became popular, we had to learn to type on small virtual keyboards, often on the
    go, with fewer fingers and with more distractions. These predictive keyboards
    facilitated faster typing by suggesting words and punctuation that we may wish
    to type, thus reducing friction in mobile communication.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是智能启用解决方案在最近现实世界问题中的应用——移动设备上的预测键盘。当触摸屏移动设备变得流行时，我们不得不学会在小型虚拟键盘上打字，通常是在移动中、用更少的手指并且面临更多的干扰。这些预测键盘通过建议我们可能想输入的单词和标点符号，帮助我们更快速地打字，从而减少了移动通信中的摩擦。
- en: The predictive capabilities of these keyboards are often built with ML and **natural
    language processing** (**NLP**) technologies that combine language models, custom
    dictionaries, and learned preferences in their prediction engines. The best prediction
    engines are likely built using a form of **recurrent neural network** (**RNN**)
    called **long short-term memory** (**LSTM**). These are neural networks that try
    to predict the next word given a window of previously typed words. The key to
    a successful prediction is in its speed and personalization. Each key press results
    in a prediction, and so the prediction engines must run fast on mobile hardware.
    These prediction engines are designed to get more intelligent as we use them;
    they are good examples of human-in-the-loop online learning systems.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些键盘的预测功能通常是通过机器学习和**自然语言处理**（**NLP**）技术构建的，结合了语言模型、定制词典和学习到的偏好，构成了它们的预测引擎。最好的预测引擎很可能是使用一种叫做**长短期记忆**（**LSTM**）的**递归神经网络**（**RNN**）来构建的。这些神经网络试图根据一段之前输入的文字预测下一个单词。成功预测的关键在于其速度和个性化。每次按键都会产生一个预测，因此预测引擎必须在移动硬件上运行得很快。这些预测引擎的设计目标是随着我们使用它们变得越来越智能；它们是人类参与的在线学习系统的良好例子。
- en: Even though they are not saving lives by the thousands, the users of these predictive
    keyboards have saved trillions of keystrokes. We just love the elegance of these
    intelligent-enabled software solutions that have applied the right AI technologies
    to the right problems. We hope that, with the skills and insights you will have
    gained from this book, you will be able to find elegant AI applications to make
    our lives better, as well.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们并没有拯救成千上万的生命，但这些预测键盘的用户却节省了万亿次的按键输入。我们就是喜欢这些智能启用的软件解决方案的优雅，它们应用了正确的人工智能技术来解决正确的问题。我们希望，通过本书中你将获得的技能和见解，你也能够找到优雅的人工智能应用来改善我们的生活。
- en: Why use Amazon Web Services for AI?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用亚马逊云服务进行人工智能？
- en: '**Amazon Web Services** or **AWS** is by far the largest, most comprehensive
    cloud computing platform. AWS offers a broad set of on-demand cloud-based services,
    including compute, storage, databases, networking, analytics, and much more. For
    many years, developers have leveraged these services to build enterprise-grade
    software solutions at scale and speed that cannot be matched by any other cloud
    computing platform.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）迄今为止是最大的、最全面的云计算平台。AWS 提供了一套广泛的按需云服务，包括计算、存储、数据库、网络、分析等多种服务。多年来，开发者利用这些服务以无法匹敌的规模和速度构建企业级软件解决方案，这种规模和速度是其他任何云计算平台都无法比拟的。'
- en: What's exciting is that AWS also offers a plethora of AI services that provide
    pre-trained AI capabilities, including image recognition, NLP, speech recognition
    and generation, and conversation agents. AWS also has ML services that simplify
    the building, training, and deployment of custom AI capabilities via ML and deep
    learning models. Companies and developers can leverage these AI and ML services
    to add intelligence to their software solutions just as easily as with AWS' other
    cloud computing services.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 令人兴奋的是，AWS 还提供了大量的 AI 服务，提供预训练的 AI 能力，包括图像识别、自然语言处理（NLP）、语音识别和生成，以及对话代理。AWS
    还提供 ML 服务，简化了通过 ML 和深度学习模型构建、训练和部署定制 AI 能力的过程。公司和开发者可以利用这些 AI 和 ML 服务，就像使用 AWS
    的其他云计算服务一样轻松地为他们的软件解决方案增加智能。
- en: However, the true power of developing intelligent-enabled solutions on AWS is
    unlocked when developers combine the AWS AI and ML services with the rest of the
    AWS cloud computing ecosystem. By combining various AWS services, you instantly
    get access to an enterprise-grade cloud computing platform with a highly reliable,
    scalable, and secure infrastructure. This enables you, the AI practitioner, to
    easily collect and process large datasets so that you can integrate various AI
    capabilities, rapidly prototype ideas, and continuously experiment and iterate
    solutions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 AWS 上开发智能解决方案的真正力量，在于开发者将 AWS 的 AI 和 ML 服务与其他 AWS 云计算生态系统结合使用。通过结合各种 AWS
    服务，你将立即获得一个企业级云计算平台，具备高度可靠、可扩展和安全的基础设施。这使得你，作为 AI 从业者，能够轻松收集和处理大规模数据集，从而集成各种 AI
    能力，快速原型化创意，并持续实验和迭代解决方案。
- en: As the title of this book suggests, this is a hands-on guide. We aim to bring
    together the various skills that are needed to design and build end-to-end AI
    solutions on the AWS platform. The keyword here is *skills*. We not only cover
    the important concepts of AI, but we also help you put these concepts into practice
    with numerous hands-on projects. It is only through these practical hands-on experiences
    that you will develop an intuition for well-designed, intelligent-enabled solutions.
    The projects in this book can be deployed to the AWS cloud platform; you can learn
    from them, you can enhance them, and you can even showcase them to others.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本书标题所示，这本书是一本实践指南。我们的目标是汇集设计和构建端到端 AI 解决方案所需的各种技能。这里的关键词是*技能*。我们不仅涵盖 AI 的重要概念，还帮助你通过众多实践项目将这些概念付诸实践。只有通过这些实际操作经验，你才能培养出设计良好的、智能化解决方案的直觉。本书中的项目可以部署到
    AWS 云平台；你可以从中学习，可以增强它们，甚至可以向他人展示。
- en: Working within the enormous AWS ecosystem will require a steep learning curve.
    New users can easily be overwhelmed by the AWS offerings. In this book, we will
    teach you about the patterns and practices that are needed to develop intelligent-enabled
    solutions, along with many of the services offered by the AWS platform. You will
    become intimately familiar with many of the AWS services and their **application
    programming interfaces** (**APIs**). Not only will you build working applications,
    but you will also understand the choices of the services and patterns that are
    being used. Along the way, we will also show you tips and tricks for working on
    the AWS platform.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在庞大的 AWS 生态系统中工作将需要一个陡峭的学习曲线。新用户很容易被 AWS 提供的众多服务所压倒。在本书中，我们将教授你开发智能解决方案所需的模式和实践，以及
    AWS 平台提供的众多服务。你将深入了解许多 AWS 服务及其**应用程序接口**（**APIs**）。你不仅将构建可工作的应用程序，还会理解使用这些服务和模式的选择。过程中，我们还将向你展示一些在
    AWS 平台上工作的技巧和窍门。
- en: AWS is composed of a huge number of services, and it is still growing. There
    are countless books and online resources that dive deeper into various subsets
    of these services. In this book, we will be focusing on some of the AWS services
    that work well together to help you build intelligent-enabled applications. We
    will cover most of the ML services, as well as various services for compute, storage,
    networking, and databases. Keep in mind that it is beyond the scope of this book
    to cover all the aspects of these services, let alone every AWS service.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 由大量服务组成，并且仍在不断增长。关于这些服务的各种子集，已经有无数书籍和在线资源进行了深入探讨。在本书中，我们将重点介绍一些 AWS 服务，这些服务能够很好地协同工作，帮助您构建智能化应用程序。我们将涵盖大部分
    ML 服务，以及计算、存储、网络和数据库等各种服务。请记住，本书无法涵盖这些服务的所有方面，更不用说涵盖每一项 AWS 服务了。
- en: Overview of AWS AI offerings
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS AI 产品概述
- en: To better understand AWS AI offerings, we can group the services into two main
    groups.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 AWS AI 产品，我们可以将服务分为两个主要组。
- en: 'The following diagram shows the subsets of AWS AI capabilities and AWS ML platforms
    that we will be covering in this book, organized by the two groups:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了本书将涉及的 AWS AI 功能和 AWS ML 平台的子集，并按两个组进行组织：
- en: '![](img/ed0dbd0d-265b-444a-842c-f93ab92375f9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed0dbd0d-265b-444a-842c-f93ab92375f9.png)'
- en: The list of AWS ML services is growing every year. For example, Amazon Personalize,
    Forecast, Textract, and DeepRacer were announced at the *AWS re:Invent 2018* conference,
    and were in limited preview. These services became available for general use around
    mid 2019.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: AWS ML 服务的列表每年都在增加。例如，Amazon Personalize、Forecast、Textract 和 DeepRacer 在 *AWS
    re:Invent 2018* 大会上发布，并且当时是有限预览。这些服务在 2019 年中期左右开始对公众开放。
- en: The first group in the preceding diagram are the AWS AI capabilities. These
    services are built on top of AWS pre-trained AI technologies. They work right
    *out of the box* to provide ready-made intelligence for your applications. You
    do not need to understand the AI techniques that make them tick, and you do not
    need to maintain the infrastructure to host them. AWS has done all the hard work
    for you, and has made these AI capabilities available via APIs. As AWS continuously
    improve these capabilities, your application will automatically get more intelligent
    without any effort on your part. These managed services can provide quick lifts
    to your applications, thus allowing intelligent solutions to be built quickly
    and economically.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上图中的第一个组是 AWS AI 功能。这些服务是建立在 AWS 预训练的 AI 技术之上的。它们直接 *开箱即用*，为您的应用程序提供现成的智能。您无需理解这些技术背后的
    AI 原理，也不需要维护托管它们的基础设施。AWS 已经为您完成了所有艰难的工作，并通过 API 提供这些 AI 功能。随着 AWS 不断改进这些功能，您的应用程序将自动变得更加智能，而您无需做任何额外的努力。这些托管服务能够快速提升您的应用程序，使得智能解决方案得以快速且经济地构建。
- en: 'These AWS AI capabilities are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些 AWS AI 功能：
- en: '**Amazon Comprehend:** A NLP service that uses ML to find insights and relationships
    in text. This technology allows your applications to sift through mountains of
    unstructured text and dig up golden nuggets of information. This service can perform
    various tasks, including automatic classification of documents; identification
    of entities such as company names, people, and addresses; and extraction of topics,
    key phrases, and sentiments within the text.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Comprehend：** 一种使用机器学习（ML）技术分析文本中的洞察和关系的自然语言处理（NLP）服务。此技术使您的应用程序能够筛选大量非结构化文本，并挖掘出有价值的信息。这项服务可以执行各种任务，包括自动分类文档；识别实体，如公司名称、人物和地址；以及提取文本中的主题、关键短语和情感。'
- en: '**Amazon Lex:** A service for building conversational interfaces into applications
    using voice or text. This capability is built using deep learning techniques such
    as **automatic speech recognition** (**ASR**) and **natural language understanding**
    (**NLU**) in order to convert speech into text and to recognize intents within
    text. This is the same technology that is behind the Amazon Alexa voice assistant,
    and the same capability can be embedded into your own applications.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Lex：** 一项用于通过语音或文本将对话界面集成到应用程序中的服务。这项功能使用深度学习技术，如 **自动语音识别**（**ASR**）和
    **自然语言理解**（**NLU**），将语音转换为文本，并识别文本中的意图。这项技术与 Amazon Alexa 语音助手背后的技术相同，您也可以将这项技术嵌入到自己的应用程序中。'
- en: '**Amazon Polly:** A service that turns text into life-like speech that allows
    you to add a human voice to your application. The text-to-speech technology that
    is behind this service uses advanced deep learning technologies that can synthesize
    a voice with different languages, genders, and accents.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Polly：** 一种将文本转换为逼真语音的服务，可以为您的应用程序增加人类语音。支持这项服务的文本转语音技术使用先进的深度学习技术，可以合成具有不同语言、性别和口音的语音。'
- en: '**Amazon Rekognition:** A service that can analyze images and videos in order
    to identify objects, people, text, scenes, and activities. This service can also
    provide accurate facial analysis and recognition for various applications. The
    deep learning technology behind this service has been trained on billions of images
    and videos for a high level of accuracy on a variety of analysis tasks.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Rekognition：** 一种可以分析图像和视频以识别对象、人物、文本、场景和活动的服务。此服务还可以为各种应用程序提供精确的面部分析和识别。支持这项服务背后的深度学习技术已在数十亿张图像和视频上进行了训练，以在多种分析任务上实现高精度。'
- en: '**Amazon Transcribe:** An ASR service that provides speech-to-text capabilities
    to your applications. This technology allows your applications to analyze stored
    audio files or live audio streams, and get transcription text in real time.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Transcribe：** 一个提供语音到文本能力的ASR服务，可以为您的应用程序提供此技术。此技术允许您的应用程序分析存储的音频文件或实时音频流，并实时获取转录文本。'
- en: '**AWS Translate:** A neural machine translation service that delivers natural
    and fluent language translation. This service is backed by deep learning models
    that can provide accurate and natural sounding translations for many languages.
    You can even configure this service with custom language models that can include
    brand names, product names, and other custom terms.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Translate：** 一种提供自然流畅语言翻译的神经机器翻译服务。这项服务由能够提供准确和自然音质翻译的深度学习模型支持。您甚至可以配置此服务以包括品牌名称、产品名称和其他自定义术语的自定义语言模型。'
- en: 'The second group in the preceding diagram are the AWS ML platforms. These services
    are fully managed infrastructures and toolsets that help developers build and
    run their custom AI capabilities via ML. AWS provides the development constructs
    and handles the ML training compute resources in order to make developing custom
    AI capabilities easier. The AI practitioners are responsible for designing the
    inner workings of these AI capabilities. This might include: the collection and
    cleaning of training data; selection of ML libraries and algorithms; tuning and
    optimization of ML models; and designing and the development of interfaces to
    access the AI capabilities. Leveraging the AWS ML platforms to build custom AI
    capabilities is definitely more involved than using the managed AI services, but
    this group of services gives you the most flexibility to create innovative solutions.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述图表中的第二组是AWS ML平台。这些服务是完全托管的基础架构和工具集，帮助开发人员通过ML构建和运行其自定义AI能力。AWS提供开发构造并处理ML训练计算资源，以便更轻松地开发自定义AI能力。AI从业者负责设计这些AI能力的内部工作原理。这可能包括：收集和清洗训练数据；选择ML库和算法；调整和优化ML模型；设计和开发接入AI能力的界面。利用AWS
    ML平台构建自定义AI能力肯定比使用托管AI服务更为复杂，但这组服务为您创建创新解决方案提供了最大的灵活性。
- en: 'The AWS ML platform we will be covering in this book is: **Amazon SageMaker**—A
    fully managed service that covers the entire ML workflow. With SageMaker, you
    can collect and process your training data; you can choose your ML algorithms
    and ML libraries, including TensorFlow, PyTorch, MXNet, Scikit-learn, and so on;
    you can train the ML models on ML-optimized compute resources; and you can tune
    and deploy the resulting models to provide AI capabilities that are specifically
    created for your applications.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将涵盖的AWS ML平台是：**Amazon SageMaker**—一个完全托管的服务，涵盖整个ML工作流程。使用SageMaker，您可以收集和处理训练数据；可以选择ML算法和ML库，包括TensorFlow、PyTorch、MXNet、Scikit-learn等；可以在ML优化的计算资源上训练ML模型；并可以调整和部署生成的模型，为您的应用程序提供专门创建的AI能力。
- en: We highly recommend that you leverage the AWS-managed AI services as much as
    you can first. Only when there is a need for custom AI capabilities should you
    then build them with the AWS AI ML platform.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您尽可能首先利用AWS托管的AI服务。只有在需要自定义AI能力时，才应使用AWS AI ML平台构建它们。
- en: Hands-on with AWS services
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与AWS服务一起实践
- en: Without further ado, let's get our hands dirty with a few AWS services. The
    services that we will use and the tasks that we will perform in this section will
    set you up for intelligent-enabled application development on AWS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不再废话，让我们动手操作一些 AWS 服务。本节中我们将使用的服务和执行的任务将为你在 AWS 上进行智能应用开发打下基础。
- en: Creating your AWS account
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的 AWS 账户
- en: 'If you don''t already have an account with AWS, you can sign up for one at
    [https://aws.amazon.com/](https://aws.amazon.com/) and then click on the **Sign
    Up** button. You will see the following screen:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有 AWS 账户，可以在[https://aws.amazon.com/](https://aws.amazon.com/)注册一个，然后点击**注册**按钮。你将看到以下屏幕：
- en: '![](img/403f0134-f0dc-4648-bbbe-e275d86d07dc.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/403f0134-f0dc-4648-bbbe-e275d86d07dc.png)'
- en: Your AWS account gives you access to all services in AWS on demand. But don't
    worry – with AWS' pay-as-you-go pricing model, you only pay for the services that
    you actually use, at industry-leading affordable prices. If this is the first
    time you are signing up for an AWS account, your account automatically includes
    12 months of free tier access. The free tier offers a certain amount of AWS services
    for free, including compute, storage, database, and API calls. There are even
    non-expiring free resources after the 12 month free tier period. Visit [https://aws.amazon.com/free](https://aws.amazon.com/free)
    for more details.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 AWS 账户让你可以按需访问 AWS 上的所有服务。但不用担心——通过 AWS 的按使用付费定价模式，你只需为实际使用的服务付费，而且价格具有行业领先的亲民水平。如果这是你首次注册
    AWS 账户，你的账户会自动获得 12 个月的免费套餐访问权限。免费套餐提供一定数量的 AWS 服务免费使用，包括计算、存储、数据库和 API 调用。免费套餐期满后，还有一些永不过期的免费资源。详情请访问[https://aws.amazon.com/free](https://aws.amazon.com/free)。
- en: Navigating through the AWS Management Console
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 管理控制台中导航
- en: 'Now, let''s get familiar with the AWS Management Console. The first time you
    log in to your AWS account, you will see the AWS Management Console. It might
    look something like the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们熟悉一下 AWS 管理控制台。第一次登录 AWS 账户时，你将看到 AWS 管理控制台。它可能看起来像下面的截图：
- en: '![](img/3587cef8-2520-4995-bca7-f2600280c74f.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3587cef8-2520-4995-bca7-f2600280c74f.png)'
- en: The AWS Management Console is a web interface where you manage the AWS cloud
    platform. Through this console, you can start, monitor, and stop various resources
    such as cloud compute and cloud storage; you can manage your AWS account settings,
    including monthly billing, and fine-grained access control; and you can even get
    access to educational resources to help you get started on the various services
    that are offered.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 管理控制台是一个网页界面，你可以在其中管理 AWS 云平台。通过这个控制台，你可以启动、监控和停止各种资源，例如云计算和云存储；你可以管理你的
    AWS 账户设置，包括月度账单和细粒度访问控制；你甚至可以访问教育资源，帮助你入门使用 AWS 提供的各种服务。
- en: The AWS Management Console is one of three ways you can interact with the AWS
    cloud platform. The other two methods are the AWS **Command-line Interface** or
    **CLI** and the AWS **Software Development Kit** or **SDK**. We will cover these
    other methods later in this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 管理控制台是你与 AWS 云平台交互的三种方式之一。其他两种方式分别是 AWS **命令行界面**（CLI）和 AWS **软件开发工具包**（SDK）。我们将在本章稍后讨论这两种方式。
- en: Finding AWS services
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找 AWS 服务
- en: On the AWS Management Console, you can click on the **Services** tab at the
    top-left corner of the console. Here, you will see the plethora of AWS services
    organized into groups. You can also search for services by name; searching is
    usually the faster way to navigate to a particular service that you are looking
    for.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 管理控制台上，你可以点击控制台左上角的**服务**选项卡。在这里，你将看到按照组别组织的各种 AWS 服务。你也可以通过名称搜索服务；搜索通常是快速找到你所需服务的方式。
- en: 'Your **Services** tab should look similar to this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你的**服务**选项卡应该看起来像这样：
- en: '![](img/ed39c186-2ee6-4b06-93e9-f4c1e759ab83.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed39c186-2ee6-4b06-93e9-f4c1e759ab83.png)'
- en: Choosing the AWS region
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 AWS 区域
- en: Not every AWS service that you see in the list is available in every AWS region.
    AWS is a global cloud infrastructure that is built around the concept of AWS regions.
    An AWS region is a physical location in the world where you can operate your cloud
    applications. Depending on the region in which you choose to operate, some services
    might not be available. For example, when we created our account, the region defaulted
    to US East (Ohio). At the time of writing, the Ohio region does not have the Amazon
    Lex service.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不是每个AWS服务都可以在每个AWS区域使用。AWS是一个全球云基础设施，基于AWS区域的概念构建。AWS区域是你可以运行云应用程序的世界上一个物理位置。根据你选择操作的区域，某些服务可能不可用。例如，在我们创建账户时，默认区域是US
    East（Ohio）。在写作时，俄亥俄区域没有Amazon Lex服务。
- en: 'If a service is not available in a region, you will see a **Region Unsupported**
    message, similar to this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个服务在某个区域不可用，你会看到**区域不支持**的消息，类似于这样：
- en: '![](img/6cbcad30-ef60-43de-9377-60dfdb8a6920.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cbcad30-ef60-43de-9377-60dfdb8a6920.png)'
- en: For this book, we recommend that you change the region to **US East** (**N.
    Virginia**), also known as region **us-east-1**. This Northern Virginia region
    has all of the AWS services available, and it is also the region that gets the
    newest AWS services first.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们建议你将区域更改为**US East**（**N. Virginia**），也就是**us-east-1**区域。这个北弗吉尼亚区域提供了所有AWS服务，而且是首批获得最新AWS服务的区域。
- en: 'Select the Northern Virginia region by clicking on the region name next to
    your AWS account name. It is important for you to do this to ensure that the examples
    and projects in this book are consistent. The **US East (N. Virginia)** region
    is the first choice in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 点击AWS账户名旁边的区域名称，选择北弗吉尼亚地区。这一步很重要，以确保本书中的示例和项目保持一致。**US East (N. Virginia)**区域是以下截图中的首选：
- en: '![](img/c6e30ac8-d2e3-412a-893e-358957b9e304.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6e30ac8-d2e3-412a-893e-358957b9e304.png)'
- en: Test driving the Amazon Rekognition service
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Amazon Rekognition服务
- en: 'Let''s try out one of the AWS-managed AI services, Amazon Rekognition, to get
    a feel for the power of AWS''s AI offerings:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下AWS托管的AI服务——Amazon Rekognition，感受一下AWS的AI能力：
- en: Click on **Rekognition** from the list of services under **Machine Learning**
    to navigate to its home page.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**机器学习**下的服务列表中点击**Rekognition**，进入其主页。
- en: Rekognition provides a collection of visual analyses for images and videos.
    With Rekognition, you can quickly add powerful capabilities to detect objects,
    faces, and text in images and videos. You do not need to understand the deep learning
    technologies behind these capabilities in order to add them to your applications.
    We will create several such applications in the hands-on projects throughout this
    book, but for now, let's see Rekognition's capabilities in action with one of
    the provided demos.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Rekognition提供了一套视觉分析功能，用于分析图像和视频。通过Rekognition，你可以快速为图像和视频中的物体、面孔和文字检测添加强大的功能。你无需理解这些功能背后的深度学习技术，就可以将它们添加到你的应用中。在本书中的实践项目中，我们将创建多个这样的应用，但现在，让我们通过其中一个演示，看看Rekognition的能力如何发挥作用。
- en: From the Amazon Rekognition home page's left-hand pane, click on **Object and
    scene detection** under the **Demos** section.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Amazon Rekognition主页的左侧窗格中，点击**演示**部分下的**物体和场景检测**。
- en: AWS has already provided a couple of sample images to show off the power of
    Rekognition. In one of the images, you and I can easily see that a skateboarder
    is performing a trick on a road with two rows of parked cars on either side. This
    is actually a pretty busy image for computers to perform analysis on.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS已经提供了几张示例图片来展示Rekognition的强大功能。在其中一张图片中，你和我都可以轻松看到，一个滑板运动员正在一条路上做特技，路两侧停满了车。这对于计算机来说是一个相当繁忙的图像，进行分析并不容易。
- en: So, how did Rekognition do? Rekognition has drawn boxes around the objects that
    it has detected, and you can mouse over the boxes in order to see what Rekognition
    thinks each object is.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那么，Rekognition的表现如何呢？Rekognition已经为它检测到的物体画上了框，你可以将鼠标悬停在这些框上，以查看Rekognition认为每个物体是什么。
- en: 'Here is the Rekognition demo page with the skateboarder image detection results:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Rekognition演示页面，展示了滑板运动员图像的检测结果：
- en: '![](img/18d917db-bb3d-4c7a-8ff1-c8f6813a7e14.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18d917db-bb3d-4c7a-8ff1-c8f6813a7e14.png)'
- en: On the right-hand side of the image, under **Results**, Rekognition also provides
    the confidence levels for all the objects that it has detected.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像的右侧，在**结果**下，Rekognition还提供了它检测到的所有物体的置信度水平。
- en: 'There are also **Request** and **Response** underneath the confidence levels.
    In fact, this demo page is actually making API calls to Rekognition''s object
    and scene detection API on your behalf. If you expand the request, it reveals
    some details about the API call:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在置信度等级下方还有**请求**和**响应**。实际上，这个演示页面实际上是在代表你调用 Rekognition 的对象和场景检测 API。如果你展开请求，它会显示有关
    API 调用的一些细节：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The request is in the **JavaScript Object Notation** or **JSON** format. The
    request specifies an image that is to be analyzed by the Rekognition API. More
    specifically, this is an image that's stored as an object in the Amazon **Simple
    Storage Service** or **S3**. From the request, we can tell that the image is stored
    in the `console-sample-images` bucket, with the name of `skateboard.jpg`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请求采用**JavaScript 对象表示法**（**JSON**）格式。请求指定要通过 Rekognition API 分析的图像。更具体地说，这是一个作为对象存储在
    Amazon **简单存储服务**（**S3**）中的图像。从请求中可以看出，图像存储在 `console-sample-images` 桶中，名称为 `skateboard.jpg`。
- en: This demo application is using the Amazon S3 service to store the sample images,
    and Rekognition can directly analyze images that are stored in S3\. We will be
    leveraging this pattern in many of the projects in later chapters as well. As
    we mentioned earlier, the power of the AWS ecosystem is the interoperability of
    many of its services.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示应用程序使用 Amazon S3 服务来存储示例图像，Rekognition 可以直接分析存储在 S3 中的图像。在后续章节的许多项目中，我们也将利用这种模式。正如我们之前提到的，AWS
    生态系统的强大之处在于其众多服务之间的互操作性。
- en: The response is also in JSON format. The response contains a lot of information
    about the objects that were detected in the sample image. This information includes
    the name of the object, the confidence of the detection, and even the coordinates
    for the bounding box where each object is located within the image. In our projects,
    we will learn how to process such JSON responses in order to use the results in
    our intelligent-enabled applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 响应也是 JSON 格式。响应包含了有关在示例图像中检测到的对象的许多信息。此信息包括对象的名称、检测的置信度，甚至是每个对象在图像中所在边界框的坐标。在我们的项目中，我们将学习如何处理这种
    JSON 响应，以便在智能化应用程序中使用结果。
- en: 'In this demo, you can also upload your own images to test out Rekognition.
    Find an image and give it a try. When you upload your image to the demo page,
    you will notice that the request that is sent to the API is slightly different.
    In the request, you will see the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，你还可以上传自己的图像来测试 Rekognition。找一张图片试试看。当你将图片上传到演示页面时，你会注意到发送到 API 的请求稍有不同。在请求中，你会看到以下内容：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This time, instead of specifying an image in S3, the raw bytes of the image
    that was uploaded were sent directly to the Rekognition API. This Rekognition
    API has multiple variations: one that takes reference to an S3 object and another
    that takes the raw bytes of an image. Which variation you choose depends on the
    nature of your application.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，上传的图像的原始字节直接发送到 Rekognition API，而不是指定 S3 中的图像。这个 Rekognition API 有多个变体：一个是引用
    S3 对象，另一个是接受图像的原始字节。你选择哪个变体取决于你应用程序的性质。
- en: Working with S3
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 S3
- en: The Amazon S3 service is one of the first services that was offered by AWS.
    S3 provides secure, durable, and scalable object storage at a very low cost. Object
    storage just means that the things you store in S3 are accessible at the file
    level, instead of at the block or byte level. S3 is a very flexible service, with
    many usage patterns. You can read more about Amazon S3 at [https://aws.amazon.com/s3](https://aws.amazon.com/s3).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon S3 服务是 AWS 提供的首批服务之一。S3 提供安全、耐用、可扩展的对象存储，并且成本非常低。对象存储意味着你存储在 S3 中的内容是按文件级别进行访问的，而不是按块或字节级别进行访问。S3
    是一个非常灵活的服务，具有多种使用模式。你可以在 [https://aws.amazon.com/s3](https://aws.amazon.com/s3)
    上查看更多有关 Amazon S3 的信息。
- en: Let's start working with Amazon S3 by creating a bucket. You can think of a
    bucket as a folder that can hold an unlimited number of files (objects).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 Amazon S3 创建一个桶。你可以将桶视为一个文件夹，它可以存储无限数量的文件（对象）。
- en: 'Navigate to the Amazon S3 home page from the Amazon Management Console by clicking
    on the **Services** tab in the top-left corner, and then click or search for **S3**
    under **Storage**. If this is your first time using S3, you will see a screen
    similar to this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Amazon 管理控制台的左上角点击**服务**标签，然后在**存储**下点击或搜索**S3**，即可导航到 Amazon S3 的主页。如果这是你第一次使用
    S3，你将看到一个类似于这个的页面：
- en: '![](img/d7e2ebe2-d61f-4af1-bdfe-e485c7cd2ad5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7e2ebe2-d61f-4af1-bdfe-e485c7cd2ad5.png)'
- en: In this book, we will be leveraging S3 a lot in our hands-on projects. We will
    be using S3 for three main purposes. The first purpose is storing media files
    and other contents for other AWS services to access. Many of the AWS AI services
    are tightly integrated with S3; for example, this is the pattern that we have
    seen in the Rekognition demo. The second purpose is hosting entire static websites
    with S3, including HTML files, images, videos, and client-side JavaScript. This
    gives us the ability to host interactive web applications without the need for
    traditional web servers. The third purpose is using S3 as a data store for data
    collection, processing, and analytics tasks when we train our custom ML models.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将在实践项目中大量使用 S3。我们将把 S3 用于三个主要目的。第一个目的是存储媒体文件和其他内容，以便其他 AWS 服务访问。许多 AWS
    AI 服务与 S3 紧密集成；例如，我们在 Rekognition 演示中看到了这种模式。第二个目的是使用 S3 托管整个静态网站，包括 HTML 文件、图像、视频和客户端
    JavaScript。这使我们能够托管互动式 web 应用，而无需传统的 Web 服务器。第三个目的是将 S3 用作数据存储，用于收集、处理和分析任务，尤其是在训练我们自定义的机器学习模型时。
- en: There is a range of S3 storage classes that have been redesigned for different
    use cases and cost levels. For your enterprise-grade application, you might need
    to take advantage of the different storage classes in order to balance performance
    and cost. In this book, we will be using the Amazon S3 standard class for general-purpose
    storage. This is the default class and it will be sufficient for the projects
    in this book.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: S3 存储类有多种，这些存储类已经针对不同的使用场景和成本层级进行了重新设计。对于您的企业级应用，您可能需要利用不同的存储类来平衡性能和成本。在本书中，我们将使用
    Amazon S3 标准存储类进行通用存储。这是默认的存储类，足以满足本书中的项目需求。
- en: 'Click on the **Create bucket** button to create a new bucket:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **创建桶** 按钮以创建一个新桶：
- en: '![](img/2f979d10-06ee-4d44-b67d-b158865ef69a.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f979d10-06ee-4d44-b67d-b158865ef69a.png)'
- en: 'The first screen in the model asks for three pieces of information: the **Bucket
    name**, the **Region**, and **Copy settings from an existing bucket**. Since this
    is your first bucket, we can ignore the third piece of information.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的第一屏要求提供三项信息：**桶名称**、**区域** 和 **从现有桶复制设置**。由于这是您的第一个桶，因此我们可以忽略第三项信息。
- en: The S3 bucket name must be globally unique. This means that every bucket that's
    ever created by you and others must have a unique name. Coming up with a globally
    unique bucket name can be challenging; you cannot expect bucket names such as
    `contents`, `website`, or `data` to still be available. The S3 bucket names must
    be DNS-compliant so that you can follow similar patterns for the domain names.
    For example, if we choose `aws.ai` as our root domain, we can create buckets such
    as `contents.aws.ai`, `website.aws.ai`, and `data.aws.ai` to avoid conflicts.
    Think about which root domain you would like to use.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: S3 桶名称必须是全球唯一的。这意味着您和其他人创建的每个桶名称都必须是唯一的。创建一个全球唯一的桶名称可能会很具挑战性；您不能指望像 `contents`、`website`
    或 `data` 这样的名称仍然可用。S3 桶名称必须符合 DNS 标准，以便您可以遵循类似域名的命名模式。例如，如果我们选择 `aws.ai` 作为根域名，则可以创建诸如
    `contents.aws.ai`、`website.aws.ai` 和 `data.aws.ai` 之类的桶名称以避免冲突。请考虑一下您希望使用的根域名。
- en: You don't have to own the domain to name the buckets with a given root domain
    name; however, if you do own a domain, it would be a good idea to use that as
    your root domain.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要拥有域名就能使用指定的根域名命名桶；不过，如果您拥有域名，最好将其作为根域名使用。
- en: You must also specify the region of your bucket. This will determine in which
    physical region in the world your objects will be stored. The AWS regions are
    completely isolated from each other by design. Objects stored in one region cannot
    be accessed by services and applications running in a different region. This can
    be important if your line of business has high-performance requirements that need
    your applications and data to be located closer to your customers. This can also
    be important if your line of business must comply with industry and government
    regulations that require your applications and data to be located within a certain
    geographic location.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须指定桶的区域。这将决定您的对象将在全球的哪个物理区域存储。AWS 各区域之间是完全隔离的设计。存储在一个区域的对象不能被运行在另一个区域的服务和应用访问。如果您的业务线有高性能要求，需要将应用和数据部署得离客户更近，这一点就非常重要。如果您的业务线必须遵守行业和政府规定，要求应用和数据必须位于某个特定地理位置，这一点同样重要。
- en: For the projects in this book, we do not have either of these concerns. Therefore,
    for consistency, let's pick the **US East (N. Virginia)** region again.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中的项目，我们不需要担心这两个问题。因此，为了保持一致性，我们再次选择**美国东部（弗吉尼亚北部）**区域。
- en: 'Here''s what your **S3 buckets** page might look like after creation, but of
    course, with different bucket names:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你创建后的**S3存储桶**页面的样子，当然，存储桶名称会不同：
- en: '![](img/fac9be43-0b74-4f77-90f2-31a75847bc46.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fac9be43-0b74-4f77-90f2-31a75847bc46.png)'
- en: 'Once you have created the S3 buckets, go ahead and click on the **contents.aws.ai**
    bucket. You will see a screen similar to this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了S3存储桶，点击**contents.aws.ai**存储桶。你将看到类似这样的界面：
- en: '![](img/86da17a9-c216-45c0-bc7b-4d88376a0fe3.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86da17a9-c216-45c0-bc7b-4d88376a0fe3.png)'
- en: On this screen, you will be able to upload files to the bucket, configure bucket
    properties, set access permissions, and perform advanced settings such as life
    cycle rules and cross-region replication. We will come back to some of these settings
    later on, but for now, upload one or more photos that you want to analyze with
    the Rekognition service. You can click on the **Upload** button or simply drag
    and drop the photos to this page to upload them. We can leave all the file settings
    as default for now.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个界面，你将能够上传文件到存储桶，配置存储桶属性，设置访问权限，并执行一些高级设置，比如生命周期规则和跨区域复制。我们稍后会回到这些设置，但现在请上传一些你想用Rekognition服务分析的照片。你可以点击**上传**按钮，或将照片直接拖放到页面上进行上传。我们现在可以将所有文件设置保持为默认。
- en: Congratulations, you just stored some files in the AWS cloud platform with 99.999999999%
    durability and 99.99% availability! In other words, if you store 10,000 files
    in S3, statistically, you would lose one file every 10 million years, and all
    of the files are available for your application to access 525,547.4 minutes out
    of 525,600 minutes every year.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，刚刚将文件存储到AWS云平台，具有99.999999999%的持久性和99.99%的可用性！换句话说，如果你在S3中存储10,000个文件，按统计学来说，你将每1000万年丢失一个文件，而且所有文件在每年525,600分钟中的525,547.4分钟里都可以被你的应用程序访问。
- en: Identity and Access Management
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份与访问管理
- en: The next AWS service we will be looking at is the **Identity and Access Management**
    or **IAM**. IAM allows you to manage access to other AWS services and resources
    securely. AWS offers enterprise-grade security and access control, which is great
    for building production-ready applications in the cloud. However, if you are new
    to AWS, working around IAM can be challenging at first. If the necessary access
    was not granted, the services will simply refuse to perform the desired actions.
    We will be working with IAM quite a lot to build the projects in this book. You
    will get familiar with concepts such as users, groups, and roles so that you can
    provide your applications with the necessary access to the required services.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要看的AWS服务是**身份与访问管理**（**IAM**）。IAM允许你安全地管理对其他AWS服务和资源的访问。AWS提供企业级的安全性和访问控制，非常适合在云中构建生产级应用程序。然而，如果你是AWS新手，初次使用IAM可能会有些挑战。如果没有授予必要的访问权限，服务将直接拒绝执行所需的操作。我们将在本书中的项目中频繁使用IAM，你将逐渐熟悉诸如用户、组和角色等概念，从而为你的应用程序提供所需的服务访问权限。
- en: 'Let''s go to the IAM home page by clicking on **IAM** from the list of services
    under **Security, Identity, and Compliance** in order to navigate to its home
    page. The IAM home page should look similar to this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问IAM主页，点击**安全、身份与合规性**下的**IAM**服务列表中的**IAM**，你将导航到其主页。IAM主页应该类似这样：
- en: '![](img/2cd3c0bc-d0ca-433c-97e5-fdf4767f07f5.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cd3c0bc-d0ca-433c-97e5-fdf4767f07f5.png)'
- en: The IAM dashboard gives you an overview of the IAM resources and their security
    status. So far, we don't have any users or groups, but AWS has created two roles
    by default.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: IAM仪表板为你提供IAM资源及其安全状态的概览。目前我们没有任何用户或组，但AWS默认创建了两个角色。
- en: We have been accessing the AWS Management Console using our root account. This
    account, by default, can only access the AWS Management Console; it will not be
    able to interact with AWS services programmatically. Let's create a new user with
    programmatic access for the hands-on projects.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用根账户访问AWS管理控制台。默认情况下，这个账户只能访问AWS管理控制台；它无法通过程序化方式与AWS服务交互。我们现在创建一个具有程序化访问权限的新用户，供动手项目使用。
- en: 'Click on **Users** on the left-hand pane, and then click on the **Add user**
    button:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧面板点击**用户**，然后点击**添加用户**按钮：
- en: '![](img/72e23788-836c-45f7-9bdd-47729651fca9.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72e23788-836c-45f7-9bdd-47729651fca9.png)'
- en: After entering the desired username, be sure to select only **Programmatic access**.
    Programmatic access will enable an access key ID and a secret access key pair.
    This key pair can be used by AWS APIs, the CLI, and the SDK. It is good practice
    to limit each user to either programmatic access or AWS Management Console access.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入所需的用户名后，确保只选择**Programmatic access**。编程访问将启用访问密钥ID和秘密访问密钥对。这个密钥对可以被AWS API、CLI和SDK使用。通常的做法是将每个用户限制为编程访问或AWS管理控制台访问。
- en: 'Here, we created an `aws_ai` user with only programmatic access:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个只有编程访问权限的`aws_ai`用户：
- en: '![](img/00d5aee4-ff85-4449-a129-8cc2f296223e.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00d5aee4-ff85-4449-a129-8cc2f296223e.png)'
- en: On the next screen, let's also create a group to manage the permissions. We
    recommend adding users to one or more groups with the necessary permissions, rather
    than attaching the individual permissions and policies to the users directly.
    This way, it's much easier to manage the permissions when there are numerous users
    that require different permissions in your organization.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一屏幕上，我们还需要创建一个组来管理权限。我们建议将用户添加到一个或多个具有必要权限的组中，而不是直接将单独的权限和策略附加到用户。这种方式更容易管理权限，尤其是当你的组织中有很多用户需要不同权限时。
- en: 'Click on the **Create group** button under **Add user to group**, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Create group**按钮，位于**Add user to group**下，如下所示：
- en: '![](img/fcc40ac8-c777-4c6f-a92b-39b206e22457.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcc40ac8-c777-4c6f-a92b-39b206e22457.png)'
- en: 'For our group, let''s name it `Developer`, and then attach the **AdministratorAccess**
    policy to this group:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的组，命名为`Developer`，然后将**AdministratorAccess**策略附加到该组：
- en: '![](img/264ded77-6d3d-4e62-b7bd-4adf8664490b.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/264ded77-6d3d-4e62-b7bd-4adf8664490b.png)'
- en: We do not need to create any tags, so just review and create the user.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无需创建任何标签，因此只需审核并创建该用户。
- en: For simplicity, we are attaching a very powerful policy with full access to
    AWS services. For your production environment, you will want to be more fine-grained
    with your permissions and policies. You always want to follow the principle of
    least privilege when it comes to system security.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简便起见，我们附加了一个功能强大的策略，允许完全访问AWS服务。对于你的生产环境，你需要更细致地管理权限和策略。在系统安全性方面，始终遵循最小权限原则。
- en: 'Once the user has been created, you will see the **Success** screen:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用户创建完成后，你将看到**Success**屏幕：
- en: '![](img/db900fb7-a575-4434-81c9-eefb203dab1c.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db900fb7-a575-4434-81c9-eefb203dab1c.png)'
- en: On this screen, you have the option to view or download the access key pair
    that we mentioned earlier. This is the only time that the secret access key can
    be displayed or downloaded, so go ahead and download the CSV file onto your computer.
    We will need this key pair when we use the AWS CLI and the AWS SDK later in this
    chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕上，你可以选择查看或下载我们之前提到的访问密钥对。这是唯一一次可以显示或下载密钥对，因此请将CSV文件下载到你的计算机上。稍后在本章节中，我们需要在使用AWS
    CLI和AWS SDK时用到这个密钥对。
- en: The access key pair is equivalent to your username and password combination.
    It is vital that you do not share your key pairs with others, as it will give
    other access to your AWS resources, but leaving you to foot the bill. Also, never
    hardcode the key pairs in the source code and then check them into a public source
    code repository. There are automated bots out there that scan the code repositories
    for AWS key pairs in order to steal resources to perform hacking or cryptocurrency
    mining activities.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 访问密钥对相当于你的用户名和密码组合。务必不要与他人共享你的密钥对，因为它将授予他人访问你的AWS资源的权限，但账单却会由你来承担。另外，切勿在源代码中硬编码密钥对，并将其提交到公共源代码仓库。现在有一些自动化机器人会扫描代码库，寻找AWS密钥对，以窃取资源进行黑客攻击或加密货币挖掘。
- en: 'Congratulations, you just used the IAM service to create a user and added it
    to a group with administrative permissions! If you go back to the dashboard, you
    will see that we have added it to the IAM resources and made progress regarding
    the security status:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你刚刚使用IAM服务创建了一个用户并将其添加到具有管理员权限的组！如果你返回到仪表板，你会看到我们已经将其添加到IAM资源中，并且在安全状态方面取得了进展：
- en: '![](img/80055712-0d67-4b45-948d-e61aec720884.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80055712-0d67-4b45-948d-e61aec720884.png)'
- en: We highly recommend that you complete the remaining two steps in the security
    status section. The first remaining step is to activate **multi-factor authentication**
    (**MFA**) on your root account. Activating MFA will add extra security on your
    root account by requiring anyone to log in with both the root account password
    (something you know) and a one-time token from an authentication device (something
    you have), for example, your smartphone. The second remaining step is to set up
    a IAM password policy to ensure that secure password practices are followed. You
    can define the password's length, complexity, expiration period, and more.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议你完成安全状态部分剩余的两个步骤。第一个剩余步骤是激活 **多因素认证**（**MFA**）以保护你的根账户。激活 MFA 会增加根账户的安全性，要求任何人登录时必须同时提供根账户密码（你知道的东西）和来自身份验证设备的动态令牌（你拥有的东西），例如智能手机。第二个剩余步骤是设置
    IAM 密码策略，以确保遵循安全的密码实践。你可以定义密码的长度、复杂度、过期期限等。
- en: Getting familiar with the AWS CLI
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉 AWS CLI
- en: The AWS CLI is a tool that allows you to interact with AWS services by issuing
    commands from your Terminal shell. Earlier in this chapter, we interacted with
    a few AWS services through the web-based AWS Management Console. While the web
    console is the easiest interface for new users to get familiar with AWS, it can
    be cumbersome to use during the software development process. With the AWS CLI
    tool, you get all of the same functionalities as the web console but at your fingertips
    in the Terminal shell, where most of your development tools reside. This way,
    your development process is more fluid without the context switching to and from
    the browser.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 是一个允许你通过在终端 shell 中发出命令与 AWS 服务交互的工具。在本章之前，我们通过基于 Web 的 AWS 管理控制台与一些
    AWS 服务进行了交互。虽然 Web 控制台是新用户熟悉 AWS 的最简单界面，但在软件开发过程中使用起来可能会显得繁琐。通过 AWS CLI 工具，你可以获得与
    Web 控制台相同的所有功能，但这些功能直接在终端 shell 中触手可得，而终端是你大多数开发工具所在的地方。这样，你的开发过程将更加流畅，无需频繁切换到浏览器。
- en: The AWS CLI is primarily distributed via the Python package manager; therefore,
    you need to install Python on your development machine first. Note that we will
    be using Python for the development of the projects as well. It is important that
    you install Python by following the instructions in order to ensure the compatibility
    of your development environment later.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 主要通过 Python 包管理器分发；因此，你需要先在开发机器上安装 Python。请注意，我们将在开发项目中使用 Python。按照说明安装
    Python 非常重要，这样可以确保你以后开发环境的兼容性。
- en: Installing Python
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Python is available for all three major operating systems; macOS, Linux, and
    Microsoft Windows. There are installers, as well as documentation, at [https://www.python.org](https://www.python.org).
    This book is written for Python 3.7.x or higher (unless otherwise specified),
    and it is recommended that you use the most recent version available.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可用于所有三大主流操作系统：macOS、Linux 和 Microsoft Windows。你可以在 [https://www.python.org](https://www.python.org)
    上找到安装程序和文档。本书是针对 Python 3.7.x 或更高版本编写的（除非另有说明），建议你使用最新版本。
- en: Installing Python on macOS
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Python
- en: 'While Python is pre-installed on macOS, that version of Python is 2.7\. To
    install a newer version of Python, we recommend using a package manager for macOS
    called Homebrew. Homebrew is touted as the missing package manager for macOS;
    it simplifies the installation of many macOS software packages, including Python.
    To install Homebrew, follow the instructions on its website: [https://brew.sh](https://brew.sh).
    At the time of writing, the command to install Homebrew in the Terminal is as
    follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 已经预安装在 macOS 上，但该版本的 Python 是 2.7。要安装更新版本的 Python，我们建议使用一种名为 Homebrew
    的 macOS 包管理器。Homebrew 被誉为 macOS 缺失的包管理器；它简化了许多 macOS 软件包的安装，包括 Python。要安装 Homebrew，请按照其网站上的说明操作：[https://brew.sh](https://brew.sh)。在写作时，在终端中安装
    Homebrew 的命令如下：
- en: '[PRE2]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once Homebrew has been installed, we can install the latest Python and pip,
    the Python package management system, with the following commands in the Terminal
    prompt:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完 Homebrew 后，我们可以使用以下终端命令安装最新版本的 Python 和 pip，后者是 Python 包管理系统：
- en: '[PRE3]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Check whether the latest Python and pip version have been correctly linked
    on your system with the commands in the Terminal prompt:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用终端命令检查最新的 Python 和 pip 版本是否已经正确链接到你的系统：
- en: '[PRE4]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The outputs of these commands should state versions similar to 3.7+ and 18.0+,
    respectively.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令的输出应分别显示类似于 3.7+ 和 18.0+ 的版本号。
- en: Installing Python on Linux
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Python
- en: 'There are many different distributions of Linux available. The instructions
    to install Python might be different, depending on your specific Linux distribution.
    In general, you should first check to see if Python is already installed on your
    system in the Terminal:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的 Linux 发行版可供选择。安装 Python 的指令可能会有所不同，具体取决于你的 Linux 发行版。一般来说，你应该首先检查系统中是否已安装
    Python，可以在终端中运行以下命令：
- en: '[PRE5]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If Python or pip is not installed, or a different version is installed, install
    them with your Linux distribution''s package manager:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有安装 Python 或 pip，或安装了不同版本的 Python，可以通过 Linux 发行版的包管理器进行安装：
- en: 'For Debian derivatives such as Ubuntu, use `apt`:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Debian 衍生版本，如 Ubuntu，使用`apt`：
- en: '[PRE6]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For Red Hat derivatives such as Fedora, use `yum`:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Red Hat 衍生版本，如 Fedora，使用`yum`：
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For SUSE derivatives, use `zypper`:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 SUSE 衍生版本，使用`zypper`：
- en: '[PRE8]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Installing Python on Microsoft Windows
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上安装 Python
- en: There are different options for setting up the Python environment, depending
    on whether you are running Microsoft Windows 10 or an earlier version of Windows.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Python 环境有多种选择，具体取决于你使用的是 Microsoft Windows 10 还是较早版本的 Windows。
- en: Windows 10
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 10
- en: If you are running Windows 10, we highly recommend that you install the **Windows
    Subsystem for Linux** or **WSL**. WSL allows you to run a Linux distribution of
    your choice on the Windows operating system.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Windows 10，我们强烈建议你安装**Windows Subsystem for Linux**（**WSL**）。WSL 允许你在
    Windows 操作系统上运行你选择的 Linux 发行版。
- en: 'First, you need to enable the WSL, which is an optional feature within Windows
    10\. To do this, open PowerShell as the administrator and run the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要启用 WSL，这是 Windows 10 中的一个可选功能。为此，请以管理员身份打开 PowerShell，并运行以下命令：
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Restart your computer if prompted.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统提示，请重新启动计算机。
- en: 'Next, you can download and install your preferred Linux distribution from the
    Windows Store. At the time of writing, there are five Linux distributions available
    for the WSL: Ubuntu, OpenSUSE, SUSE Linux Enterprise Server, Debian GNU/Linux,
    and Kali Linux.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以从 Windows 商店下载并安装你喜欢的 Linux 发行版。截至本文撰写时，WSL 可用的 Linux 发行版有五个：Ubuntu、OpenSUSE、SUSE
    Linux Enterprise Server、Debian GNU/Linux 和 Kali Linux。
- en: Once your preferred Linux distribution has been installed, you can then follow
    the Python installation instructions for that particular Linux distribution.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了所需的 Linux 发行版，你就可以按照该发行版的 Python 安装说明进行操作。
- en: Earlier Windows versions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 早期版本的 Windows
- en: If you are running an earlier version of Windows, we recommend using the Anaconda
    Python distribution and package manager. The Anaconda installer, as well as its
    documentation, can be found at [https://www.anaconda.com/download](https://www.anaconda.com/download).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是较早版本的 Windows，建议使用 Anaconda Python 发行版和包管理器。你可以在 [https://www.anaconda.com/download](https://www.anaconda.com/download)
    找到 Anaconda 安装程序和相关文档。
- en: Installing the AWS CLI
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 AWS CLI
- en: 'Once Python has been successfully installed on your development machine, we
    can move on to installing the AWS CLI. The AWS CLI is primarily distributed via
    the Python package manager, `pip`, which we just installed. You can install and
    verify the AWS CLI with the following commands:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Python 在你的开发机器上成功安装，我们就可以继续安装 AWS CLI。AWS CLI 主要通过 Python 包管理器`pip`进行分发，而我们刚刚安装了它。你可以使用以下命令来安装并验证
    AWS CLI：
- en: '[PRE10]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the AWS CLI command is `aws`, even though the package we installed
    is `awscli`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，AWS CLI 的命令是`aws`，尽管我们安装的软件包是`awscli`。
- en: Configuring the AWS CLI
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 AWS CLI
- en: 'Before we can use the AWS CLI, we need to perform a few configuration steps.
    The fastest way to configure your AWS CLI is with the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 AWS CLI 之前，我们需要执行一些配置步骤。配置 AWS CLI 的最快方法是使用以下命令：
- en: '[PRE11]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The explanation of the preceding code is as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的解释如下：
- en: The first two items that we need to enter are the security credentials so that
    the CLI has the permissions to perform actions on your behalf. This is the key
    pair that is contained within the CSV file that we downloaded during the creation
    of a new user with the IAM service. Open the CSV file and copy and paste the access
    key ID and the secret access key into the configuration command prompt.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要输入的前两项是安全凭证，以便 CLI 可以代表你执行操作。这是我们在使用 IAM 服务创建新用户时下载的 CSV 文件中包含的密钥对。打开 CSV
    文件并将访问密钥 ID 和密钥访问密钥复制并粘贴到配置命令提示符中。
- en: Next, for the default region name, we will again use `us-east-1` for consistency
    throughout this book.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，对于默认区域名称，我们将在本书中保持一致，继续使用`us-east-1`。
- en: Finally, for the default output format, enter `json`. This will set the output
    for the AWS CLI to be JSON format.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，对于默认输出格式，输入 `json`。这将把 AWS CLI 的输出设置为 JSON 格式。
- en: 'The AWS configure command creates a hidden directory, `.aws`, in your user
    home directory, for example, `~/.aws` on macOS and Linux. In this directory, two
    files are created. One is `.aws/credentials`, with the following code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 配置命令会在您的用户主目录中创建一个隐藏目录 `.aws`，例如在 macOS 和 Linux 上是`~/.aws`。在该目录中，会创建两个文件。一个是
    `.aws/credentials`，其中包含以下代码：
- en: '[PRE12]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The other is `.aws/config`, with the following code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个文件是 `.aws/config`，其中包含以下代码：
- en: '[PRE13]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Locate these files on your system and verify their contents.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上找到这些文件，并验证其内容。
- en: 'In case you did not copy down or download the access key pair, you can obtain
    a new key pair in the AWS Management Console:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有记录或下载访问密钥对，可以在 AWS 管理控制台中获取新的密钥对：
- en: Navigate to the **IAM** service under the **Security, Identity, & Compliance**
    heading.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**安全、身份与合规**部分下，导航到**IAM**服务。
- en: In the **IAM** **Management Console**, click on **Users** on the right-hand
    pane and click on your username.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**IAM** **管理控制台**中，点击右侧窗格中的**用户**，然后点击您的用户名。
- en: On the user summary page, click on the **Security credentials** tab.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户总结页面，点击**安全凭证**标签。
- en: Under the **Access keys** section, click on the **Create access key** button
    and a new access key will be created for you.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**访问密钥**部分，点击**创建访问密钥**按钮，系统将为您创建一个新的访问密钥。
- en: Remember to delete the old key pair after the new one has been created.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记得在创建新密钥对后删除旧的密钥对。
- en: 'This is how your screen will look:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您的屏幕显示效果：
- en: '![](img/1680bf73-ce4f-45f4-b5c5-65e48b201e49.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1680bf73-ce4f-45f4-b5c5-65e48b201e49.png)'
- en: 'Remember to configure your AWS CLI with the following command, each time you
    change your access key:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 记得每次更改访问密钥时，都需要使用以下命令重新配置您的 AWS CLI：
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Enter your security credentials, default region, and default output format as
    we explained in the initial AWS CLI configuration.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的安全凭证、默认区域和默认输出格式，如我们在初始 AWS CLI 配置中所述。
- en: 'To test whether the AWS CLI is configured properly, issue the following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 AWS CLI 是否配置正确，请执行以下命令：
- en: '[PRE15]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This command will print all of the S3 buckets in your AWS account. More specifically,
    this command lists the S3 buckets that the user who is associated with the access
    key has permissions to see. Remember the key pair we configured the CLI with,
    which belongs to the user to whom we granted the administrative policy? One of
    the permissions within the administrative policy gives the user access to S3\.
    In any case, you should see the S3 bucket that we created in the previous section
    of this chapter via the AWS Management Console.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打印出您 AWS 账户中的所有 S3 桶。更具体地说，此命令列出了与访问密钥相关联的用户有权限查看的 S3 桶。记得我们之前配置 CLI 时使用的密钥对吗？它属于一个我们授予了管理员权限的用户。管理员策略中的一个权限允许该用户访问
    S3。无论如何，您应该能够通过 AWS 管理控制台看到我们在本章前面部分创建的 S3 桶。
- en: Invoking the Rekognition service using the AWS CLI
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS CLI 调用 Rekognition 服务
- en: Now, let's invoke the object detection capability of Amazon Rekognition via
    the AWS CLI. This time, let's perform the object detection on an image that's
    stored in one of our S3 buckets. We will be using a sample image from Pexels,
    a website with thousands of royalty-free images. Download the image at [https://www.pexels.com/photo/animal-beagle-canine-close-up-460823/](https://www.pexels.com/photo/animal-beagle-canine-close-up-460823/)
    and upload it to the `contents` S3 bucket.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过 AWS CLI 调用 Amazon Rekognition 的物体检测功能。这次，我们将在存储在 S3 桶中的图像上执行物体检测。我们将使用
    Pexels 网站上的一张示例图片，Pexels 是一个拥有成千上万张免版税图片的网站。请下载 [https://www.pexels.com/photo/animal-beagle-canine-close-up-460823/](https://www.pexels.com/photo/animal-beagle-canine-close-up-460823/)
    上的图像，并将其上传到 `contents` S3 桶。
- en: 'Here, we can see an adorable beagle puppy laying on what appears to be a bed
    of gravel:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到一只可爱的比格犬小狗躺在看起来像是碎石床上的样子：
- en: '![](img/235579bd-0020-4644-8790-73b395c793b1.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/235579bd-0020-4644-8790-73b395c793b1.png)'
- en: 'You should see the following output when you list the objects in your `contents`
    bucket:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当您列出 `contents` 桶中的对象时，应该看到如下输出：
- en: '[PRE16]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we have an image, we can invoke the object detection capability of
    Rekognition via the following CLI command. Note that we must escape the `{` and
    `}` characters with a `\`, and we must not include any spaces when specifying
    the S3 object on the command line:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了图像，可以通过以下 CLI 命令调用 Rekognition 的物体检测功能。请注意，我们必须用 `\` 转义 `{` 和 `}` 字符，并且在命令行中指定
    S3 对象时，不能包含任何空格：
- en: '[PRE17]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The results come back almost instantly:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 结果几乎瞬间返回：
- en: '[PRE18]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The output is in JSON format, just like we configured the CLI to the output.
    From the output, the Rekognition service detected several objects or labels. Rekognition
    is very sure that it detected a dog; it even identified the breed of the dog as
    a beagle! Rekognition also detected the gravel in the image, which could be a
    part of a dirt road. The AWS CLI can be very useful when trying out an AWS service,
    and to see how the output is structured when we are developing our applications.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为 JSON 格式，就像我们配置 CLI 输出一样。从输出中可以看到，Rekognition 服务检测到多个物体或标签。Rekognition 确信它检测到了狗，甚至识别出了这只狗的品种是比格犬！Rekognition
    还检测到了图像中的碎石，这可能是泥土道路的一部分。当我们尝试 AWS 服务并查看输出结构时，AWS CLI 非常有用，它帮助我们了解开发应用程序时的输出结构。
- en: Using Python for AI applications
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行 AI 应用程序开发
- en: Python is one of the most popular programming languages. Thanks to its popularity
    with the data science and ML community, Python is also one of the fastest-growing
    programming languages. There is a large number of add-on libraries from its developers
    and the open source community. These libraries enable Python developers to do
    almost anything, from data analytics to deep neural networks, from simple scripting
    to web application development.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是最受欢迎的编程语言之一。由于它在数据科学和机器学习社区中的广泛使用，Python 也是增长最快的编程语言之一。开发者和开源社区贡献了大量的附加库。这些库使
    Python 开发者能够做几乎所有事情，从数据分析到深度神经网络，从简单脚本到 Web 应用程序开发。
- en: For AI and ML, Python is the de facto language. There's the popular scikit-learn
    library that gives developers access to many useful ML algorithms. There are also
    many libraries for deep neural networks, such as MXNet and TensorFlow.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AI 和机器学习，Python 是事实上的标准语言。流行的 scikit-learn 库为开发者提供了访问许多有用机器学习算法的途径。还有许多深度神经网络的库，例如
    MXNet 和 TensorFlow。
- en: 'We will be using Python for every hands-on projects throughout this book:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中的每个动手项目中，我们都将使用 Python：
- en: In the first half of this book, we will create intelligent-enabled solutions
    using AWS AI services. For these projects, we will use Python to create the backend
    components, APIs, and web applications that will bring our intelligent creations
    to life. AWS offers a Python SDK called Boto. With Boto, we can interact with
    all of the AWS services from our applications, including the managed AI capabilities.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本书的前半部分，我们将使用 AWS AI 服务创建智能解决方案。在这些项目中，我们将使用 Python 创建后端组件、API 和 Web 应用程序，让我们的智能创作得以实现。AWS
    提供了一个名为 Boto 的 Python SDK。通过 Boto，我们可以从应用程序与所有 AWS 服务进行交互，包括托管的 AI 能力。
- en: In the second half of this book, we will be training custom ML models using
    AWS ML services. For these projects, we will use Python to process data, train
    ML models, and deploy intelligent capabilities. In addition to the Boto SDK, we
    will also use AWS libraries for SageMaker, **Elastic MapReduce** (**EMR**), and
    many more.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本书的后半部分，我们将使用 AWS ML 服务训练自定义机器学习模型。在这些项目中，我们将使用 Python 处理数据、训练机器学习模型并部署智能功能。除了
    Boto SDK，我们还将使用 AWS 的 SageMaker、**弹性 MapReduce**（**EMR**）等许多库。
- en: Setting up a Python development environment
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Python 开发环境
- en: Let's start by setting up our local development environment. Since we are building
    end-to-end solutions in the projects, there are numerous packages and dependencies
    that we will need. The packages we will need don't always come as part of the
    standard library. Our projects will sometimes need specific versions of the libraries
    to get all of the moving pieces working together. Therefore, it is very important
    that you follow these instructions to install the packages, as described in this
    chapter.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置本地开发环境开始。由于我们在项目中构建的是端到端的解决方案，因此我们需要安装许多包和依赖项。我们所需要的包并不总是标准库的一部分。有时我们的项目需要特定版本的库才能使各个组件正常协作。因此，按照本章中描述的步骤安装这些包是非常重要的。
- en: Setting up a Python virtual environment with Pipenv
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pipenv 设置 Python 虚拟环境
- en: We will use a Python virtual environment to manage the packages for the projects
    in this book. A virtual environment is a Pythonic way to create a self-contained
    project directory tree that includes a particular combination of a Python version
    and packages that are specific to a project.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python虚拟环境来管理本书中的项目包。虚拟环境是一种Python化的方式，用于创建一个自包含的项目目录树，包含特定版本的Python和特定于项目的包组合。
- en: 'There are many benefits of using Python virtual environments:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python虚拟环境有很多好处：
- en: Since all of the packages and dependencies of a project are specified in a configuration
    file, the project's development environment can be easily duplicated by other
    developers; this is very useful when you are working within a development team.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于项目的所有包和依赖项都在配置文件中指定，因此其他开发人员可以轻松复制项目的开发环境；这在团队协作时非常有用。
- en: Even if you are working by yourself, having a virtual environment will help
    you with creating (and recreating) the environment on one or more computers for
    development, testing, and deployment.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使你是独自工作，拥有一个虚拟环境也会帮助你在一台或多台计算机上为开发、测试和部署创建（并重建）环境。
- en: A virtual environment also allows you to create separate Python environments,
    where parallel copies of Python dependencies can be installed. This way, we can
    keep conflicting Python versions and packages for different projects on the same
    computer.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟环境还允许你创建独立的Python环境，在其中可以安装Python依赖项的并行副本。这样，我们就可以在同一台计算机上为不同项目保留不同的Python版本和包，而不会发生冲突。
- en: 'Pipenv is the new kid on the block when it comes to Python virtual environments,
    but it has already been promoted as the officially recommended Python packaging
    tool from [python.org](https://www.python.org/). To install `pipenv`, we will
    use Pip, the Python package management tool:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Pipenv是Python虚拟环境中的新兴工具，但它已被推崇为[python.org](https://www.python.org/)官方推荐的Python打包工具。要安装`pipenv`，我们将使用Python的包管理工具Pip：
- en: '[PRE19]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command will help you install and verify `pipenv`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将帮助你安装并验证`pipenv`。
- en: Creating your first Python virtual environment
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个Python虚拟环境
- en: 'Now that we have installed the Python toolset, let''s take it for a test drive
    by creating a Python project that can interact with the AWS cloud platform. First,
    let''s create a directory for the project and name it `ObjectDetectionDemo`. Within
    this directory, we initialize a Python 3 virtual environment with `pipenv`, as
    follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Python工具集，让我们通过创建一个可以与AWS云平台交互的Python项目来测试它。首先，让我们为项目创建一个名为`ObjectDetectionDemo`的目录。在该目录中，我们使用`pipenv`初始化一个Python
    3虚拟环境，如下所示：
- en: '[PRE20]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After these commands, the `ObjectDetectionDemo` directory will contain a `Pipfile`.
    The `Pipfile` is a `pipenv` configuration file that specifies this project's Python
    packages and their dependencies.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些命令后，`ObjectDetectionDemo`目录将包含一个`Pipfile`。`Pipfile`是一个`pipenv`配置文件，指定了该项目的Python包及其依赖项。
- en: 'Next, we specify and install the AWS Python SDK, Boto, for the `ObjectDetectionDemo`
    project:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为`ObjectDetectionDemo`项目指定并安装AWS Python SDK，Boto：
- en: '[PRE21]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It might take a few minutes for Pipenv to synchronize with the Python package
    index and to install the `boto3` package, along with its dependencies. After the
    installation, your Pipefile should have the following contents:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要几分钟的时间让Pipenv与Python包索引同步并安装`boto3`包及其依赖项。安装完成后，你的Pipfile应包含以下内容：
- en: '[PRE22]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see here, `boto3` has an entry under the packages section. Currently,
    the version number is listed as `*`, which means, use the latest version. You
    can replace `*` with a specific version for any of the packages for your project
    if necessary.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`boto3`在包部分下有一个条目。目前，版本号列为`*`，这意味着使用最新版本。如果需要，你可以将`*`替换为任何包的特定版本。
- en: First project with the AWS SDK
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个使用AWS SDK的项目
- en: 'Now, let''s write our first Python application that will detect the objects
    in the images that are stored in an S3 bucket. To do this, we will leverage `boto3`
    to interact with both the Amazon S3 service and the Amazon Rekognition service:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写第一个Python应用程序，检测存储在S3存储桶中的图像中的物体。为此，我们将利用`boto3`与Amazon S3服务和Amazon
    Rekognition服务进行交互：
- en: You can use any text editor, or your favorite Python **Integrated Development
    Environment** (**IDE**), to create the Python source files. If you don't have
    a preference, we recommend that you check out JetBrains PyCharm, [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/),
    a cross-platform Python IDE that provides code editing, code analysis, a graphical
    debugger, an integrated unit tester, and integration with a version control system.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何文本编辑器，或你喜欢的 Python **集成开发环境** (**IDE**) 来创建 Python 源文件。如果你没有偏好，建议你查看
    JetBrains PyCharm，[https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)，这是一款跨平台的
    Python IDE，提供代码编辑、代码分析、图形调试器、集成单元测试和版本控制系统的集成。
- en: 'The first source file that we will create is `storage_service.py`. Create this
    source file in the `ObjectDetectionDemo` directory. The following is the Python
    code for `storage_service.py`:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建的第一个源文件是 `storage_service.py`。在 `ObjectDetectionDemo` 目录中创建此源文件。以下是 `storage_service.py`
    的 Python 代码：
- en: '[PRE23]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this code, please note the following information:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，请注意以下信息：
- en: '`storage_service.py` contains a Python class, `StorageService`, that encapsulates
    the business logic of interacting with Amazon S3.'
  id: totrans-247
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`storage_service.py` 包含一个 Python 类 `StorageService`，它封装了与 Amazon S3 交互的业务逻辑。'
- en: This class implements just one method, `get_all_files()`, which returns all
    of the objects stored within a bucket specified by the `storage_location` parameter.
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类仅实现了一个方法 `get_all_files()`，该方法返回由 `storage_location` 参数指定的存储桶中的所有对象。
- en: Other functionalities related to Amazon S3 can also be implemented in this file,
    such as listing the buckets, uploading files to buckets, and so on.
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Amazon S3 相关的其他功能也可以在此文件中实现，例如列出存储桶、向存储桶上传文件等。
- en: 'The next source file that we will create is `recognition_service.py`. Create
    this source file in the `ObjectDetectionDemo` directory as well. The following
    is the Python code for `recognition_service.py`:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建的源文件是 `recognition_service.py`。也在 `ObjectDetectionDemo` 目录中创建此源文件。以下是
    `recognition_service.py` 的 Python 代码：
- en: '[PRE24]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In this code, please note the following information:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，请注意以下信息：
- en: '`recognition_service.py` contains a Python class, `RecognitionService`, that
    encapsulates the business logic of interacting with the Amazon Rekognition service.'
  id: totrans-253
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recognition_service.py` 包含一个 Python 类 `RecognitionService`，它封装了与 Amazon Rekognition
    服务交互的业务逻辑。'
- en: This class implements just one method, `detect_objects()`, that calls Rekognition's
    detect label API, and then returns the labels from the response.
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类仅实现了一个方法 `detect_objects()`，该方法调用 Rekognition 的检测标签 API，并返回响应中的标签。
- en: Callers of this method can specify the S3 bucket and the filename with the `storage_location`
    and `image_file` parameters, respectively.
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用此方法的用户可以分别通过 `storage_location` 和 `image_file` 参数指定 S3 存储桶和文件名。
- en: Other functionalities related to Amazon Rekognition can also be implemented
    in this file, such as detecting text, analyzing face, and so on.
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Amazon Rekognition 相关的其他功能也可以在此文件中实现，例如文本检测、面部分析等。
- en: 'The final file that we will create is `object_detection_demo.py`. Create this
    source file in the `ObjectDetectionDemo` directory. The following is the Python
    code for `object_detection_demo.py`:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个要创建的文件是 `object_detection_demo.py`。在 `ObjectDetectionDemo` 目录中创建此源文件。以下是
    `object_detection_demo.py` 的 Python 代码：
- en: '[PRE25]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this code, `object_detection_demo.py` is a Python script that brings together
    our two service implementations in order to perform object detection on the images
    that are stored in our S3 bucket.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`object_detection_demo.py` 是一个 Python 脚本，它将我们两个服务的实现整合在一起，以便对存储在 S3 存储桶中的图像进行目标检测。
- en: 'Here is the interaction diagram that depicts the flow of the demo application:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是描述演示应用程序流程的交互图：
- en: '![](img/4b59e750-763c-4ebc-bd01-8d9149a17af1.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b59e750-763c-4ebc-bd01-8d9149a17af1.png)'
- en: 'Please note the following information, all of which is shown in the preceding
    diagram:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下信息，所有这些内容都在前面的图中展示：
- en: This script calls the **StorageService** to get all of the JPG image files that
    are stored in the `contents.aws.ai` bucket (you should replace this with your
    own bucket).
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个脚本调用 **StorageService** 来获取存储在 `contents.aws.ai` 存储桶中的所有 JPG 图像文件（你应该将其替换为自己的存储桶）。
- en: Here, we are hardcoding the bucket name for simplicity, but you can take in
    the bucket name as a parameter in order to make the script more generic.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，为了简化，我们硬编码了存储桶名称，但你可以将存储桶名称作为参数传入，以使脚本更加通用。
- en: Then, for each image in the specified bucket, the script calls our **RecognitionService**
    to perform object detection and returns the labels that are found.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，对于指定存储桶中的每个图像，脚本会调用我们的 **RecognitionService** 来执行物体检测，并返回检测到的标签。
- en: The script also formats and prints out the labels, along with their confidence
    scores for the objects that were detected.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本还会格式化并打印出这些标签，以及与检测到的物体相关的置信度分数。
- en: Note that we are using `boto3` in both **StorageService** and **RecognitionService**.
    The `boto3` objects manage the sessions between our project code and the AWS services.
    These sessions are created using the available credentials in the runtime environment.
    If you are running the script on your local development machine, then the AWS
    access key pair is taken from the `~/.aws/credentials` file. We will cover how
    the credentials are used in other runtime environments in later chapters.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在 **StorageService** 和 **RecognitionService** 中都使用了 `boto3`。`boto3` 对象管理我们项目代码与
    AWS 服务之间的会话。这些会话是使用运行时环境中的可用凭证创建的。如果你在本地开发机器上运行脚本，那么 AWS 访问密钥对将从 `~/.aws/credentials`
    文件中获取。我们将在后续章节中讨论如何在其他运行时环境中使用凭证。
- en: For simplicity, we kept the project code relatively short and simple. We will
    enhance these Python classes in later hands-on projects.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们保持了项目代码的简洁和简单。我们将在后续的动手项目中增强这些 Python 类。
- en: Even though this is only a demo project, it is still good practice to organize
    the code into different components with separation of concerns. In this project,
    all of the business logic that will interact with the Amazon S3 service are encapsulated
    within the `StorageService` class; the same is done for all the logic that will
    interact with the Amazon Rekognition service in the `RecogntionService` class.
    We will see more benefits of this design practice as our projects get larger and
    more complex.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这只是一个演示项目，组织代码并实现关注点分离仍然是一个很好的实践。在本项目中，所有与 Amazon S3 服务交互的业务逻辑都封装在 `StorageService`
    类中；与 Amazon Rekognition 服务交互的所有逻辑则封装在 `RecogntionService` 类中。随着项目规模和复杂度的增加，我们将看到这种设计实践的更多好处。
- en: 'Now, let''s run the following script in the Python virtual environment by entering
    the virtual environment shell:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过进入虚拟环境的 shell，运行以下脚本：
- en: '[PRE26]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this command, please note the following information:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令中，请注意以下信息：
- en: This command starts a shell with the Python virtual environment within your
    normal Terminal shell.
  id: totrans-273
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此命令在你的普通终端 shell 中启动一个带有 Python 虚拟环境的 shell。
- en: Within the virtual environment shell, the Python version and the packages that
    we specified and installed with `pipenv` are available to our script.
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在虚拟环境 shell 中，我们指定并通过 `pipenv` 安装的 Python 版本和包都可供脚本使用。
- en: 'Within the virtual environment, invoke the `object_detection_demo.py` script
    via the following command:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟环境中，通过以下命令调用 `object_detection_demo.py` 脚本：
- en: '[PRE27]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output of this command should display the objects that are detected in
    the images that are stored in the specified S3 bucket:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出应显示在指定的 S3 存储桶中检测到的物体：
- en: '[PRE28]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Remember to exit the virtual environment and to return to your normal Terminal
    shell with the `exit` command:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得通过 `exit` 命令退出虚拟环境并返回到正常的终端 shell：
- en: '[PRE29]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Congratulations, you just created your first intelligent-enabled application
    that leverages the power of AI to perform image analysis on the AWS platform!
    Sit back and think about it; with just a few lines of code, you were able to create
    a piece of software that can detect and identify countless numbers of objects
    in our world. This is the quick lift you can get when leveraging AWS AI services.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你刚刚创建了第一个利用 AI 技术进行图像分析的智能应用程序，并且它运行在 AWS 平台上！坐下来好好想一想；只用几行代码，你就能够创建一个可以检测并识别我们世界中无数物体的软件。这就是你通过利用
    AWS AI 服务所能获得的快速提升。
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned that AI has existed for a long time, but it is becoming
    popular again due to the renewed interested in ML, more specifically, with artificial
    neural networks. We looked at a few real-world applications of AI and ML. We got
    an overview of the two groups of AI offerings from AWS; the AWS AI services that
    give you a quick lift when developing intelligent-enabled applications, and the
    AWS ML platforms that allow you to build custom AI capabilities that are tailored
    to your application. We recommended that you try to leverage the provided AWS
    AI services first, and only develop custom AI capabilities if you have a specialized
    need and you have a data-competitive advantage.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们了解到 AI 已经存在了很长时间，但由于机器学习（ML）的重新兴起，特别是人工神经网络的出现，它现在再次变得流行。我们查看了 AI 和
    ML 的几个现实应用案例。我们概述了 AWS 提供的两大类 AI 产品；AWS AI 服务可以在开发智能应用时提供快速支持，而 AWS ML 平台则允许你构建针对特定应用的定制
    AI 能力。我们建议你首先尝试利用 AWS 提供的 AI 服务，只有在你有特定需求并且具备数据竞争优势的情况下，才考虑开发定制的 AI 能力。
- en: We got familiar with several services on AWS through hands-on experience, including
    the AI services and the other complimentary cloud services. We also set up our
    local development environment for AI applications, including Python, the AWS CLI,
    and Python virtual environments. We then created our first intelligent-enabled
    application using the Amazon S3 and Amazon Rekognition services.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过实践经验熟悉了 AWS 上的多个服务，包括 AI 服务和其他配套的云服务。我们还为 AI 应用设置了本地开发环境，包括 Python、AWS CLI
    和 Python 虚拟环境。随后，我们使用 Amazon S3 和 Amazon Rekognition 服务创建了第一个智能化应用。
- en: In the next chapter, we will dive into the components and the architecture of
    AI applications. We will set up an architecture template for many of the upcoming
    hands-on projects, and more importantly, we will cover the design principles and
    decisions that this architecture template is based on.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 AI 应用的组件和架构。我们将为许多即将进行的实践项目设立架构模板，更重要的是，我们将讨论该架构模板所基于的设计原则和决策。
- en: References
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'You can access the following links for more information on AI on AWS:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问以下链接获取更多关于 AWS 上 AI 的信息：
- en: '[https://www.sciencenews.org/article/future-ai-may-diagnose-eye-problems](https://www.sciencenews.org/article/future-ai-may-diagnose-eye-problems)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.sciencenews.org/article/future-ai-may-diagnose-eye-problems](https://www.sciencenews.org/article/future-ai-may-diagnose-eye-problems)'
- en: '[https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html](https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html](https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html)'
- en: '[https://adage.com/article/cmo-strategy/google-backed-video-puts-viewers-a-driving-cars/312542/](https://adage.com/article/cmo-strategy/google-backed-video-puts-viewers-a-driving-cars/312542/)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://adage.com/article/cmo-strategy/google-backed-video-puts-viewers-a-driving-cars/312542/](https://adage.com/article/cmo-strategy/google-backed-video-puts-viewers-a-driving-cars/312542/)'
- en: '[https://blog.swiftkey.com/whats-difference-predictive-keyboards-predictive-text/](https://blog.swiftkey.com/whats-difference-predictive-keyboards-predictive-text/)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://blog.swiftkey.com/whats-difference-predictive-keyboards-predictive-text/](https://blog.swiftkey.com/whats-difference-predictive-keyboards-predictive-text/)'
- en: '[http://www.futurile.net/2013/10/03/virtualenv-and-virtualenvwrapper-for-python-development/](http://www.futurile.net/2013/10/03/virtualenv-and-virtualenvwrapper-for-python-development/)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.futurile.net/2013/10/03/virtualenv-and-virtualenvwrapper-for-python-development/](http://www.futurile.net/2013/10/03/virtualenv-and-virtualenvwrapper-for-python-development/)'
