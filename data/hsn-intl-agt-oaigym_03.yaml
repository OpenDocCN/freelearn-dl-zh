- en: Getting Started with OpenAI Gym and Deep Reinforcement Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 OpenAI Gym 和深度强化学习
- en: The introduction chapters gave you a good insight into the OpenAI Gym toolkit
    and reinforcement learning in general. In this chapter, we will jump right in
    and get you and your computer ready with all the required preparation, installations,
    and configurations to start developing your agents. More importantly, you will
    also find instructions to access the book's code repositories, which contain all
    the code you will need to follow this book in its entirety, along with several
    other code examples, useful instructions, and updates.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍章节让你对 OpenAI Gym 工具包和强化学习有了很好的了解。在本章中，我们将直接进入正题，确保你和你的计算机做好了所有必要的准备、安装和配置，以开始开发你的智能体。更重要的是，你还会找到访问本书代码库的说明，这些代码库包含了你跟随本书学习所需的所有代码，并且有许多其他的代码示例、有用的说明和更新。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Accessing the code repository for this book
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问本书的代码库
- en: Creating an Anaconda environment for working through this book
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为本书创建一个 Anaconda 环境
- en: How to install and configure OpenAI Gym and dependencies on your system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在你的系统上安装和配置 OpenAI Gym 及其依赖项
- en: Installing tools, libraries, and dependencies for deep reinforcement learning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装深度强化学习的工具、库和依赖项
- en: Code repository, setup, and configuration
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码库、设置和配置
- en: First of all, let's make sure you have all the information to access the code
    repository for this book. The source code provides you with all the necessary
    code samples that we will discuss in this book and provides additional details
    on how to set up and run the training or testing scripts for each chapter specifically.
    To get started, head to the book's code repository on GitHub at the following
    link: [https://github.com/PacktPublishing/Hands-On-Intelligent-Agents-with-OpenAI-Gym](https://github.com/PacktPublishing/Hands-On-Intelligent-Agents-with-OpenAI-Gym).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保你拥有访问本书代码库的所有信息。源代码为你提供了本书中讨论的所有必要代码示例，并提供了有关如何设置和运行每章训练或测试脚本的详细说明。要开始，请访问本书的
    GitHub 代码库，链接如下：[https://github.com/PacktPublishing/Hands-On-Intelligent-Agents-with-OpenAI-Gym](https://github.com/PacktPublishing/Hands-On-Intelligent-Agents-with-OpenAI-Gym)。
- en: Create a GitHub account if you do not already have one and fork the repository
    so that it is added to your own GitHub account. This is recommended as it allows
    you to make any changes to the code you prefer while following along, and also
    allow you to send a pull request when you have something cool to show and be featured
    on the book's blog!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有 GitHub 账户，请创建一个，并且将代码库 fork 到你自己的 GitHub 账户中。这样做是推荐的，因为它允许你在跟随学习的同时，随意修改代码，也能在你有有趣的内容时，发送
    pull request，并且可能会在本书的博客中展示！
- en: 'You can clone the repository to a folder named `HOIAWOG` in your home directory
    using the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令将代码库克隆到主目录中的一个名为 `HOIAWOG` 的文件夹：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the book assumes that you have set up the code repository at this
    particular location: `~/HOIAWOG`. If you happen to change it for some reason,
    be sure to remember it and change some of the commands in the book accordingly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本书假设你已经将代码库设置在以下位置：`~/HOIAWOG`。如果你因某些原因更改了这个位置，请务必记住它，并相应地修改书中的一些命令。
- en: 'If you are wondering why the directory name was chosen to be `HOIAWOG`, do
    not think anymore. It is an acronym for this book''s title: **Hands On Intelligent
    Agents With OpenAI Gym** (**HOIAWOG**)!'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想为什么目录名称选为 `HOIAWOG`，不要再想了。这是本书标题 **Hands On Intelligent Agents With OpenAI
    Gym**（**HOIAWOG**）的缩写！
- en: The book's code repository will be kept up to date to take care of any changes
    in the external libraries or other software, so that the intelligent agent implementation
    code and other code samples are functional. Occasionally, new code and updates
    will also be added to help you explore developing intelligent agents further.
    To stay on top of the changes and be notified of updates, it is recommended you
    star the book's code repository from your GitHub account.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码库将会保持更新，以应对外部库或其他软件的变化，确保智能体实现代码和其他代码示例能够正常运行。偶尔也会添加新的代码和更新，帮助你进一步探索智能体的开发。为了及时了解变化并接收更新通知，建议你在
    GitHub 账户中为本书的代码库加星标。
- en: Toward the end of [Chapter 1](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12), *Introduction
    to Intelligent Agents and Learning Environments*, we did a quick install of OpenAI
    Gym to get a sneak peak into the Gym. That was a minimal install, to get us started
    quickly. In the next section, we will go over the installation step by step and
    make sure everything you need to develop agents using the Gym is installed and
    configured properly. We will go over the different levels and methods of installation
    here so that you are aware of the installation process in general. You may end
    up modifying your system, or using another system at home or work, or changing
    your computer altogether. This section will make sure that you can get everything
    set up in the right way. Feel free to pick the installation method that is suitable
    for your use cases.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 1 章](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12) *智能体和学习环境简介*的最后，我们快速安装了
    OpenAI Gym，简单了解了 Gym 的功能。那是一次最小化的安装，目的是让我们迅速入门。在接下来的部分，我们将逐步介绍安装过程，确保你所需要的用于开发
    Gym 智能体的所有内容都已正确安装和配置。我们将在这里讨论不同级别和方法的安装方式，确保你了解整个安装过程。你可能最终会修改系统，或者在家里或工作中使用其他系统，甚至更换电脑。这一部分将确保你能以正确的方式完成所有设置。可以根据你的实际需求选择合适的安装方式。
- en: Prerequisites
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: The only main prerequisite for using OpenAI Gym is Python 3.5+. To make further
    development easy and organized, we will use the Anaconda Python distribution.
    For those of you who are not familiar with Anaconda, it is a Python distribution (although
    a distribution for the R language is also available) that includes hundreds of
    popular machine learning and data science packages and comes with an easy-to-use
    package and virtual environment manager called *conda.* The good thing is that
    the Anaconda Python distribution is available for Linux, macOS, and Windows! Another
    main reason to use the Anaconda distribution is that it helps in easily creating,
    installing, managing, and upgrading an isolated Python virtual environment. This
    makes sure the code we learn about and develop in this book produces the same
    results, irrespective of the operating system we use. This will relieve you from
    solving dependency issues or library version mismatch issues that you would have
    had to handle manually if you were not using a Python distribution such as Anaconda.
    You will find that it just works, which is nice and cool. Let's get started and
    install the Anaconda Python distribution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenAI Gym 的唯一主要前提条件是 Python 3.5 及以上版本。为了让进一步的开发更简单且有组织，我们将使用 Anaconda Python
    发行版。如果你不熟悉 Anaconda，它是一个 Python 发行版（虽然也有 R 语言的发行版），包含了数百个流行的机器学习和数据科学包，并配有一个名为
    *conda* 的易用包和虚拟环境管理器。好消息是，Anaconda Python 发行版支持 Linux、macOS 和 Windows！另一个使用 Anaconda
    发行版的主要原因是，它能帮助我们轻松创建、安装、管理和升级一个独立的 Python 虚拟环境。这确保了我们在本书中学习和开发的代码无论在哪个操作系统上执行，都能得到相同的结果。这将让你摆脱手动处理依赖问题或库版本不匹配问题的麻烦，而如果不使用像
    Anaconda 这样的 Python 发行版，你本来得自己处理这些问题。你会发现它只是“有效”，这非常好，令人开心。让我们开始吧，安装 Anaconda
    Python 发行版。
- en: 'Open a command prompt or Terminal and enter the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符或终端，并输入以下内容：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command uses the `wget` tool to fetch/download the installation script
    for Anaconda version 3-4.3 and saves it as `anaconda.sh` in your home directory.
    This command should work on macOS and Linux (Ubuntu, Kubuntu, and so on), which
    come with the `wget` tool pre-installed. Note that we are downloading a specific
    version of Anaconda (3-4.3). This will make sure we have the same configuration
    throughout this book. Do not worry if this is not the latest version available.
    You can always upgrade the distribution later using this command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令使用 `wget` 工具来获取/下载 Anaconda 版本 3-4.3 的安装脚本，并将其保存为 `anaconda.sh` 文件在你的主目录下。此命令应该适用于预装了
    `wget` 工具的 macOS 和 Linux（如 Ubuntu、Kubuntu 等）。请注意，我们下载的是特定版本的 Anaconda（3-4.3），这将确保本书中的配置保持一致。即使这不是最新版本，也不用担心。你可以稍后通过以下命令升级发行版：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`anaconda.sh` is a shell script that has all the things that are needed to
    install Anaconda on your system! If you are interested, you can open it using
    your favorite text editor to see how cleverly the binaries, the installation process
    instructions, and the shell commands have been all lumped together into a single
    file.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`anaconda.sh` 是一个 shell 脚本，包含了安装 Anaconda 所需的所有内容！如果你感兴趣，可以使用你喜欢的文本编辑器打开它，看看如何巧妙地将二进制文件、安装过程说明和
    shell 命令都合并到一个文件中。'
- en: 'Let''s now install the Anaconda Python distribution under your home directory.
    The following installation process is carefully laid out to make sure it works
    both on Linux and macOS systems. Before you enter the command, you should be aware
    of one thing. The following command will run the installer in *silent mode*. This
    means that it will use the default installation parameters and go ahead with the
    installation, without asking you yes/no for each and every configuration. This
    also means that you agree to the Anaconda distribution''s licensing terms. In
    case you want to manually go through the installation process step by step, run
    the following command without the arguments `-b` and `-f`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在你的主目录下安装Anaconda Python发行版。以下安装过程已经精心安排，确保它能在Linux和macOS系统上都能正常工作。在输入命令之前，你需要注意一件事。以下命令将在*静默模式*下运行安装程序。这意味着它将使用默认的安装参数并继续安装，而不会逐一询问你是否继续进行每个配置。这也意味着你同意Anaconda发行版的许可条款。如果你想手动一步步进行安装过程，可以运行以下命令，但不带`-b`和`-f`参数：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Wait for the installation process to complete and then we are done!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 等待安装过程完成，接着我们就完成了！
- en: 'To start using *conda* and the other goodness in the Anaconda Python distribution,
    we should make sure that your system knows where to find the Anaconda tools. Let''s
    add the Anaconda binaries directory by appending its path to the `PATH` environment
    variable, as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用*conda*和Anaconda Python发行版中的其他工具，我们需要确保系统知道在哪里找到Anaconda工具。让我们通过将Anaconda二进制目录的路径添加到`PATH`环境变量中，如下所示：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I strongly advise you to add this line to the end of your `~/.bashrc` file so
    that whenever you open a new bash terminal, the Anaconda tools are accessible.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你将这一行添加到`~/.bashrc`文件的末尾，这样每次打开新的bash终端时，Anaconda工具都会可用。
- en: 'You can type the following command to make sure the installation was successful:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以输入以下命令来确认安装是否成功：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will just print the list of packages available in your default
    environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将仅仅打印出你默认环境中可用的包列表。
- en: Creating the conda environment
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建conda环境
- en: Now that we have set up Anaconda, let's use conda to create a Python virtual
    environment, which we will use throughout this book.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了Anaconda，让我们使用conda创建一个Python虚拟环境，在本书中我们将使用这个环境。
- en: 'If you prefer a one-click install setup and do not want to go through the installation
    step by step, a greatly simplified way to create the environment with all the
    necessary packages installed is using the `conda_env.yaml` conda environment configuration
    file available in the book''s code repository. You can simply run the following
    command from the book''s code repository directory (`HOIAWOG`) which we created
    in the previous section:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更倾向于一键安装并且不想逐步进行安装过程，一个大大简化的方法是使用`conda_env.yaml`conda环境配置文件，该文件可以在本书的代码库中找到。你只需从本书代码库目录（`HOIAWOG`）运行以下命令，即可创建包含所有必要包的环境，前提是我们在上一节中已经创建了该目录：
- en: '`praveen@ubuntu:~/HOIAWOG$ conda create -f conda_env.yaml -n rl_gym_book`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`praveen@ubuntu:~/HOIAWOG$ conda create -f conda_env.yaml -n rl_gym_book`'
- en: 'At this point, we will just create a new minimal environment to proceed. Enter
    the following command in a Terminal:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将仅创建一个新的最小环境以继续进行。请在终端中输入以下命令：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will create a conda environment named `rl_gym_book` with a Python3 interpreter.
    It will print some information about what is going to be downloaded and the packages
    that will be installed. You may be prompted with a yes/no question as to whether
    you want to proceed. Type `y` and hit *Enter*. Once the environment creation process
    is complete, you can activate that environment using the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`rl_gym_book`的conda环境，并使用Python3解释器。它会打印一些即将下载的信息以及将要安装的包。你可能会被提示是否要继续，输入`y`并按*Enter*键。环境创建过程完成后，你可以使用以下命令激活该环境：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will now see your command prompt''s prefix changing to look something like
    this, to signify that you are inside the `rl_gym_book` virtual environment:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你会看到命令提示符的前缀变成类似于这样，表示你已经进入了`rl_gym_book`虚拟环境：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can use this as an indicator as you progress through the chapters to know
    when commands have to be entered inside this environment and when commands can
    be entered outside the environment. To exit or deactivate the environment, you
    can simply type this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其作为进度的指示，帮助你了解何时需要在这个环境中输入命令，何时可以在环境外输入命令。要退出或停用环境，只需输入以下命令：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Minimal install – the quick and easy way
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小安装——快速简便的方法
- en: 'The OpenAI Gym is a Python package and is available in the **Python Package
    Index** (**PyPI**) repository. You can use `easy_install` or `pip` to fetch and
    install packages from the PyPI repository. `Pip` is a package management tool
    for Python, which most of you might be familiar with if you have experience scripting
    in Python:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAI Gym 是一个 Python 包，已发布在 **Python 包索引** (**PyPI**) 仓库中。你可以使用 `easy_install`
    或 `pip` 从 PyPI 仓库获取并安装包。如果你有 Python 脚本经验，`pip` 是你可能熟悉的一个 Python 包管理工具：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That's it!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些！
- en: 'Let''s quickly check the installation actually went fine by running the following
    code. Create a `gym_install_test.py` file under the `~/rl_gym_book` directory,
    type/copy the following code into it, and save it. You can also download the `gym_quick_install_test.py`
    file from the book''s code repository:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过运行以下代码快速检查安装是否成功。创建一个 `gym_install_test.py` 文件并保存在 `~/rl_gym_book` 目录下，将以下代码输入/复制到该文件中并保存。你也可以从书本的代码仓库下载
    `gym_quick_install_test.py` 文件：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s try running the script:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试运行这个脚本：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This should pop up a new window showing a car/carton and a v-shaped mountain,
    and you should see the car moving left and right randomly. The mountain car window
    should look something like this screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会弹出一个新窗口，显示一辆车/纸箱和一个 V 形山脉，你应该会看到汽车左右随机移动。山地车窗口应该看起来像这样的截图：
- en: '![](img/00106.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00106.jpeg)'
- en: 'You will also see some values printed out to the console/Terminal that look
    like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会在控制台/终端看到一些类似如下的值：
- en: '![](img/00107.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00107.jpeg)'
- en: If you saw this happening, then rejoice! You now have a (minimal) setup of OpenAI
    Gym!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到这种情况，那就恭喜你！你现在已经拥有了一个（最小）版本的 OpenAI Gym 设置！
- en: Complete install of OpenAI Gym learning environments
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整安装 OpenAI Gym 学习环境
- en: Not all environments are usable with the minimal installation. To be able to
    use most or all the environments available in the Gym, we will go through the
    installation of the dependencies and build OpenAI Gym from the latest source code
    on the master branch.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有的环境都能通过最小安装使用。为了能够使用 Gym 中的大部分或所有环境，我们将安装所需的依赖项，并从主分支的最新源代码构建 OpenAI Gym。
- en: To get started, we will need to install the required system packages first.
    Next, you will find instructions for both Ubuntu and macOS. Choose the set of
    instructions based on your development platform.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们首先需要安装所需的系统包。接下来，你将找到 Ubuntu 和 macOS 的安装指南。根据你的开发平台选择相应的安装指南。
- en: Instructions for Ubuntu
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu 安装指南
- en: The following commands were tested on Ubuntu 14.04 LTS and on Ubuntu 16.04 LTS,
    but should work in other/future Ubuntu releases as well.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令已在 Ubuntu 14.04 LTS 和 Ubuntu 16.04 LTS 上测试过，但应该也能在其他/未来的 Ubuntu 版本中正常运行。
- en: 'Let''s install the system packages needed by running the following command
    on the Terminal/console:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在终端/控制台运行以下命令来安装所需的系统包：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This command will install the prerequisite system packages. Note that the `-y`
    flag will automatically say yes to confirm the installation of the package, without
    asking you to confirm manually. If you want to review the packages that are going
    to be installed for some reason, you may run the command without the flag.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将安装所需的系统包。请注意，`-y` 标志将自动确认安装包，无需你手动确认。如果你想查看将要安装的包，可以不加该标志运行命令。
- en: Instructions for macOS
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS 安装指南
- en: On macOS, the number of additional system packages that need to be installed
    is less than with Ubuntu systems.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，所需安装的额外系统包数量比在 Ubuntu 系统上要少。
- en: 'Run the following commands from a Terminal:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端运行以下命令：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These commands will install the prerequisite system packages.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将安装所需的系统包。
- en: The robotics and control environment in OpenAI Gym make use of **Multi-Joint
    dynamics with Contact** (**MuJoCo**) as the physics engine to simulate the rigid
    body dynamics and other features. We briefly had a look at MuJoCo environments
    in [Chapter 1](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12), *Introduction
    to Intelligent Agents and Learning Environments* and learned that you can develop
    algorithms that can make a 2D robot walk, run, swim, or hop, or a 3D multi-legged
    robot walk or run using the MuJoCo environment. MuJoCo is a proprietary engine
    and therefore needs a license. Fortunately, we can get a free 30-day license!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAI Gym 中的机器人和控制环境使用 **多关节动力学与接触** (**MuJoCo**) 作为物理引擎，模拟刚体动力学及其他特性。我们在[第一章](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12)《智能体与学习环境介绍》中简要看过
    MuJoCo 环境，了解到你可以开发算法使 2D 机器人行走、奔跑、游泳或跳跃，或使 3D 多足机器人行走或奔跑，均可通过 MuJoCo 环境实现。MuJoCo
    是一个专有引擎，因此需要许可证。幸运的是，我们可以获得 30 天免费的许可证！
- en: Also, if you are a student, they offer a 1 year free MuJoCo Pro personal license,
    which is even better! For others, after the 30 days, sadly it costs a hefty sum
    (~$500 USD) for a 1 -year license. We will not be using the MuJoCo environments
    in this book because not everyone may be able to get hold of a license. You can
    always apply what you learn in this book regarding other environments to the MuJoCo
    environments if you have a license. If you plan to use these environments, you
    will have to follow the instructions in the MuJoCo installation section next.
    If not, you can skip it and go to the next section to set up OpenAI Gym.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你是学生，他们提供 1 年免费的 MuJoCo Pro 个人许可证，这样更好！对于其他人来说，30 天后，遗憾的是，1 年许可证的费用相当高（约
    500 美元）。我们在本书中不会使用 MuJoCo 环境，因为并不是每个人都能获得许可证。如果你拥有许可证，可以将本书中关于其他环境的学习应用到 MuJoCo
    环境中。如果你计划使用这些环境，接下来你需要按照 MuJoCo 安装部分的说明进行操作。如果不打算使用，可以跳过这一部分，继续设置 OpenAI Gym 的下一部分。
- en: MuJoCo installation
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MuJoCo 安装
- en: 'I hope you read the previous information box. MuJoCo is one odd library that
    we will encounter in this book because, unlike other libraries and software we
    use as part of this book, MuJoCo requires a license to use. The Python interface
    for MuJoCo, available in the Gym library, is compatible only with MuJoCo version
    1.31 as of the time this chapter was written, even though the latest available
    MuJoCo version is higher (1.50 at the time of writing this chapter). Follow these
    two steps to set up MuJoCo for use with OpenAI Gym environments:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经阅读了之前的信息框。MuJoCo 是本书中会遇到的一个特殊库，因为与我们在本书中使用的其他库和软件不同，MuJoCo 使用时需要许可证。MuJoCo
    的 Python 接口（可在 Gym 库中找到）只与 MuJoCo 版本 1.31 兼容（截至本章写作时），尽管最新的 MuJoCo 版本已经更高（截至写作时为
    1.50）。请按照以下两步设置 MuJoCo 以用于 OpenAI Gym 环境：
- en: Download MuJoCo 1.31 for your platform (Linux/macOS) from this URL: [https://www.roboti.us/index.html](https://www.roboti.us/index.html)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下网址下载适合你平台的 MuJoCo 1.31（Linux/macOS）版本：[https://www.roboti.us/index.html](https://www.roboti.us/index.html)
- en: Obtain a MuJoCo Pro license from this URL: [https://www.roboti.us/license.html](https://www.roboti.us/license.html)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下网址获取 MuJoCo Pro 许可证：[https://www.roboti.us/license.html](https://www.roboti.us/license.html)
- en: Completing the OpenAI Gym setup
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成 OpenAI Gym 设置
- en: 'Let''s update our version of pip first:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更新我们的 pip 版本：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, let''s download the source code of OpenAI Gym from the GitHub repository
    into our home folder:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们从 GitHub 仓库中下载 OpenAI Gym 的源代码到我们的主目录：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you get an error saying `git command not found` or something similar, you
    might have to install Git. On Ubuntu systems, you can install it by running this
    command, `sudo apt-get install git`. On macOS, if you don't have Git installed
    already, it will prompt you to install it when you run the `git clone` command.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到类似 `git command not found` 的错误，你可能需要安装 Git。在 Ubuntu 系统中，你可以通过运行以下命令来安装
    Git：`sudo apt-get install git`。在 macOS 上，如果你尚未安装 Git，运行 `git clone` 命令时会提示你安装它。
- en: 'We are now in the final stage of a complete Gym installation! If you got a
    MuJoCo license and followed the MuJoCo installation instructions successfully,
    then you can go ahead and complete a full installation by running the following
    command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进入完整 Gym 安装的最后阶段！如果你获得了 MuJoCo 许可证并成功按照 MuJoCo 安装说明进行操作，那么可以继续通过运行以下命令来完成完整安装：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you did not install MuJoCo, then this command will return errors. We will
    be installing the Gym environments that we will be using, other than MuJoCo (which
    requires a license to use). Make sure that you are still in the `gym`directory
    under your `home` folder, and also make sure that you are still inside the `rl_gym_book`
    conda environment. Your prompt should include the `rl_gym_book`prefix as follows,
    where `~/gym` means that the prompt is at the gym directory under the home folder:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装MuJoCo，那么此命令将返回错误。我们将安装我们将使用的Gym环境，除了MuJoCo（它需要许可证）。确保你仍然在`gym`目录下的`home`文件夹中，并且仍然在`rl_gym_book`
    conda环境中。你的提示符应包含`rl_gym_book`前缀，如下所示，其中`~/gym`表示提示符位于`home`文件夹下的gym目录中：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here is a table summarizing the installation commands for installing the environments
    that have been discussed in [Chapter 1](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12), *Introduction
    to Intelligent Agents and Learning Environments*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个表格，汇总了安装[第1章](part0021.html#K0RQ0-22c7fc7f93b64d07be225c00ead6ce12)，*智能体与学习环境简介*中讨论过的环境的安装命令。
- en: '| **Environment** | **Installation command** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **环境** | **安装命令** |'
- en: '| Atari | `pip install -e ''.[atari]''` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| Atari | `pip install -e ''.[atari]''` |'
- en: '| Box2D | `pip install -e ''.[box2d]''``conda install -c https://conda.anaconda.org/kne
    pybox2d` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| Box2D | `pip install -e ''.[box2d]''``conda install -c https://conda.anaconda.org/kne
    pybox2d` |'
- en: '| Classic control | `pip install -e ''.[classic_control]''` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 经典控制 | `pip install -e ''.[classic_control]''` |'
- en: '| MuJoCo (requires license) | `pip install -e ''.[mujoco]''` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| MuJoCo（需要许可） | `pip install -e ''.[mujoco]''` |'
- en: '| Robotics (requires license) | `pip install -e ''.[robotics]''` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 机器人学（需要许可） | `pip install -e ''.[robotics]''` |'
- en: 'Let''s go ahead and install the environments we do not need a license to use.
    Run the following commands to install Atarti, Box2D, and the classic control environments:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续安装不需要许可证的环境。运行以下命令安装Atari、Box2D和经典控制环境：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run that code using the following commands:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行代码：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You will see a window pop up that shows the BipedalWalker-v2 environment and
    the walker trying to randomly perform some actions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个窗口弹出，展示BipedalWalker-v2环境，行走者正在尝试随机执行一些动作：
- en: '![](img/00108.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00108.jpeg)'
- en: So, we have the Gym environment set up. What's next, you may ask. In the next
    section, we will set up the tools and libraries we need to develop deep reinforcement
    learning agents to train in these environments!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们已经设置好了Gym环境。你可能会问，接下来是什么？在下一节中，我们将设置开发深度强化学习代理所需的工具和库，以便在这些环境中进行训练！
- en: Installing tools and libraries needed for deep reinforcement learning
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装深度强化学习所需的工具和库
- en: '[Chapter 2](part0033.html#VF2I0-22c7fc7f93b64d07be225c00ead6ce12), *Reinforcement
    Learning and Deep Reinforcement Learning*, prepped you with the basics of reinforcement
    learning. With that theoretical background, we will be able to implement some
    cool algorithms. Before that, we will make sure we have the required tools and
    libraries at our disposal.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](part0033.html#VF2I0-22c7fc7f93b64d07be225c00ead6ce12)，*强化学习与深度强化学习*，为你提供了强化学习的基础知识。有了这些理论背景，我们将能够实现一些很酷的算法。在那之前，我们将确保我们拥有所需的工具和库。'
- en: 'We can actually write cool reinforcement learning algorithms in Python without
    using any higher-level libraries. However, when we start to use function approximators
    for the value functions or the policy, and especially if we use deep neural networks
    as the function approximators, it is better to use highly optimized deep learning
    libraries instead of writing our own routines. A deep learning library is the
    major tool/library that we will need to install. There are different libraries
    out there today: PyTorch, TensorFlow, Caffe, Chainer, MxNet, and CNTK, to name
    a few. Each library has its own philosophy, merits, and demerits, depending on
    the use cases. We will be using PyTorch for developing the deep reinforcement
    learning algorithms in this book, due to its simplicity of use and dynamic graph
    definition. The algorithms we will discuss and the way we approach the implementation
    in this book will be explained in such a way that you can easily re-implement
    them using the framework of your choice.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上可以在Python中编写很酷的强化学习算法，而不使用任何高级库。然而，当我们开始使用函数逼近器来近似价值函数或策略，尤其是当我们使用深度神经网络作为函数逼近器时，最好使用经过高度优化的深度学习库，而不是编写自己的代码。深度学习库是我们需要安装的主要工具/库。如今有许多不同的库：PyTorch、TensorFlow、Caffe、Chainer、MxNet和CNTK等。每个库都有自己的哲学、优点和缺点，具体取决于使用场景。由于PyTorch易于使用并且支持动态图定义，我们将在本书中使用PyTorch来开发深度强化学习算法。本书中讨论的算法及其实现方式将以一种方式进行解释，以便你可以轻松地使用你选择的框架重新实现它们。
- en: 'If you do not have a GPU on your machine, or if you do not plan to use your
    GPU for training, you may skip the GPU driver installation steps and can install
    a CPU-only binary version of PyTorch using the following conda command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的机器没有GPU，或者如果你不打算使用GPU进行训练，你可以跳过GPU驱动安装步骤，并使用以下conda命令安装仅限CPU的PyTorch二进制版本：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that you will *not*be able to accelerate the training of some of the agents
    we will develop as part of this book, which can utilize a GPU for faster training.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你将*无法*加速我们将在本书中开发的部分代理的训练，这些代理可以利用GPU来加速训练。
- en: Installing prerequisite system packages
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装前置系统软件包
- en: 'Let''s begin by making sure we have the latest package versions from the Ubuntu
    upstream repositories. We can do that by running the following commands:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先确保我们从Ubuntu上游仓库获得最新的软件包版本。我们可以通过运行以下命令来实现：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Next, we will install the prerequisite packages. Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装所需的前置软件包。注意
- en: 'hat some of these packages may already have been installed on your system,
    but it is good to make sure we have them all:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些软件包可能已经在你的系统上安装，但最好确保我们拥有所有必要的软件包：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Installing Compute Unified Device Architecture (CUDA)
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装计算统一设备架构（CUDA）
- en: 'If you do not have an Nvidia GPU or if you have an older Nvidia GPU that does
    not support CUDA, you can skip this step and move on to the next section, where
    we go over the PyTorch installation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有Nvidia GPU，或者如果你有一块较旧的Nvidia GPU且不支持CUDA，你可以跳过这一步，继续执行下一部分，在其中我们将介绍PyTorch的安装：
- en: Download the latest CUDA driver for your Nvidia GPU from the official Nvidia
    website here: [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Nvidia官方网站下载适用于你的Nvidia GPU的最新CUDA驱动程序，网址为：[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)。
- en: Choose Linux under the operating system and your architecture (mostly x86_64),
    and then choose your Linux OS distribution (Ubuntu) version 14.04, 16.04, or 18.04,
    depending on your version, and select deb(local) as the installer type. That will
    download the cuda local installation file, named something like `cuda-repo-ubuntu1604-8-0-local_8.0.44-1_amd64`.
    Note your cuda version (8.0 in this case). We will use this CUDA version later
    while installing PyTorch.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在操作系统下选择Linux以及你的架构（通常是x86_64），然后根据你的版本选择相应的Linux操作系统发行版（Ubuntu）版本 14.04、16.04
    或 18.04，并选择deb(local)作为安装类型。这样会下载名为`cuda-repo-ubuntu1604-8-0-local_8.0.44-1_amd64`的CUDA本地安装文件。记下你的CUDA版本（在本例中为8.0）。稍后我们将使用这个CUDA版本来安装PyTorch。
- en: 'You can then follow the instructions or run the following command to install
    CUDA:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以按照说明或运行以下命令来安装CUDA：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If all goes well, you should now have Cuda successfully installed. To quickly
    check to see that everything went fine, run the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该已经成功安装了CUDA。为了快速检查一切是否正常，请运行以下命令：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will print out the Cuda version information, similar to the output shown
    in the following screenshot. Note that your output may be different, depending
    on the version of Cuda you installed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这会打印出CUDA版本信息，类似于以下截图中显示的输出。请注意，你的输出可能不同，取决于你安装的CUDA版本：
- en: '![](img/00109.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: If you got an output similar to this, it's good news!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到了类似的输出，那么这是个好消息！
- en: You may go ahead and install the latest **CUDA Deep Neural Network** (**cuDNN**) on
    your system. We will not cover the installation steps in this book, but the installation
    steps are straightforward and listed on the Nvidia official CuDNN download page
    here: [https://developer.nvidia.com/rdp/form/cudnn-download-survey](https://developer.nvidia.com/rdp/form/cudnn-download-survey).
    Note that you need to register for a free Nvidia developer account to download
    it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以继续在系统上安装最新的**CUDA深度神经网络**（**cuDNN**）。本书不会详细讲解安装步骤，但安装步骤很简单，并列出了Nvidia官方CuDNN下载页面，网址为：[https://developer.nvidia.com/rdp/form/cudnn-download-survey](https://developer.nvidia.com/rdp/form/cudnn-download-survey)。请注意，你需要注册一个免费的Nvidia开发者账户才能下载。
- en: Installing PyTorch
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyTorch
- en: 'We are now ready to install PyTorch! Fortunately, it is as simple as running
    the following command inside our `rl_gym_book`conda environment:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好安装PyTorch了！幸运的是，在我们的`rl_gym_book`conda环境中运行以下命令就能轻松完成：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note that this command will install PyTorch with CUDA 8.0\. You noted the CUDA
    version that you installed before, and the command may change slightly depending
    on which CUDA version you installed. For example, if you installed CUDA 9.1, the
    command to install will be this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个命令会安装带有CUDA 8.0的PyTorch。你应该已经注意到之前安装的CUDA版本，命令可能会根据你安装的CUDA版本有所不同。例如，如果你安装了CUDA
    9.1，安装命令会是：
- en: '`conda install pytorch torchvision cuda91 -c pytorch`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda install pytorch torchvision cuda91 -c pytorch`'
- en: You can find the updated command to install at [http://pytorch.org](http://pytorch.org)
    based on your OS, package manager (conda or pip or from source), Python version
    (we use 3.5), and CUDA version.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://pytorch.org](http://pytorch.org)找到根据你的操作系统、包管理器（conda或pip或源码安装）、Python版本（我们使用的是3.5）和CUDA版本更新的安装命令。
- en: 'That''s it! Let''s quickly try importing the PyTorch library and make sure
    it works. Type or copy the following lines of code into a file named `pytorch_test.py`under
    the `~/rl_gym_book` directory:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们快速尝试导入PyTorch库，确保它能够正常工作。将以下代码行输入或复制到名为`pytorch_test.py`的文件中，并将其保存在`~/rl_gym_book`目录下：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run this script inside the `rl_gym_book`conda environment. The following screenshot
    is provided as an example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`rl_gym_book`conda环境中运行此脚本。以下截图作为示例提供：
- en: '![](img/00110.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: Note that you may see different values for the tensor, and you may see different
    values when you run the script another time. It is because of the torch. The `Tensor()`
    function generates a random tensor of the given shape, (3, 3) in our case. PyTorch
    follows similar syntax to NumPy. If you are familiar with NumPy, you can pick
    up PyTorch easily. If you are not familiar with NumPy or PyTorch, it is advised
    that you follow the official PyTorch tutorial to get yourself acquainted with
    it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你可能会看到张量的不同值，并且每次运行脚本时看到的值可能也不同。这是由于`torch`的原因。`Tensor()`函数会生成给定形状的随机张量，在我们的例子中是（3,
    3）。PyTorch采用与NumPy相似的语法。如果你熟悉NumPy，学习PyTorch会很容易。如果你不熟悉NumPy或PyTorch，建议你先参考官方PyTorch教程来熟悉它。
- en: You may notice that the folder name used in some of the sample console screenshots
    is `read rl_gym_book` rather than HOIAWOG. Both these directory names are interchangeable.
    In fact, they are symbolic links pointing to the same directory.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，在一些示例控制台截图中使用的文件夹名称是`read rl_gym_book`而不是HOIAWOG。这两个目录名是可以互换的，实际上它们是指向同一目录的符号链接。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went through the step-by-step setup process to install and
    configure our development environment using conda, OpenAI Gym, and Pytorch! This
    chapter helped us make sure that we have all the required tools and libraries
    installed to start developing our agents in Gym environments. In the next chapter,
    we will explore the features of Gym environments to understand how they work,
    and how we can use them to train our agents. In [Chapter 5](part0078.html#2ACBS0-22c7fc7f93b64d07be225c00ead6ce12),
    *Implementing Your First Learning Agent – Solving the Mountain Car Problem*, we
    will jump right into developing our first reinforcement learning agent to solve
    the mountain car problem! We will then gradually move on and implement more sophisticated
    reinforcement learning algorithms in the subsequent chapters.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细讲解了使用conda、OpenAI Gym和Pytorch安装和配置开发环境的**逐步**设置过程！本章帮助我们确保已经安装了所有必需的工具和库，以便开始在Gym环境中开发我们的智能体。在下一章中，我们将探索Gym环境的功能，了解它们是如何工作的，以及我们如何使用它们来训练智能体。在[第5章](part0078.html#2ACBS0-22c7fc7f93b64d07be225c00ead6ce12)，*实现你的第一个学习智能体——解决山地车问题*，我们将直接开始开发第一个强化学习智能体来解决山地车问题！随后，我们将逐步实现更复杂的强化学习算法，敬请期待后续章节。
