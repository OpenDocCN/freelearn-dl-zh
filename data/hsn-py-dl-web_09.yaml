- en: Deep Learning on Google Cloud Platform Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Google Cloud Platform 上使用 Python 进行深度学习
- en: In the previous chapter, we saw a variety of deep learning APIs that are provided
    by various organizations. We also saw their applicability broadly grouped into
    two categories—the first was computer vision and image processing, and the second
    was natural language processing. We are going to continue exploring deep learning
    APIs in this chapter as well. This chapter introduces you to **Google Cloud Platform**
    (**GCP**) and three APIs offered by it in the area of deep learning.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章，我们看到了一些由各个组织提供的深度学习 API。我们还看到它们的应用范围大致可以分为两类——第一类是计算机视觉和图像处理，第二类是自然语言处理。我们将在本章继续探索深度学习
    API。本章将介绍 **Google Cloud Platform** (**GCP**) 及其在深度学习领域提供的三个 API。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Setting up your GCP account
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的 GCP 账户
- en: Creating your first project on GCP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GCP 上创建你的第一个项目
- en: Using the Dialogflow API in Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中使用 Dialogflow API
- en: Using the Cloud Vision API in Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中使用 Cloud Vision API
- en: Using the Cloud Translation API in Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中使用 Cloud Translation API
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can access the code for this chapter from [https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter6).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter6)
    获取本章的代码。
- en: To run the code in this chapter, you'll need to have Python 3.6+ on your system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本章的代码，你的系统需要安装 Python 3.6 及以上版本。
- en: Other requisite installations will be introduced during the course of this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章过程中还会介绍其他必需的安装。
- en: Setting up your GCP account
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的 GCP 账户
- en: 'Before we proceed with using the APIs offered by GCP, you must set up your
    GCP account. Assuming that you already have a Google account—first, head to [https://cloud.google.com/](https://cloud.google.com/).
    GCP gives you $300 of credit (which you can use for a period of 12 months) if
    you are signing up to it for the first time; this credit is sufficient enough
    to accommodate many good projects and enable you to try out the offerings of GCP.
    Once this has been done, we can follow these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 GCP 提供的 API 之前，你必须先设置 GCP 账户。假设你已经有一个 Google 账户——首先，前往 [https://cloud.google.com/](https://cloud.google.com/)。如果你是第一次注册
    GCP，GCP 会提供 $300 的信用额度（有效期为 12 个月）；这笔信用额度足够支持许多良好的项目并让你试用 GCP 的服务。完成后，我们可以按照以下步骤操作：
- en: 'At the top-right corner of GCP''s home page, you should be able to locate a
    Try free button. Just click on it:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 首页的右上角，你应该能找到一个“免费试用”按钮。点击它：
- en: '![](img/8d0065fb-e97a-457a-bca4-8a70e70fa661.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d0065fb-e97a-457a-bca4-8a70e70fa661.png)'
- en: 'If you are not signed in to your Google account, you will be asked to sign
    in. Select your country accordingly and make sure you check the Terms of service
    box. After this, click on AGREE AND CONTINUE. You will see a page as in the following
    screenshot:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尚未登录 Google 账户，系统会要求你登录。根据提示选择你的国家，并确保勾选服务条款框。之后，点击同意并继续。你会看到如下截图页面：
- en: '![](img/c2b7f7a6-bbb5-4daf-8a80-e52ef7edd315.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2b7f7a6-bbb5-4daf-8a80-e52ef7edd315.png)'
- en: Then, you will be asked to enter the details for a payment method of your choice.
    Even if you have free credits, in order to use GCP's utilities, you need to set
    up a valid billing account. But don't worry, you will not be charged from your
    billing account unless you allow GCP to do so. During your free trial, all the
    billable utilities that you will use on GCP will be deducted from your free credit
    only. Once the limit for your free credit ends, GCP will send you a reminder.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，系统会要求你输入所选择的支付方式的详细信息。即使你有免费的信用额度，为了使用 GCP 的服务，你也需要设置一个有效的计费账户。但不用担心，除非你允许
    GCP 否则不会从你的计费账户中扣费。在免费试用期间，你在 GCP 上使用的所有计费服务将仅从你的免费信用额度中扣除。一旦免费信用额度用尽，GCP 会向你发送提醒。
- en: 'Once your billing formalities are done, you should end up at GCP''s console
    page, which looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完成计费手续后，你应该会进入 GCP 的控制台页面，界面如下所示：
- en: '![](img/469c0188-c363-4a28-a15f-d060ca342a01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/469c0188-c363-4a28-a15f-d060ca342a01.png)'
- en: This is actually your GCP dashboard, which gives you an overall summary of your
    GCP usage. GCP also lets you customize the tags that appear on your GCP console.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的 GCP 仪表板，它会给你一个 GCP 使用情况的总体概览。GCP 还允许你自定义在控制台上显示的标签。
- en: You should now be done with the GCP account setup. To be able to use the utilities
    in GCP, you need to create a GCP project with a valid billing account tagged to
    it. In the next section, you will see how to do that.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经完成了 GCP 账户的设置。为了能够使用 GCP 中的工具，你需要创建一个带有有效计费账户的 GCP 项目。在接下来的章节中，你将看到如何操作。
- en: Creating your first project on GCP
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GCP 上创建你的第一个项目
- en: 'A project helps you organize all your GCP resources systematically. Creating
    a project on GCP can be done in just a matter of a few clicks:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 项目帮助你系统地组织所有的 GCP 资源。创建 GCP 项目只需几个点击步骤：
- en: 'After signing in to your Google account, open up your GCP console using [https://console.cloud.google.com](https://console.cloud.google.com).
    In the top-left corner, you should see Google Cloud Platform and just beside that,
    you can see a drop-down list, as shown:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录你的 Google 账户后，使用 [https://console.cloud.google.com](https://console.cloud.google.com)
    打开 GCP 控制台。在左上角，你应该看到 Google Cloud Platform，并且就在旁边，你可以看到一个下拉列表，如下所示：
- en: '![](img/97baa6ef-0c5a-4258-b4d2-f1910f97cc82.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97baa6ef-0c5a-4258-b4d2-f1910f97cc82.png)'
- en: 'If you did create any projects while signing up for GCP or previously, then
    one of your projects will appear in the marked area (fast-ai-exploration and gcp-api
    are two projects that I created on GCP). Now, click on the down arrow and a popup
    should appear:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在注册 GCP 时或之前创建了任何项目，那么你的项目将出现在标记区域（我在 GCP 上创建了 fast-ai-exploration 和 gcp-api
    两个项目）。现在，点击下拉箭头，应该会弹出一个窗口：
- en: '![](img/d3f3ccc7-fc1e-4338-9fb3-f5704b19b0f7.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3f3ccc7-fc1e-4338-9fb3-f5704b19b0f7.png)'
- en: 'Click on NEW PROJECT to proceed. You should end up on a page, shown in the
    following screenshot, that will ask you to specify the project''s name. GCP automatically
    generates an ID for the project that you are creating but it also lets you edit
    that ID according to your choices:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 "NEW PROJECT" 继续。你将进入一个页面，如下图所示，页面会要求你指定项目名称。GCP 会自动为你创建项目的 ID，但你也可以根据自己的需求编辑该
    ID：
- en: '![](img/d1652d62-c16c-4b05-b638-cbbaaebcb4b0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1652d62-c16c-4b05-b638-cbbaaebcb4b0.png)'
- en: 'After you are done specifying the initial details of your project, just click
    on CREATE and the project will be created. Once the project is created, it should
    appear in the projects list. You can always navigate to this list using the handy
    dropdown that GCP provides on its console page. You can see this in the following
    screenshot:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你指定了项目的初步细节后，只需点击 "CREATE" 项目即可创建。创建完成后，项目应该会出现在项目列表中。你可以随时通过 GCP 控制台页面提供的下拉菜单访问该列表。你可以在下图中看到这个界面：
- en: '![](img/eec5591a-a3f9-4e1a-b6aa-bbe3b0be234a.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eec5591a-a3f9-4e1a-b6aa-bbe3b0be234a.png)'
- en: If you want to learn more about GCP projects, you can check the official documentation
    at [https://cloud.google.com/storage/docs/projects](https://cloud.google.com/storage/docs/projects).
    GCP is equipped with a wide suite of various utilities that can be found at [https://cloud.google.com/products/](https://cloud.google.com/products/).
    You are encouraged to take a look and explore them with respect to your interests.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 GCP 项目的信息，可以查看官方文档 [https://cloud.google.com/storage/docs/projects](https://cloud.google.com/storage/docs/projects)。GCP
    提供了一整套广泛的实用工具，你可以在 [https://cloud.google.com/products/](https://cloud.google.com/products/)
    找到它们。我们鼓励你查看并根据个人兴趣进行探索。
- en: GCP provides us with a wide range of APIs that can be used for a variety of
    tasks, including deep learning. In the next couple of sections, we will see how
    some of the most widely used deep learning APIs can be consumed using Python code.
    We will start with Dialogflow.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 为我们提供了广泛的 API，可以用于多种任务，包括深度学习。在接下来的几个章节中，我们将看到如何使用 Python 代码调用一些最常用的深度学习
    API。我们将从 Dialogflow 开始。
- en: Using the Dialogflow API in Python
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中使用 Dialogflow API
- en: Before we start to learn how to use the Dialogflow API in Python, let's understand
    what Dialogflow is all about.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始学习如何在 Python 中使用 Dialogflow API 之前，让我们先了解一下 Dialogflow 是什么。
- en: 'Dialogflow (formerly known as **api.ai**) provides a suite of utilities for
    building natural and rich conversational interfaces, such as voice assistants
    and chatbots. It is powered by deep learning and natural language processing and
    is used by a large number of companies. It seamlessly integrates with websites,
    mobile applications, and many popular platforms, such as Facebook Messenger, Amazon
    Alexa, and so on. Dialogflow provides us with three major components for building
    a conversational user interface:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Dialogflow（前身为**api.ai**）提供了一套用于构建自然且丰富的对话界面的工具，如语音助手和聊天机器人。它由深度学习和自然语言处理技术驱动，并被大量公司使用。它与网站、移动应用程序以及许多流行的平台（如
    Facebook Messenger、Amazon Alexa 等）无缝集成。Dialogflow 为我们提供了构建对话式用户界面的三个主要组件：
- en: The best practices and processes that can easily be applied to any conversational
    user interface
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以轻松应用于任何对话式用户界面的最佳实践和流程
- en: Functionalities to add any custom logic that might be required for building
    a conversational user interface
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加任何构建对话式用户界面所需的自定义逻辑的功能
- en: Facilities to train agents so as to fine-tune the overall experience of the
    interface
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于训练代理的功能，以便优化界面的整体体验
- en: Now, we will see how Dialogflow can be used to create a simple application in
    Python. You can refer to [https://dialogflow.com](https://dialogflow.com) to learn
    more about Dialogflow.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何使用 Dialogflow 创建一个简单的 Python 应用程序。您可以访问 [https://dialogflow.com](https://dialogflow.com)
    了解更多关于 Dialogflow 的信息。
- en: We will begin with the creation of a Dialogflow account.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个 Dialogflow 帐户开始。
- en: Creating a Dialogflow account
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Dialogflow 帐户
- en: 'Creating a Dialogflow account is simple and easy. The process involves the
    following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 Dialogflow 帐户非常简单。整个过程包含以下步骤：
- en: 'Visit [https://console.dialogflow.com/api-client/#/login](https://console.dialogflow.com/api-client/#/login)
    and you will see the following screen:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://console.dialogflow.com/api-client/#/login](https://console.dialogflow.com/api-client/#/login)，您将看到以下界面：
- en: '![](img/397707d9-086c-4cdf-902b-4ec2d5944ec1.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/397707d9-086c-4cdf-902b-4ec2d5944ec1.png)'
- en: After clicking the sign in with Google button, you'll be asked to choose which
    Google account you want to use with Dialogflow.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“使用 Google 登录”按钮后，系统将要求您选择一个要与 Dialogflow 一起使用的 Google 帐户。
- en: On selecting the account, you might be asked to allow Account Permissions for
    Diagflow and also to accept the Dialogflow terms and conditions.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择帐户后，可能会要求您允许 Dialogflow 的帐户权限，并接受 Dialogflow 的条款和条件。
- en: Creating a new agent
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新代理
- en: After creating an account, you will be greeted with a dashboard that will either
    display your active Dialogflow projects or ask you to create a new agent to be
    displayed—but what is an **agent**?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建帐户后，您将看到一个仪表板，仪表板将显示您的活动 Dialogflow 项目，或者提示您创建一个新的代理并进行显示——但是，什么是**代理**呢？
- en: An agent—in Dialogflow terminology—is a piece of software that performs the
    task of receiving input from users, which might be in the format of text, audio,
    image, or video. It then tries to determine the *intent* or the previously defined
    appropriate action corresponding to the input. The matched intent might perform
    an *action* or it may simply arrive on a hypertext response to the query made
    by the user input. Finally, the agent returns the results to the user.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 代理——在 Dialogflow 的术语中——是一个软件，负责接收用户输入，这些输入可能是文本、音频、图片或视频格式。然后，它尝试确定*意图*，即与输入对应的预定义的适当操作。匹配的意图可能会执行一个*动作*，或者仅仅返回一个超文本响应，回应用户的查询。最后，代理将结果返回给用户。
- en: To create a new agent, in the left-hand side navigation menu of the Dialogflow
    console, click on Create Agent.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新代理，请在 Dialogflow 控制台的左侧导航菜单中点击“创建代理”。
- en: 'You will be presented with a screen that looks like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到如下所示的界面：
- en: '![](img/9023d9b6-88bb-447f-aeb6-17b44aae03b8.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9023d9b6-88bb-447f-aeb6-17b44aae03b8.png)'
- en: We have named our agent DemoBot and set the default language to English. Further,
    we had to select a Google project for the agent.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将代理命名为 DemoBot，并将默认语言设置为英语。此外，我们还需要为该代理选择一个 Google 项目。
- en: A Google project—or simply a **project**—is a term that you encounter in the
    study of GCP. A project encompasses the entire array of resources allocated toward
    any software project that uses those resources and is financed by a single billing
    account on GCP. No resources can be allocated without defining a project for them.
    Further, no project can be created without adding a valid billing option to it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Google 项目——或简而言之，**项目**——是你在学习GCP时遇到的一个术语。项目包含了为任何使用这些资源的软件项目分配的所有资源，这些资源由GCP上的一个单一账单账户进行融资。在没有为资源定义项目的情况下，无法分配任何资源。此外，在没有添加有效账单选项的情况下，无法创建项目。
- en: 'You will now be able to see a screen, as in the following screenshot, with
    certain default intents provided for your agent:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将能够看到如下截图中显示的界面，其中为你的代理提供了一些默认意图：
- en: '![](img/768479fc-f213-41d9-898d-927c60d1869b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/768479fc-f213-41d9-898d-927c60d1869b.png)'
- en: On the left, you can see the navigation menu, which provides all the various
    modules that can be brought together in your agent for better human-like interaction
    provided by the software. In the right-hand side panel, you have the option to
    test your agent at any moment with any input you provide. This will come in handy
    during the development of responses and when testing the matching of intents with
    input provided.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，你可以看到导航菜单，提供了所有可以组合在一起，以便软件提供更具人性化交互的各种模块。在右侧面板中，你可以随时测试你的代理，输入任何你提供的内容。这在响应开发和测试输入匹配意图时会非常有用。
- en: Creating a new intent
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新意图
- en: 'To create a new intent for our agent, follow these steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的代理创建一个新意图，按照以下步骤操作：
- en: Click the Create Intent button at the top-right corner of the middle section.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击中间区域右上角的创建意图按钮。
- en: You need to provide a name for this intent—let's say `Dummy Intent`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要为这个意图提供一个名称——我们称之为`Dummy Intent`。
- en: 'We will then need to provide some training phrases that would trigger this
    intent. Let''s say we provide three training phrases, as shown:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要提供一些训练短语，这些短语会触发此意图。假设我们提供了三个训练短语，如下所示：
- en: '![](img/a4a2458f-1671-4689-b374-e77d590feef0.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4a2458f-1671-4689-b374-e77d590feef0.png)'
- en: Now, we can expect this intent to be called on whenever the system encounters
    the phrases (or similar phrases) mentioned in the training.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以预期，当系统遇到训练中提到的短语（或类似短语）时，这个意图会被调用。
- en: 'We can now add some responses that our agent will make when this intent is
    invoked, as shown:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以添加一些响应，当这个意图被调用时，代理将作出响应，如下所示：
- en: '![](img/384b2f86-2a4f-40e0-8d34-b77951aa764d.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/384b2f86-2a4f-40e0-8d34-b77951aa764d.png)'
- en: At the top-right corner of the middle section, click on the SAVE button to save
    the new intent and you will be notified that the agent training has started.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在中间区域的右上角，点击保存按钮以保存新意图，系统会通知你代理训练已开始。
- en: For a small agent, the training completes within seconds and you'll be presented
    with an Agent training completed notification.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个小型代理，训练在几秒钟内完成，系统会显示“代理训练完成”的通知。
- en: We are now ready to test whether our agent is able to execute this intent.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备测试我们的代理是否能够执行这个意图。
- en: Testing your agent
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的代理
- en: On the right-hand side section of your Dialogflow console, you'll be able to
    test your agent. In the top text field, enter your query. In our agent, to call
    `Dummy Intent`, we'll write `Talk to the dummy`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在你Dialogflow控制台的右侧区域，你可以测试你的代理。在顶部文本框中输入你的查询。在我们的代理中，调用`Dummy Intent`时，我们输入`Talk
    to the dummy`。
- en: 'If the intent matches correctly, you''ll be able to see the response from `Dummy
    Intent`, as shown:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果意图正确匹配，你将能够看到来自`Dummy Intent`的响应，如下所示：
- en: '![](img/9846d629-256f-4200-a012-02f6dba24730.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9846d629-256f-4200-a012-02f6dba24730.png)'
- en: In the previous screenshot, you will observe that the input of the user is `Talk
    to the dummy` and the response generated is one of the two responses we defined
    in the responses for `Dummy Intent`. You can observe that the intent that was
    matched to the input was `Dummy Intent`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你会看到用户的输入是`Talk to the dummy`，生成的响应是我们为`Dummy Intent`定义的两个响应之一。你可以看到，匹配到输入的意图是`Dummy
    Intent`。
- en: We will now look at how we can invoke the agent using Python.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何使用Python调用代理。
- en: Installing the Dialogflow Python SDK
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Dialogflow Python SDK
- en: 'In this section, we will demonstrate how you can use the Dialogflow Python
    API V2 with your Dialogflow agent to bring interactivity to your application built
    using Python. Let''s first understand how the several components of the DialogFlow
    ecosystem interact with the following diagram:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示如何使用 Dialogflow Python API V2 与您的 Dialogflow 代理配合使用，将互动性带入您使用 Python
    构建的应用程序。首先，让我们通过以下图表理解 DialogFlow 生态系统的多个组件如何交互：
- en: '![](img/48741d83-0b89-4933-a7f4-df36291f5f9a.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48741d83-0b89-4933-a7f4-df36291f5f9a.png)'
- en: The user creates the input, which is sent to the agent via integration APIs,
    websites, or apps. The agent matches the user input to the available intents and
    produces a fulfillment of the **query**. The response is sent back to the user
    interface by the means of a webhook and the response is presented to the user.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 用户创建输入内容，并通过集成 API、网站或应用将其发送给代理。代理将用户输入与可用的意图进行匹配，并生成 **查询** 的响应。响应通过 Webhook
    发送回用户界面，并展示给用户。
- en: It is quite possible for the integration APIs to include services other than
    Dialogflow. You could create an application that could propagate the same user
    query to multiple agents and consolidate their response.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 集成 API 很可能会包含 Dialogflow 以外的服务。您可以创建一个应用程序，将相同的用户查询传播到多个代理，并汇总它们的响应。
- en: 'Alternatively, the developer can introduce middleware handlers or integrations,
    which would preprocess or postprocess the user query and agent response:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，开发者可以引入中间件处理程序或集成，这些程序会对用户查询和代理响应进行预处理或后处理：
- en: 'To install the Dialogflow Python SDK, we use the following command in the terminal:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Dialogflow Python SDK，我们在终端使用以下命令：
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It is highly recommended that you create a virtual environment using `virtualenv`
    before using the previous command to have clean and unbroken dependencies. To
    learn more about `virtualenv`, refer to [https://virtualenv.pypa.io/en/latest/](https://virtualenv.pypa.io/en/latest/).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议在使用之前的命令之前，使用 `virtualenv` 创建一个虚拟环境，以便拥有干净且不间断的依赖关系。要了解有关 `virtualenv` 的更多信息，请参考
    [https://virtualenv.pypa.io/en/latest/](https://virtualenv.pypa.io/en/latest/)。
- en: 'After the installation is complete, you will be able to import the Dialogflow
    API to your project by using the following import code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您可以使用以下导入代码将 Dialogflow API 导入到您的项目中：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We'll now create a GCP service account to authenticate our Python script in
    order to use the Dialogflow agent we created.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个 GCP 服务账户来认证我们的 Python 脚本，以便使用我们创建的 Dialogflow 代理。
- en: Creating a GCP service account
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 GCP 服务账户
- en: 'A GCP service account manages the permissions provided to access a GCP resource.
    The Dialogflow agent we created was a GCP resource and so to use it from the Python
    API, we''ll need a service account:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 服务账户管理用于访问 GCP 资源的权限。我们创建的 Dialogflow 代理是一个 GCP 资源，因此要通过 Python API 使用它，我们需要一个服务账户：
- en: In the GCP console, from the left-hand side navigation menu, go to APIs | Services
    | Credentials.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 控制台中，从左侧导航菜单中，前往 APIs | Services | Credentials。
- en: 'Click the Create credentials button to get the following options:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建凭证”按钮，获取以下选项：
- en: '![](img/6bbe0df1-e132-459f-bc1b-f48cfb9be413.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bbe0df1-e132-459f-bc1b-f48cfb9be413.png)'
- en: Click on Service account key. In the page that comes up next, select Dialogflow
    Integrations as the service account and JSON as the key type. After clicking Create,
    a JSON file is downloaded to your computer.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“服务账户密钥”。在接下来的页面中，选择 Dialogflow 集成作为服务账户，JSON 作为密钥类型。点击“创建”后，一个 JSON 文件将下载到您的计算机。
- en: Note down the address of this JSON file—for example, `/home/user/Downloads/service-account-file.json`.
    The file name could differ, as it is provided by the GCP console when you download
    the file to your computer.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下此 JSON 文件的地址，例如 `/home/user/Downloads/service-account-file.json`。文件名可能会有所不同，因为它是由
    GCP 控制台在您下载文件到计算机时提供的。
- en: Open this file to obtain the project ID.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开此文件以获取项目 ID。
- en: 'Now, use the following commands—with suitable replacements as present on your
    system—in the terminal to export the credentials to the environment variables:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在终端使用以下命令——根据您系统上的实际情况进行适当替换——将凭证导出到环境变量中：
- en: 'In Linux (Terminal):'
  id: totrans-99
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux（终端）中：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Windows (Command Prompt):'
  id: totrans-101
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows（命令提示符）中：
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With this done, we are now ready to write the Python script that will call our
    Dialogflow agent.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，我们现在准备编写调用 Dialogflow 代理的 Python 脚本。
- en: Please note that the preceding commands only set the variables for the current
    session. You need to run the commands every time you restart the session.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述命令仅设置当前会话的变量。每次重新启动会话时，您需要运行这些命令。
- en: Calling the Dialogflow agent using Python API
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python API 调用 Dialogflow 代理
- en: 'In this example, we''ll be creating a simple Python-based API that calls to
    the agent we created in the Dialogflow console to invoke `Dummy Intent`, as shown:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个简单的基于 Python 的 API，调用我们在 Dialogflow 控制台中创建的代理来调用 `Dummy Intent`，如下面所示：
- en: 'Firstly, we must import the Dialogflow module to the project. To do so, use
    the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须将 Dialogflow 模块导入项目。为此，请使用以下代码：
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To get the project ID into the script, we can fetch it from the runtime environment
    variables. To do so, use the following code:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将项目 ID 引入脚本中，我们可以从运行时环境变量中获取它。为此，请使用以下代码：
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will also declare a unique session ID to store the records of the conversations
    made in any single session with the user:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将声明一个唯一的会话 ID，以存储与用户进行的任何单个会话的对话记录：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We''ll now create a handy function that will allow us to repeatedly perform
    a set of preprocessing statements required to call the Dialogflow agent:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建一个方便的函数，允许我们反复执行一组调用 Dialogflow 代理所需的预处理语句：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, we will first initialize a `SessionsClient` object. A
    session records the complete interaction between the user and the Dialogflow agent
    during one uninterrupted conversation. Next, we must set the path of the session,
    which is the mapping of the project to a unique session ID.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们首先初始化一个 `SessionsClient` 对象。会话记录用户与 Dialogflow 代理在一次不间断对话中的完整互动。接下来，我们必须设置会话路径，即将项目映射到一个唯一的会话
    ID。
- en: The next two lines of the preceding function definition are used to create a
    Dialogflow `QueryInput` object that contains a Dialogflow `TextInput` object.
    The `query_input` variable holds the message the user inputs for the Dialogflow
    agent.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上面函数定义的接下来的两行代码用于创建一个包含 Dialogflow `TextInput` 对象的 `QueryInput` 对象。`query_input`
    变量保存用户输入的消息，用于 Dialogflow 代理。
- en: The next line invokes the `detect_intent()` method of the `SessionsClient` object.
    The `session ID-project ID` mapping, along with the input, is passed as the parameter
    to the method. The response of the Dialogflow agent is stored in the response
    variable. The function returns the fulfillment text response.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码调用了 `SessionsClient` 对象的 `detect_intent()` 方法。会话 ID-项目 ID 映射及输入作为参数传递给该方法。Dialogflow
    代理的响应存储在响应变量中。该函数返回满足文本响应。
- en: 'Let''s now use this method. First, declare a message to pass to the Dialogflow
    agent. Recall the training phrases we provided to our Dialogflow agent for `Dummy
    Intent`. We''ll pass a message that is similar to the training phrases:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们使用这个方法。首先，声明一个消息并传递给 Dialogflow 代理。回想一下我们为 `Dummy Intent` 提供的训练短语。我们将传递一个类似于训练短语的消息：
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will get an output that is among the two responses we defined for `Dummy
    Intent`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得一个输出，它是我们为 `Dummy Intent` 定义的两个响应之一。
- en: 'Generate the response variable in the `detect_intent()` method, which can be
    done by adding the following line of code in the `detect_intent()` function:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `detect_intent()` 方法中生成响应变量，可以通过在 `detect_intent()` 函数中添加以下代码行来实现：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will get the following JSON:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下 JSON：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You will observe that the name of the matched intent is `Dummy Intent` and the
    output that we had in this call of the agent is `Congratulations, dummy intent
    user!`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您将观察到，匹配到的意图名称是 `Dummy Intent`，而我们在这次调用代理中获得的输出是 `恭喜，虚拟意图用户！`。
- en: 'There are several other ways of using the Dialogflow API using Python, including—but
    not limited to—audio-visual input and sensor-based inputs. The Dialogflow agents
    can be integrated with major platforms, such as Google Assistant, Facebook Messenger,
    Slack, Telegram, WhatsApp, and several others, as shown:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 调用 Dialogflow API 的方式有很多种，包括—但不限于—音视频输入和基于传感器的输入。Dialogflow 代理可以与主要平台集成，例如
    Google Assistant、Facebook Messenger、Slack、Telegram、WhatsApp 等，具体如下：
- en: '![](img/1d530c5f-6145-41e3-8de2-e80c9a4b511e.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d530c5f-6145-41e3-8de2-e80c9a4b511e.png)'
- en: The Dialogflow ecosystem is rapidly introducing new features and is increasingly
    moving toward providing complete AI-based chatbots that can perform several tasks
    at the same time.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Dialogflow 生态系统正在快速推出新功能，并且越来越朝着提供能够同时执行多项任务的基于 AI 的完整聊天机器人方向发展。
- en: In the next section, we'll explore another GCP API that can be used to predict
    the contents of images and videos.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探索另一个可以用于预测图像和视频内容的 GCP API。
- en: Using the Cloud Vision API in Python
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中使用 Cloud Vision API
- en: Computer vision is the field of making computers understand images and make
    sense of them. Common computer vision tasks include image classification, image
    detection, image segmentation, and so on. As discussed in earlier chapters, the
    field of computer vision has been heavily affected by the effectiveness of deep
    learning in achieving human-level (and sometimes even better) performance.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉是使计算机理解图像并从中提取信息的领域。常见的计算机视觉任务包括图像分类、图像检测、图像分割等。如前几章所述，计算机视觉领域受到深度学习在实现人类水平（有时甚至更好）性能方面的有效性影响很大。
- en: 'The Cloud Vision API provides us with a lot of utilities for performing computer
    vision tasks. Cloud Vision allows us to use the pre-trained models as well as
    build our own custom production-ready models that cater to our needs (such as
    AutoML Vision Beta). Let''s now briefly look at the features that are offered
    by the Cloud Vision API:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Vision API 提供了许多工具来执行计算机视觉任务。Cloud Vision 允许我们使用预训练模型，也可以构建我们自己的定制化生产就绪模型，以满足我们的需求（例如
    AutoML Vision Beta）。现在让我们简要看看 Cloud Vision API 提供的功能：
- en: Label detection
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签检测
- en: Optical character recognition
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光学字符识别
- en: Handwriting recognition
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手写识别
- en: Landmark detection
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地标检测
- en: Object localization
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体定位
- en: Image search
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像搜索
- en: Product search
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品搜索
- en: 'Apart from the previously mentioned features, Cloud Vision also lets us extract
    different attributes of a given image. The following screenshot shows this utility:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的功能，Cloud Vision 还允许我们提取给定图像的不同属性。下图展示了这个功能：
- en: '![](img/278c72a8-1139-4273-a4e3-2d4f2274343d.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/278c72a8-1139-4273-a4e3-2d4f2274343d.png)'
- en: As we can see, when given an image, the Cloud Vision API automatically extracts
    its attributes. You can also try this by going to [https://cloud.google.com/vision/](https://cloud.google.com/vision/).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，当提供一张图像时，Cloud Vision API 会自动提取其属性。你也可以通过访问[https://cloud.google.com/vision/](https://cloud.google.com/vision/)来尝试这个功能。
- en: We have been using the term **pre-trained models** from earlier chapters. We
    have also seen how the Cloud Vision API lets us incorporate the pre-trained models.
    It will be worth digging a bit deeper into the term pre-trained models in order
    to understand the importance of using them.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前在章节中提到过**预训练模型**这一术语。我们也看到，Cloud Vision API 让我们能够使用这些预训练模型。深入了解“预训练模型”这一术语非常值得，这有助于我们理解使用它们的重要性。
- en: The importance of using pre-trained models
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预训练模型的重要性
- en: The use of pre-trained models is commonly referred to as **transfer learning**.
    Transfer learning is not something that is very fundamental to deep learning and
    it is just a methodology. It doesn't denote a particular deep learning model but
    its implications of transfer learning are very effective, especially in a deep
    learning context.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预训练模型通常被称为**迁移学习**。迁移学习并不是深度学习中非常基础的内容，它只是一种方法论。它并不指代某个特定的深度学习模型，但迁移学习的含义在深度学习中非常有效，尤其是在深度学习的背景下。
- en: We human beings do not learn each and every task from scratch; we try to utilize
    our past experiences to do tasks that are similar in nature. This is transfer
    learning. We tend to transfer the knowledge of our past experiences to similar
    tasks that we are met with.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们人类并不是从零开始学习每一项任务；我们尝试利用过去的经验来完成类似的任务。这就是迁移学习。我们倾向于将过去经验的知识转移到我们遇到的相似任务中。
- en: But how is this applicable to deep learning? Let's find out.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但这如何应用于深度学习呢？让我们来看看。
- en: 'When a neural network is trained for a particular task, it tries to estimate
    the value of the best possible weight''s matrices. Now, when you attempt to train
    another network on a similar kind of task, it turns out that you can use the weights
    from the previous task. The definition "similarity" is broad here and can be avoided
    for the time being. But you may wonder what the advantage here is. Well, the advantages
    are manifold, but here are a couple of examples:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当神经网络为某个特定任务进行训练时，它会试图估计最佳权重矩阵的值。现在，当你尝试为类似任务训练另一个网络时，事实证明你可以使用之前任务的权重。在这里，“相似性”的定义很宽泛，可以暂时忽略不提。但你可能会好奇，这里有什么优势。好吧，优势是多方面的，下面是几个例子：
- en: You don't need to train your neural network from scratch, which saves you a
    lot of time.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不需要从头开始训练神经网络，这为你节省了大量时间。
- en: It leverages the opportunity to use state-of-the-art results from a problem
    domain that is similar to yours.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它利用了使用与你的任务相似的领域问题的最先进成果的机会。
- en: 'In literature, the task that you use the network weights from is called a source
    task and the task that you apply the weights to is called the target task. The
    network model that you use the weights from is referred to as the pre-trained
    model. Goodfellow et al. gave a very subtle definition of transfer learning in
    their book *Deep Learning*:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在文献中，你使用网络权重的任务被称为源任务，你应用权重的任务被称为目标任务。你使用权重的网络模型被称为预训练模型。Goodfellow 等人在其著作《Deep
    Learning》中对迁移学习给出了非常微妙的定义：
- en: '"[A] situation where what has been learned in one setting is exploited to improve
    generalization in another setting."'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: “[A] 在一个环境中学到的知识被用来改善另一个环境中的泛化能力。”
- en: 'The use of transfer learning has shown exceptional results in a wide range
    of deep learning applications in areas such as **Natural Language Processing**
    (**NLP**), computer vision, and more. But transfer learning has its limitations
    as well:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移学习在自然语言处理（**NLP**）、计算机视觉等深度学习应用中已展现出卓越的成果。然而，迁移学习也有其局限性：
- en: Transfer learning can result in a performance drop when the source task is not
    sufficiently related to the task where transfer learning is being used.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当源任务与迁移学习所用任务没有充分的相关性时，迁移学习可能会导致性能下降。
- en: It gets difficult sometimes to determine how much transfer is required from
    the source task to the target task.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时候很难确定从源任务到目标任务需要多少迁移。
- en: For an in-depth study of transfer learning, you are encouraged to go through
    the book *Hands-On Transfer Learning with Python* by Dipanjan et al*.* We will
    now learn—with the help of an example—how to use the Cloud Vision API using Python.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了深入研究迁移学习，推荐你阅读 Dipanjan 等人所著的《Hands-On Transfer Learning with Python》一书。接下来，我们将通过一个示例学习如何使用
    Python 使用 Cloud Vision API。
- en: Setting up the Vision Client libraries
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Vision Client 库
- en: The Cloud Vision API is available through a set of libraries for different languages,
    called the Vision Client libraries.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Vision API 通过一组适用于不同编程语言的库提供，这些库被称为 Vision Client 库。
- en: 'One such library offered in this set is the Python Cloud Vision Client library,
    which we will be using in our example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 该系列库中提供的一个库是 Python Cloud Vision Client 库，我们将在示例中使用它：
- en: 'To install the Python Cloud Vision Client library, we use the following command
    in the terminal:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Python Cloud Vision Client 库，我们在终端中使用以下命令：
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is highly recommended that you use a Python virtual environment to install
    the Vision Client library.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议使用 Python 虚拟环境来安装 Vision Client 库。
- en: After the installation is complete, we will need to set up a service account
    to use the API.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要设置一个服务账户来使用 API。
- en: 'As discussed previously, the steps to be followed for setting up a service
    account are as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，设置服务账户的步骤如下：
- en: Open the Google Cloud console.
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Google Cloud 控制台。
- en: Go to APIs | Services | Credentials.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入“APIs | Services | Credentials”。
- en: Click on Create credentials.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建凭证”。
- en: Choose New Service Account in the drop-down menu for selecting the service account.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中选择“新建服务账户”以选择服务账户。
- en: Fill in any name for the service account.
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为服务账户填写任何名称。
- en: Leave Role unchecked. This is not needed when using the Cloud Vision API.
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选“角色”。在使用 Cloud Vision API 时不需要此项设置。
- en: Click on Create. Confirm any warning boxes that appear.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”。确认任何出现的警告框。
- en: The `service account credentials` JSON file gets downloaded to your computer.
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`service account credentials` JSON 文件会被下载到你的计算机中。'
- en: 'Now, as we did previously, export this downloaded file to the system environment.
    To do this, use the following command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，像之前一样，将下载的文件导出到系统环境中。为此，使用以下命令：
- en: 'In Linux (Terminal):'
  id: totrans-174
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux（终端）中：
- en: '[PRE12]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In Windows (Command Prompt):'
  id: totrans-176
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows（命令提示符）中：
- en: '[PRE13]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As a final step before using the Cloud Vision API, we need to enable the API
    within the project that we created the service account for. To do so, do the following:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用 Cloud Vision API 之前的最后一步，我们需要在创建服务账户的项目中启用该 API。为此，请执行以下操作：
- en: In the Google Cloud console's left-hand side navigation panel, click on APIs
    and Services.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Google Cloud 控制台的左侧导航面板中，点击“APIs 和 Services”。
- en: Click on Enable APIs & Services.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启用 APIs 和 Services”。
- en: Find the Cloud Vision API in the list that appears.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的列表中找到 Cloud Vision API。
- en: Click on Enable.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启用”。
- en: After this, we are ready to use the Cloud Vision API using Python in our script.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们准备好在脚本中使用 Python 调用 Cloud Vision API。
- en: The Cloud Vision API calling using Python
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 调用 Cloud Vision API
- en: Let's create a new Python script (or Jupyter notebook). In order to use the
    Cloud Vision API, we first need to import the Cloud Vision Client library.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的 Python 脚本（或 Jupyter notebook）。为了使用 Cloud Vision API，我们首先需要导入 Cloud
    Vision 客户端库。
- en: 'To do this, we use the following code:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们使用以下代码：
- en: '[PRE14]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With this, we''re ready to move on and use the client library. In our example,
    we will annotate an image. The image annotation service is provided by the `imageAnnotatorClient()`
    function in the Vision library. We will create an object of the method:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这些，我们就准备好继续使用客户端库了。在我们的示例中，我们将对一张图像进行标注。图像标注服务是通过 Vision 库中的 `imageAnnotatorClient()`
    函数提供的。我们将创建该方法的一个对象：
- en: '[PRE15]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s load the file to be tested for annotation into the program:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将要进行标注的文件加载到程序中：
- en: '[PRE16]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that you should have the `test.jpg` file in the same working directory
    in order for this to work.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`test.jpg` 文件应该与工作目录中的其他文件放在同一位置，才能正常工作。
- en: 'The file is currently a raw binary data file for the program. For the Cloud
    Vision API to work, we need to convert this into a type of image that the Vision
    Client will accept:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该文件目前是程序的原始二进制数据文件。为了让 Cloud Vision API 正常工作，我们需要将其转换为 Vision 客户端可以接受的图像类型：
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we make the call for GCP to annotate the image via the Cloud Vision
    API:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们通过 Cloud Vision API 调用 GCP 来对图像进行标注：
- en: '[PRE18]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After printing the labels set by the vision API, we will be able to see all
    the possible objects and features that the Cloud Vision API is able to detect
    in the picture provided, as shown:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 打印由 Vision API 设置的标签后，我们将能够看到 Cloud Vision API 能够在提供的图片中检测到的所有可能的物体和特征，如下所示：
- en: '![](img/20979113-d6cc-4b94-be0e-1fc2f49ba1c0.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20979113-d6cc-4b94-be0e-1fc2f49ba1c0.png)'
- en: 'If you print `labels`, the result should look like this:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打印 `labels`，结果应该如下所示：
- en: '![](img/fccb87ea-584c-4f34-8559-40f1e95c5206.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fccb87ea-584c-4f34-8559-40f1e95c5206.png)'
- en: The predicted labels are `Sky`, `Horizon`, `Atmosphere`, `Sunrise`, `Sunset`,
    `Morning`, `Ocean`, `Calm`, `Wing`, and `Evening`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 预测的标签是 `Sky`（天空）、`Horizon`（地平线）、`Atmosphere`（大气）、`Sunrise`（日出）、`Sunset`（日落）、`Morning`（早晨）、`Ocean`（海洋）、`Calm`（平静）、`Wing`（机翼）和
    `Evening`（傍晚）。
- en: The preceding predictions are very close to the real scene that is captured
    in the preceding photo. It was sunrise and taken from the window of an airplane.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述预测结果非常接近前面照片中捕捉到的实际场景。那是日出时分，从飞机的窗户拍摄的照片。
- en: Using the Cloud Translation API in Python
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中使用 Cloud Translation API
- en: The Cloud Translation API helps developers to easily integrate language translation
    functionalities into their applications. It is powered by state-of-the-art neural
    machine translation, which can be thought of as an amalgamation of deep learning
    and machine translation. The Cloud Translation API provides programmatic interfaces
    for using pre-trained models and building production-ready custom models.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Translation API 帮助开发人员轻松将语言翻译功能集成到他们的应用程序中。它由先进的神经机器翻译技术提供支持，可以将其视为深度学习和机器翻译的结合体。Cloud
    Translation API 提供了使用预训练模型和构建生产级自定义模型的编程接口。
- en: 'Many developers use the Cloud Translation API''s pre-trained models to dynamically
    translate a given set of text into a target language. The Cloud Translate API
    supports more than 100 languages. But this language library is evolving to empower
    the developer community. The following screenshot shows a translation of some
    text written in English to Bengali:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员使用 Cloud Translation API 的预训练模型动态将给定文本翻译成目标语言。Cloud Translate API 支持 100
    多种语言。但是这个语言库正在不断发展，以增强开发者社区的能力。以下截图展示了将一段英文文本翻译成孟加拉语的例子：
- en: '![](img/eb0bdcce-a7ea-47a3-bd8f-4f49cb6251a6.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb0bdcce-a7ea-47a3-bd8f-4f49cb6251a6.png)'
- en: You can always try this on [https://cloud.google.com/translate/](https://cloud.google.com/translate/).
    But sometimes, the language of a given text might be unknown itself. The Cloud
    Translation API provides a service called **label detection** to handle situations
    like this.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时在 [https://cloud.google.com/translate/](https://cloud.google.com/translate/)
    上尝试这个功能。但是有时，给定文本的语言本身可能是未知的。Cloud Translation API 提供了一项叫做 **标签检测** 的服务来处理这种情况。
- en: The AutoML variant of the Cloud Translation API lets us build custom models
    with respect to language pairs (the source language and target language) according
    to our needs.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Translation API 的 AutoML 变体允许我们根据需要构建针对语言对（源语言和目标语言）的自定义模型。
- en: Setting up the Cloud Translate API for Python
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Cloud Translate API 以供 Python 使用
- en: To use the Cloud Translation API with Python, we must first install the Google
    Cloud Translate Python library.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Python 中使用 Cloud Translation API，首先我们需要安装 Google Cloud Translate Python 库。
- en: 'To do so, use the following `pip` command in the terminal:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，请在终端中使用以下 `pip` 命令：
- en: '[PRE19]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, as done previously, create a service account and download the credentials
    file. Export this file to the path for the `GOOGLE_APPLICATION_CREDENTIALS` environment
    variable.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，像之前一样，创建一个服务账户并下载凭证文件。将此文件导出到 `GOOGLE_APPLICATION_CREDENTIALS` 环境变量的路径中。
- en: Next, find `Cloud Translate API` in the list of APIs to enable. Once done, we're
    ready to make translations directly from Python using GCP.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在启用的 API 列表中找到 `Cloud Translate API`。完成后，我们就可以直接通过 Python 使用 GCP 进行翻译。
- en: Using the Google Cloud Translation Python library
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google Cloud Translation Python 库
- en: Create a new Jupyter notebook or a new Python script. We will now import the
    Google Cloud Translate API to our project.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 Jupyter 笔记本或 Python 脚本。接下来，我们将把 Google Cloud Translate API 导入到我们的项目中。
- en: 'To do so, use the following code:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，请使用以下代码：
- en: '[PRE20]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We would need to create a Cloud Translate API object to make the service calls.
    We can do so as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个 Cloud Translate API 对象来进行服务调用。我们可以按如下方式操作：
- en: '[PRE21]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s now begin with the translation process. First, we need a message to
    translate:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始翻译过程。首先，我们需要一条要翻译的消息：
- en: '[PRE22]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This creates a Unicode string containing the word *Namaste* in Hindi. Let's
    see what it converts to in English!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含单词 *Namaste*（印度语问候语）的 Unicode 字符串。让我们看看它转换成英语是什么！
- en: 'We call the API to translate the text into English using the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下代码调用 API 将文本翻译成英语：
- en: '[PRE23]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you observe the `translation` variable, you will find that it contains the
    following details:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察 `translation` 变量，你会发现它包含了以下详细信息：
- en: '[PRE24]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: It is simple to infer from this dictionary that the detected language was Hindi
    (represented by `hi`). The input is shown in the format the input was fed in.
    `translatedText` holds `Hello`, which is the exact translation of *Namaste*.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个字典中可以简单地推断出检测到的语言是印地语（用 `hi` 表示）。输入以其输入格式显示。`translatedText` 存储了 `Hello`，这是
    *Namaste* 的准确翻译。
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored some of the famous and groundbreaking deep learning-based
    services provided by GCP. We learned how to use Dialogflow using Python to build
    conversational chatbots that can learn over time. We used the Cloud Vision API
    to predict the objects recognized in any image. We could easily extrapolate this
    to a video and achieve similar results. We finally covered the Cloud Translate
    API for performing deep NLP-based translation using the service. All the major
    services provided by GCP are accessible over APIs, which makes them easily replaceable
    in any project. The accuracy of models created by highly trained professionals
    is commendable and makes the life of a web developer easier when trying to build
    AI-powered web solutions.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 GCP 提供的一些著名且具有突破性的基于深度学习的服务。我们学习了如何使用 Python 的 Dialogflow 构建能够随着时间学习的对话型聊天机器人。我们使用
    Cloud Vision API 来预测任何图像中识别到的物体。我们可以轻松地将此方法扩展到视频中，并获得类似的结果。最后，我们介绍了 Cloud Translate
    API，通过该服务进行深度基于 NLP 的翻译。GCP 提供的所有主要服务都可以通过 API 访问，这使得它们在任何项目中都易于替换。由高素质专业人员创建的模型的准确性值得称赞，这使得在构建
    AI 驱动的 Web 解决方案时，Web 开发者的工作变得更加轻松。
- en: In the next chapter, we will introduce the features offered by **Amazon Web
    Services** (**AWS**) to integrate AI with web applications using Python.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍**亚马逊网络服务**（**AWS**）提供的功能，使用 Python 将 AI 集成到 Web 应用程序中。
