- en: Introduction and Installation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍与安装
- en: Welcome to the Caffe2 Quick Start Guide. This book aims to provide you with
    a quick introduction to the Caffe2 deep learning framework and how to use it for
    training and deployment of deep learning models. This book uses code samples to
    create, train, and run inference on actual deep learning models that solve real
    problems. In this way, its code can be applied quickly by readers to their own
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读 Caffe2 快速入门指南。本书旨在为您提供 Caffe2 深度学习框架的快速入门，并指导您如何使用它来训练和部署深度学习模型。本书通过代码示例创建、训练并运行推理，解决实际问题。通过这种方式，读者可以快速将本书中的代码应用到自己的应用程序中。
- en: 'This chapter provides a brief introduction to Caffe2 and shows you how to build
    and install it on your computer. In this chapter, we will cover the following
    topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍 Caffe2，并展示如何在您的计算机上构建和安装它。本章将涵盖以下内容：
- en: Introduction to deep learning and Caffe2
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习和 Caffe2 介绍
- en: Building and installing Caffe2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和安装 Caffe2
- en: Testing Caffe2 Python API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 Caffe2 Python API
- en: Testing Caffe2 C++ API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 Caffe2 C++ API
- en: Introduction to deep learning
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习简介
- en: 'Terms such as **artificial intelligence** (**AI**), **machine learning** (**ML**),
    and **deep learning (DL)** are popular right now. This popularity can be attributed
    to significant improvements that deep learning techniques have brought about in
    the last few years in enabling computers to see, hear, read, and create. First
    and foremost, we''ll introduce these three fields and how they intersect:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如 **人工智能** (**AI**)、**机器学习** (**ML**) 和 **深度学习 (DL)** 等术语目前非常流行。这种流行可以归因于深度学习技术在过去几年中带来了显著的进展，使计算机能够“看”、“听”、“读”并“创造”。首先，我们将介绍这三个领域及其交集：
- en: '![](img/16a849e6-1ea0-4cb9-bfbd-46f406cb0f91.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16a849e6-1ea0-4cb9-bfbd-46f406cb0f91.png)'
- en: 'Figure 1.1: Relationship between deep learning, ML, and AI'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：深度学习、机器学习和人工智能之间的关系
- en: AI
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工智能
- en: '**Artificial intelligence** (**AI**) is a general term used to refer to the
    intelligence of computers, specifically their ability to reason, sense, perceive,
    and respond. It is used to refer to any non-biological system that has intelligence,
    and this intelligence is a consequence of a set of rules. It does not matter in
    AI if those sets of rules were created manually by a human, or if those rules
    were automatically learned by a computer by analyzing data. Research into AI started
    in 1956, and it has been through many ups and a couple of downs, called **AI winters**,
    since then.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**人工智能** (**AI**) 是一个通用术语，用来指代计算机的智能，特别是它们推理、感知、认知和响应的能力。它用来指代任何具备智能的非生物系统，而这种智能是由一套规则的结果。无论这些规则是由人类手动创建，还是计算机通过分析数据自动学习得到，都不影响
    AI 的定义。AI 的研究始于 1956 年，此后经历了许多起伏和几次低谷，称为 **AI 冬天**。'
- en: ML
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ML
- en: '**Machine learning** (**ML**) is a subset of AI that uses statistics, data,
    and learning algorithms to teach computers to learn from given data. This data,
    called **training data**, is specific to the problem being solved, and contains
    examples of input and the expected output for each input. ML algorithms learn
    models or representations automatically from training data, and these models can
    be used to obtain predictions for new input data.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器学习** (**ML**) 是 AI 的一个子集，利用统计学、数据和学习算法教计算机从给定的数据中学习。这些数据被称为 **训练数据**，它是针对特定问题而收集的，包含每个输入及其预期输出的示例。ML
    算法通过训练数据自动学习模型或表示，这些模型可用于对新的输入数据进行预测。'
- en: There are many popular types of models in ML, including **artificial neural
    networks** (**ANNs**), Bayesian networks, **support vector machines** (**SVM**),
    and random forests. The ML model that is of interest to us in this book is ANN.
    The structure of ANNs are inspired by the connections in the brain. These neural
    network models were initially popular in ML, but later fell out of favor since
    they required enormous computing power that was not available at that time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习中有许多流行的模型类型，包括 **人工神经网络** (**ANNs**)、贝叶斯网络、**支持向量机** (**SVM**) 和随机森林。本书中我们关注的
    ML 模型是人工神经网络（ANN）。ANN 的结构灵感来自大脑中的连接。这些神经网络模型最初在机器学习中非常流行，但后来由于当时计算能力的不足，它们逐渐被冷落。
- en: Deep learning
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习
- en: Over the last decade, utilization of the parallel processing capability of **graphics
    processing units** (**GPUs**) to solve general computation problems became popular.
    This type of computation came to be known as **general-purpose computing on GPU
    (GPGPU)**. GPUs were quite affordable and were easy to use as accelerators by
    using GPGPU programming models and APIs such as **Compute Unified Device Architecture**
    (**CUDA**) and **Open Computing Language** (**OpenCL**). Starting in 2012, neural
    network researchers harnessed GPUs to train neural networks with a large number
    of layers and started to generate breakthroughs in solving computer vision, speech
    recognition, and other problems. The use of such deep neural networks with a large
    number of layers of neurons gave rise to the term **deep learning**. Deep learning
    algorithms form a subset of ML and use multiple layers of abstraction to learn
    and parameterize multi-layer neural network models of data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年中，利用**图形处理单元**（**GPU**）的并行处理能力来解决一般计算问题变得流行。这种类型的计算被称为**通用GPU计算（GPGPU）**。GPU价格相对较低，并且通过使用如**CUDA**和**OpenCL**等GPGPU编程模型和API作为加速器使用非常方便。从2012年开始，神经网络研究人员利用GPU训练具有大量层次的神经网络，并开始在计算机视觉、语音识别和其他问题的解决方面取得突破。具有多层神经元的深度神经网络的使用，产生了**深度学习**这一术语。深度学习算法是机器学习的一个子集，利用多层抽象来学习和参数化数据的多层神经网络模型。
- en: Introduction to Caffe2
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffe2介绍
- en: The popularity and success of deep learning has been motivated by the creation
    of many popular and open source deep learning frameworks that can be used for
    training and inference of neural networks. **Caffe** was one of the first popular
    deep learning frameworks. It was created by *Yangqing Jia* at UC Berkeley for
    his PhD thesis and released to the public at the end of 2013\. It was primarily
    written in C++ and provided a C++ API. Caffe also provided a rudimentary Python
    API wrapped around the C++ API. The Caffe framework created networks using layers.
    Users created networks by listing down and describing its layers in a text file
    commonly referred to as a **prototxt**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习的普及和成功受到许多流行和开源深度学习框架的推动，这些框架可用于神经网络的训练和推断。**Caffe**是最早流行的深度学习框架之一。它由*贾扬清*在加州大学伯克利分校为其博士论文创建，并于2013年底向公众发布。主要用C++编写，并提供了C++
    API。Caffe还提供了一个基本的Python API，封装了C++ API。Caffe框架通过层来创建网络。用户通过在文本文件（通常称为**prototxt**）中列出和描述其层来创建网络。
- en: Following the popularity of Caffe, universities, corporations, and individuals
    created and launched many deep learning frameworks. Some of the popular ones today
    are Caffe2, TensorFlow, MXNet, and PyTorch. TensorFlow is driven by Google, MXNet
    has the support of Amazon, and PyTorch was primarily developed by Facebook.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Caffe的流行，许多大学、公司和个人创建并推出了许多深度学习框架。如今一些流行的框架包括Caffe2、TensorFlow、MXNet和PyTorch。TensorFlow由Google推动，MXNet得到了亚马逊的支持，而PyTorch主要由Facebook开发。
- en: Caffe's creator, Yangqing Jia, moved to Facebook, where he created a follow-up
    to Caffe called Caffe2\. Compared to the other deep learning frameworks, Caffe2
    was designed to focus on scalability, high performance, and portability. Written
    in C++, it has both a C++ API and a Python API.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe的创始人贾扬清后来加入了Facebook，在那里创建了Caffe的后续版本——Caffe2。与其他深度学习框架相比，Caffe2专注于可伸缩性、高性能和可移植性。它用C++编写，同时具有C++
    API和Python API。
- en: Caffe2 and PyTorch
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffe2和PyTorch
- en: Caffe2 and PyTorch are both popular DL frameworks, maintained and driven by
    Facebook. PyTorch originates from the **Torch** DL framework. It is characterized
    by a Python API that is easy for designing different network structures and experimenting
    with training parameters and regimens on them. While PyTorch could be used for
    inference in production applications on the cloud and in the edge, it is not as
    efficient when it comes to this.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2和PyTorch都是流行的深度学习框架，由Facebook维护和推动。PyTorch源自**Torch**深度学习框架。它以Python API为特点，易于设计不同的网络结构，并在其上进行训练参数和方案的实验。虽然PyTorch可以用于云端和边缘上的生产应用的推断，但在这方面效率不及。
- en: Caffe2 has a Python API and a C++ API. It is designed for practitioners who
    tinker with existing network structures and use pre-trained models from PyTorch,
    Caffe, and other DL frameworks, and ready them for deployment inside applications,
    local workstations, low-power devices at the edge, mobile devices, and in the
    cloud.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2具有Python API和C++ API。它设计供那些对现有网络结构进行调试，并使用来自PyTorch、Caffe和其他DL框架的预训练模型，并准备将其部署到应用程序、本地工作站、边缘低功耗设备、移动设备和云中的从业者使用。
- en: Having observed the complementary features of PyTorch and Caffe2, Facebook has
    a plan to merge the two projects. As we will see later, Caffe2 source code is
    already organized as a subdirectory under the PyTorch Git repository. In the future,
    expect more intermingling of these two projects, with a final goal of fusing the
    two together to create a single DL framework that is easy to experiment with and
    tinker, efficient to train and deploy, and that can scale from the cloud to the
    edge, from general-purpose processors to special-purpose accelerators.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到PyTorch和Caffe2的互补特性后，Facebook计划合并这两个项目。正如我们稍后将看到的那样，Caffe2的源代码已经组织在PyTorch的Git存储库的一个子目录下。未来，预计这两个项目将更加融合，最终目标是将它们融合成一个单一的深度学习框架，易于实验和调试，高效训练和部署，并能够从云端到边缘，从通用处理器到特定加速器进行扩展。
- en: Hardware requirements
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件要求
- en: Working with deep learning models, especially the training process, requires
    a lot of computing power. While you could train a popular neural network on the
    CPU, it could typically take many hours or days, depending on the complexity of
    the network. Using GPUs for training is highly recommended since they typically
    reduce the training time by an order of magnitude or more compared to CPUs. Caffe2
    uses CUDA to access the parallel processing capabilities of NVIDIA GPUs. CUDA
    is an API that enables developers to use the parallel computation capabilities
    of an NVIDIA GPU, so you will need to use an NVIDIA GPU. You can either install
    an NVIDIA GPU on your local computer, or use a cloud service provider such as
    Amazon AWS that provides instances with NVIDIA GPUs. Please take note of the running
    costs of such cloud instances before you use them for extended periods of training.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用深度学习模型，特别是训练过程，需要大量的计算能力。尽管您可以在CPU上训练流行的神经网络，但这通常需要数小时甚至数天，具体取决于网络的复杂性。强烈建议使用GPU进行训练，因为与CPU相比，GPU通常能将训练时间缩短一个数量级或更多。Caffe2使用CUDA来访问NVIDIA
    GPU的并行处理能力。CUDA是一个API，使开发者能够利用NVIDIA GPU的并行计算能力，因此您需要使用NVIDIA GPU。您可以在本地计算机上安装NVIDIA
    GPU，也可以使用像Amazon AWS这样的云服务提供商，提供带有NVIDIA GPU的实例。在长时间训练之前，请注意这些云实例的运行成本。
- en: Once you have trained a model using Caffe2, you can use CPUs, GPUs, or many
    other processors for inference. We will explore a few such options in [Chapter
    6](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml), *Deploying Models to Accelerators
    for Inference*, and [Chapter 7](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml), *Caffe2
    at the Edge and in the cloud*, later in the book.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您使用Caffe2训练了一个模型，您可以使用CPU、GPU或许多其他处理器进行推断。我们将在本书的[第6章](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml)，*将模型部署到加速器进行推断*，和[第7章](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml)，*Caffe2在边缘和云端的应用*中探讨几种这样的选项。
- en: Software requirements
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件要求
- en: A major portion of deep learning research and development is currently taking
    place on Linux computers. **Ubuntu** is a distribution of Linux that happens to
    be very popular for deep learning research and development. We will be using Ubuntu
    as the operating system of choice in this book. If you are using a different flavor
    of Linux, you should be able to search online for commands similar to Ubuntu commands
    for most of the operations described here. If you use Windows or macOS, you will
    need to replace the Linux commands in this book with equivalent commands. All
    the code samples should work on Linux, Windows, and macOS with zero or minimal
    changes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习研究和开发的主要部分目前在Linux计算机上进行。**Ubuntu**是一种Linux发行版，非常受深度学习研究和开发者欢迎。在本书中，我们将选择Ubuntu作为操作系统。如果您使用不同版本的Linux，您应该能够在线搜索到类似于Ubuntu命令的命令，用于执行描述的大多数操作。如果您使用Windows或macOS，您需要用相应的命令替换本书中的Linux命令。所有的代码示例都应该在Linux、Windows和macOS上无需或只需做很小的修改就能运行。
- en: Building and installing Caffe2
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和安装Caffe2
- en: 'Caffe2 can be built and installed from source code quite easily. Installing
    Caffe2 from source gives us more flexibility and control over our application
    setup. The build and install process has four stages:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2可以很容易地从源代码构建和安装。从源代码安装Caffe2可以为我们提供更多的灵活性和对应用程序设置的控制。构建和安装过程分为四个阶段：
- en: Installing dependencies
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: Installing acceleration libraries
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装加速库
- en: Building Caffe2
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Caffe2
- en: Installing Caffe2
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Caffe2
- en: Installing dependencies
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: We first need to install packages that Caffe2 is dependent on, as well as the
    tools and libraries required to build it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要安装Caffe2所依赖的包，以及构建它所需的工具和库。
- en: 'First, obtain information about the newest versions of Ubuntu packages by querying
    their online repositories using the `apt-get` tool:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过使用`apt-get`工具查询Ubuntu在线仓库，获取关于最新版本的Ubuntu软件包的信息：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, using the `apt-get` tool, install the libraries that are required to
    build Caffe2, and that Caffe2 requires for its operation:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`apt-get`工具，安装构建Caffe2所需的库，以及Caffe2运行时所需的库：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These packages include tools required to download Caffe2 source code (Git) and
    to build Caffe2 (`build-essential`, `cmake`, and `python-dev`). The rest are libraries
    that Caffe2 is dependent on, including Google Flags (`libgflags2`), Google Log
    (`libgoogle-glog-dev`), Google Test (`libgtest-dev`), LevelDB (`libleveldb-dev`),
    LMDB (`liblmdb-dev`), OpenCV (`libopencv-dev`), OpenMP (`libiomp-dev`), OpenMPI
    (`openmpi-bin and openmpi-doc`), Protobuf (`libprotobuf-dev and protobuf-compiler`),
    and Snappy (`libsnappy-dev`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包包括下载Caffe2源代码所需的工具（Git）以及构建Caffe2所需的工具（`build-essential`、`cmake`和`python-dev`）。其余的包是Caffe2所依赖的库，包括Google
    Flags（`libgflags2`）、Google Log（`libgoogle-glog-dev`）、Google Test（`libgtest-dev`）、LevelDB（`libleveldb-dev`）、LMDB（`liblmdb-dev`）、OpenCV（`libopencv-dev`）、OpenMP（`libiomp-dev`）、OpenMPI（`openmpi-bin`和`openmpi-doc`）、Protobuf（`libprotobuf-dev`和`protobuf-compiler`）以及Snappy（`libsnappy-dev`）。
- en: 'Finally, install the Python Pip tool and use it to install other Python libraries
    such as `NumPy` and `Protobuf` Python APIs that are useful when working with Python:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，安装Python Pip工具，并使用它安装其他Python库，如`NumPy`和`Protobuf` Python API，这些在使用Python时非常有用：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing acceleration libraries
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装加速库
- en: Using Caffe2 to train DL networks and using them for inference involves a lot
    of math computation. Using acceleration libraries of math routines and deep learning
    primitives helps Caffe2 users by speeding up training and inference tasks. Vendors
    of CPUs and GPUs typically offer such libraries, and Caffe2 has support to use
    such libraries if they are available on your system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Caffe2训练深度学习网络并用于推理涉及大量数学计算。使用数学运算和深度学习基本操作的加速库，可以通过加速训练和推理任务帮助Caffe2用户。CPU和GPU的供应商通常提供这样的库，如果系统中可用，Caffe2也支持使用这些库。
- en: '**Intel Math Kernel Library** (**MKL**) is key to faster training and inference
    on Intel CPUs. This library is free for personal and community use. It can be
    downloaded by registering here: [https://software.seek.intel.com/performance-libraries](https://software.seek.intel.com/performance-libraries).
    Installation involves uncompressing the downloaded package and running the `install.sh`
    installer script as a superuser. The library files are installed by default to
    the `/opt/intel` directory. The Caffe2 build step, described in the next section,
    finds and uses the BLAS and LAPACK routines of MKL automatically, if MKL was installed
    at the default directory.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**英特尔数学核心库**（**MKL**）是加速在英特尔CPU上训练和推理的关键。此库对个人和社区使用是免费的。可以通过在此注册进行下载：[https://software.seek.intel.com/performance-libraries](https://software.seek.intel.com/performance-libraries)。安装过程包括解压下载的包，并以超级用户身份运行`install.sh`安装脚本。默认情况下，库文件会安装到`/opt/intel`目录中。如果MKL被安装到默认目录，接下来的Caffe2构建步骤会自动找到并使用MKL的BLAS和LAPACK例程。'
- en: '**CUDA** and **CUDA Deep Neural Network** (**cuDNN**) libraries are essential
    for faster training and inference on NVIDIA GPUs. CUDA is free to download after
    registering here: [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    cuDNN can be downloaded from here: [https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn).
    Note that you need to have a modern NVIDIA GPU and an NVIDIA GPU driver already
    installed. As an alternative to the GPU driver, you could use the driver that
    is installed along with CUDA. Files of the CUDA and cuDNN libraries are typically
    installed in the `/usr/local/cuda` directory on Linux. The Caffe2 build step,
    described in the next section, finds and uses CUDA and cuDNN automatically if
    installed in the default directory.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**CUDA** 和 **CUDA 深度神经网络** (**cuDNN**) 库对于在 NVIDIA GPU 上进行更快的训练和推理是必不可少的。CUDA
    在此注册后可免费下载：[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)。cuDNN
    可以从这里下载：[https://developer.nvidia.com/cudnn](https://developer.nvidia.com/cudnn)。注意，你需要有一块现代的
    NVIDIA GPU，并且已经安装了 NVIDIA GPU 驱动程序。作为 GPU 驱动程序的替代方案，你可以使用随 CUDA 一起安装的驱动程序。CUDA
    和 cuDNN 库的文件通常会安装在 Linux 系统的 `/usr/local/cuda` 目录下。如果安装在默认目录，Caffe2 的构建步骤会自动找到并使用
    CUDA 和 cuDNN。'
- en: Building Caffe2
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Caffe2
- en: 'Using Git, we can clone the Git repository containing Caffe2 source code and
    all the submodules it requires:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git，我们可以克隆包含 Caffe2 源代码及其所需所有子模块的 Git 仓库：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice how the Caffe2 source code now exists in a subdirectory inside the PyTorch
    source repository. This is because of Facebook's cohabitation plan for these two
    popular DL frameworks as it endeavors to merge the best features of both frameworks
    over a period of time.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Caffe2 的源代码现在位于 PyTorch 源代码库的一个子目录中。这是因为 Facebook 为这两个流行的深度学习框架制定了共同发展计划，旨在在一段时间内合并两个框架的最佳特性。
- en: Caffe2 uses CMake as its build system. CMake enables Caffe2 to be easily built
    for a wide variety of compilers and operating systems.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2 使用 CMake 作为其构建系统。CMake 使得 Caffe2 能够轻松地为多种编译器和操作系统进行构建。
- en: 'To build Caffe2 source code using CMake, we first create a build directory
    and invoke CMake from within it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CMake 构建 Caffe2 源代码，我们首先创建一个构建目录，并从其中调用 CMake：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: CMake checks available compilers, operating systems, libraries, and packages,
    and figures out which Caffe2 features to enable and compilation options to use.
    These options can be seen listed in the `CMakeLists.txt` file present at the root
    directory. Options are listed in the form of `option(USE_FOOBAR "Use Foobar library"
    OFF)`. You can enable or disable those options by setting them to `ON` or `OFF`
    in `CMakeLists.txt`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 会检查可用的编译器、操作系统、库和软件包，并决定启用哪些 Caffe2 特性以及使用哪些编译选项。这些选项可以在根目录下的 `CMakeLists.txt`
    文件中查看。选项以 `option(USE_FOOBAR "使用 Foobar 库" OFF)` 的形式列出。你可以通过在 `CMakeLists.txt`
    文件中将这些选项设置为 `ON` 或 `OFF` 来启用或禁用它们。
- en: 'These options can also be configured when invoking CMake. For example, if your
    Intel CPU has support for AVX/AVX2/FMA, and you would wish to use those features
    to speed up Caffe2 operations, then enable the `USE_NATIVE_ARCH` option as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项也可以在调用 CMake 时进行配置。例如，如果你的 Intel CPU 支持 AVX/AVX2/FMA，并且你希望使用这些特性来加速 Caffe2
    操作，那么可以通过以下方式启用 `USE_NATIVE_ARCH` 选项：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing Caffe2
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Caffe2
- en: 'CMake produces a `Makefile` file at the end. We can build Caffe2 and install
    it on our system using the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 最终会生成一个 `Makefile` 文件。我们可以使用以下命令来构建 Caffe2 并将其安装到系统中：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This step involves building a large number of CUDA files, which can be very
    slow. It is recommended to use the parallel execution feature of `make` to use
    all the cores of your CPU for a faster build. We can do this by using the following
    command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步涉及构建大量的 CUDA 文件，可能会非常慢。建议使用 `make` 的并行执行功能，利用 CPU 的所有核心来加快构建速度。我们可以通过以下命令来实现：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using the `make` install method to build and install makes it difficult to update
    or uninstall Caffe2 later.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `make` 安装方法来构建和安装，会使后续更新或卸载 Caffe2 变得困难。
- en: Instead, I prefer to create a Debian package of Caffe2 and install it. That
    way, I can uninstall or update it conveniently. We can do this using the `checkinstall`
    tool.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我更倾向于创建 Caffe2 的 Debian 软件包并进行安装。这样，我可以方便地卸载或更新它。我们可以使用 `checkinstall` 工具来实现这一点。
- en: 'To install `checkinstall`, and to use it to build and install Caffe2, use the
    following commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `checkinstall` 并使用它来构建和安装 Caffe2，请使用以下命令：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command also produces a Debian `.deb` package file that you can use to
    install on other computers or share with others. For example, on my computer,
    this command produced a file named `caffe2_20181207-1_amd64.deb`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令还会生成一个 Debian `.deb` 包文件，你可以用它在其他计算机上安装或与他人共享。例如，在我的计算机上，这个命令生成了一个名为 `caffe2_20181207-1_amd64.deb`
    的文件。
- en: 'If you need a faster build, use the parallel execution feature of `make` along
    with `checkinstall`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更快速的构建，可以使用 `make` 的并行执行功能以及 `checkinstall`：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you need to uninstall Caffe2 in the future, you can now do that easily using
    the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以后需要卸载 Caffe2，现在可以使用以下命令轻松卸载：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Testing the Caffe2 Python API
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Caffe2 Python API
- en: 'We have now installed Caffe2, but we need to make sure it is correctly installed
    and that its Python API is working. An easy way to do that is to return to your
    home directory and check whether the Python API of Caffe2 is imported and can
    execute correctly. This can be done using the following commands:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经安装了 Caffe2，但需要确保它已正确安装，并且 Python API 能正常工作。一种简单的方法是返回到你的主目录，并检查 Caffe2
    的 Python API 是否能被导入并正常执行。可以使用以下命令进行检查：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Do not run the preceding command from within the Caffe2 directories. This is
    to avoid the ambiguity of Python having to pick between your installed Caffe2
    files and those in the source or build directories.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在 Caffe2 目录内运行前面的命令。这样做是为了避免 Python 在选择使用你已安装的 Caffe2 文件和源代码或构建目录中的文件时产生歧义。
- en: 'If your Caffe2 is *not* installed correctly, you may see an error of some kind,
    such as the one shown in the following code block, for example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Caffe2 *没有*正确安装，你可能会看到某种错误，例如以下代码块中显示的错误：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If your Caffe2 has been installed correctly, then you may not see an error.
    However, you may still get a warning if you don''t have a GPU:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Caffe2 已经正确安装，那么你可能不会看到错误。然而，如果没有 GPU，可能仍然会看到警告：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Testing the Caffe2 C++ API
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Caffe2 C++ API
- en: We have now installed Caffe2, but we need to make sure it is correctly installed
    and that its C++ API is working. An easy way to do that is to create a small C++
    program that initializes the global environment of Caffe2\. This is done by calling
    a method named `GlobalInit` and passing it the program's arguments. This is typically
    the first call in a Caffe2 C++ application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经安装了 Caffe2，但需要确保它已正确安装，并且 C++ API 能正常工作。一种简单的方法是创建一个小的 C++ 程序，初始化 Caffe2
    的全局环境。这是通过调用一个名为 `GlobalInit` 的方法并传入程序的参数来完成的。这通常是 Caffe2 C++ 应用程序中的第一个调用。
- en: 'Create a C++ source file named `ch1.cpp` with this code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `ch1.cpp` 的 C++ 源文件，代码如下：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can compile this C++ source file using the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令编译这个 C++ 源文件：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We ask the linker to link with the `libcaffe2.so` shared library file by using
    the `-lcaffe2` option. The compiler uses the default include file locations, and
    the linker uses the default shared library file locations, so we do not need to
    specify those.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要求链接器通过使用 `-lcaffe2` 选项来链接 `libcaffe2.so` 共享库文件。编译器使用默认的头文件位置，链接器使用默认的共享库文件位置，所以我们不需要指定这些路径。
- en: By default, Caffe2 header files are installed to a `caffe2` subdirectory in
    `/usr/local/include`. This location is usually automatically included in a C++
    compilation. Similarly, the Caffe2 shared library files are installed to `/usr/local/lib`
    by default. If you installed Caffe2 to a different location, you would need to
    specify the include directory location using the `-I` option and the shared library
    file location using the `-L` option.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Caffe2 的头文件安装在 `/usr/local/include` 下的 `caffe2` 子目录中。这个路径通常会自动包含在 C++
    编译中。同样，Caffe2 的共享库文件默认安装在 `/usr/local/lib` 中。如果你将 Caffe2 安装到其他位置，需要使用 `-I` 选项指定包含目录的位置，并使用
    `-L` 选项指定共享库文件的位置。
- en: 'We can now execute the compiled binary:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以执行编译后的二进制文件：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If it executes successfully, then your Caffe2 installation is fine. You are
    now ready to write Caffe2 C++ applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行成功，那么你的 Caffe2 安装是正确的。你现在可以开始编写 Caffe2 C++ 应用程序。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! This chapter provided a brief introduction to deep learning
    and Caffe2\. We examined the process of building and installing Caffe2 on our
    system. We are now ready to explore the world of deep learning by building our
    own networks, training our own models, and using them for inference on real-world
    problems.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！本章简要介绍了深度学习和 Caffe2。我们研究了在系统中构建和安装 Caffe2 的过程。现在我们准备好通过构建自己的网络、训练自己的模型并将其用于解决实际问题，来探索深度学习的世界。
- en: In the next chapter, we will learn about Caffe2 operators and learn how to compose
    them to build simple computation graphs. We will then proceed to build a neural
    network that can recognize handwritten digits.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 Caffe2 操作符，并了解如何将它们组合以构建简单的计算图。然后，我们将继续构建一个能够识别手写数字的神经网络。
