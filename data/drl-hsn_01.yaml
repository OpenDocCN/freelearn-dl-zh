- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: What Is Reinforcement Learning?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是强化学习？
- en: The automatic learning of optimal decisions over time is a general and common
    problem that has been studied in many scientific and engineering fields. In our
    changing world, even problems that look like static input-output problems can
    become dynamic if time is taken into account. For example, imagine that you want
    to solve the simple supervised learning problem of pet image classification with
    two target classes—dog and cat. You gather the training dataset and implement
    the classifier using your favorite deep learning toolkit. After the training and
    validation, the model demonstrates excellent performance. Great! You deploy it
    and leave it running for a while. However, after a vacation at some seaside resort,
    you return to discover that dog grooming fashions have changed and a significant
    portion of your queries are now misclassified, so you need to update your training
    images and repeat the process again. Not so great!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自动学习最优决策的问题是一个普遍且常见的问题，已经在许多科学和工程领域中得到了研究。在我们不断变化的世界中，即使是看似静态的输入输出问题，如果考虑时间因素，也可能变得动态。例如，假设你想解决一个简单的监督学习问题——宠物图片分类，目标类别为狗和猫。你收集训练数据集，并使用你最喜欢的深度学习工具包实现分类器。在训练和验证之后，模型表现非常好。太棒了！你将其部署并让它运行一段时间。然而，经过一段海边度假的时间后，你回到工作中，发现狗狗美容风格发生了变化，导致你的一部分查询被错误分类，因此你需要更新训练图像并重新进行训练。并不是那么棒！
- en: 'This example is intended to show that even simple machine learning (ML) problems
    often have a hidden time dimension. This is frequently overlooked and might become
    an issue in a production system. This can be addressed by reinforcement learning
    (RL), a subfield of ML, which is an approach that natively incorporates an extra
    dimension (which is usually time, but not necessarily) into learning equations.
    This places RL much closer to how people understand artificial intelligence (AI).
    In this chapter, we will discuss RL in more detail and you will become familiar
    with the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子旨在展示即使是简单的机器学习（ML）问题，往往也有一个隐藏的时间维度。这通常被忽视，且可能在生产系统中成为一个问题。这可以通过强化学习（RL）来解决，强化学习是机器学习的一个子领域，是一种将额外维度（通常是时间，但不一定是）自然融入学习方程的方法。这使得强化学习更接近人类理解人工智能（AI）的方式。在本章中，我们将详细讨论强化学习，并让你熟悉以下内容：
- en: 'How RL is related to and differs from other ML disciplines: supervised and
    unsupervised learning'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强化学习（RL）与其他机器学习（ML）学科的关系与区别：监督学习与无监督学习
- en: What the main RL formalisms are and how they are related to each other
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强化学习的主要形式及其相互关系
- en: 'Theoretical foundations of RL: Markov processes (MPs), Markov reward processes
    (MRPs), and Markov decision processes (MDPs)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强化学习的理论基础：马尔科夫过程（MPs）、马尔科夫奖励过程（MRPs）和马尔科夫决策过程（MDPs）
- en: Supervised learning
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监督学习
- en: 'You may be familiar with the notion of supervised learning, which is the most
    studied and well-known ML problem. Its basic question is, how do you automatically
    build a function that maps some input into some output when given a set of example
    pairs? It sounds simple in those terms, but the problem includes many tricky questions
    that computers have only recently started to address with some success. There
    are lots of examples of supervised learning problems, including the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能熟悉监督学习的概念，这是最常见且研究最深入的机器学习问题。它的基本问题是，当给定一组示例对时，如何自动构建一个函数，将输入映射到输出？听起来很简单，但这个问题包含了许多计算机最近才开始成功解决的棘手问题。监督学习问题有很多例子，包括以下几种：
- en: 'Text classification: Is this email message spam or not?'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本分类：这封电子邮件是垃圾邮件吗？
- en: 'Image classification and object location: Does this image contain a picture
    of a cat, dog, or something else?'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像分类与物体定位：这张图片是猫、狗，还是其他东西？
- en: 'Regression problems: Given the information from weather sensors, what will
    be the weather tomorrow?'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归问题：根据天气传感器提供的信息，明天的天气如何？
- en: 'Sentiment analysis: What is the customer satisfaction level of this review?'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情感分析：这条评论的客户满意度如何？
- en: These questions may look different, but they share the same idea — we have many
    examples of input and desired output, and we want to learn how to generate the
    output for some future, currently unseen input. The name supervised comes from
    the fact that we learn from known answers provided by a “ground truth” data source.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题看起来可能不同，但它们共享相同的思想——我们有许多输入和期望的输出示例，我们想要学习如何为一些未来的、当前看不见的输入生成输出。监督学习这一名称来源于我们从“真实数据”源提供的已知答案中学习。
- en: Unsupervised learning
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无监督学习
- en: At the other extreme, we have the so-called unsupervised learning, which assumes
    no supervision and has no known labels assigned to our data. The main objective
    is to learn some hidden structure of the dataset at hand. One common example of
    such an approach to learning is the clustering of data. This happens when our
    algorithm tries to combine data items into a set of clusters, which can reveal
    relationships in data. For instance, you might want to find similar images or
    clients with common behavior patterns.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个极端，我们有所谓的无监督学习，它假设没有监督，也没有已知的标签分配给我们的数据。其主要目标是学习手头数据集的一些隐藏结构。一个常见的无监督学习方法是数据聚类。当我们的算法尝试将数据项合并成一组簇时，就会揭示数据中的关系。例如，你可能想要找到相似的图像或具有共同行为模式的客户。
- en: Another unsupervised learning method that is becoming more and more popular
    is generative adversarial networks (GANs). When we have two competing neural networks
    (NNs), the first network tries to generate fake data to fool the second network,
    while the second network tries to discriminate artificially generated data from
    data sampled from our dataset. Over time, both networks become more and more skillful
    in their tasks by capturing subtle specific patterns in the dataset.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种越来越流行的无监督学习方法是生成对抗网络（GANs）。当我们有两个相互竞争的神经网络（NNs）时，第一个网络试图生成假数据来欺骗第二个网络，而第二个网络试图区分人工生成的数据和从我们数据集中采样的数据。随着时间的推移，两个网络通过捕捉数据集中的微妙特定模式，变得越来越擅长其任务。
- en: Reinforcement learning
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强化学习
- en: RL is the third camp and lies somewhere in between full supervision and a complete
    lack of predefined labels. On the one hand, it uses many well-established methods
    of supervised learning, such as deep neural networks for function approximation,
    stochastic gradient descent, and backpropagation, to learn data representation.
    On the other hand, it usually applies them in a different way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 强化学习（RL）是第三种方法，位于完全监督和完全没有预定义标签之间。一方面，它使用许多已建立的监督学习方法，如深度神经网络用于函数逼近、随机梯度下降和反向传播，来学习数据表示。另一方面，它通常以不同的方式应用这些方法。
- en: In the next two sections of the chapter, we will explore specific details of
    the RL approach, including assumptions and abstractions in its strict mathematical
    form. For now, to compare RL with supervised and unsupervised learning, we will
    take a less formal, but more easily understood, path.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的接下来的两节中，我们将探讨RL方法的具体细节，包括其严格数学形式中的假设和抽象。现在，为了将RL与监督学习和无监督学习进行比较，我们将采取一种不那么正式但更易于理解的方式。
- en: Imagine that you have an agent that needs to take actions in some environment.
    Both “agent” and “environment” will be defined in detail later in this chapter.
    A robot mouse in a maze is a good example, but you can also imagine an automatic
    helicopter trying to perform a roll, or a chess program learning how to beat a
    grandmaster. Let’s go with the robot mouse for simplicity.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一个代理需要在某个环境中采取行动。接下来，“代理”和“环境”将在本章中详细定义。一个迷宫中的机器人老鼠就是一个很好的例子，但你也可以想象一个自动直升机试图进行滚转，或者一个国际象棋程序学习如何打败一位国际象棋大师。为了简便，我们就以机器人老鼠为例。
- en: '![ ](img/B22150_01.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![ ](img/B22150_01.png)'
- en: 'Figure 1.1: The robot mouse maze world'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：机器人老鼠迷宫世界
- en: In this case, the environment is a maze with food at some points and electricity
    at others. The robot mouse is the agent that can take actions, such as turn left/right
    and move forward. At each moment, it can observe the full state of the maze to
    make a decision about the actions to take. The robot mouse tries to find as much
    food as possible while avoiding getting an electric shock whenever possible. These
    food and electricity signals stand as the reward that is given to the agent (robot
    mouse) by the environment as additional feedback about the agent’s actions. The
    reward is a very important concept in RL, and we will talk about it later in the
    chapter. For now, it is enough for you to know that the final goal of the agent
    is to maximize its reward as much as possible. In our particular example, the
    robot mouse could suffer a slight electric shock as a short-term setback to get
    to a place with plenty of food in the long term — this would be a better result
    for the robot mouse than just standing still and gaining nothing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，环境是一个迷宫，某些地方有食物，其他地方有电击。机器人老鼠是能够采取行动的代理（agent），比如向左/右转或向前移动。在每一时刻，它可以观察迷宫的完整状态，以决定要采取什么行动。机器人老鼠试图尽可能多地找到食物，同时尽量避免电击。食物和电击信号作为环境对代理（机器人老鼠）行为的额外反馈，充当了奖励的角色。奖励是强化学习中一个非常重要的概念，我们将在本章后面讨论。现在你只需要知道代理的最终目标是尽可能最大化它的奖励。在我们的这个具体例子中，机器人老鼠可能会因为短期的电击而遭遇一点挫折，以便在长期内到达一个食物丰富的地方——对机器人老鼠来说，这将是比停在原地一动不动且什么都得不到更好的结果。
- en: We don’t want to hard-code knowledge about the environment and the best actions
    to take in every specific situation into the robot mouse — it will take too much
    effort and may become useless even with a slight maze change. What we want is
    to have some magic set of methods that will allow our robot mouse to learn on
    its own how to avoid electricity and gather as much food as possible. RL is exactly
    this magic toolbox and it behaves differently from supervised and unsupervised
    learning methods; it doesn’t work with predefined labels in the way that supervised
    learning does. Nobody labels all the images that the robot sees as good or bad,
    or gives it the best direction to turn in.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望在机器人老鼠中硬编码有关环境和每种特定情况最佳行动的知识——这样做会非常费力，而且即使迷宫稍有变化也可能变得毫无用处。我们想要的是一套神奇的方法，使我们的机器人老鼠能够自主学习如何避免电击，并尽可能多地收集食物。强化学习正是这套神奇的工具箱，它与监督学习和无监督学习方法的行为不同；它不像监督学习那样依赖于预定义的标签。没有人会给机器人标注它看到的所有图像是好是坏，也没有人会告诉它应该转向哪个方向。
- en: However, we’re not completely blind as in an unsupervised learning setup — we
    have a reward system. The reward can be positive from gathering the food, negative
    from electric shocks, or neutral when nothing special happens. By observing the
    reward and relating it to the actions taken, our agent learns how to perform an
    action better, gather more food, and get fewer electric shocks. Of course, RL
    generality and flexibility comes with a price. RL is considered to be a much more
    challenging area than supervised or unsupervised learning. Let’s quickly discuss
    what makes RL tricky.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们并不像无监督学习那样完全盲目——我们有一个奖励系统。奖励可以是正面的，比如获取食物，负面的，比如电击，或者当什么特别的事情没有发生时是中立的。通过观察奖励并将其与采取的行动联系起来，我们的代理（agent）学习如何更好地执行某个行动，收集更多的食物，减少电击。当然，强化学习（RL）的普遍性和灵活性是有代价的。强化学习被认为是比监督学习或无监督学习更具挑战性的领域。我们来快速讨论一下是什么让强化学习变得棘手。
- en: Complications in RL
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强化学习中的复杂性
- en: The first thing to note is that observations in RL depend on an agent’s behavior
    and, to some extent, it is the result of this behavior. If your agent decides
    to do inefficient things, then the observations will tell you nothing about what
    it has done wrong and what should be done to improve the outcome (the agent will
    just get negative feedback all the time). If the agent is stubborn and keeps making
    mistakes, then the observations will give the false impression that there is no
    way to get a larger reward — life is suffering — which could be totally wrong.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要注意的是，强化学习中的观察结果取决于代理的行为，并在某种程度上是该行为的结果。如果你的代理决定做一些低效的事情，那么观察结果将无法告诉你它做错了什么，以及应该采取什么措施来改进结果（代理将一直得到负面反馈）。如果代理固执己见，持续犯错，那么观察结果会给人一种错误的印象，认为无法获得更大的奖励——生活充满了痛苦——这完全可能是错误的。
- en: In ML terms, this can be rephrased as having non-IID data. The abbreviation
    iid stands for independent and identically distributed, a requirement for most
    supervised learning methods.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ML 术语中，这可以重新表述为拥有非 IID 数据。缩写 iid 代表独立同分布，这是大多数监督学习方法的一个要求。
- en: The second thing that complicates our agent’s life is that it needs to not only
    exploit the knowledge it has learned, but actively explore the environment, because
    maybe doing things differently will significantly improve the outcome. The problem
    is that too much exploration may also seriously decrease the reward (not to mention
    the agent can actually forget what it has learned before), so we need to find
    a balance between these two activities somehow. This exploration/exploitation
    dilemma is one of the open fundamental questions in RL. People face this choice
    all the time — should I go to an already known place for dinner or try this fancy
    new restaurant? How frequently should I change jobs? Should I study a new field
    or keep working in my area? There are no universal answers to these questions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使我们的代理生活变得复杂的第二个因素是，它不仅需要利用已经学到的知识，还需要主动探索环境，因为也许改变做事的方式会显著改善结果。问题是，过多的探索也可能严重降低奖励（更不用说代理可能会忘记之前学到的东西），因此我们需要在这两种活动之间找到某种平衡。这个探索/利用的困境是
    RL 中一个开放的基础性问题。人们总是面临这个选择——我应该去一个已经知道的地方吃饭，还是尝试这个新开的餐厅？我应该多频繁地换工作？我应该学习一个新领域，还是继续在我的专业领域工作？这些问题没有普遍的答案。
- en: The third complication lies in the fact that reward can be seriously delayed
    after actions. In chess, for example, one single strong move in the middle of
    the game can shift the balance. During learning, we need to discover such causalities,
    which can be tricky to discern during the flow of time and our actions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个复杂性在于奖励可能在行动后被严重延迟。例如，在国际象棋中，一步强有力的走棋可能在游戏中段改变局势。在学习过程中，我们需要发现这样的因果关系，而在时间流逝和我们的行动中，辨别这些关系可能非常棘手。
- en: However, despite all these obstacles and complications, RL has seen huge improvements
    in recent years and is becoming more and more active as a field of research and
    practical application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管存在这些障碍和复杂性，RL 在近年来取得了巨大的进展，成为了一个越来越活跃的研究和实际应用领域。
- en: Interested in learning more? Let’s dive into the details and look at RL formalisms
    and play rules.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多吗？让我们深入探讨 RL 的形式化理论和游戏规则。
- en: RL formalisms
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RL 形式化理论
- en: Every scientific and engineering field has its own assumptions and limitations.
    Earlier in this chapter, we discussed supervised learning, in which such assumptions
    are the knowledge of input-output pairs. You have no labels for your data? You
    need to figure out how to obtain labels or try to use some other theory. This
    doesn’t make supervised learning good or bad; it just makes it inapplicable to
    your problem.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个科学和工程领域都有其假设和限制。在本章前面，我们讨论了监督学习，在这种方法中，假设是输入输出对的知识。如果你的数据没有标签？你需要弄清楚如何获得标签，或者尝试使用其他理论。这并不意味着监督学习好或不好；它只是让它无法应用于你的问题。
- en: There are many historical examples of practical and theoretical breakthroughs
    that have occurred when somebody tried to challenge rules in a creative way. However,
    we also must understand our limitations. It’s important to know and understand
    game rules for various methods, as it can save you tons of time in advance. Of
    course, such formalisms exist for RL, and we will spend the rest of this book
    analyzing them from various angles.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多历史上的实际和理论突破，都是当某人试图以创造性方式挑战规则时发生的。然而，我们也必须理解我们的局限性。了解并理解各种方法的游戏规则非常重要，因为这可以帮助你提前节省大量时间。当然，RL
    也有相应的形式化理论，我们将在本书的剩余部分从不同角度分析它们。
- en: 'The following diagram shows two major RL entities — agent and environment —
    and their communication channels — actions, reward, and observations:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了两个主要的 RL 实体——代理和环境——以及它们的通信渠道——行动、奖励和观察：
- en: '![AERAOgnecbevwtsniaietrrorodnvnsamteionnts ](img/B22150_02.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![AERAOgnecbevwtsniaietrrorodnvnsamteionnts ](img/B22150_02.png)'
- en: 'Figure 1.2: RL entities and their communication channels'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：RL 实体及其通信渠道
- en: We will discuss them in detail in the next few sections.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几个章节中详细讨论它们。
- en: Reward
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖励
- en: First, let’s return to the notion of reward. In RL, it’s just a scalar value
    we obtain periodically from the environment. As mentioned, reward can be positive
    or negative, large or small, but it’s just a number. The purpose of reward is
    to tell our agent how well it has behaved. We don’t define how frequently the
    agent receives this reward; it can be every second or once in an agent’s lifetime,
    although it’s common practice to receive rewards every fixed timestamp or at every
    environment interaction, just for convenience. In the case of once-in-a-lifetime
    reward systems, all rewards except the last one will be zero.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们回到奖励的概念。在强化学习中，奖励只是我们从环境中定期获得的一个标量值。如前所述，奖励可以是正的也可以是负的，大小不一，但它只是一个数字。奖励的目的是告诉智能体它的行为有多好。我们并不定义智能体获得奖励的频率；它可以是每秒一次，也可以是智能体一生中仅有一次，尽管通常做法是每固定时间戳或每次与环境交互时给予奖励，以便于操作。在一次性奖励系统的情况下，除了最后一个奖励之外，所有奖励都为零。
- en: As I stated, the purpose of reward is to give an agent feedback about its success,
    and it’s a central thing in RL. Basically, the term reinforcement comes from the
    fact that reward obtained by an agent should reinforce its behavior in a positive
    or negative way. Reward is local, meaning that it reflects the benefits and losses
    achieved by the agent so far. Of course, getting a large reward for some action
    doesn’t mean that, a second later, you won’t face dramatic consequences as a result
    of your previous decisions. It’s like robbing a bank — it could look like a good
    idea until you think about the consequences.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，奖励的目的是给智能体提供关于其成功的反馈，这是强化学习中的核心概念。基本上，“强化”一词源自于这样一个事实：智能体获得的奖励应该以积极或消极的方式强化其行为。奖励是局部的，意味着它反映了智能体到目前为止所获得的利益和损失。当然，某个动作获得了大奖励并不意味着，过一秒钟后，你就不会因之前的决策面临剧烈后果。这就像抢银行——在你想到后果之前，它看起来可能是个好主意。
- en: 'What an agent is trying to achieve is the largest accumulated reward over its
    sequence of actions. To give you a better understanding of reward, here is a list
    of some concrete examples with their rewards:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 智能体试图实现的目标是其一系列动作中累计的最大奖励。为了帮助你更好地理解奖励，这里列出了一些具体的例子及其奖励：
- en: 'Financial trading: An amount of profit is a reward for a trader buying and
    selling stocks.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 财务交易：一笔利润是交易员买卖股票的奖励。
- en: 'Chess: Reward is obtained at the end of the game as a win, lose, or draw. Of
    course, it’s up to interpretation. For me, for example, achieving a draw in a
    match against a chess grandmaster would be a huge reward. In practice, we need
    to specify the exact reward value, but it could be a fairly complicated expression.
    For instance, in the case of chess, the reward could be proportional to the opponent’s
    strength.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际象棋：奖励在游戏结束时获得，可能是胜利、失败或平局。当然，这取决于解释。例如，对我来说，在与国际象棋大师对弈时取得平局就是一个巨大的奖励。实际上，我们需要指定准确的奖励值，但这可能是一个相当复杂的表达式。例如，在国际象棋中，奖励可能与对手的强度成比例。
- en: 'Dopamine system in the brain: There is a part of the brain (limbic system)
    that produces dopamine every time it needs to send a positive signal to the rest
    of the brain. High concentrations of dopamine lead to a sense of pleasure, which
    reinforces activities considered by this system to be good. Unfortunately, the
    limbic system is ancient in terms of the things it considers good — food, reproduction,
    and safety — but that is a totally different story!'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大脑中的多巴胺系统：大脑中有一部分（边缘系统）每当需要向大脑其他部分发送积极信号时，会产生多巴胺。高浓度的多巴胺会带来愉悦感，这会强化大脑认为有益的活动。不幸的是，边缘系统在它所认为“有益”的事物上非常古老——食物、繁衍和安全——但这是完全不同的故事！
- en: 'Computer games: They usually give obvious feedback to the player, which is
    either the number of enemies killed or a score gathered. Note in this example
    that reward is already accumulated, so the RL reward for arcade games should be
    the derivative of the score, that is, +1 every time a new enemy is killed, −N
    if the player was killed by the enemy, and 0 at all other time steps.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电脑游戏：它们通常会给玩家提供明显的反馈，通常是击杀的敌人数或者收集的分数。在这个例子中需要注意的是，奖励已经累计，所以街机游戏中的强化学习奖励应该是分数的导数，也就是说，每当击杀一个敌人时奖励+1，玩家被敌人击杀时奖励-
    N，其余时间奖励为0。
- en: 'Web navigation: There are problems, with high practical value, that require
    the automated extraction of information available on the web. Search engines are
    trying to solve this task in general, but sometimes, to get to the data you’re
    looking for, you need to fill in some forms or navigate through a series of links,
    or complete CAPTCHAs, which can be difficult for search engines to do. There is
    an RL-based approach to those tasks in which the reward is the information or
    the outcome that you need to get.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络导航：有一些问题，具有很高的实际价值，需要自动提取网络上的信息。搜索引擎通常在尝试解决这一任务，但有时，为了获得所需的数据，你需要填写一些表单、通过一系列链接导航，或完成验证码，这对于搜索引擎来说可能是困难的。针对这些任务，有一种基于强化学习的方法，其中的奖励是你所需的
    信息或结果。
- en: 'NN architecture search: RL can be used for NN architecture optimization where
    the quality of models is crucial and people work hard to gain an extra 1% on target
    metrics. In this use case, the aim is to get the best performance metric on some
    dataset by tweaking the number of layers or their parameters, adding extra bypass
    connections, or making other changes to the NN architecture. The reward in this
    case is the performance (accuracy or another measure showing how accurate the
    NN predictions are).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神经网络架构搜索：强化学习（RL）可用于神经网络架构优化，在这种情况下，模型的质量至关重要，人们努力提升目标指标的额外 1%。在这一应用场景中，目标是通过调整层数或其参数、添加额外的旁路连接或对神经网络架构做出其他更改，从而在某些数据集上获得最佳的性能指标。此时的奖励是性能（准确度或其他衡量神经网络预测准确性的指标）。
- en: 'Dog training: If you have ever tried to train a dog, you know that you need
    to give it something tasty (but not too much) every time it does the thing you’ve
    asked. It’s also common to reprimand your pet a bit (negative reward) when it
    doesn’t follow your orders, although recent studies have shown that this isn’t
    as effective as a positive reward.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 狗狗训练：如果你曾经尝试训练一只狗，你就知道每当它做对了你要求的事情时，你需要给它一些美味的东西（但不要太多）。当它不听从指令时，惩罚它一点（负奖励）也是常见的做法，尽管近期的研究表明，这种做法并不像正向奖励那样有效。
- en: 'School marks: We all have experience here! School marks are a reward system
    designed to give pupils feedback about their studying.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学校成绩：我们都有过这样的经历！学校成绩是一种奖励系统，旨在为学生提供关于他们学习情况的反馈。
- en: As you can see from the preceding examples, the notion of reward is a very general
    indication of the agent’s performance, and it can be found or artificially injected
    into lots of practical problems around us.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如从前面的例子中可以看出的那样，奖励的概念是智能体表现的一个非常普遍的指示，它可以在我们周围的许多实际问题中找到或人为地注入。
- en: The agent
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能体
- en: 'An agent is somebody or something who/that interacts with the environment by
    executing certain actions, making observations, and receiving eventual rewards
    for this. In most practical RL scenarios, the agent is our piece of software that
    is supposed to solve some problem in a more-or-less efficient way. For our initial
    set of six examples, the agents will be as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 智能体是指通过执行特定的行动、做出观察，并因此获得最终奖励的人或物。在大多数实际的强化学习场景中，智能体是我们的软件部分，它旨在以或多或少高效的方式解决某个问题。对于我们最初的六个例子，智能体如下：
- en: 'Financial trading: A trading system or a trader making decisions about order
    execution (buying, selling, or doing nothing).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融交易：一个交易系统或交易员在执行订单（买入、卖出或不做任何操作）时作出的决策。
- en: 'Chess: A player or a computer program.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际象棋：一个玩家或计算机程序。
- en: 'Dopamine system: The brain itself, which, according to sensory data, decides
    whether it was a good experience.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多巴胺系统：大脑本身，根据感官数据决定这是否是一次好的体验。
- en: 'Computer games: The player who enjoys the game or the computer program. (Andrej
    Karpathy once tweeted that “we were supposed to make AI do all the work and we
    play games but we do all the work and the AI is playing games!”).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子游戏：享受游戏或计算机程序的玩家。（Andrej Karpathy 曾在推特上写道：“我们原本是要让 AI 完成所有工作，我们自己玩游戏，但实际上我们做了所有工作，而
    AI 正在玩游戏！”）。
- en: 'Web navigation: The software that tells the browser which links to click on,
    where to move the mouse, or which text to enter.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络导航：告诉浏览器点击哪些链接、移动鼠标到哪里或输入哪些文本的软件。
- en: 'NN architecture search: The software that controls the concrete architecture
    of the NN being evaluated.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神经网络架构搜索：控制被评估的神经网络具体架构的软件。
- en: 'Dog training: You make decisions about the actions (feeding/reprimand), so,
    the agent is you. But in principle, your dog also could be seen as the agent —
    the dog is trying to maximize the reward (food and/or attention) by behaving properly.
    Strictly speaking, here we have a “multi-agent RL” setup, which is briefly discussed
    in Chapter [22](ch026.xhtml#x1-41100022).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 狗狗训练：你做出关于行动的决策（喂食/训斥），所以，代理人是你。但原则上，你的狗也可以被视为代理人——狗狗试图通过正确的行为来最大化奖励（食物和/或关注）。严格来说，这里是一个“多代理强化学习”（multi-agent
    RL）设置，相关内容在第[22](ch026.xhtml#x1-41100022)章有简要讨论。
- en: 'School: Student/pupil.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学校：学生/学员。
- en: The environment
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境
- en: The environment is everything outside of an agent. In the most general sense,
    it’s the rest of the universe, but this goes slightly overboard and exceeds the
    capacity of even tomorrow’s computers, so we usually follow the general sense
    here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 环境是代理之外的一切。从最广义上讲，它是宇宙的其余部分，但这稍微有些夸张，甚至超出了即使是明天的计算机的处理能力，所以我们通常在这里遵循一般意义上的理解。
- en: The agent’s communication with the environment is limited to reward (obtained
    from the environment), actions (executed by the agent and sent to the environment),
    and observations (some information besides the reward that the agent receives
    from the environment). We have discussed rewards already, so let’s talk about
    actions and observations next. We will identify the environment for each of our
    examples when we discuss the observations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 代理人与环境的互动仅限于奖励（从环境中获得）、行动（由代理执行并发送到环境）和观察（代理从环境中获得的除奖励之外的一些信息）。我们已经讨论了奖励，接下来我们来谈谈行动和观察。我们将在讨论观察时确定每个例子的环境。
- en: Actions
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动
- en: Actions are things that an agent can do in the environment. Actions can, for
    example, be piece moves on the board (if it’s a board game), or doing homework
    (in the case of school). They can be as simple as move pawn one space forward
    or as complicated as build a profitable startup company.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 行动是代理人在环境中可以执行的事情。例如，行动可以是棋盘上的棋子移动（如果是棋类游戏），或者是做作业（在学校的情况下）。它们可以像将兵前进一格那样简单，也可以像建立一家盈利的初创公司那样复杂。
- en: In RL, we distinguish between two types of actions — discrete or continuous.
    Discrete actions form the finite set of mutually exclusive things an agent can
    do, such as move left or right. Continuous actions have some value attached to
    them, such as a car’s turn the wheel action having an angle and direction of steering.
    Different angles could lead to a different scenario a second later, so just turn
    the wheel is definitely not enough.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在强化学习（RL）中，我们区分两种类型的行动——离散的或连续的。离散行动形成了代理可以执行的一组有限的、相互排斥的事情，比如向左或向右移动。连续行动则附带一些数值，例如汽车转动方向盘时有一个角度和方向。不同的角度可能会导致一秒钟后不同的情景，因此单纯的“转动方向盘”肯定不够。
- en: 'Giving concrete examples, let’s look at the actions in our six scenarios:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 给出具体例子，让我们看看六种情境中的行动：
- en: 'Financial trading: Actions are decisions to buy or sell stock. “Do nothing
    and wait” also is an action.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融交易：行动是买入或卖出股票的决策。“什么也不做，等待”也是一种行动。
- en: 'Chess: Actions are valid piece moves according to the current board’s position.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际象棋：行动是根据当前棋盘位置进行的有效棋子移动。
- en: 'Dopamine system: Actions are the things that you are doing.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多巴胺系统：行动是你正在做的事情。
- en: 'Computer games: Actions are pushing buttons. They could be also continuous,
    such as turning the steering wheel in an auto simulator.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子游戏：行动是按按钮。它们也可以是连续的，比如在汽车模拟器中转动方向盘。
- en: 'Web navigation: Actions could be mouse clicks, scrolling, and text typing.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络浏览：行动可能是鼠标点击、滚动和文字输入。
- en: 'NN architecture search: Actions are changes in NN architecture, which could
    be discrete (count of layers in the network) or continuous (probability in the
    dropout layer).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神经网络架构搜索：行动是神经网络架构的变化，这些变化可以是离散的（网络中的层数）或连续的（丢弃层中的概率）。
- en: 'Dog training: Actions are everything you can do with your dog — giving a piece
    of tasty food, petting, even saying “good dog!” in a kind voice.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 狗狗训练：行动是你与狗狗可以做的一切——给它一块美味的食物、抚摸它，甚至用温柔的声音说“乖狗狗！”
- en: 'School: Actions are marks and lots of more informal signals, like praising
    the successes or giving extra homework.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学校：行动是成绩和其他非正式的信号，比如表扬成功或布置额外的作业。
- en: Observations
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察
- en: Observations of the environment form the second information channel for an agent,
    with the first being the reward. You may be wondering why we need a separate data
    source. The answer is convenience. Observations are pieces of information that
    the environment provides the agent with that indicate what’s going on around the
    agent.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 环境的观察构成了代理的第二个信息通道，第一个通道是奖励。你可能会想，为什么我们需要一个单独的数据源？答案是方便。观察是环境提供给代理的、指示代理周围发生情况的信息。
- en: Observations may be relevant to the upcoming reward (such as seeing a bank notification
    about being paid) or may not be. Observations can even include reward information
    in some vague or obfuscated form, such as score numbers on a computer game’s screen.
    Score numbers are just pixels, but potentially, we could convert them into reward
    values; it’s not a very complex task for a modern computer vision techniques.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 观察可能与即将到来的奖励相关（例如看到银行通知自己已收到薪水），也可能无关。观察甚至可能以某种模糊或隐晦的形式包含奖励信息，例如计算机游戏屏幕上的得分数字。得分数字只是像素，但我们有可能将它们转化为奖励值；对于现代计算机视觉技术来说，这并不是一个复杂的任务。
- en: On the other hand, reward shouldn’t be seen as a secondary or unimportant thing
    — reward is the main force that drives the agent’s learning process. If a reward
    is wrong, noisy, or just slightly off course from the primary objective, then
    there is a chance that training will go in the wrong direction.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，奖励不应被视为次要或不重要的东西——奖励是驱动代理学习过程的主要力量。如果奖励是错误的、噪声大的，或者与主要目标稍有偏离，那么训练可能会朝着错误的方向发展。
- en: 'It’s also important to distinguish between an environment’s state and observations.
    The state of an environment most of the time is internal to the environment and
    potentially includes every atom in the universe, which makes it impossible to
    measure everything about the environment. Even if we limit the environment’s state
    to be small enough, most of the time, it will be either not possible to get full
    information about it or our measurements will contain noise. This is completely
    fine, though, and RL was created to support such cases natively. To illustrate
    the difference, let’s return to our set of examples:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，区分环境的状态和观察也很重要。环境的状态大多数时候是环境内部的，可能包括宇宙中的每一个原子，这使得我们不可能测量环境中的所有信息。即使我们将环境的状态限制得足够小，大多数情况下，我们也不可能获得关于它的完整信息，或者我们的测量会包含噪声。然而，这完全没问题，强化学习（RL）就是为了原生支持这种情况而设计的。为了说明这种区别，我们回到我们的示例集：
- en: 'Financial trading: Here, the environment is the whole financial market and
    everything that influences it. This is a huge list of things, such as the latest
    news, economic and political conditions, weather, food supplies, and Twitter/X
    trends. Even your decision to stay home today can potentially indirectly influence
    the world’s financial system (if you believe in the “butterfly effect”). However,
    our observations are limited to stock prices, news, and so on. We don’t have access
    to most of the environment’s state, which makes financial forecasting such a nontrivial
    thing.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融交易：在这里，环境是整个金融市场及其一切影响因素。这是一个庞大的清单，包含最新的新闻、经济和政治条件、天气、食物供应、Twitter/X趋势等。甚至你今天决定待在家里，也可能间接影响世界金融系统（如果你相信“蝴蝶效应”）。然而，我们的观察仅限于股价、新闻等。我们无法访问大部分环境状态，这使得金融预测成为一项非常复杂的任务。
- en: 'Chess: The environment here is your board plus your opponent, which includes
    their chess skills, mood, brain state, chosen tactics, and so on. Observations
    are what you see (your current chess position), but, at some levels of play, knowledge
    of psychology and the ability to read an opponent’s mood could increase your chances.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际象棋：这里的环境是你的棋盘加上你的对手，包括他们的棋艺、情绪、大脑状态、选择的战术等。观察是你所看到的（你当前的棋盘局面），但是，在某些层次的比赛中，心理学知识和读取对手情绪的能力可能会提高你的胜算。
- en: 'Dopamine system: The environment here is your brain plus your nervous system
    and your organs’ states plus the whole world you can perceive. Observations are
    the inner brain state and signals coming from your senses.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多巴胺系统：这里的环境是你的大脑、神经系统、器官状态以及你能感知到的整个世界。观察是来自你感官的内在大脑状态和信号。
- en: 'Computer game: Here, the environment is your computer’s state, including all
    memory and disk data. For networked games, you need to include other computers
    plus all Internet infrastructure between them and your machine. Observations are
    a screen’s pixels and sound only. These pixels are not a tiny amount of information
    (it has been estimated that the total number of possible moderate-size images
    (1024×768) is significantly larger than the number of atoms in our galaxy), but
    the whole environment state is definitely larger.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电脑游戏：在这里，环境是你电脑的状态，包括所有内存和磁盘数据。对于联网游戏，你需要包括其他电脑以及它们和你机器之间的所有互联网基础设施。观察数据仅限于屏幕的像素和声音。这些像素并不是少量的信息（有估算认为，所有可能的中等大小图像（1024×768）的总数量远远大于我们银河系中原子的数量），但整个环境状态肯定更大。
- en: 'Web navigation: The environment here is the Internet, including all the network
    infrastructure between the computer on which our agent works and the web server,
    which is a really huge system that includes millions and millions of different
    components. The observation is normally the web page that is loaded in the browser.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络浏览：这里的环境是互联网，包括所有在你代理工作的计算机和网页服务器之间的网络基础设施，这是一个真正庞大的系统，包含了成千上万不同的组件。观察通常是加载在浏览器中的网页。
- en: 'NN architecture search: In this example, the environment is fairly simple and
    includes the NN toolkit that performs the particular NN evaluation and the dataset
    that is used to obtain the performance metric. In comparison to the Internet,
    this looks like a tiny toy environment. Observations might be different and include
    some information about testing, such as loss convergence dynamics or other metrics
    obtained from the evaluation step.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神经网络架构搜索：在这个例子中，环境相对简单，包括执行特定神经网络评估的神经网络工具包，以及用于获得性能度量的数据集。与互联网相比，这看起来像是一个微小的玩具环境。观察数据可能有所不同，包括一些关于测试的信息，例如损失收敛动态或从评估步骤中获得的其他度量。
- en: 'Dog training: Here, the environment is your dog (including its hardly observable
    inner reactions, mood, and life experiences) and everything around it, including
    other dogs and even a cat hiding in a bush. Observations are signals from your
    senses and memory.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 狗狗训练：这里，环境是你的狗（包括它几乎无法观察到的内心反应、情绪和生活经验）以及周围的一切，包括其他狗甚至是藏在灌木丛中的猫。观察数据来自你的感官和记忆。
- en: 'School: The environment here is the school itself, the education system of
    the country, society, and the cultural legacy. Observations are the same as for
    the dog training example — the student’s senses and memory.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学校：这里的环境是学校本身、国家的教育系统、社会和文化遗产。观察数据与狗狗训练示例中的相同——学生的感官和记忆。
- en: This is our “mise en scène” and we will play around with it in the rest of this
    book. You will have already noticed that the RL model is extremely flexible and
    general, and it can be applied to a variety of scenarios. Let’s now look at how
    RL is related to other disciplines, before diving into the details of the RL model.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的“场景布置”，在本书的其余部分我们将围绕它进行讨论。你应该已经注意到，强化学习（RL）模型极其灵活和通用，可以应用于多种场景。现在，让我们在深入探讨RL模型的细节之前，先看看强化学习与其他学科的关系。
- en: There are many other areas that contribute or relate to RL. The most significant
    are shown in the following diagram, which includes six large domains heavily overlapping
    each other on the methods and specific topics related to decision-making (shown
    inside the inner circle).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他领域为强化学习做出贡献或与其相关。最重要的几个领域显示在以下图示中，其中包括六个相互重叠的主要领域，这些领域涉及与决策相关的方法和具体话题（显示在内圈内）。
- en: '![PIC](img/file5.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![PIC](img/file5.png)'
- en: 'Figure 1.3: Various domains in RL'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：强化学习中的各个领域
- en: 'At the intersection of all those related, but still different, scientific areas
    sits RL, which is so general and flexible that it can take the best available
    information from these varying domains:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些相关但仍然不同的科学领域的交集处坐落着强化学习（RL），它如此通用和灵活，可以从这些不同的领域中汲取最好的可用信息：
- en: 'ML: RL, being a subfield of ML, borrows lots of its machinery, tricks, and
    techniques from ML. Basically, the goal of RL is to learn how an agent should
    behave when it is given imperfect observational data.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习（ML）：作为机器学习（ML）的一个子领域，强化学习（RL）借鉴了许多机器学习的工具、技巧和技术。基本上，RL的目标是学习在给定不完美的观察数据时，代理应如何行动。
- en: 'Engineering (especially optimal control): This helps with taking a sequence
    of optimal actions to get the best result.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工程（特别是最优控制）：这有助于采取一系列最优的行动，以获得最佳结果。
- en: 'Neuroscience: We used the dopamine system as our example, and it has been shown
    that the human brain acts similarly to the RL model.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神经科学：我们以多巴胺系统为例，研究表明人类大脑的工作方式与RL模型非常相似。
- en: 'Psychology: This studies behavior in various conditions, such as how people
    react and adapt, which is close to the RL topic.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 心理学：这研究人在各种条件下的行为，比如人们如何反应和适应，这与RL主题有很大关联。
- en: 'Economics: One of the important topics in economics is how to maximize reward
    in terms of imperfect knowledge and the changing conditions of the real world.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经济学：经济学中的一个重要话题是如何在不完全知识和现实世界变化条件下最大化回报。
- en: 'Mathematics: This works with idealized systems and also devotes significant
    attention to finding and reaching the optimal conditions in the field of operations
    research.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数学：这与理想化系统一起工作，并且在运筹学领域也特别关注寻找并达到最优条件。
- en: In the next part of the chapter, you will become familiar with the theoretical
    foundations of RL, which will make it possible to start moving toward the methods
    used to solve the RL problem. The upcoming section is important for understanding
    the rest of the book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一部分，你将熟悉强化学习（RL）的理论基础，这将使你能够开始朝着解决RL问题的方法迈进。接下来的部分对理解本书的其余部分非常重要。
- en: The theoretical foundations of RL
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强化学习的理论基础
- en: In this section, I will introduce you to the mathematical representation and
    notation of the formalisms (reward, agent, actions, observations, and environment)
    that we just discussed. Then, using this as a knowledge base, we will explore
    the second-order notions of the RL language, including state, episode, history,
    value, and gain, which will be used repeatedly to describe different methods later
    in the book.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我将向你介绍我们刚刚讨论的形式化模型（回报、代理、动作、观察和环境）的数学表示和符号。然后，基于这些知识，我们将探讨RL语言中的二阶概念，包括状态、回合、历史、价值和收益，这些概念将在本书后续的不同方法中反复使用。
- en: Markov decision processes
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 马尔可夫决策过程
- en: 'Before that, we will cover Markov decision processes (MDPs), which will bedescribed
    like a Russian matryoshka doll: we will start from the simplest case of a Markov
    process (MP), then extend that with rewards, which will turn it into a Markov
    reward process (MRP). Then, we will put this idea into an extra envelope by adding
    actions, which will lead us to an MDP.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，我们将介绍马尔可夫决策过程（MDPs），它将像俄罗斯套娃一样被描述：我们将从最简单的马尔可夫过程（MP）开始，然后通过加入回报扩展它，变成马尔可夫回报过程（MRP）。接着，我们通过加入动作，再次将这个想法放入一个额外的框架，这样我们就得到了MDP。
- en: MPs and MDPs are widely used in computer science and other engineering fields.
    So, reading this chapter will be useful for you not only for RL contexts but also
    for a much wider range of topics. If you’re already familiar with MDPs, then you
    can quickly skim this chapter, paying attention only to the terminology definitions,
    as we will use them later on.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: MPs和MDPs在计算机科学和其他工程领域广泛应用。因此，阅读这一章不仅对你在RL方面有帮助，也对更广泛的主题有益。如果你已经熟悉MDPs，那么你可以快速浏览这一章，只关注术语定义，因为我们稍后会用到它们。
- en: The Markov process
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 马尔可夫过程
- en: 'Let’s start with the simplest concept in the Markov family: the MP, which is
    also known as the Markov chain. Imagine that you have some system in front of
    you that you can only observe. What you observe is called states, and the system
    can switch between states according to some laws of dynamics (most of the time
    unknown to you). Again, you cannot influence the system, but can only watch the
    states changing. All possible states for a system form a set called the state
    space. For MPs, we require this set of states to be finite (but it can be extremely
    large to compensate for this limitation). Your observations form a sequence of
    states or a chain (that’s why MPs are also called Markov chains).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从马尔可夫家族中最简单的概念开始：MP，也就是马尔可夫链。假设你面前有一个系统，你只能观察它。你观察到的叫做状态，系统可以根据某些动态法则（大多数情况下你并不知道这些法则）在状态之间切换。再次强调，你不能影响系统，只能观察状态的变化。一个系统的所有可能状态组成一个叫做状态空间的集合。对于MP，我们要求这个状态集合是有限的（但它可以非常大以弥补这一限制）。你的观察形成一系列状态或链（这也是为什么MPs也被称为马尔可夫链）。
- en: For example, looking at the simplest model of the weather in some city, we can
    observe the current day as sunny or rainy, which is our state space. A sequence
    of observations over time forms a chain of states, such as [sunny, sunny, rainy,
    sunny, ...], and this is called history. To call such a system an MP, it needs
    to fulfill the Markov property, which means that the future system dynamics from
    any state have to depend on this state only. The main point of the Markov property
    is to make every observable state self-contained to describe the future of the
    system. In other words, the Markov property requires the states of the system
    to be distinguishable from each other and unique. In this case, only one state
    is required to model the future dynamics of the system and not the whole history
    or, say, the last N states.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑某个城市最简单的天气模型，我们可以观察当前是晴天还是雨天，这就是我们的状态空间。随着时间的推移，观察序列形成了一个状态链，如 [晴天, 晴天,
    雨天, 晴天, ...]，这就是所谓的历史。要将这样的系统称为马尔可夫过程，它需要满足马尔可夫性质，这意味着未来的系统动态仅取决于当前状态，而不取决于历史状态。马尔可夫性质的主要观点是使每个可观察的状态能够独立地描述系统的未来。换句话说，马尔可夫性质要求系统的各个状态彼此可区分且唯一。在这种情况下，仅需一个状态来建模系统的未来动态，而不是整个历史或说最近的
    N 个状态。
- en: In the case of our toy weather example, the Markov property limits our model
    to represent only the cases when a sunny day can be followed by a rainy one with
    the same probability, regardless of the number of sunny days we’ve seen in the
    past. It’s not a very realistic model as, from common sense, we know that the
    chance of rain tomorrow depends not only on the current conditions but on a large
    number of other factors, such as the season, our latitude, and the presence of
    mountains and sea nearby. It was recently proven that even solar activity has
    a major influence on the weather. So, our example is really naïve, but it’s important
    to understand the limitations and make conscious decisions about them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的天气示例中，马尔可夫性质将我们的模型限制为仅表示晴天之后可能是雨天，且两者的概率相同，不管过去我们经历了多少个晴天。这并不是一个非常现实的模型，因为从常理来看，我们知道第二天的降雨概率不仅取决于当前的天气状况，还取决于许多其他因素，如季节、纬度以及周围是否有山脉或海洋。最近有研究证明，太阳活动也对天气有重要影响。所以，我们的示例其实是很天真的，但它有助于理解模型的局限性，并做出有意识的决策。
- en: Of course, if we want to make our model more complex, we can always do this
    by extending our state space, which will allow us to capture more dependencies
    in the model at the cost of a larger state space. For example, if you want to
    capture separately the probability of rainy days during summer and winter, then
    you can include the season in your state.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果我们希望让我们的模型更复杂，可以通过扩展状态空间来实现，这样可以在模型中捕获更多的依赖关系，代价是增加了状态空间的规模。例如，如果你想分别捕捉夏季和冬季的雨天概率，那么你可以将季节纳入你的状态空间。
- en: In this case, your state space will be [sunny+summer, sunny+winter, rainy+summer,
    rainy+winter] and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你的状态空间将是 [晴天+夏季, 晴天+冬季, 雨天+夏季, 雨天+冬季]，依此类推。
- en: As your system model complies with the Markov property, you can capture transition
    probabilities with a transition matrix, which is a square matrix of the size N
    ×N, where N is the number of states in our model. Every cell in a row, i, and
    a column, j, in the matrix contains the probability of the system to transition
    from state i to state j.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的系统模型符合马尔可夫性质，你可以通过一个转移矩阵来捕获转移概率，转移矩阵是一个 N × N 的方阵，其中 N 是我们模型中状态的数量。矩阵中第
    i 行、第 j 列的每个单元格包含系统从状态 i 转移到状态 j 的概率。
- en: 'For example, in our sunny/rainy example, the transition matrix could be as
    follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的晴天/雨天示例中，转移矩阵可能如下所示：
- en: '|  | Sunny | Rainy |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '|  | 晴天 | 雨天 |'
- en: '| Sunny | 0.8 | 0.2 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 晴天 | 0.8 | 0.2 |'
- en: '| Rainy | 0.1 | 0.9 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 雨天 | 0.1 | 0.9 |'
- en: In this case, if we have a sunny day, then there is an 80% chance that the next
    day will be sunny and a 20% chance that the next day will be rainy. If we observe
    a rainy day, then there is a 10% probability that the weather will become better
    and a 90% probability of the next day being rainy.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果我们是晴天，那么第二天晴天的概率是 80%，雨天的概率是 20%。如果我们观察到雨天，那么天气变好的概率是 10%，第二天仍然是雨天的概率是
    90%。
- en: 'So, that’s it. The formal definition of an MP is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就是这样。马尔可夫过程的正式定义如下：
- en: A set of states (S) that a system can be in
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统可以处于的一组状态（S）
- en: A transition matrix (T), with transition probabilities, which defines the system
    dynamics
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移矩阵 (T)，包含转移概率，定义了系统的动态
- en: 'A useful visual representation of an MP is a graph with nodes corresponding
    to system states and edges, labeled with probabilities representing a possible
    transition from state to state. If the probability of a transition is 0, we don’t
    draw an edge (there is no way to go from one state to another). This kind of representation
    is also widely used in finite state machine representation, which is studied in
    automata theory. For our sunny/rainy weather model, the graph is as shown here:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: MP的一个有用的可视化表示是一个图，节点代表系统的状态，边缘则用表示可能从一个状态到另一个状态的转移概率来标注。如果某个转移的概率是0，我们就不画边（意味着无法从一个状态转移到另一个状态）。这种表示方法在有限状态机表示中也被广泛使用，而有限状态机又是自动机理论中的一个研究领域。对于我们的晴天/雨天天气模型，图示如下：
- en: '![SRppppuani====nnyy0000....2189 ](img/B22150_04.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![SRppppuani====nnyy0000....2189 ](img/B22150_04.png)'
- en: 'Figure 1.4: The sunny/rainy weather model'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：晴天/雨天天气模型
- en: Again, we’re talking about observation only. There is no way for us to influence
    the weather, so we just observe it and record our observations.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们仅仅是在谈论观察。我们无法影响天气，只能观察它并记录我们的观察结果。
- en: 'To give you a more complicated example, let’s consider another model called
    Office Worker (Dilbert, the main character in Scott Adams’ famous cartoons, is
    a good example). His state space in our example has the following states:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给你一个更复杂的例子，我们来考虑一个名为“办公室员工”的模型（《Dilbert》中的主角迪尔伯特就是一个很好的例子）。在我们的示例中，他的状态空间包括以下状态：
- en: 'Home: He’s not at the office'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 家里：他不在办公室
- en: 'Computer: He’s working on his computer at the office'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机：他在办公室使用电脑工作
- en: 'Coffee: He’s drinking coffee at the office'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咖啡：他在办公室喝咖啡
- en: 'Chat: He’s discussing something with colleagues at the office'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天：他正在与办公室的同事讨论某些事情
- en: 'The state transition graph is shown in the following figure:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 状态转移图如下面的图示所示：
- en: '![CCCHhoooaffmmtepeeuter ](img/B22150_05.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![CCCHhoooaffmmtepeeuter ](img/B22150_05.png)'
- en: 'Figure 1.5: The state transition graph for our office worker'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：我们办公室员工的状态转移图
- en: We assume that our office worker’s weekday usually starts from the Home state
    and that he starts his day with Coffee without exception (no Home →Computer edge
    and no Home →Chat edge). The preceding diagram also shows that workdays always
    end (that is, going to the Home state) from the Computer state.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设我们办公室员工的工作日通常从“家里”状态开始，而且他毫无例外地从“咖啡”状态开始一天（没有“家里 → 计算机”边缘，也没有“家里 → 聊天”边缘）。前面的图示还表明，工作日总是从“计算机”状态结束（也就是说，回到“家里”状态）。
- en: 'The transition matrix for the diagram above is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上面图示的转移矩阵如下：
- en: '|  | Home | Coffee | Chat | Computer |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '|  | 家里 | 咖啡 | 聊天 | 计算机 |'
- en: '| Home | 60% | 40% | 0% | 0% |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 家里 | 60% | 40% | 0% | 0% |'
- en: '| Coffee | 0% | 10% | 70% | 20% |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 咖啡 | 0% | 10% | 70% | 20% |'
- en: '| Chat | 0% | 20% | 50% | 30% |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 聊天 | 0% | 20% | 50% | 30% |'
- en: '| Computer | 20% | 20% | 10% | 50% |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 计算机 | 20% | 20% | 10% | 50% |'
- en: The transition probabilities could be placed directly on the state transition
    graph, as shown in Figure [1.6](#x1-32011r6).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 转移概率可以直接标注在状态转移图上，如图[1.6](#x1-32011r6)所示。
- en: '![CCCHpppppppppppphooo = = = = = = = = = = = =affmmtepeeu000000000000t.5.3.1.1.2.7.5.2.2.6.2.4er
    ](img/B22150_06.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![CCCHpppppppppppphooo = = = = = = = = = = = =affmmtepeeu000000000000t.5.3.1.1.2.7.5.2.2.6.2.4er
    ](img/B22150_06.png)'
- en: 'Figure 1.6: The state transition graph with transition probabilities'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：带有转移概率的状态转移图
- en: 'In practice, we rarely have the luxury of knowing the exact transition matrix.
    A much more real-world situation is when we only have observations of our system’s
    states, which are also called episodes:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，我们很少有机会知道确切的转移矩阵。一个更为现实的情况是，当我们只能观察到系统的状态，这些状态也称为“情节”时：
- en: Home → Coffee → Coffee → Chat → Chat → Coffee → Computer →Computer →Home
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 家里 → 咖啡 → 咖啡 → 聊天 → 聊天 → 咖啡 → 计算机 → 计算机 → 家里
- en: Computer → Computer → Chat → Chat → Coffee → Computer →Computer →Computer
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机 → 计算机 → 聊天 → 聊天 → 咖啡 → 计算机 → 计算机 → 计算机
- en: Home → Home → Coffee → Chat → Computer → Coffee → Coffee
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 家里 → 家里 → 咖啡 → 聊天 → 计算机 → 咖啡 → 咖啡
- en: It’s not complicated to estimate the transition matrix from our observations
    — we just count all the transitions from every state and normalize them to a sum
    of 1\. The more observation data we have, the closer our estimation will be to
    the true underlying model.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的观察中估计转移矩阵并不复杂——我们只需计算每个状态的所有转移，并将它们标准化，使其总和为1。我们拥有的观察数据越多，我们的估计就会越接近真实的底层模型。
- en: It’s also worth noting that the Markov property implies stationarity (which
    means, the underlying transition distribution for any state does not change over
    time). Non-stationarity means that there is some hidden factor that influences
    our system dynamics, and this factor is not included in observations. However,
    this contradicts the Markov property, which requires the underlying probability
    distribution to be the same for the same state regardless of the transition history.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，马尔可夫性质意味着平稳性（即任何状态的潜在转移分布随时间变化）。非平稳性意味着有某种隐藏因素影响着我们的系统动态，而这个因素未包含在观察中。然而，这与马尔可夫性质相矛盾，后者要求相同状态下的基础概率分布在任何转移历史中都是相同的。
- en: It’s important to understand the difference between the actual transitions observed
    in an episode and the underlying distribution given in the transition matrix.
    Concrete episodes that we observe are randomly sampled from the distribution of
    the model, so they can differ from episode to episode. However, the probability
    of the concrete transition to be sampled remains the same. If this is not the
    case, Markov chain formalism becomes non-applicable.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是理解我们在一集观察到的实际转移与转移矩阵中给出的潜在分布之间的差异。我们观察到的具体集是从模型的分布中随机抽样得到的，因此它们可能在每一集之间有所不同。然而，具体转移被抽样的概率保持不变。如果不是这样，马尔可夫链形式化就不适用了。
- en: Now we can go further and extend the MP model to make it closer to our RL problems.
    Let’s add rewards to the picture!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以进一步扩展 MP 模型，使其更接近我们的 RL 问题。让我们在图中加入奖励！
- en: Markov reward processes
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 马尔可夫奖励过程
- en: To introduce reward, we need to extend our MP model a bit. First, we need to
    add value to our transition from state to state. We already have probability,
    but probability is being used to capture the dynamics of the system, so now we
    have an extra scalar number without extra burden.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引入奖励，我们需要稍微扩展我们的 MP 模型。首先，我们需要为状态之间的转换添加值。我们已经有了概率，但概率用于捕捉系统的动态，所以现在我们额外增加了一个标量数值，且不会增加额外负担。
- en: Rewards can be represented in various forms. The most general way is to have
    another square matrix, similar to the transition matrix, with a reward given for
    transitioning from state i to state j, which reside in row i and column j.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 奖励可以以多种形式表示。最通用的方式是另有一个方阵，类似于转移矩阵，表示从状态 i 到状态 j 的转换奖励，存储在第 i 行第 j 列。
- en: As mentioned, rewards can be positive or negative, large or small. In some cases,
    this representation is redundant and can be simplified. For example, if a reward
    is given for reaching the state regardless of the origin state, we can keep only
    (state, reward) pairs, which is a more compact representation. However, this is
    applicable only if the reward value depends solely on the target state, which
    is not always the case.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，奖励可以是正数或负数，可以是大或小。在某些情况下，这种表示是多余的，可以简化。例如，如果无论起始状态如何，达到某个状态都会获得奖励，我们可以仅保留（状态，奖励）对，这是一种更紧凑的表示。然而，只有当奖励值仅依赖于目标状态时，这种表示才适用，但这并不总是成立。
- en: The second thing we’re adding to the model is the discount factor γ (Greek letter
    “gamma”), which is a single number from 0 to 1 (inclusive). The meaning of this
    will be explained after the extra characteristics of our MRP have been defined.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加到模型中的第二个内容是折扣因子 γ（希腊字母“gamma”），它是一个介于 0 到 1 之间的数字（包含 0 和 1）。在定义了我们 MRP 的额外特性后，我们会解释它的意义。
- en: As you will remember, we observe a chain of state transitions in an MP. This
    is still the case for a MRP, but for every transition, we have our extra quantity
    — reward. So now, all our observations have a reward value attached to every transition
    of the system.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你会记得的那样，我们在 MP 中观察到的是一系列状态转移。在 MRP 中也是如此，但对于每一个转移，我们都有额外的量——奖励。因此，现在我们所有的观察都有一个与系统每次转移相关的奖励值。
- en: 'For every episode, we define return at the time t as G[t]:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一集，我们定义在时刻 t 的回报为 G[t]：
- en: '![ ∞∑ Gt = Rt+1 + γRt+2 + ⋅⋅⋅ = γkRt+k+1 k=0 ](img/equation1.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![ ∞∑ Gt = Rt+1 + γRt+2 + ⋅⋅⋅ = γkRt+k+1 k=0 ](img/equation1.png)'
- en: The γ in the preceding formula is very important in RL, and we will meet it
    a lot in the subsequent chapters. For now, think about it as a measure of how
    far into the future we look to estimate the future return. The closer its value
    is to 1, the more steps ahead of us we will take into account.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述公式中的 γ 在 RL 中非常重要，我们在接下来的章节中将经常遇到它。目前，可以将它理解为衡量我们预计未来回报时，观察多远未来的一个参数。它的值越接近
    1，我们就越会考虑未来更多的步骤。
- en: Now let’s try to understand what the formula for return means. For every time
    point, we calculate return as a sum of subsequent rewards, but more distant rewards
    are multiplied by the discount factor raised to the power of the number of steps
    we are away from the starting point at t. The discount factor stands for the foresightedness
    of the agent. If γ = 1, then return, G[t], just equals a sum of all subsequent
    rewards and corresponds to the agent that has perfect visibility of any subsequent
    rewards. If γ = 0, G[t] will be just immediate reward without any subsequent state
    and will correspond to absolute short-sightedness.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们试着理解回报公式的含义。对于每个时间点，我们将回报计算为后续奖励的总和，但距离起始点t越远的奖励，会被折扣因子乘以，并且这个折扣因子会根据我们距离起始点的步数的幂次进行调整。折扣因子代表了智能体的远见性。如果
    γ = 1，那么回报G[t]仅仅等于所有后续奖励的总和，代表智能体可以完美预见所有后续奖励。如果 γ = 0，G[t]则只会是立即奖励，没有任何后续状态，代表绝对的短视。
- en: These extreme values are useful only in corner cases, and most of the time,
    γ is set to something in between, such as 0.9 or 0.99\. In this case, we will
    look into future rewards, but not too far. The value of γ = 1 might be applicable
    in situations of short finite episodes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些极端值仅在特殊情况下有用，大多数时候，γ会设置为介于两者之间的某个值，如0.9或0.99。在这种情况下，我们会展望未来的奖励，但不会太远。γ = 1的值可能适用于短期有限的情境。
- en: 'This return quantity is not very useful in practice, as it was defined for
    every specific chain we observed from our MRP, so it can vary widely, even for
    the same state. However, if we go to the extreme and calculate the mathematical
    expectation of return for any state (by averaging a large number of chains), we
    will get a much more practical quantity, which is called the value of the state:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个回报量在实践中不是很有用，因为它是针对我们从马尔可夫奖励过程（MRP）观察到的每一个特定链定义的，因此即使是相同的状态，它也可能有很大差异。然而，如果我们走到极端，计算任何状态的回报的数学期望（通过对大量链求平均），我们将得到一个更实用的量，这就是状态的价值：
- en: '![ ∞∑ Gt = Rt+1 + γRt+2 + ⋅⋅⋅ = γkRt+k+1 k=0 ](img/eq2.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![ ∞∑ Gt = Rt+1 + γRt+2 + ⋅⋅⋅ = γkRt+k+1 k=0 ](img/eq2.png)'
- en: This interpretation is simple—for every state, s, the value, V (s), is the average
    (or expected) return we get by following the Markov reward process.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解释很简单——对于每个状态s，值V(s)是我们通过遵循马尔可夫奖励过程获得的平均（或期望）回报。
- en: 'To represent this theoretical knowledge practically, let’s extend our office
    worker (Dilbert) process with a reward and turn it into a Dilbert reward process
    (DRP). Our reward values will be as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这些理论知识实际应用，让我们扩展我们的办公室工作者（Dilbert）过程，加入奖励并将其转化为Dilbert奖励过程（DRP）。我们的奖励值将如下所示：
- en: 'Home →Home: 1 (as it’s good to be home)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 家庭 → 家庭：1（因为待在家里是好事）
- en: 'Home →Coffee: 1'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 家庭 → 咖啡：1
- en: 'Computer →Computer: 5 (working hard is a good thing)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机 → 计算机：5（努力工作是好事）
- en: 'Computer →Chat: −3 (it’s not good to be distracted)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机 → 聊天：−3（分心不好）
- en: 'Chat →Computer: 2'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天 → 计算机：2
- en: 'Computer →Coffee: 1'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机 → 咖啡：1
- en: 'Coffee →Computer: 3'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咖啡 → 计算机：3
- en: 'Coffee →Cofee: 1'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咖啡 → 咖啡：1
- en: 'Coffee →Chat: 2'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咖啡 → 聊天：2
- en: 'Chat →Coffee: 1'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天 → 咖啡：1
- en: 'Chat →Chat: -1 (long conversations become boring)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天 → 聊天：-1（长时间的对话变得无聊）
- en: A diagram of this is shown in Figure [1.7](#x1-33005r7).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这一图示见于图 [1.7](#x1-33005r7)。
- en: '![pppppppppppp = = = = = = = = = = = = 000000000000.5.3.1.1.2.7.5.2.2.6.2.4
    CCCHrrhooo =r =rrrrrrrrraffmm = = = = = = = = = =tepeeu−2−112531121t 1 3er ](img/B22150_07.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![pppppppppppp = = = = = = = = = = = = 000000000000.5.3.1.1.2.7.5.2.2.6.2.4
    CCCHrrhooo =r =rrrrrrrrraffmm = = = = = = = = = =tepeeu−2−112531121t 1 3er ](img/B22150_07.png)'
- en: 'Figure 1.7: The state transition graph with transition probabilities and rewards'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：带有转移概率和奖励的状态转移图
- en: 'Let’s return to our γ parameter and think about the values of states with different
    values of γ. We will start with a simple case: γ = 0\. How do you calculate the
    values of states here? To answer this question, let’s fix our state to Chat. What
    could the subsequent transition be? The answer is that it depends on chance. According
    to our transition matrix for the Dilbert process, there is a 50% probability that
    the next state will be Chat again, 20% that it will be Coffee, and 30% that it
    will be Computer. When γ = 0, our return is equal only to a value of the next
    immediate state. So, if we want to calculate the value of the Chat state in the
    preceding diagram, then we need to sum all transition values and multiply that
    by their probabilities:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的 γ 参数，思考不同 γ 值下状态的值。我们从一个简单的情况开始：γ = 0。如何计算这里的状态值呢？为了解答这个问题，我们固定状态为
    Chat。那么接下来的转移可能是什么？答案是这取决于概率。根据我们 Dilbert 过程的转移矩阵，下一状态为 Chat 的概率是 50%，为 Coffee
    的概率是 20%，为 Computer 的概率是 30%。当 γ = 0 时，我们的回报只等于下一个即时状态的值。因此，如果我们想计算前面图表中 Chat
    状态的值，我们需要将所有转移值相加，并乘以它们的概率：
- en: '| V (chat) | = | − 1 ⋅ 0.5 + 2 ⋅ 0.3 + 1 ⋅ 0.2 = 0.3 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| V (chat) | = | − 1 ⋅ 0.5 + 2 ⋅ 0.3 + 1 ⋅ 0.2 = 0.3 |'
- en: '| V (coffee) | = | 2 ⋅ 0.7 + 1 ⋅ 0.1 + 3 ⋅ 0.2 = 2.1 |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| V (coffee) | = | 2 ⋅ 0.7 + 1 ⋅ 0.1 + 3 ⋅ 0.2 = 2.1 |'
- en: '| V (home) | = | 1 ⋅ 0.6 + 1 ⋅ 0.4 = 1.0 |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| V (home) | = | 1 ⋅ 0.6 + 1 ⋅ 0.4 = 1.0 |'
- en: '| V (computer) | = | 5 ⋅ 0.5 + (−3) ⋅ 0.1 + 1 ⋅ 0.2 + 2 ⋅ 0.2 = 2.8 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| V (computer) | = | 5 ⋅ 0.5 + (−3) ⋅ 0.1 + 1 ⋅ 0.2 + 2 ⋅ 0.2 = 2.8 |'
- en: So, Computer is the most valuable state to be in (if we care only about immediate
    reward), which is not surprising as Computer →Computer is frequent, has a large
    reward, and the ratio of interruptions is not too high.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，计算机是最有价值的状态（如果我们只关心即时奖励），这并不奇怪，因为计算机 → 计算机是频繁的，且奖励较大，且中断的比例不高。
- en: Now a trickier question — what’s the value when γ = 1? Think about this carefully.
    The answer is that the value is infinite for all states. Our diagram doesn’t contain
    sink states (states without outgoing transitions), and when our discount equals
    1, we care about a potentially infinite number of transitions in the future. As
    you’ve seen in the case of γ = 0, all our values are positive in the short term,
    so the sum of the infinite number of positive values will give us an infinite
    value, regardless of the starting state.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这是一个更棘手的问题——当 γ = 1 时，值是多少？仔细思考一下。答案是，对于所有状态，值是无限的。我们的图表中没有沉没状态（没有外部转移的状态），而当我们的折扣因子等于
    1 时，我们关心的是未来可能的无限次转移。正如你在 γ = 0 的情况下所见，我们的所有值在短期内都是正的，所以无限多个正值的总和将给我们一个无限的值，无论起始状态是什么。
- en: This infinite result shows us one of the reasons to introduce γ into a MRP instead
    of just summing all future rewards. In most cases, the process can have an infinite
    (or large) amount of transitions. As it is not very practical to deal with infinite
    values, we would like to limit the horizon we calculate values for. Gamma with
    a value less than 1 provides such a limitation, and we will discuss this later
    in this book. On the other hand, if you’re dealing with finite-horizon environments
    (for example, the tic-tac-toe game, which is limited by at most nine steps), then
    it will be fine to use γ = 1.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个无限的结果展示了为何在 MRP 中引入 γ 的原因，而不是仅仅将所有未来奖励加总。在大多数情况下，过程可能有无限（或大量）转移。由于处理无限值并不实际，我们希望限制我们计算值的范围。值小于
    1 的 γ 提供了这样的限制，我们将在本书后续部分讨论这一点。另一方面，如果你处理的是有限时域环境（例如井字游戏，最多只有九步），那么使用 γ = 1 是完全可以的。
- en: As another example, there is an important class of environments with only one
    step called the multi-armed bandit MDP. This means that on every step, you need
    to make a selection of one alternative action, which provides you with some reward
    and the episode ends.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个例子，存在一种重要的环境类别，只有一步叫做多臂赌博机 MDP。这意味着在每一步，你需要选择一个替代行为，它会给你一些奖励，然后这一回合结束。
- en: You can learn more about bandit methods in the book Bandit Algorithms by Tor
    Lattimore and Csaba Szepesvari ( [https://tor-lattimore.com/downloads/book/book.pdf](https://tor-lattimore.com/downloads/book/book.pdf)).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Tor Lattimore 和 Csaba Szepesvari 的书《Bandit Algorithms》中了解更多关于赌博算法的方法（[https://tor-lattimore.com/downloads/book/book.pdf](https://tor-lattimore.com/downloads/book/book.pdf)）。
- en: As I already mentioned about the MRP, γ is usually set to a value between 0
    and 1\. However, with such values, it becomes almost impossible to calculate them
    accurately by hand, even for MRPs as small as our Dilbert example, because it
    will require summing hundreds of values. Computers are good at tedious tasks such
    as this, and there are several simple methods that can quickly calculate values
    for MRPs for given transition and reward matrices. We will see and even implement
    one such method in Chapter [5](ch009.xhtml#x1-820005), when we will start looking
    at Q-learning methods.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的MRP，γ通常设置为0到1之间的值。然而，使用这样的值，手动计算几乎变得不可能，即使是像我们的Dilbert示例这样的简单MRP，因为这将需要求和数百个值。计算机擅长处理这类繁琐的任务，并且有几种简单的方法可以快速计算给定转移和奖励矩阵的MRP值。我们将在第[5](ch009.xhtml#x1-820005)章看到并实现其中的一种方法，在这一章我们将开始探讨Q-learning方法。
- en: 'For now, let’s put another layer of complexity around our Markov reward processes
    and introduce the final missing piece: actions.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的马尔科夫奖励过程中再增加一层复杂性，引入最后一个缺失的部分：动作。
- en: Adding actions to MDP
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向MDP中添加动作
- en: You may already have ideas about how to extend our MDP to include actions. Firstly,
    we must add a set of actions (A), which has to be finite. This is our agent’s
    action space. Secondly, we need to condition our transition matrix with actions,
    which basically means that our matrix needs an extra action dimension, which turns
    it into a cuboid of shape |S|×|S|×|A|, where S is an our state space and A is
    an action space.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经有了如何将我们的MDP扩展到包括动作的想法。首先，我们必须添加一组有限的动作（A）。这就是我们的代理的动作空间。其次，我们需要用动作来调整我们的转移矩阵，这基本上意味着我们的矩阵需要额外的动作维度，这使得它变成一个形状为|S|×|S|×|A|的立方体，其中S是我们的状态空间，A是动作空间。
- en: If you remember, in the case of MPs and MRPs, the transition matrix had a square
    form, with the source state in rows and target state in columns. So, every row,
    i, contained a list of probabilities to jump to every state, as shown in Figure [1.8](#x1-34002r8).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得，在MPs和MRPs的情况下，转移矩阵是方阵，源状态在行中，目标状态在列中。因此，每一行i包含跳转到每个状态的概率列表，如图[1.8](#x1-34002r8)所示。
- en: '![Probability for i → j pSTioa,jurrgceettrststaaanttseeitiijon ](img/B22150_08.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![i → j 转移的概率](img/B22150_08.png)'
- en: 'Figure 1.8: The transition matrix for the Markov process'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：马尔科夫过程的转移矩阵
- en: 'In case of an MDP, the agent no longer passively observes state transitions,
    but can actively choose an action to take at every state transition. So, for every
    source state, we don’t have a list of numbers, but we have a matrix, where the
    depth dimension contains actions that the agent can take, and the other dimension
    is what the target state system will jump to after actions are performed by the
    agent. The following diagram shows our new transition table, which became a cuboid
    with the source state as the height dimension (indexed by i), the target state
    as the width (j), and the action the agent can take as the depth (k) of the transition
    table:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在MDP的情况下，代理不再是被动地观察状态转移，而是可以在每次状态转移时主动选择一个动作。因此，对于每个源状态，我们不再只有一个数字列表，而是有一个矩阵，其中深度维度包含代理可以采取的动作，而另一个维度是代理执行动作后目标状态系统将跳转到的状态。以下图表展示了我们新的转移表，它变成了一个立方体，其中源状态是高度维度（由i索引），目标状态是宽度（j），而代理可以采取的动作是深度（k）维度：
- en: '![Probability for i → j STAoacurtrgigceoietnveststknaa attceetiijon k ](img/B22150_09.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![i → j 转移的概率 STAoacurtrgigceoietnveststknaa attceetiijon k](img/B22150_09.png)'
- en: 'Figure 1.9: The transition probabilities for the MDP'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：MDP的转移概率
- en: So, in general, by choosing an action, the agent can affect the probabilities
    of the target states, which is a useful ability.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通常通过选择一个动作，代理可以影响目标状态的概率，这是一个有用的能力。
- en: To give you an idea of why we need so many complications, let’s imagine a small
    robot that lives in a 3 × 3 grid and can execute the actions turn left, turn right,
    and go forward. The state of the world is the robot’s position plus orientation
    (up, down, left, and right), which gives us 3 × 3 × 4 = 36 states (the robot can
    be at any location in any orientation).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你理解为什么我们需要这么多复杂性，假设有一个小型机器人，生活在一个3×3的网格中，可以执行左转、右转和前进这些动作。世界的状态是机器人的位置加上方向（上、下、左、右），这给我们36个状态（机器人可以在任何位置并处于任何方向），即3×3×4
    = 36个状态。
- en: Also, imagine that the robot has imperfect motors (which is frequently the case
    in the real world), and when it executes turn left or turn right, there is a 90%
    chance that the desired turn happens, but sometimes, with a 10% probability, the
    wheel slips and the robot’s position stays the same. The same happens with go
    forward — in 90% of cases it works, but for the rest (10%) the robot stays at
    the same position.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请想象机器人具有不完美的电机（在现实世界中经常发生），当它执行左转或右转时，有90%的概率会发生预期的转向，但有时（10%的概率），车轮会打滑，机器人的位置保持不变。前进时也是一样
    —— 在90%的情况下会成功，但剩下的10%中，机器人会停留在原地。
- en: In Figure [1.10](#x1-34006r10), a small part of a transition diagram is shown,
    displaying the possible transitions from the state (1, 1), up, when the robot
    is in the center of the grid and facing up. If the robot tries to move forward,
    there is a 90% chance that it will end up in the state (0, 1), up, but there is
    a 10% probability that the wheels will slip and the target position will remain
    (1, 1), up.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在图[1.10](#x1-34006r10)中，显示了转移图的一个小部分，显示了从状态(1, 1)向上的机器人可能的转移。如果机器人试图向前移动，有90%的概率它会最终处于状态(0,
    1)向上，但有10%的概率车轮会打滑，目标位置将保持为(1, 1)向上。
- en: '![Robot at cell (1,1) 012012 facing up ](img/B22150_08.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![机器人位于单元格 (1,1) 012012 向上 ](img/B22150_08.png)'
- en: 'Figure 1.10: A grid world environment'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：一个网格世界环境
- en: To properly capture all these details about the environment and possible reactions
    to the agent’s actions, the general MDP has a 3D transition matrix with the dimensions
    source state, action, and target state.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准确捕捉关于环境的所有细节以及对代理动作可能反应的描述，一般的MDP具有一个三维过渡矩阵，其维度为源状态、动作和目标状态。
- en: 'Finally, to turn our MRP into an MDP, we need to add actions to our reward
    matrix in the same way that we did with the transition matrix. Our reward matrix
    will depend not only on the state but also on the action. In other words, the
    reward the agent obtains will now depend not only on the state it ends up in but
    also on the action that leads to this state. Now, with a formally defined MDP,
    we’re finally ready to cover the most important thing for MDPs and RL: policy.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了将我们的MRP转换为MDP，我们需要以与过渡矩阵相同的方式向我们的奖励矩阵添加动作。我们的奖励矩阵将不仅取决于状态，还取决于动作。换句话说，代理获得的奖励现在不仅取决于它最终处于的状态，还取决于导致该状态的动作。现在，有了一个正式定义的MDP，我们终于准备好探讨MDP和RL最重要的事情：策略。
- en: Policy
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略
- en: 'The simple definition of policy is that it is some set of rules that defines
    the agent’s behavior. Even for fairly simple environments, we can have a variety
    of policies. For example, in the preceding example with the robot in the grid
    world, the agent can have different policies, which will lead to different sets
    of visited states. For example, the robot can perform the following actions:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 策略的简单定义是一组定义代理行为的规则。即使对于相当简单的环境，我们也可以有多种策略。例如，在前述的网格世界中，代理可以有不同的策略，这将导致不同的访问状态集合。例如，机器人可以执行以下操作：
- en: Blindly move forward regardless of anything
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无视一切盲目向前移动
- en: Try to go around obstacles by checking whether that previous forward action
    failed
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检查之前的前进动作是否失败来试图绕过障碍物
- en: Funnily spin around by always turning right to entertain its creator
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑稽地绕圈转动，总是向右转以取悦其创造者
- en: Choose an action randomly regardless of position and orientation, modeling a
    drunk robot in the grid world scenario
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个动作是随机的，不考虑位置和方向，模拟一个在网格世界场景中的醉酒机器人。
- en: You may remember that the main objective of the agent in RL is to gather as
    much return as possible. So, again, different policies can give us different amounts
    of return, which makes it important to find a good policy. This is why the notion
    of policy is important.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能记得，RL代理的主要目标是尽可能收集更多回报。因此，不同的策略可以带来不同数量的回报，这使得找到一个好策略变得很重要。这就是策略的重要概念。
- en: 'Formally, policy is defined as the probability distribution over actions for
    every possible state:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 形式上，策略被定义为每个可能状态下的动作概率分布：
- en: '![π (a |s) = P[At = a|St = s] ](img/eq3.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![π (a |s) = P[At = a|St = s] ](img/eq3.png)'
- en: This is defined as probability and not as a concrete action to introduce randomness
    into an agent’s behavior. In section 3 of the book, we will talk about why this
    is important and useful. Deterministic policy is a special case of probabilistics
    with the needed action having 1 as its probability.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这被定义为概率，而不是具体的动作，以引入随机性到代理的行为中。在本书的第3节中，我们将讨论为什么这既重要又有用。确定性策略是概率策略的一种特殊情况，所需的动作其概率为1。
- en: Another useful notion is that if our policy is fixed and not changing during
    training (i.e., when the policy always returns the same actions for the same states),
    then our MDP becomes a MRP, as we can reduce the transition and reward matrices
    with a policy’s probabilities and get rid of the action dimensions.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的概念是，如果我们的策略在训练过程中是固定的，并且在训练期间没有变化（即，当策略对相同的状态总是返回相同的动作时），那么我们的MDP就变成了MRP，因为我们可以通过策略的概率简化转移矩阵和奖励矩阵，从而去掉动作维度。
- en: Congratulations on getting to this stage! This chapter was challenging, but
    it was important for understanding subsequent practical material. After two more
    introductory chapters about OpenAI Gym and deep learning, we will finally start
    tackling this question — how do we teach agents to solve practical tasks?
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你达到了这一阶段！本章虽然具有挑战性，但对于理解接下来的实践内容非常重要。在关于OpenAI Gym和深度学习的两章入门内容之后，我们将最终开始解决这个问题——我们如何教代理解决实际任务？
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you started your journey into the RL world by learning what
    makes RL special and how it relates to the supervised and unsupervised learning
    paradigms. We then learned about the basic RL formalisms and how they interact
    with each other, after which we covered MPs, MRPs, and MDPs. This knowledge will
    be the foundation for the material that we will cover in the rest of the book.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你通过学习强化学习（RL）为何与众不同以及它如何与监督学习和无监督学习范式相关，开始了你的RL世界之旅。接着我们学习了基本的RL形式化方法以及它们之间的相互作用，之后我们介绍了MPs、MRPs和MDPs。这些知识将为本书接下来部分内容打下基础。
- en: In the next chapter, we will move away from the formal theory to the practice
    of RL. We will cover the setup required and libraries, and then you will write
    your first agent.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从强化学习的形式化理论转向实际应用。我们将介绍所需的设置和库，然后你将编写你的第一个代理。
- en: Join our community on Discord
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: Read this book alongside other users, Deep Learning experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more. Scan the QR code or visit the link
    to join the community. [https://packt.link/rl](https://packt.link/rl)
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他读者、深度学习专家以及作者本人一起阅读本书。提出问题，为其他读者提供解决方案，通过“问我任何问题”环节与作者互动，还有更多内容。扫描二维码或访问链接加入社区。[https://packt.link/rl](https://packt.link/rl)
- en: '![PIC](img/file1.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/file1.png)'
