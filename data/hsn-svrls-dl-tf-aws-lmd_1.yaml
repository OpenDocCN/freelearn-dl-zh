- en: Beginning with Serverless Computing and AWS Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从无服务器计算和AWS Lambda开始
- en: This book will encourage you to use your own custom-trained models with AWS
    Lambda and work with a simplified serverless computing approach. Later on, you
    will implement sample projects that signify the use of AWS Lambda for serving
    TensorFlow models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将鼓励你使用自定义训练的模型与AWS Lambda进行配合，并使用简化的无服务器计算方法。稍后，你将实现一些示例项目，展示使用AWS Lambda为TensorFlow模型提供服务的方式。
- en: In this chapter, we will discuss serverless deep learning and you will explore
    why serverless is so popular and the advantages of deploying applications using
    serverless. Also, you will look into the data science process and how serverless
    can enable an easy and convenient way to deploy deep learning applications. You
    will also briefly look into the sample projects that we will make in the forthcoming
    chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论无服务器深度学习，你将探索为什么无服务器如此受欢迎，以及使用无服务器部署应用程序的优势。同时，你还将了解数据科学流程，以及无服务器如何提供一种简便快捷的方式来部署深度学习应用程序。你还将简要了解我们将在后续章节中制作的示例项目。
- en: You will also get to learn about the workings of the AWS implementation, including
    the traditional and serverless ways of deploying deep learning applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习AWS实现的工作原理，包括传统和无服务器的深度学习应用程序部署方式。
- en: 'In particular, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，我们将涵盖以下主题：
- en: What is serverless computing?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是无服务器计算？
- en: Why serverless deep learning?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择无服务器深度学习？
- en: AWS Lambda function
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda函数
- en: Sample projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例项目
- en: What is serverless computing?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是无服务器计算？
- en: Serverless computing is a type of architecture for which the code execution
    is managed by a cloud provider, which means that the developers do not have to
    worry about managing, provisioning and maintaining servers when deploying the
    code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算是一种架构，其代码执行由云提供商管理，这意味着开发者在部署代码时无需担心管理、配置和维护服务器。
- en: 'Let''s discuss the possible ways of application deployment:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论应用程序部署的可能方式：
- en: '**On-premise** deployment, let''s you control the entire infrastructure including
    the hardware. In other words, it means that the application runs on our machine,
    which you can access physically.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地**部署让你控制整个基础设施，包括硬件。换句话说，它意味着应用程序运行在我们的机器上，你可以物理访问。'
- en: Then, you have **Infrastructure as a Service** (**IaaS**), which means that
    you can't access the servers physically, but you control everything that is happening
    in it.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，你有**基础设施即服务**（**IaaS**），这意味着你无法物理访问服务器，但你控制其中发生的所有事情。
- en: Next, you have **Platform as a Service** (**PaaS**), where you don't control
    the operating system or runtime, but you can control our code and container.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，你有**平台即服务**（**PaaS**），在这种模式下，你不能控制操作系统或运行时，但你可以控制我们的代码和容器。
- en: Finally, you have **Function as a Service** (**FaaS**) which is a serverless
    model, and the only thing which you control is the code itself. It can significantly
    enable us to work on different applications.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，你有**功能即服务**（**FaaS**），这是一种无服务器模型，唯一能控制的就是代码本身。它可以大大促进我们在不同应用程序上的工作。
- en: Why serverless deep learning?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择无服务器深度学习？
- en: Let's understand why the severless infrastructure is extremely useful for deploying
    deep learning models in a data science process.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解为什么无服务器基础设施在数据科学流程中部署深度学习模型极为有用。
- en: 'The usual data science process looks like:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的数据科学流程如下：
- en: 'Business understanding: You need to understand the business needs, which includes
    defining the objectives and the possible data sources.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业理解：你需要理解业务需求，包括定义目标和可能的数据源。
- en: 'Data acquisition: You need to look into the data you are planning to use, explore
    it, and try to find correlations and gaps.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据获取：你需要查看你打算使用的数据，探索它，尝试找到相关性和空白。
- en: 'Modeling: You start with the selection of most promising features, building
    the model, and training it.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建模：你从选择最有前景的特征开始，构建模型并进行训练。
- en: 'Deployment: You need to operationalize the model and deploy it.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署：你需要将模型投入生产并部署。
- en: 'Customer acceptance: You can provide the result to the customer and receive
    feedback.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户接受度：你可以将结果提供给客户并接收反馈。
- en: 'The preceding points are represented in the following diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的要点通过以下图表呈现：
- en: '![](img/6ec15de7-70ec-4696-8074-e8eaaa992a7f.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ec15de7-70ec-4696-8074-e8eaaa992a7f.png)'
- en: Based on the feedback received from the customer, you can update the model and
    change the way you deploy it. The deployment and customer acceptance phases are
    iterative in nature. It means that you will have to get feedback from the user
    as early as possible. To achieve this, our infrastructure for the deployment has
    to be both simple and scalable at the same time, which can be done with the help
    of serverless infrastructure used for deploying the deep learning models.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据从客户那里收到的反馈，你可以更新模型并改变部署方式。部署和客户接受阶段具有迭代性质。这意味着你需要尽早从用户那里获得反馈。为此，我们的部署基础设施必须同时既简单又具备可扩展性，这可以通过无服务器基础设施来完成，从而用于部署深度学习模型。
- en: You need to be aware that our deep learning infrastructure has to be integratable
    with our existing infrastructure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要意识到，我们的深度学习基础设施必须能够与现有基础设施进行集成。
- en: Where serverless deep learning works and where it doesn't work?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器深度学习适用于哪些场景，哪些场景不适用？
- en: Serverless deep learning deployment is very scalable, simple, and cheap to start.
    The downsides of it are the time limitations, CPU limitations, and memory limitations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器深度学习部署具有很高的可扩展性、简单性，并且启动成本低。它的缺点是时间限制、CPU限制和内存限制。
- en: Where serverless deep learning works?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器深度学习适用于哪些场景？
- en: 'In the following section, you will start by reiterating the advantages of serverless
    deep learning deployment:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，你将从重申无服务器深度学习部署的优点开始：
- en: It is extremely useful for your project. If you train your model and want to
    show it to the world, serverless deep learning will allow you to do so without
    complicated deployment and any upfront costs. AWS also provides free usage per
    month. It means that a number of invocations in AWS Lambda will be completely
    free. For example, in the image recognition project, which we will discuss in
    the following chapters, the number of runs will be about 100,000 times.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于你的项目来说，它非常有用。如果你训练了模型并希望向世界展示，无服务器深度学习将让你在没有复杂部署和前期成本的情况下做到这一点。AWS还提供每月免费使用。这意味着在AWS
    Lambda中的多个调用将完全免费。例如，在我们将在后续章节讨论的图像识别项目中，运行次数大约为10万次。
- en: Serverless deep learning is great for early-stage startups that want to test
    their business hypotheses as early as possible. Simplicity and scalability allows
    small teams to start without expertise in AWS. AWS Lambda allows you to calculate
    the cost per customer in an easy way and to understand your startup cost per user.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器深度学习非常适合那些希望尽早验证业务假设的早期创业公司。简单性和可扩展性使得小团队可以在没有AWS专业知识的情况下开始。AWS Lambda让你能够轻松计算每个客户的成本，并了解每个用户的创业成本。
- en: Serverless deep learning is extremely convenient if you already have an existing
    infrastructure and want to optimize your costs. Serverless architecture will be
    a lot simpler and cheaper than the cluster one and it will be easier to maintain.
    Significantly, it reduces costs since you don't need to retain the unused servers.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器深度学习在你已有现有基础设施并希望优化成本时非常方便。与集群架构相比，无服务器架构将更简单、更便宜，并且更易于维护。显著的是，它能降低成本，因为你不需要保留未使用的服务器。
- en: Serverless deep learning would be extremely useful for cases where you have
    extremely high loads. For example, a lot of companies struggle to maintain the
    system in cases where there are 1 million requests during the first minute and
    zero requests in the next minute. The cluster will either be too large or it will
    take a certain time to scale. Serverless, on the other hand, has unmatched scalability,
    which allows the system to work on high load without rolling.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器深度学习对于负载非常高的场景非常有用。例如，许多公司在遇到第一分钟有100万次请求，而下一分钟没有请求的情况下，难以维护系统。集群要么过大，要么需要一定时间才能扩展。而无服务器架构具有无与伦比的可扩展性，可以让系统在高负载下运行而不会崩溃。
- en: Where serverless deep learning doesn't work?
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器深度学习不适用于哪些场景？
- en: 'Deep learning will not work in the following situations:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下情况下，深度学习将无法工作：
- en: If one of the main features of your system is to provide a real-time response
    that is a very complex model; for example, if it is the part of an interaction
    between your user and the system, then the serverless architecture may not be
    enough for you. AWS Lambda has a cold start delay and the delay for the unloading
    and loading of the model into the memory. It does work fast, but it may take more
    than several seconds to run. Speed highly depends on the size and complexity of
    the model, so this is something you have to test beforehand.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的系统的主要特点之一是提供实时响应，而且这是一个非常复杂的模型；例如，如果它是用户与系统之间交互的一部分，那么无服务器架构可能不足以满足你的需求。AWS
    Lambda 有冷启动延迟以及将模型卸载和加载到内存中的延迟。它确实运行得很快，但可能需要几秒钟的时间。速度高度依赖于模型的大小和复杂性，因此这是你需要事先进行测试的部分。
- en: Serverless deep learning may fail if your model utilizes a lot of data. AWS
    Lambda has certain limitations, such as three gigabytes for run and half a gigabyte
    for the hard disk, which means you either have to optimize your code in terms
    of memory usage or use the cluster.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的模型使用大量数据，无服务器深度学习可能会失败。AWS Lambda 有一些限制，比如运行时为 3 GB 和硬盘为 0.5 GB，这意味着你要么需要优化代码的内存使用，要么使用集群。
- en: If your model has requirements on the CPU power or number of cores, then it
    may not be able to start on Lambda. There are no certain limits that could predict
    whether your model will or will not be able to start on AWS Lambda, so it is something
    which you need to test.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的模型对 CPU 性能或核心数量有要求，那么它可能无法在 Lambda 上启动。没有明确的限制可以预测你的模型是否能够在 AWS Lambda 上启动，因此这需要进行测试。
- en: An extremely complex model may not work well on serverless infrastructure. By
    complex, we mean larger than 1 or 2 gigabytes. It would take more time to download
    it from S3, and Lambda may not have enough memory to load it.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个极为复杂的模型可能无法在无服务器基础设施上良好运行。所谓复杂的模型，是指超过 1 或 2 GB 的模型。它需要更长的时间从 S3 下载，且 Lambda
    可能没有足够的内存来加载它。
- en: These use cases mentioned above have shown us the landscape for the uses of
    serverless learning and it will help us to make a decision as to whether to use
    it or not. Finally, in a lot of cases, there isn't a definitive answer and it
    makes sense to continue testing your model on serverless.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述用例向我们展示了无服务器学习的应用场景，它将帮助我们决定是否使用它。最后，在很多情况下，并没有一个明确的答案，继续在无服务器环境中测试你的模型是有意义的。
- en: Now we'll discuss the Lambda function as a serverless model.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来讨论 Lambda 函数作为无服务器模型的情况。
- en: Lambda function – AWS implementation of FaaS
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda 函数 – AWS 实现的 FaaS
- en: In this section, we will discuss the workings of the AWS implementation of FaaS. The
    Lambda function is an AWS implementation of FaaS. The AWS service keeps Lambda
    configuration, which is basically code, libraries, and parameters within the service. Once
    it receives the trigger, it takes the container from the pool and puts the configuration
    inside the container. Then, it runs the code inside the container with the data
    from the event trigger. Once the container produces results, the service returns
    it in the Response.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 AWS 实现的 FaaS 的工作原理。Lambda 函数是 AWS 实现的 FaaS。AWS 服务会保存 Lambda 配置，基本上包括代码、库和服务内的参数。一旦接收到触发信号，AWS
    会从池中提取容器，并将配置放入容器中。然后，它会用事件触发的数据在容器内运行代码。一旦容器生成结果，服务会将其返回给响应。
- en: 'The following diagram is a representation of the workings of the Lambda function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了 Lambda 函数的工作原理：
- en: '![](img/79b19130-55a3-4ec6-8f7b-bdac02657b00.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79b19130-55a3-4ec6-8f7b-bdac02657b00.png)'
- en: Lambda scales automatically for up to 10,000 concurrent executions. Also, Lambda
    pricing is a pay per use service, so you would only have to pay for each round
    of Lambda that you use and you don't have to pay when it doesn't run.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 可以自动扩展，支持最多 10,000 个并发执行。此外，Lambda 定价是按使用量计费的，因此你只需为每次 Lambda 调用付费，当它不运行时，你无需付费。
- en: 'The Lambda configuration consists of the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 配置包括以下内容：
- en: '**Code**: This is what you want to run within the function. The code needs
    to have an explicit declaration of the function, which you want for the service
    to run.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**：这就是你想要在函数中运行的内容。代码需要明确声明你希望服务运行的函数。'
- en: '**Libraries**: These enable us to run more complicated processes. You will
    need to keep them inside the same package as the code itself.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库**：这些库使我们能够运行更复杂的流程。你需要将它们与代码本身放在同一个包内。'
- en: '**Configurations**: These are various parameters that dictate how Lambda works.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：这些是决定Lambda工作方式的各种参数。'
- en: 'The main parameters are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 主要参数如下：
- en: The relational memory and time out
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系内存和超时
- en: The runtime (for example, Python or node)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时（例如，Python或Node）
- en: Triggers, which we will describe in the next section
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器，我们将在下一节中描述
- en: IAM role, which provides Lambda access to other interval services
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM角色，提供Lambda访问其他内部服务的权限
- en: Environmental parameters, which allow us to customize the input parameter to
    our code
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境参数，允许我们自定义代码的输入参数
- en: Lambda triggers
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda触发器
- en: 'There are various AWS services that can act as a trigger for AWS Lambda, they
    are:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多AWS服务可以作为AWS Lambda的触发器，它们是：
- en: '**DynamoDB**: This enables us to start the Lambda function on each new entry
    to the database'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DynamoDB**：这使我们能够在每次数据库中新条目时启动Lambda函数'
- en: '**Amazon S3**: This helps the Lambda function start files in the bucket'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon S3**：这有助于Lambda函数启动存储桶中的文件'
- en: '**CloudWatch**: This enables us to run Lambda functions according to the shadow
    (for example, each minute, each day, or only at noon each Thursday)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudWatch**：这使我们能够根据时间表（例如，每分钟，每天，或每周四中午）运行Lambda函数'
- en: '**Lex**: This starts by looking at what the usual data science process looks
    like'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lex**：这通过查看常见的数据科学过程来开始'
- en: '**Kinesis, SQS, and SNS**: These enable us to start the Lambda function on
    each object in the event stream'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kinesis、SQS 和 SNS**：这些使我们能够在事件流中的每个对象上启动Lambda函数'
- en: There are a lot of different triggers, which means you can bind Lambda with
    a lot of different services.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多不同的触发器，这意味着你可以将Lambda绑定到许多不同的服务。
- en: Why deep learning on AWS Lambda?
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么在AWS Lambda上进行深度学习？
- en: 'Here, you will see the advantages of AWS Lambda :'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你将看到AWS Lambda的优势：
- en: Coding on an AWS Lambda is very easy. You will just need the package code and
    libraries, not the Docker containers. It enables you to start early and deploy
    the same code, which you would run locally. This is therefore perfect for early
    stage projects.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS Lambda上编码非常简单。你只需要代码包和库，而不需要Docker容器。它使你能够提前开始，并部署与本地运行相同的代码。因此，这对于早期阶段的项目来说非常合适。
- en: AWS Lambda is extremely scalable and, more importantly, you don't have to manage
    the scalability or write separate logic for it because your data science application
    will be able to easily process a large number of tasks or work with multiple users.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda具有极高的可扩展性，更重要的是，你不必管理可扩展性或为其编写单独的逻辑，因为你的数据科学应用可以轻松处理大量任务或与多个用户进行协作。
- en: AWS Lambda is priced conveniently. You only need to pay for what you're actually
    using and the price itself is very affordable. For example, for the image recognition
    model, the cost will be $1 for 20,000 to 30,000 runs.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda的定价非常合理。你只需为实际使用的部分付费，且价格非常实惠。例如，对于图像识别模型，成本为每20,000至30,000次运行1美元。
- en: In the next section you will know the difference between traditional and serverless
    architecture using Lamda.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节，你将了解使用Lambda的传统架构和无服务器架构的区别。
- en: Traditional versus Serverless architecture using Lambda
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统架构与使用Lambda的无服务器架构
- en: 'Let''s look at the difference between traditional and serverless architecture.
    The following diagram represents the deep learning API through traditional architecture:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下传统架构和无服务器架构之间的区别。以下图示表示了通过传统架构的深度学习API：
- en: '![](img/068b50de-a0b5-46b9-955a-a1ee4b2bdcb8.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/068b50de-a0b5-46b9-955a-a1ee4b2bdcb8.png)'
- en: In the above traditional architecture, you will not only have to handle the
    cluster itself, but you will also have to handle all the balancing of API requests.
    Also, you have to manage the Docker container with the code and libraries and
    find a way to deploy it using the container registry.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的传统架构中，你不仅需要处理集群本身，还需要处理所有API请求的负载均衡。此外，你还需要管理带有代码和库的Docker容器，并找到使用容器注册表部署它的方法。
- en: You need to have extensive knowledge of AWS to understand this architecture.
    Although it is not very difficult, it can be a real issue to begin with. You will
    need to keep in mind that the AWS architecture for deep learning will have static
    costs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要对AWS有广泛的了解才能理解这个架构。虽然它不是特别困难，但对于初学者来说确实可能是个问题。你需要记住，AWS的深度学习架构将有固定的成本。
- en: 'Let''s discuss the serverless implementations of the above application. The
    following diagram represents the architecture for deep learning using Lambda:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下上述应用程序的无服务器实现。以下图示表示了使用Lambda进行深度学习的架构：
- en: '![](img/b379b00d-e659-489b-86f7-f9fe4516088f.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b379b00d-e659-489b-86f7-f9fe4516088f.png)'
- en: In the preceding diagram, you can see that it looks a lot easier than traditional
    architecture. you don't need to manage node balance scalability or containers—you
    just need to put in your coated libraries and Lambda manages everything else.
    Also, you can make a number of different prototypes with it and you will only
    need to pay for invocations. This makes Lambda the perfect way for making your
    deep learning model available to users. In the next section, you briefly be introduced
    to the projects that you will develop in this book.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，你可以看到它看起来比传统架构简单得多。你无需管理节点的负载均衡扩展性或容器——你只需放入你的代码库，Lambda会管理其他所有事项。而且，你可以使用它制作多个不同的原型，你只需为调用付费。这使得Lambda成为将深度学习模型提供给用户的完美方式。在接下来的章节中，你将简要了解你将在本书中开发的项目。
- en: Sample projects
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例项目
- en: 'In this section, you will cover projects, which you will develop during the
    course of this book. you will create three projects:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将涵盖在本书过程中开发的项目。你将创建三个项目：
- en: Deep learning API
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习API
- en: Deep learning batch processing
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度学习批处理
- en: Serverless deep learning workflow
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器深度学习工作流
- en: Deep learning API
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习API
- en: The deep learning API project provides a great hands-on experience since you
    are able to see results immediately from your browser. You will start with the
    deep learning API for image recognition. Image recognition is one of the tasks
    where deep learning shows incredible results, which are impossible to implement
    using any other approach. you will be using a contemporary, publicly available
    pre-trained inception model, which is version free. This project will also show
    you how easy it is to take an open source model and create an API interface on
    it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习API项目提供了很好的实践体验，因为你可以直接从浏览器看到结果。你将从用于图像识别的深度学习API开始。图像识别是深度学习在其中展示出令人难以置信的结果的任务之一，这些结果无法通过其他任何方法实现。你将使用一个现代的、公开可用的预训练Inception模型，它是版本独立的。这个项目还将向你展示如何轻松地将开源模型创建一个API接口。
- en: Deep learning batch processing
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习批处理
- en: In the deep learning batch processing project, you will take a closer look at
    how a lot of companies run deep learning applications nowadays. In this project,
    you will build deep learning batch processing for image recognition. It will show
    us how high Lambda scalability allows us to process thousands of prediction drops
    at the same time.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在深度学习批处理项目中，你将深入了解许多公司如何运行深度学习应用程序。这个项目中，你将构建用于图像识别的深度学习批处理。它将向我们展示高Lambda可扩展性如何让我们同时处理成千上万的预测任务。
- en: Serverless deep learning workflow
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器深度学习工作流
- en: In the serverless deep learning workflow project, you will highlight the patterns
    of deep learning models on the serverless infrastructure. You will make a serverless
    deep learning workflow for image recognition. This project will show you how you
    can use contemporary deployment techniques using AWS step functions. You will
    also learn how you can conduct A/B testing of the model during deployment, error
    handling, and a multistep process. This project will help you to understand the
    possible applications of serverless deployment and how to apply this knowledge
    to either your personal project or within your company.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在无服务器深度学习工作流项目中，你将重点展示深度学习模型在无服务器架构上的模式。你将为图像识别制作一个无服务器深度学习工作流。该项目将向你展示如何使用AWS
    Step Functions进行现代化的部署技术。你还将学习如何在部署过程中进行A/B测试、错误处理以及多步骤过程。这个项目将帮助你理解无服务器部署的潜在应用，并教你如何将这些知识应用到个人项目或公司项目中。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you were introduced to the serverless functions, the AWS implementation,
    and the services. You looked at the Lambda function, which is an AWS implementation
    of FaaS. You also covered the workings of the AWS implementation of FaaS. Later,
    you understood why the serverless infrastructure is extremely useful for deploying
    deep learning models and the challenges you might face during its deployment.
    You also compared the traditional and serverless ways of deploying deep learning
    applications. You looked into the possible scenarios where the serverless deep
    learning works and where it doesn't work. Finally, you covered the various example
    projects that you will be learning about during the course of this book.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了无服务器函数、AWS 实现及其服务。你学习了 Lambda 函数，这是 AWS 实现的 FaaS。你还了解了 AWS 实现的 FaaS
    的工作原理。之后，你理解了为什么无服务器基础设施在部署深度学习模型时极其有用，以及在部署过程中可能面临的挑战。你还比较了传统方式和无服务器方式在部署深度学习应用时的差异。你研究了无服务器深度学习的适用场景以及不适用场景。最后，你了解了本书中将要学习的各种示例项目。
- en: In the next chapter, you will learn how to work with AWS Lambda and its deployment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 AWS Lambda 及其部署。
