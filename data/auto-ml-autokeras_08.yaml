- en: '*Chapter 6*: Working with Structured Data Using AutoKeras'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第六章*：使用AutoKeras处理结构化数据'
- en: In this chapter, we will focus on using AutoKeras to work with structured data,
    also known as tabular data. We will learn how to explore this type of dataset
    and what techniques to apply to solve problems based on this data source.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍如何使用AutoKeras处理结构化数据，也称为表格数据。我们将学习如何探索这种类型的数据集，并应用哪些技术来解决基于这种数据源的问题。
- en: Once you've completed this chapter, you will be able to explore a structured
    dataset, transform it, and use it as a data source for specific models, as well
    as create your own classification and regression models to solve tasks based on
    structured data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将能够探索一个结构化数据集，转换它，并将其作为特定模型的数据源，此外还能够创建你自己的分类和回归模型来解决基于结构化数据的任务。
- en: 'Specifically, in this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将具体涵盖以下主题：
- en: Understanding structured data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解结构化数据
- en: Working with structured data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理结构化数据
- en: Creating a structured data classifier to predict Titanic survivors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个结构化数据分类器来预测泰坦尼克号生还者
- en: Creating a structured data regressor to predict Boston house prices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个结构化数据回归器来预测波士顿房价
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the coding examples in this book are available as Jupyter notebooks that
    can be downloaded from this book''s GitHub repository: [https://colab.research.google.com/github/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb](https://colab.research.google.com/github/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有编码示例都可以作为Jupyter笔记本下载，下载地址为本书GitHub仓库：[https://colab.research.google.com/github/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb](https://colab.research.google.com/github/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb)。
- en: Since code cells can be executed, each notebook can be self-installed, so you
    can add a code snippet with the requirements you need. For this reason, at the
    beginning of each notebook, there is a code cell for environment setup, which
    installs AutoKeras and its dependencies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于代码单元格可以执行，每个笔记本都可以自我安装，因此你可以添加你需要的代码片段来满足需求。因此，在每个笔记本的开头，都会有一个用于环境设置的代码单元格，用于安装AutoKeras及其依赖项。
- en: 'So, to run the coding examples in this book, you only need a computer with
    Ubuntu Linux as your OS and to install the respective Jupyter notebook with the
    following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要运行本书中的编码示例，你只需要一台操作系统为Ubuntu Linux的计算机，并使用以下代码安装相应的Jupyter笔记本：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Alternatively, you can also run these notebooks using Google Colaboratory. In
    that case, you will only need a web browser. For further details, see the *AutoKeras
    with Google Colaboratory* section of [*Chapter 2*](B16953_02_Final_PG_ePub.xhtml#_idTextAnchor029),
    *Getting Started with AutoKeras*. Furthermore, in the *Installing AutoKeras* section
    of that chapter, you will find other installation options.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以使用Google Colaboratory来运行这些笔记本。在这种情况下，你只需要一个Web浏览器。有关更多详细信息，请参阅[*第2章*](B16953_02_Final_PG_ePub.xhtml#_idTextAnchor029)中关于*使用Google
    Colaboratory的AutoKeras*部分，*开始使用AutoKeras*。此外，在该章节的*安装AutoKeras*部分，你将找到其他安装选项。
- en: Understanding structured data
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解结构化数据
- en: 'Structured data is basically tabular data; that is, data represented by rows
    and columns of a database. These tables contain two types of structured data,
    as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数据基本上就是表格数据；也就是说，由数据库中的行和列表示的数据。这些表格包含以下两种类型的结构化数据：
- en: '**Numerical data**: This is data that is expressed on a numerical scale. Furthermore,
    it is represented in two ways, as follows:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值数据**：这是在数值尺度上表示的数据。此外，它有两种表示方式，如下所示：'
- en: 'a. **Continuous**: Data that can take any value in an interval, such as temperature,
    speed, height, and so on. For example, a person''s height could be any value (within
    the range of human heights), not just certain fixed heights.'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. **连续型**：可以在一个区间内取任何值的数据，例如温度、速度、身高等。例如，一个人的身高可以是任何值（在人类身高范围内），而不仅仅是某些固定的身高。
- en: 'b. **Discrete**: Data that can take only non-divisible integer values, such
    as counters. Examples include the amount of money in a bank account, the population
    of a country, and so on.'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. **离散型**：只能取非可分整数值的数据，例如计数器。例子包括银行账户中的钱数、一个国家的人口等。
- en: '**Categorical data**: This is data that can take only a specific set of values
    corresponding to possible categories. In turn, they are divided into the following
    categories:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别数据**：这是只能取一组特定值的数据，通常对应可能的类别。它们又分为以下几类：'
- en: 'a. **Binary**: Data that can only accept two values (0/1)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. **二元**：只能接受两个值（0/1）的数据
- en: 'b. **Ordinal**: Data that has an explicit order, such as the days of the week'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. **有序**：具有明确顺序的数据，例如一周中的每一天
- en: It is necessary to know the data type of each feature so that you can apply
    the appropriate preprocessing methods. For example, if one of the columns in a
    DataFrame contains ordinal data, it has to be preprocessed by one-hot encoding
    it before passing it to the model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要了解每个特征的数据类型，以便应用适当的预处理方法。例如，如果DataFrame中的某一列包含有序数据，则必须先对其进行独热编码处理，然后才能传递给模型。
- en: Working with structured data
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理结构化数据
- en: AutoKeras allows us to quickly and easily create high-performance models for
    solving tasks based on structured data.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: AutoKeras允许我们快速、轻松地创建高性能的模型，以解决基于结构化数据的任务。
- en: Depending on the format of each column, AutoKeras will preprocess them automatically
    before feeding the model. For instance, if the column contains text, it will convert
    it into an embedding, if the column values are fixed categories, it will convert
    them into one-hot encoding arrays, and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据每列的格式，AutoKeras会在输入模型之前自动进行预处理。例如，如果某列包含文本数据，它会将其转换为嵌入；如果列值是固定类别，它会将其转换为独热编码数组，等等。
- en: In the following sections, we will see how easy it is to work with tabular datasets.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看到如何轻松处理表格数据集。
- en: Creating a structured data classifier to predict Titanic survivors
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个结构化数据分类器来预测Titanic幸存者
- en: This model will predict whether a Titanic passenger will survive the sinking
    of the ship based on characteristics that have been extracted from the Titanic
    Kaggle dataset. Although luck was an important factor in survival, some groups
    of people were more likely to survive than others.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型将根据从Titanic Kaggle数据集中提取的特征，预测Titanic乘客是否会在船沉没时生还。尽管运气是生存的重要因素，但某些群体的生还几率更高。
- en: There are a train dataset and a test dataset in this dataset. Both are similar
    datasets that include passenger information such as name, age, sex, socioeconomic
    class, and so on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集中包含一个训练数据集和一个测试数据集。两个数据集都类似，包含乘客信息，如姓名、年龄、性别、社会经济阶层等。
- en: The train dataset (`train.csv`) contains details about a subset of the passengers
    on board (891, to be exact), revealing if they survived or not in the `survived`
    column.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据集（`train.csv`）包含关于部分乘客的详细信息（准确来说是891名），并揭示了他们是否在`survived`列中生还。
- en: The test dataset (`test.csv`) will be used in the final evaluation and contains
    similar information for the other 418 passengers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据集（`test.csv`）将用于最终评估，并包含其他418名乘客的类似信息。
- en: AutoKeras will find patterns in the train data to predict whether these other
    418 passengers on board (found in `test.csv`) survived.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: AutoKeras将在训练数据中寻找模式，以预测其他418名登船乘客（见`test.csv`）是否幸存。
- en: The full source code notebook can be found at [https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_TitanicClassifier.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_TitanicClassifier.ipynb).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码笔记本可以在[https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_TitanicClassifier.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_TitanicClassifier.ipynb)找到。
- en: 'Now, let''s take a look at the relevant cells of the notebook in detail:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细查看笔记本中的相关单元格：
- en: '**Installing AutoKeras**: As we mentioned in other examples, this snippet at
    the top of the notebook is responsible for installing AutoKeras and its dependencies
    using the pip package manager:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装AutoKeras**：正如我们在其他示例中提到的，笔记本顶部的这段代码负责通过pip包管理器安装AutoKeras及其依赖项：'
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Importing the necessary packages**: The following lines load TensorFlow,
    pandas, and AutoKeras as the necessary dependencies for this project:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入必要的包**：以下代码行加载了TensorFlow、pandas和AutoKeras，作为该项目所需的依赖项：'
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Creating the datasets**: First, we will load the Titanic datasets as pandas
    DataFrames:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建数据集**：首先，我们将加载Titanic数据集作为pandas数据框：'
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we must separate the label (target) from the rest of the passenger features
    (inputs):'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们必须将标签（目标）与其他乘客特征（输入）分开：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Showing some samples**: Next, we will print the first few rows to see the
    column''s values:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展示一些样本**：接下来，我们将打印前几行，以查看列的值：'
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the output of the preceding code:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是前面代码的输出：
- en: '![Figure 6.1 – Notebook output of the first few rows of the training dataset'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – 训练数据集前几行的笔记本输出'
- en: '](img/B16953_06_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_06_01.jpg)'
- en: Figure 6.1 – Notebook output of the first few rows of the training dataset
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 训练数据集前几行的笔记本输出
- en: The previous screenshot shows the passenger information represented in the different
    columns. The first one (`survived`) will be the target to predict.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了乘客信息在不同列中的表示。第一列（`survived`）将作为预测目标。
- en: Now, it's time to create the classifier model.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建分类器模型了。
- en: Creating the classifier
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建分类器
- en: 'Now, we will use the AutoKeras `StructuredDataClassifier` to find the best
    classification model. Just for this example, we will set `max_trials` (the maximum
    number of different Keras models to try) to `2` and set the epochs parameter to
    `10`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用AutoKeras的`StructuredDataClassifier`来寻找最佳分类模型。仅在这个示例中，我们将`max_trials`（尝试的不同Keras模型的最大数量）设置为`2`，并将epochs参数设置为`10`：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s run the training process to search for the optimal classifier for the
    training dataset:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行训练过程，以搜索训练数据集的最佳分类器：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`StructuredDataClassifier` accepts different input formats. You can pass it
    a pandas DataFrame, as we did in the previous code, but it also accepts other
    formats, such as NumPy arrays and TensorFlow datasets. It also allows you to directly
    pass the URL or file path and it will be downloaded and ingested by the model
    automatically. To use this latter option, you must specify the name of the target
    column as the second argument:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`StructuredDataClassifier`接受不同的输入格式。你可以像我们在前面的代码中那样传入一个pandas DataFrame，但它也接受其他格式，如NumPy数组和TensorFlow数据集。它还允许你直接传递URL或文件路径，模型会自动下载并加载。要使用这种选项，必须将目标列的名称作为第二个参数传递：'
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will be similar in both cases:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 两种情况的输出将会相似：
- en: '![Figure 6.2 – Notebook output of structured data classifier training'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 – 结构化数据分类器训练的笔记本输出'
- en: '](img/B16953_06_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_06_02.jpg)'
- en: Figure 6.2 – Notebook output of structured data classifier training
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 结构化数据分类器训练的笔记本输出
- en: The previous output shows the accuracy of the training dataset is increasing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出显示训练数据集的准确率在提高。
- en: As we can see, we achieved `0.84` as the best prediction accuracy in the validation
    set. This is a good number just for a few seconds of training. We have limited
    the search to 10 epochs and two architectures (`max_trials = 2`). Simply increasing
    these numbers would give us a better accuracy, but it would also take longer to
    finish.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们在验证集上达到了`0.84`的最佳预测准确率。这是一个相当不错的数字，仅用了几秒钟的训练。我们将搜索限制为10个epoch和两种架构（`max_trials
    = 2`）。简单地增加这些数字将给我们带来更好的准确率，但也会花费更长时间来完成训练。
- en: Evaluating the model
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估模型
- en: 'Let''s evaluate the best model with the testing dataset:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用测试数据集评估最佳模型：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is the output of the preceding code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面代码的输出：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, `0.80` is also a really good final prediction score for the training
    time we've invested.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`0.80`也是一个非常好的最终预测分数，考虑到我们所投入的训练时间。
- en: Visualizing the model
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化模型
- en: 'Now that we have a winning model, let''s look at a little summary of its architecture:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个胜出的模型，让我们来看一下它的架构摘要：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is the output of the preceding code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面代码的输出：
- en: '![Figure 6.3 – Best model architecture summary](img/B16953_06_03.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 最佳模型架构摘要](img/B16953_06_03.jpg)'
- en: Figure 6.3 – Best model architecture summary
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 最佳模型架构摘要
- en: As we can see, AutoKeras has done all the preprocessing work for us, by transforming
    the category columns into categories and performing normalizations on them.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，AutoKeras已经为我们完成了所有的预处理工作，通过将类别列转换为类别并对其进行标准化。
- en: 'Let''s look at a visual representation of this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下这个的可视化表示：
- en: '![Figure 6.4 – Best model architecture visualization'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – 最佳模型架构可视化'
- en: '](img/B16953_06_04.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16953_06_04.jpg)'
- en: Figure 6.4 – Best model architecture visualization
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 最佳模型架构可视化
- en: After the data preprocessing blocks (multicategory and normalization), AutoKeras
    has opted to choose a fully connected neural network. This is a classical ML architecture
    that's suitable for tabular data. This makes sense because structured data is
    easier to train with classical machine learning models, since the patterns within
    the data are more explicit.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据预处理模块（多类别和标准化）之后，AutoKeras选择了一个全连接神经网络。这是一个经典的机器学习架构，适用于表格数据。这是有道理的，因为结构化数据更适合用经典的机器学习模型进行训练，因为数据中的模式更加明确。
- en: In the next section, we are going to resolve a structured data regression problem
    by predicting house prices.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过预测房价来解决结构化数据回归问题。
- en: Creating a structured data regressor to predict Boston house prices
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个结构化数据回归器以预测波士顿房价
- en: In the following example, we will try to predict the median home price in a
    Boston suburb in the mid-1970s, given data features about the suburb at that time,
    such as the crime rate, tax rate of the property, local property, and so on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将尝试预测1970年代中期波士顿郊区的中位房价，给定该时段的郊区数据特征，如犯罪率、财产税率、当地财产等。
- en: We will create a model that will find out the house price of a specific suburb
    based on its features. For this, we will train the model with the `boston_housing`
    dataset, which we must add to our repository ([https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/boston.csv](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/boston.csv)).
    The dataset we will use is relatively small – 506 samples divided between 404
    training samples and 102 test samples. Note that the dataset isn't normalized,
    which means that each characteristic in the input data applies a different scale
    to its values. For example, some columns have values in the 0 to 1 range, while
    others are between 1 and 12, 0 and 100, and so on. So, this is a good dataset
    to test AutoKeras's auto preprocessing functionalities.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个模型，基于特征预测特定郊区的房价。为此，我们将使用`boston_housing`数据集来训练该模型，我们需要将其添加到我们的仓库中（[https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/boston.csv](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/boston.csv)）。我们将使用的数据集相对较小——包含506个样本，分为404个训练样本和102个测试样本。请注意，该数据集没有经过标准化，这意味着输入数据中的每个特征在其值上应用不同的尺度。例如，一些列的值范围在0到1之间，而其他的则在1到12之间、0到100之间，等等。因此，这是一个很好的数据集，用于测试AutoKeras的自动预处理功能。
- en: 'The dataset''s features (columns) can be summarized as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的特征（列）可以总结如下：
- en: '**CRIM**: Crime rate by town (per capita)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRIM**：按城镇分类的犯罪率（人均）'
- en: '**ZN**: Proportion of residential land zoned for lots over 25,000 sq.ft'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ZN**：用于25,000平方英尺以上地块的住宅用地比例'
- en: '**INDUS**: Proportion of non-retail business acres per town'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INDUS**：每个城镇的非零售商业用地比例'
- en: '**CHAS**: Charles River dummy variable (1 if the tract bounds the river; 0
    otherwise)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CHAS**：查尔斯河虚拟变量（若该地块界限为河流，则为1；否则为0）'
- en: '**NOX**: Nitric oxides concentration (parts per 10 million)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NOX**：氮氧化物浓度（每1000万分之一）'
- en: '**RM**: Average number of rooms per dwelling'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RM**：每个住宅的平均房间数'
- en: '**AGE**: Proportion of owner-occupied units built prior to 1940'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AGE**：1940年之前建造的自住单元的比例'
- en: '**DIS**: Weighted mean of distances to five Boston employment centers'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DIS**：到波士顿五个就业中心的加权平均距离'
- en: '**RAD**: Index of accessibility to radial highways'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAD**：可达径向高速公路的可达性指数'
- en: '**TAX**: Full-value property tax rate per $10,000'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TAX**：每$10,000的全额财产税率'
- en: '**PTRATIO**: The pupil-teacher ratio by town'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PTRATIO**：按城镇分类的师生比'
- en: '**LSTAT**: Percentage lower status of the population'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSTAT**：低收入人群的百分比'
- en: '**MEDV**: Median value of owner-occupied homes in $1,000s'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MEDV**：业主自住房屋的中位价值（以千美元为单位）'
- en: 'The following screenshot shows some samples from this dataset:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了该数据集的一些样本：
- en: '![Figure 6.5 – A few samples from the Boston housing dataset](img/B16953_06_05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 波士顿住房数据集的一些样本](img/B16953_06_05.jpg)'
- en: Figure 6.5 – A few samples from the Boston housing dataset
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 波士顿住房数据集的一些样本
- en: As we want to approximate a price, we will use a structured data regressor for
    this task.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们要近似预测一个价格，因此我们将使用结构化数据回归器来完成这项任务。
- en: The notebook for this example, along with the complete source code, can be found
    at [https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的笔记本及完整源代码可以在[https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb)找到。
- en: 'Let''s explain the relevant code cells of the notebook in detail:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细解释一下笔记本中的相关代码单元：
- en: '**Getting the Boston housing dataset**: Before training, we must download the
    dataset that contains the features of each suburb, including the median price:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取波士顿房价数据集**：在训练之前，我们必须下载包含每个郊区特征的数据集，其中包括中位数价格：'
- en: '[PRE12]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Data preprocessing**: Since we have the dataset as a package, we will create
    the training and test sets while using the **median price column** (**MEDV**)
    as the target value. Note that some of the columns will be pre-processed before
    they''re fed to our model. AutoKeras will preprocess these columns automatically,
    performing normalization in continuous values (setting values between 0 and 1)
    and categorization in discrete values (one-hot encoding). Later in the architecture
    of the model, we will see the data preprocessing blocks that were created for
    this purpose.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据预处理**：由于我们有数据集作为一个包，我们将在创建训练集和测试集时使用**中位数价格列**（**MEDV**）作为目标值。请注意，在将数据传递给模型之前，一些列会先进行预处理。AutoKeras会自动对这些列进行预处理，对连续值进行归一化（将值设置在0和1之间），对离散值进行分类（进行独热编码）。稍后在模型架构中，我们将看到为此目的创建的数据预处理模块。'
- en: Creating a structure data regressor
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建结构化数据回归器
- en: Because we want to predict a price from a set of features, and since this price
    is a scalar value, we are going to use the AutoKeras `StructuredDataRegressor`,
    a structured data regression class that creates a regression model that accepts
    set `x` as a structured dataset (as a CSV filename, a NumPy array, a pandas DataFrame,
    or a TensorFlow dataset) and set, `y` as a label dataset (a one-column set in
    the same format as the input set, or a target column name if the input data is
    from a CSV file) as input.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们想从一组特征中预测一个价格，而这个价格是一个标量值，所以我们将使用AutoKeras的`StructuredDataRegressor`，这是一个结构化数据回归类，它创建一个回归模型，接受`x`作为结构化数据集（如CSV文件名、NumPy数组、pandas
    DataFrame或TensorFlow数据集）以及`y`作为标签数据集（与输入数据集格式相同的一列数据集，或者如果输入数据来自CSV文件，则是目标列名称）作为输入。
- en: 'In this case, the dataset is small, and the training epochs will be faster
    than the other examples, so we''ll set `max_trials` to 20 and set the epochs parameter
    to 50:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，数据集较小，训练周期比其他示例快，因此我们将`max_trials`设置为20，并将epochs参数设置为50：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For regression models, AutoKeras uses **mean square error** (**MSE**) as the
    default loss. As we explained in the previous chapters, this is the square of
    the difference between the predictions and the targets. But for this example,
    we are also monitoring a new metric during training that will give us more information:
    **mean absolute error** (**MAE**). This is the absolute value of the difference
    between the predictions and the targets. For example, an MAE of 1.5 in this problem
    would mean that your predictions are off by $1,500 on average.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于回归模型，AutoKeras使用**均方误差**（**MSE**）作为默认损失函数。正如我们在前几章中解释的那样，这是预测值与目标值之间差异的平方。但对于这个示例，我们在训练过程中还会监控一个新的指标，这将为我们提供更多信息：**平均绝对误差**（**MAE**）。这是预测值与目标值之间差异的绝对值。例如，在这个问题中，MAE为1.5意味着你的预测平均偏差为$1,500。
- en: 'Let''s run the training process to search for the best model:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行训练过程，搜索最佳模型：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the output of the preceding code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是前述代码的输出：
- en: '![Figure 6.6 – Notebook output of training our house price predictor](img/B16953_06_06.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 训练房价预测模型的笔记本输出](img/B16953_06_06.jpg)'
- en: Figure 6.6 – Notebook output of training our house price predictor
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 训练房价预测模型的笔记本输出
- en: As shown in the previous output, after less than 5 minutes, we have a model
    with `5.05` for the best validation loss (MSE). This means that the predictions
    are failing at an average of `2.24` (the square root of 5.05) in the final score.
    This is over $2,200\. This is not a bad result for just 5 minutes of training
    time, so let's evaluate it with the test set.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述输出所示，在不到5分钟的时间内，我们的模型的最佳验证损失（MSE）为`5.05`。这意味着在最终得分中，预测的平均偏差为`2.24`（5.05的平方根）。这超过了$2,200。对于只有5分钟的训练时间来说，这并不是一个坏结果，因此让我们用测试集来评估它。
- en: Evaluating the model
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估模型
- en: 'We are ready to evaluate our final model with the testing dataset. Let''s get
    started:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备用测试数据集评估我们的最终模型。让我们开始吧：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is the output of the preceding code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前述代码的输出：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's look at our new metric, MAE. This has a value of `2.420`, which means
    that our predictions are off by $2,420 on average. This is a really good prediction
    error for the time we've invested. If we run AutoKeras with more trials and epochs,
    we will probably get better results.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下我们的新指标，MAE。它的值为`2.420`，这意味着我们的预测平均偏差为$2,420。这是对我们投入时间的一个非常好的预测误差。如果我们运行更多的试验和周期，很可能会得到更好的结果。
- en: Visualizing the model
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型可视化
- en: 'Now, it''s time to look at what we have under the hood:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候看看我们底层的内容了：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is the output of the preceding code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前述代码的输出：
- en: '![Figure 6.7 – Best model architecture summary](img/B16953_06_07.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 最佳模型架构总结](img/B16953_06_07.jpg)'
- en: Figure 6.7 – Best model architecture summary
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 最佳模型架构总结
- en: As in the previous classification example, AutoKeras has done all the preprocessing
    work for us, transforming the columns with discrete values into categories through
    the `multi_category_encoding` block and performing normalizations on the continuous
    values columns using the `normalization` block.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就像前面的分类示例一样，AutoKeras已经为我们完成了所有的预处理工作，通过`multi_category_encoding`块将具有离散值的列转换为类别，并使用`normalization`块对连续值列进行归一化。
- en: 'Let''s see its visual representation:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的视觉表示：
- en: '![Figure 6.8 – Best model architecture visualization](img/B16953_06_08.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 最佳模型架构可视化](img/B16953_06_08.jpg)'
- en: Figure 6.8 – Best model architecture visualization
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 最佳模型架构可视化
- en: In the previous diagram, we can see the different layers of the model in a more
    schematic way. Now, let's summarize what we have learned in this chapter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张图中，我们可以更加简略地看到模型的不同层次。现在，让我们总结一下本章学到的内容。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what structured data is and its different categories,
    how to feed our AutoKeras models with different structured data formats (pandas,
    CSV files, and so on), and how to load and explore tabular datasets using some
    pandas functions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了什么是结构化数据及其不同的类别，如何用不同的结构化数据格式（如pandas、CSV文件等）来喂养我们的AutoKeras模型，并且学会了如何使用一些pandas函数加载和探索表格数据集。
- en: Finally, we applied these concepts by creating a powerful structured data classifier
    model to predict Titanic survivors and a powerful structured data regressor model
    to predict Boston house prices.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过创建一个强大的结构化数据分类器模型来预测泰坦尼克号的幸存者，并创建一个强大的结构化数据回归模型来预测波士顿房价，应用了这些概念。
- en: With that, you have learned the basics of how to tackle any problem based on
    structured data using AutoKeras. With these techniques, any `CSV` file can be
    a dataset that you can train your model with.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些技术，您已经学会了如何使用AutoKeras解决基于结构化数据的任何问题。使用这些技术，任何`CSV`文件都可以成为您可以用来训练模型的数据集。
- en: In the next chapter, we will learn how to perform sentiment analysis on texts
    using AutoKeras.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用AutoKeras对文本进行情感分析。
