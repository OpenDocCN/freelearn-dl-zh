- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: 'Chapter 01: Introduction to Neural Networks and Deep Learning'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 01 章：神经网络与深度学习简介
- en: 'Activity 1.01: Training a Neural Network with Different Hyperparameters'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1.01：使用不同的超参数训练神经网络
- en: 'Solution:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Using your Terminal, navigate to the directory cloned from [https://packt.live/2ZVyf0C](https://packt.live/2ZVyf0C)
    and execute the following command to start TensorBoard:'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端，导航至从 [https://packt.live/2ZVyf0C](https://packt.live/2ZVyf0C) 克隆的目录，并执行以下命令启动
    TensorBoard：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output is as follows:'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 1.15: A screenshot of a Terminal after starting a TensorBoard instance'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.15：启动 TensorBoard 实例后的终端截图'
- en: '](img/B15911_01_15.jpg)'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_01_15.jpg)'
- en: 'Figure 1.15: A screenshot of a Terminal after starting a TensorBoard instance'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.15：启动 TensorBoard 实例后的终端截图
- en: 'Now, open the URL provided by TensorBoard in your browser. You should be able
    to see the TensorBoard `SCALARS` page:![Figure 1.16: A screenshot of the TensorBoard
    SCALARS page'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在浏览器中打开 TensorBoard 提供的 URL。你应该能看到 TensorBoard `SCALARS` 页面：![图 1.16：TensorBoard
    SCALARS 页面截图
- en: '](img/B15911_01_16.jpg)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_01_16.jpg)'
- en: 'Figure 1.16: A screenshot of the TensorBoard SCALARS page'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.16：TensorBoard SCALARS 页面截图
- en: On the TensorBoard page, click on the `SCALARS` page and enlarge the `epoch_accuracy`
    graph. Now, move the smoothing slider to `0.6`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 TensorBoard 页面中，点击 `SCALARS` 页面并放大 `epoch_accuracy` 图表。现在，将平滑滑块移至 `0.6`。
- en: The accuracy graph measures how accurately the network was able to guess the
    labels of a test set. At first, the network guesses those labels completely incorrectly.
    This happens because we have initialized the weights and biases of our network
    with random values, so its first attempts are a guess. The network will then change
    the weights and biases of its layers on a second run; the network will continue
    to invest in the nodes that give positive results by altering their weights and
    biases and will penalize those that don't by gradually reducing their impact on
    the network (eventually reaching `0`). As you can see, this is an efficient technique
    that quickly yields great results.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 准确率图表衡量了网络预测测试集标签的准确性。最初，网络完全错误地预测这些标签。这是因为我们用随机值初始化了网络的权重和偏置，所以它的第一次尝试只是猜测。然后，网络会在第二次运行时改变它层的权重和偏置；网络将继续通过改变权重和偏置来投资于那些给出正面结果的节点，并通过逐渐减少它们对网络的影响来惩罚那些没有效果的节点（最终达到
    `0`）。如你所见，这是一种高效的技术，能迅速取得良好的结果。
- en: 'To train another model by changing various hyperparameters, open a Terminal
    in `Chapter01/Activity1.01`. Activate the environment. Change the following lines
    in `mnist.py`:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过更改不同的超参数训练另一个模型，请在 `Chapter01/Activity1.01` 中打开终端，激活环境。修改 `mnist.py` 中的以下几行：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `mnist.py` file will look as follows:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mnist.py` 文件将如下所示：'
- en: '![Figure 1.17: A screenshot of the mnist.py file and the hyperparameters to
    change'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.17：mnist.py 文件截图以及需要更改的超参数'
- en: '](img/B15911_01_17.jpg)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_01_17.jpg)'
- en: 'Figure 1.17: A screenshot of the mnist.py file and the hyperparameters to change'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.17：mnist.py 文件截图以及需要更改的超参数
- en: 'Now repeat *steps 1-3* for this newly trained model. Start TensorFlow, open
    the `Scalar` page with the URL seen on TensorBoard, and view the `epoch_accuracy`
    graph on the `Scalar` page. You will see the difference compared to the earlier
    graphs:![Figure 1.18: A screenshot from TensorBoard showing the parameters specified
    in step 4'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为这个新训练的模型重复 *步骤 1-3*。启动 TensorFlow，打开 TensorBoard 上看到的 URL 中的 `Scalar` 页面，并查看
    `epoch_accuracy` 图表。你将看到与之前图表的差异：![图 1.18：TensorBoard 截图，显示步骤 4 中指定的参数
- en: '](img/B15911_01_18.jpg)'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_01_18.jpg)'
- en: 'Figure 1.18: A screenshot from TensorBoard showing the parameters specified
    in step 4'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.18：TensorBoard 截图，显示步骤 4 中指定的参数
- en: 'Now repeat *step 4*. Open a Terminal in `Chapter01/Activity1.01`. Activate
    the environment. Change the following lines in `mnist.py` to the following values:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在重复 *步骤 4*。在 `Chapter01/Activity1.01` 中打开终端，激活环境。将 `mnist.py` 中的以下几行修改为以下值：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Visualize the results. You will get graphs like these:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可视化结果。你将得到如下图表：
- en: '![Figure 1.19: A screenshot of the TensorBoard graphs'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.19：TensorBoard 图表截图'
- en: '](img/B15911_01_19.jpg)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_01_19.jpg)'
- en: 'Figure 1.19: A screenshot of the TensorBoard graphs'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19：TensorBoard 图表截图
- en: Now try running the model with any of your custom values and see how the graph
    changes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试使用你的自定义值运行模型，看看图表如何变化。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Use the `mnist.py` file for your reference at [https://packt.live/2ZVyf0C](https://packt.live/2ZVyf0C).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 `mnist.py` 文件，网址：[https://packt.live/2ZVyf0C](https://packt.live/2ZVyf0C)。
- en: There are many other parameters that you can modify in your neural network.
    For now, experiment with the epochs and the learning rate of your network. You
    will notice that those two on their own can greatly change the output of your
    network—but only by so much. Experiment to see if you can train this network faster
    with the current architecture just by altering those two parameters.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以修改神经网络中的许多其他参数。目前，先尝试调整网络的训练轮数（epochs）和学习率（learning rate）。你会发现，单独调整这两个参数就能显著改变网络的输出——但变化幅度有限。尝试通过仅调整这两个参数，看是否能在当前架构下更快地训练网络。
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/3eiFdC3](https://packt.live/3eiFdC3).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本节的源代码，请参阅[https://packt.live/3eiFdC3](https://packt.live/3eiFdC3)。
- en: This section does not currently have an online interactive example, and will
    need to be run locally.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本节目前没有在线互动示例，需要在本地运行。
- en: Verify how your network is training using TensorBoard. Alter those parameters
    a few more times by multiplying the starting values by 10 until you notice that
    the network is improving. This process of tuning the network and finding improved
    accuracy is essentially what is used in industry applications today to improve
    existing neural network models.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TensorBoard 验证你的网络训练情况。通过将初始值乘以 10 多次来调整这些参数，直到你注意到网络在改进。这个过程，即调整网络并找到更高准确度，实际上就是今天工业应用中用于改进现有神经网络模型的方式。
- en: 'Chapter 02: Real-World Deep Learning: Predicting the Price of Bitcoin'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 02 章：现实世界中的深度学习：预测比特币的价格
- en: 'Activity 2.01: Assembling a Deep Learning System'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 2.01：组建深度学习系统
- en: 'Solution:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'We will continue to use Jupyter Notebooks and the data prepared in previous
    exercises of chapter 2 (`data/train_dataset.csv`), as well as the model that we
    stored locally (`bitcoin_ lstm_v0.h5`):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用 Jupyter Notebooks 和第 2 章之前练习中准备的数据（`data/train_dataset.csv`），以及我们本地保存的模型（`bitcoin_lstm_v0.h5`）：
- en: 'Import the libraries required to load and train the deep learning model:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入加载和训练深度学习模型所需的库：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The `close_point_relative_normalization` variable will be used to train our
    LSTM model.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`close_point_relative_normalization` 变量将用于训练我们的 LSTM 模型。'
- en: We will start by loading the dataset we prepared during our previous activities.
    We'll use pandas to load that dataset into memory.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将首先加载在之前活动中准备的数据集。我们将使用 pandas 将该数据集加载到内存中。
- en: 'Load the training dataset into memory using pandas, as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 pandas 将训练数据集加载到内存中，如下所示：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, quickly inspect the dataset by executing the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，快速检查数据集，执行以下命令：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As explained in this chapter, LSTM networks require tensors with three dimensions.
    These dimensions are period length, the number of periods, and the number of features.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如本章所述，LSTM 网络需要三维的张量。这三维分别是周期长度、周期数和特征数。
- en: Now, proceed to create weekly groups, and then rearrange the resulting array
    to match those dimensions.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，继续创建每周分组，然后重新排列结果数组以匹配这些维度。
- en: 'Feel free to use the `create_groups()` function provided to perform this operation:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随时使用提供的 `create_groups()` 函数来执行此操作：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The default values for that function are `7` days.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该函数的默认值是 `7` 天。
- en: 'Now, make sure you split the data into two sets: training and validation. We
    do this by assigning the last week from the Bitcoin prices dataset to the evaluation
    set. We then train the network to evaluate that last week. Separate the last week
    of the training data and reshape it using `numpy.reshape()`. Reshaping it is important,
    as the LSTM model only accepts data organized in this way:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，确保将数据分为两组：训练集和验证集。我们通过将比特币价格数据集的最后一周分配给评估集来做到这一点。然后，我们训练网络以评估最后一周的数据。将训练数据的最后一周分开，并使用
    `numpy.reshape()` 重新调整其形状。重新调整形状很重要，因为 LSTM 模型只接受以这种方式组织的数据：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Our data is now ready to be used in training. Now, we load our previously saved
    model and train it with a given number of epochs.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们的数据已经准备好用于训练。接下来，我们加载之前保存的模型，并用指定的训练轮数对其进行训练。
- en: 'Navigate to the `Load Our Model` header and load our previously trained model:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `Load Our Model` 标题并加载我们之前训练的模型：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And now, train that model with our training data, `X_train` and `Y_validation`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用我们的训练数据 `X_train` 和 `Y_validation` 来训练该模型：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that we store the logs of the model in a variable called `history`.
    The model logs are useful for exploring specific variations in its training accuracy
    and observing how well the loss function is performing:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们将模型的日志存储在一个名为`history`的变量中。模型日志对于探索其训练精度的具体变化以及观察损失函数的表现非常有用：
- en: '![Figure 2.27: Section of the Jupyter notebook where we load our earlier model'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.27：Jupyter Notebook的一部分，其中我们加载了之前的模型'
- en: and train it with new data
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并用新数据对其进行训练
- en: '](img/B15911_02_27.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_02_27.jpg)'
- en: 'Figure 2.27: Section of the Jupyter Notebook where we load our earlier model
    and train it with new data'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.27：Jupyter Notebook的一部分，其中我们加载了之前的模型并用新数据进行训练
- en: 'Finally, let''s make a prediction with our trained model. Using the same data,
    `X_train`, call the following method:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们用训练好的模型进行预测。使用相同的数据`X_train`，调用以下方法：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The model immediately returns a list of normalized values with the prediction
    for the next 7 days. Use the `denormalize()` function to turn the data into US
    dollar values. Use the latest values available as a reference for scaling the
    predicted results:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型立即返回一个包含下7天预测的归一化值的列表。使用`denormalize()`函数将数据转换为美元值。使用最新可用的值作为参考，来缩放预测结果：
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.28: Projection of Bitcoin prices for 7 days in the future'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.28：未来7天比特币价格预测'
- en: using the LSTM model we just built
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用我们刚刚构建的LSTM模型
- en: '](img/B15911_02_28.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_02_28.jpg)'
- en: 'Figure 2.28: Projection of Bitcoin prices for 7 days in the future using the
    LSTM model we just built'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.28：使用我们刚构建的LSTM模型预测未来7天比特币价格
- en: Note
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'We combine both time series in this graph: the real data (before the vertical
    line) and the predicted data (after the vertical line). The model shows a variance
    similar to the patterns seen before and it suggests a price increase during the
    following 7-day period.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这张图中结合了两个时间序列：真实数据（垂直线之前）和预测数据（垂直线之后）。模型展示了与之前看到的模式相似的变化，并且暗示在接下来的7天内价格将会上涨。
- en: 'When you are done experimenting, save your model with the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你完成实验后，使用以下命令保存你的模型：
- en: '[PRE12]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will save this trained network for future reference and compare its performance
    with other models.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将保存这个训练好的网络，以备将来参考，并与其他模型的性能进行比较。
- en: The network may have learned patterns from our data, but how can it do that
    with such a simple architecture and so little data? LSTMs are powerful tools for
    learning patterns from data. However, we will learn in our next sessions that
    they can also suffer from overfitting, a phenomenon common in neural networks,
    in which they learn patterns from the training data that are useless when predicting
    real-world patterns. We will learn how to deal with that and how to improve our
    network to make useful predictions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 网络可能已经从我们的数据中学习到了某些模式，但它如何能在如此简单的架构和如此少的数据下做到这一点呢？LSTM是从数据中学习模式的强大工具。然而，在接下来的课程中我们将学习到，LSTM也可能会遭遇过拟合问题，这是一种神经网络常见的现象，表现为它们从训练数据中学习到的模式在预测现实世界中的模式时没有用处。我们将学习如何应对这种情况，并改进我们的网络，使其能够做出有用的预测。
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2ZWfqub](https://packt.live/2ZWfqub).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考[https://packt.live/2ZWfqub](https://packt.live/2ZWfqub)。
- en: You can also run this example online at [https://packt.live/3gIhhcT](https://packt.live/3gIhhcT).
    You must execute the entire Notebook in order to get the desired result.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行这个示例，网址是[https://packt.live/3gIhhcT](https://packt.live/3gIhhcT)。你必须执行整个Notebook才能获得期望的结果。
- en: 'Chapter 3: Real-World Deep Learning: Evaluating the Bitcoin Model'
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：现实世界深度学习：评估比特币模型
- en: 'Activity 3.01: Optimizing a Deep Learning Model'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 3.01：优化深度学习模型
- en: 'Solution:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Using your Terminal, start a TensorBoard instance by executing the following
    command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端，通过执行以下命令启动TensorBoard实例：
- en: '[PRE13]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will see the `SCALARS` page once TensorBoard opens in the browser:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当TensorBoard在浏览器中打开时，你将看到`SCALARS`页面：
- en: '![Figure 3.20: Screenshot of a TensorBoard showing SCALARS page'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.20：TensorBoard显示SCALARS页面的截图'
- en: '](img/B15911_03_20.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_03_20.jpg)'
- en: 'Figure 3.20: Screenshot of a TensorBoard showing SCALARS page'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.20：TensorBoard显示SCALARS页面的截图
- en: 'Open the URL that appears on screen and leave that browser tab open as well.
    Also, start a Jupyter Notebook instance with the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开屏幕上出现的网址，并保持该浏览器标签页打开。同时，使用以下命令启动一个Jupyter Notebook实例：
- en: '[PRE14]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s the screenshot showing the Jupyter Notebook:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是显示Jupyter Notebook的截图：
- en: '![Figure 3.21: Jupyter Notebook'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.21：Jupyter Notebook'
- en: '](img/B15911_03_21.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_03_21.jpg)'
- en: 'Figure 3.21: Jupyter Notebook'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.21：Jupyter Notebook
- en: Open the URL that appears in a different browser window.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开出现在不同浏览器窗口中的 URL。
- en: Now, open the Jupyter Notebook called `Activity3.01_Optimizing_a_deep_learning_model.ipynb`
    and navigate to the title of the Notebook. Run the cell to, import all the required
    libraries.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开名为`Activity3.01_Optimizing_a_deep_learning_model.ipynb`的 Jupyter Notebook，导航到
    Notebook 的标题。运行单元格以导入所有必需的库。
- en: 'Set the seed to avoid randomness:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置种子以避免随机性：
- en: '[PRE15]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will load the train and test data like we did in the previous activities.
    We will also split it into train and test groups using the `split_lstm_input()`
    utility function:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将像之前的活动中那样加载训练数据和测试数据。我们还将使用`split_lstm_input()`工具函数将其分为训练组和测试组：
- en: '![Figure 3.22: Screenshot showing results of loading datasets'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.22：显示加载数据集结果的截图'
- en: '](img/B15911_03_22.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_03_22.jpg)'
- en: 'Figure 3.22: Screenshot showing results of loading datasets'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.22：显示加载数据集结果的截图
- en: In each section of this Notebook, we will implement new optimization techniques
    in our model. Each time we do so, we'll train a fresh model and store its trained
    instance in a variable that describes the model version. For instance, our first
    model, `bitcoin_lstm_v0`, is called `model_v0` in this Notebook. At the very end
    of the Notebook, we'll evaluate all the models using MSE, RMSE, and MAPE.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个 Notebook 的每个部分，我们将实现新的优化技术到模型中。每次进行优化时，我们都会训练一个新的模型，并将其训练后的实例存储在一个描述模型版本的变量中。例如，我们的第一个模型`bitcoin_lstm_v0`在这个
    Notebook 中被称为`model_v0`。在 Notebook 的最后，我们将使用 MSE、RMSE 和 MAPE 来评估所有模型。
- en: To get these models up and running, execute the cells under the **Reference
    Model** section.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使这些模型运行，请执行**参考模型**部分下的单元格。
- en: 'Now, in the open Jupyter Notebook, navigate to the `Adding Layers and Nodes`
    header. You will recognize our first model in the next cell. This is the basic
    LSTM network that we built in *Chapter 2*, *Real-World Deep Learning with TensorFlow
    and Keras: Predicting the Price of Bitcoin*. Now, we have to add a new LSTM layer
    to this network:![Figure 3.23: Jupyter Notebook with code for adding new LSTM
    layer'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在打开的 Jupyter Notebook 中，导航到`添加层和节点`标题。你将在下一个单元格中看到我们的第一个模型。这是我们在*第二章*中构建的基本
    LSTM 网络，*《使用 TensorFlow 和 Keras 进行真实世界深度学习：预测比特币价格》*。现在，我们需要为这个网络添加一个新的 LSTM 层：![图
    3.23：带有添加新 LSTM 层代码的 Jupyter Notebook
- en: '](img/B15911_03_23.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_03_23.jpg)'
- en: 'Figure 3.23: Jupyter Notebook with code for adding new LSTM layer'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.23：带有添加新 LSTM 层代码的 Jupyter Notebook
- en: Using your knowledge from this chapter, go ahead and add a new LSTM layer and
    then compile and train the model.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 利用你在本章中学到的知识，继续添加一个新的 LSTM 层，然后编译并训练模型。
- en: 'While training your models, remember to frequently visit the running TensorBoard
    instance. You will be able to see each model run and compare the results of their
    loss functions there:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在训练模型时，记得频繁访问正在运行的 TensorBoard 实例。你将能够看到每个模型运行并比较其损失函数的结果：
- en: '![Figure 3.24: Output of the loss function for different models'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.24：不同模型的损失函数输出'
- en: '](img/B15911_03_24.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_03_24.jpg)'
- en: 'Figure 3.24: Output of the loss function for different models'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.24：不同模型的损失函数输出
- en: The TensorBoard instance displays many different model runs. TensorBoard is
    really useful for tracking model training in real time.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TensorBoard 实例显示了许多不同的模型运行。TensorBoard 对于实时跟踪模型训练非常有用。
- en: 'In this section, we are interested in exploring different magnitudes of epochs.
    Use the `train_model()` utility function to name different model versions and
    runs:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本节中，我们关注探索不同规模的训练周期（epoch）。使用`train_model()`工具函数为不同的模型版本和运行命名：
- en: '[PRE16]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Train the model with a few different epoch parameters.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用不同的 epoch 参数训练模型。
- en: At this point, you are interested in making sure the model doesn't overfit the
    training data. You want to avoid this, because if it does, it will not be able
    to predict patterns that are represented in the training data but have different
    representations in the test data.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，你要确保模型不会对训练数据发生过拟合。你需要避免这种情况，因为如果模型过拟合，它将无法预测在训练数据中已表示但在测试数据中具有不同表示的模式。
- en: 'After you are done experimenting with epochs, move to the next optimization
    technique: activation functions.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在完成对 epoch 的实验后，继续进行下一个优化技术：激活函数。
- en: 'Now, navigate to the `Activation Functions` header in the Notebook. In this
    section, you only need to change the following variable:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到 Notebook 中的`激活函数`标题。在此部分，你只需更改以下变量：
- en: '[PRE17]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have used the `tanh` function in this section, but feel free to try other
    activation functions. Review the list available at [https://keras.io/activations/](https://keras.io/activations/)
    and try other possibilities.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本节中我们使用了 `tanh` 函数，但您可以尝试其他激活函数。查看 [https://keras.io/activations/](https://keras.io/activations/)
    上的可用列表，尝试其他选项。
- en: Our final option is to try different regularization strategies. This is notably
    more complex and may take a few iterations for us to notice any gains—especially
    with so little data. Also, adding regularization strategies typically increases
    the training time of your network.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的最终选择是尝试不同的正则化策略。这通常更复杂，可能需要几次迭代才能看到任何改进，尤其是在数据较少的情况下。此外，添加正则化策略通常会增加网络的训练时间。
- en: 'Now, navigate to the `Regularization Strategies` header in the Notebook. In
    this section, you need to implement the `Dropout()` regularization strategy. Find
    the right place to put that step and implement it in our model:![Figure 3.25:
    Jupyter Notebook showing code for regularization strategies'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到笔记本中的 `Regularization Strategies` 章节。在本节中，您需要实现 `Dropout()` 正则化策略。找到合适的位置将此步骤添加到我们的模型中：![图
    3.25：显示正则化策略代码的 Jupyter 笔记本
- en: '](img/B15911_03_25.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_03_25.jpg)'
- en: 'Figure 3.25: Jupyter Notebook showing code for regularization strategies'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.25：显示正则化策略代码的 Jupyter 笔记本
- en: You can also try L2 regularization here (or combine both). Do the same as you
    did with `Dropout()`, but now using `ActivityRegularization(l2=0.0001)`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以在此尝试 L2 正则化（或将两者结合）。像使用 `Dropout()` 一样操作，但现在使用 `ActivityRegularization(l2=0.0001)`。
- en: Finally, let's evaluate our models using RMSE and MAPE.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，让我们使用 RMSE 和 MAPE 来评估我们的模型。
- en: Now, navigate to the `Evaluate Models` header in the Notebook. In this section,
    we will evaluate the model predictions for the next 19 weeks of data in the test
    set. Then, we will compute the RMSE and MAPE of the predicted series versus the
    test series.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到笔记本中的 `Evaluate Models` 章节。在本节中，我们将评估模型对测试集下一个 19 周数据的预测结果。然后，我们将计算预测序列与测试序列的
    RMSE 和 MAPE。
- en: 'First plot looks as follows:'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个图表如下所示：
- en: '![Figure 3.26: Prediction series versus test series #1'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.26：预测序列与测试序列 #1'
- en: '](img/B15911_03_26.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15911_03_26.jpg)'
- en: 'Figure 3.26: Prediction series versus test series #1'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.26：预测序列与测试序列 #1'
- en: 'Second plot looks as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个图表如下所示：
- en: '![Figure 3.27: Prediction series versus test series #2'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.27：预测序列与测试序列 #2'
- en: '](img/B15911_03_27.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15911_03_27.jpg)'
- en: 'Figure 3.27: Prediction series versus test series #2'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.27：预测序列与测试序列 #2'
- en: 'Third plot looks as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个图表如下所示：
- en: '![Figure 3.28: Prediction series versus test series #3'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.28：预测序列与测试序列 #3'
- en: '](img/B15911_03_28.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15911_03_28.jpg)'
- en: 'Figure 3.28: Prediction series versus test series #3'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.28：预测序列与测试序列 #3'
- en: 'Fourth plot looks as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个图表如下所示：
- en: '![Figure 3.29: Prediction series versus test series #4'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.29：预测序列与测试序列 #4'
- en: '](img/B15911_03_29.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15911_03_29.jpg)'
- en: 'Figure 3.29: Prediction series versus test series #4'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.29：预测序列与测试序列 #4'
- en: 'Fifth plot will look as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 第五个图表如下所示：
- en: '![Figure 3.30: Prediction series versus test series #5'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.30：预测序列与测试序列 #5'
- en: '](img/B15911_03_30.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15911_03_30.jpg)'
- en: 'Figure 3.30: Prediction series versus test series #5'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.30：预测序列与测试序列 #5'
- en: We have implemented the same evaluation techniques from *Exercise 2.01,* *Exploring
    Bitcoin Dataset*, [https://packt.live/3ehbgCi](https://packt.live/3ehbgCi), all
    wrapped in utility functions. Simply run all the cells from this section until
    the end of the Notebook to see the results.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了与*练习 2.01*、*探索比特币数据集*，[https://packt.live/3ehbgCi](https://packt.live/3ehbgCi)中相同的评估技术，所有内容都封装在工具函数中。只需运行本节的所有单元格，直到笔记本结束，就能看到结果。
- en: Note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2ZgAo87](https://packt.live/2ZgAo87).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 若要访问此特定章节的源代码，请参考 [https://packt.live/2ZgAo87](https://packt.live/2ZgAo87)。
- en: You can also run this example online at [https://packt.live/3ft5Wgk](https://packt.live/3ft5Wgk).
    You must execute the entire Notebook in order to get the desired result.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在 [https://packt.live/3ft5Wgk](https://packt.live/3ft5Wgk) 在线运行此示例。必须执行整个笔记本才能获得预期的结果。
- en: In this activity, we used different evaluation techniques to get more accurate
    results. We tried to train for more epochs, changed the activation function, added
    regularization, and compared results in different scenarios. Take this opportunity
    to tweak the values for the preceding optimization techniques and attempt to beat
    the performance of that model.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次活动中，我们使用了不同的评估技术来获得更准确的结果。我们尝试了更多的训练周期，改变了激活函数，添加了正则化，并在不同场景中比较结果。利用这个机会调整前述优化技术的参数，尝试超越该模型的表现。
- en: 'Chapter 4: Productization'
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：产品化
- en: 'Activity 4.01: Deploying a Deep Learning Application'
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.01：部署深度学习应用
- en: 'Solution:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: In this activity, we deploy our model as a web application locally. This allows
    us to connect to the web application using a browser or to use another application
    through the application's HTTP API. You can find the code for this activity at
    [https://packt.live/2Zdor2S](https://packt.live/2Zdor2S).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次活动中，我们将模型作为Web应用程序本地部署。这使我们可以通过浏览器连接到Web应用程序，或者通过应用程序的HTTP API使用其他应用程序。你可以在[https://packt.live/2Zdor2S](https://packt.live/2Zdor2S)找到本活动的代码。
- en: 'Using your Terminal, navigate to the `cryptonic` directory and build the Docker
    images for all the required components:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的终端，导航到`cryptonic`目录并构建所有所需组件的Docker镜像：
- en: '[PRE18]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Those two commands build the two images that we will use in this application:
    `cryptonic` (containing the Flask application) and `cryptonic-cache` (containing
    the Redis cache).'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个命令构建了我们将在此应用中使用的两个镜像：`cryptonic`（包含Flask应用）和`cryptonic-cache`（包含Redis缓存）。
- en: 'After building the images, identify the `docker-compose.yml` file and open
    it in a text editor. Change the `BITCOIN_START_DATE` parameter to a date other
    than `2017-01-01`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建完镜像后，找到`docker-compose.yml`文件并用文本编辑器打开它。将`BITCOIN_START_DATE`参数更改为`2017-01-01`以外的日期：
- en: '[PRE19]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As a final step, deploy your web application locally using `docker-compose
    up`, as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步，使用`docker-compose up`在本地部署你的Web应用，如下所示：
- en: '[PRE20]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You should see a log of activity on your Terminal, including the training epochs
    completed by your model.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能看到终端中的活动日志，其中包括模型完成的训练周期。
- en: 'After the model has been trained, you can visit your application at `http://
    localhost:5000` and make predictions at `http://localhost:5000/predict`:![Figure
    4.7: Screenshot of the Cryptonic application deployed locally'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模型训练完成后，你可以访问`http:// localhost:5000`并在`http://localhost:5000/predict`进行预测：![图
    4.7：Cryptonic应用程序本地部署的截图
- en: '](img/B15911_04_07.jpg)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15911_04_07.jpg)'
- en: 'Figure 4.7: Screenshot of the Cryptonic application deployed locally'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7：Cryptonic应用程序本地部署的截图
- en: Note
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to [https://packt.live/2Zg0wjd](https://packt.live/2Zg0wjd).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本节的源代码，请参考[https://packt.live/2Zg0wjd](https://packt.live/2Zg0wjd)。
- en: This section does not currently have an online interactive example, and will
    need to be run locally.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本节目前没有在线交互示例，需要在本地运行。
