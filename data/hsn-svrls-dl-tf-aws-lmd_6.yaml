- en: Creating a Deep Learning Pipeline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建深度学习管道
- en: In the last chapter, we studied the creation of the API gateway service using
    the AWS Console, as well as the serverless framework. In this chapter, we will
    learn about creating SQS connections using the AWS console, as well as the serverless
    framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们研究了使用 AWS 控制台创建 API 网关服务以及无服务器框架。本章我们将学习如何使用 AWS 控制台以及无服务器框架创建 SQS 连接。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主题：
- en: Message queue
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息队列
- en: Introducing AWS simple query service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 AWS 简单查询服务
- en: Creating AWS SQS using AWS console and serverless framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS 控制台和无服务器框架创建 AWS SQS
- en: Sample projects—deep learning pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例项目——深度学习管道
- en: Technical Requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements in this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: AWS subscription
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 订阅
- en: Python 3.6
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: AWS CLI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: Serverless framework
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架
- en: You can find all the codes at [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
    查找所有代码
- en: Message queue
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息队列
- en: The message queue is an important additional method of interaction within different
    services. While the RESTful API has a timeout limit, the message queue doesn't
    have this kind of drawback. Therefore, it helps to handle long-running processes
    or delayed messages. Also, it allows a more uniform load on the backend. It does
    not have a critical feature for working with AWS Lambda, since Lambda can easily
    scale, but it can be very useful when dealing with clusters. Finally, the message
    queue allows retry logic, meaning that failed tasks can be sent back multiple
    times. Now let's look more into AWS SQS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 消息队列是不同服务之间互动的重要附加方式。虽然 RESTful API 有超时限制，但消息队列没有这种缺点。因此，它有助于处理长时间运行的过程或延迟消息。另外，它允许后端负载更均匀。它对于与
    AWS Lambda 一起工作并非关键功能，因为 Lambda 可以轻松扩展，但在处理集群时非常有用。最后，消息队列支持重试逻辑，这意味着失败的任务可以被多次重新发送。现在让我们更深入地了解
    AWS SQS。
- en: Introduction to AWS SQS
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS SQS 介绍
- en: Basically, this is an AWS service that allows the sending, receipt, and storage
    of messages. It can be connected to any processing backend. It has a pay-as-you-go
    system, which makes it very convenient as a starting point.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这是一个 AWS 服务，允许发送、接收和存储消息。它可以连接到任何处理后端。它采用按需付费系统，这使其成为一个非常方便的起点。
- en: AWS API gateway features
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS API 网关特性
- en: 'The different features of AWS API are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: AWS API 的不同特性如下：
- en: It is extremely scalable, and you don't have to manage any other scaling in
    the queue.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有极高的可扩展性，你无需管理队列中的其他扩展。
- en: The service handles access from readers to the queue, so it's something that
    you don't have to implement.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该服务处理来自读者的队列访问，因此你无需实现此功能。
- en: SQS has a customizable retry mechanism that increases the probability of avoiding
    errors, which improves the overall speed.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQS 拥有可自定义的重试机制，增加了避免错误的概率，从而提高了整体速度。
- en: SQS provides very simple APIs, which you can use in almost any programming language.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQS 提供非常简单的 API，你可以在几乎任何编程语言中使用它。
- en: Finally, it provides encryption, which could be useful for improving the security
    of your service.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，它提供加密功能，这对于提高服务的安全性非常有用。
- en: AWS SQS pricing
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS SQS 定价
- en: One of the main advantages of SQS is the pay-per-user-go system, which is very
    simple. Pricing is 50 cents per 1 million requests and the first one million requests
    are free every month. This makes it perfect for early projects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: SQS 的主要优势之一是按用户付费系统，非常简单。定价为每 100 万次请求 50 美分，每月前 100 万次请求免费。这使它非常适合早期项目。
- en: Creating an AWS SQS connection using an AWS Console
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS 控制台创建 AWS SQS 连接
- en: In this section, we will initially create an AWS Lambda, and then create the
    simple query service, before connecting SQS to AWS Lambda.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先创建一个 AWS Lambda，然后创建简单查询服务，最后将 SQS 连接到 AWS Lambda。
- en: Creating an AWS Lambda instance
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 AWS Lambda 实例
- en: 'The following are the steps for creating the AWS Lambda instance:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 AWS Lambda 实例的步骤如下：
- en: 'First, add the name under Name, choose Runtime as Python 3.6, set Role as Choose
    an  existing role, then from Existing role choose `lambda1`, and click on Create
    function, as shown here:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在“名称”下添加名称，选择运行时为Python 3.6，将角色设置为“选择现有角色”，然后从现有角色中选择`lambda1`，点击“创建函数”，如图所示：
- en: '![](img/b385768b-6389-4a9a-b300-15f253d821fb.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b385768b-6389-4a9a-b300-15f253d821fb.png)'
- en: 'The Lambda function is created as shown in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda函数创建成功，如下截图所示：
- en: '![](img/8089ef55-5533-4e14-8202-9c5019c94c65.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8089ef55-5533-4e14-8202-9c5019c94c65.png)'
- en: 'Next, switch to SQS and create a SQS queue by selecting Create New Queue:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，切换到SQS并通过选择“创建新队列”来创建一个SQS队列：
- en: '![](img/21706e6c-9e8f-4625-9f1d-0959623d93c0.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21706e6c-9e8f-4625-9f1d-0959623d93c0.png)'
- en: 'After creating a queue named testLambda, we get the SQS ARN as highlighted
    in the following screenshot:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建名为testLambda的队列后，我们得到如下截图中高亮显示的SQS ARN：
- en: '![](img/ec3309d6-7bfb-4622-91c7-1275fda63a64.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec3309d6-7bfb-4622-91c7-1275fda63a64.png)'
- en: '5\. From the Designer tab on the left, choose SQS as the trigger:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 在左侧的Designer标签页中，选择SQS作为触发器：
- en: '![](img/bc60d8d0-5246-477b-b9eb-ff3fe1531127.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc60d8d0-5246-477b-b9eb-ff3fe1531127.png)'
- en: 'We will send some messages to the queue by selecting Send a Message from the Queue
    Actions drop-down list:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过选择“队列操作”下拉菜单中的“发送消息”来向队列发送一些消息：
- en: '![](img/ed4cad1c-a03e-4867-960f-b11cc4bf5a2a.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed4cad1c-a03e-4867-960f-b11cc4bf5a2a.png)'
- en: 'As you can see, we have only one message available, meaning they all were consumed
    by Lambda as shown in the following screenshot:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，我们只有一条可用消息，意味着所有消息都已经被Lambda消费，如下截图所示：
- en: '![](img/df0aaea3-c35d-4cab-9ebc-5c4a60f81224.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df0aaea3-c35d-4cab-9ebc-5c4a60f81224.png)'
- en: '8\. By clicking Monitoring, we get a detailed overview as shown:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 点击“监控”后，我们会看到如下详细概览：
- en: '![](img/0113f961-b532-4d60-8549-d41511dae11e.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0113f961-b532-4d60-8549-d41511dae11e.png)'
- en: We also get to see the log details by clicking on View logs in CloudWatch as
    shown in the preceding screeenshot. Each start and end means invocation for each
    message.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以通过点击CloudWatch中的“查看日志”来查看日志详情，如前述截图所示。每次开始和结束意味着每条消息的调用。
- en: The next section concerns the creation of an AWS SQS connection to AWS Lambda
    using the serverless framework.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分讲解如何使用无服务器框架创建一个AWS SQS连接到AWS Lambda。
- en: Creating an AWS SQS connection using the serverless framework
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无服务器框架创建AWS SQS连接
- en: To create the SQS connection, we have the main Python file and the serverless
    configuration file. The configuration file will be a little complex. We will need
    to define SQS in the resources section, edit as event source for Lambda, and then
    enable Lambda to read from SQS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建SQS连接，我们有主Python文件和无服务器配置文件。配置文件会稍微复杂一些，我们需要在资源部分定义SQS，将其作为Lambda的事件源，然后允许Lambda从SQS读取数据。
- en: The Python file
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python文件
- en: 'The main difference for the Python file will be that, instead of returning
    a string, we will write to another SQS query, as shown:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python文件的主要区别是，我们将不再返回一个字符串，而是写入另一个SQS查询，如下所示：
- en: '![](img/bc7425d7-37a2-48f1-b35b-782328043304.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc7425d7-37a2-48f1-b35b-782328043304.png)'
- en: Code
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: Before starting with the code, we will first need to deploy the serverless framework,
    and then we need to check that it runs using the command-line interface. We will
    run the code using the `index.py` file and the `serverless.yml` configuration
    file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写代码之前，我们首先需要部署无服务器框架，然后通过命令行界面检查它是否能够运行。我们将使用`index.py`文件和`serverless.yml`配置文件来运行代码。
- en: serverless.yml
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: serverless.yml
- en: 'In the `serverless.yml` file, we can see all the sections that we discussed
    in the previous chapters, especially the part where we define the role for accessing
    the query from where we will read messages, and to which our Lambda will write.
    The following code shows the explanation:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`serverless.yml`文件中，我们可以看到我们在之前章节中讨论的所有部分，特别是定义访问查询的角色部分，我们将在其中读取消息，并且Lambda将写入此查询。以下代码展示了解释：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We also have to define that one of the queries will act as an event source,
    as shown:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要定义其中一个查询将作为事件源，正如下图所示：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, we define the queries, which we can perform in the resource section
    as shown in the code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义查询，这些查询可以在资源部分执行，如代码所示：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, we will need to use the plugin `serverless-pseudo-parameters`, which
    we will install:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要使用插件`serverless-pseudo-parameters`，我们将安装它：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will need to remove the package with the preceding plugin from the `deployment`
    package as shown:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从`deployment`包中删除带有前述插件的包，如下所示：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next is to use this plugin to access the ID of the region that we use and our
    account ID as shown:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用此插件访问我们使用的区域ID和账户ID，如下所示：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can access the account ID and the ID of a region without this plugin and
    just manually find it as well.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在没有这个插件的情况下访问账户ID和区域ID，或者手动查找它们。
- en: index.py
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: index.py
- en: 'The `index.py` file is very simple. We just read incoming messages and then
    write them as SQS. The following shows the code for `index.py`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.py`文件非常简单。我们只是读取传入的消息，然后将其写入SQS。以下是`index.py`的代码：'
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will see the preceding `index.py` and `serverless.yml` files in the command
    line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到前面的`index.py`和`serverless.yml`文件在命令行中的输出：
- en: 'First of all, we need to install plugin, `serverless-pseudo-parameters`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装插件`serverless-pseudo-parameters`：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/9dd7aebe-03eb-4ce7-a058-f94aedccba8a.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dd7aebe-03eb-4ce7-a058-f94aedccba8a.png)'
- en: 'Next, we will deploy Lambda using the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下命令部署Lambda：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, the plugin replaced the region with the actual base region
    and account as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，插件已将区域替换为实际的基础区域和账户，如下图所示：
- en: '![](img/142a3105-5000-478e-b270-2200cdb679cd.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/142a3105-5000-478e-b270-2200cdb679cd.png)'
- en: 'To send a message through the queue, first we need to find the queue URL using
    the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过队列发送消息，首先我们需要使用以下命令查找队列的URL：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the queue URL, we can send messages. We see the command executed successfully
    here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有了队列URL，我们就可以发送消息。我们看到命令成功执行：
- en: '![](img/b4762bea-b362-4ada-8bad-fd11a49424fd.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4762bea-b362-4ada-8bad-fd11a49424fd.png)'
- en: 'Now we can read the same message from the SQS queue. Basically, here we can
    check  whether Lambda has received the message that we have sent, which is `Hello
    world1`, and send it to write SQL. We see that Lambda works successfully and we
    can see the resulting message, `Hello world1`, in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从SQS队列中读取相同的消息。基本上，在这里我们可以检查Lambda是否已接收到我们发送的消息`Hello world1`，并将其发送到SQL写入。我们看到Lambda成功运行，并且可以在以下截图中看到结果消息`Hello
    world1`：
- en: '![](img/8ff07274-2898-49de-a34a-7b2814427375.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ff07274-2898-49de-a34a-7b2814427375.png)'
- en: Example project – deep learning pipeline
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例项目 – 深度学习管道
- en: In the project files, we have the main Python file, the serverless configuration
    file, libraries files, and an inception module. The configuration file will be
    the same as the one we used in the previous chapter. We will look at the Python
    file. The main difference for our Python file will be that, instead of returning
    the string, we will send a message to another SQS query. Also, we will make Lambda
    accept the link to the image in the message, and then apply module to structure
    it. The deployment will be similar to the one in the previous section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件中，我们有主要的Python文件、无服务器配置文件、库文件和一个启动模块。配置文件将与我们在前一章中使用的配置文件相同。我们将查看Python文件。我们Python文件的主要区别在于，我们将不再返回字符串，而是将消息发送到另一个SQS查询。此外，我们将使Lambda接受消息中的图片链接，然后应用模块进行结构化。部署将与前一节中的类似。
- en: We will skip the deployment of the model, since we have covered it before.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将跳过模型的部署，因为我们之前已经讲解过了。
- en: Code
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: First, we will need to deploy the serverless framework, and then we can check
    that it runs using the command-line interface. We have the `index.py` file and
    the `serverless.yml` configuration file. We also have libraries for TensorFlow
    and pre-installed plugins for the serverless framework.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要部署无服务器框架，然后可以使用命令行界面检查它是否运行。我们有`index.py`文件和`serverless.yml`配置文件。我们还为TensorFlow提供了库，并为无服务器框架预安装了插件。
- en: Configuration file - serverless.yml
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件 - serverless.yml
- en: We can see that the current configuration file is taken from the preceding sections.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到当前的配置文件来自前面的部分。
- en: 'We have a bucket where we keep our model, as shown in the following code snippet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个存储模型的存储桶，如下所示的代码片段：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There is an event source for Lambda and resources, as shown in the following
    code snippet:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个Lambda的事件源和资源，如下所示的代码片段：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: index.py
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: index.py
- en: 'In the `index.py` file, the script looks the same way as it did in the previous
    section. An additional part has been added, which is reading the URL from the
    message and writing the result to another queue. The following is the code snippet
    for `index.py`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.py`文件中，脚本与前一节中的一样。添加了一个额外的部分，即从消息中读取URL并将结果写入另一个队列。以下是`index.py`的代码片段：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the part where we retrieve the image and run
    our model on it, and hence, we write the result of the model to another queue,
    as shown:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了我们如何检索图像并在其上运行模型，因此，我们将模型的结果写入另一个队列，如下所示：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now let''s deploy the service as shown:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们按照如下方式部署服务：
- en: '![](img/27e1f796-47b8-4291-a5d8-4ddc64f8cc6f.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27e1f796-47b8-4291-a5d8-4ddc64f8cc6f.png)'
- en: 'We will send the message with a URL to the first queue. This can be done with
    the command-line interface:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过命令行界面将带有URL的消息发送到第一个队列：
- en: '![](img/e6c11837-4ede-4d69-9d6e-1c912ec9d3ec.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6c11837-4ede-4d69-9d6e-1c912ec9d3ec.png)'
- en: 'We can read the sent message from another queue as shown here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从另一个队列中读取发送的消息，如下所示：
- en: '![](img/05cee0bc-e1e1-4439-bd50-381b227977bd.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05cee0bc-e1e1-4439-bd50-381b227977bd.png)'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we were introduced to AWS SQS, which included the features
    as well as a look at its pricing. We also created AWS SQS connection using both
    the AWS console and the serverless framework.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了AWS SQS，包括其功能以及定价。我们还使用AWS控制台和无服务器框架创建了AWS SQS连接。
- en: We learned about the deployment of the `serverless.yml`  configuration file
    and the `index.py` file. This chapter concluded with an example project, which
    was a deep learning pipeline.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了`serverless.yml`配置文件和`index.py`文件的部署。本章以一个示例项目结束，该项目是一个深度学习管道。
- en: In the next chapter, we will learn about creating crossing workflow by connecting
    an AWS Lambda instance and AWS functions where we will learn how to make deep
    learning workflow.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何通过连接AWS Lambda实例和AWS函数创建跨越的工作流，并在其中学习如何构建深度学习工作流。
