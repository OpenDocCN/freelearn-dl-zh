- en: Working with Other Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他框架合作
- en: In [Chapter 4](95863955-3504-48ab-a217-e95339a754d3.xhtml), *Working with Caffe*,
    we learnt about Caffe and its relationship with Caffe2\. We examined the Caffe
    and Caffe2 model file formats and looked at the process of importing a pre-trained
    Caffe model into Caffe2 using AlexNet as an example. In this chapter, we will
    look at how to export from, and import to, Caffe2 from other popular DL frameworks.
    And we will also look at how to enable other DL frameworks to use a model trained
    with Caffe2.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](95863955-3504-48ab-a217-e95339a754d3.xhtml)，*与Caffe合作*中，我们了解了Caffe及其与Caffe2的关系。我们研究了Caffe和Caffe2的模型文件格式，并以AlexNet为例，探讨了如何将一个预训练的Caffe模型导入Caffe2。在本章中，我们将学习如何从其他流行的深度学习框架导出和导入到Caffe2。同时，我们还将探讨如何使其他深度学习框架使用Caffe2训练的模型。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: The ONNX model format
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ONNX模型格式
- en: Support for ONNX in Caffe2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caffe2对ONNX的支持
- en: How to export a Caffe2 model to ONNX format
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Caffe2模型导出为ONNX格式
- en: How to import an ONNX model into Caffe2
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将ONNX模型导入到Caffe2
- en: How to visualize ONNX models
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何可视化ONNX模型
- en: Open Neural Network Exchange
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放神经网络交换
- en: '**Open Neural Network Exchange** (**ONNX**), typically pronounced as *on-niks*,
    is a format to represent a computation graph, with support for a wide variety
    of operators and data types. This format is general enough to support both neural
    networks and traditional ML models. Started by Facebook and Microsoft, this format
    has quickly gained a reputation as a popular format for the export and import
    of deep neural networks among most DL frameworks.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放神经网络交换** (**ONNX**)，通常发音为*on-niks*，是一种表示计算图的格式，支持多种运算符和数据类型。这种格式足够通用，支持神经网络和传统机器学习模型。由Facebook和微软发起，这种格式迅速成为大多数深度学习框架中，导入和导出深度神经网络的流行格式。'
- en: Installing ONNX
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装ONNX
- en: 'The ONNX source code can be found online at: [https://github.com/onnx/onnx](https://github.com/onnx/onnx)
    This includes definitions of the format and scripts to operate on ONNX files.
    Libraries and tools to convert from and to specific DL framework formats are usually
    provided by DL frameworks.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ONNX的源代码可以在线找到：[https://github.com/onnx/onnx](https://github.com/onnx/onnx)。其中包括格式定义和操作ONNX文件的脚本。用于从特定深度学习框架格式进行转换的库和工具通常由深度学习框架提供。
- en: DL frameworks with built-in support for ONNX include Caffe2, PyTorch, MXNet,
    and Chainer. There are also converters to convert to and from other DL frameworks,
    such as TensorFlow. There are runtimes that can use ONNX models on specialized
    hardware accelerators. For example, TensorRT provides an inference runtime with
    ONNX support for use on NVIDIA GPUs, and OpenVINO does the same for use on Intel
    CPUs. (We will discuss TensorRT and OpenVINO in [Chapter 6](800ca2c2-fb20-4ad3-9268-12bb0aa83b8a.xhtml),
    *Deploying Models to Accelerators for Inference*.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 内建支持ONNX的深度学习框架包括Caffe2、PyTorch、MXNet和Chainer。也有转换器可以在不同的深度学习框架之间进行转换，比如TensorFlow。还有一些运行时可以在专用硬件加速器上使用ONNX模型。例如，TensorRT提供了支持ONNX的推理运行时，用于NVIDIA
    GPU，而OpenVINO则为Intel CPU提供了相应的支持。（我们将在[第6章](800ca2c2-fb20-4ad3-9268-12bb0aa83b8a.xhtml)，*将模型部署到加速器进行推理*中讨论TensorRT和OpenVINO。）
- en: 'The Python library of ONNX can be installed easily, using the following command
    on Ubuntu:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ONNX的Python库可以轻松安装，使用以下命令在Ubuntu上进行安装：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can check if the installation was successful by testing whether the following
    command at the shell executes successfully:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令在终端执行来检查安装是否成功：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ONNX format
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ONNX格式
- en: ONNX is an open source format and its specification and source code can be found
    online at [https://github.com/onnx/onnx](https://github.com/onnx/onnx). In [Chapter
    4](95863955-3504-48ab-a217-e95339a754d3.xhtml), *Working with Caffe*, we observed
    how both Caffe2 and Caffe use Google ProtoBuf for defining the data structure
    for serialization and deserialization of their network structures and weights.
    ONNX also uses Google ProtoBuf. It supports both ProtoBuf versions 2 and 3.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ONNX是一个开源格式，其规范和源代码可以在线找到：[https://github.com/onnx/onnx](https://github.com/onnx/onnx)。在[第4章](95863955-3504-48ab-a217-e95339a754d3.xhtml)，*与Caffe合作*中，我们观察到Caffe2和Caffe都使用Google
    ProtoBuf来定义数据结构，以便进行网络结构和权重的序列化和反序列化。ONNX也使用Google ProtoBuf，支持ProtoBuf的版本2和3。
- en: The definition of a graph, such as that of a neural network or generally any
    ML model, defines the various operators that the graph is composed of, the operators'
    parameters and the relationship between the operators. The syntax and semantics
    of this information are defined in ONNX as two distinct representations. The **Intermediate
    Representation** (**IR**) defines constructs, such as graph, node, and tensor.
    The operators define the various types of possible operators in the graph.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图的定义，如神经网络或一般任何机器学习模型的图，定义了图所包含的各种操作符、操作符的参数以及操作符之间的关系。这些信息的语法和语义在ONNX中定义为两种不同的表示方式。**中间表示**（**IR**）定义了构造，例如图、节点和张量。操作符定义了图中可能的各种操作符类型。
- en: ONNX IR
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ONNX IR
- en: The ProtoBuf definition of the ONNX computation graph and its data types can
    be found defined in the `onnx/onnx.in.proto` file in the ONNX source code. These
    are also referred to as the IR of ONNX.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ONNX计算图及其数据类型的ProtoBuf定义可以在ONNX源代码中的`onnx/onnx.in.proto`文件中找到。这些也被称为ONNX的IR。
- en: 'By examining the IR definition of ONNX in the preceding file we can see the
    following definitions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查前述文件中ONNX的IR定义，我们可以看到以下定义：
- en: '`NodeProto`: Used to define each of the layers in a neural network or each
    of the nodes in other ML models.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NodeProto`：用于定义神经网络中的每一层或其他机器学习模型中的每个节点。'
- en: '`ModelProto`: Used to define a model and its associated graph.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ModelProto`：用于定义一个模型及其相关图。'
- en: '`GraphProto`: Used to define the **directed acyclic graph** (**DAG**) structure
    of a neural network or the graph of other ML models.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GraphProto`：用于定义神经网络的**有向无环图**（**DAG**）结构或其他机器学习模型的图结构。'
- en: '`TensorProto`: Used to define an N-dimensional tensor.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorProto`：用于定义一个N维张量。'
- en: '`TypeProto`: Used to define the ONNX data types.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TypeProto`：用于定义ONNX数据类型。'
- en: ONNX operators
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ONNX操作符
- en: The definition of an operator in ONNX can be found in the `onnx/onnx-operators.in.proto`
    file in the ONNX source code. We can find the definitions of `OperatorProto`,
    `OperatorSetProto`, and `FunctionProto` in this file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ONNX中操作符的定义可以在ONNX源代码中的`onnx/onnx-operators.in.proto`文件中找到。我们可以在该文件中找到`OperatorProto`、`OperatorSetProto`和`FunctionProto`的定义。
- en: The actual definitions of all the operators supported in ONNX can be found in
    C++ source files named `defs.cc` in subdirectories under the `onnx/defs` directory
    in the ONNX source code. For example, many of the common neural network operators
    can be found defined in the `onnx/defs/math/defs.cc` and `onnx/defs/nn/defs.cc`
    files in the ONNX source code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ONNX中所有支持的操作符的实际定义可以在ONNX源代码中的`onnx/defs`目录下的子目录中的C++源文件`defs.cc`中找到。例如，许多常见的神经网络操作符可以在ONNX源代码中的`onnx/defs/math/defs.cc`和`onnx/defs/nn/defs.cc`文件中找到。
- en: 'For another example, consider the ReLU operator that we introduced in [Chapter
    3](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml), *Training Networks*. This operator
    has the name `Relu` (note the lower case *lu*) in ONNX and is defined in the `onnx/defs/math/defs.cc`
    file in the ONNX source code as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是我们在[第3章](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml)《训练网络》中介绍的ReLU操作符。该操作符在ONNX中的名称为`Relu`（注意小写*lu*），并且在ONNX源代码中的`onnx/defs/math/defs.cc`文件中定义如下：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can see that every operator is defined using the `ONNX_OPERATOR_SET_SCHEMA`
    macro. This macro is defined in the `onnx/defs/schema.h` source file as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，每个操作符都是使用`ONNX_OPERATOR_SET_SCHEMA`宏定义的。这个宏在`onnx/defs/schema.h`源文件中定义，如下所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can see that every operator definition has three components: name (`name`),
    version (`ver`) and implementation (`impl`).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，每个操作符定义都有三个组成部分：名称（`name`）、版本（`ver`）和实现（`impl`）。
- en: 'Thus, for the example of the `Relu` operator we saw in the preceding definition,
    we can deduce the following characteristics:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于我们在前述定义中看到的`Relu`操作符示例，我们可以推导出以下特征：
- en: '**Name**: The name of the operator in ONNX. In this case, it is `Relu`. Note
    that individual DL frameworks might map this name to a distinct operator or layer
    name in their own DL framework. That is, the name in ONNX and the corresponding
    name in the DL framework may not always be the same.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：操作符在ONNX中的名称。在本例中，它是`Relu`。请注意，单独的深度学习框架可能将这个名称映射到它们自己深度学习框架中的不同操作符或层名称。也就是说，ONNX中的名称与深度学习框架中的对应名称不一定总是相同。'
- en: '**Version**: The version of the definition of this operator. In this case,
    it is version 6.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：该操作符定义的版本。在本例中，它是版本6。'
- en: '**Implementation**:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现**：'
- en: 'A documentation string explaining what the operator does. In this case, it
    is as follows:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释该操作符作用的文档字符串。在本例中，它如下所示：
- en: '"Relu takes one input data (Tensor<T>) and produces one output data (Tensor<T>)
    where the rectified linear function, y = max(0, x), is applied to the tensor elementwise."'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"Relu 接受一个输入数据（Tensor<T>）并产生一个输出数据（Tensor<T>），其中应用了修正线性函数，y = max(0, x)，该函数逐元素作用于张量。"'
- en: The input operands. In this case, a single tensor.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入操作数。在这种情况下，是一个单一的张量。
- en: The output operands. In this case, a single tensor.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出操作数。在这种情况下，是一个单一的张量。
- en: Constraints on the data type of the tensor values. In this case, ONNX is stating
    that it only supports data types of float (32-bit), double (64-bit) and float16
    (16-bit, sometimes called half) for tensor values.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 张量值的数据类型限制。在这种情况下，ONNX 声明它仅支持浮点数（32位）、双精度（64位）和 float16（16位，有时称为半精度）作为张量值的数据类型。
- en: A function to infer the type and shape of the tensor operands. In this case,
    it states that the output tensor must have the same type and shape as the input
    tensor. It does this by using the function named `propagateShapeAndTypeFromFirstInput`.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于推断张量操作数类型和形状的函数。在这种情况下，它声明输出张量必须具有与输入张量相同的类型和形状。它通过使用名为 `propagateShapeAndTypeFromFirstInput`
    的函数来实现这一点。
- en: From the example of the preceding definition of the Relu operator, we can see
    that every operator definition has a lot of documentation embedded in it. All
    of this is used to auto-generate the complete ONNX operator documentation. This
    auto-generated documentation can be found as the `docs/Operators.md` files in
    the ONNX source code. This is a useful reference when we are searching for a suitable
    ONNX operator or trying to understand the details of a particular ONNX operator.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面定义的 Relu 操作符示例中，我们可以看到每个操作符定义中都包含了大量文档内容。所有这些内容用于自动生成完整的 ONNX 操作符文档。这个自动生成的文档可以在
    ONNX 源代码中的 `docs/Operators.md` 文件中找到。当我们在寻找合适的 ONNX 操作符或尝试理解某个特定 ONNX 操作符的细节时，这是一个有用的参考。
- en: 'For example, the auto-generated documentation of the `Relu` operator that we
    considered previously appears as shown as follows in Figure 5.1:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们之前考虑过的 `Relu` 操作符的自动生成文档在图 5.1 中显示如下：
- en: '![](img/56a9af30-3dbc-4a97-89d4-f8d536d158f7.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56a9af30-3dbc-4a97-89d4-f8d536d158f7.png)'
- en: 'Figure 5.1: Auto-generated Relu operator documentation in ONNX'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1：ONNX 中自动生成的 Relu 操作符文档
- en: ONNX in Caffe2
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ONNX 在 Caffe2 中
- en: Caffe2 has built-in support for ONNX. This includes support for exporting Caffe2
    models to ONNX format and importing ONNX models directly for inference in Caffe2\.
    C++ source files related to Caffe2's support of ONNX can be found in the `onnx`
    directory in the Caffe2 source code. Python source files that provide the frontend
    and backend support for ONNX can be found in the `python/onnx` directory in the
    Caffe2 source code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2 原生支持 ONNX。这包括将 Caffe2 模型导出为 ONNX 格式的支持，以及直接导入 ONNX 模型进行 Caffe2 推理的支持。与
    Caffe2 支持 ONNX 相关的 C++ 源文件可以在 Caffe2 源代码中的 `onnx` 目录找到。提供 ONNX 前端和后端支持的 Python
    源文件可以在 Caffe2 源代码中的 `python/onnx` 目录找到。
- en: The `onnx/onnx_exporter.h` and `onnx/onnx_exporter.cc` contain the definitions
    necessary to export a Caffe2 model to ONNX format. Support for exporting from
    Caffe2 to ONNX includes details such as the mapping from Caffe2 to ONNX for operators,
    data types, and transformations of data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`onnx/onnx_exporter.h` 和 `onnx/onnx_exporter.cc` 包含了将 Caffe2 模型导出为 ONNX 格式所需的定义。从
    Caffe2 导出到 ONNX 的支持包括操作符、数据类型的映射以及数据转换等细节。'
- en: 'For example, in `onnx/onnx_exporter.cc` we find the following mapping of some
    Caffe2 operators to ONNX operators:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 `onnx/onnx_exporter.cc` 中，我们可以找到一些 Caffe2 操作符到 ONNX 操作符的映射：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Every DL framework that uses ONNX will have such a mapping. This is because
    every DL framework tends to have its own distinct operator or layer naming and
    a distinct jargon of defining the operator characteristics and relationships between
    operators. So, a clear and complete mapping is necessary for a DL framework to
    be able to digest an ONNX model definition into its own graph definition.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个使用 ONNX 的深度学习框架都有这样的映射。这是因为每个深度学习框架通常都有自己独特的操作符或层命名方式，并且在定义操作符特性和操作符之间的关系时有不同的术语。因此，清晰而完整的映射对于深度学习框架能够将
    ONNX 模型定义转化为其自身的图定义至关重要。
- en: From the mapping between Caffe2 and ONNX we can see that the Caffe2 `SpatialBN`
    operator is renamed as the `BatchNormalization` operator in ONNX. Similarly, the
    Caffe2 `Conv2D` operator is renamed as the `Conv` operator in ONNX.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Caffe2 和 ONNX 之间的映射关系可以看出，Caffe2 的 `SpatialBN` 操作符在 ONNX 中被重命名为 `BatchNormalization`
    操作符。同样，Caffe2 的 `Conv2D` 操作符在 ONNX 中被重命名为 `Conv` 操作符。
- en: Exporting the Caffe2 model to ONNX
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Caffe2 模型导出为 ONNX
- en: Caffe2 models can be easily exported to ONNX format using Python. This enables
    a vast number of other DL frameworks to use our Caffe2 models for training and
    inference. The `frontend` module provided by Caffe2-ONNX does all of the heavy
    lifting of the exporting. This module is located as the `python/onnx/frontend.py`
    file in the Caffe2 source code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2模型可以通过Python轻松导出为ONNX格式。这使得大量其他深度学习框架可以使用我们的Caffe2模型进行训练和推理。Caffe2-ONNX提供的`frontend`模块完成了导出的所有繁重工作。该模块位于Caffe2源代码中的`python/onnx/frontend.py`文件。
- en: The `ch5/export_to_onnx.py` script provided along with this book's source code
    shows how to export an existing Caffe2 model to ONNX format. As an example, consider
    converting the Caffe2 model of AlexNet that we created in [Chapter 4](95863955-3504-48ab-a217-e95339a754d3.xhtml),
    *Working wi**th Caffe*. We exported the operators and the weights of this network
    in Caffe2 to the files `predict_net.pb` and `init_net.pb` files respectively.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本书源代码中提供的`ch5/export_to_onnx.py`脚本展示了如何将现有的Caffe2模型导出为ONNX格式。举个例子，考虑将我们在[第4章](95863955-3504-48ab-a217-e95339a754d3.xhtml)中创建的AlexNet
    Caffe2模型转换为ONNX。我们将这个网络的操作符和权重分别导出到`predict_net.pb`和`init_net.pb`文件中。
- en: 'We can invoke the ONNX conversion script, as follows, to convert this Caffe2
    model to an ONNX file named `alexnet.onnx`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调用ONNX转换脚本，按照以下方式将这个Caffe2模型转换为名为`alexnet.onnx`的ONNX文件：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's look at the pertinent sections of this script that help us to export from
    Caffe2 to ONNX.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个脚本中帮助我们从Caffe2导出到ONNX的相关部分。
- en: 'First are the imports, which are seen in the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是导入，如下代码所示：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `caffe2.proto.caffe2_pb2` module has the functionality needed to import
    the Caffe2 models stored in the `protobuf` format. The `onnx` and `caffe2.python.onnx.frontend`
    modules have the functionality that's necessary to export to ONNX format.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`caffe2.proto.caffe2_pb2`模块具备导入存储在`protobuf`格式中的Caffe2模型所需的功能。`onnx`和`caffe2.python.onnx.frontend`模块具备导出到ONNX格式所需的功能。'
- en: 'In the following script we also define the name and shape of the inputs to
    the model:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下脚本中，我们还定义了模型输入的名称和形状：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In [Chapter 4](95863955-3504-48ab-a217-e95339a754d3.xhtml), *Working with Caffe*,
    you might have noticed that the input layer and parameters are annotated in the
    Caffe `protobuf` format. However, this information is not stored in both the Caffe2
    `protobuf` format and the ONNX format. We would need to explicitly indicate the
    name and shape of the input whenever we use a Caffe2 and ONNX model.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](95863955-3504-48ab-a217-e95339a754d3.xhtml)，*使用Caffe*中，你可能注意到输入层和参数是以Caffe的`protobuf`格式注解的。然而，这些信息并没有同时存储在Caffe2的`protobuf`格式和ONNX格式中。每次使用Caffe2和ONNX模型时，我们需要显式指定输入的名称和形状。
- en: We used an AlexNet model in this example, which has input named `data`, and
    the input shape is `(1, 3, 227, 227)`. Note that not all models have this input
    shape. For example, popular CNN models have inputs with the shape `(1, 3, 224,
    224)`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个示例中使用了AlexNet模型，该模型的输入名为`data`，输入形状为`(1, 3, 227, 227)`。请注意，并不是所有模型都有这个输入形状。例如，流行的CNN模型的输入形状是`(1,
    3, 224, 224)`。
- en: 'We are now ready to read in the Caffe2 model files using the `caffe2_pb2` methods,
    as shown in the following example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好使用`caffe2_pb2`方法读取Caffe2模型文件，示例如下：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to read in both the `predict_net.pb` and `init_net.pb` Caffe2 model
    files, representing the network and its weights respectively. We do this by using
    the familiar `ParserFromString` method, which originates from the Google ProtoBuf
    Python library.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要读取`predict_net.pb`和`init_net.pb`这两个Caffe2模型文件，分别表示网络和其权重。我们通过使用熟悉的`ParserFromString`方法来实现这一点，该方法来自Google的ProtoBuf
    Python库。
- en: 'Next we should initialize the data type and tensor shape of the input and associate
    that information with the input name using a Python dictionary, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该初始化输入的数据类型和张量形状，并使用Python字典将这些信息与输入名称关联起来，如下所示：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can now convert the Caffe2 `protobuf` objects to an ONNX `protobuf` object
    using the `caffe2_net_to_onnx_model` method of the `frontend` module, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用`frontend`模块的`caffe2_net_to_onnx_model`方法将Caffe2的`protobuf`对象转换为ONNX的`protobuf`对象，如下所示：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note how this conversion method needs the input information, stored in `value_info`,
    for the conversion.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此转换方法需要转换所需的输入信息，这些信息存储在`value_info`中。
- en: 'Finally, we can serialize the ONNX `protobuf` object to a byte buffer using
    the ProtoBuf `SerializeToString` method and then write that buffer to disk, as
    follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用ProtoBuf的`SerializeToString`方法将ONNX的`protobuf`对象序列化为字节缓冲区，然后将该缓冲区写入磁盘，如下所示：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The full source code of the `ch5/export_to_onnx.py` script is listed as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`ch5/export_to_onnx.py`脚本的完整源代码如下所示：'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using the ONNX model in Caffe2
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Caffe2中使用ONNX模型
- en: In the previous section, we converted a Caffe2 model to ONNX format so that
    it could be used with other DL frameworks. In this section, we will learn how
    to use an ONNX model exported from other DL frameworks into Caffe2 for inference.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们将一个Caffe2模型转换为ONNX格式，以便与其他深度学习框架一起使用。在这一节中，我们将学习如何使用从其他深度学习框架导出的ONNX模型在Caffe2中进行推断。
- en: The `backend` module provided in the Caffe2 ONNX package enables this import
    of the ONNX model to Caffe2\. This can be seen in the `backend.py` file in the
    `python/onnx` directory in the Caffe2 source code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe2 ONNX包中提供的`backend`模块使得将ONNX模型导入到Caffe2成为可能。这可以在Caffe2源代码中的`python/onnx/backend.py`文件中看到。
- en: The `ch5/run_onnx_model.py` script provided along with this book's source code
    demonstrates how to load an ONNX model to Caffe2, and run an inference on an input
    image using that model.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本书附带的`ch5/run_onnx_model.py`脚本展示了如何加载一个ONNX模型到Caffe2，并在输入图像上使用该模型进行推断。
- en: 'The script first imports the Python modules necessary to work with the images
    (`PIL.Image`), Caffe2, and ONNX (`caffe2.python.onnx.backend`) as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要导入Python模块以处理图像（`PIL.Image`）、Caffe2和ONNX（`caffe2.python.onnx.backend`）：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `prepare_input_image` method reads in an image from the input file path
    and prepares it to be passed as a blob to Caffe2, as shown in the following example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepare_input_image`方法从输入文件路径读取图像，并准备将其作为blob传递给Caffe2，如下例所示：'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code, we first used the `PIL.Image` module to read in the image
    from the input file as a 3-channel byte values. We then resized the image to the
    size required by AlexNet and used NumPy, which made the rest of the image processing
    easier. PIL reads the image channels in the order `HWC` (height, width, channel)
    and the channels are in `RGB` order. But AlexNet expects the data to be laid out
    as `BGR` channels of `HW` size. So, we converted to that format. Finally, we subtracted
    the mean from the image values and then added in a batch dimension in front to
    reformat the data to `NCHW` format.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们首先使用`PIL.Image`模块从输入文件中读取图像作为3通道字节值。然后，我们将图像调整大小以符合AlexNet所需的大小，并使用NumPy更轻松地进行其余的图像处理。PIL按照`HWC`（高度、宽度、通道）顺序读取图像通道，通道以`RGB`顺序排列。但是AlexNet期望数据按`BGR`通道和`HW`大小排列。因此，我们进行了格式转换。最后，我们从图像值中减去平均值，然后添加了一个批次维度到前面，重新格式化数据为`NCHW`格式。
- en: 'Loading the ONNX model from a file is easy if you use the `load` method from
    the `onnx` package, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`onnx`包的`load`方法，从文件加载ONNX模型是非常简单的，如下所示：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we can use the loaded ONNX model for inference directly, using the
    `predict_img_class` method described as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以直接使用加载的ONNX模型进行推断，使用如下所示的`predict_img_class`方法：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We need to use the `run_model` method, provided by Caffe2 ONNX backend `caffe2.python.backend`,
    to pass the inputs and obtain the results after inference through this model.
    Because we used an ImageNet model, we should use a JSON file with the mapping
    from the ImageNet class index number to its class name. We should pick the class
    index with the highest probability value and find its ImageNet class name.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用Caffe2 ONNX后端提供的`run_model`方法（`caffe2.python.backend`）来传递输入并获取模型推断后的结果。因为我们使用的是ImageNet模型，所以应该使用一个JSON文件，其中包含从ImageNet类索引号到其类名的映射。我们应该选择具有最高概率值的类索引，并找到其对应的ImageNet类名。
- en: Visualizing the ONNX model
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化ONNX模型
- en: When working with ONNX models, it can be useful to have a tool that can help
    in visualizing the network structure. ONNX ships with such a script called `net_drawer.py`.
    You can find this tool in the `onnx/onnx/tools` directory in the ONNX source repository.
    If you installed ONNX from its Python package, then you can find this script at
    `/usr/local/lib/python2.7/dist-packages/onnx/tools/net_drawer.py`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用ONNX模型时，有一个有用的工具可以帮助可视化网络结构。ONNX自带了一个名为`net_drawer.py`的脚本。您可以在ONNX源代码库的`onnx/onnx/tools`目录中找到此工具。如果您从其Python包中安装了ONNX，则可以在`/usr/local/lib/python2.7/dist-packages/onnx/tools/net_drawer.py`找到此脚本。
- en: This script can be applied to convert an ONNX file to a directed acyclic graph
    representation of the network in the GraphViz DOT format. For example, consider
    the ONNX file `alexnet.onnx` that we obtained in the earlier section on converting
    from the Caffe2 model to the ONNX model.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本可用于将 ONNX 文件转换为图网络的有向无环图表示，采用 GraphViz DOT 格式。例如，考虑我们在前一节将 Caffe2 模型转换为 ONNX
    模型时获得的 `alexnet.onnx` 文件。
- en: 'We can convert this AlexNet ONNX file to a DOT file using the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令将这个 AlexNet ONNX 文件转换为 DOT 文件：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To convert the DOT file to a PNG image file for viewing, use the following
    command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 DOT 文件转换为 PNG 图像文件进行查看，请使用以下命令：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The image thus produced, shows the visualization of AlexNet
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由此生成的图像展示了 AlexNet 的可视化效果。
- en: Another excellent visualization tool for ONNX models is Netron. The usage of
    this tool is covered in [Chapter 7](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml),
    *Caffe2 at the Edge and in the cloud*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优秀的 ONNX 模型可视化工具是 Netron。该工具的使用方法在[第七章](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml)，*边缘和云中的
    Caffe2* 中有详细介绍。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we introduced the details of the ONNX format, a popular representation
    for DL models. We examined how it depicts the intermediate representation and
    operators. We then looked at support for ONNX in Caffe2\. Using AlexNet as the
    example, we looked at how to convert a Caffe2 model file to ONNX format. We also
    looked at the reverse process: importing an ONNX model file into Caffe2, and then
    using it for inference. Finally, we looked at a useful tool to visualize the graph
    representation of an ONNX file.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 ONNX 格式的细节，这是一种流行的深度学习模型表示格式。我们探讨了它如何表示中间表示和操作符。然后，我们查看了 Caffe2 对 ONNX
    的支持。以 AlexNet 为例，我们演示了如何将 Caffe2 模型文件转换为 ONNX 格式。接着，我们又探讨了反向过程：将 ONNX 模型文件导入 Caffe2，并用于推理。最后，我们介绍了一个有用的工具，用于可视化
    ONNX 文件的图形表示。
