- en: Starting Deployment with AWS Lambda Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS Lambda 函数开始部署
- en: In this chapter, we will understand more about AWS Lambda and learn how it works.
    We will also discuss the different ways of deploying Lambda and the things we
    need to consider while developing applications for AWS Lambda.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入了解 AWS Lambda 并学习它是如何工作的。我们还将讨论部署 Lambda 的不同方式以及在为 AWS Lambda 开发应用时需要考虑的事项。
- en: We will learn how to set up an AWS account along with access management. We
    will also create a Hello World function using AWS Lambda.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何设置 AWS 账户以及访问管理。我们还将使用 AWS Lambda 创建一个 Hello World 函数。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖以下主题：
- en: AWS Lambda functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda 函数
- en: Getting started with AWS account
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 AWS 账户
- en: Introduction to Serverless framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架简介
- en: Deploying AWS Lambda functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 AWS Lambda 函数
- en: Technical Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements in this chapter are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: AWS subscription
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 订阅
- en: Python 3.6
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: AWS CLI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: Serverless framework
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架
- en: You can find all the codes at [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
    找到所有代码。
- en: AWS Lambda functions
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda 函数
- en: 'Let''s go through the pre-requisites of AWS Lambda as shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 AWS Lambda 的前提条件，如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It consists of the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它包括以下步骤：
- en: Importing libraries, which you have already installed on AWS Lambda. This includes
    system libraries and a number of AWS-specific libraries. You don't have to include
    these libraries within your package.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入你已在 AWS Lambda 上安装的库。这包括系统库和一些特定于 AWS 的库。你不必将这些库包含在你的包中。
- en: Importing external libraries, from other developers and companies, or your own
    libraries. You need to include them in your package.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入外部库，无论是其他开发者和公司的库，还是你自己的库。你需要将它们包括在你的包中。
- en: Implementing `handler` function which handles processing of the requests to
    the main variables as input event and context. The `event` is trigger-specific
    information and `context` is information about Lambda, which handles requests.
    It contains the ID and parameters of the function.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `handler` 函数，它处理将请求的主变量作为输入事件和上下文的处理。`event` 是特定于触发器的信息，`context` 是有关 Lambda
    的信息，用于处理请求。它包含函数的 ID 和参数。
- en: Process the request.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理请求。
- en: Return the `result`, this will either be provided back to the trigger in the
    event of a synchronous execution or it'll be saved to the log in the event of
    asynchronous execution.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 `result`，这将在同步执行时返回给触发器，或者在异步执行时将其保存到日志中。
- en: You need to keep in mind that you can't use any context or state other than
    the one which comes from the trigger. Also, if you print something during the
    code's execution, it will be saved to the local stream of the function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要记住的是，除了触发器提供的上下文或状态外，你不能使用任何其他上下文或状态。而且，如果你在代码执行过程中打印了某些内容，它会被保存到函数的本地流中。
- en: Pros, cons, and limitations of AWS Lambda
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda 的优缺点及限制
- en: 'There are certain pros, cons, and limitations of AWS Lambda, as described here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 有一些优缺点和限制，如下所述：
- en: '**Pros**: AWS Lambda is very easy to deploy. We don''t have to know the Docker
    or other container frameworks to manage it. It should only contain libraries and
    code. AWS Lambda easily connects to triggers, which means that we can easily integrate
    it with various other infrastructures and it is very scalable as well, which makes
    it extremely useful for production deployment. It is relatively inexpensive too.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：AWS Lambda 非常易于部署。我们无需了解 Docker 或其他容器框架来管理它。它只应包含库和代码。AWS Lambda 可以轻松连接到触发器，这意味着我们可以轻松地将其与其他基础设施集成，而且它非常具有可扩展性，这使得它在生产部署中非常有用。它的成本也相对较低。'
- en: '**Cons**: It may be difficult hard to debug in the various Lambdas locally.
    You have to recreate the entire environment and libraries and also be able to
    check your memory consumption during timeout. Making good estimations of how fast
    you will be able to produce high peak loads is quite difficult with AWS Lambda.
    AWS Lambda is stateless and it greatly effects how you organize your application.
    This means that the stage should come from the trigger.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：在多个 Lambda 本地调试时可能很困难。你必须重建整个环境和库，并能够在超时期间检查内存消耗。很难准确估计在 AWS Lambda
    上承受高峰负载时的速度。AWS Lambda 是无状态的，这会极大影响你如何组织应用程序。这意味着阶段应该来自触发器。'
- en: '**Limitations**: There are certain limitations with RAM, disk, CPU, and timeout
    which you have to consider during development.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制**：在开发过程中，你需要考虑 RAM、磁盘、CPU 和超时的某些限制。'
- en: 'The following diagram describes the pros, cons, and limitations in detail:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表详细描述了优缺点和限制：
- en: '![](img/89425dc0-bb93-4dc3-8bd1-46c757a5a414.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89425dc0-bb93-4dc3-8bd1-46c757a5a414.png)'
- en: Now that we have a fair idea with the pros, cons, and limitations of AWS Lambda,
    let us have a look at the basics of creating an AWS account.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经对 AWS Lambda 的优缺点和限制有了一个大致了解，接下来让我们看看如何创建 AWS 账户的基础知识。
- en: Getting started with AWS account
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 AWS 账户
- en: In this section, you will learn about the AWS free tier and the IAM. We need
    to have an AWS account to learn in depth.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将了解 AWS 免费套餐和 IAM。我们需要一个 AWS 账户来深入学习。
- en: If you do not have an AWS account, you can sign up here: [https://aws.amazon.com/account/](https://aws.amazon.com/account/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有 AWS 账户，可以在此注册：[https://aws.amazon.com/account/](https://aws.amazon.com/account/)。
- en: The Lambda API Gateway, the simple queue service, and functions are a part of
    the AWS Free Tier, so you won't be charged for a small amount of consumption.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda API 网关、简单队列服务和函数都是 AWS 免费套餐的一部分，因此对于少量的使用不会收费。
- en: AWS Free Tier
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 免费套餐
- en: 'The Free Tier allows you to have free usage of AWS services. It covers a number
    of different AWS services like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 免费套餐允许你免费使用 AWS 服务。它涵盖了多个不同的 AWS 服务，例如：
- en: '**AWS Lambda**: This covers 1 million invocations, which makes a Lambda perfect
    for hosting your pet project'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Lambda**：这包括 100 万次调用，这使得 Lambda 非常适合托管你的宠物项目'
- en: '**AWS API Gateway**: This covers 1 million requests through a paid gateway,
    so it can be extended to work on the project with an AWS REST API functionality'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS API Gateway**：这包括 100 万个通过付费网关的请求，因此可以扩展至具有 AWS REST API 功能的项目'
- en: '**AWS SQS**: This includes 1 million simple queue services and requests'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS SQS**：包括 100 万个简单队列服务请求'
- en: '**AWS step functions**: This includes 4,000 state transitions of step functions,
    which will allow us to create free serverless workflows'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Step Functions**：这包括 4,000 次步骤函数的状态转换，允许我们创建免费的无服务器工作流'
- en: Identity and Access Management (IAM)
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份与访问管理（IAM）
- en: 'There are two types of accesses that you can create for an AWS user:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为 AWS 用户创建两种类型的访问权限：
- en: '**AWS management control access**: This allows you to use AWS web services.
    The user needs to have a login ID and password, which the user will use online.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS 管理控制访问**：这允许你使用 AWS 网络服务。用户需要有一个登录 ID 和密码，用户将在线使用这些信息。'
- en: '**Programmatic access**: This allows you to use an AWS software development
    key. The user needs two keys: the access key ID and a secret access key.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**程序访问**：这允许你使用 AWS 软件开发密钥。用户需要两个密钥：访问密钥 ID 和秘密访问密钥。'
- en: Now, let's a create a user with programmatic access. It will allow us to use
    a serverless framework, which will manage the deployment and orchestration of
    AWS Lambdas.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个具有程序访问权限的用户。这将允许我们使用无服务器框架，管理 AWS Lambda 的部署和编排。
- en: 'In order to create the user, we will follow the below steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建用户，我们将按照以下步骤操作：
- en: 'First, you need to go to the AWS dashboard and choose the IAM service, as shown
    in the following screenshot:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要进入 AWS 控制台并选择 IAM 服务，如下图所示：
- en: '![](img/1eb32034-2c27-49b9-98a4-196e6563abd0.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1eb32034-2c27-49b9-98a4-196e6563abd0.png)'
- en: 'Next, go to the Users page and click on Add user, as shown here:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到用户页面并点击添加用户，如下所示：
- en: '![](img/f58936ce-a375-486a-b042-51e532a668c7.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f58936ce-a375-486a-b042-51e532a668c7.png)'
- en: 'Now, set up the name, `lambda`, and select the Programmatic access checkbox:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，设置名称为 `lambda`，并勾选程序访问复选框：
- en: '![](img/93b701c3-d6d2-472a-9395-86d9ad4b98e3.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93b701c3-d6d2-472a-9395-86d9ad4b98e3.png)'
- en: 'Next, you will need to set permissions for the user to use the AWS services
    discussed earlier. The easiest way to do that is by choosing Attach existing policies
    directly and then choosing the AdministratorAccess policy, as shown in the following
    screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要为用户设置权限，以便使用之前讨论过的AWS服务。最简单的方法是选择**直接附加现有策略**，然后选择**AdministratorAccess**策略，如下图所示：
- en: '![](img/460ef36a-ee11-4c37-bb77-39d9ebc507cd.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/460ef36a-ee11-4c37-bb77-39d9ebc507cd.png)'
- en: Finally, you need to confirm all the choices:![](img/eb2655cd-7ce4-4565-a02d-797415f9bd38.png)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要确认所有的选择：![](img/eb2655cd-7ce4-4565-a02d-797415f9bd38.png)
- en: 'It will show us the access key ID and secret access key. You can either copy
    them from the web service or save them through the CSV file. You will need these
    access keys later while setting up the serverless framework, as shown here:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将显示我们的访问密钥ID和密钥访问密钥。您可以从Web服务中复制它们或通过CSV文件保存它们。稍后在设置无服务器框架时，您将需要这些访问密钥，如图所示：
- en: '![](img/fc5c5246-c8d6-467d-8cec-8808c0c8139b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc5c5246-c8d6-467d-8cec-8808c0c8139b.png)'
- en: In the next section, we will create a hello word AWS Lambda function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个Hello World AWS Lambda函数。
- en: Creating a Hello World AWS Lambda function
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Hello World AWS Lambda函数
- en: 'There are three primary ways to create a Hello World an AWS Lambda from the
    AWS console:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从AWS控制台有三种主要方法来创建一个Hello World AWS Lambda：
- en: We can create a Lambda from scratch. It is the easiest way to create a simple
    Lambda.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以从头开始创建一个Lambda。这是创建一个简单Lambda的最简单方法。
- en: We can use existing blueprint to create a Lambda. AWS has a catalog of usages
    for any base Lambda, and you can use it to start with a Lambda, which is closer
    to the project you want to create.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用现有的蓝图来创建Lambda。AWS有一个适用于任何基础Lambda的使用目录，您可以使用它从一个接近您想要创建的项目的Lambda开始。
- en: In 2018, AWS added serverless application repositories where users can submit
    their Lambda configurations. The repository has hundreds of different Lambda packages
    and it is extremely useful to create a Hello World in AWS Lambda.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2018年，AWS添加了无服务器应用程序库，用户可以在其中提交他们的Lambda配置。这个库包含数百个不同的Lambda包，对于在AWS Lambda中创建Hello
    World非常有用。
- en: Using the Lambda function
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lambda函数
- en: 'We''ll discuss the ways of using the Lambda function with the following points:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下几个要点来讨论如何使用Lambda函数：
- en: You can use the inline editor in AWS Service Cloud 9\. It can be very helpful
    in cases where you don't want to install anything locally and want to keep all
    your files in the cloud. The drawback is that it can be pretty challenging to
    automate deployment with the inline editor, as well as handling complex side libraries
    and large projects with multiple files.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用AWS服务Cloud 9中的内联编辑器。如果您不想在本地安装任何内容，并希望将所有文件保存在云中，这将非常有用。缺点是，使用内联编辑器进行自动化部署可能非常具有挑战性，同时处理复杂的附加库和多个文件的大型项目也比较困难。
- en: You can upload a ZIP file with libraries and code, either through the web interface
    or through the command line. This is a very straightforward process, which you
    can easily automate. The main drawback of this approach is that the package has
    a 50 MB limitation on size.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过Web界面或命令行上传带有库和代码的ZIP文件。这是一个非常简单的过程，您可以轻松地将其自动化。此方法的主要缺点是包的大小有限制，最多只能是50
    MB。
- en: The best and the most popular way to upload the package is through the S3 bucket.
    It doesn't have a 50 MB limitation for the package, although, a 250 MB limit for
    our ZIP libraries and the code will still be in place.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传包的最佳且最流行的方式是通过S3桶。它对包没有50 MB的限制，尽管我们的ZIP库和代码仍然会有250 MB的限制。
- en: AWS Lambda code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda代码
- en: 'Perform the following steps to create the Hello World code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建Hello World代码：
- en: 'Log in with your `lambda` IAM user. Go to the AWS console and choose the AWS
    Lambda service:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的`lambda` IAM用户登录。进入AWS控制台并选择AWS Lambda服务：
- en: '![](img/d83182ce-03c9-40b4-ba95-c239f5a7335c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d83182ce-03c9-40b4-ba95-c239f5a7335c.png)'
- en: 'Click on Create a function**,** as shown in the following screenshot:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建函数**，如以下截图所示：
- en: '![](img/6b693d6a-b0a6-431d-8c12-6fe1323faacc.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b693d6a-b0a6-431d-8c12-6fe1323faacc.png)'
- en: 'Choose Author from scratch**,** as shown here:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**从头开始创建**，如图所示：
- en: '![](img/c62ae4e1-8bd9-49c1-97b5-a7688b81f0a6.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c62ae4e1-8bd9-49c1-97b5-a7688b81f0a6.png)'
- en: 'We need to add a Name, Runtime, and Role. Then , we need to add a Role name, `helloLambda`.
    For Policy templates, select Simple microservice permissions and click on the Create
    function button, as shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一个名称、运行时和角色。然后，我们需要添加一个角色名称，`helloLambda`。对于策略模板，选择简单的微服务权限，并点击创建函数按钮，如下图所示：
- en: '![](img/53c8855b-95a6-48df-8b1d-58cfc8b29da5.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53c8855b-95a6-48df-8b1d-58cfc8b29da5.png)'
- en: 'Finally, we get the interface of AWS Lambda. We get the connected triggers,
    code editor, and settings:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，我们得到了 AWS Lambda 的界面。我们得到了连接的触发器、代码编辑器和设置：
- en: '![](img/12b77641-6928-43fb-a73e-a47f372db501.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12b77641-6928-43fb-a73e-a47f372db501.png)'
- en: 'You need to configure the test event and start your first Lambda function. For
    our first Lambda function, you can just make an empty event:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要配置测试事件并启动你的第一个 Lambda 函数。对于我们的第一个 Lambda 函数，你只需创建一个空事件：
- en: '![](img/91d23aa8-74a0-467b-9da2-c971c05d50bc.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91d23aa8-74a0-467b-9da2-c971c05d50bc.png)'
- en: 'Edit the code and save it and you''ll see that a Lambda has been updated:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑代码并保存后，你会看到 Lambda 已经更新：
- en: '![](img/c655b3f9-67c8-4ad6-9f3a-0d4019478d77.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c655b3f9-67c8-4ad6-9f3a-0d4019478d77.png)'
- en: In the next section, we will learn about the serverless framework.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习无服务器框架。
- en: Introduction to the serverless framework
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器框架简介
- en: 'In the previous sections, we learned about the different ways to deploy the
    Lambda function.  Although the Lambda package is just ZIP files with libraries
    and codes, there are ways to deploy them as mentioned below. A production usage
    deployment needs to have the following features:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们了解了不同的 Lambda 函数部署方式。虽然 Lambda 包仅仅是包含库和代码的 ZIP 文件，但仍然有如下方式来部署它们。生产使用的部署需要具备以下特性：
- en: First of all, the serverless framework should have a single configuration file
    where we can set all the options and parameters of deployment. This will allow
    us to save time while writing long scripts for starting each service separately
    and it will enable us to keep versions of our environment.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，无服务器框架应该有一个单一的配置文件，在该文件中我们可以设置所有的部署选项和参数。这将使我们在编写启动每个服务的长脚本时节省时间，并且它将使我们能够保存环境的版本。
- en: It should be able to create and attach other AWS services to add to a Lambda.
    Since most use cases involve a Lambda working as a part of a bigger infrastructure,
    deploying other parts of infrastructure separately can be a huge issue.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该能够创建并附加其他 AWS 服务，以便将它们添加到 Lambda 中。由于大多数使用场景涉及 Lambda 作为更大基础设施的一部分工作，因此将其他基础设施部分单独部署可能会是一个大问题。
- en: Having a convenient command-line interface helps a lot because not only would
    it mean that you can deploy everything using a single script but also set up automatic
    deployment.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有一个方便的命令行界面非常有帮助，因为这不仅意味着你可以使用一个脚本部署所有内容，还可以设置自动部署。
- en: Features of the serverless framework
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器框架的特性
- en: 'A serverless framework has a number of useful features. They are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器框架具有许多有用的特性。它们如下：
- en: It is open source, which means that the serverless community helps to build
    and maintain the framework. This allows the framework to be free and up-to-date.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是开源的，这意味着无服务器社区帮助构建和维护该框架。这使得该框架保持免费并保持最新。
- en: The serverless framework supports different public cloud platforms, such as
    AWS Google call functions and Azure functions. It means that you don't have to
    learn how the UI works for either of the mentioned services. You can use the same
    common UI to deploy functions on another service.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架支持不同的公共云平台，如 AWS、Google 云函数和 Azure 函数。这意味着你不必学习上述服务的 UI 是如何工作的。你可以使用相同的通用
    UI 在另一个服务上部署函数。
- en: The serverless framework has a production-level quality and a number of companies
    use it for deploying the serverless infrastructure.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器框架具有生产级质量，许多公司使用它来部署无服务器基础设施。
- en: It has a plug-in system, which allows users to create custom plugins for the
    frameworks. It allows serverless to have various functionality; for example, supporting
    step functions.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有插件系统，允许用户为框架创建自定义插件。这使得无服务器框架可以具备多种功能；例如，支持步骤函数。
- en: Installation of the serverless framework
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器框架的安装
- en: 'In order to install the serverless framework, we need to install the following
    functions:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装无服务器框架，我们需要安装以下功能：
- en: We will need to install Node and NPM ([https://nodejs.org/download/](https://nodejs.org/download/)).
    The serverless framework is written in JavaScript, so it requires Node for execution
    and NPM for handling the packages.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要安装 Node 和 NPM（[https://nodejs.org/download/](https://nodejs.org/download/)）。无服务器框架是用
    JavaScript 编写的，因此它需要 Node 来执行，NPM 用于处理包。
- en: We will need Python ([https://www.python.org/downloads](https://www.python.org/downloads))
    and `pip` ([https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/))
    to run Lambda code locally and we will need it in the various command-line interfaces.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要 Python（[https://www.python.org/downloads](https://www.python.org/downloads)）和
    `pip`（[https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/)）来本地运行
    Lambda 代码，我们还将在各种命令行界面中使用它。
- en: We will need the AWS command-line interface ([https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)),
    for the serverless framework to connect to your AWS account. Then, we can install
    the serverless framework and everything will be configured.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要 AWS 命令行界面（[https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)），以便无服务器框架能够连接到您的
    AWS 账户。然后，我们可以安装无服务器框架，所有内容将得到配置。
- en: The complete installation process of the serverless framework can be found here [https://serverless.com/framework/docs/providers/aws/guide/installation](https://serverless.com/framework/docs/providers/aws/guide/installation).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器框架的完整安装过程可以在这里找到 [https://serverless.com/framework/docs/providers/aws/guide/installation](https://serverless.com/framework/docs/providers/aws/guide/installation)。
- en: 'Installing the serverless framework is extremely easy. We just need to run
    the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 安装无服务器框架非常简单。我们只需运行以下命令：
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can check that it works by running the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来检查它是否正常工作：
- en: '[PRE2]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will return the version of the installed serverless framework.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回已安装的无服务器框架版本。
- en: Deploying AWS Lambda functions using the serverless framework
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无服务器框架部署 AWS Lambda 函数
- en: 'We will start with what the serverless deployment process looks like:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从无服务器部署过程的样子开始：
- en: We have code and libraries for a Lambda execution. These are the same libraries
    and code that you would see if you uploaded your package directly as a ZIP. In
    that sense, it is very easy to start deploying existing Lambdas through the serverless
    framework.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有用于 Lambda 执行的代码和库。这些与您直接上传 ZIP 包时看到的代码和库相同。从这个角度来看，通过无服务器框架开始部署现有的 Lambda
    非常简单。
- en: We have a configuration file, which basically contains all the information about
    how a Lambda will be deployed.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个配置文件，它基本上包含了有关 Lambda 部署方式的所有信息。
- en: Configuration file
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置文件
- en: The Lambda configuration file consists of the same parameters, which we have
    discussed in an earlier section (for example, name, runtime, memory, and timeout).
    There are three primary differences.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 配置文件包含与前面讨论过的相同参数（例如，名称、运行时、内存和超时）。有三个主要区别。
- en: You are not only setting up triggers but also setting up services, in which
    the triggers depend on. You can set up specific roles and access. Some accesses
    will be automatically set, but some will need to be configured by you. Finally,
    you can set up additional plugins, which you will use during deployment. We will
    look at them in more detail when we deploy the step functions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅是在设置触发器，还在设置这些触发器所依赖的服务。您可以设置特定的角色和访问权限。有些访问权限会自动设置，但有些需要您手动配置。最后，您可以设置额外的插件，这些插件将在部署时使用。我们将在部署步骤函数时更详细地了解它们。
- en: Deployment process
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署过程
- en: This section covers the process of deployment, which will be generated in the
    custom cloud formation file based on our configuration file. Cloud formation is
    an AWS service, which allows us to automatically deploy multiple services. This
    is extremely convenient for handling the deployment process, but its notation
    can be pretty difficult to start with. That is why we are using the server's configuration
    file, which is more readable. Next, the service framework packages libraries and
    code in a single package and uploads which will then run the AWS cloud formation
    service for deployment by using the file generated previously.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了部署过程，这将根据我们的配置文件生成自定义的云形成文件。云形成是 AWS 提供的一项服务，允许我们自动部署多个服务。这个功能对于处理部署过程非常方便，但它的标记语法可能一开始比较难以理解。这就是为什么我们使用服务器配置文件，因为它更具可读性。接下来，服务框架会将库和代码打包成一个单独的包并上传，然后利用之前生成的文件运行
    AWS 云形成服务进行部署。
- en: Now, let's move on to the actual deployment of a Lambda, using the serverless
    framework, by looking at the available files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续使用 serverless 框架进行 Lambda 的实际部署，查看可用的文件。
- en: 'There are two files: `index.py` and `serverless.yml`. Let''s look at `index.py`.
    The following code will print the input event and return the `Hello World` message,
    as shown in the following snippet:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个文件：`index.py` 和 `serverless.yml`。我们来看一下 `index.py`。以下代码将打印输入事件并返回 `Hello
    World` 消息，如下所示：
- en: '[PRE3]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following snippet shows the `serverless.yml` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了 `serverless.yml` 文件：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the `serverless.yml` version, there is the name of the function, the available
    resources, and the region. `helloworld` is the name of the service, which we deploy.
    `main` is the name of the function and `index.handler` is the name of the `index.py` file
    and the name of the function inside of their file handler.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `serverless.yml` 版本中，有函数的名称、可用资源和区域。`helloworld` 是我们部署的服务名称。`main` 是函数的名称，`index.handler`
    是 `index.py` 文件中的函数名称和文件处理器的名称。
- en: 'One service may have different functions and that is why they are separated.
    Before deploying them, we can run a Lambda locally. This is one of the good features
    of the serverless framework, but it may not work with complex libraries because
    of the differences in OS. We can see that we printed an empty log and received
    the `Hello World` message as output:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一个服务可能有不同的功能，这就是为什么它们被分开的原因。在部署之前，我们可以先在本地运行 Lambda。这是 serverless 框架的一个好功能，但由于操作系统的差异，它可能不适用于复杂的库。我们可以看到，我们打印了一个空的日志并接收到了
    `Hello World` 消息作为输出：
- en: '![](img/6080dc31-5638-4379-9394-eca81fb8a424.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6080dc31-5638-4379-9394-eca81fb8a424.png)'
- en: 'Before deploying Lambda, you need to link your AWS account to serverless using
    following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署 Lambda 之前，你需要使用以下命令将你的 AWS 账户链接到 serverless：
- en: '`serverless config credentials --provider aws --key "Your access key" --secret
    "Your secret access key"`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`serverless config credentials --provider aws --key "Your access key" --secret
    "Your secret access key"`'
- en: 'You will deploy a Lambda using the serverless framework. Also, even if you
    have a simple program, it may take some time for the serverless framework to deploy
    the service:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 serverless 框架部署 Lambda。同时，即使你只有一个简单的程序，serverless 框架部署服务时也可能需要一些时间：
- en: '![](img/6003887b-a1e6-46bb-b171-acf88bb82651.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6003887b-a1e6-46bb-b171-acf88bb82651.png)'
- en: 'Now, you can run the Lambda code and check the output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以运行 Lambda 代码并查看输出：
- en: '![](img/fa97a611-bcea-457d-9e08-d4978e1228c9.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa97a611-bcea-457d-9e08-d4978e1228c9.png)'
- en: As you can see, it is the same as the one we received earlier. There are two
    great flags, which really helps when working with a Lambda. The first flag helps
    to send custom events inside a Lambda, thereby, emulating triggers from the custom
    service and the log allows you to see the log of the current execution. This flag
    log will allow us to look at the log, and the data flag will allow us to send
    a custom message.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它和我们之前收到的相同。这里有两个非常有用的标志，在使用 Lambda 时非常有帮助。第一个标志帮助我们在 Lambda 内部发送自定义事件，从而模拟来自自定义服务的触发事件，而日志则可以让我们看到当前执行的日志。这个日志标志将允许我们查看日志，而数据标志则允许我们发送自定义消息。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about AWS Lambda functions, along with getting started
    with AWS account. We also learned about creating a Hello World AWS Lambda function,
    along with an introduction to the serverless framework and deployment of AWS Lambda
    functions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们了解了 AWS Lambda 函数，并开始了 AWS 账户的使用。我们还学习了如何创建一个 Hello World 的 AWS Lambda
    函数，并介绍了 serverless 框架以及 AWS Lambda 函数的部署。
- en: In the next chapter, we will start deploying TensorFlow models, where we will
    learn more about TensorFlow models and how to deploy them.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将开始部署 TensorFlow 模型，在那里我们将深入了解 TensorFlow 模型及其部署方法。
