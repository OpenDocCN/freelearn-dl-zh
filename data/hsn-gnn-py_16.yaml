- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Detecting Anomalies Using Heterogeneous GNNs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异构GNN检测异常
- en: In machine learning, anomaly detection is a popular task that aims to identify
    patterns or observations in data that deviate from the expected behavior. This
    is a fundamental problem that arises in many real-world applications, such as
    detecting fraud in financial transactions, identifying defective products in a
    manufacturing process, and detecting cyber attacks in a computer network.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，异常检测是一个流行的任务，旨在识别数据中偏离预期行为的模式或观察结果。这是一个在许多现实应用中出现的基本问题，例如检测金融交易中的欺诈、识别制造过程中的缺陷产品以及检测计算机网络中的网络攻击。
- en: GNNs can be trained to learn the normal behavior of a network and then identify
    nodes or patterns that deviate from that behavior. Indeed, their ability to understand
    complex relationships makes them particularly appropriate to detect weak signals.
    Additionally, GNNs can be scaled to large datasets, making them an efficient tool
    for processing large amounts of data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: GNN可以通过学习网络的正常行为来训练，然后识别偏离该行为的节点或模式。事实上，它们理解复杂关系的能力使得它们特别适合于检测微弱信号。此外，GNN可以扩展到大型数据集，使其成为处理海量数据的高效工具。
- en: In this chapter, we will build a GNN application for anomaly detection in computer
    networks. First, we will introduce the `CIDDS-001` dataset, which contains attacks
    and benign traffic in a computer network. Next, we will process the dataset, preparing
    it for input into GNNs. We will then move on to implementing a heterogenous GNN
    to handle different types of nodes and edges. Finally, we will train the network
    using the processed dataset and evaluate the results to see how well it detects
    anomalies in the network traffic.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个用于计算机网络异常检测的GNN应用程序。首先，我们将介绍`CIDDS-001`数据集，其中包含计算机网络中的攻击和正常流量。接下来，我们将处理数据集，准备将其输入到GNN中。然后，我们将实现一个异构GNN，以处理不同类型的节点和边。最后，我们将使用处理过的数据集训练网络，并评估结果，查看其在检测网络流量中的异常方面的表现。
- en: By the end of this chapter, you will know how to implement a GNN for intrusion
    detection. In addition, you will know how to build relevant features to detect
    attacks and process them to feed them to a GNN. Finally, you will learn how to
    implement and evaluate a heterogenous GNN to detect rare attacks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将知道如何实现一个用于入侵检测的GNN。此外，你将了解如何构建相关特征以检测攻击，并处理它们以输入到GNN中。最后，你将学习如何实现并评估一个异构GNN以检测稀有攻击。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Exploring the CIDDS-001 dataset
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索CIDDS-001数据集
- en: Preprocessing the CIDDS-001 dataset
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理CIDDS-001数据集
- en: Implementing a heterogeneous GNN
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个异构GNN
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the code examples from this chapter can be found on GitHub at [https://github.com/PacktPublishing/Hands-On-Graph-Neural-Networks-Using-Python/tree/main/Chapter16](https://github.com/PacktPublishing/Hands-On-Graph-Neural-Networks-Using-Python/tree/main/Chapter16).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在GitHub上找到，链接为[https://github.com/PacktPublishing/Hands-On-Graph-Neural-Networks-Using-Python/tree/main/Chapter16](https://github.com/PacktPublishing/Hands-On-Graph-Neural-Networks-Using-Python/tree/main/Chapter16)。
- en: The installation steps required to run the code on your local machine can be
    found in the *Preface* of this book. This chapter requires a large amount of GPU.
    You can lower it by decreasing the size of the training set in the code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码所需的安装步骤可以在本书的*前言*中找到。本章需要大量的GPU，你可以通过减少代码中训练集的大小来降低需求。
- en: Exploring the CIDDS-001 dataset
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索CIDDS-001数据集
- en: This section will explore the dataset and get more insights about feature importance
    and scaling.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探索数据集，并深入了解特征的重要性和缩放。
- en: The `CIDDS-001` dataset [1] is designed to train and evaluate anomaly-based
    network intrusion detection systems. It provides realistic traffic that includes
    up-to-date attacks to assess these systems. It was created by collecting and labeling
    8,451,520 traffic flows in a virtual environment using OpenStack. Precisely, each
    row corresponds to a NetFlow connection, describing **Internet Protocol** (**IP**)
    traffic statistics, such as the number of bytes exchanged.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`CIDDS-001`数据集[1]旨在训练和评估基于异常的网络入侵检测系统。它提供了现实的流量数据，包括最新的攻击，用于评估这些系统。它通过使用OpenStack在虚拟环境中收集并标记了8,451,520个流量流量数据。具体来说，每一行代表一个NetFlow连接，描述**互联网协议**（**IP**）流量统计信息，例如交换的字节数。'
- en: The following figure provides an overview of the simulated network environment
    in `CIDDS-001`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表提供了 `CIDDS-001` 中模拟网络环境的概览：
- en: '![Figure 16.1 – Overview of the virtual network simulated by CIDDS-001](img/B19153_16_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.1 – CIDDS-001 模拟的虚拟网络概览](img/B19153_16_001.jpg)'
- en: Figure 16.1 – Overview of the virtual network simulated by CIDDS-001
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1 – CIDDS-001 模拟的虚拟网络概览
- en: 'We see four different subnets (developer, office, management, and server) with
    their respective IP address ranges. All these subnets are linked to a single server
    connected to the internet through a firewall. An external server is also present
    and provides two services: a file synchronization service and a web server. Finally,
    attackers are represented outside of the local network.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到四个不同的子网（开发者、办公室、管理和服务器），以及它们各自的 IP 地址范围。所有这些子网都连接到一台通过防火墙与互联网相连的服务器。还存在一个外部服务器，提供两个服务：文件同步服务和网页服务器。最后，攻击者被表示在本地网络之外。
- en: 'Connections in `CIDDS-001` were collected from the local and external servers.
    The goal of this dataset is to correctly classify these connections into five
    categories: benign (no attack), brute-force, denial of service, ping scan, and
    port scan.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`CIDDS-001` 中的连接来自本地和外部服务器。该数据集的目标是将这些连接正确地分类为五个类别：正常（无攻击）、暴力破解、拒绝服务、ping 扫描和端口扫描。'
- en: 'Let’s download the `CIDDS-001` dataset and explore its input features:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载 `CIDDS-001` 数据集并探索其输入特征：
- en: 'We download `CIDDS-001`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下载 `CIDDS-001`：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We import the required libraries:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入所需的库：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We load the dataset using `pandas`:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 `pandas` 加载数据集：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s look at the data corresponding to the first five connections:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看前五个连接对应的数据：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are a few interesting features we can use for our model:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些有趣的特征我们可以用于我们的模型：
- en: The date first seen is a timestamp we can process to extract information about
    the day of the week and the time of day. In general, network traffic is seasonal,
    and connections that occur at night or on unusual days are suspicious.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “首次看到日期”是一个时间戳，我们可以对其进行处理，以提取关于星期几和一天中时间的信息。通常，网络流量是有季节性的，夜间或非常规日子的连接通常是可疑的。
- en: IP addresses (such as `192.168.100.5`) are notoriously difficult to process
    because they are not numerical values and follow a complex set of rules. We could
    bin them into a few categories since we know how our local network is set up.
    Another popular and more generalizable solution is to convert them into a binary
    representation (“192” becomes “11000000”).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 地址（如 `192.168.100.5`）因其不是数值型且遵循复杂规则而著名，处理起来非常困难。我们可以将它们分为几个类别，因为我们知道本地网络的设置。另一个更常见且具有更好泛化性的解决方案是将其转换为二进制表示（例如，“192”变为“11000000”）。
- en: Duration, the number of packets, and the number of bytes are features that usually
    display heavy-tailed distributions. Therefore, they will require special processing
    if that is the case.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续时间、数据包数量和字节数通常呈现重尾分布。因此，如果是这种情况，它们将需要特别处理。
- en: 'Let’s check this last point and look closely at the distribution of attacks
    in this dataset:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查这一点，并仔细看看该数据集中的攻击分布：
- en: 'We start by removing features we will not consider in this project: ports,
    the number of flows, type of service, class, attack ID, and attack description:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先删除本项目中不考虑的特征：端口、流数量、服务类型、类别、攻击 ID 和攻击描述：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We rename the benign class and convert the “date first seen” feature into the
    timestamp data type:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们重命名正常类别，并将“首次看到日期”特征转换为时间戳数据类型：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We count the labels and make a pie chart with the three most represented classes
    (the two others are under 0.1%):'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们统计标签并制作一个饼图，显示三个最多类别（另外两个类别的比例低于 0.1%）：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We obtain the following plot:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到以下图表：
- en: '![Figure 16.2 – Proportion of each class in the CIDDS-001 dataset](img/B19153_16_002..jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.2 – CIDDS-001 数据集中每个类别的比例](img/B19153_16_002..jpg)'
- en: Figure 16.2 – Proportion of each class in the CIDDS-001 dataset
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.2 – CIDDS-001 数据集中每个类别的比例
- en: As you can see, benign traffic represents the immense majority of this dataset.
    On the contrary, brute-force attacks and ping scans have very few samples in comparison.
    This imbalanced learning setting could negatively impact the model’s performance
    when dealing with rare classes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，正常流量占据了数据集的绝大多数。相反，暴力破解攻击和 ping 扫描的样本数量相对较少。这个不平衡的学习设置可能会对模型处理稀有类别时的性能产生负面影响。
- en: 'Finally, we can display the duration distribution, number of packets, and number
    of bytes. This allows us to see whether they really need a specific rescaling
    process:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以显示持续时间分布、数据包数量和字节数。这让我们能够查看它们是否确实需要特定的重新缩放处理：
- en: '[PRE7]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It outputs the following figure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它输出如下图所示：
- en: '![Figure 16.3 – Distributions of duration, the number of packets, and number
    of bytes](img/B19153_16_003..jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.3 – 持续时间、数据包数量和字节数的分布](img/B19153_16_003..jpg)'
- en: Figure 16.3 – Distributions of duration, the number of packets, and number of
    bytes
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3 – 持续时间、数据包数量和字节数的分布
- en: We can see that most values are close to zero, but there is also a long tail
    of rare values stretching along the *x* axes. We will use a power transform to
    make these features more Gaussian-like, which should help the model during training.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，大多数值接近零，但也有一些稀有值沿 *x* 轴形成了长尾。我们将使用幂变换使这些特征更接近高斯分布，这应该有助于模型训练。
- en: Now that we have explored the main characteristics of the `CIDDS-001` dataset,
    we can move on to the preprocessing stage.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了 `CIDDS-001` 数据集的主要特征，可以进入预处理阶段。
- en: Preprocessing the CIDDS-001 dataset
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 CIDDS-001 数据集进行预处理
- en: In the last section, we identified some issues with the dataset we need to address
    to improve the accuracy of our model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经确定了一些需要解决的数据集问题，以提高模型的准确性。
- en: 'The `CIDDS-001` dataset includes diverse types of data: we have numerical values
    such as duration, categorical features such as protocols (TCP, UDP, ICMP, and
    IGMP), and others such as timestamps or IP addresses. In the following exercise,
    we will choose how to represent these data types based on the information from
    the previous section and expert knowledge:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`CIDDS-001` 数据集包括多种类型的数据：我们有持续时间等数值数据、协议（TCP、UDP、ICMP 和 IGMP）等类别特征，以及时间戳或 IP
    地址等其他数据。在接下来的练习中，我们将根据前一节的信息和专家知识，选择如何表示这些数据类型：'
- en: 'First, we can one-hot-encode the day of the week by retrieving this information
    from the timestamp. We will rename the resulting columns to make them more readable:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们可以通过从时间戳中提取星期几的信息来进行独热编码。我们将重命名结果列，使其更易读：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Another important type of information we can get using timestamps is the time
    of day. We also normalize it between `0` and `1`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个通过时间戳可以获取的重要信息是一天中的时间。我们还将其归一化到 `0` 和 `1` 之间：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have not talked about TCP flags yet. Each flag indicates a particular state
    during a TCP connection. For example, `F` or `FIN` signifies that the TCP peer
    has finished sending data. We can extract each flag, and one-hot-encode them as
    follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还没有讨论 TCP 标志。每个标志表示 TCP 连接中的特定状态。例如，`F` 或 `FIN` 表示 TCP 对端已经完成数据发送。我们可以提取每个标志，并按如下方式对其进行独热编码：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s now process the IP addresses. In this example, we will use binary encoding.
    Instead of taking 32 bits to encode the complete IPv4 address, we will only keep
    the last 16 bits, which are the most significant here. Indeed, the 16 first bits
    either correspond to `192.168` if the host belongs to the internal network or
    another value if it’s external:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们处理 IP 地址。在这个示例中，我们将使用二进制编码。我们不会使用 32 位来编码完整的 IPv4 地址，而是仅保留最后 16 位，因为这部分在这里最为重要。实际上，前
    16 位要么表示 `192.168`，如果主机属于内部网络，要么表示其他值，如果它是外部网络：
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We repeat this process for destination IP addresses:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们对目标 IP 地址重复这个过程：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There is an issue with the ‘`Bytes`’ feature: millions are represented as `m`
    instead of a numerical value. We can fix it by multiplying the numerical part
    of these non-numerical values by one million:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Bytes` 特征存在一个问题：百万单位用 `m` 表示，而不是数值。我们可以通过将这些非数值的数值部分乘以一百万来修复这个问题：'
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The last features we need to encode are the easiest ones: categorical features
    such as protocols and attack types. We use the `get_dummies()` function from `pandas`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要编码的最后一类特征是最简单的：如协议和攻击类型等类别特征。我们使用 `pandas` 中的 `get_dummies()` 函数：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We create a train/validation/test split with 80/10/10 ratios:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个训练/验证/测试的分割，比例为 80/10/10：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we need to address the scaling of three features: duration, the number
    of packets, and the number of bytes. We use `PowerTransformer()` from `scikit-learn`
    to modify their distributions:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要处理三个特征的缩放问题：持续时间、数据包数量和字节数。我们使用 `scikit-learn` 中的 `PowerTransformer()`
    来修改它们的分布：
- en: '[PRE16]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s plot the new distributions to see how they compare:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们绘制新的分布，看看它们如何比较：
- en: '[PRE17]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We obtain the following figure:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到如下图所示：
- en: '![Figure 16.4 – Rescaled distributions of duration, the number of packets,
    and the number of bytes](img/B19153_16_004..jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.4 – 持续时间、数据包数量和字节数的重新缩放分布](img/B19153_16_004..jpg)'
- en: Figure 16.4 – Rescaled distributions of duration, the number of packets, and
    the number of bytes
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4 – 持续时间、数据包数量和字节数的重新缩放分布
- en: These new distributions are not Gaussian, but the values are more spread out,
    which should help the model.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新分布不是高斯分布，但值分布更加分散，这应该有助于模型。
- en: 'Note that the dataset we processed is purely tabular. We still need to convert
    it into a graph dataset before we can feed it to a GNN. In our case, there is
    no obvious way of converting our traffic flows into nodes. Ideally, flows between
    the same computers should be connected. This can be achieved using a heterogeneous
    graph with two types of nodes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们处理的数据集是纯粹的表格数据。在将其输入到图神经网络（GNN）之前，我们仍然需要将其转换为图数据集。在我们的例子中，没有明显的方法将流量转换为节点。理想情况下，同一计算机之间的流量应该是相连的。可以通过使用具有两种类型节点的异构图来实现：
- en: '**Hosts**, which correspond to computers and use IP addresses as features.
    If we had more information, we could add other computer-related features, such
    as logs or CPU utilization.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机**，它们对应于计算机，并使用IP地址作为特征。如果我们有更多信息，可以添加其他与计算机相关的特征，例如日志或CPU利用率。'
- en: '**Flows**, which correspond to connections between two hosts. They consider
    all the other features from the dataset. They also have the label we want to predict
    (a benign or malicious flow).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量**，它们对应于两个主机之间的连接。它们考虑数据集中的所有其他特征。它们还有我们要预测的标签（良性或恶意流量）。'
- en: 'In this example, flows are unidirectional, which is why we also define two
    types of edges: host-to-flow (source), and flow-to-host (destination). A single
    graph would require too much memory, so we will divide it into subgraphs and place
    them into data loaders:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，流量是单向的，这也是我们定义两种类型的边的原因：主机到流量（源）和流量到主机（目标）。单一图形会占用过多内存，因此我们将其分割成子图，并将它们放入数据加载器中：
- en: 'We define the batch size and the features we want to consider for host and
    flow nodes:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了批量大小以及我们希望考虑的主机和流节点的特征：
- en: '[PRE18]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We define the function that will create our data loaders. It takes two parameters:
    the tabular DataFrame we created, and the subgraph size (`1024` nodes in this
    example):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义一个函数来创建数据加载器。它接受两个参数：我们创建的表格数据框和子图大小（在本例中为`1024`个节点）：
- en: '[PRE19]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We initialize a list called `data` to store our subgraphs, and we count the
    number of subgraphs we will create:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们初始化一个名为`data`的列表来存储我们的子图，并计算将要创建的子图数量：
- en: '[PRE20]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For each subgraph, we retrieve the corresponding samples in the DataFrame,
    the list of source IP addresses, and the list of destination IP addresses:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个子图，我们从数据框中检索相应的样本、源IP地址列表和目标IP地址列表：
- en: '[PRE21]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We create a dictionary that maps the IP addresses to a node index:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个字典，将IP地址映射到节点索引：
- en: '[PRE22]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This dictionary will help us to create the edge index from the host to the flow
    and vice versa. We use a function called `get_connections()`, which we will create
    after this one.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个字典将帮助我们从主机到流量、以及反向生成边索引。我们使用一个名为`get_connections()`的函数，在这之后我们会创建它。
- en: '[PRE23]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We use all the data we have collected so far to create a heterogeneous graph
    for each subgraph and append it to the list:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用迄今为止收集的所有数据，为每个子图创建一个异构图，并将其附加到列表中：
- en: '[PRE24]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we return the data loader with the appropriate batch size:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回具有适当批量大小的数据加载器：
- en: '[PRE25]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There is one function we still need to implement – `get_connections()` – which
    calculates two edge indices from the list of source and destination IP addresses
    and their corresponding map:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一个函数我们需要实现——`get_connections()`——它根据源IP地址和目标IP地址的列表以及它们的对应映射，计算出两个边索引：
- en: '[PRE26]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We get indexes from the IP addresses (both source and destination) and stack
    them:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从IP地址（源和目标）中获取索引并将它们堆叠起来：
- en: '[PRE27]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The connections are unique, so we can easily index them with the appropriate
    range of numbers:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些连接是独特的，因此我们可以轻松地使用适当的数字范围对其进行索引：
- en: '[PRE28]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, we return the two following edge indexes:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们返回以下两个边索引：
- en: '[PRE29]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we have everything we need, we can call the first function to create
    the training, validation, and test data loaders:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们拥有所需的一切，可以调用第一个函数来创建训练、验证和测试数据加载器：
- en: '[PRE30]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We now have three data loaders corresponding to our training, validation, and
    test sets. The next step consists of implementing the GNN model.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有三个数据加载器，分别对应于我们的训练集、验证集和测试集。下一步是实现GNN模型。
- en: Implementing a heterogeneous GNN
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现异构GNN
- en: In this section, we will implement a heterogeneous GNN using a `GraphSAGE` operator.
    This architecture will allow us to consider both node types (hosts and flows)
    to build better embeddings. This is done by duplicating and sharing messages across
    different layers, as shown in the following figure.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`GraphSAGE`操作符实现异构GNN。该架构将允许我们同时考虑两种节点类型（主机和流）来构建更好的嵌入。通过跨不同层复制和共享消息来实现这一点，如下图所示。
- en: '![Figure 16.5 – Architecture of the heterogeneous GNN](img/Image98417.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图16.5 – 异构GNN的架构](img/Image98417.jpg)'
- en: Figure 16.5 – Architecture of the heterogeneous GNN
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – 异构GNN的架构
- en: 'We will implement three layers of `SAGEConv` with `LeakyRELU` for each node
    type. Finally, a linear layer will output a five-dimensional vector, where each
    dimension corresponds to a class. Furthermore, we will train this model in a supervised
    way using the cross-entropy loss and the `Adam` optimizer:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每种节点类型实现三层`SAGEConv`，并使用`LeakyRELU`激活函数。最后，一个线性层将输出一个五维向量，其中每个维度对应一个类别。此外，我们将使用交叉熵损失和`Adam`优化器以监督方式训练该模型：
- en: 'We import the relevant neural network layers from PyTorch Geometric:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从PyTorch Geometric中导入相关的神经网络层：
- en: '[PRE31]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We define the heterogeneous GNN with three parameters: the number of hidden
    dimensions, the number of output dimensions, and the number of layers:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义异构GNN的三个参数：隐藏维度的数量、输出维度的数量和层数：
- en: '[PRE32]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We define a heterogenous version of the `GraphSAGE` operator for each layer
    and edge type. Here, we could apply a different GNN layer to each edge type, such
    as `GCNConv` or `GATConv`. The `HeteroConv()` wrapper manages the messages between
    layers, as shown in *Figure 16**.5*:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为每个层和边类型定义了一个异构版本的`GraphSAGE`操作符。在这里，我们可以为每种边类型应用不同的GNN层，如`GCNConv`或`GATConv`。`HeteroConv()`包装器管理层之间的消息传递，如*图16.5*所示：
- en: '[PRE33]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We define a linear layer that will output the final classification:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义一个线性层，将输出最终的分类结果：
- en: '[PRE34]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We create the `forward()` method, which computes embeddings for host and flow
    nodes (stored in the `x_dict` dictionary). The flow embeddings are then used to
    predict a class:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了`forward()`方法，该方法计算主机节点和流节点的嵌入（存储在`x_dict`字典中）。然后，流的嵌入用于预测一个类别：
- en: '[PRE35]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We instantiate the heterogeneous GNN with 64 hidden dimensions, 5 outputs (our
    5 classes), and 3 layers. If available, we place it on a GPU and create an `Adam`
    optimizer with a learning rate of `0.001`:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实例化异构GNN，设置64个隐藏维度、5个输出（即5个类别）和3层。如果可用，我们将其放置在GPU上，并创建一个学习率为`0.001`的`Adam`优化器：
- en: '[PRE36]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We define the `test()` function and create arrays to store predictions and
    `true` labels. We also want to count the number of subgraphs and the total loss,
    so we create the corresponding variables:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义`test()`函数并创建数组来存储预测结果和`true`标签。我们还希望统计子图的数量和总损失，因此我们创建了相应的变量：
- en: '[PRE37]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We get the model’s prediction for each batch and compute the cross-entropy
    loss:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们获取每个批次的模型预测结果，并计算交叉熵损失：
- en: '[PRE38]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We append the predicted class to the list of predictions and do the same with
    the `true` labels:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将预测的类别追加到预测列表中，并对`true`标签执行相同操作：
- en: '[PRE39]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We count the number of subgraphs and the total loss as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如下统计子图数量和总损失：
- en: '[PRE40]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now that the batch loop is over, we compute the `F1` score (macro) using the
    prediction and `true` label lists. The macro-averaged `F1` score is a good metric
    in this imbalanced learning setting because it treats all classes equally regardless
    of the number of samples:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 批处理循环结束后，我们使用预测和`true`标签列表计算宏平均`F1`分数。宏平均`F1`分数在这种类别不平衡的学习设置中是一个很好的指标，因为它平等对待所有类别，而不管样本数量：
- en: '[PRE41]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We return the final loss, the macro-averaged `F1` score, the list of predictions,
    and the list of `true` labels:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们返回最终的损失、宏平均`F1`分数、预测列表和`true`标签列表：
- en: '[PRE42]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We create the training loop to train the model for `101` epochs:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建训练循环，训练模型`101`个epochs：
- en: '[PRE43]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We train the heterogenous GNN on each batch using the cross-entropy loss:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用交叉熵损失在每个批次上训练异构GNN：
- en: '[PRE44]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Every 10 epochs, we evaluate the model on the validation set and display relevant
    metrics (the training loss, validation loss, and validation macro-averaged `F1`
    score):'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每经过10个epochs，我们在验证集上评估模型并展示相关指标（训练损失、验证损失和验证的宏平均`F1`分数）：
- en: '[PRE45]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We obtain the following output during training:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在训练过程中获得如下输出：
- en: '[PRE46]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, we evaluate the model on the test set. We also print `scikit-learn`’s
    classification report, which includes the macro-averaged F1 score:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们在测试集上评估模型。我们还打印`scikit-learn`的分类报告，其中包括宏平均`F1`分数：
- en: '[PRE47]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We obtained a macro-averaged `F1` score of `0.9831`. This excellent result shows
    that our model has learned to predict each class reliably.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得了一个宏观平均的`F1`分数为`0.9831`。这个优秀的结果表明我们的模型已经学会了可靠地预测每个类别。
- en: The approach we adopted would be even more relevant if we could access more
    host-related features, but it shows how you can expand it to fit your needs. The
    other main advantage of GNNs is their ability to process large amounts of data.
    This approach makes even more sense when dealing with millions of flows. To finish
    this project, let’s plot the model’s errors to see how we could improve it.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们采用的方法如果能够获取更多主机相关的特征，将更加相关，但它展示了如何根据需求扩展该方法。GNN的另一个主要优势是其处理大量数据的能力。当处理数百万条流量时，这种方法显得尤为合理。为了完成这个项目，让我们绘制模型的错误图，以便看到如何改进它。
- en: 'We create a dataframe to store the predictions (`y_pred`) and the true labels
    (`y_true`). We use this new dataframe to plot the proportion of misclassified
    samples:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个数据框来存储预测值（`y_pred`）和真实标签（`y_true`）。我们使用这个新的数据框来绘制误分类样本的比例：
- en: '[PRE48]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This gives us the following chart:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了以下图表：
- en: '![Figure 16.6 – Proportion of each misclassified class](img/B19153_16_006..jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.6 – 每个误分类类别的比例](img/B19153_16_006..jpg)'
- en: Figure 16.6 – Proportion of each misclassified class
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.6 – 每个误分类类别的比例
- en: If we compare this pie chart to the original proportions in the dataset, we
    see that the model performs better for the majority classes. This is not surprising
    since minority classes are harder to learn (fewer samples), and not detecting
    them is less penalizing (with 700,000 benign flows versus 336 ping scans). Port
    and ping scan detection could be improved with techniques such as oversampling
    and introducing class weights during training.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个饼图与数据集中的原始比例进行比较，可以看到模型在多数类别上的表现更好。这并不令人惊讶，因为少数类别更难学习（样本较少），且未检测到这些类别的惩罚较轻（例如，700,000个良性流量与336个ping扫描）。端口和ping扫描的检测可以通过过采样和在训练过程中引入类别权重等技术来改进。
- en: We can gather even more information by looking at the confusion matrix (the
    code can be found on GitHub).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看混淆矩阵获取更多信息（代码可以在GitHub上找到）。
- en: '![Figure 16.7 – Confusion matrix for multi-class flow classification](img/B19153_16_007..jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.7 – 多类流量分类的混淆矩阵](img/B19153_16_007..jpg)'
- en: Figure 16.7 – Confusion matrix for multi-class flow classification
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.7 – 多类流量分类的混淆矩阵
- en: This confusion matrix displays interesting results, such as a bias toward the
    benign class or errors between ping and port scans. These errors can be attributed
    to the similarity between these attacks. Engineering additional features could
    help the model distinguish these classes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该混淆矩阵显示了有趣的结果，比如对良性类别的偏向，或者在ping和端口扫描之间的错误。这些错误可以归因于这些攻击之间的相似性。通过工程化地增加特征，可以帮助模型区分这些类别。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the use of GNNs for detecting anomalies in a new
    dataset, the `CIDDS-001` dataset. First, we preprocessed the dataset and converted
    it into a graph representation, allowing us to capture the complex relationships
    between the different components of the network. We then implemented a heterogeneous
    GNN with `GraphSAGE` operators. It captured the heterogeneity of the graph and
    allowed us to classify the flows as benign or malicious.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用GNN（图神经网络）检测新数据集中的异常，具体是`CIDDS-001`数据集。首先，我们对数据集进行了预处理，并将其转换为图形表示，这使我们能够捕捉网络中不同组件之间的复杂关系。然后，我们实现了一个异质图神经网络（GNN），采用了`GraphSAGE`操作符。该模型捕捉了图的异质性，并使我们能够将流量分类为良性或恶性。
- en: The application of GNNs in network security has shown promising results and
    opened up new avenues for research. As technology continues to advance and the
    amount of network data increases, GNNs will become an increasingly important tool
    for detecting and preventing security breaches.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: GNN在网络安全中的应用已经展示了良好的效果，并为研究开辟了新的方向。随着技术的不断进步和网络数据量的增加，GNN将成为检测和防止安全漏洞的一个越来越重要的工具。
- en: In [*Chapter 17*](B19153_17.xhtml#_idTextAnchor195), *Recommending Books Using
    LightGCN*, we will explore the most popular application of GNNs with recommender
    systems. We will implement a lightweight GNN on a large dataset and produce book
    recommendations for given users.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第17章*](B19153_17.xhtml#_idTextAnchor195)，《使用LightGCN推荐书籍》中，我们将探讨GNN在推荐系统中的最常见应用。我们将在大规模数据集上实现一个轻量级的GNN，并为特定用户提供书籍推荐。
- en: Further reading
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[1] M. Ring, S. Wunderlich, D. Grüdl, D. Landes, and A. Hotho, *Flow-based
    benchmark data sets for intrusion detection*, in *Proceedings of the 16th European
    Conference on Cyber Warfare and Security* (ECCWS), ACPI, 2017, pp. 361–369.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] M. Ring, S. Wunderlich, D. Grüdl, D. Landes, 和 A. Hotho，*基于流量的入侵检测基准数据集*，载于
    *第16届欧洲网络战争与安全会议论文集*（ECCWS），ACPI，2017，页 361–369。'
