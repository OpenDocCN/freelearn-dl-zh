- en: Understanding the Structure of a Sentences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解句子的结构
- en: In this chapter, we'll explore the basic concepts of NLP. This chapter is the
    most important chapter, as it helps to make your foundation strong.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将探索NLP的基本概念。本章是最重要的一章，因为它有助于打下坚实的基础。
- en: 'We are going to cover the following topics to improve your understanding of
    the basic NLP concepts, which will help understand the next chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题，以帮助你更好地理解NLP的基本概念，这将有助于理解下一章：
- en: Understanding the components of NLP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解NLP的组成部分
- en: What is context-free grammar?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是无上下文文法？
- en: Morphological analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形态学分析
- en: Lexical analysis
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词汇分析
- en: Syntactic analysis
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句法分析
- en: Semantic analysis
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义分析
- en: Handling ambiguity
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理歧义
- en: Discourse integration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语篇整合
- en: Pragmatic analysis
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语用分析
- en: Understanding components of NLP
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解NLP的组成部分
- en: There are two major components of NLP. We are going to understand both of them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NLP有两个主要组成部分，我们将理解这两者。
- en: Natural language understanding
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自然语言理解
- en: 'Let''s learn about natural language understanding:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解自然语言理解：
- en: '**Natural language understanding** (**NLU**) is considered the first component
    of NLP'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言理解**（**NLU**）被认为是NLP的第一个组成部分'
- en: NLU is considered an **Artificial Intelligence**-**Hard** (**AI**-**Hard**)
    problem or **Artificial Intelligence**-**Complete** (**AI-Complete**) problem
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLU被认为是**人工智能**-**硬**（**AI**-**Hard**）问题或**人工智能**-**完全**（**AI-Complete**）问题
- en: NLU is considered an AI-Hard problem because we are trying to make a computer
    as intelligent as a human
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLU被认为是一个AI-Hard问题，因为我们正在尝试使计算机具备与人类一样的智能
- en: NLU is hard, but nowadays, tech giants and research communities are improvising
    traditional Machine Learning algorithms and applying various types of deep neural
    network that will help to achieve the goal (computers can also have the intelligence
    to process **natural language** (**NL**))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLU很难，但现在，科技巨头和研究界正在改进传统的机器学习算法，并应用各种类型的深度神经网络，以帮助实现目标（计算机也可以具备处理**自然语言**（**NL**）的智能）
- en: NLU is defined as the process of converting NL input into useful a representation
    by using computational linguistics tools
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLU被定义为使用计算语言学工具将自然语言输入转化为有用表示的过程
- en: 'NLU requires the following analysis to convert NL into a useful representation:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLU（自然语言理解）需要进行以下分析，将自然语言（NL）转化为有用的表示：
- en: Morphological analysis
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形态学分析
- en: Lexical analysis
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词汇分析
- en: Syntactic analysis
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句法分析
- en: Semantic analysis
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义分析
- en: Handling ambiguity
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理歧义
- en: Discourse integration
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语篇整合
- en: Pragmatic analysis
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语用分析
- en: In this book, we will focus on NLU and develop an NLP-based system that uses
    NLU representation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将专注于NLU，并开发一个基于NLP的系统，利用NLU表示。
- en: Natural language generation
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自然语言生成
- en: 'Let''s learn about **natural language generation** (**NLG**):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下**自然语言生成**（**NLG**）：
- en: NLG is considered the second component of NLP.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLG被认为是NLP的第二个组成部分。
- en: NLG is defined as the process of generating NL by a machine as output.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLG被定义为机器生成自然语言输出的过程。
- en: The output of the machine should be in a logical manner, meaning, whatever NL
    is generated by the machine should be logical.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器的输出应该是合乎逻辑的，意味着机器生成的任何自然语言（NL）都应该是合逻辑的。
- en: In order to generate logical output, many NLG systems use basic facts or knowledge-based
    representation.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了生成逻辑输出，许多NLG系统使用基本事实或基于知识的表示。
- en: Let's take an example. You have a system that writes an essay on a particular
    topic. If I am instructing my machine to generate 100 words on the topic of **The
    Cows**, and my machine generates 100 words on the topic of cows, then the output
    (here, 100 words about cows) generated by the machine should be in form of valid
    sentences, all sentences should be logically correct, and the context should also
    make sense.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 举个例子，你有一个系统，可以就某个特定话题写一篇文章。如果我指示我的机器生成关于**牛**的话题的100个词，而我的机器生成了100个关于牛的话题的词，那么机器生成的输出（这里是关于牛的100个词）应该是有效的句子形式，所有句子都应该逻辑正确，且语境也应合理。
- en: Differences between NLU and NLG
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NLU与NLG的区别
- en: 'In this section, we are looking at the differences between NLU and NLG:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将讨论NLU和NLG之间的区别：
- en: '| **NLU** | **NLG** |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **NLU** | **NLG** |'
- en: '| This component helps to explain the meaning behind the NL, whether it is
    written text or in speech format. We can analyze English, French, Spanish, Hindi,
    or any other human language. | This component helps to generate the NL using machines.
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 该组件帮助解释自然语言背后的意义，无论是书面文本还是语音格式。我们可以分析英语、法语、西班牙语、印地语或任何其他人类语言。| 该组件帮助使用机器生成自然语言。
    |'
- en: '| NLU generates facts from NL by using various tools and techniques, such as
    POS tagger, parsers, and so on, in order to develop NLP applications. | NLG start
    from facts like POS tags, parsing results, and so on to generate the NL. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| NLU通过使用各种工具和技术，如词性标注器、解析器等，从自然语言中生成事实，以便开发NLP应用。| NLG从像词性标注、解析结果等事实开始生成自然语言。
    |'
- en: '| It is the process of reading and interpreting language. | It is the process
    of writing or generating language. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 它是阅读和解释语言的过程。| 它是编写或生成语言的过程。 |'
- en: Branches of NLP
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NLP的分支
- en: NLP involves two major branches that help us to develop NLP applications. One
    is computational, the **Computer Science** branch, and the other one is the **Linguistics**
    branch.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言处理（NLP）涉及两个主要分支，帮助我们开发NLP应用。一个是计算分支，即**计算机科学**分支，另一个是**语言学**分支。
- en: 'Refer to *Figure 3.1*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 参见*图 3.1*：
- en: '![](img/680b98f4-c97e-4137-8e26-0dec9c2e7bb2.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/680b98f4-c97e-4137-8e26-0dec9c2e7bb2.png)'
- en: 'Figure 3.1: Branches of NLP'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：NLP的分支
- en: The **Linguistics** branch focuses on how NL can be analyzed using various scientific
    techniques. So, the **Linguistics** branch does scientific analysis of the form,
    meaning, and context.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**语言学**分支专注于如何使用各种科学技术分析自然语言。因此，**语言学**分支进行形式、意义和上下文的科学分析。'
- en: All linguistics analysis can be implemented with the help of computer science
    techniques. We can use the analysis and feed elements of analysis in a machine
    learning algorithm to build an NLP application. Here, the machine learning algorithm
    is a part of **Computer Science**, and the analysis of language is **Linguistics**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所有语言学分析都可以借助计算机科学技术实现。我们可以使用这些分析结果，并将分析元素输入机器学习算法，进而构建NLP应用。在这里，机器学习算法属于**计算机科学**，而语言分析则属于**语言学**。
- en: Computational linguistics is a field that helps you to understand both computer
    science and linguistics approaches together.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 计算语言学是一个领域，帮助你理解计算机科学和语言学方法的结合。
- en: 'Here is a list of tools that are linguistics concepts and are implemented with
    the help of computer science techniques. These tools are often used for developing
    NLP applications:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些语言学概念的工具，它们通过计算机科学技术得以实现。这些工具通常用于开发NLP应用：
- en: For POS tagging, POS taggers are used. Famous libraries are `nltk` and `pycorenlp`.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于词性标注，使用词性标注器。著名的库有`nltk`和`pycorenlp`。
- en: Morph analyzers are used to generate word-level stemming. For this, the `nltk`
    and `polyglot` libraries are used.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形态分析器用于生成单词级别的词干提取。为此，使用`nltk`和`polyglot`库。
- en: Parsers are used to identify the structure of the sentences. For this, we are
    using Stanford CoreNLP and `nltk` to generate a parsing tree. You can use Python
    package called `spaCy`.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器用于识别句子的结构。为此，我们使用Stanford CoreNLP和`nltk`来生成解析树。你也可以使用一个名为`spaCy`的Python包。
- en: Defining context-free grammar
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义上下文无关文法
- en: Now let's focus on NLU, and to understand it, first we need to understand **context-free
    grammar** (**CFG**) and how it is used in NLU.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们关注自然语言理解（NLU），要理解它，首先我们需要理解**上下文无关文法**（**CFG**）以及它在自然语言理解中的应用。
- en: 'Context-free grammar is defined by its four main components. Those four components
    are shown in this symbolic representation of CFG:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文无关文法由四个主要组成部分定义。这四个组成部分在CFG的符号表示中有所展示：
- en: A set of non-terminal symbols, **N**
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组非终结符号，**N**
- en: A set of terminal symbols, **T**
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组终结符，**T**
- en: A start symbol, **S**, which is a non-terminal symbol
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个起始符号，**S**，它是一个非终结符号
- en: A set of rules called **production** **rules P**, for generating sentences
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组称为**生成规则**的**生产规则 P**，用于生成句子
- en: 'Let''s take an example to get better understanding of the context-free grammar
    terminology:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来更好地理解上下文无关文法的术语：
- en: '***X ->** ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png)*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '***X ->** ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png)*'
- en: Here, ***X->** ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png)* is called
    the **phrase structure rule** or **production rule**, **P**. *X* ε *N* means *X*
    belongs to non-terminal symbol; ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png)
    ε {**N** or **T**} means ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png) belongs
    to either terminal symbols or non-terminal symbols. *X* can be rewritten in the
    form of ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png). The rule tells you
    which element can be rewritten to generate a sentence, and what the order of the
    elements will be as well.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，***X->** ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png)* 称为**短语结构规则**或**生成规则**，**P**。*X*
    ε *N*表示*X*属于非终结符号；![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png) ε {**N** 或
    **T**} 表示 ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png) 属于终结符号或非终结符号。*X*可以以
    ![](img/30e1e2bf-4fe0-4b65-90cb-66985a0bd284.png) 的形式进行重写。该规则告诉你哪个元素可以被重写以生成句子，以及这些元素的顺序。
- en: Now I will take a real NLP example. I'm going to generate a sentence using CFG
    rules. We are dealing with simple sentence structure to understand the concepts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将以一个实际的NLP示例为例。我将使用CFG规则生成一个句子。我们将处理简单的句子结构，以便理解这些概念。
- en: Let's think. What are the basic elements required to generate grammatically
    correct sentences in English? Can you remember them? Think!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下。生成语法正确的英语句子所需的基本元素是什么？你记得吗？想一想！
- en: 'I hope you remember that noun phrases and verb phrases are important elements
    of the sentences. So, start from there. I want to generate the following sentence:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你记得，名词短语和动词短语是句子的关键元素。所以，从这里开始。我想生成以下句子：
- en: He likes cricket.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 他喜欢板球。
- en: 'In order to generate the preceding sentence, I''m proposing the following production
    rules:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成上面的句子，我提出了以下生成规则：
- en: 'R1: S -> NP VP'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R1: S -> NP VP'
- en: 'R2: NP -> N'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R2: NP -> N'
- en: 'R3: NP -> Det N'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R3: NP -> Det N'
- en: 'R4: VP -> V NP'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R4: VP -> V NP'
- en: 'R5: VP -> V'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R5: VP -> V'
- en: 'R6: N -> Person Name | He | She | Boy | Girl | It | cricket | song | book'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R6: N -> Person Name | He | She | Boy | Girl | It | cricket | song | book'
- en: 'R7: V -> likes | reads | sings'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'R7: V -> likes | reads | sings'
- en: 'See the parse tree of the sentence: **He likes cricket**, in *Figure 3.2*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看句子**He likes cricket**的语法分析树，见*图3.2*：
- en: '![](img/be2ec958-8f06-4f77-a7ff-a40df50df1ec.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be2ec958-8f06-4f77-a7ff-a40df50df1ec.png)'
- en: 'Figure 3.2: Parse tree for the sentence using the production rule'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：使用生成规则的句子语法分析树
- en: 'Now, let''s know how we have generated a parse tree:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来了解一下我们是如何生成语法分析树的：
- en: According to the production rules, we can see **S** can be rewritten as a combination
    of a **noun phrase** (**NP**) and a **verb phrase** (**VP**); see rule *R1*.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据生成规则，我们可以看到**S**可以被重写为**名词短语**（**NP**）和**动词短语**（**VP**）的组合；参见规则*R1*。
- en: '**NP** can be further rewritten as either a **noun** (**NN**) or as a **determiner**
    (**Det**) followed by a noun; see rules *R2* and *R3*.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NP**可以进一步被重写为**名词**（**NN**）或**限定词**（**Det**）后接一个名词；参见规则*R2*和*R3*。'
- en: Now you can rewrite the **VP** in form of a **verb** (**V**) followed by a **NP**,
    or a **VP** can be rewritten as just **V**; see rules *R4* and *R5*.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在你可以将**VP**重写为**动词**（**V**）后接一个**NP**，或者**VP**可以被重写为仅为**V**；参见规则*R4*和*R5*。
- en: Here, **N** can be rewritten in the form of **Person Name**, **He**, **She**,
    and so on. **N** is a terminal symbol; see the rule *R6*.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里，**N**可以被重写为**人名**、**He**、**She**等。**N**是一个终结符号；参见规则*R6*。
- en: '**V** can be rewritten by using any of the options on the right-hand side in
    rule *R7*. **V** is also terminal symbol.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**V**可以通过使用规则*R7*右边的任一选项来重写。**V**也是一个终结符号。'
- en: By using all the rules, we have generated the parse tree in *Figure 3.2*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用所有规则，我们生成了*图3.2*中的语法分析树。
- en: Don't worry if you cannot generate a parse tree. We will see the concept and
    implementation details in the Chapter 5, *Feature Engineering and NLP Algorithms*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法生成语法分析树，不要担心。我们将在第五章，*特征工程与NLP算法*中看到该概念和实现细节。
- en: Here, we have seen a very basic and simple example of CFG. Context-free grammar
    is also called **phrase structure grammar**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们看到的是一个非常基础且简单的上下文无关文法（CFG）示例。上下文无关文法也叫做**短语结构文法**。
- en: Exercise
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Generate a parse tree by using the rule given previously in this section and
    generate the parse tree for the following sentence:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用本节中给出的规则生成一个语法分析树，并为以下句子生成语法分析树：
- en: She sings a song.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 她唱歌。
- en: 'Generate production rules and make a parse tree for the following sentence:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成生成规则并为以下句子制作语法分析树：
- en: That boy is reading a book.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那个男孩正在读一本书。
- en: Morphological analysis
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 形态学分析
- en: Here, we are going to explore the basic terminology used in field of morphological
    analysis. The terminology and concepts will help you when you are solving real-life
    problems.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将探索形态学分析领域中使用的基本术语。这些术语和概念将帮助你在解决实际问题时提供帮助。
- en: What is morphology?
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是形态学？
- en: Morphology is branch of linguistics that studies how words can be structured
    and formed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 形态学是语言学的一个分支，研究词语如何被构造和形成。
- en: What are morphemes?
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是语素？
- en: In linguistics, a morpheme is the smallest meaningful unit of a given language.
    The important part of morphology is morphemes, which are the basic unit of morphology.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在语言学中，语素是某种语言中最小的有意义单位。形态学中最重要的部分是语素，它们是形态学的基本单元。
- en: Let's take an example. The word *boy* consists of single morpheme whereas *boys*
    consists of two morphemes; one is *boy* and the other morpheme -*s*
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子。单词*boy*由一个语素组成，而*boys*由两个语素组成；一个是*boy*，另一个语素是*-s*
- en: What is a stem?
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是词干？
- en: The part of a word that an affix is attached to is called as **stem**. The word
    *tie* is **root** whereas *Untie* is **stem.**
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 词的部分，附加词缀附着在其上，叫做**词干**。单词*tie*是**根**，而*Untie*是**词干**。
- en: Now, let's understand morphological analysis.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来理解形态学分析。
- en: What is morphological analysis?
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是形态学分析？
- en: Morphological analysis is defined as grammatical analysis of how words are formed
    by using morphemes, which are the minimum unit of meaning.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 形态学分析被定义为对词如何通过使用语素来构成的语法分析，语素是最小的意义单位。
- en: 'Generally, morphemes are affixes. Those affixes can be divided into four types:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，语素是词缀。这些词缀可以分为四种类型：
- en: Prefixes, which appear before a stem, such as **un**happy
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前缀，出现在词干之前，如**un**happy
- en: Suffixes, which appear after a stem, such as happi**ness**
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀，出现在词干之后，如 happi**ness**
- en: Infixes, which appear inside a stem, such as b**um**ili (this means buy in Tagalog,
    a language from the Philippines)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入词缀，出现在词干内部，如 b**um**ili（这在菲律宾的塔加洛语中意味着购买）
- en: Circumfixes surround a word. It is attached to the beginning and end of the
    stem. For example, **ka**baddang**an** (this means help in Tuwali Ifugao, another
    language from the Philippines)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环绕附加词缀称为环附缀。它附加在词干的开始和结尾。例如，**ka**baddang**an**（这在菲律宾的一种语言Tuwali Ifugao中意味着帮助）
- en: Morphological analysis is used in word segmentation, and **Part Of Speech**
    (**POS**) tagging uses this analysis. I will explain about POS in the *Lexical
    analysis* section, so bear with me until we will connect the dots.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 形态学分析用于词汇切分，**词性**（**POS**）标注也使用这种分析。我将在*词法分析*部分解释POS，请耐心等待，直到我们将这些点连接起来。
- en: 'Let''s take an example to practically explain the concepts that I have proposed.
    I would like to take the word **Unexpected**. Refer to *Figure 3.3*, which gives
    you an idea about the morphemes and how morphological analysis has taken place:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子来实际解释我提出的概念。我想以单词**Unexpected**为例。参考*图3.3*，它向你展示了语素以及形态学分析是如何进行的：
- en: '![](img/de0833b8-b0e7-454d-8bda-3565ffeea8bf.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de0833b8-b0e7-454d-8bda-3565ffeea8bf.png)'
- en: 'Figure 3.3: Morphemes and morphological analysis'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：语素与形态学分析
- en: In *Figure 3.3*, we have expressed **Unexpected** as morphemes and performed
    morphological analysis the morphemes. Here, **Un** is a **Prefix**, and **ed**
    is a **Suffix**. **Un** and **ed** can be considered as **affixes**, **Unexpect**
    is the **Stem**.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图3.3*中，我们将**Unexpected**表示为语素，并对这些语素进行了形态学分析。在这里，**Un**是一个**前缀**，**ed**是一个**后缀**。**Un**和**ed**可以视为**词缀**，而**Unexpect**是**词干**。
- en: Let's refer to another important concept and try to relate it to the concept
    of morphemes. I'm talking about how you define a word. Let's see.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们参考另一个重要的概念，并试着将它与语素的概念联系起来。我在说的是你如何定义一个词。让我们看看。
- en: What is a word?
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是词？
- en: A word can be isolated from a sentence as the single smallest element of a sentence
    that carries meaning. This smallest single isolated part of a sentence is called
    a **word**.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 词可以从句子中分离出来，作为句子中带有意义的最小单元。这个最小的独立单元叫做**词**。
- en: Please refer to the morphemes definition again and try to relate it to the definition
    of word. The reason why I have told you to do this is that you may confuse words
    and morphemes, or maybe you are not sure what the difference is between them.
    It is completely fine that you have thought in this way. They are confusing if
    you do not understand them properly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请再次参考语素的定义，并尝试将其与词的定义联系起来。我之所以让你这么做，是因为你可能会混淆词和语素，或者你可能不确定它们之间的区别。这种思考是完全可以理解的。如果你没有正确理解它们，它们确实会让人感到困惑。
- en: 'The definitions look similar, but there is a very small difference between
    words and morphemes. We can see the differences in the following table:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 定义看起来相似，但词和语素之间有非常小的区别。我们可以通过以下表格看到这些区别：
- en: '| **Morpheme** | **Word** |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| **语素** | **词** |'
- en: '| Morphemes can or cannot stand alone. The word *cat* can stand alone but plural
    marker *-s* cannot stand alone. Here *cat* and *-s* both are morpheme. | A word
    can stand alone. So, words are basically free-standing units in sentences. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 语素可以独立存在，也可以不独立存在。*cat* 这个词可以独立存在，但复数标记 *-s* 不能独立存在。在这里，*cat* 和 *-s* 都是语素。|
    一个词可以独立存在。所以，词在句子中基本上是独立存在的单位。|'
- en: '| When a morpheme stands alone then that morpheme is called **root** because
    it conveys the meaning of its own, otherwise morpheme mostly takes affixes.The
    analysis of what kind of affixes morpheme will take is covered under morphological
    analysis. | A word can consist of a single morpheme. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 当一个语素独立存在时，这个语素被称为**词根**，因为它传达了自身的意义，否则语素大多会附加词缀。语素会附加哪些词缀的分析属于形态学分析的范畴。|
    一个词可以由一个语素组成。|'
- en: '| For example, *cat* is a standalone morpheme, but when you consider *cats*,
    then the suffix *-s* is there, which conveys the information that *cat* is one
    morpheme and the suffix *-s* indicates the grammatical information that the given
    morpheme is the plural form of *cat*. | For example: *Cat* is a standalone word.*Cats*
    is also a standalone word. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 例如，*cat* 是一个独立的语素，但当你考虑 *cats* 时，后缀 *-s* 出现了，它传达了 *cat* 是一个语素的信息，并且后缀 *-s*
    表示该语素是 *cat* 的复数形式。| 例如：*Cat* 是一个独立的词。*Cats* 也是一个独立的词。|'
- en: Classification of morphemes
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语素的分类
- en: 'The classification of morphemes gives us lots of information about how the
    whole concept of morphological analysis works. Refer to *Figure 3.4*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 语素的分类为我们提供了有关形态学分析整体概念的很多信息。参见 *图 3.4*：
- en: '![](img/d590d981-f6ca-4c07-8a15-6645631423c7.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d590d981-f6ca-4c07-8a15-6645631423c7.png)'
- en: 'Figure 3.4: Classification of morphemes'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：语素的分类
- en: There two major part of morphemes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 语素有两个主要部分。
- en: Free morphemes
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自由语素
- en: 'Free morphemes can be explained as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 自由语素可以解释如下：
- en: Free morphemes can stand alone and act as a word. They are also called **unbound
    morphemes** or **free-standing morphemes**.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自由语素可以独立存在并作为一个词。它们也叫做**无绑定语素**或**独立语素**。
- en: 'Let''s see some of examples:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们看一些例子：
- en: Dog, cats, town, and house.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dog, cats, town 和 house。
- en: All the preceding words can be used with other words as well. Free morphemes
    can appear with other words as well. These kinds of words convey meaning that
    is different if you see the words individually.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有前面的词也可以与其他词一起使用。自由语素可以与其他词一起出现。这些词所传达的意义，如果单独看这些词时，会有所不同。
- en: 'Let''s see examples of that:'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们来看一些例子：
- en: Doghouse, town hall.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Doghouse, town hall.
- en: Here, the meaning of doghouse is different from the individual meanings of dog
    and house. The same applies to town hall.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，doghouse 的含义不同于 dog 和 house 的单独含义。town hall 也是如此。
- en: Bound morphemes
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定语素
- en: Bound morphemes usually take affixes. They are further divided into two classes.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定语素通常需要附加词缀。它们进一步分为两类。
- en: Derivational morphemes
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 派生语素
- en: Derivational morphemes are identified when infixes combine with the root and
    changes either the semantic meaning.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 派生语素是指当插入语素与词根结合时，改变了语义的意义。
- en: 'Now, let''s look at some examples:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一些例子：
- en: Take the word **unkind**. In this word, **un** is a prefix and **kind** is the
    root. The prefix **un** acts as a derivational morpheme that changes the meaning
    of the word **kind** to its opposite meaning, unkind.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 **unkind** 为例。在这个词中，**un** 是前缀，**kind** 是词根。前缀 **un** 作为一个派生语素，将 **kind**
    的意思转变为相反的意思，即 unkind。
- en: Take the word **happiness**. In this word, -**ness** is a derivational morpheme
    and **happy** is the root word. So, -**ness** changes happy to happiness. Check
    the POS tag, **happy** is an adjective and **happiness** is a noun. Here, tags
    that indicate the class of word, such as adjective and noun, are called POS.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 **happiness** 为例。在这个词中，-**ness** 是一个派生语素，**happy** 是词根。所以，-**ness** 将 happy
    转变为 happiness。查看词性标签，**happy** 是形容词，**happiness** 是名词。在这里，表示词类的标签，如形容词和名词，被称为词性标签（POS）。
- en: Inflectional morphemes
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屈折语素
- en: Inflection morphemes are suffixes that are added to a word to assign particular
    grammatical property to that word. Inflectional morphemes are considered to be
    grammatical markers that indicate tense, number, POS, and so on. So, in more simple
    language, we can say that inflectional morphemes are identified as types of morpheme
    that modify the verb tense, aspect, mood, person, number (singular and plural),
    gender, or case, without affecting the words meaning or POS.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 变形语素是加到词语上的后缀，用来赋予词语特定的语法属性。变形语素被视为语法标记，表示时态、数、词性等。因此，用更简单的语言来说，变形语素被认定为修改动词时态、体、语气、人称、数（单数和复数）、性别或格的语素，而不改变词语的意义或词性。
- en: 'Here''s some examples:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些示例：
- en: In the word **dogs**, -**s** changes the number of **dog**. -**s** converts
    **dog** from singular to plural form of it
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单词**dogs**中，-**s**改变了**dog**的数量。-**s**将**dog**从单数形式转换为复数形式。
- en: The word **expected** contains -**ed**, which is an inflectional morpheme that
    modifies the verb tense
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单词**expected**包含-**ed**，这是一个变形语素，修改了动词的时态。
- en: 'Here is the code for generating the stem from morphemes. We are using the `nltk`
    and `polyglot` libraries. You can find the code on this link: [https://github.com/jalajthanaki/NLPython/blob/master/ch3/3_1_wordsteam.py](https://github.com/jalajthanaki/NLPython/blob/master/ch3/3_1_wordsteam.py)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成词干的代码，我们使用了 `nltk` 和 `polyglot` 库。你可以通过这个链接找到代码：[https://github.com/jalajthanaki/NLPython/blob/master/ch3/3_1_wordsteam.py](https://github.com/jalajthanaki/NLPython/blob/master/ch3/3_1_wordsteam.py)
- en: 'See the code snippets in *Figure 3.5* and *Figure 3.6*:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 参见*图 3.5*和*图 3.6*中的代码片段：
- en: '![](img/9df95dda-917e-4113-a25b-fbc5ca229541.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9df95dda-917e-4113-a25b-fbc5ca229541.png)'
- en: 'Figure 3.5: Generating stems from morphemes using NLTK'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：使用 NLTK 从语素生成词干
- en: Now, let's see how the `polyglot` library has been used refer to *Figure 3.6****:***
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 `polyglot` 库是如何使用的，参考*图 3.6*：
- en: '![](img/f6c740ed-1658-40d5-aa19-c79e9fd09b1a.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6c740ed-1658-40d5-aa19-c79e9fd09b1a.png)'
- en: 'Figure 3.6: Generating stems from morphemes using the polyglot library'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：使用 Polyglot 库从语素生成词干
- en: 'The output of the code snippet is displayed in *Figure 3.7*:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段的输出显示在*图 3.7*中：
- en: '![](img/a02b5e5f-475c-45a3-bc33-7e3edd1c0da8.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a02b5e5f-475c-45a3-bc33-7e3edd1c0da8.png)'
- en: 'Figure 3.7: Output of code snippets in Figure 3.5 and Figure 3.6'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7：图 3.5 和图 3.6 中代码片段的输出
- en: What is the difference between a stem and a root?
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词干和词根有什么区别？
- en: 'This could be explained as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以这样解释：
- en: '| **Stem** | **Root** |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| **词干** | **词根** |'
- en: '| In order to generate a stem, we need to remove affixes from the word | A
    root cannot be further divided into smaller morphemes |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 为了生成词干，我们需要去除词语中的附加成分 | 词根不能再进一步分解为更小的语素 |'
- en: '| From the stem, we can generate the root by further dividing it | A stem is
    generated by using a root plus derivational morphemes |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 从词干中，我们可以通过进一步分解生成词根 | 词干是通过词根加派生语素生成的 |'
- en: '| The word **Untie** is stem | The word **tie** is root |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 单词**Untie**是词干 | 单词**tie**是词根 |'
- en: Exercise
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Do a morphological analysis like we did in *Figure 3.3* for the morphemes in
    redness, quickly, teacher, unhappy, and disagreement. Define prefixes, suffixes,
    verbs, and stems.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对单词“redness”、“quickly”、“teacher”、“unhappy”和“disagreement”中的语素做形态学分析，像我们在*图 3.3*中做的那样。定义前缀、后缀、动词和词干。
- en: Generate the stems of the words redness, quickly, teacher, disagreement, reduce,
    construction, deconstruction, and deduce using the `nltk` and `polyglot` libraries.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `nltk` 和 `polyglot` 库生成“redness”，“quickly”，“teacher”，“disagreement”，“reduce”，“construction”，“deconstruction”和“deduce”的词干。
- en: Generate the stems and roots of disagree, disagreement, historical.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成“disagree”，“disagreement”，“historical”的词干和词根。
- en: Lexical analysis
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词法分析
- en: Lexical analysis is defined as the process of breaking down a text into words,
    phrases, and other meaningful elements. Lexical analysis is based on word-level
    analysis. In this kind of analysis, we also focus on the meaning of the words,
    phrases, and other elements, such as symbols.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 词法分析定义为将文本分解为单词、短语和其他有意义的元素的过程。词法分析基于单词层面的分析。在这种分析中，我们还关注单词、短语和其他元素（如符号）的含义。
- en: Sometimes, lexical analysis is also loosely described as the **tokenization
    process**. So, before discussing tokenization, let's understand what a token is
    and what a POS tag is.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，词法分析也被宽泛地描述为**词元化过程**。因此，在讨论词元化之前，让我们先理解什么是词元以及什么是词性标记（POS 标签）。
- en: What is a token?
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是词元？
- en: Tokens are defined as the meaningful elements that are generated by using techniques
    of lexical analysis.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 词元被定义为通过词汇分析技术生成的有意义的元素。
- en: What are part of speech tags?
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是词性标注？
- en: A part of speech is a category of words or lexical items that have similar grammatical
    properties. Words belonging to the same **part of speech** (**POS**) category
    have similar behavior within the grammatical structure of sentences.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 词性是具有相似语法属性的单词或词汇项目的类别。属于同一**词性**（**POS**）类别的单词在句子的语法结构中具有相似的行为。
- en: In English, POS categories are verb, noun, adjective, adverb, pronoun, preposition,
    conjunction, interjection, and sometimes numeral, article, or determiner.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在英语中，词性（POS）包括动词、名词、形容词、副词、代词、介词、连词、感叹词，有时还包括数词、冠词或限定词。
- en: Process of deriving tokens
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词元派生过程
- en: 'Sentences are formed by stream of words and from a sentence we need to derive
    individual meaningful chunks which are called the **tokens** and process of deriving
    token is called **tokenization**:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 句子是由一连串单词组成的，从句子中我们需要派生出各个有意义的部分，这些部分叫做**词元**，派生词元的过程叫做**分词**：
- en: The process of deriving tokens from a stream of text has two stages. If you
    have a lot of paragraphs, then first you need to do sentence tokenization, then
    word tokenization, and generate the meaning of the tokens.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一段文本中派生词元的过程分为两个阶段。如果有很多段落，首先需要进行句子分词，然后是单词分词，并生成词元的意义。
- en: Tokenization and lemmatization are processes that are helpful for lexical analysis.
    Using the `nltk` library, we can perform tokenization and lemmatization.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分词和词形还原是对词汇分析有帮助的过程。使用`nltk`库，我们可以进行分词和词形还原。
- en: Tokenization can be defined as identifying the boundary of sentences or words.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分词可以定义为识别句子或单词的边界。
- en: Lemmatization can be defined as a process that identifies the correct intended
    POS and meaning of words that are present in sentences.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词形还原可以定义为一个过程，旨在识别句子中单词的正确词性和意义。
- en: Lemmatization also includes POS tagging to disambiguate the meaning of the tokens.
    In this process, the context window is either phrase level or sentence level.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词形还原还包括词性标注，以消除词元的歧义。在这个过程中，上下文窗口可以是短语级别或句子级别。
- en: 'You can find the code at the GitHub link: [https://github.com/jalajthanaki/NLPython/tree/master/ch3](https://github.com/jalajthanaki/NLPython/tree/master/ch3)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub链接找到代码：[https://github.com/jalajthanaki/NLPython/tree/master/ch3](https://github.com/jalajthanaki/NLPython/tree/master/ch3)
- en: 'The code snippet is shown in *Figure 3.8*:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段见*图3.8*：
- en: '![](img/e5cecd2f-49b4-48f6-954d-40b1a7c80a5f.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5cecd2f-49b4-48f6-954d-40b1a7c80a5f.png)'
- en: 'Figure 3.8: Code snippet for tokenization'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：分词的代码片段
- en: 'The output of the code in *Figure 3.8* is shown in *Figure 3.9*:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.8*中的代码输出见*图3.9*：'
- en: '![](img/07ee541e-7b12-45f4-8f91-e4e3317a0c5d.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07ee541e-7b12-45f4-8f91-e4e3317a0c5d.png)'
- en: 'Figure 3.9: Output of tokenization and lemmatization'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：分词和词形还原的输出
- en: Difference between stemming and lemmatization
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词干提取与词形还原的区别
- en: 'Stemming and lemmatization both of these concepts are used to normalized the
    given word by removing infixes and consider its meaning. The major difference
    between these is as shown:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 词干提取和词形还原这两个概念都用于通过去除词缀并考虑其含义来规范化给定的单词。它们之间的主要区别如下：
- en: '| **Stemming** | **Lemmatization** |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| **词干提取** | **词形还原** |'
- en: '| Stemming usually operates on single word without knowledge of the context
    | Lemmatization usually considers words and the context of the word in the sentence
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 词干提取通常在没有上下文知识的情况下处理单一单词 | 词形还原通常考虑单词及其在句子中的上下文 |'
- en: '| In stemming, we do not consider POS tags | In lemmatization, we consider
    POS tags |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 词干提取不考虑词性标签 | 词形还原考虑词性标签 |'
- en: '| Stemming is used to group words with a similar basic meaning together | Lemmatization
    concept is used to make dictionary or WordNet kind of dictionary. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 词干提取用于将具有相似基本意义的单词归为一类 | 词形还原的概念用于构建字典或类似WordNet的词典。 |'
- en: Applications
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用
- en: 'You must think how this lexical analysis has been used for developing NLP applications.
    So, here we have listed some of the NLP applications which uses lexical analysis
    concepts:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定在想，这种词汇分析是如何被用于开发NLP应用的。所以，在这里我们列出了一些使用词汇分析概念的NLP应用：
- en: Lexical analysis such as sentence tokenization and stop word identification
    is often used in preprocessing.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句子分词和停用词识别等词汇分析通常用于预处理。
- en: Lexical analysis also used to develop a POS tagger. A POS tagger is a tool that
    generates POS tags for a stream of text.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词法分析也被用于开发词性标注器。词性标注器是一个为文本流生成词性标签的工具。
- en: Syntactic analysis
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法分析
- en: We have seen word-level analysis in lexical analysis. In this section, we will
    look at things from a higher level. We are going to focus on the grammar and structure
    of sentences by considering the phrases in the sentences.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在词法分析中看到过单词级分析。在这一节中，我们将从更高的层次来考虑问题。我们将重点关注句子的语法和结构，通过考虑句子中的短语。
- en: Now, let's define syntactic analysis and see how it will be used in NLP applications.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义语法分析，并看看它如何在自然语言处理应用中使用。
- en: What is syntactic analysis?
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是语法分析？
- en: Syntactic analysis is defined as analysis that tells us the logical meaning
    of certain given sentences or parts of those sentences. We also need to consider
    rules of grammar in order to define the logical meaning as well as correctness
    of the sentences.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 语法分析被定义为分析告诉我们某些给定句子或句子部分的逻辑意义。我们还需要考虑语法规则，以定义句子的逻辑意义以及其正确性。
- en: 'Let''s take an example: If I''m considering English and I have a sentence such
    as **School go a boy**, this sentence does not logically convey its meaning, and
    its grammatical structure is not correct. So, syntactic analysis tells us whether
    the given sentence conveys its logical meaning and whether its grammatical structure
    is correct.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子：如果我考虑英语，并且有一个句子如**School go a boy**，这个句子在逻辑上无法传达其意义，而且语法结构不正确。所以，语法分析告诉我们给定的句子是否传达了其逻辑意义，是否语法正确。
- en: Syntactic analysis is a well-developed area of NLP that deals with the syntax
    of NL. In syntactic analysis, grammar rules have been used to determine which
    sentences are legitimate. The grammar has been applied in order to develop a parsing
    algorithm to produce a structure representation or a parse tree.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 语法分析是自然语言处理的一个成熟领域，涉及自然语言的语法。在语法分析中，使用语法规则来判断哪些句子是合法的。语法已经被应用于开发解析算法，以生成结构表示或解析树。
- en: 'Here, I will generate the parse tree by using the `nltk` and Python wrapper
    libraries for Stanford CoreNLP called `pycorenlp`. Refer the following code snippet
    in *Figure 3.10* and in *Figure 3.11*. The output is given in *Figure 3.12*:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将通过使用`nltk`和Python包装库`pycorenlp`（用于Stanford CoreNLP）来生成解析树。请参考*图 3.10*和*图
    3.11*中的代码片段，输出见*图 3.12*：
- en: '![](img/5bc03edc-cbce-4e6b-bb40-936eeb90494c.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bc03edc-cbce-4e6b-bb40-936eeb90494c.png)'
- en: 'Figure 3.10: Code snippet for syntactic analysis'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10：语法分析的代码片段
- en: 'How you can use Stanford parser for syntactic analysis is demonstrated in next
    *Figure 3.11*:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用斯坦福解析器进行语法分析将在下一个*图 3.11*中展示：
- en: '![](img/c5b21b59-4943-49ca-b967-4f0be1c22dee.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5b21b59-4943-49ca-b967-4f0be1c22dee.png)'
- en: 'Figure 3.11: Code snippet for syntactic analysis'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11：语法分析的代码片段
- en: You can see the output of the preceding two code snippet as follows. Refer to
    *Figure 3.12:*
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到前面两个代码片段的输出，如下所示。参考*图 3.12*：
- en: '![](img/38d8d6f5-bf1f-42cd-9ef0-40418093d385.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38d8d6f5-bf1f-42cd-9ef0-40418093d385.png)'
- en: 'Figure 3.12: Output of parsing as part of syntactic analysis'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12：作为语法分析一部分的解析输出
- en: We will see the parsing tools and its development cycle related details in Chapter
    5, *Feature Engineering and NLP Algorithms*.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第5章《特征工程与自然语言处理算法》中看到与解析工具及其开发周期相关的详细信息，*特征工程与自然语言处理算法*。
- en: Semantic analysis
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义分析
- en: Semantic analysis is basically focused on the meaning of the NL. Its definition,
    various elements of it, and its application are explored in this section.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 语义分析基本上关注自然语言的意义。它的定义、各种元素及其应用将在本节中探讨。
- en: Now let's begin our semantic journey, which is quite interesting if you want
    to do some cool research in this branch.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始我们的语义之旅，如果你想在这个领域做一些有趣的研究，确实非常吸引人。
- en: What is semantic analysis?
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是语义分析？
- en: 'Semantic analysis is generating representation for meaning of the NL. You might
    think, if lexical analysis also focuses on the meaning of the words given in stream
    of text, then what is the difference between semantic analysis and lexical analysis?
    The answer is that lexical analysis is based on smaller tokens; its focus is on
    meaning of the words, but semantic analysis focuses on larger chunks. Semantic
    analysis can be performed at the phrase level, sentence level, paragraph level,
    and sometimes at the document level as well. Semantic analysis can be divided
    into two parts, as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 语义分析是为自然语言的意义生成表示。你可能会想，如果词汇分析也专注于文本流中单词的意义，那么语义分析和词汇分析有什么区别呢？答案是，词汇分析基于更小的单元，它的重点是单词的意义，而语义分析则专注于更大的块。语义分析可以在短语级别、句子级别、段落级别，甚至有时在文档级别进行。语义分析可以分为两部分，如下所示：
- en: The study of the meaning of the individual word is called **lexical semantics**
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对单个词语意义的研究称为**词汇语义学**
- en: The study of how individual words combine to provide meaning in sentences or
    paragraphs in the context of dealing with a larger unit of NL
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究单个单词如何结合提供句子或段落的意义，涉及处理更大的自然语言单元的背景。
- en: I want to give an example. If you have a sentence such as the **white house
    is great**, this can mean the statement is in context of the White House in the
    USA, whereas it is also possible the statement is literally talking about a house
    nearby, whose color is white is great. So, getting the proper meaning of the sentence
    is the task of semantic analysis.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我想举个例子。如果你有一个句子，如**白宫很棒**，这可以意味着该陈述是关于美国白宫的背景，而也有可能是字面上在说附近的某个房子，其颜色是白色并且很棒。所以，理解句子的正确含义是语义分析的任务。
- en: Lexical semantics
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词汇语义学
- en: Lexical semantics includes words, sub-words, or sub-units such as affixes, and
    even compound words, and phrases. Here words, sub-words and so on called **lexical
    items**.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 词汇语义学包括单词、子词或子单元，如词缀，甚至复合词和短语。在这里，单词、子词等被称为**词汇项**。
- en: 'The study of lexical semantics includes the following points:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 词汇语义学研究包括以下几点：
- en: Classification of lexical items
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词汇项的分类
- en: Decomposition of lexical items
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词汇项的分解
- en: Differences and similarities between various lexical semantic structures
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同词汇语义结构之间的差异和相似性
- en: Lexical semantics is the relationship among lexical items, meaning of the sentences
    and syntax of the sentence
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词汇语义学是词汇项之间、句子的意义与句法之间的关系。
- en: Let's see the various elements that are part of semantic analysis.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看语义分析中涉及的各种元素。
- en: Hyponymy and hyponyms
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下义词和下义词关系
- en: Hyponymy describes the relationship between a generic term and instances of
    the specified generic term. Here, a generic term is called a **hypernym**, and
    instances of the generic term are called **hyponyms**.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 下义词描述了一个通用术语与指定通用术语实例之间的关系。这里，通用术语叫做**上义词**，而通用术语的实例叫做**下义词**。
- en: So, color is a hypernym; red, green, yellow, and so on are hyponyms.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，color是一个上义词；red、green、yellow等是下义词。
- en: Homonymy
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同义词
- en: Homonyms are words that have a same syntax or same spelling or same form but
    their meaning are different and unrelated to each other.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 同义词是具有相同句法或相同拼写或相同形式的单词，但它们的意义是不同的且彼此无关。
- en: The word bank is a classic example. It can mean a financial institution or a
    river bank, among other things.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 单词“bank”是一个经典的例子。它可以表示一个金融机构或河岸，等等。
- en: Polysemy
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多义词
- en: In order to understand polysemy, we are focused on words of the sentences. Polysemy
    is a word or phrase which have different, but related senses. These kinds of words
    are also referred as lexically ambiguous words.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解多义词，我们重点关注句子中的单词。多义词是指具有不同但相关意义的词或短语。这类词也被称为词汇歧义词。
- en: Take the word bank. There are several senses or meaning you can consider.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 以单词“bank”为例。你可以考虑它的几种含义或意义。
- en: Bank is financial institution
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bank是金融机构
- en: Bank can be interpreted as river bank
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bank可以被解释为河岸
- en: What is the difference between polysemy and homonymy?
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多义词和同义词有什么区别？
- en: A word is called **polysemous** if it is used to express different meanings.
    The difference between the meanings of the word can be obvious.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个词用于表达不同的意义，则称该词为**多义词**。该词的不同含义可能很明显。
- en: Two or more words are called **homonyms** if they either have the same sound
    or have the same spelling but do not have related meanings.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个或更多的单词具有相同的发音或相同的拼写，但没有相关的意义，则这些单词被称为**同义词**。
- en: Application of semantic analysis
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义分析的应用
- en: 'Semantic analysis is one of the open research area so its basic concepts can
    be used by following applications:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 语义分析是一个开放的研究领域，因此它的基本概念可以被以下应用使用：
- en: Word sense disambiguation is one of the major tasks in NLP where semantic analysis
    has been heavily used, and it's still an open research area for Indian languages
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 词义消歧是 NLP 中的一项主要任务，其中语义分析得到了广泛应用，并且它仍然是印度语言的一个开放研究领域。
- en: We will see **word** **sense** **disambiguation** (**WSD**) usage in [Chapter
    7](0dc5bd44-3b7d-47ac-8b0d-51134007b483.xhtml), *Rule-Based System for NLP*
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在 [第七章](0dc5bd44-3b7d-47ac-8b0d-51134007b483.xhtml) 中看到 **词义消歧** (**WSD**)
    的应用，*基于规则的 NLP 系统*。
- en: The word2vec concept has emerged to handle semantic similarity. We will see
    this in Chapter 6, *Advance Feature Engineering and NLP Algorithms*
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: word2vec 概念应运而生，用于处理语义相似性。我们将在第六章 *高级特征工程与 NLP 算法* 中进一步探讨这一点。
- en: Handling ambiguity
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理歧义
- en: When we jump into semantic analysis, we may find there are many cases that are
    too ambiguous for an NLP system to handle. In these cases, we need to know what
    kinds of ambiguity exist and how we can handle them.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进入语义分析时，可能会发现有许多情况对于 NLP 系统来说过于模糊，无法处理。在这些情况下，我们需要了解存在哪些类型的歧义，以及如何处理它们。
- en: Ambiguity is one of the areas of NLP and cognitive sciences that doesn't have
    a well-defined solution. Sometimes, sentences are so complex and ambiguous that
    only the speaker can define the original or definite meaning of the sentence.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 歧义是 NLP 和认知科学领域中的一个问题，尚未找到明确的解决方案。有时，句子过于复杂和模糊，只有说话者才能定义句子的原始或确定意义。
- en: A word, phrase, or sentence is ambiguous if it has more than one meaning. If
    we consider word **light**,than it can mean not very heavy or not very dark. This
    is word level ambiguity. The phrase **porcelain egg container** is structure level
    ambiguity. So, here we will see different types of ambiguities in NLP .
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个词、短语或句子有多重含义，那么它就是歧义的。如果我们考虑单词 **light**，它可以表示不重或不暗。这就是单词级别的歧义。短语 **porcelain
    egg container** 是结构级别的歧义。所以，在这里我们将看到 NLP 中的不同类型歧义。
- en: 'First, let''s see the types of ambiguity, and then see how to handle them by
    using the means that are available. Refer to *Figure 3.13* for the different types
    of ambiguity:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看歧义的类型，然后看看如何利用现有的手段来处理它们。请参考 *图 3.13* 了解不同类型的歧义：
- en: '![](img/5b0d5e96-c201-42a1-87cc-587c06bd1498.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b0d5e96-c201-42a1-87cc-587c06bd1498.png)'
- en: 'Figure 3.13: Types of ambiguity'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13：歧义类型
- en: Lexical ambiguity
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词汇歧义
- en: 'Lexical ambiguity is word-level ambiguity. A single word can have ambiguous
    meaning in terms of its internal structure and its syntactic class. Let''s look
    at some examples:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 词汇歧义是单词级别的歧义。单个词根据其内部结构和句法类别可能具有模糊的含义。让我们看几个例子：
- en: 'Sentence 1: Look at the stars. Here, *look* is a verb.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句子 1：看那些星星。这里，*look* 是一个动词。
- en: 'Sentence 2: The person gave him a warm look. Here, *look* is a noun.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句子 2：那个人给了他一个温暖的目光。这里，*look* 是一个名词。
- en: 'Sentence 3: She won three silver medals. Here, *silver* is a noun.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句子 3：她赢得了三枚银牌。这里，*silver* 是一个名词。
- en: 'Sentence 4: She made silver speech. Here, *silver* is a adjective.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句子 4：她发表了银质演讲。这里，*silver* 是一个形容词。
- en: 'Sentence 5: His stress had silvered his hair. Here, *silvered* is a verb.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句子 5：他的压力使头发变白。这里，*silvered* 是一个动词。
- en: 'In the preceding examples, specific words change their POS tags according to
    their usage in sentence structure. This kind of ambiguity can been resolved by
    using two approaches:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，特定的单词根据其在句子结构中的使用改变了词性标注。这种歧义可以通过以下两种方法来解决：
- en: By using accurate POS tagger tools, this kind of ambiguity can be resolved
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用准确的词性标注工具，这种歧义可以得到解决。
- en: WordNet sense has various scenes available for a word when the words take specific
    POS tag. This also helps to handle ambiguity
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordNet 的词义包含了针对特定词性标注的多个场景，这也有助于处理歧义。
- en: Many Indian languages have the same issue of lexical ambiguity.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 许多印度语言也存在词汇歧义的问题。
- en: Syntactic ambiguity
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 句法歧义
- en: 'We have seen, in syntactic analysis, sequences of words are grammatically structured.
    There are different ways of interpreting sequences of words, and each structure
    has a different interpretation. In syntactic ambiguity, syntax is unclear, not
    the word-level meaning. Here is an example of structural ambiguity:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在句法分析中看到，单词序列是按语法结构组织的。词序列有多种解释方式，每种结构都有不同的解释。在句法歧义中，语法不明确，而不是单词级别的含义。以下是结构歧义的一个例子：
- en: The man saw the girl with the telescope. Here, the ambiguity is because it is
    not clear whether the man sees the girl, who has a telescope, or the man sees
    the girl by using telescope. This ambiguity is called **prepositional phrase**
    (**PP**) ambiguity.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那个人看到了拿着望远镜的女孩。这里的歧义在于，不清楚是那个人看到了女孩（她拿着望远镜），还是那个人通过望远镜看到了女孩。这种歧义被称为**介词短语**（**PP**）歧义。
- en: Approach to handle syntactic ambiguity
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理句法歧义的方法
- en: 'To handle this ambiguity, we need to use statistical approaches and get the
    most likelihood ratio. We need to take co-occurrences between the verb and the
    preposition in one hand, and preposition and the noun on other hand, and then
    calculate the log-likelihood ratio by using following equation:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这种歧义，我们需要使用统计方法，并获得最大的似然比。我们需要从一方面考虑动词与介词的共现，另一方面考虑介词与名词的共现，然后通过以下公式计算对数似然比：
- en: '![](img/e4a2a65e-f919-4a43-b179-c151e067fac0.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4a2a65e-f919-4a43-b179-c151e067fac0.png)'
- en: 'Figure 3.14: Log-likelihood ratio'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14：对数似然比
- en: Here, *p(p/v)* is the probability of seeing a PP with preposition *p* and after
    verb *v*.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*p(p/v)* 是在动词 *v* 后看到带介词 *p* 的介词短语（PP）的概率。
- en: And *p(p/n)* is the probability of seeing a PP with preposition *p* after noun
    *n*.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 *p(p/n)* 是在名词 *n* 后看到带介词 *p* 的介词短语（PP）的概率。
- en: If *F(v,p,n) < 0*, then we need to attach the preposition to the noun, and if
    *F(v,p,n)* >0, then we need to attach preposition to the verb. We will see the
    implementation in [Chapter 5](07f71ca1-6c8a-492d-beb3-a47996e93f04.xhtml), *Feature
    Engineering and NLP Algorithms*.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *F(v,p,n) < 0*，则需要将介词附加到名词上；如果 *F(v,p,n)* >0，则需要将介词附加到动词上。我们将在[第5章](07f71ca1-6c8a-492d-beb3-a47996e93f04.xhtml)中看到实现，*特征工程与自然语言处理算法*。
- en: Semantic ambiguity
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义歧义
- en: 'Semantic ambiguity occurs when the meaning of the words themselves can be misinterpreted.
    Here''s an example:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 语义歧义发生在单词本身的意义可能被误解的情况下。以下是一个例子：
- en: ABC head seeks arms
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABC 头部寻求武器
- en: Here, the word head either means chief or body part, and in the same way, arms
    can be interpreted as weapons or as body parts
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里，单词“head”可以指“首席”或“身体部位”，同样，“arms”可以被解释为武器或身体部位。
- en: This kind of ambiguity is considered in semantic ambiguity
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种歧义被视为语义歧义的一部分。
- en: Handling semantic ambiguity with high accuracy is an open research area. Nowadays,
    the word2vec representation technique is very useful for handling semantic ambiguity.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 高准确度地处理语义歧义仍然是一个开放的研究领域。如今，word2vec表示技术对处理语义歧义非常有用。
- en: Pragmatic ambiguity
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语用歧义
- en: 'Pragmatics ambiguity occurs when the context of a phrase gives it multiple
    different interpretations. Let''s take an example:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 语用歧义发生在一个短语的上下文使其有多种不同解释的情况下。我们来看一个例子：
- en: Give it to that girl. This could mean any number of things.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 把它给那个女孩。这句话可能有多种解释。
- en: 'Now let''s take a large context:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一个较大的上下文：
- en: I have chocolate and a packet of biscuits. Give it to that girl. Here, it is
    not clear whether it refers to chocolate or the packet of biscuits.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有巧克力和一包饼干。把它给那个女孩。这里不清楚“它”是指巧克力还是那包饼干。
- en: Handling this kind of ambiguity is still an open area of research.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这种歧义仍然是一个开放的研究领域。
- en: Discourse integration
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语篇整合
- en: Discourse integration is closely related to pragmatics. Discourse integration
    is considered as the larger context for any smaller part of NL structure. NL is
    so complex and, most of the time, sequences of text are dependent on prior discourse.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 语篇整合与语用学密切相关。语篇整合被视为自然语言结构中任何较小部分的更大上下文。自然语言如此复杂，大多数情况下，文本的序列依赖于先前的语篇。
- en: This concept occurs often in pragmatic ambiguity. This analysis deals with how
    the immediately preceding sentence can affect the meaning and interpretation of
    the next sentence. Here, context can be analyzed in a bigger context, such as
    paragraph level, document level, and so on.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念经常出现在语用歧义中。这一分析处理的是前一句话如何影响下一句话的意义和解释。在这里，语境可以在更大的上下文中进行分析，例如段落级别、文档级别等。
- en: Applications
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用
- en: 'Concepts of discourse integration have been used by following NLP applications:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 语篇整合的概念已经被以下自然语言处理（NLP）应用使用：
- en: This concept often used in NLG applications.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个概念经常在自然语言生成（NLG）应用中使用。
- en: Chatbots, which are developed to deliver generalized AI. In this kind of application,
    deep learning has been used. We will see the NLG with deep learning in [Chapter
    9](f414d38e-b88e-4239-88bd-2d90e5ce67ab.xhtml), *Deep Learning for NLP and NLG
    Problems*.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天机器人是为了实现通用人工智能而开发的。在这种应用中，深度学习已被广泛使用。我们将在[第9章](f414d38e-b88e-4239-88bd-2d90e5ce67ab.xhtml)中看到基于深度学习的NLG，*自然语言生成与深度学习问题*。
- en: Pragmatic analysis
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语用分析
- en: Pragmatic analysis deals with outside word knowledge, which means knowledge
    that is external to the documents and/or queries. Pragmatics analysis that focuses
    on what was described is reinterpreted by what it actually meant, deriving the
    various aspects of language that require real world knowledge.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 语用分析处理的是外部世界知识，即文档和/或查询之外的知识。语用学分析关注的是对已描述内容的再解释，旨在从实际意义中提取语言的不同方面，这些方面需要依赖现实世界的知识。
- en: 'Let''s look at an example:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子：
- en: Pruning a tree is a long process.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修剪树木是一个漫长的过程。
- en: Here, pruning a tree is one of the concepts of computer science algorithm techniques.
    So, the word **pruning** is not related to cutting the actual physical tree, we
    are talking about computer science algorithm. This is an ambiguous situation;
    how to deal with these kinds of ambiguous situations is also an open area of research.
    Big tech giants use deep learning techniques to do pragmatics analysis and try
    to generate the accurate context of the sentence in order to develop highly accurate
    NLP applications.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，修剪树木是计算机科学算法技术中的一个概念。因此，**修剪**这个词与切割实际的物理树木无关，我们讨论的是计算机科学算法。这是一个模糊的情形；如何处理这种模糊情况也是一个开放的研究领域。大型科技公司使用深度学习技术进行语用分析，尝试生成句子的准确上下文，从而开发出高度精确的NLP应用。
- en: Summary
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explored the basics of linguistics, which are often used to develop
    NLP applications. We have seen all kinds of analysis related to NL. We have seen
    word level analysis and larger context analysis. We have seen difference between
    some of the key concepts to resolve any confusion. After this chapter, you can
    identify which concepts of linguistics or tool is more interesting for you to
    use. Researchers can find the potential research area if they want to pursue research
    either in linguistics, computer linguistics or computer science with major in
    NLP.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了语言学的基础知识，这些知识通常用于开发NLP应用。我们已经了解了与自然语言相关的各种分析方法，涵盖了单词层级分析和更大语境的分析。我们还区分了一些关键概念，以解决任何可能的混淆。在本章之后，你可以识别哪些语言学概念或工具对你更有吸引力，便于使用。研究人员如果想从事语言学、计算语言学或以NLP为主的计算机科学研究，可以发现潜在的研究领域。
- en: In the next chapter, we will focus on practical and coding aspects and begin
    our journey to develop NLP applications. The next chapter is all about **preprocessing**
    the data, one of the basic but important steps in developing NLP applications.
    Preprocessing includes some of the concepts which we have described here. We will
    use them along with the standard ways of preprocessing.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于实践和编码方面，开始开发NLP应用的旅程。下一章将讨论**数据预处理**，这是开发NLP应用的基本但重要的步骤。预处理包括我们在这里描述的一些概念，我们将结合标准的预处理方法来使用它们。
