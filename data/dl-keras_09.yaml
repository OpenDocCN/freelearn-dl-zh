- en: Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations on making it to the end of the book! Let us take a moment and
    see how far we have come since we started.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你读完了这本书！让我们花点时间回顾一下自从开始以来我们已经走了多远。
- en: If you are like most readers, you started with some knowledge of Python and
    some background in machine learning, but you were interested in learning more
    about deep learning and wanted to be able to apply these deep learning skills
    using Python.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像大多数读者一样，你开始时已经具备了一些Python知识和机器学习的背景，但你有兴趣深入了解深度学习，并希望能够使用Python应用这些深度学习技能。
- en: You learned how to install Keras on your machine and started using it to build
    simple deep learning models. You then learned about the original deep learning
    model, the multi-layer perceptron, also called the **fully connected network**
    (**FCN**). You learned how to build this network using Keras.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何在你的机器上安装Keras，并开始使用它构建简单的深度学习模型。接着，你了解了原始的深度学习模型——多层感知机，也叫**全连接网络**（**FCN**）。你学会了如何使用Keras构建这个网络。
- en: You also learned about the many tunable parameters that you need to tweak to
    get good results from your network. With Keras, a lot of the hard work has been
    done for you since it comes with sensible defaults, but there are occasions where
    this knowledge will be helpful to you.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了许多可调参数，你需要调整这些参数才能从你的网络中获得良好的结果。使用Keras，很多繁琐的工作已经为你做了，因为它提供了合理的默认设置，但有时候这些知识对你还是很有帮助的。
- en: Continuing on from there, you were introduced to **convolutional neural network**
    (**CNN**), originally built to exploit feature locality of images, although you
    can also use them for other types of data such as text, audio or video. Once again,
    you saw how to build a CNN using Keras. You also saw the functionality that Keras
    provides to build CNNs easily and intuitively. You saw how to use pre-trained
    image networks to make predictions about your own images, via the process of transfer
    learning and fine-tuning.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，你被介绍了**卷积神经网络**（**CNN**），它最初是为利用图像的特征局部性而构建的，虽然你也可以将其用于其他类型的数据，如文本、音频或视频。你再次看到如何使用Keras构建CNN。你还了解了Keras提供的功能，可以轻松直观地构建CNN。你还看到了如何使用预训练的图像网络通过迁移学习和微调来对自己的图像进行预测。
- en: From there, you learned about **generative adversarial network** (**GAN**),
    which are a pair of networks (usually CNN) that attempt to work against each other
    and, in the process, make each other stronger. GANs are a cutting-edge technology
    in the deep learning space; a lot of recent work is going on around GANs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，你学习了**生成对抗网络**（**GAN**），它是由一对网络（通常是CNN）组成，尝试相互对抗，在这个过程中使彼此变得更强。GAN是深度学习领域的前沿技术，最近围绕GAN有很多研究工作。
- en: From there, we turned our attention to text and we learned about **word embeddings**,
    which have become the most common technology used for the vector representation
    of text in the last couple of years. We looked at various popular word embedding
    algorithms and saw how to use pre-trained word embeddings to represent collections
    of words, as well as support for word embeddings in Keras and gensim.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，我们将注意力转向了文本，并学习了**词嵌入**，这是近年来用于文本向量表示的最常见技术。我们研究了各种流行的词嵌入算法，了解了如何使用预训练的词嵌入来表示词汇集合，以及Keras和gensim对词嵌入的支持。
- en: We then looked at **recurrent neural network** (**RNN**), a class of neural
    network optimized for handing sequence data such as text or time series. We learned
    about the shortcomings of the basic RNN model and how these are alleviated in
    the more powerful variants such as the **long short term model** (**LSTM**) and
    **gated recurrent unit** (**GRU**). We looked at a few examples where these components
    are used. We also looked briefly at Stateful RNN models and where they might be
    used.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接着我们学习了**递归神经网络**（**RNN**），这是一类针对处理序列数据（如文本或时间序列）进行优化的神经网络。我们了解了基本RNN模型的不足之处，以及如何通过更强大的变体（如**长短期记忆网络**（**LSTM**）和**门控递归单元**（**GRU**））来缓解这些问题。我们看了一些使用这些组件的例子。我们还简要了解了有状态RNN模型及其可能的应用场景。
- en: Next up, we looked at a few additional models that don't quite fit the molds
    of the models we have spoken so far. Among them are **autoencoders**, a model
    for unsupervised learning—**regression networks** that predict a continuous value
    rather than a discrete label. We introduced the **Keras functional API**, which
    allows us to build complex networks with multiple inputs and outputs and share
    components among multiple pipelines. We looked at ways to customize Keras to add
    functionality that doesn't currently exist.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了一些不完全符合我们目前所讨论模型类型的其他模型。其中包括**自编码器**，一种无监督学习模型——**回归网络**，它预测一个连续的值，而不是离散的标签。我们介绍了**Keras功能API**，它允许我们构建具有多个输入和输出的复杂网络，并在多个管道之间共享组件。我们还研究了如何自定义Keras，添加当前不存在的功能。
- en: Finally, we looked at training deep learning networks using **reinforcement
    learning** in the context of playing arcade games, which many consider a first
    step toward a general artificial intelligence. We provided a Keras example of
    training a simple game. We then briefly described advances in this field in the
    context of networks playing even harder games such as Go and Poker at a superhuman
    level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们研究了在玩街机游戏的背景下使用**强化学习**训练深度学习网络，许多人认为这是通向通用人工智能的第一步。我们提供了一个使用Keras训练简单游戏的示例。接着，我们简要描述了在这一领域的进展，特别是在网络以超人水平玩更难的游戏（如围棋和扑克）方面的进展。
- en: We believe you are now equipped with the skills to solve new machine learning
    problems using deep learning and Keras. This is an important and valuable skill
    in your journey to becoming a deep learning expert.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信您现在已具备使用深度学习和Keras解决新机器学习问题的技能。这是您成为深度学习专家之路上一个重要且宝贵的技能。
- en: We would like to thank you for letting us help you on your journey to deep learning
    mastery.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢您让我们帮助您踏上深度学习精通之路。
- en: Keras 2.0 — what is new
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras 2.0 — 新特性
- en: According to Francois Chollet, Keras was released two years ago, in March, 2015\.
    It then proceeded to grow from one user to one hundred thousand. The following
    image, taken from the Keras blog, shows the growth of number of Keras users over
    time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Francois Chollet的说法，Keras于两年前，即2015年3月发布。随后，它从一个用户增长到了十万个用户。以下图片来自Keras博客，展示了Keras用户数量随时间增长的情况。
- en: <q>![](img/keras_users_2015_2016.png)</q>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <q>![](img/keras_users_2015_2016.png)</q>
- en: One important update with Keras 2.0 is that the API will now be a part of TensorFlow,
    starting with TensorFlow 1.2\. Indeed, Keras is becoming more and more the *lingua
    franca* for deep learning, a *spec* used in an increasing number of deep learning
    contexts. For instance, Skymind is implementing Keras spec in Scala for ScalNet,
    and Keras.js is doing the same for JavaScript for running of deep learning directly
    in the browser. Efforts are also underway to provide a Keras API for MXNET and
    CNTK deep learning toolkits.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 2.0的一个重要更新是，API现在将成为TensorFlow的一部分，从TensorFlow 1.2开始。事实上，Keras正变得越来越成为深度学习的*通用语言*，一种在越来越多的深度学习应用场景中使用的*规范*。例如，Skymind正在为ScalNet在Scala中实现Keras规范，而Keras.js则为JavaScript实现相同的功能，以便直接在浏览器中运行深度学习。同时，也在努力为MXNET和CNTK深度学习工具包提供Keras
    API。
- en: Installing Keras 2.0
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Keras 2.0
- en: Installing Keras 2.0 is very simple via the `pip install keras --upgrade` followed
    by `pip install tensorflow --upgrade`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Keras 2.0非常简单，只需运行`pip install keras --upgrade`，然后运行`pip install tensorflow
    --upgrade`。
- en: API changes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API更改
- en: 'The Keras 2.0 changes implied the need to rethink some APIs. For full details,
    please refer to the release notes ([https://github.com/fchollet/keras/wiki/Keras-2.0-release-notes](https://github.com/fchollet/keras/wiki/Keras-2.0-release-notes)).
    This module `legacy.py` summarizes the most impactful changes and prevents warnings
    when using Keras 1.x calls:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 2.0的变化意味着需要重新考虑一些API。欲了解详细信息，请参考发布说明（[https://github.com/fchollet/keras/wiki/Keras-2.0-release-notes](https://github.com/fchollet/keras/wiki/Keras-2.0-release-notes)）。此模块`legacy.py`总结了最具影响力的变化，并在使用Keras
    1.x调用时避免警告：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are also a number of breaking changes. In particular:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在一些重大变化。具体来说：
- en: The maxout dense, time distributed dense, and highway legacy layers have been
    removed
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除maxout密集层、时间分布密集层和高速公路遗留层
- en: The batch normalization layer no longer supports the mode argument, because
    Keras internals have changed
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批归一化层不再支持mode参数，因为Keras的内部结构已发生变化
- en: Custom layers have to be updated
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义层需要更新
- en: Any undocumented Keras functionality could have broken
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何未记录的Keras功能可能已被破坏
- en: In addition, the Keras code base has been instrumented to detect the use of
    the Keras 1.x API calls and show deprecation warnings that show how to change
    the call to conform to the Keras 2 API. If you have some volume of Keras 1.x code
    already and are hesitant to try Keras 2 because of the fear of non-breaking changes,
    these deprecation warnings from the Keras 2 code base can be very helpful in making
    the transition.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Keras 代码库已被配置为检测使用 Keras 1.x API 调用，并显示弃用警告，指示如何修改调用以符合 Keras 2 API。如果你已经有一些
    Keras 1.x 代码，并且因为担心非破坏性更改而犹豫是否尝试 Keras 2，那么 Keras 2 代码库中的这些弃用警告将对你过渡到 Keras 2
    非常有帮助。
