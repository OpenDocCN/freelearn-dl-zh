- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Coding Assistants – Your Secret Weapon in Modern Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码助手 —— 现代开发中的秘密武器
- en: In this chapter, we will immerse ourselves in the field of **coding assistants**,
    exploring how these tools serve as secret weapons in modern software development.
    The chapter provides insights into the functionality, benefits, and practical
    applications of these tools, empowering readers to harness the full potential
    of coding assistants for enhanced productivity and code quality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨**编码助手**的领域，了解这些工具如何成为现代软件开发中的秘密武器。本章提供了对这些工具的功能、优势和实际应用的洞察，帮助读者充分发挥编码助手的潜力，以提高生产力和代码质量。
- en: By the end of this chapter, you will have a solid understanding of coding assistants
    and how to use them in your applications. You will also know how to handle complex
    state logic using coding assistants and how to debug your applications effectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你将对编码助手有一个扎实的理解，了解如何在应用中使用它们。你还将学会如何使用编码助手处理复杂的状态逻辑，并有效地调试应用。
- en: 'The main topics of this chapter are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要内容如下：
- en: Mastering coding assistants
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握编码助手
- en: Integrating coding assistants into your workflow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将编码助手集成到你的工作流程中
- en: Maximizing productivity with smart code suggestions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过智能代码建议最大化生产力
- en: Detecting and fixing errors with intelligent debugging
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用智能调试检测和修复错误
- en: Streamlining collaboration through code review assistance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过代码审查协助简化协作
- en: Mastering coding assistants
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握编码助手
- en: 'We live in an era where technology is constantly evolving, and software development
    is no exception. One such innovation is coding assistants. They are software tools
    that assist developers in writing code. They use AI to suggest improvements and
    corrections, making the coding process more efficient. I remember the first time
    I used GitHub Copilot in a development project. The impact was immediate: the
    speed at which I could implement complex features increased significantly. Not
    only did I save time but I also learned new best practices.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活在一个技术不断发展的时代，软件开发也不例外。其中一项创新就是编码助手。它们是帮助开发人员编写代码的软件工具，利用人工智能建议改进和修正，使得编码过程更加高效。我记得第一次在开发项目中使用
    GitHub Copilot 的时候，效果立竿见影：我实现复杂功能的速度显著提高。不仅节省了时间，我还学到了新的最佳实践。
- en: 'The benefits of coding assistants are numerous. Here are a few:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编码助手的好处有很多，以下是其中一些：
- en: Firstly, they increase productivity
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它们提高了生产力
- en: Imagine not having to spend hours looking up the correct syntax of a function;
    the coding assistant instantly suggests the necessary code
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想象一下，你不再需要花费几个小时查找函数的正确语法；编码助手会即时建议所需的代码
- en: They detect errors in real time and suggest corrections, leading to fewer errors
    and cleaner, more efficient code
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们实时检测错误并提出修正建议，从而减少错误并使代码更加简洁高效
- en: Developers can learn new techniques and best practices by interacting with these
    tools
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员可以通过与这些工具的互动，学习新的技术和最佳实践
- en: There are several examples of coding assistants. Each of them has its own characteristics,
    advantages, and disadvantages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个编码助手的例子，每个都有其独特的特点、优点和缺点。
- en: 'Here are a few most commonly used ones: Duet AI, Kite, Codota, TabNine, GitHub
    Copilot, Microsoft IntelliCode, Alibaba Cloud Cosy, and AIXcoder. To see how these
    tools compare, we have created a comparison matrix that contrasts their features,
    benefits, and potential drawbacks. *Figure 8**.1* provides a clear and concise
    overview, helping developers choose the most suitable assistant for their specific
    needs.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些最常用的编码助手：Duet AI、Kite、Codota、TabNine、GitHub Copilot、Microsoft IntelliCode、阿里云
    Cosy 和 AIXcoder。为了比较这些工具，我们创建了一个对比矩阵，比较了它们的特性、优点和潜在的缺点。*图 8.1* 提供了一个清晰简洁的概览，帮助开发人员选择最适合自己需求的助手。
- en: '![Figure 8.1: Coding assistants overview](img/B22204_08_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1：编码助手概览](img/B22204_08_1.jpg)'
- en: 'Figure 8.1: Coding assistants overview'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：编码助手概览
- en: The comparison matrix offers a valuable visual summary of the different coding
    assistants, highlighting their key features, strengths, and weaknesses. By examining
    this matrix, developers can make informed decisions about which tool best aligns
    with their development workflow, project requirements, and personal preferences.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对比矩阵提供了不同编码助手的宝贵视觉总结，突出显示了它们的关键特性、优势和劣势。通过查看此矩阵，开发人员可以根据自己的开发工作流程、项目需求和个人偏好做出明智的决策，选择最合适的工具。
- en: In selecting the appropriate coding assistant for a project, it’s crucial to
    understand the unique advantages and disadvantages of various AI frameworks, as
    these tools are often optimized for specific frameworks. This understanding will
    guide you to a coding assistant that best meets the project’s needs and complements
    the chosen technology stack.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在为项目选择合适的编程助手时，了解不同AI框架的独特优缺点至关重要，因为这些工具通常针对特定框架进行了优化。这样的理解将帮助你选择最适合项目需求的编程助手，并补充所选技术栈。
- en: 'The choice of a coding assistant can be influenced by the needs of the project,
    such as the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 编程助手的选择可能会受到项目需求的影响，如下所示：
- en: '**Programming language specialization**: Coding assistants often specialize
    in certain programming languages. For example, TabNine excels in JavaScript development,
    offering precise and contextualized suggestions that are extremely useful for
    web developers. In contrast, AIXcoder is highly valued for its integration with
    specific machine learning frameworks in Python, which is a boon for data scientists.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程语言专业化**：编程助手通常专注于某些编程语言。例如，TabNine在JavaScript开发中表现出色，提供精确且有上下文的建议，非常适合Web开发人员。相比之下，AIXcoder因其与Python中特定机器学习框架的集成而受到高度评价，这对数据科学家来说是一个福音。'
- en: '**Integrated Development Environment** (**IDE**) **integration**: The effectiveness
    of a coding assistant can be significantly enhanced by its integration capabilities
    with popular IDEs such as **Visual Studio** (**VS**) Code, IntelliJ IDEA, and
    Eclipse. This integration allows developers to use the assistant directly within
    their coding environment, providing seamless access to intelligent code completion,
    refactoring tools, and more, all of which can speed up development times and reduce
    coding errors.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成开发环境**（**IDE**）**集成**：编程助手的有效性可以通过其与流行IDE（如**Visual Studio**（**VS**）Code、IntelliJ
    IDEA和Eclipse）的集成功能得到显著提升。这种集成允许开发者在编码环境中直接使用助手，提供无缝访问智能代码补全、重构工具等功能，这些都能加快开发时间并减少编码错误。'
- en: '**Machine learning features**: Some coding assistants use machine learning
    algorithms to analyze your coding patterns and the context of your code. This
    allows them to offer more precise and contextually relevant code suggestions.
    For instance, if you’re working on a machine learning project, the assistant might
    suggest optimal ways to handle data preprocessing or tweak hyperparameters based
    on the current model that you are developing.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器学习特性**：一些编程助手使用机器学习算法来分析你的编码模式和代码上下文。这使得它们能够提供更精确且与上下文相关的代码建议。例如，如果你正在进行机器学习项目，助手可能会建议如何优化数据预处理或根据当前开发的模型调整超参数。'
- en: '**Cost efficiency**: Coding assistants come in various price ranges, including
    both free and premium options. For small projects or individual developers, a
    free version might suffice, providing basic code completion and syntax highlighting.
    For larger enterprises or more complex projects, a paid assistant might offer
    additional features such as deeper integration with corporate databases, advanced
    security features for code, and team collaboration tools.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：编程助手的价格范围各异，包括免费和付费选项。对于小型项目或个人开发者，免费版本可能足够，提供基本的代码补全和语法高亮。对于大型企业或更复杂的项目，付费助手可能提供额外的功能，如与公司数据库的更深层次集成、代码的高级安全特性以及团队协作工具。'
- en: Coding assistants are a secret weapon in modern development. They not only increase
    productivity but also promote higher code quality and continuous learning. As
    technology continues to evolve, we can expect to see even more improvements and
    innovations in this area.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 编程助手是现代开发中的秘密武器。它们不仅提高了生产力，还促进了更高的代码质量和持续学习。随着技术的不断发展，我们可以预期在这一领域会有更多的改进和创新。
- en: Next, let’s explore the distinctions between coding assistants and **code generators**.
    Understanding these differences is the key to effectively integrating these tools
    into your workflow, ensuring that you choose the right tool for the right task
    and maximize your developmental efficiency.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探讨编程助手与**代码生成器**之间的区别。理解这些差异是有效地将这些工具整合到工作流程中的关键，确保你为正确的任务选择合适的工具，并最大化开发效率。
- en: Code generators
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码生成器
- en: A code generator is a tool that automates the creation of code. AI-powered code
    generators help simplify coding processes, automate routine tasks, and even predict
    and suggest snippets of code. They can produce quick and accurate results, but
    it is always recommended to review and test any generated code before using it
    in a production environment. For example, while using Amazon CodeWhisperer (which
    was developed by AWS), I noticed that it could provide real-time code suggestions
    ranging from snippets to complete functions. Moreover, CodeWhisperer can identify
    hard-to-find security vulnerabilities and suggest fixes. However, this commercial
    service can be demanding on machines with lower specifications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 代码生成器是一种自动化创建代码的工具。AI 驱动的代码生成器有助于简化编码过程、自动化常规任务，甚至预测并建议代码片段。它们可以快速且准确地生成结果，但始终建议在将生成的代码用于生产环境之前进行审查和测试。例如，在使用由
    AWS 开发的 Amazon CodeWhisperer 时，我注意到它能够提供从代码片段到完整函数的实时代码建议。此外，CodeWhisperer 还能够识别难以发现的安全漏洞并提出修复建议。然而，这项商业服务可能对配置较低的机器造成较大压力。
- en: Both types of tools aim to make the software development process more efficient
    and productive. However, the choice between a code assistant and a code generator
    depends on the specific needs of your project and your work style.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种工具的目标都是提高软件开发过程的效率和生产力。然而，选择代码助手还是代码生成器，取决于你项目的具体需求和你的工作风格。
- en: 'Now that you know the difference between code assistants and code generators,
    let’s take a closer look at a code assistant: GitHub Copilot.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了代码助手和代码生成器之间的区别，让我们更仔细地看一下一个代码助手：GitHub Copilot。
- en: Understanding GitHub Copilot
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 GitHub Copilot
- en: During my development projects, I found GitHub Copilot to be a revolutionary
    AI-powered assistant. Acting like a pair programmer, it offers autocomplete suggestions
    as you type. What sets it apart is its ability to enhance coding efficiency by
    providing context-aware recommendations, whether you are starting a new code block
    or merely expressing your coding ideas in natural language. The tool effectively
    uses the nuances of the file you are working on, along with related files, ensuring
    its suggestions are relevant and seamlessly integrated into your text editor.
    This powerful capability is a result of the collaborative effort between GitHub,
    OpenAI, and Microsoft, utilizing an advanced generative AI model to offer real-time
    coding assistance that adapts perfectly to your specific coding environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的开发项目中，我发现 GitHub Copilot 是一款革命性的 AI 驱动助手。它像一个配对程序员一样，在你输入代码时提供自动完成功能。它与众不同的地方在于，能够通过提供上下文感知的推荐来提高编码效率，无论是开始编写新的代码块，还是仅仅以自然语言表达你的编码思路。该工具有效地利用你正在编辑的文件的细节以及相关文件，确保建议的相关性并无缝地集成到你的文本编辑器中。这种强大的能力得益于
    GitHub、OpenAI 和 Microsoft 的合作努力，利用先进的生成式 AI 模型，提供实时编码辅助，完美适应你的特定编码环境。
- en: The reliability of GitHub Copilot’s suggestions is directly linked to the prevalence
    of a language in public repositories. For instance, languages such as JavaScript,
    which have extensive representation, benefit from robust support and high-quality
    suggestions. Conversely, lesser-known languages might not receive the same level
    of accuracy due to there being fewer examples in the training data. From my own
    experience, using JavaScript with Copilot felt seamless and intuitive, providing
    helpful suggestions regularly. However, when switching to a niche language, the
    quality of suggestions noticeably declined, highlighting the importance of the
    volume and diversity of training data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 提供的建议的可靠性直接与公共仓库中某种语言的普及程度相关。例如，像 JavaScript 这样具有广泛代表性的语言，能够从强大的支持和高质量的建议中受益。相反，较不知名的语言由于训练数据中示例较少，可能无法获得相同的准确度。根据我的亲身体验，使用
    JavaScript 和 Copilot 结合时，感觉非常流畅和直观，经常能够得到有用的建议。然而，当切换到一个冷门语言时，建议的质量明显下降，这突显了训练数据的数量和多样性的重要性。
- en: Intellectual property and open source issues surrounding GitHub Copilot require
    careful consideration. The AI models behind Copilot are trained on public code
    but do not store it, which means that they are not just copying and pasting from
    repositories. It’s crucial to understand that while Copilot uses this training
    data to generate code, it does so without retaining any specific source code,
    thereby maintaining a balance between utility and intellectual property rights.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于GitHub Copilot的知识产权和开源问题需要谨慎考虑。Copilot背后的AI模型是基于公共代码进行训练的，但并不会存储这些代码，这意味着它们并不是在从代码库中复制粘贴。重要的是要理解，虽然Copilot使用这些训练数据生成代码，但它在生成过程中不会保留任何特定的源代码，从而在实用性和知识产权之间保持了平衡。
- en: When it comes to code completion, Copilot works diligently behind the scenes,
    akin to a detective piecing together clues. It analyzes the code in your editor,
    focusing on the lines surrounding your cursor and even other open files. All this
    information is fed into Copilot’s model, which then generates a probabilistic
    prediction of what your next steps might be. This process feels almost magical
    as you see the tool suggesting code that fits perfectly into your current context,
    making development smoother and more intuitive.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到代码补全时，Copilot在幕后勤奋工作，像侦探一样拼凑线索。它分析你编辑器中的代码，关注光标周围的行，甚至其他打开的文件。所有这些信息都会输入到Copilot的模型中，模型会生成一个关于你接下来可能会做什么的概率预测。这个过程几乎让人觉得像是魔法一样，因为你会看到工具建议的代码完美地契合你当前的上下文，使得开发变得更加流畅和直观。
- en: In chat-based scenarios, Copilot takes on the role of a conductor, orchestrating
    a contextual prompt by merging a **context summary** with your submitted question.
    This comprehensive blend of information is processed by Copilot’s model, which
    then predicts and suggests the most fitting response. This method turns Copilot
    into an interactive assistant that is capable of understanding and addressing
    queries with remarkable accuracy, enhancing the overall coding experience.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于聊天的场景中，Copilot充当指挥的角色，通过将**上下文摘要**与您提交的问题融合，形成一个上下文提示。这一信息的综合处理会被Copilot的模型处理，然后预测并建议最合适的回答。这种方法使Copilot成为一个互动助手，能够理解并精准回答问题，提升整体的编码体验。
- en: 'When you ask a question in GitHub Copilot Chat, the client automatically uses
    various aspects of your current context to form the question that it sends to
    the model. This context can include a variety of information from your workspace.
    Here’s a breakdown:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在GitHub Copilot Chat中提问时，客户端会自动利用当前上下文的各个方面来构建发送给模型的问题。这个上下文可能包括你工作空间中的各种信息。下面是一个细分：
- en: '**The code file that is open in your active document**: This is the file that
    you’re currently working on. The content of this file provides important context
    for the question.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你当前在活动文档中打开的代码文件**：这是你正在处理的文件。该文件的内容为问题提供了重要的上下文。'
- en: '**Your selection (or code blocks for the current cursor position) in the document**:
    This is the specific part of the code that you’re focused on. If you’ve highlighted
    a section of code, or if your cursor is at a particular position, this provides
    more specific context for the question.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**你在文档中选择的部分（或当前光标位置的代码块）**：这是你专注的代码部分。如果你高亮了某一段代码，或者光标处于某个特定位置，这将为问题提供更具体的上下文。'
- en: '**Summaries of related documents open in your editor or from the workspace**:
    If you have other files open in your editor, or other files in your workspace
    that are related to the current file, summaries of these documents can also provide
    additional context.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在编辑器中打开的相关文档摘要或来自工作空间的文档摘要**：如果你在编辑器中打开了其他文件，或者工作空间中有与当前文件相关的其他文件，这些文件的摘要也可以提供额外的上下文。'
- en: '**Information about errors, warnings, messages, or exceptions in your error
    list**: If there are any errors, warnings, or other messages in your error list,
    this information can help the model understand what problems you might be trying
    to solve.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于错误、警告、消息或异常的信息（来自错误列表）**：如果错误列表中有任何错误、警告或其他消息，这些信息有助于模型理解你可能正在尝试解决的问题。'
- en: '**General workspace information, such as frameworks, languages, and dependencies**:
    The overall setup of your workspace, including the programming languages you’re
    using, the frameworks you’re working with, and any dependencies your project has,
    can also provide useful context.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作空间的整体信息，如框架、语言和依赖项**：工作空间的整体设置，包括你使用的编程语言、正在使用的框架，以及项目所依赖的任何依赖项，也能为问题提供有用的上下文。'
- en: '**Parts of related files in your workspace, project, or repo**: If there are
    other files in your workspace, project, or repo that are related to the current
    file or the current problem, parts of these files can also be used to provide
    context.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作区、项目或仓库中的相关文件部分**：如果工作区、项目或仓库中有与当前文件或当前问题相关的其他文件，这些文件的部分内容也可以用来提供上下文。'
- en: More information
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can use and read more about GitHub Copilot here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里使用并了解更多关于 GitHub Copilot 的信息：
- en: '[https://github.com/features/copilot](https://github.com/features/copilot)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/features/copilot](https://github.com/features/copilot)'
- en: By using all of this information to form the question, GitHub Copilot Chat can
    provide more accurate and relevant suggestions. It’s a way of ensuring that the
    model understands as much as possible about what you’re trying to do, so it can
    provide the best possible help.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些信息来形成问题，GitHub Copilot Chat 可以提供更准确、更相关的建议。这是一种确保模型尽可能了解您正在尝试做什么的方式，以便提供最佳帮助。
- en: 'GitHub Copilot is a versatile extension available for various IDEs, including
    VS Code, VS, Vim, Neovim, the JetBrains IDE package, and Azure Data Studio. Its
    features are designed to streamline your coding workflow. Key highlights include
    the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 是一个多功能扩展，适用于多种 IDE，包括 VS Code、VS、Vim、Neovim、JetBrains IDE 包以及
    Azure Data Studio。其功能旨在简化您的编码工作流程。主要亮点包括：
- en: '**Autocompletion capabilities**: GitHub Copilot can suggest not only lines
    of code but also entire functions and tests, significantly speeding up the coding
    process and reducing boilerplate code.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动补全功能**：GitHub Copilot 不仅可以建议代码行，还可以建议整个函数和测试，大大加快编码过程并减少样板代码。'
- en: '**Multilingual code support**: GitHub Copilot is a polyglot, meaning that it
    understands and can provide assistance in a wide range of programming languages.
    Whether you’re coding in a widely used language such as JavaScript or Python,
    or a less common one, GitHub Copilot has got you covered. This is made possible
    by the diverse range of public code repositories that it trained on.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多语言代码支持**：GitHub Copilot 是一个多语言支持的工具，意味着它能理解并提供多种编程语言的帮助。无论您使用的是 JavaScript、Python
    等广泛使用的语言，还是一些较为冷门的语言，GitHub Copilot 都能为您提供支持。这得益于其训练过程中使用的各种公共代码库。'
- en: '**Learning and adapting to coding styles**: What sets GitHub Copilot apart
    is its ability to learn and adapt. The more you use it, the more it learns about
    your coding style and preferences. Over time, it will provide suggestions that
    are increasingly tailored to your coding habits, making it feel like a truly personalized
    assistant.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习并适应编码风格**：GitHub Copilot 的特点之一是它能够学习并适应您的编码风格。您使用的越多，它就越了解您的编码习惯和偏好。随着时间的推移，它会提供越来越符合您编码习惯的建议，感觉就像一个真正个性化的助手。'
- en: More information
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'Read more about GitHub Copilot’s features here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里阅读更多关于 GitHub Copilot 功能的信息：
- en: '[https://github.com/features/copilot](https://github.com/features/copilot)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/features/copilot](https://github.com/features/copilot)'
- en: 'To start using GitHub Copilot, you need to set up a free trial or subscription.
    Once activated, you can adjust the settings in your GitHub account to customize
    suggestions and manage telemetry data. This adaptability ensures that GitHub Copilot
    remains a valuable tool that is tailored to your specific needs. For instance,
    *Figure 8**.2* depicts how you can block or allow suggestions matching public
    code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 GitHub Copilot，您需要设置一个免费试用或订阅。激活后，您可以在 GitHub 账户中调整设置，以自定义建议并管理遥测数据。这种适应性确保
    GitHub Copilot 始终是一个符合您特定需求的有价值工具。例如，*图 8**.2* 展示了如何屏蔽或允许匹配公共代码的建议：
- en: '![Figure 8.2: Enabling or disabling duplication detection](img/B22204_08_2.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2：启用或禁用重复检测](img/B22204_08_2.jpg)'
- en: 'Figure 8.2: Enabling or disabling duplication detection'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：启用或禁用重复检测
- en: You have the option to control whether your prompts and suggestions are gathered
    and kept by GitHub, as well as whether they are processed further and shared with
    Microsoft, by modifying your user settings.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过修改用户设置来控制 GitHub 是否收集和保存您的提示和建议，以及它们是否会被进一步处理并与微软共享。
- en: With the knowledge of what code assistants are, what benefits they offer, and
    how they differ from code generators under our belts, let’s now learn how you
    can integrate them into your workflows.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了什么是代码助手，它们提供的好处，以及它们与代码生成器的区别后，让我们来看一下如何将它们集成到您的工作流程中。
- en: Integrating coding assistants into your workflows
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将编码助手集成到您的工作流程中
- en: We find ourselves immersed in a dynamic technological landscape where the integration
    of AI-based tools stands out as an essential tool for boosting efficiency in software
    development. Coding assistants are powerful tools that can help developers increase
    their productivity, improve code quality, and reduce stress. However, to fully
    exploit the potential of these tools, it is important to integrate them seamlessly
    into your workflows.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现自己沉浸在一个动态的技术景观中，AI 工具的整合成为提升软件开发效率的重要工具。编码助手是强大的工具，可以帮助开发者提高生产力，改善代码质量，并减少压力。然而，要充分利用这些工具的潜力，将它们无缝集成到工作流程中非常重要。
- en: The use of AI code assistants has a significant impact on software development.
    They not only speed up the development process but also help maintain code consistency
    and reduce the number of coding errors. By leveraging AI’s ability to learn from
    vast amounts of data, these tools can provide insights and recommendations that
    would be difficult for a human to generate manually.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AI 编码助手对软件开发有重要影响。它们不仅加快了开发过程，还帮助保持代码一致性并减少编码错误。通过利用 AI 从大量数据中学习的能力，这些工具可以提供难以人工生成的见解和建议。
- en: However, it’s not all smooth sailing. There are notable challenges and limitations
    when incorporating AI coding assistants. These can range from navigating complex
    codebases to managing proprietary languages and adapting the AI to fit a developer’s
    unique coding style. Recognizing these limitations is crucial. For instance, I’ve
    found that while AI excels in popular languages like JavaScript, it struggles
    with niche or less common frameworks, requiring a more hands-on approach to adaptation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事情并非一帆风顺。在整合 AI 编码助手时，存在显著的挑战和限制。这些问题包括从复杂代码库导航到管理专有语言，以及调整 AI 以适应开发者独特的编码风格。认识到这些限制至关重要。例如，我发现虽然
    AI 在像 JavaScript 这样的流行语言中表现出色，但在小众或较不常见的框架中可能表现不佳，需要更多的手动适应。
- en: Let’s delve into practicalities. Setting up and using GitHub Copilot in VS Code,
    for example, can greatly enhance your workflows. The step-by-step guide that follows
    will walk you through this process, ensuring that you can leverage all the benefits
    of coding assistants effectively.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入实际操作。例如，在 VS Code 中设置和使用 GitHub Copilot 可以极大地增强您的工作流程。接下来的逐步指南将带领您完成这个过程，确保您能有效利用编码助手的所有优势。
- en: Setting up GitHub Copilot in VS Code – a step-by-step guide
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 VS Code 中设置 GitHub Copilot – 逐步指南
- en: 'GitHub Copilot, integrated into VS Code, is a powerful extension that offers
    various functionalities. Here are some of the key features of GitHub Copilot in
    VS Code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot，集成到 VS Code 中，是一个强大的扩展，提供多种功能。以下是 GitHub Copilot 在 VS Code 中的一些关键功能：
- en: '**Real-time code suggestions**: Copilot provides real-time code suggestions
    as you type, helping to speed up the writing process.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时代码建议**: Copilot 在您输入时提供实时代码建议，帮助加快编写速度。'
- en: '**Support for multiple programming languages**: It supports various programming
    languages, allowing developers to work in different environments and projects.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持多种编程语言**: 它支持各种编程语言，允许开发者在不同的环境和项目中工作。'
- en: '**Code generation from comments**: Copilot can generate code based on the comments
    that you write, as it’s capable of interpreting the developer’s intent.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从注释生成代码**: Copilot 可以根据您编写的注释生成代码，因为它能够理解开发者的意图。'
- en: '**Refactoring assistance**: It can assist in code refactoring, offering suggestions
    to improve the structure and efficiency of existing code.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构辅助**: 它可以帮助进行代码重构，提供改善现有代码结构和效率的建议。'
- en: '**Context-sensitive and customized suggestions**: Suggestions are context-sensitive,
    adapting to the surrounding code to provide more relevant solutions. Additionally,
    Copilot learns from the developer’s specific coding patterns.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文敏感和定制化建议**: 建议是上下文敏感的，根据周围的代码调整以提供更相关的解决方案。此外，Copilot 还会从开发者特定的编码模式中学习。'
- en: '**Code documentation**: It can automatically generate comments and documentation
    for functions and code snippets.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码文档**: 它可以自动生成函数和代码片段的评论和文档。'
- en: '**Machine learning for coding patterns**: It utilizes machine learning to understand
    and suggest patterns based on common coding practices.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于编码模式的机器学习**: 它利用机器学习理解和建议基于常见编码实践的模式。'
- en: '**Compatibility with unit testing**: It can automatically generate code for
    unit tests based on existing code.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与单元测试的兼容性**：它可以根据现有代码自动生成单元测试代码。'
- en: '**Efficient code review**: It facilitates the code review process by offering
    consistent and contextually relevant suggestions.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的代码审查**：它通过提供一致且相关的建议，促进代码审查过程。'
- en: '**Ease in generating examples and prototypes**: It enables the quick generation
    of examples or code prototypes, facilitating the visualization of proposed solutions.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成示例和原型的简便性**：它能够快速生成示例或代码原型，帮助可视化提出的解决方案。'
- en: '**Integration with other VS Code extensions**: It works in conjunction with
    other extensions and tools in VS Code, extending its functionality.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与其他 VS Code 扩展的集成**：它可以与 VS Code 中的其他扩展和工具协同工作，扩展其功能。'
- en: '**Ease in authorization and integration with GitHub**: It provides an easy
    interface to authorize and integrate with GitHub accounts, simplifying project
    collaboration.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权和与 GitHub 集成的简便性**：它提供了一个简单的界面来授权和与 GitHub 账户集成，从而简化项目协作。'
- en: By following these steps, you’ll be well on your way to integrating an AI coding
    assistant into your workflows, enhancing your productivity and code quality.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按照这些步骤，你将顺利将 AI 编程助手集成到工作流程中，从而提升生产力和代码质量。
- en: 'GitHub Copilot, a powerful AI-powered coding assistant, can significantly enhance
    your coding efficiency when integrated with VS Code. Here’s an informative step-by-step
    guide to help you set up GitHub Copilot in your VS Code environment:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 是一个强大的 AI 编程助手，能够显著提升你在与 VS Code 集成时的编码效率。以下是一个详细的分步指南，帮助你在 VS
    Code 环境中设置 GitHub Copilot：
- en: '**Start the installation process**: Begin by navigating to the VS Code Marketplace
    and searching for the GitHub Copilot extension. Simply click **Install** to add
    the extension to your VS Code setup.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开始安装过程**：首先前往 VS Code 市场并搜索 GitHub Copilot 扩展。只需点击**安装**即可将扩展添加到你的 VS Code
    设置中。'
- en: '**Open VS Code**: Once you click **Install**, a popup will appear asking you
    to open VS Code. Click on **Open VS Code**. This action will take you directly
    to your VS Code environment.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**打开 VS Code**：点击**安装**后，会弹出提示要求你打开 VS Code。点击**打开 VS Code**。此操作将直接带你进入 VS
    Code 环境。'
- en: '**Install the extension**: Inside VS Code, you’ll see the **Extension: GitHub
    Copilot** tab. Click on **Install** to add the extension to your IDE. This action
    will integrate GitHub Copilot into your VS Code, enabling it to assist you while
    coding.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装扩展**：在 VS Code 中，你将看到**扩展：GitHub Copilot**标签。点击**安装**将扩展添加到你的 IDE。这一操作将把
    GitHub Copilot 集成到你的 VS Code 环境中，帮助你编写代码时提供支持。'
- en: '**Initial sign-in to GitHub**: If this is your first time connecting VS Code
    with your GitHub account, you will be prompted to log in directly from VS Code.
    This crucial step enables GitHub Copilot to tap into your coding history, allowing
    it to offer more tailored coding suggestions.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**首次登录 GitHub**：如果这是你第一次将 VS Code 与 GitHub 账户连接，系统会提示你直接从 VS Code 登录。这一步骤至关重要，它使
    GitHub Copilot 能够访问你的编码历史，提供更具针对性的编码建议。'
- en: '**Seamless automatic authorization**: For those who have previously linked
    VS Code with GitHub, GitHub Copilot will recognize your settings and automatically
    authorize itself. This convenient feature eliminates the need to repeatedly authorize
    VS Code when you commence using GitHub Copilot.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无缝自动授权**：对于之前已将 VS Code 与 GitHub 关联的用户，GitHub Copilot 会识别你的设置并自动完成授权。这一便捷功能消除了在使用
    GitHub Copilot 时重复授权的需求。'
- en: '**Troubleshoot a missing authorization prompt**: If the authorization prompt
    doesn’t appear, simply click on the bell icon in the lower panel of VS Code. This
    will bring up the necessary authorization prompt.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**排查缺失的授权提示**：如果授权提示没有出现，简单点击 VS Code 下方面板中的铃铛图标。这将显示所需的授权提示。'
- en: '**Grant necessary permissions**: Upon clicking the prompt, your browser will
    open a GitHub page requesting permissions for GitHub Copilot. Click **Authorize
    VS Code** to grant these permissions, ensuring that Copilot has all that it needs
    to assist you efficiently.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**授予必要的权限**：点击提示后，浏览器会打开 GitHub 页面，要求授予 GitHub Copilot 权限。点击**授权 VS Code**以授予这些权限，确保
    Copilot 拥有协助你工作的所有必要权限。'
- en: '**Finalize authentication**: Conclude the setup process by confirming the authentication
    in VS Code. A dialog box will appear within VS Code, where you should click on
    **Open** to finalize the authentication and start enjoying the advanced features
    of GitHub Copilot.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完成身份验证**：通过确认 VS Code 中的身份验证来完成设置过程。一个对话框将在 VS Code 中出现，您应点击 **打开** 来完成身份验证，并开始享受
    GitHub Copilot 的高级功能。'
- en: With these instructions completed, you can now integrate GitHub Copilot into
    your development process. Embrace its support to streamline your workflows, but
    always apply your own critical thinking and expertise to make the final choices
    in your coding projects.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些设置后，您现在可以将 GitHub Copilot 集成到您的开发过程中。利用它来简化您的工作流，但始终运用您的批判性思维和专业知识，做出项目编码中的最终决策。
- en: Prerequisites for using GitHub Copilot
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot 的先决条件
- en: 'Unlocking the full potential of GitHub Copilot is a straightforward process,
    but it requires a couple of key prerequisites:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 解锁 GitHub Copilot 的全部潜力是一个简单的过程，但它需要几个关键的先决条件：
- en: '**Activate your GitHub Copilot subscription**: Before diving into the world
    of GitHub Copilot in VS Code, ensure that you have an active GitHub Copilot subscription.
    For detailed information on billing and subscription details, refer to the **About
    billing for GitHub Copilot** documentation at [https://github.com/features/copilot#pricing.](https://github.com/features/copilot#pricing.)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**激活 GitHub Copilot 订阅**：在开始使用 GitHub Copilot 与 VS Code 配合之前，请确保您有一个有效的 GitHub
    Copilot 订阅。有关账单和订阅的详细信息，请参考 [https://github.com/features/copilot#pricing](https://github.com/features/copilot#pricing)
    文档中的 **GitHub Copilot 计费介绍**。'
- en: '-**Install VS Code**: GitHub Copilot seamlessly integrates into VS Code, so
    it’s essential to have VS Code installed on your system. If you haven’t installed
    it yet, visit the VS Code download page for guidance on downloading and installing
    the latest version.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -**安装 VS Code**：GitHub Copilot 与 VS Code 无缝集成，因此确保系统上已安装 VS Code。如果尚未安装，请访问
    VS Code 下载页面，获取下载和安装最新版本的指导。
- en: By meeting these two prerequisites, you’ll be ready to harness the power of
    GitHub Copilot within your VS Code environment. Now, let’s embark on a coding
    journey empowered by intelligent suggestions and enhanced productivity.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 满足这两个先决条件后，您就可以在 VS Code 环境中充分利用 GitHub Copilot 的强大功能。现在，让我们开始这段由智能建议和提升生产力驱动的编码之旅。
- en: Managing coding assistants in a team environment with GitHub Copilot
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在团队环境中管理编码助手：GitHub Copilot
- en: 'Working in collaborative development environments means that managing coding
    assistants like GitHub Copilot effectively is essential to keep things running
    smoothly. It helps in maintaining consistency, streamlining workflows, and fostering
    better collaboration among team members. That said, navigating the complexities
    of using Copilot within a team can be quite challenging. Here’s a practical guide
    to help you manage Copilot access, set appropriate policies, and handle content
    exclusions for your team:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在协作开发环境中，管理像 GitHub Copilot 这样的编码助手至关重要，以确保工作顺利进行。它有助于保持一致性、简化工作流并促进团队成员之间的更好协作。不过，在团队中使用
    Copilot 的复杂性可能会带来一些挑战。以下是一个实用的指南，帮助您管理 Copilot 访问权限、设定适当的策略并处理团队的内容排除：
- en: Enabling and setting up Copilot Business
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用和设置 Copilot Business
- en: 'To start using GitHub Copilot Business, you need to set it up correctly. Here
    are the steps involved:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 GitHub Copilot Business，您需要正确设置它。以下是相关步骤：
- en: 'Setting up a subscription: Ensure that your organization has a Copilot Business
    subscription.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置订阅：确保您的组织拥有 Copilot Business 订阅。
- en: 'Configuring settings: Configure access, policies, and content exclusions in
    the Settings | Copilot section.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置设置：在设置 | Copilot 部分配置访问权限、策略和内容排除。
- en: 'Configuring network settings: If necessary, configure your network settings
    such as an HTTP proxy or firewall to allow Copilot on your corporate network.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置网络设置：如果需要，配置您的网络设置，例如 HTTP 代理或防火墙，以允许 Copilot 在您的企业网络上运行。
- en: 'Assigning seats: Assign Copilot seats to individuals or teams via the Settings
    | Copilot | Access section.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配席位：通过设置 | Copilot | 访问部分将 Copilot 座位分配给个人或团队。
- en: By completing these steps, your organization will be ready to utilize GitHub
    Copilot Business effectively.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，您的组织将能够有效地利用 GitHub Copilot Business。
- en: Managing Copilot Business
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理 Copilot Business
- en: 'Proper management of Copilot Business is crucial for maintaining control and
    maximizing benefits. Here’s what you need to do:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Copilot Business 的适当管理对于保持控制和最大化效益至关重要。以下是您需要做的事项：
- en: '**Reviewing audit logs**: Access your organization’s Copilot Business audit
    logs to understand which actions have been taken by users, such as changes to
    settings or seat assignments'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看审计日志**：访问您组织的 Copilot Business 审计日志，了解用户执行的操作，如设置更改或座位分配。'
- en: '**Managing access**:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理访问权限**：'
- en: '**Enabling access for all**: Enable Copilot for all current and future members
    of your organization in the Settings | Copilot | Access section.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为所有成员启用访问权限**：在设置 | Copilot | 访问部分为您组织的所有当前成员和未来成员启用 Copilot。'
- en: '**Enabling access for specific users**: Choose Selected members and add users
    individually or upload a CSV file.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为特定用户启用访问权限**：选择“已选择成员”并单独添加用户或上传 CSV 文件。'
- en: '**Revoking access**: Revoke access for individuals or your entire organization
    via the Copilot | Access section.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**撤销访问权限**：通过 Copilot | 访问部分撤销个人或整个组织的访问权限。'
- en: '**Reviewing usage data**: View your organization’s Copilot usage data, such
    as the number of seats assigned and the estimated cost, in the Settings | Copilot
    | Access section. You can also download a report or sort users list by last use.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看使用数据**：在设置 | Copilot | 访问部分查看您组织的 Copilot 使用数据，例如已分配的座位数量和预估的费用。您还可以下载报告或按最后使用时间排序用户列表。'
- en: Effective management ensures that Copilot is used appropriately and efficiently
    within your organization.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的管理确保了 Copilot 在您的组织中被适当且高效地使用。
- en: In *Figure 8**.3*, you can see how GitHub Copilot Business access is managed,
    with a particular focus on the allocation of Copilot seats. This visual representation
    allows users to check the number of seats assigned under the Copilot Business
    subscription and estimate the monthly costs involved. Additionally, it provides
    a comprehensive view of access details, enabling administrators to effectively
    monitor and manage how Copilot seats are utilized within the organization.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 8**.3* 中，您可以看到如何管理 GitHub Copilot Business 访问权限，特别是关于 Copilot 座位分配的内容。此可视化展示使用户能够查看在
    Copilot Business 订阅下分配的座位数量，并估算相关的月度费用。此外，它还提供了访问详细信息的全面视图，使管理员能够有效监控和管理 Copilot
    座位在组织中的使用情况。
- en: '![Figure 8.3: How GitHub Copilot Business access is managed](img/B22204_08_3.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3：如何管理 GitHub Copilot Business 访问权限](img/B22204_08_3.jpg)'
- en: 'Figure 8.3: How GitHub Copilot Business access is managed'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：如何管理 GitHub Copilot Business 访问权限
- en: Alternative approaches
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方法
- en: Explore different ways to view and manage Copilot seats, keeping track of their
    utilization and estimating the monthly costs involved. Keep an eye on how Copilot
    seats are assigned, making sure that they are used effectively within your team.
    Take a comprehensive look at GitHub Copilot Business, including details on seat
    allocation and related expenses.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 探索不同的方式查看和管理 Copilot 座位，跟踪它们的使用情况，并估算相关的月度费用。关注 Copilot 座位的分配情况，确保它们在您的团队中得到有效使用。全面了解
    GitHub Copilot Business，包括座位分配和相关费用的详细信息。
- en: Managing policies
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理策略
- en: 'To tailor GitHub Copilot to your organization’s needs, you need to configure
    policies. Here’s how:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据您的组织需求定制 GitHub Copilot，您需要配置相关策略。以下是操作步骤：
- en: '**Suggestion matching**: Choose Allow or Block in the Settings | Copilot |
    Policies section to control whether Copilot suggestions can match public code
    on GitHub'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建议匹配**：在设置 | Copilot | 策略部分选择“允许”或“阻止”来控制是否允许 Copilot 的建议与 GitHub 上的公共代码匹配。'
- en: '**Using GitHub Copilot Chat**: Choose Allowed or Blocked in the Settings |
    Copilot | Policies section to enable or disable the chat feature for your organization'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 GitHub Copilot Chat**：在设置 | Copilot | 策略部分选择“允许”或“阻止”来启用或禁用您组织的聊天功能。'
- en: Configuring these policies helps you maintain control over how Copilot is used
    and ensures it aligns with your organization’s standards.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 配置这些策略有助于您保持对 Copilot 使用的控制，确保它符合您组织的标准。
- en: '*Figure 8**.4* illustrates the configuration of policies and features for GitHub
    Copilot Business. It showcases the options for managing suggestion-matching policies
    and enabling or disabling GitHub Copilot Chat within the organization. Organization
    owners can utilize these settings to tailor Copilot’s behavior based on their
    requirements.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.4* 展示了 GitHub Copilot Business 的策略和功能配置。它展示了如何管理建议匹配策略并启用或禁用组织内的 GitHub
    Copilot Chat。组织管理员可以使用这些设置根据需求调整 Copilot 的行为。'
- en: '![Figure 8.4: Policies and features](img/B22204_08_4.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4：政策与功能](img/B22204_08_4.jpg)'
- en: 'Figure 8.4: Policies and features'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4：政策与功能
- en: Alternative approaches
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方法
- en: Set up GitHub Copilot Business policies to ensure that the tool behaves according
    to your organization’s specific needs. Oversee policies for suggestion matching
    and manage the features of GitHub Copilot Chat. Adjust Copilot Business settings
    to match your organization’s preferences and operational requirements.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 GitHub Copilot Business 政策，以确保该工具根据您组织的具体需求进行操作。监督建议匹配的政策，并管理 GitHub Copilot
    Chat 的功能。根据您组织的偏好和操作需求调整 Copilot Business 设置。
- en: Configuring content exclusions
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置内容排除
- en: 'To further customize GitHub Copilot’s functionality, you can set up content
    exclusions. Follow these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步自定义 GitHub Copilot 的功能，您可以设置内容排除。按照以下步骤操作：
- en: '**Configuring exclusions**: Exclude specific files or directories from being
    used by Copilot for code completion and suggestions'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置排除项**：排除特定文件或目录不被 Copilot 用于代码补全和建议。'
- en: '**Configuring repository settings**: Define content exclusions that are specific
    to a repository in the Settings | Copilot section'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置仓库设置**：在“设置 | Copilot”部分定义特定于仓库的内容排除。'
- en: '**Configuring organization settings**: Define exclusions that are applicable
    to any Git-based repository across [GitHub.com](http://GitHub.com) or other locations'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置组织设置**：定义适用于 [GitHub.com](http://GitHub.com) 或其他位置的任何基于 Git 的仓库的排除项。'
- en: '**Configuring who is affected**: Exclusions only apply to members with Copilot
    seats in the same organization'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置受影响的人员**：排除项仅适用于具有 Copilot 座位的同一组织成员。'
- en: These settings ensure that sensitive or irrelevant content is not used by Copilot,
    providing more accurate and appropriate suggestions.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些设置可以确保 Copilot 不使用敏感或无关的内容，从而提供更准确、合适的建议。
- en: '*Figure 8**.5* offers a detailed look at how to set up content exclusions for
    GitHub Copilot within an organization. It outlines the process for repository
    administrators and organization owners to identify and manage files that should
    be excluded from code completion suggestions. This figure also illustrates the
    available options for setting exclusions at both the repository and organization
    levels, ensuring that specific files do not influence the suggestions provided
    by Copilot.'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 8.5* 提供了详细的步骤，展示如何在组织内为 GitHub Copilot 设置内容排除。它概述了仓库管理员和组织所有者识别并管理应排除在代码补全建议之外的文件的过程。此图还说明了在仓库和组织级别设置排除的可用选项，确保特定文件不会影响
    Copilot 提供的建议。'
- en: '![Figure 8.5: Content exclusion](img/B22204_08_5.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5：内容排除](img/B22204_08_5.jpg)'
- en: 'Figure 8.5: Content exclusion'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5：内容排除
- en: Alternative approaches
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方法
- en: Set up content exclusion settings to prevent certain files from being included
    in GitHub Copilot’s code completion suggestions. Fine-tune Copilot’s functionality
    by configuring content exclusions within your repositories or organization. Ensure
    that specific files do not affect Copilot’s code suggestions by applying the appropriate
    content exclusion settings.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 设置内容排除设置，以防止某些文件出现在 GitHub Copilot 的代码补全建议中。通过在您的仓库或组织内配置内容排除，来微调 Copilot 的功能。确保特定文件不会影响
    Copilot 的代码建议，方法是应用适当的内容排除设置。
- en: Propagating changes and checking effects
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传播更改并检查效果
- en: 'After making changes to your settings, you need to ensure they are applied
    correctly. Here’s how:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改设置后，您需要确保它们已正确应用。以下是操作方法：
- en: '**Waiting or reloading**: Changes to content exclusions may take up to 30 minutes
    to be reflected in your IDE. Alternatively, manually reload the settings as explained
    for different IDEs.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待或重新加载**：内容排除的更改可能需要最多 30 分钟才能在您的 IDE 中生效。或者，按照不同 IDE 的说明手动重新加载设置。'
- en: '**Checking effect**: Open a file that is affected by exclusions and confirm
    that Copilot is disabled (no suggestions) and that its content isn’t used for
    suggestions in other files.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查效果**：打开受排除影响的文件，确认 Copilot 被禁用（没有建议），且其内容不会用于其他文件中的建议。'
- en: By verifying these changes, you can ensure that your configurations are working
    as intended.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过验证这些更改，您可以确保您的配置按预期工作。
- en: Practical tips
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 实用技巧
- en: Use audit logs to track user activity and ensure responsible Copilot usage.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用审计日志跟踪用户活动，确保 Copilot 的负责任使用。
- en: Set policies based on your team’s needs and security considerations.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 根据团队的需求和安全考虑设置政策。
- en: Regularly review and update content exclusions to ensure desired code coverage.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 定期审查并更新内容排除，以确保所需的代码覆盖。
- en: Encourage team members to familiarize themselves with Copilot’s features and
    limitations.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励团队成员熟悉 Copilot 的功能和局限性。
- en: Effectively managing GitHub Copilot Business features requires a mix of actions.
    You need to audit usage, configure access, set policies, and control content exclusions.
    These steps help organizations get the most out of Copilot while keeping control
    and allowing for customization based on specific needs.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有效管理 GitHub Copilot 商业版功能需要多方面的措施。您需要审计使用情况、配置访问权限、设定政策并控制内容排除。这些步骤有助于组织充分利用
    Copilot，同时保持控制并根据特定需求进行定制。
- en: We have covered how to manage these features. This includes auditing actions,
    configuring access, and defining policies. With this solid foundation, we can
    now improve our coding practices even further.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了如何管理这些功能，包括审计操作、配置访问权限和定义政策。有了这个坚实的基础，我们现在可以进一步改善我们的编码实践。
- en: Next, let’s explore how these management strategies help us use smart code suggestions.
    This will boost productivity and streamline our development workflows.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索这些管理策略如何帮助我们使用智能代码建议。这将提升生产力，并优化我们的开发工作流程。
- en: Maximizing productivity with smart code suggestions
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大化生产力与智能代码建议
- en: In the fast-paced world of software development, maximizing productivity is
    essential. One powerful method to achieve this is by utilizing smart code suggestions.
    Coding assistants leverage advanced algorithms to anticipate and recommend the
    next code snippet you might need.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速发展的软件开发世界中，最大化生产力至关重要。一种强大的方法是利用智能代码建议。编码助手利用先进的算法预测并推荐您可能需要的下一个代码片段。
- en: The following section, *Rapid code writing*, will showcase practical applications
    and techniques for using these suggestions. These methods can significantly speed
    up coding tasks and improve efficiency in software development. We’ll delve into
    how to seamlessly integrate these innovations into your coding environment.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分，*快速代码编写*，将展示使用这些建议的实际应用和技巧。这些方法可以显著加快编码任务的速度，并提高软件开发的效率。我们将深入探讨如何将这些创新无缝集成到您的编码环境中。
- en: '*Figure 8**.6* illustrates how different coding assistants, such as GitHub
    Copilot, Kite, and Duet AI, integrate with various IDEs, including VS Code, IntelliJ
    IDEA, and others. This visualization aids in understanding how these tools can
    be incorporated into your development workflows, highlighting the interactions
    and compatibilities between the assistants and the IDEs.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.6* 展示了不同的编码助手，如 GitHub Copilot、Kite 和 Duet AI，如何与各类 IDE（包括 VS Code、IntelliJ
    IDEA 等）进行集成。该可视化图有助于理解这些工具如何融入您的开发工作流程，突出了助手与 IDE 之间的互动和兼容性。'
- en: '![Figure 8.6: A code suggestion Flowchart](img/B22204_08_6.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6：代码建议流程图](img/B22204_08_6.jpg)'
- en: 'Figure 8.6: A code suggestion Flowchart'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6：代码建议流程图
- en: The figure illustrates how coding assistants connect with various IDEs, using
    lines and arrows to indicate compatibility and support. For example, GitHub Copilot’s
    link to VS Code signifies that this assistant can be utilized within this IDE
    for real-time code suggestions. On the other hand, Duet AI’s connections to Google
    Cloud products demonstrate its deep integration with Google’s ecosystem. These
    lines represent integration paths, helping to visualize the implementation of
    different tools in various development environments, thereby enhancing coding
    efficiency and quality.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该图展示了编码助手如何与各种 IDE 连接，使用线条和箭头来指示兼容性和支持。例如，GitHub Copilot 与 VS Code 的链接表示该助手可以在此
    IDE 中用于实时代码建议。另一方面，Duet AI 与 Google Cloud 产品的连接展示了它与 Google 生态系统的深度集成。这些线条代表了集成路径，帮助可视化不同工具在不同开发环境中的实现，从而提高编码效率和质量。
- en: This visual representation makes it easier to understand how to leverage these
    tools in your development process. Each connection line highlights the potential
    for increased efficiency and improved code quality through the seamless integration
    of these assistants with the development environments.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这种可视化表示使得理解如何在您的开发过程中利用这些工具变得更加容易。每条连接线都突出了通过这些助手与开发环境的无缝集成，如何提升效率和改善代码质量。
- en: Rapid code writing
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速代码编写
- en: Speed is a crucial factor in software development. With real-time code suggestions,
    you can accelerate the coding process. Coding assistants such as GitHub Copilot
    provide code suggestions that are relevant to what you’re writing, allowing you
    to focus more on your code’s logic than its syntax.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 速度是软件开发中的关键因素。通过实时代码建议，您可以加速编码过程。GitHub Copilot 等编码助手提供与您正在编写的内容相关的代码建议，使您可以更多地关注代码逻辑而不是语法。
- en: 'Let’s take a look at a step-by-step example of text completions on VS Code
    using GitHub Copilot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步看一下使用 GitHub Copilot 在 VS Code 上进行文本补全的示例：
- en: Open VS Code and navigate to the Python file that you’re working on.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VS Code 并导航到您正在处理的 Python 文件。
- en: 'Start with a comment describing the project, such as the following:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下注释描述项目开始，例如：
- en: '[PRE0]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start typing your code. For example, if you’re writing a function to calculate
    the average of a list of numbers, you might start typing the following:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始输入您的代码。例如，如果您正在编写一个计算数字列表平均值的函数，您可能会开始输入以下内容：
- en: '[PRE1]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you type, Copilot will start suggesting real-time code completions. For example,
    it might suggest that you complete the preceding line with `numbers):`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您输入时，Copilot 将开始提供实时代码补全。例如，它可能建议您使用 `numbers):` 来完成前一行。
- en: Press *Tab* to accept a suggestion.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Tab* 键以接受建议。
- en: Continue writing your code. Copilot will continue to provide relevant suggestions.
    For example, it might suggest the body of the function to calculate the average
    of the list of numbers.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续编写您的代码。Copilot 将继续提供相关的建议。例如，它可能建议完整函数体来计算数字列表的平均值。
- en: When you’re done writing your code, you can use Copilot to check for better
    ways to optimize it.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您完成编写代码时，可以使用 Copilot 来查找优化代码的更好方法。
- en: '*Figure 8**.7* represents an authorization request from GitHub for VS Code.
    This is a standard procedure when a user wants to integrate their GitHub account
    with VS Code. The user, in this case, is `andersonfurtado`, and the **GitHub for
    VS Code by Visual Studio Code** application is requesting access to the user’s
    account.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.7* 表示 GitHub 对 VS Code 的授权请求。当用户希望将他们的 GitHub 账户与 VS Code 集成时，这是一个标准流程。在本例中，用户是
    `andersonfurtado`，**GitHub for VS Code by Visual Studio Code** 应用程序正在请求访问用户的账户。'
- en: '![Figure 8.7: An authorization request from GitHub for VS Code](img/B22204_08_7.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7：GitHub 对 VS Code 的授权请求](img/B22204_08_7.jpg)'
- en: 'Figure 8.7: An authorization request from GitHub for VS Code'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7：GitHub 对 VS Code 的授权请求
- en: The authorization process is a security measure to ensure that the user grants
    explicit permission for VS Code to access their GitHub account. The access requested
    includes read-only access to personal user data and email addresses. Once the
    user authorizes this access, they will be redirected to [https://vscode.dev](https://vscode.dev).
    This integration allows the user to use the features of GitHub directly within
    VS Code, enhancing their coding workflows. It’s important to note that this process
    should only be completed in a secure environment to protect the user’s personal
    information.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 授权过程是一项安全措施，确保用户明确授权 VS Code 访问其 GitHub 账户。请求的访问权限包括对个人用户数据和电子邮件地址的只读访问。一旦用户授权此访问，他们将被重定向到
    [https://vscode.dev](https://vscode.dev)。此集成允许用户直接在 VS Code 中使用 GitHub 的功能，增强其编码工作流程。需要注意的是，此过程应仅在安全环境中完成，以保护用户的个人信息。
- en: Important note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Before starting the example, it’s important to mention that you need to authorize
    GitHub for VS Code on GitHub. This can be done through your browser. In some cases,
    for the authorization request message on GitHub to appear, you may need to restart
    VS Code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始示例之前，重要提醒，您需要在 GitHub 上为 VS Code 授权。这可以通过您的浏览器完成。在某些情况下，为了使 GitHub 上的授权请求消息出现，您可能需要重新启动
    VS Code。
- en: Peering into the world of VS Code, *Figure 8**.8* captures a moment where the
    GitHub Copilot status icon comes to life. Nestled within the status bar at the
    bottom of the VS Code window, this icon signals that GitHub Copilot is active
    and on standby to assist with intelligent code suggestions.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 透过 VS Code 的世界，*图 8**.8* 捕捉了 GitHub Copilot 状态图标焕发生机的时刻。这个图标嵌入在 VS Code 窗口底部的状态栏中，表明
    GitHub Copilot 正在活动并准备好协助智能代码建议。
- en: '![Figure 8.8: VS Code with the GitHub Copilot status icon](img/B22204_08_8.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8：带有 GitHub Copilot 状态图标的 VS Code](img/B22204_08_8.jpg)'
- en: 'Figure 8.8: VS Code with the GitHub Copilot status icon'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8：带有 GitHub Copilot 状态图标的 VS Code
- en: The GitHub Copilot status icon is more than just a symbol; it’s an interactive
    gateway within the VS Code interface. When GitHub Copilot is active, the icon
    illuminates, indicating that the AI-powered code suggestions are in operation.
    Users can interact with this icon to delve into more options related to GitHub
    Copilot, such as adjusting settings or discovering the current version. This icon
    serves as a vital touchpoint in the user experience, offering a seamless way to
    navigate and engage with GitHub Copilot directly from the VS Code interface. In
    the new version, you can use *Ctrl* + *I* to ask GitHub Copilot Chat to do something
    or click on the icon in the bottom right corner to open Copilot Chat.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 状态图标不仅仅是一个符号，它是 VS Code 界面中的一个互动网关。当 GitHub Copilot 处于活动状态时，图标会亮起，表明
    AI 驱动的代码建议正在运行。用户可以与该图标互动，深入了解与 GitHub Copilot 相关的更多选项，例如调整设置或发现当前版本。此图标在用户体验中起着至关重要的作用，提供了一种无缝的方式，让用户可以直接从
    VS Code 界面中导航和与 GitHub Copilot 互动。在新版中，你可以使用 *Ctrl* + *I* 来请求 GitHub Copilot Chat
    执行某项任务，或者点击右下角的图标来打开 Copilot Chat。
- en: Having explored the interactive features of the GitHub Copilot status icon and
    its role in enhancing coding efficiency, we are now poised to delve deeper into
    its capabilities. With this foundation, let’s explore how we can further harness
    the power of GitHub Copilot Chat in VS Code to elevate our coding workflows to
    new heights.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了 GitHub Copilot 状态图标的互动功能及其在提升编码效率中的作用之后，我们现在准备深入探讨其更多的能力。以此为基础，让我们一起探索如何进一步利用
    GitHub Copilot Chat 在 VS Code 中提升我们的编码工作流。
- en: Harnessing the power of GitHub Copilot Chat in VS Code
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 VS Code 中利用 GitHub Copilot Chat 的强大功能
- en: GitHub Copilot Chat is a groundbreaking tool that serves as an AI programming
    assistant, aiding developers in navigating the world of software development with
    greater efficiency. It can perform a variety of tasks, making it an indispensable
    resource for any developer.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot Chat 是一款突破性的工具，作为 AI 编程助手，帮助开发者更高效地在软件开发领域中航行。它可以执行多种任务，是每个开发者不可或缺的资源。
- en: '*Figure 8**.9* illustrates the use of the `task` command in GitHub Copilot
    Chat within VS Code. This feature allows users to request specific tasks, such
    as generating code, asking questions about existing code, or even creating a new
    Jupyter notebook.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.9* 说明了在 VS Code 中使用 GitHub Copilot Chat 的 `task` 命令。此功能允许用户请求特定任务，例如生成代码、询问现有代码的问题，甚至创建新的
    Jupyter Notebook。'
- en: '![Figure 8.9: The task command in GitHub Copilot](img/B22204_08_9.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9：GitHub Copilot 中的任务命令](img/B22204_08_9.jpg)'
- en: 'Figure 8.9: The task command in GitHub Copilot'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9：GitHub Copilot 中的任务命令
- en: By typing `/` in the chat, a list of possible tasks is displayed, providing
    easy and efficient interaction with GitHub Copilot. This functionality highlights
    the versatility of GitHub Copilot as an AI programming assistant that is capable
    of assisting with a wide range of software development tasks.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在聊天中输入`/`，将显示一个可能任务的列表，提供与 GitHub Copilot 的轻松高效互动。这一功能突出了 GitHub Copilot 作为
    AI 编程助手的多功能性，能够协助完成广泛的软件开发任务。
- en: 'Here are some of the tasks you can perform by typing `/` in Copilot Chat:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 Copilot Chat 中输入`/`，你可以执行以下任务：
- en: '**Ask a question about the files in your current workspace**: GitHub Copilot
    can provide insights into the files in your workspace, helping you better understand
    existing code'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**询问有关当前工作区文件的问题**：GitHub Copilot 可以提供有关工作区文件的见解，帮助你更好地理解现有代码'
- en: '**Explain how the selected code works**: If you’re struggling to understand
    a piece of code, GitHub Copilot can provide a detailed explanation'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释所选代码的工作原理**：如果你在理解一段代码时遇到困难，GitHub Copilot 可以提供详细的解释'
- en: '**Generate unit tests for the selected code**: GitHub Copilot can generate
    unit tests for the selected code, helping ensure that your code works as expected'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为所选代码生成单元测试**：GitHub Copilot 可以为所选代码生成单元测试，帮助确保你的代码按预期工作'
- en: '**Propose a fix for issues in the selected code**: If GitHub Copilot detects
    an issue in the selected code, it can suggest a fix'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为所选代码提出修复方案**：如果 GitHub Copilot 检测到所选代码中存在问题，它可以建议修复方案'
- en: '**Generate code for a new workspace**: If you’re starting a new project, GitHub
    Copilot can generate code to help kickstart your workspace'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为新工作区生成代码**：如果你正在启动一个新项目，GitHub Copilot 可以生成代码来帮助你启动工作区'
- en: '**Create a new Jupyter Notebook**: GitHub Copilot can create a new Jupyter
    Notebook for you, helping to organize and visualize your data'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建新的 Jupyter Notebook**：GitHub Copilot 可以为你创建新的 Jupyter Notebook，帮助你整理和可视化数据'
- en: '**Ask questions about VS Code**: If you have questions about how to use VS
    Code, GitHub Copilot can provide answers'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**询问有关 VS Code 的问题**：如果你对如何使用 VS Code 有疑问，GitHub Copilot 可以提供答案。'
- en: '**Generate query parameters for workspace search**: GitHub Copilot can generate
    query parameters to assist in searching your workspace'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为工作区搜索生成查询参数**：GitHub Copilot 可以生成查询参数，以帮助你在工作区中进行搜索。'
- en: '**Ask about developing VS Code extensions**: If you’re interested in developing
    your own VS Code extensions, GitHub Copilot can provide guidance'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**询问有关开发 VS Code 扩展的问题**：如果你对开发自己的 VS Code 扩展感兴趣，GitHub Copilot 可以提供指导。'
- en: '**Ask how to do something in the terminal**: If you need help running commands
    in the terminal, GitHub Copilot can provide step-by-step instructions'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**询问如何在终端中执行某些操作**：如果你需要帮助在终端中运行命令，GitHub Copilot 可以提供逐步的指引。'
- en: 'Here’s a step-by-step example of how to use GitHub Copilot Chat in VS Code:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在 VS Code 中使用 GitHub Copilot Chat 的逐步示例：
- en: '**Open VS Code**: Start VS Code on your computer.'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**打开 VS Code**：在你的电脑上启动 VS Code。'
- en: '**Activate GitHub Copilot**: If you haven’t installed the GitHub Copilot extension
    yet, you can find it in the VS Code extension store. Once it has been installed,
    the GitHub Copilot icon should appear in the status bar at the bottom of the screen.'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**激活 GitHub Copilot**：如果你还没有安装 GitHub Copilot 扩展，可以在 VS Code 扩展商店中找到它。安装完成后，GitHub
    Copilot 图标应该出现在屏幕底部的状态栏中。'
- en: '**Start Copilot Chat**: There are two ways to start Copilot Chat:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动 Copilot Chat**：有两种方式可以启动 Copilot Chat：'
- en: Press *Ctrl* + *I* on your keyboard
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下键盘上的 *Ctrl* + *I*。
- en: Click on the GitHub Copilot icon in the status bar in the bottom-right corner
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击屏幕右下角状态栏中的 GitHub Copilot 图标。
- en: '`Write a function to reverse a string` `in Python`.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`用 Python 编写一个反转字符串的函数`。'
- en: '**Use the code suggestions**: GitHub Copilot will generate a code suggestion
    based on your query. You can accept the suggestion by pressing *Ctrl* + *Enter*,
    or you can request alternatives.'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用代码建议**：GitHub Copilot 将根据你的查询生成代码建议。你可以通过按 *Ctrl* + *Enter* 来接受建议，或者你可以请求其他替代方案。'
- en: '**Interact with Copilot Chat**: You can continue to interact with Copilot Chat,
    asking additional questions or requesting more code suggestions.'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与 Copilot Chat 互动**：你可以继续与 Copilot Chat 互动，提出额外的问题或请求更多的代码建议。'
- en: Remember, while GitHub Copilot is a powerful tool for assisting with writing
    code, it’s always important to understand the code you’re writing and ensure that
    it meets your specific needs.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，尽管 GitHub Copilot 是一个强大的代码辅助工具，但始终理解你正在编写的代码并确保其符合你的特定需求是非常重要的。
- en: While GitHub Copilot serves as an invaluable tool, it is crucial to remain engaged
    and understand the code that you integrate into your projects. With this understanding,
    let’s now explore how you can expand your coding possibilities by using the multilingual
    capabilities of GitHub Copilot to enhance your development workflow further.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 GitHub Copilot 是一个非常宝贵的工具，但重要的是要保持参与并理解你整合到项目中的代码。了解这一点后，让我们继续探索如何通过使用 GitHub
    Copilot 的多语言功能，进一步扩展你的编码可能性，从而提升开发工作流。
- en: Using multilingual capabilities
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多语言功能
- en: Coding assistants are powerful tools that support multiple programming languages.
    This is especially useful in polyglot development environments, where different
    parts of a project may be written in different languages.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 编程助手是支持多种编程语言的强大工具。这在多语言开发环境中特别有用，在这种环境中，项目的不同部分可能用不同的语言编写。
- en: 'Let’s take a look at an example of web development using Copilot. Suppose that
    you’re working on a web development project that has a frontend written in JavaScript
    (React) and a backend written in Python (Django); in that case, follow these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用 Copilot 进行 Web 开发的示例。假设你正在开发一个 Web 项目，前端使用 JavaScript（React）编写，后端使用
    Python（Django）编写；在这种情况下，请按照以下步骤操作：
- en: Open VS Code and navigate to the JavaScript (React) file that you’re working
    on for the frontend.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VS Code，并导航到你正在开发前端的 JavaScript（React）文件。
- en: Start typing your code. Copilot will suggest JavaScript code completions.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始编写你的代码。Copilot 将建议 JavaScript 代码补全。
- en: If you switch to a Python (Django) file in the backend, Copilot will start suggesting
    Python code completions.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你切换到后端的 Python（Django）文件，Copilot 将开始建议 Python 代码补全。
- en: This allows you to easily switch between different programming languages without
    losing productivity, maintaining consistency and efficiency across both projects.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使你能够在不同的编程语言之间轻松切换，而不会失去生产力，同时在两个项目中保持一致性和高效性。
- en: The ability of coding assistants such as GitHub Copilot to handle multiple languages
    is invaluable for developers working in polyglot environments. These tools offer
    relevant code suggestions across various programming languages, allowing developers
    to seamlessly switch between languages without sacrificing productivity. This
    feature is particularly beneficial in web development, where the frontend and
    backend often use different languages. As such, multilingual capabilities are
    crucial for boosting the efficiency and productivity of developers.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如GitHub Copilot等编码助手能够处理多种语言，这对于在多语言环境中工作的开发者来说至关重要。这些工具提供各种编程语言的相关代码建议，允许开发者在不牺牲生产力的情况下在语言间无缝切换。这一功能在Web开发中尤其有益，因为前端和后端通常使用不同的语言。因此，多语言能力对于提升开发者的效率和生产力至关重要。
- en: Understanding how GitHub Copilot and similar tools improve productivity through
    their multilingual support sets the stage for further refining our coding practices.
    In the next section, we’ll delve into essential code optimization tips to streamline
    the development process and enhance code efficiency and readability.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 了解GitHub Copilot及类似工具如何通过其多语言支持提升生产力，为进一步优化我们的编码实践奠定基础。在接下来的章节中，我们将深入探讨一些基本的代码优化技巧，以简化开发过程并提升代码效率和可读性。
- en: Code optimization tips
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码优化技巧
- en: 'Code suggestions go beyond speeding up the writing process; they also focus
    on optimizing and enhancing code efficiency. Tools such as GitHub Copilot offer
    valuable insights into how you can refine your code, making it more efficient
    and improving its overall quality. By providing these optimization tips, coding
    assistants help ensure that your code runs more smoothly and effectively. Here
    are some examples of code optimization with GitHub Copilot:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 代码建议不仅仅是加速写作过程，它们还专注于优化和提升代码效率。像GitHub Copilot这样的工具提供了如何优化代码的宝贵建议，使代码更高效，整体质量更好。通过提供这些优化建议，编码助手帮助确保你的代码运行得更加顺畅和有效。以下是一些使用GitHub
    Copilot进行代码优化的示例：
- en: '**Using appropriate data structures**: The right data structures can significantly
    improve your code’s efficiency. For example, if you’re working with a large amount
    of data, Copilot might suggest using a set instead of a list to speed up search
    operations.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用合适的数据结构**：正确的数据结构能显著提高代码的效率。例如，如果你在处理大量数据，Copilot可能会建议使用集合（set）而不是列表（list），以加快搜索操作。'
- en: '`sum()` function instead of a `for` loop.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sum()`函数而非`for`循环。
- en: '`Car` class with appropriate methods.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Car`类和适当的方法。
- en: '**Using Copilot to check for better ways to optimize your code**: After writing
    your code, you can use Copilot to check for better ways to optimize your code.
    It might suggest refactoring that improves your code’s efficiency and readability.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Copilot检查更好的代码优化方式**：在编写完代码后，你可以使用Copilot检查是否有更好的方式来优化你的代码。它可能会建议重构，以提高代码的效率和可读性。'
- en: Mastering code autocompletion is important for any developer. With the help
    of smart code suggestions, you can write code more quickly, handle multiple languages
    with ease, and ensure that your code is optimized for better performance. This
    powerful tool can significantly enhance your productivity and help you become
    a more proficient developer. Use it wisely and watch your efficiency soar.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握代码自动完成对于任何开发者都非常重要。借助智能代码建议，你可以更快速地编写代码，轻松处理多种语言，并确保你的代码在性能上得到优化。这个强大的工具能够显著提升你的生产力，帮助你成为更高效的开发者。明智使用它，看看你的效率如何飞跃。
- en: 'Having discussed the benefits of code autocompletion, let’s now shift our focus
    to another vital aspect: **intelligent debugging**. Unlike traditional debugging,
    this technology not only detects errors but also offers solutions. It streamlines
    your development process and ensures higher code quality. By harnessing intelligent
    debugging, you can further enhance your coding efficiency and produce cleaner,
    more reliable code. Let’s explore this powerful tool in more detail.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论了代码自动完成功能的好处后，让我们将注意力转向另一个重要方面：**智能调试**。与传统的调试方法不同，这项技术不仅能检测错误，还能提供解决方案。它简化了开发过程，并确保更高的代码质量。通过利用智能调试，你可以进一步提升编码效率，编写更简洁、更可靠的代码。让我们更详细地探讨这个强大的工具。
- en: Detecting and fixing errors with intelligent debugging
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用智能调试来检测和修复错误
- en: Debugging is an art that requires patience, precision, and a deep understanding
    of the code. In the world of software development, intelligent debugging stands
    out as a skill. It involves the use of advanced techniques and tools to detect
    and fix errors efficiently. Some of these techniques include **real-time error
    detection**, static code analysis, step-by-step debugging, and reverse debugging.
    Let’s take a look at a few techniques in detail.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是一项艺术，需要耐心、精确和对代码的深刻理解。在软件开发的世界里，智能调试脱颖而出，成为一项重要技能。它涉及使用先进的技术和工具来高效地检测和修复错误。其中一些技术包括**实时错误检测**、静态代码分析、逐步调试和反向调试。让我们详细看一下几种技术。
- en: Real-time error detection
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时错误检测
- en: Real-time error detection is an advanced feature that allows developers to identify
    and fix errors as they are introduced into the code. Tools such as GitHub Copilot
    can suggest corrections for code errors based on the context of the code that
    you are working on. However, GitHub Copilot does not make real-time corrections
    to your code because it does not have the ability to interact directly with your
    development environment.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 实时错误检测是一项先进的功能，它允许开发者在代码引入错误的同时，及时发现并修复这些错误。像GitHub Copilot这样的工具能够根据你正在编写的代码的上下文，建议修正代码错误。然而，GitHub
    Copilot并不会实时修正你的代码，因为它没有与开发环境直接互动的能力。
- en: Here’s an example of how GitHub Copilot might suggest a correction for a common
    code error in Python.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，展示GitHub Copilot如何为Python中常见的代码错误提供修正建议。
- en: 'Suppose that you have the following code with an error:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有以下带有错误的代码：
- en: '[PRE2]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The error here is that a colon (`:`) is missing at the end of the `for` loop
    line. GitHub Copilot could suggest the following correction:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的错误是`for`循环行末缺少一个冒号（`:`）。GitHub Copilot可能会建议以下修正：
- en: '[PRE3]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With a solid grasp of real-time error detection and its benefits, we can now
    explore another transformative feature. The next step in our journey through advanced
    development tools is the use of chat functionalities within IDEs such as VS Code
    for debugging. This innovative approach makes the debugging process not only simpler
    but also more effective. By leveraging conversational AI, developers can interact
    directly with the tool, receiving solutions and insights in a more intuitive and
    accessible way.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们充分理解实时错误检测及其好处后，我们可以探索另一个具有变革性的功能。我们在高级开发工具中的下一步旅程是利用IDE（如VS Code）中的聊天功能进行调试。这种创新的方法不仅简化了调试过程，还提高了其效果。通过利用对话式AI，开发者可以直接与工具进行互动，以更直观、便捷的方式获取解决方案和见解。
- en: Let’s dive deeper into how these chat functionalities can revolutionize your
    debugging process, making it smoother and more efficient. This method enhances
    the traditional debugging experience by providing real-time assistance and contextual
    understanding, ultimately leading to faster and more accurate problem resolution.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨这些聊天功能如何彻底改变你的调试过程，使其更加流畅和高效。这种方法通过提供实时帮助和上下文理解，提升了传统调试体验，最终帮助你更快速、更准确地解决问题。
- en: Debugging using chat and VS Code
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用聊天和VS Code进行调试
- en: You can also perform debugging through chat using GitHub Copilot. By submitting
    the problematic code and describing the unexpected behavior, Copilot can offer
    potential solutions or corrections. Keep in mind that GitHub Copilot cannot run
    or debug the code directly; it can only provide suggestions based on the information
    you provide. The developer is responsible for implementing and testing these suggested
    corrections.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过聊天使用GitHub Copilot进行调试。通过提交有问题的代码并描述意外行为，Copilot可以提供潜在的解决方案或修正意见。请记住，GitHub
    Copilot无法直接运行或调试代码；它只能根据你提供的信息提出建议。开发者负责实现和测试这些建议的修正。
- en: 'Consider the following procedure for a block of Python code with an error:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下针对带有错误的Python代码块的处理过程：
- en: '**Provide the problematic code**: You can start by providing the code that
    is causing problems. For example, you might have a function that is supposed to
    add two numbers but is instead subtracting them:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提供有问题的代码**：你可以通过提供导致问题的代码开始。例如，你可能有一个本应加法运算的函数，但实际上却在做减法：'
- en: '[PRE4]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`/fix` command to get a correction suggestion. For example, you could type
    `/fix` into the GitHub Copilot chat.'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`/fix`命令获取修正建议。例如，你可以在GitHub Copilot聊天框中输入`/fix`。
- en: '`The add function is subtracting the numbers instead of` `adding them`.'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`加法函数在做减法，而不是` `做加法`。'
- en: '**Get a suggestion**: Based on your code and the problem description, GitHub
    Copilot can suggest a possible correction. The chat will return something like
    the following:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取建议**：根据你的代码和问题描述，GitHub Copilot 可以建议一个可能的修正。聊天框会返回类似如下内容：'
- en: 'It seems like there’s a logic error in your Python function. The function is
    supposed to add numbers, but it’s subtracting them. Here’s the corrected code:'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的 Python 函数似乎有一个逻辑错误。这个函数本应进行加法运算，但它却在做减法。以下是修正后的代码：
- en: '[PRE5]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Implement the correction**: Finally, you can implement the suggested correction
    in your code using VS Code. You can type the suggested correction directly into
    your code in VS Code.'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施修正**：最后，你可以在 VS Code 中实现建议的修正。你可以直接在 VS Code 中输入建议的修正。'
- en: The actual suggestions will depend on the complexity of your function and the
    context of your code. This is a simple example to illustrate the process.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的建议将取决于你的函数的复杂性和代码的上下文。这是一个简单的示例，用于说明这一过程。
- en: Having explored how GitHub Copilot can assist in debugging through chat in VS
    Code, let’s move on to another powerful feature designed to streamline the coding
    process. The **Fix This** feature in GitHub Copilot takes the capabilities of
    code suggestions further by actively proposing changes to correct specific issues
    in your code.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过聊天了解了 GitHub Copilot 如何在 VS Code 中协助调试后，我们将探讨另一个旨在简化编码过程的强大功能。GitHub Copilot
    中的**修复此项**功能进一步增强了代码建议的能力，主动提出更改以修正代码中的特定问题。
- en: Adjusting code with the Fix This feature
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用“修复此项”功能调整代码
- en: 'GitHub Copilot is an AI tool that assists developers in writing code. It has
    several features, each designed to enhance a different aspect of the coding process.
    The **Fix This** feature, for instance, stands out for its ability to suggest
    corrections or improvements to existing code based on its context. This is in
    contrast to other features, such as **Chat** and **In-line Text Completion**.
    Here’s a comparison:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 是一款帮助开发者编写代码的 AI 工具。它拥有多个功能，每个功能旨在提升编码过程中的不同方面。例如，**修复此项**功能以其能够根据代码上下文建议修正或改进而脱颖而出。这与其他功能，如**聊天**和**内联文本补全**有所不同。以下是它们的比较：
- en: '**Chat**: This feature allows developers to engage in a conversational interaction
    with the AI, asking questions or seeking advice on coding problems.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天**：这个功能允许开发者与 AI 进行对话互动，询问问题或寻求编码问题的建议。'
- en: '**In-line Text Completion**: This feature, on the other hand, provides real-time
    suggestions as developers type their code, helping to autocomplete lines or blocks
    of code.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内联文本补全**：另一方面，这个功能在开发者输入代码时提供实时建议，帮助自动完成代码行或代码块。'
- en: '**Fix This**: Accessible through the **Copilot** menu when right-clicking on
    a specific code context, this feature takes a more proactive approach. It analyzes
    the selected code and suggests a correction or improvement, saving developers
    the time and effort of manually debugging or optimizing their code.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修复此项**：通过右键点击特定代码上下文，进入**Copilot**菜单访问，此功能采用更加主动的方法。它会分析选中的代码，并建议修正或改进，节省开发者手动调试或优化代码的时间和精力。'
- en: '*Figure 8**.10* illustrates how to access the **Fix** **This** feature.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.10* 说明了如何访问**修复** **此项**功能。'
- en: '![Figure 8.10: Accessing the Fix This feature](img/B22204_08_10.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10：访问“修复此项”功能](img/B22204_08_10.jpg)'
- en: 'Figure 8.10: Accessing the Fix This feature'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10：访问“修复此项”功能
- en: 'Here’s a step-by-step guide to access the feature, obtain suggestions, and
    decide whether to accept or reject them:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是访问该功能、获取建议以及决定是否接受或拒绝建议的逐步指南：
- en: Right-click on the code you wish to correct or improve.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击你希望修正或改进的代码。
- en: In the menu that appears, hover over the **Copilot** option.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的菜单中，将鼠标悬停在**Copilot**选项上。
- en: In the **Copilot** submenu, select the **Fix** **This** option.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Copilot**子菜单中，选择**修复此项**选项。
- en: GitHub Copilot will analyze the code context and suggest a correction or improvement.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub Copilot 将分析代码上下文，并建议一个修正或改进。
- en: You can preview the suggestion and decide whether to accept or reject it. If
    you accept, the suggestion will be applied to your code.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以预览建议，并决定是否接受或拒绝。如果接受，建议将应用于你的代码。
- en: Lastly, the Fix This feature of GitHub Copilot is a valuable tool for developers’
    daily work. It not only helps to correct and improve code efficiently but also
    serves as an excellent learning tool, allowing developers to familiarize themselves
    with new techniques and coding best practices. This feature, along with the others
    offered by GitHub Copilot, makes it a comprehensive and indispensable tool for
    modern developers.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，GitHub Copilot的“Fix This”功能是开发人员日常工作中的宝贵工具。它不仅有助于高效地纠正和改进代码，还作为一个优秀的学习工具，帮助开发人员熟悉新技术和编码最佳实践。这个功能，连同GitHub
    Copilot提供的其他功能，使其成为现代开发人员的全面且不可或缺的工具。
- en: Now that we understand how the Fix This feature simplifies code adjustments,
    let’s shift our focus to another powerful capability. In the following section,
    we’ll explore how GitHub Copilot can generate unit tests. This feature facilitates
    thorough testing processes, ensuring your code is robust and reliable.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了GitHub Copilot的“Fix This”功能如何简化代码调整，让我们把注意力转向另一个强大的功能。在接下来的部分中，我们将探索GitHub
    Copilot如何生成单元测试。这个功能有助于全面的测试过程，确保你的代码健壮且可靠。
- en: Generating unit tests with GitHub Copilot
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GitHub Copilot生成单元测试
- en: 'To generate unit tests using GitHub Copilot, you can start by writing a comment
    indicating that you want to create a unit test for a specific function. GitHub
    Copilot will then generate a suggestion based on the context. Suppose that you
    have the following function:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用GitHub Copilot生成单元测试，你可以先写一个注释，表示你想为特定函数创建一个单元测试。GitHub Copilot随后会根据上下文生成一个建议。假设你有以下函数：
- en: '[PRE6]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s a step-by-step guide to how you can generate a unit test:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成单元测试的逐步指南：
- en: '**Start writing a unit test**: You can start writing a unit test like this:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开始编写单元测试**：你可以像这样开始编写单元测试：'
- en: '[PRE7]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Get a suggestion**: After initiating the unit test with the function definition,
    GitHub Copilot can generate the following complete unit test:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取建议**：在定义函数后启动单元测试，GitHub Copilot可以生成以下完整的单元测试：'
- en: '[PRE8]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Implement the suggestion**: You can implement the unit test suggestion directly
    in your code in VS Code.'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施建议**：你可以直接在VS Code中的代码中实施单元测试建议。'
- en: This is a simple example, and the actual suggestions will depend on the complexity
    of your function and the context of your code. This example illustrates the process.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的示例，实际的建议将根据你函数的复杂性和代码的上下文而有所不同。这个示例演示了整个过程。
- en: Mastering intelligent debugging techniques for error detection and resolution
    is an essential skill for any developer. With the help of an AI programming assistant,
    we can enhance this skill and make our coding process more efficient and productive.
    Real-time error detection, the adoption of debugging best practices, debugging
    using chat, and generating unit tests are key components in mastering these techniques.
    With these skills, we can create cleaner, more efficient, and more error-free
    code. Intelligent debugging is not just a skill, but a mindset that allows us
    to write better and more efficient code.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 精通智能调试技术以进行错误检测和解决是每个开发人员必备的技能。在AI编程助手的帮助下，我们可以提升这一技能，使我们的编码过程更加高效和富有生产力。实时错误检测、采纳调试最佳实践、通过聊天进行调试以及生成单元测试是掌握这些技术的关键组成部分。通过这些技能，我们可以编写更简洁、更高效且更少错误的代码。智能调试不仅是一项技能，更是一种思维方式，让我们能够编写出更好、更高效的代码。
- en: With a clear understanding of how GitHub Copilot can elevate our unit testing
    capabilities, let’s move forward and explore how we can enhance collaboration
    and streamline our coding practices through effective code review assistance.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 通过清晰理解GitHub Copilot如何提升我们的单元测试能力，让我们继续前进，探索如何通过有效的代码审查协助来增强协作并简化我们的编码实践。
- en: Streamlining collaboration through code review assistance
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过代码审查协助简化协作
- en: Effective collaboration and code quality are two fundamental pillars of software
    development. In this section, we will explore how GitHub Copilot in VS Code can
    be a powerful ally in this process.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 高效的协作和代码质量是软件开发的两个基本支柱。在本节中，我们将探讨如何在VS Code中使用GitHub Copilot，成为这个过程中强有力的盟友。
- en: Enhancing the code review process
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强代码审查过程
- en: 'In the realm of code review, the role of GitHub Copilot is transformative.
    Here’s how:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码审查领域，GitHub Copilot的角色具有变革性。以下是具体方式：
- en: '**Providing context-aware code suggestions during reviews**: Context-sensitive
    code suggestions are provided during reviews, helping to speed up the review process'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供上下文感知的代码建议**：在审查过程中，提供上下文敏感的代码建议，帮助加速审查过程'
- en: '**Highlighting potential errors or style issues**: Potential errors or style
    issues are highlighted, allowing them to be corrected before commit'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**突出潜在错误或风格问题**：潜在的错误或风格问题会被突出显示，允许在提交前进行修正'
- en: '**Automating repetitive tasks like formatting and commenting**: Repetitive
    tasks, such as formatting and commenting, are automated, saving valuable time'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化重复任务，如格式化和注释**：重复任务，如格式化和注释，得以自动化，节省了宝贵的时间'
- en: '**Integrating with code review platforms to streamline workflows**: Integration
    with code review platforms, such as GitHub, streamlines workflows'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与代码审查平台集成以简化工作流程**：与代码审查平台（如 GitHub）集成，简化了工作流程'
- en: '**Offering suggestions for alternative approaches or improvements**: Suggestions
    for alternative approaches or improvements are offered, helping to improve code
    quality'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供替代方案或改进的建议**：提供替代方案或改进的建议，有助于提高代码质量'
- en: '**Flagging code that deviates from coding standards**: Code that deviates from
    coding standards is flagged, ensuring code consistency'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记偏离编码标准的代码**：偏离编码标准的代码会被标记，确保代码的一致性'
- en: With these features, the code review process becomes more efficient and effective.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些功能，代码审查过程变得更加高效和有效。
- en: Ensuring code quality
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保代码质量
- en: 'Quality is non-negotiable in code development. Here’s how GitHub Copilot ensures
    it:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 质量在代码开发中是不可妥协的。以下是 GitHub Copilot 如何确保质量的方式：
- en: '**Enforcing coding standards consistently**: Coding standards are consistently
    enforced, helping to maintain code consistency and readability'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性地执行编码标准**：编码标准被一致地执行，有助于保持代码的一致性和可读性'
- en: '**Tracking code quality metrics over time**: Code quality metrics are tracked
    over time, providing valuable insights into code quality'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪代码质量指标的变化**：代码质量指标随着时间的推移进行跟踪，提供了有关代码质量的宝贵见解'
- en: '**Suggesting refactoring opportunities for better maintainability**: Refactoring
    opportunities are suggested to improve code maintainability'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建议进行重构以提高可维护性**：会建议进行重构，以提高代码的可维护性'
- en: '**Generating code documentation automatically**: Code documentation is automatically
    generated, saving time and ensuring that code is easily understood'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动生成代码文档**：自动生成代码文档，节省时间并确保代码易于理解'
- en: '**Identifying potential security vulnerabilities**: Potential security vulnerabilities
    are identified, helping to protect code against threats'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别潜在的安全漏洞**：识别潜在的安全漏洞，有助于保护代码免受威胁'
- en: These features ensure that the code you write is of the highest possible quality.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能确保你编写的代码具有最高的质量。
- en: Team collaboration features
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 团队协作功能
- en: 'Team collaboration is at the heart of successful software development. Here’s
    how GitHub Copilot fosters it:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 团队协作是成功软件开发的核心。以下是 GitHub Copilot 如何促进团队协作的方式：
- en: '**Sharing code snippets and suggestions easily**: Code snippets and suggestions
    can be easily shared, facilitating collaboration.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻松共享代码片段和建议**：可以轻松共享代码片段和建议，促进协作。'
- en: '**Providing feedback on code asynchronously**: Feedback on code can be provided
    asynchronously, enabling effective team collaboration.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供异步代码反馈**：可以异步地提供代码反馈，从而促进高效的团队协作。'
- en: '**Resolving conflicts during code merges**: Conflicts during code merges are
    resolved, ensuring a smooth merge process.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决代码合并冲突**：在代码合并过程中解决冲突，确保顺利的合并过程。'
- en: '**Fostering knowledge transfer and collective learning**: Knowledge transfer
    and collective learning are fostered, helping the team to learn and grow together.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促进知识转移和集体学习**：促进知识转移和集体学习，帮助团队共同学习和成长。'
- en: '**Tracking team progress and contributions**: Team progress and contributions
    are tracked, providing valuable insights into team performance. With these features,
    your team can work together more effectively and efficiently.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪团队进度和贡献**：跟踪团队进度和贡献，提供关于团队表现的宝贵见解。通过这些功能，你的团队能够更有效、更高效地协作。'
- en: Integrating GitHub Copilot into VS Code can significantly boost collaboration
    and code quality. By embedding Copilot into our workflows, we can increase team
    productivity and maintain continuous code improvements. To utilize these features,
    install the GitHub Copilot extension in VS Code and link it to your GitHub account.
    Once set up, Copilot can be used directly within the VS Code editor.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 将 GitHub Copilot 集成到 VS Code 中可以显著提升协作和代码质量。通过将 Copilot 嵌入到我们的工作流程中，我们可以提高团队的生产力并保持持续的代码改进。要使用这些功能，请在
    VS Code 中安装 GitHub Copilot 扩展，并将其链接到你的 GitHub 账户。一旦设置完成，就可以在 VS Code 编辑器中直接使用
    Copilot。
- en: This concludes our look at how GitHub Copilot enhances collaboration through
    code review assistance. We hope that this information has been useful and insightful.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们关于 GitHub Copilot 如何通过代码审查帮助提升协作的讨论。我们希望这些信息对你有所帮助，并带来了深刻的启示。
- en: Summary
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you were introduced to the field of coding assistants and you
    explored how these tools serve as secret weapons in modern development. You gained
    a comprehensive understanding of their functionality and benefits and learned
    how to apply them in your applications for enhanced productivity and code quality.
    You mastered the art of integrating coding assistants into your workflow, maximizing
    productivity with smart code suggestions, and streamlining collaboration through
    code review assistance.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经了解了编码助手的领域，并探索了这些工具如何成为现代开发中的秘密武器。你全面了解了它们的功能和优势，并学会了如何在应用中使用它们，以提高生产力和代码质量。你掌握了将编码助手集成到工作流程中的技巧，通过智能代码建议最大化生产力，并通过代码审查帮助简化协作。
- en: You also became adept at handling complex state logic using coding assistants
    and debugging your applications effectively. By this point, you have not only
    understood the fundamental concepts and functions of coding assistants but also
    learned how to seamlessly integrate them into your development workflow. You have
    effectively utilized code auto-completion for increased productivity, mastered
    intelligent debugging techniques for error detection and resolution, and optimized
    collaboration through efficient code review assistance.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 你还熟练掌握了使用编码助手处理复杂状态逻辑并有效调试你的应用程序。到目前为止，你不仅理解了编码助手的基本概念和功能，还学会了如何将它们无缝集成到你的开发工作流程中。你已有效利用代码自动补全提高生产力，掌握了智能调试技术进行错误检测和解决，并通过高效的代码审查帮助优化了协作。
- en: As we move forward to the next chapter, we will continue to reinforce the logical
    flow of the content.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进入下一章时，我们将继续加强内容的逻辑流畅性。
