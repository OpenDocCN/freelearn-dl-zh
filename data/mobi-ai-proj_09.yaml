- en: Sentiment Analysis over Text Using LinearSVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LinearSVC 进行文本情感分析
- en: In this chapter, we are going to build an iOS application to do sentiment analysis
    over text and image through user input. We will use existing data models that
    were built for the same purpose by using LinearSVC, and convert those models into
    core **machine learning** (**ML**) models for ease of use in our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将构建一个 iOS 应用程序，通过用户输入对文本和图像进行情感分析。我们将使用现有的数据模型，这些模型是通过使用 LinearSVC 为同一目的构建的，并将这些模型转换为核心**机器学习**（**ML**）模型，以便在我们的应用程序中更易于使用。
- en: Sentiment analysis is the process of identifying a feeling or opinion that is
    inspired by any given data in the form of text, image, audio, or video. There
    are a lot of use cases for sentiment analysis. Even now, political parties can
    easily identify the general mindset of the people who are going to elect them
    and they also have the potential to change that mindset.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 情感分析是识别任何给定数据（如文本、图像、音频或视频）所激发的情感或观点的过程。情感分析有很多应用场景。即使现在，政党也能轻松识别出选民的普遍心态，他们还有潜力改变这一心态。
- en: 'Let''s take a look at building our own ML model on sentiment analysis from
    an existing dataset. In this chapter, we will look at the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何从现有的数据集中构建我们自己的情感分析 ML 模型。在这一章中，我们将探讨以下主题：
- en: Building the ML model using scikit-learn
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 scikit-learn 构建 ML 模型
- en: '**Linear Support Vector Classification** (**LinearSVC**)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性支持向量分类**（**LinearSVC**）'
- en: Building an iOS application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个 iOS 应用程序
- en: Building the ML model using scikit–learn
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 scikit-learn 构建 ML 模型
- en: In this section, we will build our own model. There are existing datasets available
    that are related to Twitter feed data on the topic of product and movie reviews.
    You can pick a dataset that suits you; in this chapter, we will pick a dataset
    that has customer reviews.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将构建我们自己的模型。有现成的数据集可供使用，这些数据集与 Twitter 动态数据相关，主题是产品和电影评论。你可以选择适合你自己的数据集；在这一章中，我们将选择一个包含客户评论的数据集。
- en: A dataset that contains both positive and negative reviews of customers can
    be found at [http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/](http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/).
    You can download the dataset from the following link: [http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/epinions3.zip](http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/epinions3.zip).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含正面和负面客户评论的数据集可以在[http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/](http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/)找到。你可以通过以下链接下载该数据集：[http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/epinions3.zip](http://boston.lti.cs.cmu.edu/classes/95-865-K/HW/HW3/epinions3.zip)。
- en: 'The aforementioned dataset has both positive and negative feedback about a
    product, as shown in the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上述数据集包含有关产品的正面和负面反馈，如下图所示：
- en: '![](img/f5643436-bbd4-4559-8af3-aee1844cc3b4.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5643436-bbd4-4559-8af3-aee1844cc3b4.png)'
- en: We will train the dataset using the scikit-learn pipeline and LinearSVC. Let's
    take a closer look at both of these.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 scikit-learn 管道和 LinearSVC 来训练数据集。让我们更详细地了解这两者。
- en: Scikit-learn
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scikit-learn
- en: This is a data mining and data analysis Python library built on top of **NumPy**,
    **SciPy**, and **Matplotlib**. This helps with ML problems related to classification,
    regression, clustering, and dimensionality reduction.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于 **NumPy**、**SciPy** 和 **Matplotlib** 构建的数据挖掘和数据分析 Python 库。它有助于解决与分类、回归、聚类和降维相关的
    ML 问题。
- en: The scikit-learn pipeline
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scikit-learn 管道
- en: The main purpose of the scikit-learn pipeline is to assemble ML steps. This
    can be cross-validated to set various parameters. Scikit-learn provides a library
    of transformers that are used for preprocessing data (data cleaning), kernel approximation
    (expand), unsupervised dimensionality reduction (reduce), and feature extraction (generate).
    The pipeline contains a series of transformers with a final estimator.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: scikit-learn 管道的主要目的是将 ML 步骤组合在一起。可以通过交叉验证来设置各种参数。scikit-learn 提供了一系列转换器，用于数据预处理（数据清理）、核近似（扩展）、无监督的降维（减少）和特征提取（生成）。该管道包含一系列转换器，并最终产生一个估算器。
- en: The pipeline sequentially applies a list of transforms, followed by a final
    estimator. In the pipeline, the `fit` and `transform` methods are implemented
    during the intermediate steps. The `fit` method is implemented only at the end
    of pipeline operation by the final estimator. To cache the transformers in the
    pipeline, memory arguments are used.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 管道按顺序应用一系列变换，然后是最终的估算器。在管道中，`fit` 和 `transform` 方法在中间步骤中实现。`fit` 方法仅在管道操作的最后由最终估算器实现。为了缓存管道中的变换器，使用了
    `memory` 参数。
- en: An estimator for classification is a Python object that implements the method's
    fit (*x*, *y*) and predict (*T*) values. An example of this is `class sklearn.svm.SVC`,
    which implements SVC. The model's parameters are taken as arguments for the estimator's
    constructor. The `memory` class in scikit-learn has the `class sklearn.utils.Memory(*args,
    **kwargs)` signature. This has methods to cache, clear, reduce, evaluate, and
    format the memory objects. The `cache` method is used to compute the return value
    of the function. The returned object is a `MemorizedFunc` object, which behaves
    like a function and offers additional methods for cache lookup and management.
    The `cache` method takes parameters such as `func=None, ignore=None, verbose=None,
    and mmap_mode=False`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用于分类的估算器是一个 Python 对象，它实现了方法的 fit (*x*, *y*) 和 predict (*T*) 值。例如，`class sklearn.svm.SVC`
    实现了 SVC。模型的参数作为估算器构造函数的参数传递。scikit-learn 中的 `memory` 类具有 `class sklearn.utils.Memory(*args,
    **kwargs)` 签名。它有缓存、清除、减少、评估和格式化内存对象的方法。`cache` 方法用于计算函数的返回值。返回的对象是一个 `MemorizedFunc`
    对象，它的行为类似于一个函数，并提供额外的方法用于缓存查找和管理。`cache` 方法接受诸如 `func=None, ignore=None, verbose=None,
    mmap_mode=False` 等参数。
- en: 'The `class signature` pipeline is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`class signature` 管道如下：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's take a look at another important component in the next section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看下一个重要组件。
- en: LinearSVC
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LinearSVC
- en: One of the classes in the scikit-learn library is LinearSVC, which supports
    both sparse and dense types of input. A one-versus-the-rest scheme is used to
    handle the multiclass support. LinearSVC is similar to SVC, where the parameter
    is `kernel = linear`, but `liblinear` is used to implement the parameter in LinearSVC,
    rather than `libvsm`, which is used in SVC. This provides us with more flexibility
    to choose the penalties and loss functions. It also helps in scaling a large number
    of samples in a better way.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: scikit-learn 库中的一个类是 LinearSVC，它支持稀疏和密集类型的输入。使用一对多方案处理多类支持。LinearSVC 类似于 SVC，其中参数为
    `kernel = linear`，但在 LinearSVC 中使用的是 `liblinear` 来实现该参数，而不是 SVC 中使用的 `libvsm`。这为我们提供了更多选择惩罚和损失函数的灵活性，并且有助于更好地对大量样本进行缩放。
- en: 'The `class` signature is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`class` 签名如下：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It''s now time to start building our model, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始构建我们的模型了，具体如下：
- en: 'We will start by importing all the necessary libraries, as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从导入所有必要的库开始，具体如下：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `re` library is the regular expressions library that provides the matching
    operations that make it easy to handle text data. The `nltk` library is used to
    format the text according to our requirements, while `sklearn` offers the ML tools
    required. The `coremltools` library helps us in to convert the `sklearn` model
    to a Core ML model.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`re` 库是提供匹配操作的正则表达式库，使得处理文本数据变得更加容易。`nltk` 库用于根据我们的需求格式化文本，而 `sklearn` 提供了所需的机器学习工具。`coremltools`
    库帮助我们将 `sklearn` 模型转换为 Core ML 模型。'
- en: 'Now, let''s start reading our input, as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始读取输入，具体如下：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code reads the CSV file and then converts it into a `numpy` array
    that includes all the rows and columns. Now that we have the dataset ready, we
    can start extracting the features from the data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码读取了 CSV 文件，并将其转换为一个包含所有行和列的 `numpy` 数组。现在，我们已经准备好数据集，可以开始从数据中提取特征。
- en: 'Now, let''s work on feature selection, as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们进行特征选择，具体如下：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will start by vectorizing the `features` function. Then, we will extract
    the features of every sentence in the DataFrame and store them in an `X` variable.
    After this, we will set the target variable. The target variable is going to be
    the output. In our case, we will get a label for every sentence that indicates
    the sentiment in it:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从向量化 `features` 函数开始。然后，我们将提取 DataFrame 中每个句子的特征，并将它们存储在 `X` 变量中。之后，我们将设置目标变量。目标变量将是输出。在我们的案例中，我们将为每个句子获取一个标签，指示其中的情感：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our case, we will create a pipeline with `DictVectorizer` and `LinearSVC`.
    `DictVectorizer`, as the name suggests, converts the dictionary in to vectors.
    We have picked `GridSearchCV` to select the best model from a family of models,
    parametrized by a grid of parameters:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将创建一个包含`DictVectorizer`和`LinearSVC`的管道。`DictVectorizer`，顾名思义，将字典转换为向量。我们选择了`GridSearchCV`来从一系列通过参数网格化的模型中选择最佳模型：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will then print the results, as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将打印出结果，如下所示：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now convert the scikit-learn model into `mlmodel`, as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将scikit-learn模型转换为`mlmodel`，如下所示：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once we have our model, we can start building the application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了模型，就可以开始构建应用程序了。
- en: Building the iOS application
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建iOS应用程序
- en: Let's start building the iOS application with the model that was built in the
    previous step. The model will predict the output according to whether the input
    text is positive, neutral, or negative in nature.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建iOS应用程序，使用在上一阶段构建的模型。该模型将根据输入文本的性质（积极、中性或消极）预测输出。
- en: 'To build this application, Xcode version 10.1 should be used:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建此应用程序，应使用Xcode版本10.1：
- en: 'Create a new project with a **Single View app**, as illustrated in the following
    screenshot:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的项目，选择**单视图应用**，如以下截图所示：
- en: '![](img/33d4fee8-f8c2-44fb-b863-da21ec9aecd5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33d4fee8-f8c2-44fb-b863-da21ec9aecd5.png)'
- en: Mention the name of our application on the **Next** screen.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**下一**屏幕上提到我们的应用程序名称。
- en: On the next wizard screen, pick an appropriate name for your application.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个向导屏幕上，为你的应用程序选择一个合适的名称。
- en: Fill in the rest of the fields, including Organization Name, as well as Organization
    Identifier.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写其余的字段，包括组织名称以及组织标识符。
- en: We are not going to use core data in this application, so let's skip that option.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在此应用程序中不使用核心数据，因此跳过该选项。
- en: 'Let''s start by creating a new app in Xcode. The following screenshot demonstrates
    how to create a new project in Xcode:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在Xcode中创建一个新应用开始。以下截图展示了如何在Xcode中创建一个新项目：
- en: '![](img/81976eeb-5ae5-4f01-bbd5-1246a2f011c6.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81976eeb-5ae5-4f01-bbd5-1246a2f011c6.png)'
- en: 'Next, create a storyboard, as shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个故事板，如以下截图所示：
- en: '![](img/d498728f-2fb4-4fab-bf81-5e3b27eb1b43.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d498728f-2fb4-4fab-bf81-5e3b27eb1b43.png)'
- en: 'Once you select the file location in which to save your application, you will
    be able to see the General tab with information on the new application that has
    been initialized, as shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你选择了保存应用程序的文件位置，你将能够看到带有新应用程序信息的“常规”选项卡，如以下截图所示：
- en: '![](img/8cfe0a2b-ef16-4717-bab9-7b4ebf6a7790.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cfe0a2b-ef16-4717-bab9-7b4ebf6a7790.png)'
- en: 'We will create a simple UI with a button at the bottom to display the sentiment:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的UI，在底部放置一个按钮来显示情感：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will define `sentiments` as the enumerator, as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义`sentiments`作为枚举类型，如下所示：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s write the `ClassificationService` to fetch the result from the model
    that we have built:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写`ClassificationService`来获取我们构建的模型的结果：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The input is passed on to the `prediction` method to filter the statements
    into `positive`, `negative`, or `neutral` sentiments:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入被传递到`prediction`方法，以将语句过滤为`positive`、`negative`或`neutral`情感：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s write `ViewController` by initializing the `view` components, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过初始化`view`组件来编写`ViewController`，如下所示：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The initial `setupConstraints` on the buttons and labels are defined as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮和标签上的初始`setupConstraints`定义如下：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Define the `Show()` method, as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`Show()`方法，如下所示：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s run the application on the simulator. You can see the output in the
    following screenshot:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在模拟器上运行应用程序。你可以在以下截图中看到输出：
- en: '![](img/251e6987-1989-41b3-844c-fc1bf96f162c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/251e6987-1989-41b3-844c-fc1bf96f162c.png)'
- en: 'Now, let''s use different inputs for our application and get the output, as
    follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用不同的输入来运行我们的应用程序并获取输出，如下所示：
- en: '![](img/017d54c1-515d-4d4e-aae4-dceb1ac848b1.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/017d54c1-515d-4d4e-aae4-dceb1ac848b1.png)'
- en: 'An example statement of a negative input with the same output is shown in the
    following screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同输出的消极输入示例语句显示在以下截图中：
- en: '![](img/c08a356a-a977-4bba-95f4-2152ab7aa4d6.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c08a356a-a977-4bba-95f4-2152ab7aa4d6.png)'
- en: 'An example input using neutral text is shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用中性文本的示例输入显示在以下截图中：
- en: '![](img/a79e9403-a408-4265-acbc-46072f9e1a73.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a79e9403-a408-4265-acbc-46072f9e1a73.png)'
- en: Here, we are able to get the sentiment from the given text input. Now, you can
    go one step further by improving the existing model.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们能够从给定的文本输入中获取情感。现在，你可以通过改进现有模型，进一步提升模型的效果。
- en: You can explore finding sentiments on images in further detail in various sources.
    An example application is *Fine-tuning CNNs for Visual Sentiment Prediction*.
    You can read about this application at [https://github.com/imatge-upc/sentiment-2017-imavis](https://github.com/imatge-upc/sentiment-2017-imavis).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在多个来源中深入探索如何在图像上识别情感。一个示例应用是 *Fine-tuning CNNs for Visual Sentiment Prediction*。你可以在
    [https://github.com/imatge-upc/sentiment-2017-imavis](https://github.com/imatge-upc/sentiment-2017-imavis)
    阅读关于这个应用的详细信息。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: At this point, you should be able to build your own TensorFlow model and convert
    it into a Core ML model so that it can be used in an iOS application. The same
    TensorFlow model can be converted into a TensorFlow Lite model, which can then
    be used in an Android application or iOS application. Now, you can take on this
    task and experiment with the results. That said, we are now ready to move on to
    the next chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你应该能够构建自己的 TensorFlow 模型，并将其转换为 Core ML 模型，以便在 iOS 应用中使用。相同的 TensorFlow
    模型可以转换为 TensorFlow Lite 模型，然后可以在 Android 应用或 iOS 应用中使用。现在，你可以开始这个任务并尝试不同的结果。话虽如此，我们现在准备进入下一章。
- en: In the next chapter, you will use the knowledge we have acquired in this book
    to move on and explore how you can build your own application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将使用本书中学到的知识，继续探索如何构建自己的应用。
