- en: 1\. Introduction to Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. Python简介
- en: More than 20 years have passed since the Python programming language was released.
    During that period, it has evolved and increased its user base. Python is currently
    the most popular programming language in the world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自Python编程语言发布以来，已经过去了20多年。在此期间，它不断发展并增加了用户基础。Python目前是世界上最流行的编程语言。
- en: In this book, we will use this powerful language to implement a deep learning
    system. This chapter explains Python briefly and describes how to use it. If you
    are familiar with Python, NumPy, and Matplotlib, you can skip this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用这门强大的语言来实现一个深度学习系统。本章简要介绍Python并描述如何使用它。如果你已经熟悉Python、NumPy和Matplotlib，可以跳过本章。
- en: What is Python?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Python？
- en: Python is a simple programming language that is easy to read and learn. It is
    open-source software that you can use as you like for free. You can write a program
    that uses English-like grammar without the time-consuming compilation. This makes
    Python easy to use and, therefore a great choice for beginner programmers. In
    fact, many computer science courses in universities and professional schools choose
    Python as the first language they teach.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种简单的编程语言，易于阅读和学习。它是开源软件，你可以免费使用它，随意编写具有类似英语语法的程序，而无需耗时的编译过程。这使得Python易于使用，因此成为初学者程序员的绝佳选择。事实上，许多大学和专业学校的计算机科学课程选择Python作为他们教授的第一门语言。
- en: Python enables you to write both readable and high-performance (fast) code.
    If massive data processing and high-speed responses are required, Python will
    meet your needs. This is why Python is a favorite both with beginners and professionals.
    Cutting-edge IT companies such as Google, Microsoft, and Facebook frequently use
    Python.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python使你能够编写既易于阅读又高效（快速）的代码。如果需要处理大量数据并且要求快速响应，Python将满足你的需求。这也是为什么Python深受初学者和专业人士喜爱的原因。像Google、Microsoft和Facebook这样的前沿IT公司也经常使用Python。
- en: Python is often used in scientific fields, particularly in machine learning
    and data science. Because of its high performance and excellent libraries for
    numerical calculations and statistical processing (NumPy and SciPy, for example),
    Python occupies a solid position in the realm of data science. It is often used
    as the backbone of deep learning frameworks such as Caffe, TensorFlow, and PyTorch,
    which provide Python interfaces. Therefore, learning Python is also useful when
    you wish to use a framework for deep learning.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python常常用于科学领域，尤其是机器学习和数据科学。由于其高性能以及在数值计算和统计处理方面的优秀库（例如NumPy和SciPy），Python在数据科学领域占据了坚实的地位。它常被用作深度学习框架（如Caffe、TensorFlow和PyTorch）的核心，这些框架提供Python接口。因此，学习Python对于希望使用深度学习框架的人来说也非常有用。
- en: 'Python is an optimal programming language, particularly in data science, as
    it offers various user-friendly and efficient features for beginners and professionals
    alike. For these reasons, it is the natural choice for achieving the goal of this
    book: *Deep Learning from the Basics*.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种优化的编程语言，特别是在数据科学领域，因为它为初学者和专业人士提供了各种用户友好且高效的功能。正因为如此，它成为了实现本书目标的自然选择：*从基础学习深度学习*。
- en: Installing Python
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python
- en: The following section describes some precautions you will need to take when
    installing Python in your environment (PC).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分描述了在你的环境（PC）中安装Python时需要注意的一些事项。
- en: Python Versions
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python版本
- en: 'Python has two major versions: version 2 and version 3\. Currently, both are
    in active use. So, when you install Python, you must carefully choose which version
    to install. These two versions are not completely compatible (to be accurate,
    no **backward compatibility** is available). Some programs written in Python 3
    cannot be run in Python 2\. This book uses Python 3\. If you have only Python
    2 installed, installing Python 3 is recommended.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python有两个主要版本：版本2和版本3。目前，两个版本都在积极使用。因此，当你安装Python时，必须仔细选择要安装的版本。这两个版本并不完全兼容（准确来说，没有**向后兼容性**）。一些用Python
    3编写的程序无法在Python 2中运行。本书使用的是Python 3。如果你只安装了Python 2，建议安装Python 3。
- en: External Libraries That We Use
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们使用的外部库
- en: 'The goal of this book is to implement *Deep Learning from the Basics*. So,
    our policy is that we will use external libraries as little as possible, but we
    will use the following two libraries by way of exception: NumPy and Matplotlib.
    We will use these two libraries to implement deep learning efficiently.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目标是从基础实现 *深度学习*。因此，我们的方针是尽量少使用外部库，但我们会例外地使用以下两个库：NumPy 和 Matplotlib。我们将利用这两个库来高效地实现深度学习。
- en: NumPy is a library for numerical calculations. It provides many convenient methods
    for handling advanced mathematical algorithms and arrays (matrices). To implement
    deep learning in this book, we will use these convenient methods for efficient implementation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 是一个用于数值计算的库。它提供了许多便捷的方法来处理高级数学算法和数组（矩阵）。为了在本书中实现深度学习，我们将利用这些便捷的方法进行高效的实现。
- en: Matplotlib is a library for drawing graphs. You can use Matplotlib to visualize
    experimental results and visually check the data while executing deep learning.
    This book uses these libraries to implement deep learning.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 是一个用于绘制图形的库。你可以使用 Matplotlib 来可视化实验结果，并在执行深度学习时直观地检查数据。本书使用这些库来实现深度学习。
- en: 'This book uses the following programming language and libraries:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下编程语言和库：
- en: Python 3
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: NumPy
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy
- en: Matplotlib
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib
- en: Now, we will describe how to install Python for those who need to install it.
    If you have already met these requirements, you can skip this section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍如何安装 Python，供需要安装的读者参考。如果你已经满足这些要求，可以跳过此部分。
- en: Anaconda Distribution
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Anaconda 发行版
- en: Although numerous methods are available for installing Python, this book recommends
    that you use a distribution called **Anaconda**. Distributions contain the required
    libraries so that the user can install them collectively. The Anaconda distribution
    focuses on data analysis. It also contains libraries useful for data analysis,
    such as NumPy and Matplotlib, as described earlier.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有多种安装 Python 的方法，本书推荐使用一个名为 **Anaconda** 的发行版。发行版包含所需的库，用户可以一次性安装这些库。Anaconda
    发行版专注于数据分析，并包含了对数据分析有用的库，例如前面提到的 NumPy 和 Matplotlib。
- en: 'As we mentioned previously, this book uses Python 3\. Therefore, you will need
    to install the Anaconda distribution for Python 3\. Use the following link to
    download the distribution suitable for your OS and install it:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，本书使用的是 Python 3。因此，你需要安装适用于 Python 3 的 Anaconda 发行版。使用以下链接下载适合你操作系统的发行版并安装：
- en: '[https://docs.anaconda.com/anaconda/install/](https://docs.anaconda.com/anaconda/install/)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.anaconda.com/anaconda/install/](https://docs.anaconda.com/anaconda/install/)'
- en: Python Interpreter
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 解释器
- en: 'After installing Python, start by checking the version. Open a Terminal (Command
    Prompt for Windows) and enter the `python --version` command. This command outputs
    the version of Python you have installed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Python 后，首先检查版本。打开终端（Windows 系统为命令提示符），输入 `python --version` 命令。该命令会输出你安装的
    Python 版本：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If Python 3.4.1 (the number will be different, depending on your installed
    version) is displayed, as shown in the preceding code, then Python 3 has been
    installed successfully. Now, enter `python` and start the Python interpreter:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显示了 Python 3.4.1（具体数字会根据你安装的版本不同而有所变化），如前面的代码所示，说明 Python 3 已经成功安装。现在，输入 `python`
    并启动 Python 解释器：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Python interpreter is also referred to as `3` when you ask, "What is 1+2?".
    Enter the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器也可以称作 `3`，当你问“1+2 等于多少？”时，输入以下内容：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Hence, the Python interpreter enables you to write programs interactively. In
    this book, we will use an interactive mode to work with simple examples of Python
    programming.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Python 解释器允许你进行交互式编程。在本书中，我们将使用交互式模式来处理 Python 编程的简单示例。
- en: Mathematical Operations
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学运算
- en: 'You can conduct mathematical operations, such as addition and multiplication,
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以进行数学运算，例如加法和乘法，如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, * means multiplication, / means division, and ** means exponentiation.
    (3 ** 2 is the second power of 3.) In Python 2, when you divide two integers,
    an integer is returned. For example, the result of 7/5 is 1\. Meanwhile, in Python
    3, when you divide two integers, a floating-point number is returned.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，* 表示乘法，/ 表示除法，** 表示指数运算。（3 ** 2 表示 3 的平方。）在 Python 2 中，当你将两个整数相除时，会返回一个整数。例如，7/5
    的结果是 1。而在 Python 3 中，当你将两个整数相除时，会返回一个浮动小数。
- en: Data Types
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: 'Programming has data types. A data type indicates the character of the data,
    such as an integer, a floating-point number, or a string. Python provides the
    `type()` function to check the data''s type:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 编程有数据类型。数据类型表示数据的特性，比如整数、浮点数或字符串。Python提供了`type()`函数来检查数据的类型：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding results indicate that `10` is `int` (integer type), `2.718` is
    `float` (floating-point type), and `hello` is `str` (string type). The words `type`
    and `class` are sometimes used in the same way. The resulting output, `<class
    'int'>`, can be interpreted as `10` is an `int` `class` (type).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的结果表明，`10`是`int`（整数类型），`2.718`是`float`（浮点类型），而`hello`是`str`（字符串类型）。`type`和`class`这两个词有时可以互换使用。输出结果`<class
    'int'>`可以解释为`10`是`int`的`class`（类型）。
- en: Variables
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: 'You can define `x` and `y`. You can also use variables to calculate or assign
    another value to a variable:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义`x`和`y`。你还可以使用变量来计算或给变量赋另一个值：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Python is a dynamically typed programming language. `x` is `int` (integer).
    Python determines that the type of `x` is `int` because it is initialized to an
    integer, 10\. The preceding example also shows that multiplying an integer by
    a decimal returns a decimal (automatic type conversion). The `#` symbol comments
    out subsequent characters, which are ignored by Python.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种动态类型的编程语言。`x`是`int`（整数）。Python通过`x`被初始化为整数10来判断`x`的类型是`int`。前面的例子还表明，整数与小数相乘会返回小数（自动类型转换）。`#`符号用于注释后续字符，Python会忽略它们。
- en: Lists
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表
- en: 'You can use a list (array) to assign multiple numbers to a variable:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用列表（数组）将多个数字赋值给一个变量：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To access an element, you can write `a[0]`, for example. The number in this
    `[ ]` is called an index, which starts from 0 (the index 0 indicates the first
    element). A convenient notation called `slicing` is provided for Python lists.
    You can use slicing to access both a single element and a sublist of the list:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问一个元素，你可以写`a[0]`，例如。`[ ]`中的数字称为索引，从0开始（索引0表示第一个元素）。Python列表提供了一种便捷的表示法，称为`切片`。你可以使用切片来访问单个元素或列表的子列表：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can slice a list by writing `a[0:2]`. In this example, `a[0:2]` obtains
    the elements from the zeroth index to the one before the second index. So, it
    will show the elements for the zeroth index and the first index only in this case.
    An index number of `-1` indicates the last element, while `-2` indicates the second-last
    element.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过写`a[0:2]`来切片一个列表。在这个例子中，`a[0:2]`获取从零索引到第二个索引前的元素。因此，在这种情况下，它只会显示零索引和一索引的元素。索引数字`-1`表示最后一个元素，而`-2`表示倒数第二个元素。
- en: Dictionaries
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字典
- en: 'In a list, values are stored with index numbers (0, 1, 2, ...) that start from
    0\. A dictionary stores data as key/value pairs. Words associated with their meanings
    are stored in a dictionary, just as in a language dictionary:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中，值是通过索引号（0，1，2，...）存储的，索引从0开始。字典以键/值对的形式存储数据。与它们含义相关的单词就像在语言词典中一样被存储在字典中：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Boolean
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔值
- en: 'Python has a bool type. Its value is `True` or `False`. The operators for the
    bool type are `and`, `or`, and `not` (a type determines which operators can be
    used, such as +, -, *, and / for numbers):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一个布尔类型。它的值是`True`或`False`。布尔类型的运算符有`and`、`or`和`not`（数据类型决定了可以使用的运算符，例如数字可以使用+、-、*、/等运算符）：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: if Statements
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`if`语句'
- en: 'You can use `if`/`else` to switch a process, depending on a condition:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`if`/`else`根据条件切换过程：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In Python, spaces have an important meaning. In this `if` statement example,
    the next statement after `if` `hungry` starts with four spaces. This is an indent
    that indicates the code that is executed when the condition (`if hungry`) is met.
    Although you can use tab characters for an indent, Python recommends using spaces.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，空格有着重要的意义。在这个`if`语句的例子中，`if hungry`后的下一行语句是以四个空格开头的。这是一个缩进，表示当条件（`if
    hungry`）满足时会执行的代码。虽然你可以使用制表符（Tab）来缩进，Python推荐使用空格。
- en: In Python, use spaces to represent an indent. Four spaces are usually used for
    each indent level.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，使用空格表示缩进。通常每个缩进级别使用四个空格。
- en: for Statements
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for`语句'
- en: 'Use a `for` statement for a loop:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`语句进行循环：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example outputs the elements of a list, `[1, 2, 3]`. When you use a `for
    … in …:` statement, you can access each element in a dataset, such as a list,
    in turn.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子输出了一个列表的元素`[1, 2, 3]`。当你使用`for … in …:`语句时，你可以依次访问数据集中的每个元素，例如列表。
- en: Functions
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: 'You can define a group of processes as a **function**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义一组过程作为一个**函数**：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A function can take an argument:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数可以接受一个参数：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Use `+` to combine strings.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`+`来连接字符串。
- en: To close the Python interpreter, enter *Ctrl*+*D* (press the *D* key while holding
    down the *Ctrl* key) for Linux and macOS X. Enter *Ctrl*+*Z* and press the *Enter*
    key for Windows.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭Python解释器，对于Linux和macOS X，输入*Ctrl*+*D*（按住*Ctrl*键的同时按下*D*键）。对于Windows，输入*Ctrl*+*Z*并按*Enter*键。
- en: Python Script Files
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 脚本文件
- en: The examples shown so far have used a Python interpreter that provides a mode
    in which you can interact with Python and which is useful for simple experiments.
    However, it is a little inconvenient if you want to do large processing because
    you have to enter a program every time. In such a case, you can save a Python
    program as a file and execute it (at one time). This next section provides examples
    of Python script files.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止展示的例子使用了一个Python解释器，提供了一种可以与Python交互的模式，适用于简单的实验。然而，如果你想进行大规模的处理，它就有点不方便，因为每次都得输入程序。在这种情况下，你可以将Python程序保存为一个文件并一次性执行。接下来的部分提供了Python脚本文件的例子。
- en: Saving in a File
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存到文件
- en: 'Open your text editor and create a `hungry.py` file. The `hungry.py` file has
    only one line in it, as shown here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器并创建一个`hungry.py`文件。`hungry.py`文件只包含一行代码，如下所示：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then, open a Terminal (Command Prompt for Windows) and move to the location
    where the `hungry.py` file was created. Execute the `python` command with the
    argument of the filename, `hungry.py`. Here,
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开终端（Windows的命令提示符）并移动到创建`hungry.py`文件的位置。使用文件名`hungry.py`作为参数执行`python`命令。在这里，
- en: 'it is assumed that `hungry.py` is located in the `~/deep-learning-from-zero/ch01`
    directory (in the source code provided by this book, `hungry.py` is located under
    the `ch01` directory):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`hungry.py`位于`~/deep-learning-from-zero/ch01`目录下（在本书提供的源代码中，`hungry.py`位于`ch01`目录下）：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Thus, you can use the `python hungry.py` command to run the Python program.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以使用`python hungry.py`命令来运行Python程序。
- en: Classes
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类
- en: So far, you have learned about data types such as `int` and `str` (you can use
    the `type()` function to check the object type). These data types are called **built-in**
    data types since they are built into Python. Here, you will define a new class
    to create your data type. You can also define your original method (function for
    a class) and attributes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学习了`int`和`str`等数据类型（你可以使用`type()`函数来检查对象的类型）。这些数据类型被称为**内建**数据类型，因为它们是Python自带的。在这里，你将定义一个新的类来创建你的数据类型。你还可以定义你自己的方法（类的函数）和属性。
- en: 'In Python, you can use the `class` keyword to define a class. You must use
    the following format:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你可以使用`class`关键字来定义一个类。你必须使用以下格式：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `__init__` method is a special method for initialization. This method for
    initialization is also referred to as a `self` explicitly as the first argument
    of a method to represent yourself (your instance). (This practice may seem strange
    to those who are familiar with other languages.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`方法是一个特殊的初始化方法。这个初始化方法也被显式地称为`self`，作为方法的第一个参数来表示你自己（你的实例）。（对那些熟悉其他语言的人来说，这种做法可能显得有些奇怪。）'
- en: 'Create a class as a simple example as shown below, and save the following program
    as `man.py`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个简单的类，如下所示，并将以下程序保存为`man.py`：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Execute `man.py` from the Terminal:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端执行`man.py`：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, you defined a new class, `Man`. In the preceding example, an instance
    (object), m, was created from the `Man` class.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你定义了一个新的类`Man`。在前面的例子中，从`Man`类创建了一个实例（对象）m。
- en: The constructor (initialization method) of the `Man` class takes `name` as an
    argument and uses it to initialize the instance variable, `self.name`. An `self`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Man`类的构造函数（初始化方法）接受`name`作为参数，并用它来初始化实例变量`self.name`。一个`self`。'
- en: NumPy
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy
- en: When implementing deep learning, arrays and matrices are often calculated. The
    array class of NumPy `(numpy.array)` provides many convenient methods that are
    used to implement deep learning. This section provides a brief description of
    NumPy, which we will use later.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现深度学习时，数组和矩阵经常被计算。NumPy的数组类`(numpy.array)`提供了许多方便的方法，这些方法在深度学习中非常常用。本节简要介绍了NumPy，稍后我们会使用它。
- en: Importing NumPy
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入 NumPy
- en: 'NumPy is an external library. The word **external** here means that NumPy is
    not included in standard Python. So, you must load (import) the NumPy library
    first:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy是一个外部库。**外部**这里的意思是，NumPy没有包含在标准Python中。所以，你必须先加载（导入）NumPy库：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In Python, an import statement is used to import a library. Here, `import numpy
    as np` means that `numpy` is loaded as `np`. Thus, you can now reference a method
    for NumPy as `np`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，使用import语句导入库。这里，`import numpy as np`表示将`numpy`库加载为`np`。因此，你现在可以通过`np`来引用NumPy的方法。
- en: Creating a NumPy Array
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建NumPy数组
- en: 'You can use the `np.array()` method to create a NumPy array. `np.array()` takes
    a Python list as an argument to create an array for NumPy—that is, `numpy.ndarray`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`np.array()`方法创建一个NumPy数组。`np.array()`以Python列表作为参数来创建一个NumPy数组——也就是`numpy.ndarray`：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Mathematical Operations in NumPy
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy中的数学运算
- en: 'The following are a few sample mathematical operations involving NumPy arrays:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些涉及NumPy数组的数学运算示例：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Take note that the numbers of elements of arrays `x` and `y` are the same (both
    are one-dimensional arrays with three elements). When the numbers of elements
    of `x` and `y` are the same, mathematical operations are conducted for each element.
    If the numbers of elements are different, an error occurs. So, it is important
    that they are the same. "For each element" is also called **element-wise**, and
    the "product of each element" is called an **element-wise product**.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数组`x`和`y`的元素数量是相同的（它们都是一维数组，包含三个元素）。当`x`和`y`的元素数量相同，数学运算会对每个元素进行。如果元素数量不同，则会发生错误。因此，它们的元素数量必须相同。“对于每个元素”也称为**逐元素**，而“每个元素的乘积”称为**逐元素乘积**。
- en: 'In addition to element-wise calculations, mathematical operations of a NumPy
    array and a single number (scalar value) are also available. In that case, calculations
    are performed between each element of the NumPy array and the scalar value. This
    feature is called **broadcasting** (more details on this will be provided later):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 除了逐元素计算，NumPy数组与单一数字（标量值）之间的数学运算也是可用的。在这种情况下，计算会在NumPy数组的每个元素与标量值之间进行。这一特性被称为**广播**（更多详细信息将在后续介绍）：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: N-Dimensional NumPy Arrays
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: N维NumPy数组
- en: 'In NumPy, you can create multi-dimensional arrays as well as one-dimensional
    arrays (linear arrays). For example, you can create a two-dimensional array (matrix)
    as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，你可以创建多维数组，也可以创建一维数组（线性数组）。例如，你可以按如下方式创建二维数组（矩阵）：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, a 2x2 matrix, `A`, was created. You can use `shape` to check the shape
    of the matrix, `A`, and use `dtype` to check the type of its elements. Here are
    the mathematical operations of matrices:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，创建了一个2x2的矩阵`A`。你可以使用`shape`检查矩阵`A`的形状，使用`dtype`检查其元素的类型。以下是矩阵的数学运算：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As in arrays, matrices are calculated element by element if they have the same
    shape. Mathematical operations between a matrix and a scalar (single number) are
    also available. This is also conducted by broadcasting:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组一样，矩阵如果具有相同形状，则按元素逐一进行计算。矩阵与标量（单个数字）之间的数学运算也是可用的。这也是通过广播来实现的：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A NumPy array (`np.array`) can be an N-dimensional array. You can create arrays
    of any number of dimensions, such as one-, two-, three-, ... dimensional arrays.
    In mathematics, a one-dimensional array is called a **vector**, and a two-dimensional
    array is called a **matrix**. Generalizing a vector and a matrix is called a **tensor**.
    In this book, we will call a two-dimensional array a matrix, and an array of three
    or more dimensions a tensor or a multi-dimensional array.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一个NumPy数组（`np.array`）可以是N维数组。你可以创建任意维数的数组，例如一维、二维、三维等。在线性代数中，一维数组叫做**向量**，二维数组叫做**矩阵**。将向量和矩阵的概念推广就是**张量**。在本书中，我们将把二维数组称为矩阵，把三维或更多维的数组称为张量或多维数组。
- en: Broadcasting
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广播
- en: 'In NumPy, you can also do mathematical operations between arrays with different
    shapes. In the preceding example, the 2x2 matrix, `A`, was multiplied by a scalar
    value of `s`. *Figure 1.1* shows what is done during this operation: a scalar
    value of `10` is expanded to 2x2 elements for the operation. This smart feature
    is called **broadcasting**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，你还可以对形状不同的数组进行数学运算。在前面的例子中，2x2矩阵`A`被与标量值`s`相乘。*图1.1*展示了这个操作的过程：标量值`10`被扩展为2x2元素进行运算。这个智能特性叫做**广播**：
- en: '![Figure 1.1: Sample broadcasting – a scalar value of 10 is treated as a 2x2
    matrix'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1：广播示例——标量值10被视为一个2x2矩阵'
- en: '](img/fig01_1.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/fig01_1.jpg)'
- en: 'Figure 1.1: Sample broadcasting – a scalar value of 10 is treated as a 2x2
    matrix'
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.1：广播示例——标量值10被视为一个2x2矩阵
- en: 'Here is a calculation for another broadcasting sample:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个广播示例的计算：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here (as shown in *Figure 1.2*), the one-dimensional array `B` is transformed
    so that it has the same shape as the two-dimensional array `A`, and they are calculated
    element by element.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里（如*图 1.2*所示），一维数组`B`被转换为与二维数组`A`相同的形状，并且它们按元素进行逐一计算。
- en: 'Thus, NumPy can use broadcasting to do operations between arrays with different shapes:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，NumPy 可以使用广播机制在形状不同的数组之间进行运算：
- en: '![Figure 1.2: Sample broadcasting'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2：示例广播'
- en: '](img/fig01_2.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/fig01_2.jpg)'
- en: 'Figure 1.2: Sample broadcasting'
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1.2：示例广播
- en: Accessing Elements
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问元素
- en: 'The index of an element starts from `0` (as usual). You can access each element
    as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的索引从`0`开始（如常规）。你可以按如下方式访问每个元素：
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Use a `for` statement to access each element:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`语句来访问每个元素：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In addition to the index operations described so far, NumPy can also use arrays
    to access each element:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面描述的索引操作，NumPy 还可以使用数组来访问每个元素：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Use this notation to obtain only the elements that meet certain conditions.
    For example, the following statement extracts values that are larger than `15`
    from `X`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种符号可以获取仅满足特定条件的元素。例如，下面的语句从`X`中提取大于`15`的值：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: An inequality sign used with a NumPy array (`X > 15`, in the preceding example)
    returns a Boolean array. Here, the Boolean array is used to extract each element
    in the array, extracting elements that are `True`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy 数组时，使用不等号（例如`X > 15`，如前面的示例）会返回一个布尔数组。这里，布尔数组被用来提取数组中的每个元素，提取那些值为`True`的元素。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: It is said that dynamic languages, such as Python, are slower in terms of processing
    than static languages (compiler languages), such as C and C++. In fact, you should
    write programs in C/C++ to handle heavy processing. When performance is required
    in Python, the content of a process is implemented in C/C++. In that case, Python
    serves as a mediator for calling programs written in C/C++. In NumPy, the main
    processes are implemented by C and C++. So, you can use convenient Python syntax
    without reducing performance.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有人说，像 Python 这样的动态语言在处理速度上比 C 和 C++ 这样的静态语言（编译语言）要慢。实际上，你应该在 C/C++ 中编写程序来处理繁重的计算工作。当
    Python 需要性能时，某个过程的内容可以在 C/C++ 中实现。那时，Python 作为中介调用用 C/C++ 编写的程序。在 NumPy 中，主要的处理过程是由
    C 和 C++ 实现的。因此，你可以在不降低性能的情况下使用便捷的 Python 语法。
- en: Matplotlib
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Matplotlib
- en: In deep learning experiments, drawing graphs and visualizing data is important.
    With Matplotlib, you can draw visualize easily by drawing graphs and charts. This
    section describes how to draw graphs and display images.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在深度学习实验中，绘制图形和可视化数据非常重要。使用 Matplotlib，你可以轻松地通过绘制图形和图表来进行可视化。本节将介绍如何绘制图形并显示图像。
- en: Drawing a Simple Graph
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制简单图形
- en: 'You can use Matplotlib''s `pyplot` module to draw graphs. Here is an example
    of drawing a sine function:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Matplotlib 的`pyplot`模块来绘制图形。这里是绘制正弦函数的示例：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here, NumPy''s `arange` method is used to generate the data of [0, 0.1, 0.2,
    …, 5.8, 5.9] and name it `x`. NumPy''s sine function, `np.sin()`, is applied to
    each element of `x`, and the data rows of `x` and `y` are provided to the `plt.plot`
    method to draw a graph. Finally, a graph is displayed by `plt.show()`. When the
    preceding code is executed, the image shown in *Figure 1.3* is displayed:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，NumPy 的`arange`方法用于生成数据[0, 0.1, 0.2, …, 5.8, 5.9]并命名为`x`。NumPy 的正弦函数`np.sin()`应用于`x`的每个元素，`x`和`y`的数据行提供给`plt.plot`方法绘制图形。最后，通过`plt.show()`显示图形。当执行上述代码时，显示的图像如*图
    1.3*所示：
- en: '![Figure 1.3: Graph of a sine function'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3：正弦函数图'
- en: '](img/fig01_3.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/fig01_3.jpg)'
- en: 'Figure 1.3: Graph of a sine function'
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1.3：正弦函数图
- en: Features of pyplot
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pyplot 的特性
- en: 'Here, we will draw a cosine function (`cos`) in addition to the sine function
    (`sin`) we looked at previously. We will use some other features of `pyplot` to
    show the title, the label name of the x-axis, and so on:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们将绘制余弦函数（`cos`），除了之前查看过的正弦函数（`sin`）。我们还将使用一些`pyplot`的其他特性来显示标题、x 轴的标签名称等：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '*Figure 1.4* shows the resulting graph. You can see that the title of the graph
    and the label names of the axes are displayed:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.4*显示了生成的图形。你可以看到图形的标题和坐标轴的标签名称：'
- en: '![Figure 1.4: Graph of sine and cosine functions'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4：正弦和余弦函数图'
- en: '](img/fig01_4.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/fig01_4.jpg)'
- en: 'Figure 1.4: Graph of sine and cosine functions'
  id: totrans-155
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1.4：正弦和余弦函数图
- en: Displaying Images
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示图像
- en: 'The `imshow()` method for displaying images is also provided in `pyplot`. You
    can use `imread()` in the `matplotlib.image` module to load images, as in the
    following example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`imshow()` 方法用于显示图像，它也包含在 `pyplot` 中。你可以使用 `matplotlib.image` 模块中的 `imread()`
    加载图像，如下例所示：'
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'When you execute this code, the image shown in *Figure 1.5* is displayed:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行这段代码时，显示的图像是*图 1.5*：
- en: '![Figure 1.5: Displaying an image'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5：显示图像'
- en: '](img/fig01_5.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/fig01_5.jpg)'
- en: 'Figure 1.5: Displaying an image'
  id: totrans-162
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1.5：显示图像
- en: Here, it is assumed that the image, `lena.png`, is located in the current directory.
    You need to change the name and path of the file as required, depending on your
    environment. In the source code provided with this book, `lena.png` is located
    under the `dataset` directory as a sample image. For example, to execute the preceding
    code from the `ch01` directory in the Python interpreter, change the path of the
    image from `lena.png` to `../dataset/lena.png` for proper operation.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，假设图像 `lena.png` 位于当前目录。根据你的环境，你需要更改文件的名称和路径。在本书提供的源代码中，`lena.png` 位于 `dataset`
    目录下作为示例图像。例如，要从 `ch01` 目录中执行上述代码，需将图像路径从 `lena.png` 更改为 `../dataset/lena.png`
    以确保正常运行。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has given you some of the Python programming basics required to
    implement deep learning and neural networks. In the next chapter, we will enter
    the world of deep learning and look at some actual Python code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了实现深度学习和神经网络所需的一些 Python 编程基础。下一章，我们将进入深度学习的世界，看看一些实际的 Python 代码。
- en: 'This chapter provided only a brief overview of Python. If you want to learn
    more, the following materials may be helpful. For Python, *Bill Lubanovic: Introducing
    Python, Second Edition, O''Reilly Media, 2019* is recommended. This is a practical
    primer that elaborately explains Python programming from its basics to its applications.
    For NumPy, *Wes McKinney: Python for Data Analysis, O''Reilly Media, 2012* is
    easy to understand and well organized. In addition to these books, the *Scipy
    Lecture Notes* ([https://scipy-lectures.org](https://scipy-lectures.org)) website
    describes NumPy and Matplotlib in scientific and technological calculations in
    depth. Refer to them if you are interested.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '本章仅提供了 Python 的简要概述。如果你想了解更多，以下材料可能会有所帮助。对于 Python，推荐阅读 *Bill Lubanovic: Introducing
    Python, Second Edition, O''Reilly Media, 2019*。这是一本实用的入门书籍，详细讲解了从 Python 基础到应用的编程内容。对于
    NumPy，*Wes McKinney: Python for Data Analysis, O''Reilly Media, 2012* 语言简单易懂，结构清晰。此外，*Scipy
    Lecture Notes*（[https://scipy-lectures.org](https://scipy-lectures.org)）网站深入描述了
    NumPy 和 Matplotlib 在科学计算中的应用。如果你感兴趣，可以参考这些资料。'
- en: 'This chapter covered the following points:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下内容：
- en: Python is a programming language that is simple and easy to learn.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 是一种简单易学的编程语言。
- en: Python is an open-source piece of software that you can use as you like.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 是一个开源软件，你可以根据需要自由使用。
- en: This book uses Python 3 to implement deep learning.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书使用 Python 3 实现深度学习。
- en: NumPy and Matplotlib are used as external libraries.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 和 Matplotlib 被用作外部库。
- en: 'Python provides two execution modes: interpreter and script files.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 提供了两种执行模式：解释器模式和脚本文件模式。
- en: In Python, you can implement and import functions and classes as modules.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以将函数和类实现并作为模块导入。
- en: NumPy provides many convenient methods for handling multi-dimensional arrays.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 提供了许多处理多维数组的便捷方法。
