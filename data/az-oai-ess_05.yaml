- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Building a Contact Center Analytics Solution
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个联系中心分析解决方案
- en: In our previous chapter, we addressed the challenge of managing scattered information
    across multiple documents. We explored how Azure OpenAI simplifies the process
    of finding relevant content by setting up tools in the Azure portal and utilizing
    Python code to organize documents into a searchable format. With Azure OpenAI’s
    assistance, we efficiently tackled specific challenges, transforming chaos into
    order and streamlining content search.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的章节中，我们解决了如何管理多个文档中分散信息的问题。我们探讨了如何通过在 Azure 门户中设置工具并利用 Python 代码将文档组织成可搜索的格式，从而简化查找相关内容的过程。在
    Azure OpenAI 的帮助下，我们高效地应对了特定的挑战，将混乱转变为秩序，并简化了内容搜索。
- en: In this chapter, we’re delving into the construction of a contact center analytics
    solution. We’ll outline the challenges, technical needs, and design essentials
    for this endeavor. Our aim is to showcase the integration of Azure OpenAI and
    Azure Communication Services to build an advanced analytics platform. By mastering
    these concepts, you will learn how to enhance contact center operations and utilize
    AI and communication tech efficiently.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将深入探讨构建联系中心分析解决方案的过程。我们将概述这一过程中的挑战、技术需求和设计要点。我们的目标是展示如何将 Azure OpenAI
    和 Azure 通信服务集成，构建一个先进的分析平台。通过掌握这些概念，你将学会如何提升联系中心的运营，并高效地利用 AI 和通信技术。
- en: 'Specifically, in this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Problem statement introduction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题陈述介绍
- en: Architecture design
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构设计
- en: Building a contact center analytics solution using Azure OpenAI and Azure Communication
    Services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure OpenAI 和 Azure 通信服务构建一个联系中心分析解决方案
- en: Problem statement introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题陈述介绍
- en: Imagine you’re running a food delivery app in your city, overseeing a dedicated
    team of 10 members handling customer queries. As more people use the app, the
    number of customer chats skyrockets. Navigating through millions of these chats
    has become a major challenge for your team, making it tough to address customer
    issues during the food delivery process. The sheer volume of data is making it
    hard to pinpoint problems within the app or the delivery process overall. On top
    of that, the uncertainty about what steps to take next in app development is making
    things even more complicated. It’s becoming increasingly crucial to efficiently
    manage and understand all this chat data, spot app and process issues, and figure
    out the next steps for development to keep your food delivery platform successful.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在你的城市运营一个外卖应用，管理一个由10名成员组成的专门团队，负责处理客户查询。随着更多人使用该应用，客户聊天数量激增。管理这些成千上万的聊天已成为你团队面临的一个重大挑战，导致在外卖过程中解决客户问题变得更加困难。数据量庞大使得很难准确找出应用或整体外卖流程中的问题。更糟糕的是，关于接下来应该采取什么步骤的种种不确定性，使得事情更加复杂。有效地管理和理解这些聊天数据、发现应用及流程中的问题，并确定开发的下一步变得越来越关键，以确保你的外卖平台保持成功。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the practical exercises in this chapter, access the source
    code available in this chapter's GitHub repository at [https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter5.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter5.ipynb)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的实际练习，请访问本章 GitHub 仓库中的源代码：[https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter5.ipynb](https://github.com/PacktPublishing/Azure-OpenAI-Essentials/blob/main/Chapter5.ipynb)
- en: 'The following are the requirements that we already configured in [*Chapter
    4*](B21019_04.xhtml#_idTextAnchor059):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在[*第4章*](B21019_04.xhtml#_idTextAnchor059)中已经配置的需求：
- en: 'Python 3.9, 3.10, or 3.11: [https://www.python.org/downloads/](https://www.python.org/downloads/)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python 3.9、3.10 或 3.11: [https://www.python.org/downloads/](https://www.python.org/downloads/)'
- en: 'Azure Developer CLI: [https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure 开发者 CLI: [https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd)'
- en: 'Node.js 14+: [https://nodejs.org/en/download](https://nodejs.org/en/download)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Node.js 14+: [https://nodejs.org/en/download](https://nodejs.org/en/download)'
- en: 'Git: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Git: [https://git-scm.com/downloads](https://git-scm.com/downloads)'
- en: 'Powershell 7+ (pwsh): [https://github.com/powershell/powershell](https://github.com/powershell/powershell)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Powershell 7+ (pwsh): [https://github.com/powershell/powershell](https://github.com/powershell/powershell)'
- en: 'Azure account: If you’re new to Azure, get an Azure account for free and you’ll
    get some free Azure credits to get started'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 账户：如果你是 Azure 新手，可以免费注册 Azure 账户，并获得一些免费的 Azure 积分开始使用
- en: 'Azure subscription with access enabled for Azure OpenAI Service: You can request
    access at [https://aka.ms/oaiapply](https://aka.ms/oaiapply)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用了 Azure OpenAI 服务访问权限的 Azure 订阅：你可以在[https://aka.ms/oaiapply](https://aka.ms/oaiapply)申请访问权限
- en: 'Azure OpenAI connection and model information:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure OpenAI 连接和模型信息：
- en: OpenAI API key
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI API 密钥
- en: OpenAI embedding model deployment name
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI 嵌入模型部署名称
- en: OpenAI API version
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI API 版本
- en: 'Only the following additional technical requirement is needed beyond those
    specified in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在[*第 4 章*](B21019_04.xhtml#_idTextAnchor059)中指定的要求外，还需要满足以下额外的技术要求：
- en: Azure Communication Services
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 通信服务
- en: Just a quick reminder, make sure you’ve got an active Azure account, as we discussed
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059). If you need guidance on setting
    up your Azure account and activating a subscription, you can find all the details
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提醒，请确保你有一个有效的 Azure 账户，正如我们在[*第 4 章*](B21019_04.xhtml#_idTextAnchor059)中讨论的那样。如果你需要关于设置
    Azure 账户和激活订阅的指导，所有详细信息可以在[*第 4 章*](B21019_04.xhtml#_idTextAnchor059)中找到。
- en: Architecture design
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构设计
- en: Now that we’ve got a handle on the key architectural elements needed for crafting
    our solution, let’s look at putting these pieces together in the Azure portal.
    We covered the successful deployment of an Azure OpenAI Service model, whether
    it’s GPT-3, ChatGPT, or GPT-4, in the previous chapters. In this chapter, we’re
    shifting our focus to creating a brand-new Azure Communication Services. Now,
    let’s dive into the details and start putting this plan into action.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了构建解决方案所需的关键架构元素，接下来我们将展示如何在 Azure 门户中将这些组件组合在一起。在前几章中，我们讨论了如何成功部署 Azure
    OpenAI 服务模型，无论是 GPT-3、ChatGPT 还是 GPT-4。本章中，我们将重点介绍如何创建一个全新的 Azure 通信服务。接下来，让我们深入细节，并开始将这个计划付诸实践。
- en: First, we’re going to manually send a bunch of messages to Azure Communication
    Services. After that, we’ll grab those messages from the same place and use them
    to make a prompt. This prompt is then going to be sent over to the OpenAI service,
    and it will give us the summary we need. It’s a hands-on process to make our communication
    smoother and get important insights for our food delivery app.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将手动向 Azure 通信服务发送一堆消息。之后，我们将从相同位置获取这些消息并将它们用作提示。然后，这个提示将被发送到 OpenAI 服务，并为我们提供所需的摘要。这是一个动手过程，旨在使我们的通信更顺畅，并为我们的食品配送应用提供重要见解。
- en: Building a contact center analytics solution using Azure OpenAI and other Azure
    services
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure OpenAI 和其他 Azure 服务构建联系中心分析解决方案
- en: Just a quick reminder, make sure you’ve got an active Azure account, as we discussed
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059). If you need guidance on setting
    up your Azure account and activating a subscription, you can find all the details
    in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提醒，请确保你有一个有效的 Azure 账户，正如我们在[*第 4 章*](B21019_04.xhtml#_idTextAnchor059)中讨论的那样。如果你需要关于设置
    Azure 账户和激活订阅的指导，所有详细信息可以在[*第 4 章*](B21019_04.xhtml#_idTextAnchor059)中找到。
- en: Azure subscription prerequisites
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 订阅前提条件
- en: 'The following prerequisites were established in [*Chapter 2*](B21019_02.xhtml#_idTextAnchor023)
    and can be reused:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 2 章*](B21019_02.xhtml#_idTextAnchor023)中已建立的以下前提条件可以重用：
- en: An Azure subscription
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Azure 订阅
- en: Azure OpenAI resource
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure OpenAI 资源
- en: Deployed Azure OpenAI models
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署的 Azure OpenAI 模型
- en: Create the following tools, excluding those already established in [*Chapter
    2*](B21019_02.xhtml#_idTextAnchor023).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建以下工具，排除在[*第 2 章*](B21019_02.xhtml#_idTextAnchor023)中已建立的工具。
- en: In this section, your focus will shift to the creation of a new Azure Communication
    Services.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你的重点将转向创建一个全新的 Azure 通信服务。
- en: To set up your Azure Communication Services service, head to the search bar
    at the top navigation on the Azure home page and type in `Communication Service`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置你的 Azure 通信服务，请前往 Azure 首页顶部导航栏的搜索框，输入`Communication Service`。
- en: 'If you don’t see it, click on `Communication Service` and click on **Create**:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到它，点击`Communication Service`并点击**创建**：
- en: '![Figure 5.1: Create a resource](img/B21019_05_1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1：创建资源](img/B21019_05_1.jpg)'
- en: 'Figure 5.1: Create a resource'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1：创建资源
- en: 'Once you click on **Create**, you get the option to select from the list of
    services. Select **Communication Services** from the dropdown, as shown here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击 **创建**，你将看到可以从服务列表中选择的选项。从下拉菜单中选择 **通信服务**，如下所示：
- en: '![Figure 5.2: Selecting Communication Services](img/B21019_05_2.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2：选择通信服务](img/B21019_05_2.jpg)'
- en: 'Figure 5.2: Selecting Communication Services'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：选择通信服务
- en: 'Once you land on the **Communication Services** page, you need to click on
    the **Create** button, as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入 **通信服务** 页面，你需要点击 **创建** 按钮，如下所示：
- en: '![Figure 5.3: Create under Communication Services](img/B21019_05_3.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3：在通信服务下创建](img/B21019_05_3.jpg)'
- en: 'Figure 5.3: Create under Communication Services'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3：在通信服务下创建
- en: Once you’ve successfully created the Communication Service from the Marketplace,
    move on to the next step. On the `azure-openai-rg`) that you set up back in [*Chapter
    4*](B21019_04.xhtml#_idTextAnchor059). It’s about connecting the dots to make
    sure everything aligns smoothly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你成功创建了来自市场的通信服务，就可以进入下一步。在你之前在 [*第4章*](B21019_04.xhtml#_idTextAnchor059)中设置的
    `azure-openai-rg` 中继续操作。现在是将各个部分连接起来，确保一切顺利对接。
- en: '![Figure 5.4: Entering Communication Services data](img/B21019_05_4.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4：输入通信服务数据](img/B21019_05_4.jpg)'
- en: 'Figure 5.4: Entering Communication Services data'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4：输入通信服务数据
- en: 'Now, enter your desired resource name (for example, `azure-openai-communication-service`)
    and data location for Communication Services, and click on the **Next** button
    to go to the **Tags** tab. You can ignore the **Tags** section for now. Tags are
    name/value pairs that allow you to categorize resources and facilitate consolidated
    billing by applying the same tag to multiple search and resource groups. Proceed
    by clicking **Next** and then go to the **Review + Create** tab. Here, it will
    display the details you chose in the previous steps. Review all the information
    and click on the **Create** button:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入你想要的资源名称（例如 `azure-openai-communication-service`）和通信服务的数据位置，然后点击 **下一步**
    按钮进入 **标签** 标签页。你现在可以忽略 **标签** 部分。标签是名称/值对，它们可以帮助你对资源进行分类，并通过将相同标签应用于多个搜索和资源组来简化账单管理。继续点击
    **下一步**，然后进入 **审核 + 创建** 标签页。在这里，它会显示你在前面步骤中选择的详细信息。检查所有信息后，点击 **创建** 按钮：
- en: '![Figure 5.5: Reviewing and creating data](img/B21019_05_5.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5：审查和创建数据](img/B21019_05_5.jpg)'
- en: 'Figure 5.5: Reviewing and creating data'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5：审查和创建数据
- en: Now, we’ll move on to building a solution using the services that we configured.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始使用我们配置的服务来构建解决方案。
- en: Building a solution using Azure Communication Services and OpenAI Service
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Azure Communication Services 和 OpenAI 服务构建解决方案
- en: Now that we have set up all the essential services in our Azure portal, we can
    begin constructing our solution. To develop the code, I will be working within
    the Python Jupyter notebook, and the remaining installations are the same as those
    defined in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059)’s Solution Using Azure
    OpenAI section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 Azure 门户中设置了所有必要的服务，可以开始构建我们的解决方案了。为了开发代码，我将使用 Python Jupyter Notebook，剩余的安装与
    [*第4章*](B21019_04.xhtml#_idTextAnchor059)的“使用 Azure OpenAI 解决方案”部分定义的相同。
- en: You will need to install one extra Python library for this code other than those
    installed in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在 [*第4章*](B21019_04.xhtml#_idTextAnchor059)中安装的那些包之外，你还需要安装一个额外的 Python 库。
- en: 'Create a new Juypter notebook and install the following package:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 Jupyter notebook 并安装以下包：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our code includes the following sections in which we are going to develop our
    solution:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码包括以下几个部分，在这些部分中我们将开发我们的解决方案：
- en: Importing packages
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入包
- en: Establishing chat user identities
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立聊天用户身份
- en: Configuring the chat client
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置聊天客户端
- en: Generating a conversation transcript
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成对话记录
- en: Summarizing the chat thread
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总结聊天线程
- en: Importing packages
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入包
- en: 'We will import all the packages that are required to build the model:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入所有构建模型所需的包：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can see a variety of libraries in the preceding code. Let’s delve into
    each of these libraries in the table here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前面的代码中看到各种库。让我们在下面的表格中详细介绍每个库：
- en: '| **Imported Packages** | **Description** |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **导入的包** | **描述** |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `from azure.communication.chat import ChatClient, CommunicationTokenCredential,`
    `ChatMessageType, ChatParticipant` | Enables real-time chat with Azure Communication
    Services |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `from azure.communication.chat import ChatClient, CommunicationTokenCredential,`
    `ChatMessageType, ChatParticipant` | 使 Azure Communication Services 实现实时聊天 |'
- en: '| `from azure.communication.identity import` `CommunicationIdentityClient,
    CommunicationUserIdentifier` | Manages user identities and authentication tokens
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `from azure.communication.identity import` `CommunicationIdentityClient,
    CommunicationUserIdentifier` | 管理用户身份和身份验证令牌 |'
- en: '| `from datetime import` `datetime, timedelta` | Handles date and time operations
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `from datetime import` `datetime, timedelta` | 处理日期和时间操作 |'
- en: '| `import os` | Interacts with the operating system and manages environment
    variables |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `import os` | 与操作系统交互并管理环境变量 |'
- en: '| `import requests` | Makes HTTP requests, commonly used for API interaction
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `import requests` | 发送 HTTP 请求，通常用于 API 交互 |'
- en: '| `import json` | Encodes and decodes JSON data |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `import json` | 编码和解码 JSON 数据 |'
- en: '| `import openai` | Accesses the OpenAI API for advanced language processing
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `import openai` | 访问 OpenAI API 进行高级语言处理 |'
- en: '| `dotenv` | Loads environment variables from a `.``env` file |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `dotenv` | 从 `.env` 文件加载环境变量 |'
- en: 'Table 5.1: Explanation of imported packages'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5.1：导入包的解释
- en: 'Now, let’s initialize all the necessary constants using the keys provided in
    the `.env` file. Add `COMMUNICATION_CONNECTION_STRING` and `COMMUNICATION_ENDPOINT`
    to your already existing `.``env` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `.env` 文件中提供的密钥初始化所有必要的常量。将 `COMMUNICATION_CONNECTION_STRING` 和 `COMMUNICATION_ENDPOINT`
    添加到你已有的 `.env` 文件中：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add these to the `.env` file that was created in [*Chapter 4*](B21019_04.xhtml#_idTextAnchor059)
    with the connection string and endpoints:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些添加到 [*第 4 章*](B21019_04.xhtml#_idTextAnchor059) 中创建的 `.env` 文件，该文件包含连接字符串和端点：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Follow these steps to set up the Communication Service endpoint:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置通信服务端点：
- en: Update the `COMMUNICATION_CONNECTION_STRING` value with the connection string
    value found in your Azure Communication Service under the **Keys** section.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `COMMUNICATION_CONNECTION_STRING` 值，使用你在 Azure Communication Service 中 **Keys**
    部分找到的连接字符串值。
- en: Similarly, modify the values of `COMMUNICATION_ENDPOINT` with the value found
    in your Azure Communication Service under the **Keys** section.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，使用你在 Azure Communication Service 中 **Keys** 部分找到的值修改 `COMMUNICATION_ENDPOINT`
    的值。
- en: By completing these configurations, you’ll have the necessary connection settings
    for your resources.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些配置后，你将拥有所需的连接设置来访问你的资源。
- en: 'We get the following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Establishing chat user identities
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 建立聊天用户身份
- en: 'This code establishes user identities (`identity1` and `identity2`) in Azure
    Communication Services and retrieves individual access tokens (`token_result1`
    and `token_result2`):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在 Azure Communication Services 中建立了用户身份 (`identity1` 和 `identity2`)，并检索了各自的访问令牌
    (`token_result1` 和 `token_result2`)：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These tokens are designed for authentication purposes when engaging with the
    chat functionality of Azure Communication Services. Each user identity is linked
    to a distinct token, granting access specifically to the defined scope, which,
    in this instance, is `chat`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些令牌用于身份验证，在与 Azure Communication Services 的聊天功能交互时，每个用户身份都与一个独特的令牌关联，该令牌特定地授予对定义范围的访问权限，在这个实例中是
    `chat`。
- en: Configuring the chat client
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置聊天客户端
- en: 'In this code, we establish a chat thread between `Agent` and `Customer` using
    Azure Communication Services:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们使用 Azure Communication Services 在 `Agent` 和 `Customer` 之间建立一个聊天线程：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The chat clients are initialized for each user, and a chat thread is created
    with specified participants and a topic, allowing for subsequent interaction and
    messaging within the created thread.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都会初始化聊天客户端，并创建一个具有指定参与者和主题的聊天线程，从而允许在创建的线程内进行后续的互动和消息传递。
- en: 'We will now populate the chat thread with a sample conversation between the
    agent and customer:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在聊天线程中填充一个代理和客户之间的示例对话：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, this code uses a `for` loop to simulate a back-and-forth conversation
    between an agent and a customer by sending messages to a chat thread:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这段代码使用 `for` 循环模拟代理和客户之间的对话，通过向聊天线程发送消息来进行双向对话：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The messages address troubleshooting steps for a dishwasher issue, and the conversation
    flow alternates between the agent and customer perspectives.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 消息涉及洗碗机问题的故障排除步骤，且对话流程在代理和客户视角之间交替进行。
- en: Generating a conversation transcript
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成对话记录
- en: 'This code retrieves text messages from a chat thread that was sent within the
    last day, filters out non-text messages, and constructs a conversation prompt
    by concatenating sender names and message content. The prompt is then printed,
    providing a summary of the recent conversation in reverse chronological order:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码从过去一天内发送的聊天记录中获取文本消息，过滤掉非文本消息，并通过连接发件人姓名和消息内容构建对话提示。然后打印出该提示，提供按时间倒序排列的近期对话总结：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We get the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '![Figure 5.6: An overview of the conversation output](img/B21019_05_6.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6：对话输出概览](img/B21019_05_6.jpg)'
- en: 'Figure 5.6: An overview of the conversation output'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6：对话输出概览
- en: Summarizing the chat thread
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结聊天记录
- en: 'This code utilizes OpenAI’s GPT model to generate an extended response based
    on a provided prompt, which includes an introductory text and a conversation prompt.
    The generated summarized text is then processed and printed along with the original
    prompt:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码利用 OpenAI 的 GPT 模型根据提供的提示生成扩展响应，提示包括介绍性文本和对话提示。然后生成的总结文本会被处理并与原始提示一起打印出来：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We get the following output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '![Figure 5.7: An overview of the summary output](img/B21019_05_7.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7：总结输出概览](img/B21019_05_7.jpg)'
- en: 'Figure 5.7: An overview of the summary output'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7：总结输出概览
- en: Thus, we have created an analytics solution for contact centers using an integration
    of OpenAI and Azure.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们创建了一个结合 OpenAI 和 Azure 的分析解决方案，适用于联络中心。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we delved into the intricacies of implementing and leveraging
    Azure Communication Services. Our practical exploration included the creation
    of a simulated chat dialogue involving an agent and a customer. Employing ChatGPT,
    we conducted an insightful analysis of the comprehensive conversation summary.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了实现和利用 Azure 通信服务的复杂性。我们的实际探索包括创建一个模拟的聊天对话，涉及一名代理和一名客户。通过运用 ChatGPT，我们对全面的对话总结进行了深入分析。
- en: While our example focused on text-based chat interactions, it’s important to
    note that the versatility of Azure Communication Services extends beyond mere
    text. It seamlessly accommodates audio, video, or a blend of multiple formats
    for a more dynamic user experience. This holistic approach enables us to gain
    valuable insights into customer concerns, allowing the derived statistics to serve
    as invaluable inputs for shaping the future product roadmap. By exploring various
    conversation formats, we can uncover potential pain points and identify key areas
    for improvement, ultimately contributing to the enhancement of our products and
    services.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的示例专注于基于文本的聊天交互，但需要注意的是，Azure 通信服务的多功能性远不止于文本。它能够无缝地支持音频、视频或多种格式的混合使用，以提供更具动态的用户体验。这种整体方法使我们能够深入了解客户关切，让得出的统计数据成为塑造未来产品路线图的重要输入。通过探索各种对话格式，我们可以发现潜在的痛点并识别改进的关键领域，从而最终促进我们产品和服务的提升。
- en: In the next chapter, we are going to delve into the world of interacting with
    SQL databases using prompts.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨使用提示与 SQL 数据库交互的世界。
