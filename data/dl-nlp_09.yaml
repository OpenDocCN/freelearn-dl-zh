- en: '*Chapter 9*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*'
- en: A Practical NLP Project Workflow in an Organization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织中的实用NLP项目工作流
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你将能够：
- en: Identify the requirements of a natural language processing project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定自然语言处理项目的需求
- en: Understand how different teams in an organization might be involved
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解组织中不同团队的参与方式
- en: Use Google Colab notebooks to leverage a GPU to train Deep Learning models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Colab笔记本，通过GPU训练深度学习模型
- en: Deploy a model on AWS to be used as Software as a Service (SaaS)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS上部署一个模型，作为软件即服务（SaaS）使用
- en: Get acquainted with a simple tech stack for deployment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉一个简单的技术栈用于部署
- en: In this chapter, we will be looking at a real-time NLP project and its flow
    in an organization,right till the final stage through the entire chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将关注一个实时NLP项目及其在组织中的流程，一直到最终阶段，贯穿整章。
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: Up to this point in the book, we have studied several deep learning techniques
    that can be applied to solve specific problems in the NLP domain. Having knowledge
    of these techniques has empowered us to build good models and deliver high-quality
    performance. However, when it comes to delivering a working machine learning product
    in an organization, several other aspects need to be considered.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了几种深度学习技术，这些技术可以应用于解决NLP领域的特定问题。掌握这些技术使我们能够构建出优秀的模型并提供高质量的性能。然而，当涉及到在组织中交付一个可用的机器学习产品时，还有许多其他方面需要考虑。
- en: In this chapter, we will go through a practical project workflow when delivering
    a working deep learning system in an organization. Specifically, you will be introduced
    to the possible roles of various teams within your organization, building a deep
    learning pipeline and, finally, delivering your product in the form of SaaS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍在组织中交付一个可工作的深度学习系统时的实际项目工作流。具体来说，你将了解组织内不同团队的角色，构建深度学习管道，并最终将产品交付为SaaS形式。
- en: General Workflow for the Development of a Machine Learning Product
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器学习产品开发的一般工作流
- en: 'Today, there are several ways of working with data science in an organization.
    Most organizations have a workflow that is specific to their environment. Some
    example workflows are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，在组织中有多种与数据科学合作的方式。大多数组织都有一个特定于其环境的工作流。以下是一些示例工作流：
- en: '![Figure 9.1: General workflow for the development of a machine learning product](img/C13783_9_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1：机器学习产品开发的一般工作流](img/C13783_9_01.jpg)'
- en: 'Figure 9.1: General workflow for the development of a machine learning product'
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.1：机器学习产品开发的一般工作流
- en: 'The Presentation Workflow:'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 展示工作流：
- en: '![](img/C13783_9_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C13783_9_02.jpg)'
- en: 'Figure 9.2: General presentation workflow'
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.2：一般的展示工作流
- en: 'The presentation workflow can be elaborated as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 展示工作流可以如下详细说明：
- en: The data science team receives a request to solve a problem using machine learning.
    The requester could be some other team within the organization or some other company
    that has hired you as consultants.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据科学团队收到使用机器学习解决问题的请求。请求者可以是组织内的其他团队，或者是雇佣你作为顾问的其他公司。
- en: You obtain the relevant data and apply specific machine learning techniques.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取相关数据并应用特定的机器学习技术。
- en: You showcase the results and insights in the form of a report/presentation to
    the stakeholders. This could also be a potential way to approach the *Proof of
    Concept* (*PoC*) phase of a project.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你以报告/演示的形式向相关方展示结果和见解。这也可能是项目*概念验证*（*PoC*）阶段的一种潜在方式。
- en: 'The Research Workflow:'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 研究工作流：
- en: '![](img/C13783_9_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C13783_9_03.jpg)'
- en: 'Figure 9.3: Research workflow'
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.3：研究工作流
- en: 'The main focus of this approach is to conduct research to solve a particular
    problem that caters to a use case. The solution can be leveraged both by the organization
    as well as the community in general. Other factors that distinguish this workflow
    from the presentation workflow are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的主要重点是进行研究以解决一个特定的问题，且该问题迎合了一个实际应用场景。该解决方案既可以被组织使用，也可以为整个社区所利用。其他将这种工作流与展示工作流区分开来的因素如下：
- en: The timelines for such projects are typically longer than those imposed on presentation
    workflows.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这类项目的时间线通常比呈现工作流的时间线要长。
- en: The deliverable is in the form of research papers and/or toolboxes.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可交付成果是以研究论文和/或工具包的形式呈现的。
- en: 'The workflow can be broken down as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流可以分解如下：
- en: Your organization has a research wing that wishes to enhance the existing machine
    learning state in the community, while also allowing your company to leverage
    the results.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的组织有一个研究部门，希望增强社区内现有的机器学习状态，同时允许你的公司利用结果。
- en: Your team goes through the existing research that caters to the problem you
    are being asked to solve. This involves reading research papers in detail and
    implementing them to establish the baseline performance on some datasets suggested
    in the research papers.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的团队研究现有研究，以解决提出的问题。这包括详细阅读研究论文，并实施它们以在研究论文中建议的某些数据集上建立基准性能。
- en: You then either try to tailor the existing research to solve your problem or
    come up with novel ways to solve it yourself.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你要么尝试调整现有研究以解决你的问题，要么自己提出新的解决方案。
- en: The end product could be research papers and/or toolboxes.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终产品可以是研究论文和/或工具箱。
- en: The Production-Oriented Workflow
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面向生产的工作流程
- en: '![Figure 9.4: Production-oriented workflow'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4：面向生产的工作流程'
- en: '](img/C13783_9_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C13783_9_04.jpg)'
- en: 'Figure 9.4: Production-oriented workflow'
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.4：面向生产的工作流程
- en: 'The workflow can be elaborated on as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该工作流程可以详细阐述如下：
- en: The data science team receives a request to solve a problem using machine learning.
    The requester could be some other team within the organization or another company
    that has hired you as consultants. It could also be that the data science team
    wishes to build a product that they think will bring value to the organization.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据科学团队接到了使用机器学习解决问题的请求。请求者可能是组织内的其他团队，也可能是雇佣你们作为顾问的另一家公司。也可能是数据科学团队希望构建他们认为将为组织带来价值的产品。
- en: 'You obtain the data, do the necessary research, and build the machine learning
    model. The data could be obtained either from within the organization or, if the
    problem is general enough (for example: language translation), it could also be
    an open source dataset. The model built could, hence, qualify as *PoC* to be shown
    to the stakeholders.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你获取数据，进行必要的研究，并构建机器学习模型。数据可以来自组织内部，也可以是开源数据集（例如：语言翻译）。因此构建的模型可以作为*PoC*展示给利益相关者。
- en: 'You define a Minimum Viable Product (MVP): for example, a machine learning
    model in the form of SaaS.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你定义了一个最小可行产品（MVP）：例如，以SaaS形式的机器学习模型。
- en: Once MVP is achieved, you iteratively add other aspects, such as *Data Acquisition
    Pipelines*, *Continuous Integration*, *Monitoring* and so on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦达到MVP，你可以逐步添加其他方面，例如*数据获取管道*，*持续集成*，*监控*等。
- en: You will notice that even the sample workflows share components. In this chapter,
    our focus will be on part of *The Production Workflow*. We will build a Minimum
    Viable Product for a specific problem.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，即使示例工作流程也共享组件。在本章中，我们的重点将放在*生产工作流程的一部分*。我们将为一个特定问题建立一个最小可行产品。
- en: Problem Definition
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题定义
- en: Let's say that you work for an e-commerce platform, through which your customers
    can purchase a variety of products. The merchandising department of your company
    comes up with a request to add a feature to the website – '**Addition of a slider
    that contains the 5 items that received the most positive reviews in a given calendar
    week**'.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在一个电子商务平台工作，通过这个平台，客户可以购买各种产品。你公司的商品部门提出在网站上添加一个功能的请求 – '**增加一个滑块，显示在特定日历周内获得最多正面评价的5个商品**'。
- en: This request is first made to the web development department since, ultimately,
    they are the ones responsible for displaying the website contents. The web development
    department realizes that, to get a review rating, the data science team needs
    to be involved. The data science team receives the request from the web development
    team – '**We need a web service that takes a string of text as input and returns
    a score that indicates the degree to which the text represents a positive sentiment**'.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将此请求提交给网页开发部门，因为最终他们负责显示网站内容。网页开发部门意识到，为了获得评价等级，需要数据科学团队参与。数据科学团队从网页开发团队接到请求
    – '**我们需要一个 Web 服务，接受文本字符串作为输入，并返回表示文本表达积极情绪程度的评分**'。
- en: 'The data science team then refines the requirements and agrees upon the definition
    of a Minimum Viable Product (MVP) with the web development team:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后数据科学团队细化需求，并与网页开发团队达成关于最小可行产品（MVP）定义的协议：
- en: The deliverable will be a web service deployed on an AWS EC2 instance.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交付物将是部署在AWS EC2实例上的 Web 服务。
- en: The input to the web service will be a post request containing four reviews
    (that is, a single post request to the service will contain four reviews).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web服务的输入将是一个包含四条评论的POST请求（即单个POST请求包含四条评论）。
- en: The output of the web service will be a set of four scores that correspond to
    each input text.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web服务的输出将是与每个输入文本对应的四个评分。
- en: The output score will be on a scale from 1 to 5, with 1 being the least and
    5 being the most positive review.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出评分将以1到5的尺度表示，1表示最不积极的评论，5表示最积极的评论。
- en: Data Acquisition
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据采集
- en: A big contribution toward determining the performance of any machine learning
    model is the quality and quantity of the data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 任何机器学习模型性能的一个重要决定因素是数据的质量和数量。
- en: Usually, a data warehousing team/infrastructure team (DWH) is responsible for
    maintaining the data-related infrastructure at a company. The team takes care
    that data is never lost, that the underlying infrastructure is stable, and that
    data is always available for any team that might be interested in using it. The
    data science team, being one of the consumers of the data, contacts the DWH team,
    which grants them access to a database that contains all the reviews for various
    items in the product catalog of the company.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，数据仓库团队/基础设施团队（DWH）负责公司内与数据相关的基础设施维护。该团队确保数据不会丢失，底层基础设施稳定，并且数据始终可供任何可能需要使用的团队使用。数据科学团队作为数据的消费者之一，会联系DWH团队，由其授予访问权限，访问包含公司产品目录中各种商品评论的数据库。
- en: Typically, there are multiple data fields/tables in the database, some of which
    may not be important for the machine learning model development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，数据库中有多个数据字段/表格，其中一些可能对机器学习模型的开发并不重要。
- en: 'A data engineer (a part of the DWH team/member of another team/member of your
    team) then connects to the database, processes the data into a tabular format,
    and generates a flat file in the **csv** format. A discussion between the data
    scientist and the data engineer at this point results in the retention of only
    three columns from the database table:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程师（DWH团队的一部分、其他团队成员或你团队的成员）随后连接到数据库，将数据处理为表格格式，并生成**csv**格式的平面文件。在这一过程中，数据科学家与数据工程师的讨论最终决定只保留数据库表中的三列：
- en: '''Rating'': A score on the scale of 1 to 5 that indicates the degree to which
    a positive sentiment is represented'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '''Rating''：1到5的评分，表示积极情感的程度'
- en: '''Review Title'': A simple title for the review'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '''Review Title''：评论的简单标题'
- en: '''Review'': Actual review text'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '''Review''：实际的评论文本'
- en: Notice that all three fields are inputs from customers (users of your e-commerce
    platform). Additionally, fields such as '*item id*' are not retained since they
    are not required to build this machine learning model for sentiment classification.
    The removal and retention of such information is also a product of discussions
    between the DS team, data engineers, and the DWH team.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这三个字段都是来自客户（即你电商平台的用户）的输入。此外，像‘*item id*’这样的字段并未保留，因为它们不需要用于构建这个情感分类的机器学习模型。这些信息的保留与删除也是数据科学团队、数据工程师和DWH团队之间讨论的结果。
- en: It might have been the case that the current data is devoid of sentiment ratings.
    In such a case, one common solution is to manually go through each review and
    assign it a sentiment score for the purpose of obtaining training data for the
    model. However, as you can imagine, doing so for millions of reviews is a daunting
    task. Thus, crowdsourcing services such as *Amazon Mechanical Turk* can be utilized
    to annotate the data and get training labels for it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的数据可能没有情感评分。在这种情况下，一种常见的解决方案是手动浏览每个评论并为其分配情感分数，以便为模型获得训练数据。然而，正如你所想的那样，为数百万条评论做这项工作是一个令人望而却步的任务。因此，可以利用众包服务，如*Amazon
    Mechanical Turk*，来标注数据并为其获取训练标签。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Amazon Mechanical Turk, refer to https://www.mturk.com/.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于Amazon Mechanical Turk的信息，请参见 https://www.mturk.com/。
- en: Google Colab
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Colab
- en: You are familiar with the intense computational requirements of deep learning
    models. On a CPU, it would take a remarkably long time to train a deep learning
    model with lots of training data. Hence, to keep training times practical, it
    is common practice to use cloud-based services that offer Graphics Processing
    Units (GPU) to speed up computations. You can expect a speedup of 10-30 times
    when compared to running the training session on a CPU. The exact amount of speedup,
    of course, depends upon the power of the GPU, the amount of data involved, and
    the processing steps.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定熟悉深度学习模型的强大计算需求。在CPU上，训练一个含有大量训练数据的深度学习模型会花费非常长的时间。因此，为了让训练时间保持在可接受范围内，通常会使用提供图形处理单元（GPU）加速计算的云服务。与在CPU上运行训练过程相比，你可以期待加速10到30倍。当然，具体的加速效果取决于GPU的性能、数据量和处理步骤。
- en: There are many vendors offering such cloud services, such as **Amazon Web Services**
    (**AWS**), **Microsoft Azure** and others. Google offers an environment/IDE called
    **Google Colab**, which offers up to 12 hours of free GPU usage per day for anyone
    looking to train deep learning models. Additionally, the code is run on a **Jupyter**-like
    notebook. In this chapter, we will leverage the power of Google Colab to develop
    our deep learning-based sentiment classifier.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多供应商提供此类云服务，如**亚马逊Web服务**（**AWS**）、**微软Azure**等。Google提供了一个名为**Google Colab**的环境/IDE，任何想训练深度学习模型的人都可以每天免费使用最多12小时的GPU。此外，代码是在类似**Jupyter**的笔记本上运行的。在本章中，我们将利用Google
    Colab的强大功能来开发我们的深度学习情感分类器。
- en: In order to familiarize yourself with Google Colab, you are urged to go through
    a tutorial for it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉Google Colab，建议你完成一个Google Colab教程。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Before proceeding further, refer to the tutorial at https://colab.research.google.com/notebooks/welcome.ipynb#recent=true
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请参考https://colab.research.google.com/notebooks/welcome.ipynb#recent=true上的教程
- en: 'The following steps should acquaint you well with Google Colab:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你更好地了解Google Colab：
- en: To open a new blank **colab** notebook, go to https://colab.research.google.com/notebooks/welcome.ipynb,
    select '**File**' from the menu, and then select the '**New Python 3 notebook**'
    option, as shown in the screenshot:![](img/C13783_9_05.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要打开一个新的空白**Colab**笔记本，请访问https://colab.research.google.com/notebooks/welcome.ipynb，选择菜单中的“**文件**”，然后选择“**新建Python
    3笔记本**”选项，如截图所示：![](img/C13783_9_05.jpg)
- en: 'Figure 9.5: A new Python notebook on Google Colab'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.5：Google Colab上的新Python笔记本
- en: 'Next, rename the notebook any name of your choice. Then, to use a **GPU** for
    training, we need to select a **GPU** as the runtime. To do so, choose the ''**Edit**''
    option from the menu and select ''**Notebook Settings**''.![Figure 9.6: Edit dropdown
    in Google Colab'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，给笔记本重命名为你选择的名称。然后，为了使用**GPU**进行训练，我们需要选择**GPU**作为运行时环境。为此，从菜单中选择“**编辑**”选项，然后选择“**笔记本设置**”。![图9.6：Google
    Colab中的编辑下拉菜单
- en: '](img/C13783_9_06.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_06.jpg)'
- en: 'Figure 9.6: Edit dropdown in Google Colab'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.6：Google Colab中的编辑下拉菜单
- en: 'A menu pops up with a ''**Hardware Accelerator**'' field, which is set to ''**None**''
    by default:![Figure 9.7: Notebook settings for Google Colab'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个菜单将弹出，其中有一个“**硬件加速器**”字段，默认设置为“**无**”：![图9.7：Google Colab的笔记本设置
- en: '](img/C13783_9_07.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_07.jpg)'
- en: 'Figure 9.7: Notebook settings for Google Colab'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.7：Google Colab的笔记本设置
- en: 'A dropdown can be used at this point to select ''**GPU**'' as the option:![Figure
    9.8: GPU hardware accelerator'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，可以使用下拉菜单选择“**GPU**”作为选项：![图9.8：GPU硬件加速器
- en: '](img/C13783_9_08.jpg)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_08.jpg)'
- en: 'Figure 9.8: GPU hardware accelerator'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.8：GPU硬件加速器
- en: 'To check whether the GPU has, in fact, been allotted to your notebook, run
    the following snippet:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检查GPU是否已经分配给你的笔记本，请运行以下代码：
- en: '[PRE0]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of running this snippet should indicate the GPU''s availability:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此代码后的输出应显示GPU的可用性：
- en: '![Figure 9.9: Screenshot for GPU device name'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.9：GPU设备名称的截图'
- en: '](img/C13783_9_09.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_09.jpg)'
- en: 'Figure 9.9: Screenshot for GPU device name'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.9：GPU设备名称的截图
- en: The output is the GPU device name.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果是GPU的设备名称。
- en: 'Next, the data needs to be made accessible within the notebook. There are a
    number of ways to do this. One way to accomplish this task is by moving the data
    to a personal Google Drive location. It''s better to move the data in a zipped
    format to avoid using up too much space on the drive. Go ahead and create a new
    folder on Google Drive and move the zipped CSV data file within the folder. Next,
    we mount the Google Drive onto the Colab notebook machine to make the drive data
    available for use within the Colab notebook:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，数据需要在笔记本中可访问。有多种方式可以做到这一点。一种方法是将数据移动到个人的 Google Drive 位置。为了避免占用过多的空间，最好将数据以压缩格式移动。首先，在
    Google Drive 上创建一个新文件夹，并将压缩的 CSV 数据文件移入该文件夹。然后，我们将 Google Drive 挂载到 Colab 笔记本机器上，使得驱动器中的数据可以在
    Colab 笔记本中使用：
- en: '[PRE1]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The snippet we just mentioned would return a weblink for authorization. Upon
    clicking on that link, a new browser tab opens up containing an authorization
    code that should be copied and pasted onto the notebook prompt:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚才提到的代码片段会返回一个用于授权的网页链接。点击该链接后，会打开一个新的浏览器标签页，显示一个授权码，复制并粘贴到笔记本提示框中：
- en: '![Figure 9.10: Screenshot for importing data from Google Drive'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.10：从 Google Drive 导入数据的截图'
- en: '](img/C13783_9_10.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_10.jpg)'
- en: 'Figure 9.10: Screenshot for importing data from Google Drive'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.10：从 Google Drive 导入数据的截图
- en: At this point, all the data within your Google Drive is available for use within
    the Colab notebook.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，Google Drive 中的所有数据都可以在 Colab 笔记本中使用了。
- en: 'Next, navigate to the folder location where the zipped data is present:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导航到包含压缩数据的文件夹位置：
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Confirm that you have navigated to the desired location by issuing a ''`pwd`''
    command in the notebook cell:![Figure 9.11: Data imported on the Colab notebook
    from Google Drive'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在笔记本单元中输入 '`pwd`' 命令来确认你已经导航到所需位置：![图 9.11：从 Google Drive 导入的数据截图
- en: '](img/C13783_9_11.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_11.jpg)'
- en: 'Figure 9.11: Data imported on the Colab notebook from Google Drive'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.11：从 Google Drive 导入的数据截图
- en: 'Next, unzip the zipped data file using the `unzip` command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用 `unzip` 命令解压缩数据文件：
- en: '[PRE3]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will result in the following output:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 9.12: Unzipping a data file on a Colab notebook'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.12：在 Colab 笔记本上解压数据文件'
- en: '](img/C13783_9_12.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_12.jpg)'
- en: 'Figure 9.12: Unzipping a data file on a Colab notebook'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.12：在 Colab 笔记本上解压数据文件
- en: The '**MACOSX**' output lines are operating system-specific and may not be the
    same for everyone. Anyhow, an unzipped data file, '**data.csv**' is now available
    for use within the Colab notebook.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''**MACOSX**'' 输出行是操作系统特定的，可能并不适用于每个人。无论如何，一个解压后的数据文件 ''**data.csv**'' 现在可以在
    Colab 笔记本中使用了。'
- en: 'Now that we have the data available and the environment to use the GPU is set,
    we can start coding up the model. We will import the required packages first:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了数据，并且设置好了可以使用 GPU 的环境，我们可以开始编写模型代码了。首先，我们将导入所需的包：
- en: '[PRE4]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we will write a preprocessing function that turns all the text to lowercase
    and removes any numbers:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个预处理函数，将所有文本转为小写并移除任何数字：
- en: '[PRE5]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that we are using pandas for reading and processing texts. Let''s run
    this function with the path of our CSV file:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们使用 pandas 来读取和处理文本。让我们运行这个函数并提供 CSV 文件的路径：
- en: '[PRE6]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now examine the contents of the dataframe:![Figure 9.13: Screenshot
    of dataframe contents'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以检查数据框的内容：![图 9.13：数据框内容截图
- en: '](img/C13783_9_13.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_13.jpg)'
- en: 'Figure 9.13: Screenshot of dataframe contents'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.13：数据框内容截图
- en: 'As expected, we have three fields. Also, we see that the ''`review`'' column
    has much more text than the ''`title`'' column. So, we choose to use only the
    ''`review`'' column for developing the model. We''ll now proceed with tokenizing
    the text:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们有三个字段。此外，我们可以看到 'review' 列的文本比 'title' 列多得多。因此，我们选择仅使用 'review' 列来开发模型。接下来，我们将进行文本分词：
- en: '[PRE7]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we have restricted the feature count to 2,000 words. We then apply the
    tokenizer with the maximum features to the 'review' column of the data. We also
    pad the sequence length to 250 words.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将特征数限制为 2,000 个词。然后，我们使用最大特征数的分词器应用于数据的 'review' 列。我们还将序列长度填充到 250 个词。
- en: 'The `X` variable looks as follows:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`X` 变量如下所示：'
- en: '![Figure 9.14: Screenshot of the X variable array'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.14：X 变量数组的截图'
- en: '](img/C13783_9_14.jpg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_14.jpg)'
- en: 'Figure 9.14: Screenshot of the X variable array'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.14：X 变量数组的截图
- en: The X variable is a `NumPy` array with 3,000,000 rows and 250 columns. This
    is because there are 3,000,000 reviews available and each review has a fixed length
    of 250 words after padding.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X 变量是一个 `NumPy` 数组，包含 3,000,000 行和 250 列。因为有 3,000,000 条评论，每条评论在填充后都有固定长度 250
    个词。
- en: 'We''ll now prepare the target variable for training. We define the problem
    as a five-class classification problem where each class corresponds to a rating.
    Since the rating (sentiment score) is on a scale of 1-5, there are 5 outputs of
    the classifier. (You could also model this as a regression problem). We use the
    `get_dummies` function from pandas to get the five outputs:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备目标变量以进行训练。我们将问题定义为一个五分类问题，每个类别对应一个评分。由于评分（情感分数）是 1 到 5 的范围，因此分类器有 5 个输出。（你也可以将其建模为回归问题）。我们使用
    pandas 的 `get_dummies` 函数来获得这五个输出：
- en: '[PRE8]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `y_train` variable is a `NumPy` array with 3,000,000 rows and 5 columns
    with values, as shown:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`y_train` 变量是一个 `NumPy` 数组，包含 3,000,000 行和 5 列，值如下所示：'
- en: '![Figure 9.15: y_train output'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.15：y_train 输出](img/C13783_9_15.jpg)'
- en: '](img/C13783_9_15.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_15.jpg)'
- en: 'Figure 9.15: y_train output'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.15：y_train 输出
- en: 'We have now preprocessed the text and prepared the target variable. Let''s
    now define the model:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经预处理了文本并准备好了目标变量。接下来，我们定义模型：
- en: '[PRE9]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We choose 128 embedding dimensions for input. We also choose an LSTM as the
    RNN unit with 100 hidden dimensions. The model summary is printed as follows:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们选择 128 的嵌入维度作为输入。我们还选择了 LSTM 作为 RNN 单元，隐藏维度为 100。模型摘要如下所示：
- en: '![Figure 9.16: Screenshot of the model summary'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.16：模型摘要的截图](img/C13783_9_15.jpg)'
- en: '](img/C13783_9_16.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_16.jpg)'
- en: 'Figure 9.16: Screenshot of the model summary'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.16：模型摘要的截图
- en: 'We can now fit the model:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以拟合模型：
- en: '[PRE10]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note that we fit 100,000 reviews instead of 3,000,000\. Running the training
    session with this configuration takes around 90 minutes. It would take much longer
    with a complete amount of data:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们训练了 100,000 条评论而不是 3,000,000 条。使用这个配置运行训练会话大约需要 90 分钟。如果使用完整的数据集，将需要更长时间：
- en: '![Figure 9.17: Screenshot of the training session'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.17：训练会话的截图](img/C13783_9_17.jpg)'
- en: '](img/C13783_9_17.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_17.jpg)'
- en: 'Figure 9.17: Screenshot of the training session'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.17：训练会话的截图
- en: The validation accuracy for this 5-class problem is 48%. This isn't a good result,
    but for the purpose of demonstration, we can go ahead and deploy it.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个五分类问题的验证准确率为 48%。这个结果不是很好，但为了演示的目的，我们可以继续进行部署。
- en: 'We now have the model that we wish to deploy. Now, we need to save the model
    file and the tokenizer that will be used in the production environment to get
    predictions on the new reviews:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在拥有了想要部署的模型。接下来，我们需要保存模型文件和分词器，以便在生产环境中用于获取新的评论预测：
- en: '[PRE11]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These files now need to be downloaded from the Google Colab environment to
    the local drive:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在这些文件需要从 Google Colab 环境下载到本地硬盘：
- en: '[PRE12]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This snippet will download the tokenizer and model files to the local computer.
    We are now ready to use the model for predictions.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个代码片段将下载分词器和模型文件到本地计算机。现在我们已经准备好使用模型进行预测。
- en: Flask
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask
- en: 'In this section, we will use the Flask microserver framework provided by Python
    to make a web application that provides predictions. We will get a RESTful API
    that we can query to get our results. Before commencing, we need to install Flask
    (use `pip`):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Python 提供的 Flask 微服务框架，制作一个提供预测的 Web 应用程序。我们将获得一个可以查询的 RESTful API
    以获取结果。在开始之前，我们需要安装 Flask（使用 `pip`）：
- en: 'Let''s begin by importing the packages:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始导入必要的包：
- en: '[PRE13]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s write a function that loads the trained model and `tokenizer`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们编写一个加载训练好的模型和 `tokenizer` 的函数：
- en: '[PRE14]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `make_predict_function()` is a hack that allows using `keras` models with
    Flask.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_predict_function()` 是一个技巧，使得 Flask 可以使用 `keras` 模型。'
- en: 'Now, we''ll define preprocessing functions similar to the training code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义类似于训练代码的预处理函数：
- en: '[PRE15]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Similar to the training phase, the reviews are first lowercased. Then, numbers
    are replaced with blanks. Next, the loaded tokenizer is applied and the sequences
    are padded to have a fixed length of 250 to make them consistent with the training
    input.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与训练阶段类似，评论首先会被转换为小写。然后，数字会被空白替换。接着，加载的分词器将被应用，并且序列会被填充为固定长度 250，以便与训练输入一致。
- en: 'We will now define a Flask app instance:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在定义一个 Flask 应用实例：
- en: '[PRE16]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We now define an endpoint that displays a fixed message:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们定义一个端点，显示固定的消息：
- en: '[PRE17]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It is good practice to have a root endpoint to check whether the web service
    is up.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 良好的实践是在根端点处检查 Web 服务是否可用。
- en: 'Next, we''ll have a prediction endpoint, to which we can send our review strings.
    The kind of HTTP request we will use is a ''`POST`'' request:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置一个预测端点，向该端点发送我们的评论字符串。我们将使用的 HTTP 请求类型是‘`POST`’请求：
- en: '[PRE18]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now start the web server:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以启动网页服务器：
- en: '[PRE19]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We could save this file as `app.py` (any name could be used). Run this code
    from the terminal using `app.py`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将此文件保存为 `app.py`（可以使用任何名称）。从终端运行此代码，使用 `app.py`：
- en: '[PRE20]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'An output such as the one shown here will be produced in the terminal window:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在终端窗口中将产生如下所示的输出：
- en: '![Figure 9.18: Output for Flask'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.18：Flask 输出'
- en: '](img/C13783_9_18.jpg)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_18.jpg)'
- en: 'Figure 9.18: Output for Flask'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.18：Flask 输出
- en: 'At this point, go to your browser window and enter the `http://127.0.0.1:5000/`
    address. The ''Hello World!'' message will be displayed on the screen. The output
    produced corresponds to the root endpoint we set in the code. Now, we send our
    review texts to the ''prediction'' endpoint of our Flask web service. Let''s send
    the following four reviews:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这时，请打开浏览器并输入 `http://127.0.0.1:5000/` 地址。屏幕上将显示“Hello World!”消息。输出内容对应于我们在代码中设置的根端点。现在，我们将评论文本发送到
    Flask 网络服务的“预测”端点。让我们发送以下四条评论：
- en: '"The book was very poor"'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “这本书非常差”
- en: '"Very nice!"'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “非常好！”
- en: '"The author could have done more"'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “作者本可以做得更多”
- en: '"Amazing product!"'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “令人惊叹的产品！”
- en: 'We can send post requests to a web service using `curl` requests. For the four
    reviews mentioned, the `curl` request can be sent through the terminal, as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 `curl` 请求向 Web 服务发送 POST 请求。对于提到的四条评论，可以通过终端发送 `curl` 请求，方法如下：
- en: '[PRE21]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The list of four reviews is posted to the prediction endpoint of the web service.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 四条评论将被发布到网络服务的预测端点。
- en: 'The web service replies with a list of four ratings:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Web 服务返回四个评分的列表：
- en: '[PRE22]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So, the sentiment ratings are as follows:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，情感评分如下：
- en: '"The book was very poor"- 0'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “这本书非常差”- 0
- en: '"Very nice!"- 4'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “非常好！”- 4
- en: '"The author could have done more" - 2'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “作者本可以做得更多” - 2
- en: '"Amazing product!" - 4'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “令人惊叹的产品！” - 4
- en: The ratings actually make sense!
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 评分实际上很有意义！
- en: Deployment
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: 'Up to this point, the data science team has a Flask web service that works
    on a local system. However, the web development team is still not in a position
    to use the service, since it only runs on a local system. So, we need to host
    this web service somewhere on a cloud platform so that it is also available for
    the web development team to use. This section provides a basic pipeline for the
    deployment to work, which can be broken down into the following steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，数据科学团队已经拥有了一个在本地系统上运行的 Flask Web 服务。然而，网页开发团队仍然无法使用该服务，因为它只在本地系统上运行。因此，我们需要将这个
    Web 服务托管在某个云平台上，以便网页开发团队也能使用。本节提供了一个基本的部署管道，分为以下几个步骤：
- en: Make changes to the Flask web app so that it can be deployed.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 Flask 网页应用进行更改，以便可以部署。
- en: Use Docker to wrap the flask web application into a container.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Docker 将 Flask 网页应用打包成容器。
- en: Host the container on an Amazon Web Services (AWS) EC2 instance.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器托管在亚马逊 Web 服务（AWS）EC2 实例上。
- en: Let's look at each of these steps in detail.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看每一步。
- en: Making Changes to a Flask Web App
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 Flask 网页应用进行更改
- en: 'The flask application that was coded in the FLASK section ran on a local web
    address: `http://127.0.0.1:5000`. Since our intention is to host it on the internet,
    this address needs to be changed to: 0.0.0.0\. Additionally, since the default
    HTTP port is 80, the port also needs to be changed from 5000 to 80\. So, the address
    that needs to be queried now becomes: 0.0.0.0:80.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FLASK 部分编码的 Flask 应用程序运行在本地 Web 地址：`http://127.0.0.1:5000`。由于我们的目标是将其托管在互联网上，因此该地址需要更改为：0.0.0.0。
    此外，由于默认的 HTTP 端口是 80，因此端口也需要从 5000 更改为 80。所以，现在需要查询的地址变成了：0.0.0.0:80。
- en: 'In the code snippet, this change can be accomplished simply by modifying the
    call to the `app.run` function, as shown here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码片段中，可以通过修改对 `app.run` 函数的调用来简单地完成此更改，如下所示：
- en: '[PRE23]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice that the '**debug**' flag has also vanished (the default value of '**debug**'
    flag is '*False*'). This is because the application is past the debugging phase
    and is ready to be deployed to production.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，‘**debug**’标志也消失了（‘**debug**’标志的默认值是‘*False*’）。这是因为应用程序已经过了调试阶段，准备部署到生产环境。
- en: Note
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The rest of the code remains exactly the same as before.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码与之前完全相同。
- en: 'The application should be run again using the same command as earlier, and
    it should be verified that the same responses as earlier are received. The address
    in the curl request needs to be changed to reflect the updated web address:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应使用与之前相同的命令再次运行，并验证是否收到了与之前相同的响应。curl 请求中的地址需要更改为反映更新后的网址：
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If a permission error is received at this point, change the port number to 5000
    in the `app.run()` command in app.py. (Port 80 is a privileged port, so change
    it to a port that isn't, for example, 5000). However, be sure to change the port
    back to 80 once it is verified that the code works.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时收到权限错误，请在 app.py 中的 `app.run()` 命令中将端口号更改为 5000。（端口 80 是特权端口，因此将其更改为非特权端口，例如
    5000）。但是，请确保在验证代码正常工作后将端口改回 80。
- en: Use Docker to Wrap the Flask Web Application into a Container
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Docker 将 Flask Web 应用程序打包成容器
- en: The DS team intends to run the web service on a virtual machine hosted on a
    cloud platform (that is, AWS EC2). To isolate the EC2 operating system from the
    code environment, Docker offers containerization as a solution. We'll be using
    that here.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: DS 团队打算在云平台（即 AWS EC2）上托管的虚拟机上运行 Web 服务。为了将 EC2 操作系统与代码环境隔离，Docker 提供了容器化作为解决方案。我们将在这里使用它。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For a quick tutorial on the basics of Docker and how to install and use it,
    refer to https://docker-curriculum.com/.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Docker 的基础知识以及如何安装和使用它，可以参考 https://docker-curriculum.com/。
- en: 'Follow these steps to deploy the application onto the container:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将应用程序部署到容器中：
- en: 'We first need a *requirements.txt* file that lists the specific packages that
    are needed to run the Python code:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要一个 *requirements.txt* 文件，列出运行 Python 代码所需的特定包：
- en: '[PRE25]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We need a `Dockerfile` containing instructions so that the Docker daemon can
    build the docker image:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个包含指令的 `Dockerfile`，以便 Docker 守护进程可以构建 Docker 镜像：
- en: '[PRE26]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The Docker image is pulled from the Python dockerhub repository. Here, the Dockerfile
    is executed. The *app.py*, *requirements.txt*, *tokenizer pickle* file, and *trained
    model* are copied over to the Docker image using the COPY command. To change the
    working directory to the 'deploy' directory (in which the files were copied),
    the WORKDIR command is used. The `RUN` command then installs the Python packages
    mentioned in the Dockerfile. Since port 80 is required to be accessed outside
    the container, the `EXPOSE` command is used.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Docker 镜像是从 Python dockerhub 仓库拉取的。在这里，执行了 Dockerfile。*app.py*、*requirements.txt*、*tokenizer
    pickle* 文件和 *trained model* 被使用 COPY 命令复制到 Docker 镜像中。为了将工作目录更改为“deploy”目录（文件已复制到该目录中），使用
    WORKDIR 命令。接着，`RUN` 命令安装了 Dockerfile 中提到的 Python 包。由于端口 80 需要在容器外部进行访问，因此使用了 `EXPOSE`
    命令。
- en: Note
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The Docker Hub link can be found at https://hub.docker.com/_/python.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Docker Hub 链接可以在 https://hub.docker.com/_/python 找到。
- en: 'The Docker image should next be made using the `docker build` command:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，应使用 `docker build` 命令构建 Docker 镜像：
- en: '[PRE27]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Don''t forget the period in this command. The output of the command is as follows:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 别忘了命令中的句点。命令的输出如下：
- en: '![Figure 9.19: Output screenshot for docker build'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.19：docker build 的输出截图'
- en: '](img/C13783_9_19.jpg)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_19.jpg)'
- en: 'Figure 9.19: Output screenshot for docker build'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.19：docker build 的输出截图
- en: '''`app-packt`'' is the name of the Docker image generated.'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''`app-packt`'' 是生成的 Docker 镜像的名称。'
- en: 'The Docker image can now be run as a container by issuing the `docker run`
    command:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，可以通过发出 `docker run` 命令来将 Docker 镜像作为容器运行：
- en: '[PRE28]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `p flag` is used to do port mapping between port 80 of the local system
    to port 80 of the Docker container. (Change the port mapping part of the command
    to 5000:80 if 5000 is used locally. Please change the mapping back to 80:80 after
    verifying that the Docker container works, as explained.)
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`p 标志` 用于在本地系统的端口 80 和 Docker 容器的端口 80 之间进行端口映射。（如果本地使用 5000 端口，请将命令中的端口映射部分改为
    5000:80。验证 Docker 容器正常工作后，请按照说明将映射更改回 80:80。）'
- en: 'The following screenshot depicts the output of the `docker run` command:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图展示了 `docker run` 命令的输出：
- en: '![Figure 9.20: Output screenshot for the docker run command'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.20：docker run 命令的输出截图'
- en: '](img/C13783_9_20.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C13783_9_20.jpg)'
- en: 'Figure 9.20: Output screenshot for the docker run command'
  id: totrans-233
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.20：docker run 命令的输出截图
- en: The exact same curl request from the last section can now be issued to verify
    that the application works.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以发出与上一部分完全相同的 curl 请求来验证应用程序是否正常工作。
- en: The application code is now ready to be deployed onto AWS EC2.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序代码已经准备好部署到 AWS EC2 上。
- en: Host the Container on an Amazon Web Services (AWS) EC2 instance
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在亚马逊Web服务（AWS）EC2实例上托管容器
- en: The DS team now has a containerized application that works on their local system.
    The web development team is still not in a position to use it, as it is still
    local. As per the initial MVP definition, the DS team now goes on to use the AWS
    EC2 instance to deploy the application. The deployment will ensure that the web
    service is available for the web development team to use.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: DS团队现在拥有一个在本地系统上运行的容器化应用程序。由于该应用程序仍在本地，Web开发团队仍然无法使用它。根据最初的MVP定义，DS团队现在开始使用AWS
    EC2实例来部署该应用程序。部署将确保Web服务可供Web开发团队使用。
- en: As a prerequisite, you need to have an AWS account to use the EC2 instance.
    For the purpose of demonstration, we will be using a '*t2.small*' EC2 instance
    type. This instance costs around 2 cents (USD) per hour at the time of writing.
    Note that this instance is not free-tier eligible. By default, this instance will
    not be available in your AWS region and a request needs to be raised for this
    instance to be added to your account. This usually takes a couple of hours. Alternatively,
    check the instance limits for your AWS region and select another instance with
    a minimum of 2GB RAM. A simple '*t2.micro*' instance will not work for us here,
    as it has only 1GB of memory.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前提条件，您需要有一个AWS账户才能使用EC2实例。为了演示，我们将使用一个'*t2.small*' EC2实例类型。此实例在撰写时每小时约收费2美分（USD）。请注意，此实例不属于免费套餐。默认情况下，您的AWS区域内将无法使用此实例，您需要提出请求将此实例添加到您的账户中。通常需要几个小时。或者，检查您AWS区域的实例限制，并选择另一个至少有2GB内存的实例。一个简单的'*t2.micro*'实例无法满足我们的需求，因为它只有1GB内存。
- en: Note
  id: totrans-239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The link for the AWS account can be found at https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: AWS账户的链接可以在https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/找到。
- en: To add instances and check instance limits, refer to https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加实例并检查实例限制，请参阅https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html。
- en: 'Let''s start with the deployment process:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从部署过程开始：
- en: 'After logging into the AWS Management Console, search for ''**ec2**'' in the
    search bar. This takes you to the EC2 dashboard, as shown here:![Figure 9.21:
    AWS services in the AWS Management Console'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到AWS管理控制台后，在搜索栏中搜索'**ec2**'。这将带您进入EC2仪表板，如下图所示：![图9.21：AWS管理控制台中的AWS服务
- en: '](img/C13783_9_21.jpg)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_21.jpg)'
- en: 'Figure 9.21: AWS services in the AWS Management Console'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.21：AWS管理控制台中的AWS服务
- en: 'A key pair needs to be created to access AWS resources. To create one, look
    for the following pane and select ''**Key Pairs**''. This allows you to create
    a new key pair:![Figure 9.22: Network and security on the AWS console'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要创建一个密钥对来访问AWS资源。要创建一个，请查找以下面板并选择'**密钥对**'。这将允许您创建一个新的密钥对：![图9.22：AWS控制台上的网络与安全
- en: '](img/C13783_9_22.jpg)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_22.jpg)'
- en: 'Figure 9.22: Network and security on the AWS console'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.22：AWS控制台上的网络与安全
- en: 'A ''`.pem`'' file is downloaded, which is the key file. Be sure to save the
    `pem` file safely and change its mode using the following command:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载了一个'`.pem`'文件，这是密钥文件。请确保安全保存`pem`文件，并使用以下命令更改其模式：
- en: '[PRE29]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is required to change file permissions to private.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要更改文件权限为私有。
- en: 'To configure the instance, select ''**Launch Instance**'' on the EC2 dashboard:![Figure
    9.23: Resources on the AWS console'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置实例，请在EC2仪表板上选择'**启动实例**'：![图9.23：AWS控制台上的资源
- en: '](img/C13783_9_23.jpg)'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_23.jpg)'
- en: 'Figure 9.23: Resources on the AWS console'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.23：AWS控制台上的资源
- en: 'Next, select the **Amazon Machine Instance** (**AMI**), which selects the OS
    that EC2 instance runs. We will work with ''**Amazon Linux 2 AMI**'':'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**亚马逊机器实例**（**AMI**），它会选择EC2实例运行的操作系统。我们将使用'**Amazon Linux 2 AMI**'：
- en: Note
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Amazon Linux 2 AMI, refer to https://aws.amazon.com/amazon-linux-2/.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解有关Amazon Linux 2 AMI的更多信息，请参阅https://aws.amazon.com/amazon-linux-2/。
- en: '![Figure 9.24: Amazon Machine Instance (AMI)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.24：亚马逊机器实例（AMI）'
- en: '](img/C13783_9_24.jpg)'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_24.jpg)'
- en: 'Figure 9.24: Amazon Machine Instance (AMI)'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.24：亚马逊机器实例（AMI）
- en: 'Now, we select the hardware part of EC2, which is the ''**t2.small**'' instance:![Figure
    9.25: Choosing the instance type on AMI'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们选择EC2的硬件部分，即'**t2.small**'实例：![图9.25：选择AMI上的实例类型
- en: '](img/C13783_9_25.jpg)'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_25.jpg)'
- en: 'Figure 9.25: Choosing the instance type on AMI'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.25：选择AMI上的实例类型
- en: 'Clicking on ''**Review and Launch**'' gets you to step 7 – the **Review Instance
    Launch** screen:![Figure 9.26: The review instance launch screen'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 '**Review and Launch**' 将进入第 7 步——**审查实例启动**屏幕：![图 9.26：审查实例启动屏幕
- en: '](img/C13783_9_26.jpg)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_26.jpg)'
- en: 'Figure 9.26: The review instance launch screen'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.26：审查实例启动屏幕
- en: 'Now, to make the web service reachable, the security group needs to be modified.
    To this end, a rule needs to be created. At the end, you should see the following
    screen:![Figure 9.27: Configure the security group'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了使 Web 服务可达，需要修改安全组。为此，需要创建一条规则。最后，你应该看到以下屏幕：![图 9.27：配置安全组
- en: '](img/C13783_9_27.jpg)'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_27.jpg)'
- en: 'Figure 9.27: Configure the security group'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.27：配置安全组
- en: Note
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: More can be learned about security groups and configuration using the AWS documentation
    at https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过 AWS 文档进一步了解安全组和配置：https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html。
- en: 'Next, clicking on the ''Launch'' icon will trigger a redirection to a **Launch**
    screen:![Figure 9.28: Launch status on the AWS instance'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 'Launch' 图标将触发重定向到 **Launch** 屏幕：![图 9.28：AWS 实例上的启动状态
- en: '](img/C13783_9_28.jpg)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_28.jpg)'
- en: 'Figure 9.28: Launch status on the AWS instance'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.28：AWS 实例上的启动状态
- en: The '**View Instance**' button is to be used to navigate to a screen that displays
    the EC2 instance being launched, which is ready to be used when the instance state
    turns to 'running.'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''**View Instance**'' 按钮用于导航到显示正在启动的 EC2 实例的屏幕，当实例状态变为“running”时，表示实例已准备好使用。'
- en: 'Next, access the EC2 using the following command from the local system terminal
    with the ''`public-dns-name`'' field replaced with your EC2 instance name (of
    the form: ec2–x–x–x–x.compute-1.amazonaws.com) and the path of the key pair `pem`
    file that was saved earlier:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过以下命令从本地系统终端访问 EC2，替换 '`public-dns-name`' 字段为你的 EC2 实例名称（格式为：ec2–x–x–x–x.compute-1.amazonaws.com）和之前保存的密钥对
    `pem` 文件的路径：
- en: '[PRE30]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This command will take you to the prompt of the EC2 instance where Docker needs
    to be installed first. Docker installation is required for the workflow since
    the Docker image will be built within the EC2 instance.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将带你进入 EC2 实例的提示符，首先需要在 EC2 实例中安装 Docker。由于 Docker 镜像将在 EC2 实例中构建，因此安装 Docker
    是工作流所必需的。
- en: 'For Amazon Linux 2 AMI, the following commands should be used to accomplish
    this:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 Amazon Linux 2 AMI，应使用以下命令来完成此操作：
- en: '[PRE31]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For an explanation of the commands, check out the documentation at https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关命令的解释，请查阅文档 https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html。
- en: The '`exit`' command should be used to log out of the instance. Next, log back
    in using the `ssh` command that was used earlier. Verify that Docker is working
    by issuing the '`docker info`' command. Open another local terminal window for
    the next steps.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该使用 '`exit`' 命令退出实例。接下来，使用之前使用的 `ssh` 命令重新登录。通过执行 '`docker info`' 命令验证 Docker
    是否正常工作。为接下来的步骤打开另一个本地终端窗口。
- en: 'Now, copy the files that are needed to build the Docker image within the EC2
    instance. Issue the command from the local terminal (not from within EC2!):'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将构建 Docker 镜像所需的文件复制到 EC2 实例内。从本地终端（不是 EC2 内部！）发出以下命令：
- en: '[PRE32]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following files should be copied to build the Docker image, as was done
    earlier: *requirements.txt*, *app.py*, *trained_model.h5*, *trained_tokenizer.pkl*,
    and *Dockerfile*.'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应复制以下文件以构建 Docker 镜像，如之前所做：*requirements.txt*，*app.py*，*trained_model.h5*，*trained_tokenizer.pkl*
    和 *Dockerfile*。
- en: Next, log in to the EC2 instance, issue the '`ls`' command to see whether the
    copied files exist, and build and run the Docker image using the same commands
    that were used in the local system (ensure that you use port 80 at all locations
    in the code/commands).
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，登录到 EC2 实例，执行 '`ls`' 命令查看复制的文件是否存在，然后使用与本地系统相同的命令构建并运行 Docker 镜像（确保在代码/命令中的所有位置使用端口
    80）。
- en: 'Enter the home endpoint from the local browser using the public DNS name to
    see the ''**Hello World!**'' message:![Figure 9.29: Screenshot for the home endpoint'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地浏览器通过公共 DNS 名称进入首页端点，查看 '**Hello World!**' 消息：![图 9.29：首页端点截图
- en: '](img/C13783_9_29.jpg)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C13783_9_29.jpg)'
- en: 'Figure 9.29: Screenshot for the home endpoint'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.29：首页端点截图
- en: 'Now you can send a curl request to the web service from a local terminal with
    the test sample data after replacing the `public-dns-name` with yours:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以从本地终端发送 curl 请求到 Web 服务，测试示例数据，并将 `public-dns-name` 替换为你的值：
- en: '[PRE33]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This should return the same review ratings as the ones obtained locally.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该返回与本地获得的相同的评论评分。
- en: This concludes the simple deployment process.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了简单的部署过程。
- en: The DS team now shares this `curl` request with the web development team, which
    can consume the web service with their test samples.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: DS 团队现在将此 `curl` 请求与 Web 开发团队共享，后者可以使用他们的测试样本来调用该 Web 服务。
- en: Note
  id: totrans-296
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: When the web service is not required, stop or terminate the EC2 instance to
    avoid getting charged.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 当不再需要 Web 服务时，停止或终止 EC2 实例，以避免产生费用。
- en: '![Figure 9.30: Stopping the AWS EC2 instance'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.30：停止 AWS EC2 实例'
- en: '](img/C13783_9_30.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C13783_9_30.jpg)'
- en: 'Figure 9.30: Stopping the AWS EC2 instance'
  id: totrans-300
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9.30：停止 AWS EC2 实例
- en: From an MVP point of view, the deliverables are now complete!
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 从 MVP 的角度来看，交付物现在已经完成！
- en: Improvements
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进
- en: The workflow described in this chapter is only meant to introduce a basic workflow
    using certain tools (Flask, Colab, Docker, and AWS EC2) and inspire an example
    plan for a deep learning project in an organization. This is, however, only an
    MVP, which could be improved in many ways for future iterations.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述的工作流程仅仅是为了介绍一个使用特定工具（Flask、Colab、Docker 和 AWS EC2）的基本工作流程，并为组织中的深度学习项目提供一个示范计划。然而，这仅仅是一个
    MVP（最小可行产品），未来的迭代可以在许多方面进行改进。
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw the journey of a deep learning project as it flows through
    an organization. We also learned about Google Colab notebooks to leverage GPUs
    for faster training. Additionally, we developed a Flask-based web service using
    Docker and deployed it to a cloud environment, hence enabling the stakeholders
    to obtain predictions for a given input.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了深度学习项目在组织中的发展历程。我们还学习了如何使用 Google Colab 笔记本来利用 GPU 加速训练。此外，我们开发了一个基于
    Flask 的 Web 服务，使用 Docker 部署到云环境，从而使利益相关者能够为给定输入获取预测结果。
- en: This chapter concludes our efforts toward learning how to leverage deep learning
    techniques to solve problems in the domain of natural language processing. Almost
    every aspect discussed in this chapter and the previous ones is a topic of research
    and is being improved upon continuously. The only way to stay informed is to keep
    learning about the new and exciting ways to tackle problems. Some common ways
    to do so are by following discussions on social media, following the work of top
    researchers/deep learning practitioners, and being on the constant lookout for
    organizations that are doing cutting-edge work when it comes to this domain.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了我们如何利用深度学习技术解决自然语言处理领域问题的学习过程。本章以及前几章讨论的几乎每个方面都是研究课题，并且正在不断改进。保持信息更新的唯一方法是不断学习新的、令人兴奋的解决问题的方式。一些常见的做法是通过社交媒体跟踪讨论，关注顶尖研究人员/深度学习从业者的工作，并时刻留意那些在该领域进行前沿研究的组织。
