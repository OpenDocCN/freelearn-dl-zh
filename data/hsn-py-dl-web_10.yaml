- en: 'DL on AWS Using Python: Object Detection and Home Automation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python在AWS上进行DL：对象检测和家庭自动化
- en: We familiarized ourselves with a few deep-learning-based offerings from Google
    Cloud Platform and learned how they can be used in [Chapter 6](093890b6-051d-49f9-9330-bdd58b92a762.xhtml),
    *Deep Learning on Google Cloud Platform Using Python*. Now that we have a fairly
    good overview of cloud computing, in this chapter, we will introduce another cloud
    computing platform, **Amazon Web Services** (**AWS**), which also offers some
    high-performing and highly reliable deep-learning-based solutions to make life
    easier. In this chapter, we are going to introduce two of them in the form of
    APIs and learn how they can be consumed from a Python program.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们熟悉了来自Google Cloud Platform的几个基于深度学习的产品，并学习了它们如何在[第6章](093890b6-051d-49f9-9330-bdd58b92a762.xhtml)中使用Python在Google
    Cloud Platform上进行深度学习。现在，我们已经对云计算有了相当好的概述，在本章中，我们将介绍另一个云计算平台，**Amazon Web Services**（**AWS**），它也提供一些高性能和高可靠性的基于深度学习的解决方案，以便更轻松地解决问题。在本章中，我们将以API的形式介绍其中的两个，并学习如何从Python程序中使用它们。
- en: We will start by setting up our AWS account and configuring boto3 in Python.
    We will then learn how to use the Rekognition API and the Alexa API in Python.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从设置AWS账户并在Python中配置boto3开始。然后，我们将学习如何在Python中使用Rekognition API和Alexa API。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up your AWS account
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的AWS账户
- en: AWS offerings in brief
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS的简介
- en: Configuring boto3 in Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中配置boto3
- en: Using the Rekognition API in Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python中的Rekognition API
- en: Using the Alexa API in Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python中的Alexa API
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can access the code for this chapter at [https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter7](https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter7).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter7](https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter7)获取本章的代码。
- en: 'To run the code in this chapter, you''ll need the following software:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本章的代码，您需要以下软件：
- en: Python 3.6+
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6+
- en: The Python PIL library
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python PIL库
- en: All other installations will be described during the course of the chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其他安装步骤将在本章中介绍。
- en: Getting started in AWS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS开始使用
- en: 'Before using any AWS services or APIs, you will have to create your AWS account.
    In this section, we will quickly go through the steps to create an account in
    AWS:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用任何AWS服务或API之前，您必须创建您的AWS账户。在本节中，我们将快速浏览创建AWS账户的步骤：
- en: 'The first step is to go to [https://aws.amazon.com/](https://aws.amazon.com/).
    You should land on a page that resembles the following:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开[https://aws.amazon.com/](https://aws.amazon.com/)。您应该会看到类似以下的页面：
- en: '![](img/6c5749db-c62e-4e24-b514-9ca21e1afe34.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c5749db-c62e-4e24-b514-9ca21e1afe34.png)'
- en: 'Then click on the Create an AWS Account button, which should take you to the
    following page:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击“创建AWS账户”按钮，将带您到以下页面：
- en: '![](img/69673107-63a9-4cbd-99da-9d9d8fc6876b.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69673107-63a9-4cbd-99da-9d9d8fc6876b.png)'
- en: Fill in the fields and click on Continue.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写字段并点击“继续”。
- en: The portal will ask for some more mandatory information from you. It will also
    ask you to register a payment method in order to verify your details.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 门户将向您索取更多强制信息。它还将要求您注册支付方式以验证您的详细信息。
- en: If you do not provide this, you will not be entitled to use the free tier of
    AWS facilities.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不提供这些信息，您将无权使用AWS设施的免费层。
- en: Towards the very last step of your registration, you will be asked to choose
    between three plans—Free, Developer, and Business. Choose whichever is relevant
    to your needs and proceed.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册的最后一步，您将被要求在三个计划（免费、开发者和商业）之间选择。根据您的需求选择适当的计划并继续。
- en: Like Google Cloud Platform, AWS also offers free tier access. When you sign
    up for AWS for the first time, you get to use a wide range of AWS services and
    products for free, but only up to a certain quota. You can go to [https://aws.amazon.com/free/](https://aws.amazon.com/free/)
    to learn more about this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 像Google Cloud Platform一样，AWS也提供免费层访问。首次注册AWS时，您可以免费使用多种AWS服务和产品，但只能使用一定的配额。您可以访问[https://aws.amazon.com/free/](https://aws.amazon.com/free/)了解更多信息。
- en: 'You should get a page like the following once you follow the preceding steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照上述步骤进行操作，应该会看到以下页面：
- en: '![](img/5ff22c05-d2b5-4d25-9f60-b37da3ec231c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ff22c05-d2b5-4d25-9f60-b37da3ec231c.png)'
- en: AWS has this beautiful feature of recommending solutions and services for its
    users. In order to make the most of this feature, you need to enter two things—your
    role and your subject of interest. You can see this in the preceding screenshot.
    Enter these two details and hit Submit for some targeted product recommendations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 具有一个很棒的功能，可以为用户推荐解决方案和服务。为了充分利用此功能，您需要输入两项内容——您的角色和兴趣领域。您可以在上图中看到这一点。输入这两个信息并点击“提交”以获取一些定向的产品推荐。
- en: The next step is to click on the Sign In to the Console button.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是点击“登录到控制台”按钮。
- en: 'When you are successfully logged in to your AWS console, you should see the
    following window:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录 AWS 控制台后，您应该会看到如下窗口：
- en: '![](img/fe00e39b-59ba-4a1f-a61c-0f67d4cca381.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe00e39b-59ba-4a1f-a61c-0f67d4cca381.png)'
- en: The AWS console is the place where you can find all the services and solutions
    that AWS has to offer. Feel free to explore the complete set of services by clicking
    on the Services tab. You can also search for a particular service from the search
    bar.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 控制台是您可以找到所有 AWS 提供的服务和解决方案的地方。可以随意通过点击“服务”标签浏览完整的服务集合。您也可以通过搜索框查找特定的服务。
- en: By now, our AWS accounts should be ready enough for us to get our hands dirty.
    In the next section, we'll review the offerings of AWS briefly to get a better
    sense of the platform.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，我们的 AWS 账户应该已经准备好，可以开始动手了。在接下来的章节中，我们将简要回顾 AWS 的服务，以便更好地了解该平台。
- en: A short tour of the AWS offerings
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 服务简短概览
- en: 'AWS offers its services and solutions in a variety of domains. The following
    are the different types of module that AWS offers (the ones in brackets are the
    names of the different services offered by AWS):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了多种领域的服务和解决方案。以下是 AWS 提供的不同类型的模块（括号中的为 AWS 提供的不同服务名称）：
- en: Compute (EC2, Lambda, and so on)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算（EC2、Lambda 等）
- en: Storage (S3, Storage Gateway, and so on)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储（S3、Storage Gateway 等）
- en: Machine learning (Amazon SageMaker, AWS DeepLens, and so on)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习（Amazon SageMaker、AWS DeepLens 等）
- en: Database (RDS, DynamoDB, and so on)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库（RDS、DynamoDB 等）
- en: Migration and transfer (Snowball, DataSync, and so on)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移与传输（Snowball、DataSync 等）
- en: Networking and content delivery (CloudFront, VPC, and so on)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络与内容交付（CloudFront、VPC 等）
- en: Developer tools (CodeStar, CodeCommit, and so on)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者工具（CodeStar、CodeCommit 等）
- en: Robotics (AWS RoboMaker)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人技术（AWS RoboMaker）
- en: Blockchain (Amazon Managed Blockchain)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区块链（Amazon Managed Blockchain）
- en: Analytics (Athena, CloudSearch, and so on)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析（Athena、CloudSearch 等）
- en: 'There are also many others, as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他服务，如下图所示：
- en: '![](img/e773d1e1-5b71-45f0-b465-66fc5d2902dd.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e773d1e1-5b71-45f0-b465-66fc5d2902dd.png)'
- en: The list is actually pretty extensive, but let's restrict our focus to machine
    learning (also known as deep learning) services for the time being.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表其实非常广泛，但我们暂时将焦点限制在机器学习（也称为深度学习）服务上。
- en: 'The search bar in the AWS console also lets you search for the AWS APIs that
    you may already have heard of. Let''s type `Rekognition` in there and hit *Enter*.
    You should be provided with the home page of Rekognition, as shown in the following
    screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 控制台中的搜索框还允许您搜索可能已经听说过的 AWS API。让我们在其中输入 `Rekognition` 并按 *Enter*。您应该会看到
    Rekognition 的主页，如下图所示：
- en: '![](img/4df1029c-865e-4d73-8f88-fcb487bf9849.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4df1029c-865e-4d73-8f88-fcb487bf9849.png)'
- en: We will explore the Rekognition API in more detail later in the chapter. In
    the next section, we will learn how to use boto3 (an AWS SDK that provides a programming
    interface in Python) to interact with different AWS resources.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章稍后的部分详细探讨 Rekognition API。在接下来的章节中，我们将学习如何使用 boto3（一个提供 Python 编程接口的 AWS
    SDK）与不同的 AWS 资源进行交互。
- en: Getting started with boto3
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 boto3 入门
- en: 'boto3 is the official library for communicating with AWS APIs, provided by
    the AWS team. You can find the library at [https://aws.amazon.com/sdk-for-python/](https://aws.amazon.com/sdk-for-python/),
    and it can be installed using the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: boto3 是 AWS 官方提供的库，用于与 AWS API 通信。您可以在 [https://aws.amazon.com/sdk-for-python/](https://aws.amazon.com/sdk-for-python/)
    找到该库，并可以通过以下命令安装：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After installation, you need to configure boto3 for use with your project.
    To configure boto3 ([https://bit.ly/2OvXAvb](https://bit.ly/2OvXAvb)), the first
    step is to get your AWS access keys from the **Identity and Access Management**
    (**IAM**) console. Go through the following steps to perform the configuration:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你需要配置 boto3 以供你的项目使用。配置 boto3 的第一步是从**身份和访问管理**（**IAM**）控制台获取你的 AWS 访问密钥。按照以下步骤进行配置：
- en: 'Go to your AWS IAM console at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam).
    It will look like the following:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问你的 AWS IAM 控制台：[https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam)。页面应该如下所示：
- en: '![](img/53fc5106-5219-4269-9ace-5c45edc32c8b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53fc5106-5219-4269-9ace-5c45edc32c8b.png)'
- en: On the preceding dashboard, you will be able to see the access keys.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的仪表板中，你将能够看到访问密钥。
- en: 'Click on **Delete your root access keys** and then **Manage Security Credentials**.
    You will be presented with the following window:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**删除根访问密钥**，然后点击**管理安全凭证**。系统将展示以下窗口：
- en: '![](img/3bb72eab-b62e-42b6-9dee-6cd77653770d.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bb72eab-b62e-42b6-9dee-6cd77653770d.png)'
- en: 'Expand the **Access keys (access key ID and secret access key)** tab and get
    the access keys from there. You should get the following message once the keys
    are generated successfully:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**访问密钥（访问密钥 ID 和秘密访问密钥）**标签并从中获取访问密钥。密钥生成成功后，你应该看到如下信息：
- en: '![](img/2426808b-f6a7-462d-9692-8162fc50efbd.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2426808b-f6a7-462d-9692-8162fc50efbd.png)'
- en: Download the key file and keep it in a secure place, as you will need this in
    order to configure boto3.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载密钥文件并将其保存在安全的位置，因为在配置 boto3 时需要用到此文件。
- en: Configuring environment variables and installing boto3
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置环境变量并安装 boto3
- en: Once you have the access keys, create two environmental variables, `aws_access_key_id`
    and `aws_secret_access_key`. Now, assign their values accordingly with the help
    of the keys you have. The keys will have information that will help you distinguish
    between the key ID and the secret access key. Now that you have configured the
    necessary environment variables, we can start off by loading the environment variables
    in Python.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了访问密钥，创建两个环境变量，`aws_access_key_id` 和 `aws_secret_access_key`。现在，根据你获得的密钥，设置它们的值。密钥包含的信息将帮助你区分密钥
    ID 和秘密访问密钥。配置好必要的环境变量后，我们可以开始在 Python 中加载环境变量。
- en: Loading up the environment variables in Python
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中加载环境变量
- en: 'Once the library is successfully installed, you can load up the environment
    variables you just created with the following lines of code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦库成功安装，你可以通过以下代码行加载刚才创建的环境变量：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once the environment variables are loaded up properly, we can call boto3 to
    interact with an AWS resource. Let's say you want to enlist the S3 buckets that
    you have in your AWS account and want to upload an image to a particular bucket.
    S3 is the AWS resource that you want to access. If you do not have any S3 buckets
    in your AWS account, no worries; you can quickly create one.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦环境变量正确加载，我们就可以调用 boto3 来与 AWS 资源进行交互。例如，如果你想列出 AWS 账户中的 S3 存储桶，并将一张图片上传到某个存储桶。S3
    是你想要访问的 AWS 资源。如果你在 AWS 账户中没有任何 S3 存储桶，不用担心，你可以快速创建一个。
- en: Creating an S3 bucket
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 S3 存储桶
- en: 'You can quickly create an S3 bucket by going through the following steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下步骤快速创建一个 S3 存储桶：
- en: 'Go to the home page of the S3 console at [https://s3.console.aws.amazon.com/s3](https://s3.console.aws.amazon.com/s3).
    It should look like the following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 S3 控制台主页：[https://s3.console.aws.amazon.com/s3](https://s3.console.aws.amazon.com/s3)。页面应该如下所示：
- en: '![](img/2f02b3a1-2449-470f-a1ab-2ee93093e353.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f02b3a1-2449-470f-a1ab-2ee93093e353.png)'
- en: 'Click on **Create bucket**. You will be asked to enter the following details:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建存储桶**。系统会要求你输入以下信息：
- en: '![](img/e9399ac7-840c-447c-93be-18677c3b69ea.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9399ac7-840c-447c-93be-18677c3b69ea.png)'
- en: 'Give a name for your bucket, leave everything as it is, and click on **Create**.
    Once the bucket is successfully created, you will be able to see it from the S3
    console:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的存储桶命名，保持其他设置不变，然后点击**创建**。存储桶创建成功后，你将在 S3 控制台中看到它：
- en: '![](img/86871ff5-e121-4939-b639-80c9587e7c56.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86871ff5-e121-4939-b639-80c9587e7c56.png)'
- en: Next, we will learn how to access S3 from Python code with boto3.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何使用 boto3 从 Python 代码访问 S3。
- en: Accessing S3 from Python code with boto3
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 boto3 从 Python 代码访问 S3
- en: 'Now, you can access your S3 bucket from Python code. The following lines of
    code will show you the available buckets:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过 Python 代码访问你的 S3 存储桶。以下代码行将展示可用的存储桶：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You specified that you are interested in accessing S3 in the first argument
    of the `resource()`. You can read the documentation at [https://bit.ly/2VHsvnP](https://bit.ly/2VHsvnP).
    You can now find the available buckets with the following lines of code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 `resource()` 的第一个参数中指定了你有兴趣访问 S3。你可以通过访问 [https://bit.ly/2VHsvnP](https://bit.ly/2VHsvnP)
    来阅读相关文档。现在，你可以通过以下代码找到可用的存储桶：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should get the list as the output. Now, say you want to upload an image
    to one of the buckets. Provided that the image you want to upload is in your current
    working directory, the following lines of code should upload an image to a particular
    S3 bucket:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到一个列表作为输出。现在，假设你想将一张图片上传到某个存储桶。如果你想上传的图片就在当前工作目录中，以下代码行应将图像上传到指定的 S3 存储桶：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding lines of code contain the following features:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码包含了以下功能：
- en: '`my_image.jpeg` is the path of the image you want to upload.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_image.jpeg` 是你想上传的图像路径。'
- en: Within the `Bucket()` method is the name of the S3 bucket that the image will
    be uploaded to.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Bucket()` 方法中，指定的是你希望上传图片的 S3 存储桶的名称。
- en: 'If the code is successfully executed, you should receive the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码成功执行，你应该会收到以下输出：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can verify whether the image was uploaded by going to your AWS S3 console
    and then entering the bucket that you uploaded the image to. You should see something
    like the following in there:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问 AWS S3 控制台，进入你上传图像的存储桶，来验证图像是否上传成功。你应该能在其中看到类似以下内容：
- en: '![](img/ea5a0e67-5997-4205-836e-532a4560ee54.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea5a0e67-5997-4205-836e-532a4560ee54.png)'
- en: Now that you have configured boto3 successfully in Python, we can now move on
    to learn how to use the Rekognition and Alexa API in Python using boto3.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成功在 Python 中配置了 boto3，我们可以继续学习如何使用 boto3 在 Python 中调用 Rekognition 和 Alexa
    API。
- en: Using the Rekognition API in Python
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中使用 Rekognition API
- en: Amazon Rekognition is a deep-learning-enabled visual-analysis service that can
    help you search, verify, and analyze billions of images seamlessly. Let's first
    review the Recognition API briefly and then we will jump straight into using it
    in Python. Let's first go to the home page of the Rekognition API at [https://console.aws.amazon.com/rekognition/home](https://console.aws.amazon.com/rekognition/home).
    We have already seen Rekognition's home page in one of the earlier sections of
    this chapter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Rekognition 是一个启用了深度学习的视觉分析服务，可以帮助你无缝搜索、验证和分析数十亿张图像。首先让我们简单回顾一下 Rekognition
    API，然后我们将直接开始在 Python 中使用它。首先访问 Rekognition API 的主页 [https://console.aws.amazon.com/rekognition/home](https://console.aws.amazon.com/rekognition/home)。我们已经在本章的早些章节中看过
    Rekognition 的主页。
- en: 'As you might have already noticed from the navigation bar, the Rekognition
    API has several things to offer:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经从导航栏中注意到的，Rekognition API 提供了很多功能：
- en: '**Object and scene detection**: This lets you automatically label objects,
    labels, and scenes from a given image (along with confidence scores).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物体和场景检测**：此功能可以自动为给定图像标注物体、标签和场景，并提供置信度分数。'
- en: '**Image moderation**: This allows you to detect explicit or suggestive adult
    content in images, along with confidence scores.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像审核**：这个功能可以帮助你检测图像中的显性或暗示性成人内容，并提供置信度分数。'
- en: '**Celebrity recognition**: Using this, you can automatically recognize celebrities
    in images (along with confidence scores).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名人识别**：使用这个功能，你可以自动识别图像中的名人，并提供置信度分数。'
- en: '**Face comparison**: This can be used to see how closely faces match based
    on a similarity percentage.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人脸比对**：这个功能可以用于查看两个面孔的相似度百分比，以判断它们之间的匹配程度。'
- en: In addition to these features, it has many more.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些功能外，它还具有更多其他功能。
- en: The solutions offered by the Rekognition API have proven to be extremely useful
    for a wide variety of organizations because they genuinely solve some real-world
    and challenging problems. You can try a quick demo of any of the solutions mentioned
    in the preceding list by clicking on their respective solutions on the API home
    page. Let's try the celebrity recognition solution.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Rekognition API 提供的解决方案已经被许多组织证明是非常有用的，因为它们真正解决了一些现实世界中的挑战性问题。你可以通过点击 API 主页上相应的解决方案，快速尝试列表中提到的任何解决方案。我们来试试名人识别解决方案。
- en: 'First, go to [https://console.aws.amazon.com/rekognition/home?region=us-east-1#/celebrity-detection](https://console.aws.amazon.com/rekognition/home?region=us-east-1#/celebrity-detection)
    (note that the region may vary). It should look like the following image:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问 [https://console.aws.amazon.com/rekognition/home?region=us-east-1#/celebrity-detection](https://console.aws.amazon.com/rekognition/home?region=us-east-1#/celebrity-detection)（注意区域可能有所不同）。它应当看起来像下面的图片：
- en: '![](img/5d0a60f8-7ee3-4e21-84ec-0679a3475f7f.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d0a60f8-7ee3-4e21-84ec-0679a3475f7f.png)'
- en: 'The portal will let you upload your own image and test it. Let''s test my image
    (we could have taken images of media celebrities, but those images are copyright
    protected). You can see the result as expected:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 门户将允许你上传自己的图片并进行测试。让我们测试我的图片（我们本可以使用名人媒体图片，但这些图片有版权保护）。你可以看到预期的结果：
- en: '![](img/48570a56-c2cb-48b9-8d36-309bf77bcf96.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48570a56-c2cb-48b9-8d36-309bf77bcf96.png)'
- en: 'Feel free to try the other solutions as well. Let''s now see how the Rekognition
    API can be used from Python code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以尝试其他解决方案。现在让我们看看如何从 Python 代码中使用 Rekognition API：
- en: 'Create a new Jupyter Notebook. First off, you will want to create a new Jupyter
    notebook with the name of, say, `Sample.ipynb`. You will have to provide an image
    that you want to test for celebrity recognition using the AWS Rekognition API,
    as shown in the following directory structure screenshot of Jupyter:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Jupyter Notebook。首先，你需要创建一个新的 Jupyter notebook，例如命名为 `Sample.ipynb`。你还需要提供一张你希望测试的图像，用于通过
    AWS Rekognition API 进行名人识别，下面是 Jupyter 目录结构截图：
- en: '![](img/036c3c11-7381-44b9-83a5-f2c6f4f0b71f.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/036c3c11-7381-44b9-83a5-f2c6f4f0b71f.png)'
- en: 'Import the environment variables for the credentials in your AWS account. You
    will need to import your account credentials into your script as you previously
    did in the boto3 configuration section. To do this, use the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 AWS 账户凭证的环境变量。你需要将之前在 boto3 配置部分获得的账户凭证导入到脚本中。为此，可以使用以下代码：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create an AWS Rekognition API client using boto3\. We are now ready to instantiate
    a boto3 Rekognition API client object. To do this, we need to pass the API that
    we wish to use to the `boto3` object, along with the AWS region name in which
    you wish to use the API. You will also have to pass in the credentials that you
    retrieved in the previous step, as shown in the following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 boto3 创建 AWS Rekognition API 客户端。我们现在准备实例化一个 boto3 Rekognition API 客户端对象。为此，我们需要将要使用的
    API 和所需的 AWS 区域名称传递给 `boto3` 对象。还需要传入之前步骤中获取的凭证，代码如下：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Read the image from the disk and pass it to the API. There are two methods of
    posting files to AWS APIs from the boto3 SDK. Firstly, you could send them directly
    from an S3 bucket that you have permissions for, or you could send the image as
    a `Bytes` array from your local disk. We have already seen how you can find images
    from S3 buckets in the previous section.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从磁盘读取图像并将其传递给 API。使用 boto3 SDK 将文件传递给 AWS API 有两种方法。首先，你可以直接从你有权限的 S3 存储桶发送它们，或者可以将图像作为
    `Bytes` 数组从本地磁盘发送。我们已经在前面的部分展示了如何从 S3 存储桶查找图像。
- en: 'We shall now show you an example where we take a number of images from the
    local disk and pass them in an API call:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将展示一个示例，其中我们从本地磁盘获取多张图片并传递给 API 调用：
- en: 'First, read the image into a variable using Python''s native method to open
    a file, as shown in the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用 Python 的原生方法将图像读取到一个变量中，代码如下：
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, to pass it to the API through the client we instantiated earlier, use
    the following line of code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过我们之前实例化的客户端将其传递给 API，使用以下代码行：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Observe the response. Once the API call has succeeded, your `response` variable
    will hold the information returned by the API. To see it, print the variable:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察响应。一旦 API 调用成功，你的 `response` 变量将保存 API 返回的信息。要查看该信息，可以打印该变量：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The API recognizes our image as that of Barack Obama. It gives us a lot of other
    useful information, such as the `BoundingBox` where the face was matched, the
    `Confidence` of the prediction, the location of the eyes, mouth, and nose, and
    so on. We can use this information to further operate on the image—say, to simply
    crop out the matched part.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: API 识别我们的图像为 Barack Obama（巴拉克·奥巴马）。它还提供了许多其他有用的信息，例如面部匹配的 `BoundingBox`（边界框）、预测的
    `Confidence`（置信度）、眼睛、嘴巴和鼻子的位置信息等。我们可以使用这些信息对图像进行进一步操作——例如，简单地裁剪出匹配的部分。
- en: 'Get the matched part of the image. To prepare a cropped version of the image
    in the places where it was recognized, we can use the following code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取图像的匹配部分。为了准备图像中已识别区域的裁剪版本，我们可以使用以下代码：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see the following image as the final result, which is the bounding
    box generated by the API for performing celebrity recognition:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下图像作为最终结果，这是API生成的用于进行名人识别的边界框：
- en: '![](img/175087bb-bb71-47a3-80ae-81095e96551f.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/175087bb-bb71-47a3-80ae-81095e96551f.png)'
- en: On further exploration of the boto3 API for AWS, you'll realize that it is capable
    of handling all AWS services, and is not just limited to the Rekognition API.
    This means that, based on the API specification requirements, the preceding sample
    code can be used for nearly all the available APIs, with small modifications.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步探索AWS的boto3 API后，你会发现它能够处理所有AWS服务，而不仅仅是Rekognition API。这意味着，根据API规范要求，前面的示例代码几乎可以用于所有可用的API，只需做一些小修改。
- en: In the upcoming section, we'll take a look at Alexa, a flagship offering by
    Amazon for building voice interfaces that can span in their capabilities from
    being a chatbot to a virtual personal assistant. We'll learn how we can build
    a simple home automation solution using Alexa.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将介绍Alexa，这是亚马逊推出的旗舰产品，用于构建语音接口，其功能范围从聊天机器人到虚拟个人助手不等。我们将学习如何使用Alexa构建一个简单的家庭自动化解决方案。
- en: Using the Alexa API in Python
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中使用Alexa API
- en: Amazon Alexa is a voice-based personal assistant developed by Amazon. The product
    first featured as an interface for Amazon Echo devices, which went on to inspire
    the Google Home devices by Google, which use Google Assistant. Other competitors
    of Alexa are Microsoft's Cortana and Apple's Siri. As a virtual assistant, Alexa
    can easily set up calls, schedule meetings, or play songs. The various tasks that
    Alexa can perform are called *skills* in the Alexa terminology, which we'll be
    following in this section.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊Alexa是由亚马逊开发的基于语音的个人助手。该产品最初作为Amazon Echo设备的接口推出，后来启发了Google推出的Google Home设备，后者使用Google
    Assistant。Alexa的其他竞争者包括微软的Cortana和苹果的Siri。作为一个虚拟助手，Alexa可以轻松进行拨打电话、安排会议或播放歌曲等操作。Alexa能执行的各种任务被称为*技能*，我们将在本节中使用这一术语。
- en: Skills in Alexa are the main core of how we can bring functionality to the platform.
    Each skill needs to be invoked from the primary interface of Alexa, whereupon
    the skill takes over the entire functionality unless the program logic completes
    or the user explicitly asks for the skill to end. Skills apply the logic for the
    task to be performed, and so this logic needs to be stored somewhere, perhaps
    also along with a database and execution runtime. While a lot of skills are hosted
    over several services, such as Heroku, PythonAnywhere, GCP, and others, it is
    very common to host skills, logic code as AWS Lambda functions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa中的技能是将功能引入平台的核心。每个技能需要通过Alexa的主要接口调用，然后该技能将接管整个功能，直到程序逻辑完成或用户明确要求技能结束。技能应用了执行任务所需的逻辑，因此该逻辑需要存储在某个地方，可能还需要与数据库和执行运行时一起存储。虽然许多技能托管在多个服务上，例如Heroku、PythonAnywhere、GCP等，但在AWS
    Lambda函数中托管技能和逻辑代码是非常常见的。
- en: In this section, we shall be creating a sample Home Automation Alexa skill using
    the Python SDK for Alexa and will host it on AWS Lambda.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Alexa的Python SDK创建一个示例的家庭自动化Alexa技能，并将其托管在AWS Lambda上。
- en: Prerequisites and a block diagram of the project
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目所需的前提条件和框架图
- en: 'Before you can jump into building an Alexa skill, you will need the following
    two types of accounts on AWS and Amazon Developer respectively:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始构建Alexa技能之前，你需要在AWS和Amazon Developer分别拥有以下两种账户：
- en: An AWS account (the free tier works)—[aws.amazon.com](https://aws.amazon.com/)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个AWS账户（免费套餐可用）—[aws.amazon.com](https://aws.amazon.com/)
- en: An Amazon Developer account (this is free)—[developer.amazon.com](https://developer.amazon.com/)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Amazon开发者账户（免费）—[developer.amazon.com](https://developer.amazon.com/)
- en: 'Once you have created these accounts—the process of which is beyond the scope
    of this book—you can proceed to create our skill for home automation. The architecture
    of the Home Automation skill we shall be creating is shown in the following block
    diagram:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了这些账户——这部分内容超出了本书的范围——你就可以继续创建我们的家庭自动化技能了。我们将要创建的家庭自动化技能架构如下面的框架图所示：
- en: '![](img/dc3b9bf7-c327-4b8b-ab37-7039b36c77f6.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc3b9bf7-c327-4b8b-ab37-7039b36c77f6.png)'
- en: 'In building this skill, we shall be using the following services, which you
    can read more about by going to the links in the following list:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建此技能时，我们将使用以下服务，你可以通过访问以下列表中的链接了解更多信息：
- en: '**Amazon Alexa Skills Kit:** [https://developer.amazon.com/alexa-skills-kit](https://developer.amazon.com/alexa-skills-kit)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Alexa Skills Kit:** [https://developer.amazon.com/alexa-skills-kit](https://developer.amazon.com/alexa-skills-kit)'
- en: '**Login with Amazon:** [https://developer.amazon.com/docs/login-with-amazon/minitoc-lwa-overview.html](https://developer.amazon.com/docs/login-with-amazon/minitoc-lwa-overview.html)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Amazon 登录:** [https://developer.amazon.com/docs/login-with-amazon/minitoc-lwa-overview.html](https://developer.amazon.com/docs/login-with-amazon/minitoc-lwa-overview.html)'
- en: '**AWS CloudWatch:** [https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS CloudWatch:** [https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/)'
- en: '**Amazon DynamoDB:** [https://aws.amazon.com/dynamodb/](https://aws.amazon.com/dynamodb/)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon DynamoDB:** [https://aws.amazon.com/dynamodb/](https://aws.amazon.com/dynamodb/)'
- en: '**AWS Lambda:** [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Lambda:** [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)'
- en: Creating a configuration for the skill
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为技能创建配置
- en: 'Skills require a certain amount of connection between the services in order
    to work. In addition, the skill logic deployed on AWS Lambda needs to be configured
    to be used by the skill on Alexa. Create a `setup.txt` file in the root of your
    working folder with the following content. We shall be gradually adding to this
    content as we progress through the steps in this section:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 技能需要在服务之间建立一定的连接才能工作。此外，部署在 AWS Lambda 上的技能逻辑需要配置为可以在 Alexa 上使用。请在工作文件夹的根目录中创建一个名为`setup.txt`的文件，内容如下。随着我们逐步完成本节中的步骤，我们将不断添加内容：
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Throughout the following sections, we will be referring to this file as `setup.txt`.
    This essentially only holds information about your skill. Feel free to implement
    this in any other text editor as well, such as Google Docs.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的各个部分中，我们将提到此文件为`setup.txt`。它实际上只包含有关你的技能的信息。你也可以在其他文本编辑器中实现此文件，例如 Google
    文档。
- en: Setting up Login with Amazon
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置“使用 Amazon 登录”
- en: 'For the Home Automation skill, you will need the Login with Amazon service
    enabled. To do this, go through the following steps:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于家庭自动化技能，你需要启用“使用 Amazon 登录”服务。为此，请按照以下步骤操作：
- en: 'Go to [https://developer.amazon.com/lwa/sp/overview.html](https://developer.amazon.com/lwa/sp/overview.html).
    You will see the page shown in the following screenshot:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://developer.amazon.com/lwa/sp/overview.html](https://developer.amazon.com/lwa/sp/overview.html)。你将看到如下截图所示的页面：
- en: '![](img/4afa1398-744c-4718-bb55-0a9209e8ed04.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4afa1398-744c-4718-bb55-0a9209e8ed04.png)'
- en: Click the Create a New Security Profile button on the page that then loads.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面加载后的“创建新的安全配置文件”按钮。
- en: Set Security Profile Name as `Smart Home Automation Profile`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将安全配置文件名称设置为`Smart Home Automation Profile`。
- en: Provide a description of the profile.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供配置文件的描述。
- en: For Content Privacy Notice URL, you will need a valid privacy policy web page
    to push the skill to production. Create and host a privacy policy and provide
    the link to it in this field. A very handy tool for creating privacy policies
    can be found at [https://app-privacy-policy-generator.firebaseapp.com/](https://app-privacy-policy-generator.firebaseapp.com/).
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于内容隐私声明 URL，你需要一个有效的隐私政策网页，以便将技能推向生产环境。创建并托管隐私政策，并在此字段中提供该链接。创建隐私政策的一个非常实用的工具可以在
    [https://app-privacy-policy-generator.firebaseapp.com/](https://app-privacy-policy-generator.firebaseapp.com/)
    找到。
- en: Click on Save.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”。
- en: 'Click on the Security Profile option in the gear menu that appears on the next
    page. You will be taken to the Security Profile Management page, as shown in the
    following image:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面中，点击齿轮菜单中的“安全配置文件”选项。你将被带到“安全配置文件管理”页面，如下图所示：
- en: '![](img/6baa4f01-2672-49cb-9e03-6dd1f0902cac.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6baa4f01-2672-49cb-9e03-6dd1f0902cac.png)'
- en: From the list of security profiles, click the Web Settings tab to the Show Client
    ID and Client Secret link for the Home Automation Profile.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安全配置文件列表中，点击“Web 设置”选项卡，显示“客户端 ID 和客户端密钥”链接以供家庭自动化配置文件使用。
- en: Copy the displayed Client ID and Client Secret values and save them to the `setup.txt`
    file in the working directory, replacing the format example entries for `[LWA
    Client ID]` and `[LWA Client Secret]` respectively.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制显示的客户端 ID 和客户端密钥值，并将其保存到工作目录中的`setup.txt`文件中，分别替换`[LWA Client ID]`和`[LWA Client
    Secret]`格式示例条目。
- en: Keep this tab open for future steps. Go through the steps in the next section
    in a new browser tab.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 保持此标签页打开，以便进行后续步骤。在新的浏览器标签页中查看下一部分的步骤。
- en: Creating the skill
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建技能
- en: 'We can now proceed with creating the skill:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续创建技能：
- en: 'Log on to [https://developer.amazon.com/alexa/console/ask](https://developer.amazon.com/alexa/console/ask)
    to begin the process. You will be able to see a screen resembling the following:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录[https://developer.amazon.com/alexa/console/ask](https://developer.amazon.com/alexa/console/ask)开始该过程。你将看到一个类似于以下的页面：
- en: '![](img/e055cf24-cc4d-4caf-87a6-b5187a26a92a.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e055cf24-cc4d-4caf-87a6-b5187a26a92a.png)'
- en: Click on Create Skill.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建技能（Create Skill）。
- en: Set the name to `Home Automation Skill`, or a name of your choosing.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名称设置为`Home Automation Skill`，或者选择你喜欢的名称。
- en: 'Under the Choose a model to add to your skill section, click on the Smart Home
    model. Your selections should now resemble the following:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择一个模型添加到你的技能”部分，点击智能家居模型（Smart Home model）。你的选择现在应该类似于以下内容：
- en: '![](img/15bd4a33-02ec-4ab9-b0fc-7cd83f015eec.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15bd4a33-02ec-4ab9-b0fc-7cd83f015eec.png)'
- en: Click on Create Skill to complete the initial phase of the skill creation.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建技能（Create Skill）以完成技能创建的初始阶段。
- en: On the next page that appears, you'll be able to see the Skill ID. Copy this
    Skill ID to the `setup.txt` file in the local working directory.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面中，你将看到技能ID。将此技能ID复制到本地工作目录中的`setup.txt`文件。
- en: Do not close this tab, as you still have fields to fill in here. Open up a new
    browser tab to work in in the next section.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 不要关闭此标签页，因为这里还有字段需要填写。打开一个新的浏览器标签页，在下一部分继续工作。
- en: Configuring the AWS Lambda function
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置AWS Lambda函数
- en: 'Before we can add the ARN for the Lambda function to the skill endpoints configuration,
    we must create a configuration for the Lambda function. You can do this by going
    through the following steps:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将Lambda函数的ARN添加到技能端点配置之前，我们必须先为Lambda函数创建配置。你可以通过以下步骤完成：
- en: 'Go to [https://console.aws.amazon.com/iam/home#/policies](https://console.aws.amazon.com/iam/home#/policies).
    You will be presented with a screen like the one shown in the following screenshot:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://console.aws.amazon.com/iam/home#/policies](https://console.aws.amazon.com/iam/home#/policies)，你将看到一个类似于以下截图的页面：
- en: '![](img/0fdc474a-3051-4bab-9698-8a9d883cb2f6.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fdc474a-3051-4bab-9698-8a9d883cb2f6.png)'
- en: Click on Create policy.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建策略（Create policy）。
- en: 'Enter the following JSON in the JSON tab of the Create policy editor:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建策略编辑器的JSON选项卡中输入以下JSON：
- en: '[PRE13]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Click on Review policy and set the name of the policy to `HomeAutomationPolicy`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击审核策略（Review policy），并将策略的名称设置为`HomeAutomationPolicy`。
- en: Click on Create policy.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建策略（Create policy）。
- en: Next, on the left-hand navigation menu of the page, click on Roles.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在页面的左侧导航菜单中，点击角色（Roles）。
- en: Click on Create role.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建角色（Create role）。
- en: 'Select AWS service and Lambda, and click on Next: Permissions.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '选择AWS服务和Lambda，然后点击下一步：权限（Next: Permissions）。'
- en: 'Search for HomeAutomationPolicy in the filtering field. Check the policy. Your
    screen should resemble the following:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤字段中搜索HomeAutomationPolicy，勾选该策略。你的屏幕应该类似于以下内容：
- en: '![](img/38f026ca-5a81-427f-ad3c-dc5efa7357de.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38f026ca-5a81-427f-ad3c-dc5efa7357de.png)'
- en: 'Click on Next: Tags.'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击下一步：标签（Next: Tags）。'
- en: 'Click on Next: Review.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击下一步：审核（Next: Review）。'
- en: Set the Role name to `lambda_home_automation`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将角色名称设置为`lambda_home_automation`。
- en: Click on Create role.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建角色（Create role）。
- en: Let's now create the Lambda function.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来创建Lambda函数。
- en: Creating the Lambda function
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Lambda函数
- en: 'With the suitable configuration for the Lambda function in place, we can now
    create the Lambda function itself. To do so, in the AWS console, navigate to [https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home?region=us-east-1)
    and go through the following steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好Lambda函数的适当设置后，我们现在可以创建Lambda函数本身。为此，请在AWS控制台中，访问[https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home?region=us-east-1)，并按以下步骤操作：
- en: Click on Create function.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建函数（Create function）。
- en: Set the function name to `homeAutomation`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数名称设置为`homeAutomation`。
- en: Select the `Python 3.6` runtime.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Python 3.6`运行时。
- en: Choose the `lambda_home_automation` role from the dropdown in the existing roles
    in the execution roles.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行角色中的现有角色下，从下拉菜单中选择`lambda_home_automation`角色。
- en: Click on `Create function`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`创建函数`（Create function）。
- en: Copy the Lambda ARN from the next page that appears, which has a message of
    congratulations for creating the Lambda function. Put this ARN in the `setup.txt`
    of our local working directory in the [AWS Lambda ARN] field.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制下一个页面中显示的Lambda ARN，该页面上有一个恭喜创建Lambda函数的消息。将此ARN放入我们本地工作目录的`setup.txt`文件中的[AWS
    Lambda ARN]字段。
- en: 'At this point, the screen should resemble the following screenshot:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此时，屏幕应该类似于以下截图：
- en: '![](img/c27dff75-763d-479c-aea9-4846c6cd2e08.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c27dff75-763d-479c-aea9-4846c6cd2e08.png)'
- en: Note that the triggers and destinations displayed on your screen might differ
    from the preceding screenshot.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您屏幕上显示的触发器和目标可能与前面的截图有所不同。
- en: 'On the left-hand navigation, click on Add trigger to bring up the drop-down
    list of available triggers for your Lambda function, as shown in the following
    screenshot:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航栏中，点击“添加触发器”，弹出 Lambda 函数的可用触发器下拉列表，如下截图所示：
- en: '![](img/4c5d75a8-1315-43f1-87d7-961a97ea98c4.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c5d75a8-1315-43f1-87d7-961a97ea98c4.png)'
- en: Click on Alexa Skills Kit to bring up the configuration dialogue for this trigger.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Alexa Skills Kit 以打开该触发器的配置对话框。
- en: Paste the Alexa Skill ID in the field for Skill ID. We have stored this value
    in the `setup.txt` previously, and it will look like `amzn1.ask.skill.xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在技能 ID 字段中粘贴 Alexa 技能 ID。我们之前已将此值存储在`setup.txt`中，它的形式类似于`amzn1.ask.skill.xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`。
- en: Click on Add to add the trigger and return to the Lambda function management
    screen.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”以添加触发器，并返回 Lambda 函数管理屏幕。
- en: Click on Save at the top right of the page.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面右上角的“保存”。
- en: After the final step, the trigger section will display details of the connected
    Alexa skill. If it does not, you should check that you have correctly followed
    the preceding steps.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 完成最后一步后，触发器部分将显示已连接的 Alexa 技能的详细信息。如果没有显示，您应该检查是否正确按照前述步骤操作。
- en: Configuring the Alexa skill
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Alexa 技能
- en: 'Now, we need to configure the skill that we left open in another tab of the
    browser. We will do this by going through the following steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要配置我们在浏览器的另一个标签页中保持打开的技能。我们将通过以下步骤进行配置：
- en: Return to that tab and fill in the ARN of the Lambda function in the Default
    endpoint field.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回该标签页并在默认端点字段中填写 Lambda 函数的 ARN。
- en: Click on SAVE.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”。
- en: Click on Setup Account Linking at the bottom of the page.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的“设置账户链接”。
- en: For the Authorization URL, enter `https://www.amazon.com/ap/oa`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于授权 URL，输入`https://www.amazon.com/ap/oa`。
- en: For the Access Token URL, enter `https://api.amazon.com/auth/o2/token`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于访问令牌 URL，输入`https://api.amazon.com/auth/o2/token`。
- en: For the Client ID field, copy `[LWA Client ID]` from the `setup.txt` file.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于客户端 ID 字段，复制`[LWA Client ID]`来自`setup.txt`文件。
- en: For the Client Secret field, copy `[LWA Client Secret]` from the `setup.txt`
    file.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于客户端密钥字段，复制`[LWA Client Secret]`来自`setup.txt`文件。
- en: Click on Add scope and enter `profile:user_id`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加作用域”，并输入`profile:user_id`。
- en: 'Copy the Redirect URLs from the bottom of the page and paste them in the `setup.txt`
    file under the [APIs] section. The URLs resemble the following:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制页面底部的重定向 URL，并将其粘贴到`setup.txt`文件中的[APIs]部分。这些 URL 类似于：
- en: '![](img/81841ec1-c702-47ac-84d3-11fc81c679bd.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81841ec1-c702-47ac-84d3-11fc81c679bd.png)'
- en: Click on Save.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”。
- en: In the Security Profile Management browser tab, click on the Web Settings tab.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安全配置管理的浏览器标签页中，点击“Web 设置”标签。
- en: Click on Edit, and add the three redirect URLs to the Allowed Return URLs field.
    You will have to click on Add another to enter multiple URLs.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“编辑”，并将三个重定向 URL 添加到“允许返回 URL”字段中。您需要点击“添加另一个”以输入多个 URL。
- en: Click on Save.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存”。
- en: Let's now set up Amazon DynamoDB for the skill.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为技能设置 Amazon DynamoDB。
- en: Setting up Amazon DynamoDB for the skill
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为技能设置 Amazon DynamoDB
- en: 'For the skill to be able to save data from users, it needs a database. We will
    be using the Amazon DynamoDB service for this. The steps to set up the service
    are as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让技能能够保存用户数据，它需要一个数据库。我们将使用 Amazon DynamoDB 服务。设置此服务的步骤如下：
- en: Go to [https://console.aws.amazon.com/dynamodb/home?region=us-east-1](https://console.aws.amazon.com/dynamodb/home?region=us-east-1).
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://console.aws.amazon.com/dynamodb/home?region=us-east-1](https://console.aws.amazon.com/dynamodb/home?region=us-east-1)。
- en: Click on the Create table button.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建表格”按钮。
- en: Enter the Table name as `SmartHome`.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入表格名称为`SmartHome`。
- en: For the Primary key, enter `ItemId`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于主键，输入`ItemId`。
- en: 'Leave all defaults as they are and click on Create. Your screen should resemble
    the following screenshot in this step:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持所有默认设置不变，然后点击“创建”。此时，您的屏幕应该显示如下截图：
- en: '![](img/c1615057-9eee-451a-aa6e-49226c642255.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1615057-9eee-451a-aa6e-49226c642255.png)'
- en: You can then go to the DynamoDB dashboard to see the table you just created;
    however, this can take a few moments.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以进入 DynamoDB 控制台，查看刚创建的表格；不过，这可能需要几分钟。
- en: Deploying the code for the AWS Lambda function
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 AWS Lambda 函数的代码
- en: We're left with the final piece of the setup—the code that provides the logic
    to the AWS Lambda function. Go to your Lambda function configuration page and
    scroll down to the editor.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是最后一个设置部分——为 AWS Lambda 函数提供逻辑的代码。进入你的 Lambda 函数配置页面，并向下滚动至编辑器。
- en: 'You will notice that the editor has a two-column interface: the left column
    displays the files in the Lambda function storage and in the right column, you
    can edit those files, as shown in the following screenshot:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到编辑器有一个两栏界面：左侧栏显示 Lambda 函数存储中的文件，右侧栏则可以编辑这些文件，具体如下截图所示：
- en: '![](img/83315a84-c753-4f37-980c-a9b5dd4e5ed8.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83315a84-c753-4f37-980c-a9b5dd4e5ed8.png)'
- en: 'Click on `lambda_function.py` to begin editing the file and go through the
    following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `lambda_function.py` 开始编辑文件，并按以下步骤进行操作：
- en: 'Import the necessary modules. For the function to work, we will need the support
    of some common libraries, as shown in the following code:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块。为了使函数正常工作，我们需要一些常见库的支持，具体代码如下：
- en: '[PRE14]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The boto3 API is used to connect to the Amazon DynamoDB instance we set up.
    The JSON module facilitates the generation of responses for the Alexa skill. The
    rest of the modules help to generate responses.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: boto3 API 用于连接我们设置的 Amazon DynamoDB 实例。JSON 模块帮助生成 Alexa 技能的响应。其余模块帮助生成响应内容。
- en: 'Create the `AlexaResponse` class. In order to be able to fully replicate the
    Alexa skill''s expected format of responses, we can quickly set up a helper class
    that can generate the responses for the Lambda function calls. Let''s name it
    `AlexaReponse`; the initialization of the class is shown in the following code
    snippet:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `AlexaResponse` 类。为了能够完全复制 Alexa 技能期望的响应格式，我们可以快速设置一个辅助类，用于生成 Lambda 函数调用的响应。我们将其命名为
    `AlexaResponse`；类的初始化如下代码片段所示：
- en: '[PRE15]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding initialization method for the `AlexaResponse` class sets the
    expected output format and the various constant settings, such as the version
    number for the payload, and some basic validation for the output object. Next,
    we create the method for adding content properties and another method for setting
    cookies in the responses. Finally, another method is added to set up the payload
    endpoints:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `AlexaResponse` 类初始化方法设置了预期的输出格式及各种常量设置，比如有效负载的版本号，以及一些输出对象的基本验证。接下来，我们创建了添加内容属性的方法和用于设置响应中
    cookies 的另一个方法。最后，另一个方法被添加用于设置有效负载的端点：
- en: '[PRE16]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now to define the three handler methods that we created in the previous step.
    The methods declared in the previous step depend upon inner methods of their own.
    These are mostly helper functions, which have little to do with the major focus
    of this chapter, and so we will leave these up to your implementation of the function,
    which you can create by studying the response body documentation of AWS Lambda
    functions and Alexa skills. A sample implementation can be found in our code repository
    for this chapter, between lines 65 and 102 of the `lambda_function.py` file at
    [http://tiny.cc/HOPDLW_CH7_lfpy](http://tiny.cc/HOPDLW_CH7_lfpy).
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在来定义我们在上一阶段创建的三个处理方法。上一阶段声明的方法依赖于它们自己的内部方法。这些大多是辅助函数，与本章的主要内容关系不大，因此我们将把这些留给你根据
    AWS Lambda 函数和 Alexa 技能的响应体文档自行实现。可以参考我们本章代码库中的示例实现，位于 `lambda_function.py` 文件的第
    65 行至 102 行，链接：[http://tiny.cc/HOPDLW_CH7_lfpy](http://tiny.cc/HOPDLW_CH7_lfpy)。
- en: 'Next, we will set up methods to generate the final response from the `AlexaResponse`
    class. Finally, we create methods that assimilate all the different parts—the
    context, event, payload, endpoints, and cookies—into a single object that is ready
    for interaction with the Alexa skill:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置方法以生成 `AlexaResponse` 类的最终响应。最后，我们创建方法将所有不同的部分——上下文、事件、有效负载、端点和 cookies——合并为一个准备好与
    Alexa 技能交互的对象：
- en: '[PRE17]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `AlexaResponse` class is now complete. We will now move on to connect with
    the DynamoDB service using the following line:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AlexaResponse` 类现在已完成。接下来我们将使用以下代码连接到 DynamoDB 服务：'
- en: '[PRE18]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we define the primary method and entry point for the file—the `lambda_handler`
    method:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义文件的主要方法和入口点——`lambda_handler` 方法：
- en: '[PRE19]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will continue adding to the preceding method for the rest of this step.
    In the preceding lines, we declare the `lambda_handler` method, which accepts
    the `request` and `context` objects from the Alexa skill. It then makes a JSON
    dump of the request so that we can later observe it from the Amazon CloudWatch
    dashboard. Next, it makes of a dump of the context if any was attached to the
    request:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续为此步骤的其余部分添加到前面的代码中。在前面的代码行中，我们声明了 `lambda_handler` 方法，该方法接受来自 Alexa 技能的
    `request` 和 `context` 对象。然后，它对请求进行 JSON 转储，以便我们可以稍后从 Amazon CloudWatch 仪表板观察它。接下来，它还对请求中附加的上下文进行转储（如果有的话）：
- en: '[PRE20]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We then validate whether we have a valid Alexa directive in the request, and
    if none is found, an error message is generated and sent back as the response.
    Note the usage of the `AlexaResponse` class object here. We will be using it in
    the future to generate responses from this script:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来验证请求中是否包含有效的 Alexa 指令，如果没有找到，则生成错误信息并作为响应返回。请注意这里使用了 `AlexaResponse` 类对象。我们将来会使用它来生成来自该脚本的响应：
- en: '[PRE21]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Similarly, another check is made to ensure that the payload version being requested
    is 3\. This is because we have only developed it for the Smart Home API version
    3 of Alexa:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，还进行另一个检查，以确保请求的负载版本是 3。这是因为我们只为 Alexa 的智能家居 API 版本 3 开发了它：
- en: 'First, we open the request and see what is being requested:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们打开请求并查看请求了什么：
- en: '[PRE22]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, we handle the incoming request from Alexa based on the `namespace`. Note
    that this sample accepts any `grant` request, but in your implementation, you
    will use the code and token to get and store access tokens:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们根据 `namespace` 处理来自 Alexa 的请求。请注意，这个示例接受任何 `grant` 请求，但在您的实现中，您将使用代码和令牌来获取并存储访问令牌：
- en: '[PRE23]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding condition acts on the Alexa authorization request.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的条件作用于 Alexa 授权请求。
- en: 'For the discovery and the action to turn off the switch, we use the following
    code:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于发现和关闭开关的操作，我们使用以下代码：
- en: '[PRE24]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This sample always returns a `success` response for either a request to `TurnOff`
    or `TurnOn.`
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例始终返回 `success` 响应，无论是 `TurnOff` 还是 `TurnOn` 请求。
- en: 'Now, we check for an error when setting the state:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们在设置状态时检查是否有错误：
- en: '[PRE25]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Finally, we extract the directive name and the namespace of the directive to
    determine the type of response to be sent back. Depending upon the directives
    being sent, a different response is generated and finally sent using the `AlexaResponse`
    class object.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们提取指令名称和指令的命名空间，以确定要发送回的响应类型。根据发送的指令，生成不同的响应，并最终通过 `AlexaResponse` 类对象发送回去。
- en: 'Note the usage of the `send_response` method in the code in the previous step.
    We need to define that method. Its task is to send the `AlexaResponse` object
    in JSON format and to log it for observation in Amazon CloudWatch:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意前一步代码中 `send_response` 方法的使用。我们需要定义这个方法。它的任务是以 JSON 格式发送 `AlexaResponse` 对象，并将其记录以便在
    Amazon CloudWatch 中观察：
- en: '[PRE26]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update the `device state` method. Since we''re building automation for a simple
    switch device using Alexa, we''ll need to maintain the state information of the
    switch. We do this by storing its state in DynamoDB. We will add an update method
    for this, as shown in the following code:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `device state` 方法。由于我们正在为使用 Alexa 的简单开关设备构建自动化，我们需要维护开关的状态信息。我们通过将其状态存储在
    DynamoDB 中来实现这一点。我们将为此添加一个更新方法，如下所示：
- en: '[PRE27]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Next, we will test the Lambda function.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将测试 Lambda 函数。
- en: Testing the Lambda function
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 Lambda 函数
- en: 'We can now check whether our function responds properly. To do this, we must
    create a test in the Lambda function''s dashboard by going through these steps:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以检查函数是否正确响应。为此，我们必须通过以下步骤在 Lambda 函数的仪表板中创建一个测试：
- en: On the Lambda function page for the function that we created in the previous
    sections, at the top right, click on Test.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们在前面创建的 Lambda 函数页面的右上角，点击 Test。
- en: A dialog box will appear with the options to write a new test or use an existing
    one. Choose the option to Create new test event.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将弹出一个对话框，提供写入新测试或使用现有测试的选项。选择“创建新测试事件”选项。
- en: In the Event template, make that sure Hello World is selected.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件模板中，确保选择了 Hello World。
- en: Next, provide the Event name of `directiveDiscovery`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，提供 `directiveDiscovery` 的事件名称。
- en: 'Enter the following JSON into the editor:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中输入以下 JSON：
- en: '[PRE28]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'At this point, your screen should resemble the following:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的屏幕应该类似于以下内容：
- en: '![](img/72352241-b56d-4536-b083-daebba4c21cf.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72352241-b56d-4536-b083-daebba4c21cf.png)'
- en: Scroll down and click on Create.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并点击 Create。
- en: Once you return to the Lambda function dashboard, at the top right, select the
    `directoryDiscover` test from the dropdown.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Lambda 函数仪表板后，在右上角，从下拉菜单中选择 `directoryDiscover` 测试。
- en: Click on Test.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击测试（Test）。
- en: 'On completion, the test will display the response status and the response of
    the Lambda function. You can see the results on the page at the top of the Lambda
    function dashboard, which will resemble the following screenshot:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，测试将显示响应状态和 Lambda 函数的响应。你可以在 Lambda 函数仪表板顶部的页面上看到结果，结果会类似以下截图：
- en: '![](img/ff23d8a3-8380-4e37-949f-efd3614544ca.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff23d8a3-8380-4e37-949f-efd3614544ca.png)'
- en: If the test fails, make sure you have followed the preceding steps carefully,
    making sure that the regions in which the different services exist are the same.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试失败，请确保你已经仔细按照前述步骤操作，并确保各个服务所在的区域一致。
- en: Testing the AWS Home Automation skill
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 AWS Home Automation 技能
- en: 'As the last phase of this project, we will be testing our skill in the Alexa
    Test simulator. To do this, go through the following steps:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本项目的最后阶段，我们将在 Alexa 测试模拟器中测试我们的技能。为此，请按照以下步骤操作：
- en: Go to [https://alexa.amazon.com](https://alexa.amazon.com/) and log in.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://alexa.amazon.com](https://alexa.amazon.com/) 并登录。
- en: Click on Skills in the left-hand menu.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中点击技能（Skills）。
- en: Click on Your Skills at the top right of the page.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面右上角的“你的技能”（Your Skills）。
- en: Select the DEV SKILL tab.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 DEV SKILL 标签。
- en: 'Click on HomeAutomationSkill. You should see the following screen:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 HomeAutomationSkill。你应该会看到以下界面：
- en: '![](img/246d6e58-cde0-45cd-9ad1-0f7dd1f02154.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/246d6e58-cde0-45cd-9ad1-0f7dd1f02154.png)'
- en: Click on the Enable button. You will be asked to allow access permissions to
    your Developer account.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击启用按钮。系统会要求你允许访问你的开发者账户权限。
- en: 'Come back to the Alexa Developer console and click on Discover devices. A new
    device called Sample Switch will be shown as available, as shown in the following
    screenshot:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 Alexa 开发者控制台，点击发现设备（Discover devices）。一个名为 Sample Switch 的新设备将会显示为可用，如下图所示：
- en: '![](img/77383ecb-ff77-43fa-99ae-c06f245dd01e.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77383ecb-ff77-43fa-99ae-c06f245dd01e.png)'
- en: Now, go to the Test tab on the Alexa Skills Kit development page for the HomeAutomation
    skill.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，进入 Alexa Skills Kit 开发页面的测试（Test）选项卡，选择 HomeAutomation 技能。
- en: 'In the simulator, type `alexa, turn on the sample switch`. If the request is
    accepted, then you will receive an `OK` from Alexa, as shown in the following
    screenshot:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器中输入 `alexa, turn on the sample switch`。如果请求被接受，你将收到 Alexa 的 `OK` 响应，如下图所示：
- en: '![](img/40856d4c-4de8-458c-b4e7-83073a821f59.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40856d4c-4de8-458c-b4e7-83073a821f59.png)'
- en: 'To check whether the skill is actually working, you can go to your DynamoDB
    table SmartHome and switch to the Items tab of the table. You should be able to
    see the following record:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查技能是否正常工作，你可以进入你的 DynamoDB 表格 SmartHome，并切换到表格的 Items 选项卡。你应该能看到以下记录：
- en: '![](img/f0949a1c-45e6-49d6-af20-309f9b4dd0a3.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0949a1c-45e6-49d6-af20-309f9b4dd0a3.png)'
- en: Congratulations on successfully building a simple Home Automation skill in Alexa!
    You can play around with this skill and build your own home automation skills
    for Alexa. Once you are ready to publish them for a wider audience, you can follow
    the advice in the documentation available at [https://developer.amazon.com/docs/alexa-for-business/create-and-publish-private-skills.html](https://developer.amazon.com/docs/alexa-for-business/create-and-publish-private-skills.html).
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你成功构建了一个简单的 Home Automation 技能！你可以尝试使用这个技能并为 Alexa 创建你自己的家庭自动化技能。当你准备好将其发布给更广泛的观众时，可以参考
    [https://developer.amazon.com/docs/alexa-for-business/create-and-publish-private-skills.html](https://developer.amazon.com/docs/alexa-for-business/create-and-publish-private-skills.html)
    上的文档进行操作。
- en: Summary
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered how we can use AWS using its Python API—boto3\.
    We explored the various options and configurational requirements for using the
    API and looked at an example of how to use it with the Rekognition API for recognizing
    celebrities. We then dove deep into how to create an Alexa skill for home automation,
    setting up the simple task of turning a switch on/off. This can be very easily
    extrapolated to other smart home devices. We looked at how Alexa skill logic can
    be hosted over AWS Lambda and observed from AWS CloudWatch. We also explored the
    storage of dynamic device data in Amazon DynamoDB.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何使用其Python API——boto3来使用AWS。我们探索了使用该API的各种选项和配置要求，并通过一个示例展示了如何使用它与Rekognition
    API进行名人识别。接着，我们深入探讨了如何为家庭自动化创建Alexa技能，设置一个简单的开关开/关任务。这可以很容易地推广到其他智能家居设备。我们还了解了如何将Alexa技能逻辑托管在AWS
    Lambda上，并通过AWS CloudWatch进行观察。我们还探索了将动态设备数据存储在Amazon DynamoDB中的方法。
- en: In the upcoming chapter, we will see how we can use deep learning on Microsoft's
    Azure platform using Python.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到如何在微软的Azure平台上使用Python进行深度学习。
