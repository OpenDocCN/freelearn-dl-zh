- en: Extracting Information from Text with Amazon Comprehend
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Comprehend 提取文本中的信息
- en: In this chapter, we will build an application that can automatically extract
    contact information from photos of business cards. With this application, we aim
    to reduce tedious manual work by using automation. We will use Amazon Rekognition
    to detect text in the business card photos and then use Amazon Comprehend to extract
    structured information such as the name, address, and phone number. We will demonstrate
    that the goal of automation is not always full autonomy; there is some value in
    keeping the human component in the solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将构建一个应用程序，能够自动从名片照片中提取联系信息。通过这个应用程序，我们旨在通过自动化减少繁琐的手工工作。我们将使用 Amazon Rekognition
    来检测名片照片中的文本，然后使用 Amazon Comprehend 提取结构化信息，如姓名、地址和电话号码。我们将展示自动化的目标并不总是完全的自主化；在解决方案中保持人的参与也具有一定的价值。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Understanding the role of Artificial Intelligence in our workplaces
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解人工智能在我们工作场所中的作用
- en: Performing information extraction with Amazon Comprehend and Amazon Comprehend
    Medical
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Comprehend 和 Amazon Comprehend Medical 执行信息提取
- en: Storing and retrieving data in AWS DynamoDB
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS DynamoDB 中存储和检索数据
- en: Building serverless AI applications with AWS services, RESTful APIs, and web
    user interface
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS 服务、RESTful API 和网页用户界面构建无服务器 AI 应用程序
- en: Reusing existing AI service implementations within the reference architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在参考架构中重用现有的 AI 服务实现
- en: Discussing human-in-the-loop interface design in automation solutions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论自动化解决方案中的人机协同界面设计
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book's GitHub repository, which contains the source code for this chapter,
    can be found at [https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services](https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的 GitHub 仓库，包含本章的源代码，可以在 [https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services](https://github.com/PacktPublishing/Hands-On-Artificial-Intelligence-on-Amazon-Web-Services)
    找到。
- en: Working with your Artificial Intelligence coworker
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与你的人工智能同事合作
- en: '**Artificial Intelligence** (**AI**) is advancing the progress of automation
    in our lives. When most people think about intelligent automation they think of
    smart thermostats, vacuum robots, or autonomous vehicles that help us live better.
    There are also tremendous opportunities for us to use intelligent automation to
    help us work better. AI can complement human labor in the workplace to provide
    value for businesses, contribute to economic growth, and redirect human labor
    toward creative work. One area hungry for automation progress is manual back office
    processes. There are many tasks still fulfilled by humans behind the scenes when
    we deposit checks, when we sign up for services, and when we buy things online.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**人工智能** (**AI**) 正在推动我们生活中自动化的进步。当大多数人想到智能自动化时，他们通常会想到智能温控器、吸尘机器人或自动驾驶汽车，这些都帮助我们过上更好的生活。我们也有巨大的机会利用智能自动化来帮助我们更高效地工作。人工智能可以在工作场所中补充人类劳动，为企业创造价值，促进经济增长，并将人类劳动转向创造性工作。一个迫切需要自动化进步的领域是手工的后勤处理过程。当我们存入支票、注册服务或在线购物时，仍然有许多任务是由人类在幕后完成的。'
- en: There certainly are concerns about losing jobs to automation; however, we have
    also observed improved worker morale when menial efforts are automated. Most of
    the manual back office processes are tedious and repetitive. For example, there
    are people whose jobs involve reading through multiple documents, identifying
    certain pieces of information within them, and then manually entering the information
    into computer systems. These back-office document processing tasks are also called
    "swivel-chair" processes because the workers are constantly swiveling in their
    chairs to switch between the documents and the computer screens. We could use
    AI to automate the documentation process by reading the documents using **Optical
    Character Recognition** (**OCR**) and then extracting information using **Natural
    Language Processing** (**NLP**).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关于工作被自动化取代的担忧是存在的；然而，我们也观察到，当琐碎的工作被自动化时，工人的士气得到了改善。大多数手动后勤工作都是乏味且重复的。例如，有些人的工作是阅读多份文档，识别其中的某些信息，然后手动将信息输入计算机系统。这些后勤文档处理任务也被称为“旋转椅”过程，因为工人们不断在文件和计算机屏幕之间旋转椅子。我们可以利用AI来自动化文档处理过程，通过**光学字符识别**（**OCR**）读取文档，再利用**自然语言处理**（**NLP**）提取信息。
- en: However, automating document processing is not trivial. Paper documents must
    be scanned first. Depending on the quality of the document image, the complexity
    of the document structure, or even handwritten text within the documents, it can
    be difficult to guarantee processing accuracy. For certain business environments
    and use cases, anything less than 100% accuracy is not acceptable. In such cases,
    automation developers must design with failover to manual intervention in mind
    so that humans can step in and take over. For example, an automation solution
    can extract the dollar amount on a check during a bank deposit. Inaccuracies during
    this business process can have major consequences for the bank customer. To ensure
    the correct dollar amount is deposited, the automation solution could extract
    the value and then show the extracted amount to a human operator before the deposit
    is completed. This solution leverages AI capabilities to automate the task but
    also allows humans to intervene in the event of errors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自动化文档处理并非易事。纸质文档必须先进行扫描。根据文档图像的质量、文档结构的复杂性，甚至是文档中的手写文本，可能很难保证处理的准确性。对于某些业务环境和使用案例，任何低于100%的准确性都是不可接受的。在这种情况下，自动化开发人员必须设计可支持人工干预的容错机制，以便在出现问题时，人工可以介入并接管处理。例如，自动化解决方案可以在银行存款过程中提取支票上的金额。如果该过程中的数据不准确，可能会对银行客户造成重大后果。为了确保正确的存款金额，自动化解决方案可以先提取金额，然后在存款完成之前将提取的金额展示给人工操作员进行确认。这个解决方案利用了AI技术来自动化任务，但也允许人在出错时进行干预。
- en: In this chapter, we will be implementing an application, Contact Organizer,
    to automate document processing. More specifically, this application helps us
    extract contact information from scanned business cards. To ensure accuracy, our
    application will provide a human-in-the-loop user interface so that automatically
    extracted information can be reviewed and corrected by the user before it is saved.
    This human-in-the-loop user interface is a popular approach because it improves
    automation accuracy with human judgement.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实现一个名为“联系人管理器”的应用程序，用于自动化文档处理。更具体地说，该应用程序帮助我们从扫描的名片中提取联系人信息。为了确保准确性，我们的应用程序将提供一个“人机交互”用户界面，以便用户在保存信息之前，能够审核并更正自动提取的内容。这种“人机交互”用户界面是一种流行的方式，因为它通过人的判断来提高自动化的准确性。
- en: Understanding the Contact Organizer architecture
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解联系人管理器架构
- en: The Contact Organizer application will provide a web user interface for users
    so that they can upload an image of a business card. The contact information will
    be extracted and categorized by the application. The automatically extracted contact
    information will then be displayed to the user in the web user interface. The
    user can review and correct the information before saving it to a permanent contact
    store.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人管理器应用程序将为用户提供一个Web用户界面，用户可以通过该界面上传名片图像。应用程序将提取并分类联系人信息。然后，自动提取的联系人信息将在Web用户界面中显示给用户。用户可以在将其保存到永久联系人库之前，审查并更正这些信息。
- en: 'The following diagram shows the architecture''s design, highlighting the layers
    and services of the Contact Organizer application. The following architecture
    design should look very familiar by now; the layers and components follow the
    same reference architecture template we defined in [Chapter 2](042787e6-6f54-4728-8354-e22d87be0460.xhtml),
    *Anatomy of a Modern AI Application*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了架构设计，重点突出联系组织器应用的各个层次和服务。以下架构设计现在应该很熟悉了；这些层次和组件遵循我们在[第2章](042787e6-6f54-4728-8354-e22d87be0460.xhtml)中定义的相同参考架构模板，*现代AI应用的构成*：
- en: '![](img/0b0b3b30-5bd6-4d8f-91e9-2317d7f25ffc.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b0b3b30-5bd6-4d8f-91e9-2317d7f25ffc.png)'
- en: 'In this application, the web user interface will interact with three RESTful
    endpoints in the orchestration layer:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，Web用户界面将与协调层中的三个RESTful端点进行交互：
- en: '**Upload Recording Endpoint** will delegate the image upload to our **Storage
    Service**.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上传录音端点**将把图像上传委托给我们的**存储服务**。'
- en: '**Extract Information Endpoint** will use the **Recognition Service** and **Extraction
    Service**:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提取信息端点**将使用**识别服务**和**提取服务**：'
- en: The Recognition Service is reused from [Chapter 3](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml),
    *Detecting and Translating Text with Amazon Rekognition and Translate*, when we
    looked at the Pictorial Translator project.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别服务是从[第3章](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml)中重用的，*使用Amazon Rekognition和Translate检测和翻译文本*，当时我们在讲解图像翻译器项目时使用过。
- en: The Extraction Service will use both Amazon Comprehend and Amazon Comprehend
    Medical to extract and categorize the diverse contact information such as name,
    address, and phone number.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取服务将同时使用 Amazon Comprehend 和 Amazon Comprehend Medical 来提取和分类各种联系信息，如姓名、地址和电话号码。
- en: '**Save/Get Contacts Endpoints** will write to/read from the **Contact Store**,
    which is backed by the AWS DynamoDB NoSQL database.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存/获取联系人端点**将写入/读取**联系人存储**，其后端是AWS DynamoDB NoSQL数据库。'
- en: In Contact Organizer, there are several opportunities for us to reuse components
    we already implemented in previous projects. In the orchestration layer, we can
    reuse the Upload Recording Endpoint. In the service implementation layer, we can
    reuse the Storage and Recognition services.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在联系组织器中，我们有几个机会可以重用我们在之前项目中已经实现的组件。在协调层中，我们可以重用上传录音端点。在服务实现层中，我们可以重用存储和识别服务。
- en: Component interactions in Contact Organizer
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系组织器中的组件交互
- en: 'The following interaction diagram walks through the Contact Organizer''s business
    logic workflow between the application''s components:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下交互图展示了联系组织器中应用组件之间的业务逻辑工作流程：
- en: '![](img/bad3f779-841b-4e53-94a8-2cf2bd441813.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bad3f779-841b-4e53-94a8-2cf2bd441813.png)'
- en: 'From the user''s perspective, we have the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户的角度来看，我们有以下内容：
- en: When the Contact Organizer web user interface first loads, it will get and display
    all of the existing contacts.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当联系组织器Web用户界面首次加载时，它将获取并显示所有现有的联系人。
- en: The user can then upload a photo of a business card via the web user interface.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户随后可以通过Web用户界面上传名片照片。
- en: 'After the upload is completed, two steps are kicked off:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传完成后，开始两个步骤：
- en: The uploaded business card image is displayed in the user interface.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传的名片图像会显示在用户界面中。
- en: The automated contact information extraction process is started.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化的联系信息提取过程已开始。
- en: When the information extraction is completed, the extracted information is displayed
    to the user for review and correction.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当信息提取完成后，提取的信息会展示给用户，以供审核和修正。
- en: After the user has reviewed and corrected the information, the contact information
    can be persisted after the user clicks the **Save** button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在审核并修正信息后，点击**保存**按钮后，联系信息可以被持久化。
- en: 'We designed the Contact Organizer to have a human-in-the-loop user interface,
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计了联系组织器，使其具有一个人机交互的用户界面，如下所示：
- en: The uploaded business card image is displayed back to the user so that they
    can see the original contact information.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传的名片图像会重新显示给用户，以便他们查看原始联系信息。
- en: The automatically extracted contact information is also displayed to the user,
    along with the business card image.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动提取的联系信息也会与名片图像一起展示给用户。
- en: The user has the option to change or correct any of the extracted information
    from the user interface.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户可以选择从用户界面中更改或修正任何提取的信息。
- en: The user has to explicitly click the Save button, which acts as confirmation
    from a human that the contact information is correct.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户必须明确点击“保存”按钮，作为确认联系信息正确的人的确认。
- en: This human-in-the-loop user interface should not just be an afterthought in
    an intelligence-enabled solution either. Our rule of thumb for evaluating the
    design of such interfaces is that the solution should be fully functional, even
    if the AI capabilities are not present alongside the user interface.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个人机协作的用户界面也不应该仅仅是智能解决方案中的附加部分。我们评估此类界面设计的经验法则是，即使没有与用户界面一起存在的AI功能，解决方案也应该是完全可用的。
- en: Setting up the project structure
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目结构
- en: 'Create a similar base project structure to the one we outlined in [Chapter
    2](https://cdp.packtpub.com/hands_on_artificial_intelligence_on_amazon_web_services/wp-admin/post.php?post=301&action=edit#post_299),
    *Anatomy of a Modern AI Application*, including `pipenv`, `chalice`, and the web
    files:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个类似于我们在[第二章](https://cdp.packtpub.com/hands_on_artificial_intelligence_on_amazon_web_services/wp-admin/post.php?post=301&action=edit#post_299)中概述的基础项目结构，*现代人工智能应用程序的结构*，包括`pipenv`、`chalice`和网页文件：
- en: 'In the terminal, we will create the `root` project directory and enter it with
    the following commands:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，我们将创建`root`项目目录并进入该目录，使用以下命令：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will create placeholders for the web frontend by creating a directory named
    `Website`. Within this directory, we will create two files, `index.html` and `scripts.js`,
    as shown in the following code:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过创建一个名为`Website`的目录来为Web前端创建占位符。在此目录中，我们将创建两个文件，`index.html`和`scripts.js`，如下代码所示：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will create a Python 3 virtual environment with `pipenv` in the project''s
    root directory. Our Python portion of the project needs two packages, `boto3`
    and `chalice`. We can install them with the following commands:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在项目的根目录中创建一个Python 3虚拟环境，并使用`pipenv`。项目中的Python部分需要两个包，`boto3`和`chalice`。我们可以使用以下命令安装它们：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Remember that the Python packages that are installed via `pipenv` are only
    available if we activate the virtual environment. One way to do this is with the
    following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，通过`pipenv`安装的Python包仅在我们激活虚拟环境时才可用。实现这一点的一种方法是使用以下命令：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, while still in the virtual environment, we will create the orchestration
    layer as an AWS Chalice project named `Capabilities` with the following commands:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，仍在虚拟环境中，我们将创建一个名为`Capabilities`的AWS Chalice项目，作为协调层，使用以下命令：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To create the `chalicelib` Python package, issue the following commands:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建`chalicelib` Python包，请执行以下命令：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The initial project structure for Contact Organizer should look as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “联系人组织器”的初始项目结构应如下所示：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This project structure for Contact Organizer contains the user interface, orchestration,
    and service implementations layers of the AI application architecture that we
    defined in [Chapter 2](https://cdp.packtpub.com/hands_on_artificial_intelligence_on_amazon_web_services/wp-admin/post.php?post=301&action=edit#post_299),
    *Anatomy of a Modern AI Application*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个“联系人组织器”项目结构包含了我们在[第二章](https://cdp.packtpub.com/hands_on_artificial_intelligence_on_amazon_web_services/wp-admin/post.php?post=301&action=edit#post_299)中定义的AI应用程序架构的用户界面、协调和服务实现层，*现代人工智能应用程序的结构*。
- en: Implementing services
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现服务
- en: Let's implement the Contact Organizer layer-by-layer, starting with the service
    implementations that contain crucial AI capabilities. Many of the capabilities
    we need for this project, such as detecting text in images and handling file uploads,
    were implemented in previous projects. Services with truly new capabilities are
    the Extraction Service and Contact Store.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐层实现联系人组织器，从包含关键AI功能的服务实现开始。我们在这个项目中需要的许多功能，如检测图像中的文本和处理文件上传，都在之前的项目中实现过。具有真正新功能的服务是提取服务和联系人存储。
- en: Recognition Service – text detection
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别服务 - 文本检测
- en: 'Once again, we are going to leverage the Amazon Rekognition Service to provide
    the capability to detect text in an image. We can reuse the exact same implementation
    of our Recognition Service from the Pictorial Translator project in [Chapter 3](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml),
    *Detecting and Translating Text with Amazon Rekognition and Translate*, as shown
    in the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将利用Amazon Rekognition服务提供检测图像中文本的功能。我们可以重用我们在[第三章](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml)的图像翻译项目中实现的相同Recognition服务，*使用Amazon
    Rekognition和Translate检测与翻译文本*，如下代码所示：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For more details on its implementation and the design choices of the Recognition
    Service, refer to [Chapter 3](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml), *Detecting
    and Translating Text with Amazon Rekognition and Translate*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其实现和识别服务设计选择的更多细节，请参阅[第3章](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml)，*使用Amazon
    Rekognition和Translate检测和翻译文本*。
- en: There is a new Amazon Textract service that can automatically extract text and
    data from scanned documents. Amazon Textract might work just as well for extracting
    text from business cards, but there are a few things to consider. Even though
    business cards are document-like, our application is processing photos of business
    cards, not scanned images.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个新的Amazon Textract服务，可以自动从扫描文档中提取文本和数据。Amazon Textract可能在提取名片文本方面同样有效，但有一些需要考虑的事项。尽管名片类似于文档，但我们的应用程序处理的是名片的照片，而非扫描图像。
- en: Amazon Textract is generally available now; replacing AWS Rekognition because
    of its text extraction capability will make a good feature enhancement exercise
    for this hands-on project. Think about which components and interactions would
    be impacted by this change in our architecture.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Textract现在已全面推出；由于其文本提取能力，取代AWS Rekognition将是一个很好的功能增强练习，适合用于此动手项目。想一想，我们架构中哪些组件和交互会受到这种变化的影响。
- en: Extraction Service – contact information extraction
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取服务 – 联系信息提取
- en: We are going to leverage Amazon Comprehend to extract the contact information
    from the text that's detected on the business cards. First, let's explore this
    service using the AWS CLI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用Amazon Comprehend来提取从名片上检测到的文本中的联系信息。首先，让我们使用AWS CLI探索该服务。
- en: The Contact Organizer needs to extract information from our business cards.
    Typically, text on business cards contains information such as the person's name,
    job title, organization, address, phone number, email, and so on.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人组织者需要从我们的名片中提取信息。通常，名片上的文本包含个人的姓名、职位、组织、地址、电话号码、电子邮件等信息。
- en: 'The following is example text from a made-up contact:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个虚构联系人的示例文本：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s see what Amazon Comprehend can extract from this example text. Issue
    the following AWS CLI command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Amazon Comprehend能从这个示例文本中提取什么。执行以下AWS CLI命令：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Amazon Comprehend extracted some pieces of information, including the organization
    (`ORGANIZATION`), the person's name (`PERSON`), and the address (`LOCATION`).
    However, AWS Comprehend extracted the email and the phone number as `OTHER`, incorrectly
    extracted the zip code as a `DATE`, and failed to extract the job title.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend提取了一些信息，包括组织（`ORGANIZATION`）、个人姓名（`PERSON`）和地址（`LOCATION`）。然而，AWS
    Comprehend将电子邮件和电话号码提取为`OTHER`，错误地将邮政编码提取为`DATE`，并且未能提取职位信息。
- en: Even though the extraction results are not perfect, they can still be leveraged
    by our Contact Organizer application to reduce manual effort on the part of users.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管提取结果并不完美，但我们的联系人组织者应用程序仍然可以利用这些结果，减少用户的手动工作量。
- en: There is a way to improve upon these information extraction results. Amazon
    offers another variant of the Comprehend service called AWS Comprehend Medical.
    This variant of the service specializes in extracting information from various
    medical documents.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以改进这些信息提取结果。亚马逊提供了Comprehend服务的另一个变种，称为AWS Comprehend Medical。该变种专门用于从各种医学文档中提取信息。
- en: One of its features is the extraction of **Protected Health Information** (**PHI**)
    such as name, age, address, phone number, and email. We can leverage this feature
    for our business card information extraction task.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 其特点之一是提取**受保护的健康信息**（**PHI**），例如姓名、年龄、地址、电话号码和电子邮件。我们可以利用此功能来完成名片信息提取任务。
- en: 'Let''s see how this feature performs with the same example text we looked at
    previously. Issue the follow AWS CLI command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个功能在我们之前查看的相同示例文本上表现如何。执行以下AWS CLI命令：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Amazon Comprehend Medical extracted much of the same information as its non-medical
    counterpart. In addition, it extracted the job title (`PROFESSION`), the phone
    number (`PHONE_OR_FAX`), and the email (`EMAIL`). The extracted address (`ADDRESS`)
    also seems more accurate than the non-medical variant. When we combine the results
    from both variants of the Comprehend service, we are able to extract the contact
    information on typical business cards.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend Medical提取了与其非医学对应物大部分相同的信息。此外，它还提取了职位（`PROFESSION`）、电话号码（`PHONE_OR_FAX`）和电子邮件（`EMAIL`）。所提取的地址（`ADDRESS`）似乎比非医学变体更准确。当我们结合Comprehend服务的两个变体的结果时，我们能够提取典型商务卡上的联系信息。
- en: 'With these insights, let''s implement our Extraction Service. Let''s create
    a Python class named `ExtractionService` in the `extraction_service.py` file located
    in the `chalicelib` directory:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些见解，让我们来实现我们的抽取服务。我们将在`chalicelib`目录下的`extraction_service.py`文件中创建一个名为`ExtractionService`的Python类：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code excerpt shows the imports the service needs, as well as the constructor
    method, that instantiates two `boto3` clients for the Amazon Comprehend and the
    Amazon Comprehend Medical services, respectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码摘录显示了服务所需的导入以及构造函数方法，该方法为Amazon Comprehend和Amazon Comprehend Medical服务分别实例化了两个`boto3`客户端。
- en: 'Now let''s see how the `extract_contact_info()` method is implemented with
    these two services:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用这两个服务来实现`extract_contact_info()`方法：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, we can see the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们可以看到以下内容：
- en: The `extract_contact_info()` method calls both variants of Amazon Comprehend
    through `boto3`. The results from both calls are processed and stored in the `contact_info`
    dictionary.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extract_contact_info()`方法通过`boto3`调用了两个Amazon Comprehend变体。来自两个调用的结果被处理并存储在`contact_info`字典中。'
- en: '`contact_info` is declared as a `defaultdict(list)`, which is a dictionary
    data structure where the values are defaulted to an empty list.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contact_info`被声明为`defaultdict(list)`，这是一种字典数据结构，其值默认为空列表。'
- en: 'In practice, multiple results may be extracted for a given type. For example,
    two phone numbers can be extracted from a single business card. This can happen
    for three reasons, as we have observed in our use cases:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，对于给定类型，可能会提取多个结果。例如，单个商务卡可能提取两个电话号码。这可能出现三种情况，正如我们在使用案例中观察到的那样：
- en: The first reason applies when there are actually multiple pieces of information
    for a given type. For example, when there is a phone number and a fax number on
    a business card.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个原因适用于给定类型实际上存在多个信息片段的情况。例如，在商务卡上可能有电话号码和传真号码。
- en: The second reason is that the information is a composite of simpler pieces of
    information. For example, many job titles actually include role names, job levels,
    and specialties.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个原因是信息是较简单信息的组合。例如，许多职位实际上包括角色名称、职位级别和特长。
- en: The third reason is inaccuracies during the extraction process by the Amazon
    Comprehend service. For example, the zip code in the address may be mistakenly
    categorized as the phone number.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个原因是Amazon Comprehend服务在提取过程中可能出现的不准确性。例如，地址中的邮政编码可能被错误地分类为电话号码。
- en: 'The two calls to the two variants of AWS Comprehend are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对两个AWS Comprehend变体的两次调用如下：
- en: The first call is to the `detect_entities()` function of the Amazon Comprehend
    client. From the response, we store the name and organization in `contact_info`.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首次调用是对Amazon Comprehend客户端的`detect_entities()`函数。从响应中，我们将名称和组织存储在`contact_info`中。
- en: The second call is to the `detect_phi()` function of the Amazon Comprehend Medical
    client. From the response, we store the email, phone number, job title, and address
    in `contact_info`.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二次调用是对Amazon Comprehend Medical客户端的`detect_phi()`函数。从响应中，我们将电子邮件、电话号码、职位和地址存储在`contact_info`中。
- en: If there are multiple results for each of these types, they are appended to
    the corresponding list in the `defaultdict(list)` data structure.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每种类型存在多个结果，则将它们附加到`defaultdict(list)`数据结构中相应列表中。
- en: AWS Comprehend extracts the address as a single piece of information. However,
    it would be more useful to store the various pieces of the address, such as city,
    state, and zip code, separately. This will make organizing, searching, and displaying
    contact information easier. In the `extract_contact_info()` method, we also use
    a Python package named `usaddress` to try and parse out the subcomponents of the
    address and then store them separately in the `contact_info` data structure.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Comprehend 将地址提取为一个整体信息。然而，将地址的不同部分（如城市、州和邮政编码）分别存储会更加有用。这将使得联系人信息的组织、搜索和展示更加方便。在
    `extract_contact_info()` 方法中，我们还使用了一个名为 `usaddress` 的 Python 包来尝试解析地址的各个子组件，并将它们单独存储在
    `contact_info` 数据结构中。
- en: Finally, the `extract_contact_info()` method returns `contact_info` as a standard
    Python dictionary.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`extract_contact_info()` 方法将 `contact_info` 返回为一个标准的 Python 字典。
- en: In the Contact Organizer application, the user uploads a photo of a business
    card. Then, the application tries to detect text with AWS Rekognition and feeds
    the detected text to AWS Comprehend to try to extract information. There is also
    a post-processing step for the address to parse out the city, state, and zip code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在联系人管理器应用中，用户上传名片照片。然后，应用使用 AWS Rekognition 尝试检测文本，并将检测到的文本传递给 AWS Comprehend
    以尝试提取信息。地址还会经过一个后处理步骤，解析出城市、州和邮政编码。
- en: We can think of this process as a pipeline with multiple sequential steps; the
    output of a previous step feeds into the next step as input. Just like a game
    of telephone, the final result may be mangled by the output quality of any of
    the steps. The accuracy of the extraction depends on the quality of the photo,
    the detection accuracy of text in the photo, the extraction accuracy of information
    from the text, and the parsing accuracy of the post-processing.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此过程视为一个由多个顺序步骤组成的管道；前一步的输出作为输入传递到下一步。就像一场传话游戏，最终的结果可能会因为任何步骤的输出质量而受到影响。提取的准确性取决于照片的质量、照片中文字检测的准确性、信息提取的准确性以及后处理的解析准确性。
- en: Contact Store – save and retrieve contacts
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系人存储 – 保存和检索联系人
- en: After the user saves the contact information in the Contact Organizer, they
    should be able to retrieve this information. Retrieving data requires data persistence.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在联系人管理器中保存联系人信息后，应该能够检索到这些信息。检索数据需要数据持久性。
- en: In Contact Organizer, we will be leveraging AWS DynamoDB, a highly scalable
    NoSQL database in the cloud. DynamoDB fits well with our serverless architecture
    because developers do not need to manage database servers. Instead, developers
    can create tables that scale with demand automatically. We will be storing and
    retrieving contact information using a DynamoDB table.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在联系人管理器中，我们将使用 AWS DynamoDB，这是一个高度可扩展的云端 NoSQL 数据库。DynamoDB 非常适合我们的无服务器架构，因为开发者不需要管理数据库服务器。相反，开发者可以创建会自动根据需求扩展的表格。我们将使用
    DynamoDB 表格来存储和检索联系人信息。
- en: 'Let''s create a Contacts table using the AWS Web Console:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 AWS Web 控制台创建一个联系人表格：
- en: 'Go to the DynamoDB dashboard page and click on the Create table button:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 DynamoDB 仪表盘页面并点击“创建表”按钮：
- en: '![](img/8490604e-d778-40d0-bb62-71b963ae07a9.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8490604e-d778-40d0-bb62-71b963ae07a9.png)'
- en: 'On the Create DynamoDB table page, set the table name to Contacts and set the
    primary key to name. Since DynamoDB is a NoSQL or document database, we do not
    need to specify the entire database table schema a priori:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建 DynamoDB 表格页面上，将表名设置为 Contacts，并将主键设置为 name。由于 DynamoDB 是一个 NoSQL 或文档数据库，我们不需要预先指定整个数据库表的模式：
- en: '![](img/f81c4cab-f40a-4036-b440-f93491a1303f.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f81c4cab-f40a-4036-b440-f93491a1303f.png)'
- en: Finish the table setup by choosing the Use default settings option and clicking
    Create.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成表格设置，选择“使用默认设置”选项并点击“创建”。
- en: That's it! You just created a web-scale database that can handle more than 10
    trillion requests per day. The best thing is, you don't have to manage it!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你刚刚创建了一个可以处理超过每天 10 万亿次请求的 Web 规模数据库。最棒的是，你无需管理它！
- en: For this simple project, we used the AWS Web Console to create a database table.
    For enterprise-grade applications, we recommend following the best practices in
    line with **Infrastructure as Code** (**IaC**), where infrastructure should be
    provisioned and managed automatically through code or configuration rather than
    by using a manual setup such as with AWS Web Console.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单的项目，我们使用AWS Web控制台创建了一个数据库表。对于企业级应用程序，我们建议遵循符合**基础设施即代码**（**IaC**）的最佳实践，其中基础设施应通过代码或配置自动配置和管理，而不是通过AWS
    Web控制台等手动设置。
- en: The benefits include fast recovery from catastrophic events, rapid experimentation
    of features, and documentation of the system environment setup, to name only a
    few. Boto3 allows you to write Python code to create and configure DynamoDB tables.
    AWS CloudFormation also allows for the automatic creation and configuration of
    DynamoDB and many more AWS services.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 其中的好处包括从灾难性事件中快速恢复、快速实验新功能、以及记录系统环境设置等。Boto3允许您编写Python代码来创建和配置DynamoDB表。AWS
    CloudFormation还允许自动创建和配置DynamoDB以及更多AWS服务。
- en: 'Now with the `Contacts` table created, let''s implement our `ContactStore`
    service. Create a Python class named `ContactStore` in the `contact_store.py`
    file, which is located in the `chalicelib` directory:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Contacts`表已创建，让我们实现我们的`ContactStore`服务。在`chalicelib`目录下的`contact_store.py`文件中创建一个名为`ContactStore`的Python类：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding code, we have the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有以下内容：
- en: The constructor, `__init__()`, creates a `boto3` source for DynamoDB in order
    to get our `Contacts` table. The constructor takes in a parameter for `store_location`
    as the table name in our implementation.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数`__init__()`为DynamoDB创建了一个`boto3`源，以便获取我们的`Contacts`表。构造函数接受一个名为`store_location`的参数，它在我们的实现中作为表名。
- en: The `save_contact()` method takes a Python dictionary data structure containing
    the contact information and stores the contact using the `put_item()` function,
    which takes in the item to be put into the table.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_contact()`方法接受一个包含联系信息的Python字典数据结构，并使用`put_item()`函数存储联系人，该函数接受要插入表中的项。'
- en: 'In `save_contact()`, we are returning the `contact_info` data object to the
    caller. We are trying to conform to the RESTful API convention: when an API creates
    a new resource (contact), it should return the updated resource (contact):'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`save_contact()`中，我们将`contact_info`数据对象返回给调用者。我们尝试遵循RESTful API约定：当API创建一个新资源（联系人）时，应返回更新后的资源（联系人）：
- en: The RESTful convention recommends returning the new representation of the resources'
    state after their creation. For example, a new ID might have been created for
    the resource. However, the `put_item()` function in `boto3` currently does not
    return the new values of the resource. This is fine for Contact Organizer, since
    we chose to use the "name" as the key or the ID for the contact.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful约定建议在创建资源后返回资源状态的新表示。例如，可能为资源创建了一个新的ID。然而，`boto3`中的`put_item()`函数当前不会返回资源的新值。对于联系人管理器来说，这没有问题，因为我们选择使用“名称”作为联系人键或ID。
- en: The `get_all_contacts()` method retrieves all the contacts that have been saved
    in DynamoDB using the `scan()` function. With only the table name provided, the
    `scan()` function returns all the items in the table.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_all_contacts()`方法通过`scan()`函数检索所有已保存到DynamoDB中的联系人。只提供表名的情况下，`scan()`函数将返回表中的所有项目。'
- en: Storage Service – uploading and retrieving a file
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储服务——上传和检索文件
- en: 'We can reuse the exact same implementation of `StorageService` from previous
    projects. We are only providing the methods we need for the current project, as
    follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重用之前项目中`StorageService`的相同实现。我们仅提供当前项目所需的方法，如下所示：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For more details on the implementation and design choices, refer to [Chapter
    3](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml), *Detecting and Translating Text
    with Amazon Rekognition and Translate*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有关实现和设计选择的更多细节，请参见[第3章](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml)，*使用Amazon
    Rekognition和Translate检测和翻译文本*。
- en: Implementing RESTful endpoints
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现RESTful端点
- en: Let's move on to the orchestration layer so that we can stitch together the
    various capabilities we implemented in the services. The RESTful endpoints provide
    HTTP access for the user interface layer to access business capabilities.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入编排层，以便将我们在服务中实现的各种功能整合在一起。RESTful端点为用户界面层提供了HTTP访问，以便访问业务功能。
- en: As we stated previously, the orchestration layer should be concise and easy
    to understand. RESTful endpoints should only be concerned with orchestrating the
    services to form a higher-level business logic and handling HTTP protocol specifics.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，编排层应该简洁且易于理解。RESTful 端点应只关注编排服务，以形成更高层次的业务逻辑并处理 HTTP 协议细节。
- en: One way to evaluate whether the orchestration layer or RESTful endpoints are
    well designed in terms of separation of concerns is to check package imports.
    Does the orchestration layer need to import packages from the services?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 评估编排层或 RESTful 端点在关注点分离方面是否设计良好的一种方法是检查包的导入。编排层是否需要导入来自服务的包？
- en: For example, in our projects, do the RESTful endpoints import a `boto3` that
    interacts with AWS? They shouldn't.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们的项目中，RESTful 端点是否导入了与 AWS 交互的 `boto3`？它们不应该。
- en: Typically, RESTful endpoints will import service implementations (`storage_service`
    and `recognition_service`), programming framework-related packages (`chalice`),
    and protocol-related packages (`JSON` and `CGI`).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，RESTful 端点会导入服务实现（`storage_service` 和 `recognition_service`）、与编程框架相关的包（`chalice`）以及与协议相关的包（`JSON`
    和 `CGI`）。
- en: 'Replace the contents of `app.py` in the Chalice project with the following
    code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换 Chalice 项目中的 `app.py` 内容：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code excerpt handles all package imports, the Chalice app configuration,
    and the instantiation of our four services.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段处理了所有包的导入、Chalice 应用配置以及我们四个服务的实例化。
- en: Extract Image Information endpoint
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取图像信息端点
- en: 'The `extract_image_info()` function implements the RESTful endpoint. Use the
    following code to continue with the Python code in `app.py`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract_image_info()`函数实现了RESTful端点。使用以下代码继续在`app.py`中的Python代码：'
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The annotation right above this function describes the HTTP request that can
    access this endpoint:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该注释位于此函数上方，描述了可以访问此端点的 HTTP 请求：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding code, we have the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有以下内容：
- en: In the `extract_image_info()` function, we call `RecognitionService` to detect
    text in the image and store the detected lines of text in `text_lines`.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `extract_image_info()` 函数中，我们调用 `RecognitionService` 来检测图像中的文本，并将检测到的文本行存储在
    `text_lines` 中。
- en: 'Then, we build a string, `contact_string`, that contains all of the lines of
    detected text with a confidence level is above `MIN_CONFIDENCE`, which is set
    to `70.0`:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们构建一个字符串 `contact_string`，其中包含所有检测到的文本行，且其置信度高于`MIN_CONFIDENCE`，该值被设置为`70.0`：
- en: This `contact_string` is built by joining the detected text with three spaces
    in between. We chose three spaces as the delimiter because detected lines are
    more likely to be related information, and we are hinting that relationship to
    the extraction service with the extra spaces.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个 `contact_string` 是通过将检测到的文本行用三个空格连接起来构建的。我们选择三个空格作为分隔符，因为检测到的行更有可能是相关信息，我们通过额外的空格向提取服务提示这种关系。
- en: We then call the `extract_contact_info()` method of the Extraction Service and
    return the contact info. Remember that `extract_contact_info()` not only calls
    two variants of the Amazon Comprehend service, it also uses the `usaddress` Python
    package to parse out the individual parts of an address.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们调用提取服务的`extract_contact_info()`方法并返回联系信息。请记住，`extract_contact_info()`不仅调用了
    Amazon Comprehend 服务的两个变体，它还使用了`usaddress` Python 包来解析地址的各个部分。
- en: 'Let''s test this endpoint out by running `chalice local` in the Python virtual
    environment and then issue the following `curl` command. Then, we will specify
    an image that has already been uploaded to our S3 bucket:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在 Python 虚拟环境中运行 `chalice local` 来测试这个端点，然后发出以下 `curl` 命令。接下来，我们将指定一个已经上传到
    S3 存储桶中的图像：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is the JSON that our web user interface will receive and use to display
    translations to the user.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的 Web 用户界面将接收的 JSON，并用于向用户显示翻译内容。
- en: Save contact and get all contacts endpoints
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存联系人和获取所有联系人端点
- en: 'The save contact and get all contacts endpoints deal with the saving and retrieval
    of contacts through the Contact Store service:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 保存联系人和获取所有联系人端点通过联系存储服务处理联系人信息的保存和检索：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Their implementations are pretty simple:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的实现非常简单：
- en: 'The `save_contact()` function gets the contact information from the JSON parameters
    in the request''s body. This method then saves the contact using the Contact Store.
    The following code is the HTTP request that can access this endpoint:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_contact()` 函数从请求体中的 JSON 参数获取联系人信息。此方法随后通过联系人存储保存该联系信息。以下代码是可以访问此端点的
    HTTP 请求：'
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `get_all_contacts()` method retrieves all of the saved contacts using the
    Contact Store. The following code is the HTTP request that can access this endpoint:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_all_contacts()`方法通过联系人存储检索所有已保存的联系人。以下代码是可以访问该端点的HTTP请求：'
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s test these endpoints together with a pair of `curl` commands:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一对`curl`命令来一起测试这些端点：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can see the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到以下内容：
- en: The first `POST` command gets the contact representation back as a response
    to conform to the RESTful convention.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个`POST`命令将联系人的表示作为响应返回，以符合RESTful规范。
- en: The second `GET` command gets a list of contacts with the one contact we just
    saved.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个`GET`命令获取一个包含我们刚刚保存的联系人列表的联系人信息。
- en: These are the JSON formats that are used to interact with the web user interface.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用于与网页用户界面交互的JSON格式。
- en: Upload image endpoint
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传图像端点
- en: 'We are reusing the exact same implementation of the upload image endpoint from
    the Pictorial Translator project. For more implementation details and design choices
    for this code snippet. Please refer to [Chapter 3](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml),
    *Detecting and Translating Text with Amazon Rekognition and Translate*:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在重新使用来自Pictorial Translator项目的上传图像端点的相同实现。有关此代码片段的更多实现细节和设计选择，请参阅[第3章](504c5915-cf10-4cd0-8f5c-3c75466f7dc6.xhtml)，*使用Amazon
    Rekognition和Translate检测和翻译文本*：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now the Contact Organizer's orchestration layer is complete.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，联系信息管理器的编排层已经完成。
- en: Implementing the web user interface
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现网页用户界面
- en: Next, we will create a simple web user interface with HTML and JavaScript in
    the `index.html` and `scripts.js` files in the `Website` directory.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`index.html`和`scripts.js`文件中使用HTML和JavaScript创建一个简单的网页用户界面，并将它们放置在`Website`目录中。
- en: 'The following screenshot shows the final web user interface:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了最终的网页用户界面：
- en: '![](img/06e0f314-3f85-40ee-977f-9a21290f2f70.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06e0f314-3f85-40ee-977f-9a21290f2f70.png)'
- en: In the Contact Organizer, the user uploads a photo of a business card and the
    application will do its best to detect the text on the card and extract diverse
    information from the detected text. The application then populates the input fields
    with the extracted information for the user to review and modify.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在联系信息管理器中，用户上传名片的照片，应用程序会尽力检测卡片上的文字并提取其中的信息。然后，应用程序会用提取的信息填充输入框，供用户查看和修改。
- en: If multiple pieces of information were extracted for a certain type, the Contact
    Organizer populates the input field for that type with all the available information.
    For example, if multiple phone numbers were extracted, then the phone input field
    will be populated with all the phone numbers that are available.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果针对某种类型提取了多项信息，联系信息管理器将用所有可用的信息填充该类型的输入框。例如，如果提取了多个电话号码，则电话号码输入框将填充所有可用的电话号码。
- en: This design decision assumes that it is easier for a user to delete surplus
    information than to type in missing information. This assumption sounds valid;
    however, it should be validated with the target audience of the application through
    surveys or user studies. Fine-tuning these design decisions for human-in-the-loop
    user interfaces gives an application a slight edge over the competition.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设计决策假设用户删除多余信息比输入缺失信息更容易。这个假设听起来是合理的；然而，它应该通过调查或用户研究来与应用程序的目标受众进行验证。为了使人机协作用户界面在竞争中稍占优势，需要微调这些设计决策。
- en: Even though we would like an application such as the Contact Organizer to automatically
    extract and save all of the information on the business card, the aim of the Contact
    Organizer is to reduce menial effort as much as possible, while still keeping
    the user in the loop to ensure information accuracy.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们希望像联系信息管理器这样的应用程序能够自动提取并保存名片上的所有信息，但联系信息管理器的目的是尽可能减少繁琐的工作，同时仍然让用户参与，以确保信息的准确性。
- en: The human-in-the-loop user interface has another important benefit. Because
    a human is involved in correcting any mistakes that are made by intelligent automation,
    this is an opportunity to capture training data that can be used to improve the
    automation technology in the future. Users are essentially providing training
    examples to the machine learning algorithm. Remember, better data always wins!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 人机协作用户界面还有另一个重要的好处。因为人类参与了纠正智能自动化所犯的错误，这是一个收集训练数据的机会，可以用于未来改进自动化技术。用户实际上是在为机器学习算法提供训练示例。记住，更好的数据总是能获胜！
- en: Index.html
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Index.html
- en: 'We are using standard HTML tags here, so the code for the web page should be
    easy to follow:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里使用的是标准的 HTML 标签，因此网页的代码应该容易理解：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This preceding HTML code snippet includes the top and bottom portions of the
    web user interface:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 该 HTML 代码片段包含了网页用户界面的顶部和底部部分：
- en: When the web page initially loads, it calls a JavaScript function, `retrieveAndDisplayContacts()`,
    to load existing contacts from the server. This is done in the `<body>` tag's
    onload attribute.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当网页初次加载时，它会调用一个 JavaScript 函数，`retrieveAndDisplayContacts()`，从服务器加载现有联系人。此操作在`<body>`标签的
    onload 属性中完成。
- en: After the contacts are returned from the server, the `retrieveAndDisplayContacts()`
    function then updates `<div id="contacts"/>` to display the existing contacts
    to the user.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当联系人从服务器返回后，`retrieveAndDisplayContacts()` 函数会更新 `<div id="contacts"/>` 以向用户显示现有联系人。
- en: 'The application also provides a Refresh button for the user to reload the contacts
    from the server at any time:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该应用还为用户提供了一个刷新按钮，以便他们随时重新从服务器加载联系人：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This code snippet contains the Contact Organizer's human-in-the-loop interface
    so that it can add new contacts.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码片段包含了联系人管理器的人工干预界面，以便添加新的联系人。
- en: 'There are a few things to point out, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事情需要指出，具体如下：
- en: We are providing an image upload interface that's similar to previous projects.
    We are displaying the uploaded image of a business card to the user. This way,
    the user can view the business card while reviewing and correcting the contact
    information.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提供了一个类似于以往项目的图片上传界面。我们会向用户展示上传的名片图片。这样，用户可以在审查和修改联系人信息时查看名片。
- en: We are providing two columns of input fields for the various contact information
    types.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为各种联系人信息类型提供了两个输入字段列。
- en: We are providing a Save contact button for the user so that they can explicitly
    save contact information. The Save contact button is initially disabled until
    the application receives the extracted information from the server.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为用户提供了一个保存联系人按钮，以便他们可以显式地保存联系人信息。保存联系人按钮在应用程序从服务器接收到提取的信息之前默认是禁用的。
- en: scripts.js
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scripts.js
- en: 'The first part of the Contact Organizer''s `scripts.js` file is the same implementation
    of image upload from the Pictorial Translator project:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人管理器的 `scripts.js` 文件的第一部分是来自《图像翻译器》项目中图像上传的相同实现：
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding code, we implemented the `uploadImage()` and `updateImage()`
    functions, which we will need later:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们实现了 `uploadImage()` 和 `updateImage()` 函数，我们将在后续使用到它们：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding code snippet, we implement the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们实现了以下内容：
- en: The `extractInformation()` function, which calls the Extract Information endpoint
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extractInformation()` 函数，调用提取信息端点'
- en: The `populateFields()` function, which fills input fields with extracted contact
    information
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populateFields()` 函数，用于填充输入字段并提取联系人信息'
- en: 'The `uploadAndExtract()` function chains, along with the `uploadImage()`, `updateImage()`,
    `extractInformation()`, and `populateFields()` functions, to compose the business
    logic flow when the user clicks on the Extract Info button:'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uploadAndExtract()` 函数与 `uploadImage()`、`updateImage()`、`extractInformation()`
    和 `populateFields()` 函数连接在一起，组成了用户点击提取信息按钮时的业务逻辑流程：'
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the preceding code snippet, the following things occur:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，发生了以下事情：
- en: The `saveContact()` function gets a value from every input field and then creates
    the `contactInfo` data structure. This function then sends the data in `contactInfo`
    to the server for persistence.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`saveContact()` 函数从每个输入字段获取一个值，然后创建 `contactInfo` 数据结构。该函数随后将 `contactInfo`
    数据发送到服务器以进行持久化存储。'
- en: If the response from the server is `ok`, it means the contact has been saved.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果服务器的响应是 `ok`，则意味着联系人已被保存。
- en: Then, this function calls the `clearContact()` function to clear the values
    of the input fields and the image display.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，这个函数调用 `clearContact()` 函数来清空输入字段的值和图片显示。
- en: 'The following is the code for the `clearContact()` helper function:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `clearContact()` 辅助函数的代码：
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `clearContact()` helper function from the preceding code prepares the user
    interface to process another business card. Let''s have a look at the following
    code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的 `clearContact()` 辅助函数准备用户界面以处理另一张名片。让我们看一下以下代码：
- en: '[PRE30]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding code snippet, the following occurs:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，发生了以下情况：
- en: The `retrieveContacts()` function calls the server to retrieve all existing
    contacts.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`retrieveContacts()` 函数调用服务器以获取所有现有联系人。'
- en: The `displayContacts()` function takes the contacts and displays them at the
    bottom of the Contacts Organizer user interface.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`displayContacts()`函数获取联系人并在联系人管理器用户界面的底部显示它们。'
- en: 'The `retrieveAndDisplayContacts()` function chains together the business logic
    flow when the web interface is initially loaded or when the user clicks on the
    Refresh button:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`retrieveAndDisplayContacts()`函数在网页界面初次加载或用户点击刷新按钮时，串联起业务逻辑流：'
- en: '[PRE31]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This code snippet shows the gory details of generating HTML to display a list
    of contacts, the contact information, and the business card image.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了生成HTML以显示联系人列表、联系人信息和名片图像的详细过程。
- en: As you can see in the `displayContacts()` function, there is a lot of JavaScript
    code being used to generate HTML. Using a combination of business logic and display
    logic is considered bad practice.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在`displayContacts()`函数中所见，使用了大量的JavaScript代码来生成HTML。将业务逻辑和显示逻辑混合使用是不推荐的做法。
- en: We highly recommend leveraging a JavaScript framework such as Angular, React,
    or Vue to better implement the **Model View Control** (**MVC**) design pattern
    for the user interface. To limit the scope of this book, we had no choice but
    to deal with code ugliness in our hands-on projects.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议使用如Angular、React或Vue等JavaScript框架，更好地实现**模型视图控制**（**MVC**）设计模式来构建用户界面。为了限制本书的范围，我们别无选择，只能在实践项目中应对代码的丑陋。
- en: Deploying the Contact Organizer to AWS
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将联系人管理器部署到AWS
- en: 'The deployment steps for the Contact Organizer application are similar, but
    slightly different from, the deployment steps in the previous projects we covered.
    Let''s get started:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人管理器应用的部署步骤与我们之前涉及的其他项目的部署步骤相似，但略有不同。让我们开始吧：
- en: 'For the Contact Organizer, we need to add additional Python packages to the
    AWS Lambda environment. We do this by adding two packages to the `requirements.txt`
    file:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于联系人管理器，我们需要向AWS Lambda环境添加额外的Python包。我们通过向`requirements.txt`文件中添加两个包来实现：
- en: The `usaddress` package is used to parse the various parts of the address, such
    as city, state, zip, and so on.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usaddress`包用于解析地址的各个部分，如城市、州、邮政编码等。'
- en: 'The `boto3` package is specified here because we need a specific version. At
    the time of writing, the `boto3` version in the AWS Lambda environment does not
    support the `comprehendmedical` service; we need a newer version for this project:'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里指定了`boto3`包，因为我们需要特定的版本。在撰写时，AWS Lambda环境中的`boto3`版本不支持`comprehendmedical`服务；我们需要为这个项目使用更新的版本：
- en: '[PRE32]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, let''s tell Chalice to perform a policy analysis for us by setting `"autogen_policy"`
    to `false` in the `config.json` file in the `.chalice` directory of the project
    structure:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们通过将`"autogen_policy"`设置为`false`，在项目结构中的`.chalice`目录下的`config.json`文件中告诉Chalice为我们执行策略分析：
- en: '[PRE33]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, we create a new file, `policy-dev.json`, in the `.chalice` directory
    to manually specify the AWS services the project needs:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在`.chalice`目录下创建一个新文件`policy-dev.json`，手动指定项目所需的AWS服务：
- en: '[PRE34]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, we deploy the Chalice backend to AWS by running the following command
    within the `Capabilities` directory:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们通过在`Capabilities`目录下运行以下命令将Chalice后端部署到AWS：
- en: '[PRE35]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When the deployment is complete, Chalice will output a RESTful API URL that
    looks similar to `https://<UID>.execute-api.us-east-1.amazonaws.com/api/`, where
    `<UID>` is a unique identifier string. This is the server URL your frontend app
    should hit to access the application backend running on AWS.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，Chalice会输出一个类似于`https://<UID>.execute-api.us-east-1.amazonaws.com/api/`的RESTful
    API URL，其中`<UID>`是唯一的标识符字符串。这是你的前端应用应该访问的服务器URL，后端应用则运行在AWS上。
- en: 'Next, we will upload the `index.html` and `scripts.js` files to this S3 bucket,
    then set the permissions as `publicly readable`. Before we do that, we need to
    make a change in `scripts.js`, as follows. Remember, the website will be running
    in the cloud now and won''t have access to our local HTTP server. Replace the
    local server URL with the one from our backend deployment:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把`index.html`和`scripts.js`文件上传到该S3存储桶，然后设置权限为`公开可读`。在此之前，我们需要对`scripts.js`进行如下修改。记住，网站现在将运行在云端，无法访问我们本地的HTTP服务器。请将本地服务器URL替换为我们后端部署的URL：
- en: '[PRE36]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now the Contact Organizer application is publicly accessible to everyone on
    the internet.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，联系人管理器应用对所有人公开可访问。
- en: As it is implemented in this chapter, the Contact Organizer shows anyone who
    has the URL for the application all of the saved contact information. We do not
    recommend leaving any personally identifiable information out in the open on the
    internet.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章所述，联系人组织器向任何拥有该应用程序 URL 的人展示所有保存的联系人信息。我们不建议在互联网上公开任何个人可识别的信息。
- en: One way to protect this information is to add authentication and authorization
    features to Contact Organizer. These features are beyond the scope of this book,
    but they are interesting enhancements for this project.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 保护这些信息的一种方法是为联系人组织器添加身份验证和授权功能。这些功能超出了本书的范围，但它们是该项目的有趣增强功能。
- en: Discussing the project enhancement ideas
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论项目增强的思路
- en: 'At the end of each hands-on project in Part 2, we provide you with a few ideas
    to extend our intelligence-enabled application. The following are a couple of
    ideas for enhancing the Contact Organizer:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分每个实践项目的结尾，我们为您提供了一些扩展我们智能应用程序的思路。以下是一些增强联系人组织器的想法：
- en: Use the Amazon Textract service to create another implementation of the Recognition
    Service. Textract provides an **Optical Character Recognition** (**OCR**) capability
    that's much better suited for documents with a large amount of text. Depending
    on the business card's appearance, environment lighting, and photo quality, Textract
    might provide better text detection performance.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Textract 服务创建识别服务的另一种实现。Textract 提供了**光学字符识别**（**OCR**）功能，更适用于具有大量文本的文档。根据名片的外观、环境光照和照片质量，Textract
    可能提供更好的文本检测性能。
- en: The intelligent capabilities and the user interface we created for Contact Organizer
    can also be used for other use cases, such as data extraction from business documents,
    summarizing school notes, and categorizing customer requests. The raw text doesn't
    even need to come from images; other sources can include emails, phone calls,
    and even social media. Think about use cases where you might use a similar human-in-the-loop
    user interface and intelligent capabilities.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为联系人组织器创建的智能功能和用户界面也可以应用于其他用例，例如从商业文档中提取数据、总结学校笔记和分类客户请求。原始文本甚至不需要来自图像；其他来源可以包括电子邮件、电话甚至社交媒体。想一想您可能在什么用例中使用类似的人工介入用户界面和智能功能。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built a Contact Organizer application that can extract contact
    information from uploaded photos of business cards. We used two variants of the
    Amazon Comprehend service, Amazon Comprehend and Amazon Comprehend Medical, to
    extract different types of contact information. The Contact Organizer has a human-in-the-loop
    user interface, where the user can review and correct automatically extracted
    information before saving it to the Contact Store. We noted that the human-in-the-loop
    user interface should provide business value, even if AI capabilities are not
    present in the solution. As AI practitioners, we don't always have to provide
    fully automated solutions—there is value in providing intelligent assistive solutions,
    which can be much more feasible to build and maintain as long as they are well
    designed with the human component in mind.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个联系人组织器应用程序，可以从上传的名片照片中提取联系信息。我们使用了亚马逊 Comprehend 服务的两个变体——Amazon
    Comprehend 和 Amazon Comprehend Medical，来提取不同类型的联系信息。联系人组织器具有一个人工介入的用户界面，用户可以在将信息保存到联系人存储库之前，查看并修正自动提取的信息。我们注意到，人工介入的用户界面应该提供商业价值，即使解决方案中没有
    AI 能力。作为 AI 从业者，我们并不总是需要提供完全自动化的解决方案——提供智能辅助解决方案也有其价值，只要设计得当，并且考虑到人的因素，它们通常更容易构建和维护。
- en: In the next chapter, we will build an AI solution that can communicate with
    us using natural conversational interfaces. We will be using AI technologies that
    are at the heart of the popular Alexa smart speakers.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个 AI 解决方案，能够通过自然对话界面与我们进行交流。我们将使用流行的 Alexa 智能音响中所使用的核心 AI 技术。
- en: Further reading
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'For more information on extracting information from text with Amazon Comprehend,
    please refer to the following links:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解有关使用 Amazon Comprehend 从文本中提取信息的更多信息，请参考以下链接：
- en: '[https://www.mckinsey.com/featured-insights/future-of-work/ai-automation-and-the-future-of-work-ten-things-to-solve-for](https://www.mckinsey.com/featured-insights/future-of-work/ai-automation-and-the-future-of-work-ten-things-to-solve-for)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.mckinsey.com/featured-insights/future-of-work/ai-automation-and-the-future-of-work-ten-things-to-solve-for](https://www.mckinsey.com/featured-insights/future-of-work/ai-automation-and-the-future-of-work-ten-things-to-solve-for)'
- en: '[https://builtin.com/artificial-intelligence/examples-ai-in-industry](https://builtin.com/artificial-intelligence/examples-ai-in-industry)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://builtin.com/artificial-intelligence/examples-ai-in-industry](https://builtin.com/artificial-intelligence/examples-ai-in-industry)'
