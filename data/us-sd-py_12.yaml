- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Scheduled Prompt Parsing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时提示解析
- en: In [*Chapter 10*](B21263_10.xhtml#_idTextAnchor197), we discussed how to unlock
    the 77-token prompt limitation and a solution to enable prompt weighting, which
    paved the way for this chapter. With the knowledge from [*Chapter 10*](B21263_10.xhtml#_idTextAnchor197),
    we can generate various kinds of images by leveraging the power of natural language
    and weighting formats. However, there are some limitations inherent in the out-of-the-box
    code from the Hugging Face Diffusers package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第10章*](B21263_10.xhtml#_idTextAnchor197)中，我们讨论了如何解锁77个令牌的提示限制以及启用提示权重的解决方案，这为本章铺平了道路。凭借[*第10章*](B21263_10.xhtml#_idTextAnchor197)中的知识，我们可以利用自然语言和权重格式生成各种类型的图像。然而，Hugging
    Face Diffusers包的现成代码中存在一些固有的限制。
- en: For example, we cannot write a prompt to ask Stable Diffusion to generate a
    cat in the first five steps and then a dog in the next five steps. Similarly,
    we cannot write a prompt to ask Stable Diffusion to blend two concepts by alternately
    denoising the two concepts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们不能编写一个提示来要求Stable Diffusion在前五步生成一只猫，然后在接下来的五步生成一只狗。同样，我们也不能编写一个提示来要求Stable
    Diffusion通过交替去噪两个概念来实现两个概念的混合。
- en: 'In this chapter, we will explore the two solutions in the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题中的两种解决方案：
- en: Using the Compel package
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Compel包
- en: Building a custom scheduled prompt pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义定时提示管道
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started with the code in this chapter, you will need to install the necessary
    packages for running Stable Diffusion. For detailed instructions on how to set
    up these packages, refer to [*Chapter 2*](B21263_02.xhtml#_idTextAnchor037).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章中的代码，您需要安装运行Stable Diffusion所需的必要包。有关如何设置这些包的详细说明，请参阅[*第2章*](B21263_02.xhtml#_idTextAnchor037)。
- en: In addition to the packages required by Stable Diffusion, you will also need
    to install the `Compel` package for the *Using the Compel package* section, and
    the `lark` package for the *Building a custom scheduled prompt* *pipeline* section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Stable Diffusion所需的包之外，您还需要为*使用Compel包*部分安装`Compel`包，以及为*构建自定义定时提示* *管道*部分安装`lark`包。
- en: I will provide step-by-step instructions for installing and using these packages
    in each section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提供在每个部分中安装和使用这些包的逐步说明。
- en: Using the Compel package
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Compel包
- en: Compel [1] is an open source text prompt-weighting and blending library developed
    and maintained by Damian Stewart. It is one of the easiest ways to enable blending
    prompts in Diffusers. This package also has the capability to apply weighting
    to prompts, similar to the solution we implemented in [*Chapter 10*](B21263_10.xhtml#_idTextAnchor197),
    but with a different weighting syntax. In this chapter, I will introduce the blending
    feature that can help us write a prompt to generate an image with two or more
    concepts blended.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Compel [1] 是由Damian Stewart开发和维护的一个开源文本提示权重和混合库。它是使Diffusers中的提示混合变得最容易的方法之一。此包还具有对提示应用权重的功能，类似于我们在[*第10章*](B21263_10.xhtml#_idTextAnchor197)中实现的解决方案，但具有不同的权重语法。在本章中，我将介绍可以帮助我们编写生成具有两个或更多概念混合的图像的提示的混合功能。
- en: 'Imagine that we want to create a photo that is half cat and half dog. How would
    we do it with prompts? Let’s say we simply give Stable Diffusion the following
    prompt:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要创建一张半猫半狗的照片。我们如何使用提示来完成？让我们假设我们只是给Stable Diffusion以下提示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here are the lines of Python code (without using Compel):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Python代码行（不使用Compel）：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see the result shown in *Figure 12**.1*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到*图12.1*所示的结果：
- en: '![Figure 12.1: Result of the A photo with half cat and half dog prompt](img/B21263_12_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1：半猫半狗照片提示的结果](img/B21263_12_01.jpg)'
- en: 'Figure 12.1: Result of the A photo with half cat and half dog prompt'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：半猫半狗照片提示的结果
- en: The word `half` should be applied to the photo itself, rather than the image.
    In this case, we can use Compel to help generate a text embedding that blends
    cat and dog.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单词`half`应该应用于照片本身，而不是图像。在这种情况下，我们可以使用Compel来帮助生成一个混合猫和狗的文本嵌入。
- en: 'Before importing the `Compel` package, we will need to install the package:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入`Compel`包之前，我们需要安装该包：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that the reason the `Compel` package works with Diffusers is that the
    package produces text embedding using `tokenizer` (type: `transformers.models.clip.tokenization_clip.CLIPTokenizer`)
    and `text_encoder` (type: `transformers.models.clip.modeling_clip.CLIPTextModel`)
    from the Stable Diffusion model file. We should also be aware of this during the
    initialization of the `Compel` object:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`Compel` 包之所以能与 Diffusers 一起使用，是因为该包使用 `tokenizer`（类型：`transformers.models.clip.tokenization_clip.CLIPTokenizer`）和
    `text_encoder`（类型：`transformers.models.clip.modeling_clip.CLIPTextModel`）从 Stable
    Diffusion 模型文件生成文本嵌入。我们也应该在初始化 `Compel` 对象时意识到这一点：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `pipeline` (type: `StableDiffusionPipeline`) is the Stable Diffusion pipeline
    we just created. Next, create a blend prompt using the following format:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`pipeline`（类型：`StableDiffusionPipeline`）是我们刚刚创建的 Stable Diffusion 管道。接下来，使用以下格式创建一个混合提示：'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, feed the text embedding into the Stable Diffusion pipeline through the
    `prompt_embeds` parameter:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过 `prompt_embeds` 参数将文本嵌入输入到 Stable Diffusion 管道中：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will see a pet that looks like a cat and also a dog, as shown in *Figure
    12**.2*:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一只看起来像猫也像狗的宠物，如图 *图 12*.2 所示：
- en: '![Figure 12.2: A blended photo – half cat and half dog – using Compel](img/B21263_12_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2：使用 Compel 混合的图片 – 一半猫，一半狗](img/B21263_12_02.jpg)'
- en: 'Figure 12.2: A blended photo – half cat and half dog – using Compel'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：使用 Compel 混合的图片 – 一半猫，一半狗
- en: 'We can change the proposition number of the blend to have more `cat` or more
    `dog`. Let’s change the prompt to this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改变混合的命题数量，以获得更多 `猫` 或更多 `狗`。让我们将提示更改为以下内容：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will get a photo slightly more like a cat, as shown in *Figure 12**.3*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到一张稍微更像猫的图片，如图 *图 12*.3 所示：
- en: '![Figure 12.3: A blended photo of a cat and dog using Compel – 70% cat, 30%
    dog](img/B21263_12_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3：使用 Compel 混合猫和狗的图片 – 70% 猫，30% 狗](img/B21263_12_03.jpg)'
- en: 'Figure 12.3: A blended photo of a cat and dog using Compel – 70% cat, 30% dog'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3：使用 Compel 混合猫和狗的图片 – 70% 猫，30% 狗
- en: Compel can do more than just prompt blending; it can also provide `weighted`
    and `and` conjunction prompts. You can explore more usage examples and features
    in its Syntax Features [2] documentation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Compel 可以做的不仅仅是提示混合；它还可以提供 `加权` 和 `和` 连接提示。您可以在其语法功能 [2] 文档中探索更多使用示例和功能。
- en: 'While it is easy to use Compel to blend prompts, as we have seen in the previous
    example, a blending prompt like the one that follows is strange and unintuitive
    for day-to-day use:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用 Compel 混合提示很容易，就像我们在前面的例子中看到的那样，但以下这种混合提示在日常使用中既奇怪又难以理解：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Upon my initial review of the sample code from the Compel repository, I was
    intrigued by the following line: `("A photo of cat", "A photo of dog").blend(0.7,
    0.3)`. This string prompts several questions, such as how can the `blend()` function
    be invoked? However, it becomes clear that `blend()` is part of the prompt string
    and not a function that can be invoked within the Python code.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我对 Compel 仓库中的示例代码进行初步审查时，我对以下行感到好奇：`("A photo of cat", "A photo of dog").blend(0.7,
    0.3)`。这行代码引发了一些问题，例如 `blend()` 函数是如何调用的？然而，很明显，`blend()` 是提示字符串的一部分，而不是可以在 Python
    代码中调用的函数。
- en: 'In contrast, the prompt blending or scheduling feature of Stable Diffusion
    WebUI [3] is relatively more user-friendly. The syntax allows us to achieve the
    same blending effect with a prompt syntax like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Stable Diffusion WebUI [3] 的提示混合或计划功能相对更易于用户使用。语法允许我们使用如下提示语法达到相同的混合效果：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This scheduled prompt in Stable Diffusion WebUI will render a photo of a cat
    during the first 50% of the steps and a photo of a dog during the last 50% of
    the steps.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Stable Diffusion WebUI 中的此计划提示将在步骤的前 50% 生成一张猫的图片，在步骤的最后 50% 生成一张狗的图片。
- en: 'Alternatively, you can use the `|` operator to alternate the prompt:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 `|` 运算符来交替提示：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding scheduled prompt will alternate between rendering photos of a
    cat and a dog. In other words, it will render a photo of a cat in one step and
    a photo of a dog in the next step, continuing this pattern until the end of the
    entire rendering process.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述计划提示将在渲染猫和狗的图片之间交替。换句话说，它将在一个步骤中渲染一张猫的图片，在下一个步骤中渲染一张狗的图片，并继续这种模式，直到整个渲染过程的结束。
- en: These two scheduling features can also be achieved by Diffusers. In the following
    section, we will explore how to implement both of these advanced prompt scheduling
    features for Diffusers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个调度功能也可以通过 Diffusers 实现。在下一节中，我们将探讨如何为 Diffusers 实现这两个高级提示调度功能。
- en: Building a custom scheduled prompt pipeline
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义计划提示管道
- en: As we discussed in [*Chapter 5*](B21263_05.xhtml#_idTextAnchor097), the generation
    process utilizes input prompt embedding to denoise an image at each step. By default,
    every denoising step employs the exact same embedding. However, to gain more precise
    control over the generation, we can modify the pipeline code to supply unique
    embeddings for each denoising step.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [*第五章*](B21263_05.xhtml#_idTextAnchor097) 中讨论的那样，生成过程利用输入提示嵌入在每个步骤中去噪图像。默认情况下，每个去噪步骤都使用完全相同的嵌入。然而，为了获得更精确的生成控制，我们可以修改管道代码以为每个去噪步骤提供唯一的嵌入。
- en: 'Take, for instance, the following prompt:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下提示为例：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'During a total of 10 denoising steps, we hope the pipeline can remove noise
    in the first 5 steps to reveal `A photo of cat`, and the following 5 steps to
    reveal `A photo of dog`. To make this happen, we will need to implement the following
    components:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在总共 10 个去噪步骤中，我们希望管道能在前 5 步去除噪声以揭示 `A photo of cat`，在接下来的 5 步去除噪声以揭示 `A photo
    of dog`。为了实现这一点，我们需要实现以下组件：
- en: A prompt parser capable of extracting the scheduling number from the prompt
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个能够从提示中提取调度号的提示解析器
- en: A method to embed the prompts and create a list of prompt embeddings that matches
    the number of steps
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种将提示嵌入并创建与步骤数量相匹配的提示嵌入列表的方法
- en: A new `pipeline` class derived from the Diffusers pipeline, enabling us to incorporate
    our new functionality into the pipeline while preserving all existing features
    of the Diffusers pipeline
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个从 Diffusers 管道派生的新 `pipeline` 类，使我们能够将我们的新功能集成到管道中，同时保留 Diffusers 管道的所有现有功能
- en: Next, let’s implement the formatted prompt parser.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现格式化的提示解析器。
- en: A scheduled prompt parser
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个计划好的提示解析器
- en: The open sourced Stable Diffusion WebUI project’s source code reveals that we
    can use `lark` [4] – a parsing toolkit for Python. We will also use the `lark`
    package to parse the scheduled prompt for our own prompt parser.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 开源 Stable Diffusion WebUI 项目的源代码显示，我们可以使用 `lark` [4] – 一个 Python 的解析工具包。我们还将使用
    `lark` 包来解析我们自己的提示解析器的计划提示。
- en: 'To install `lark`, run the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `lark`，请运行以下命令：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The Stable Diffusion WebUI compatible prompt is defined in the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Stable Diffusion WebUI 兼容的提示定义在以下代码中：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you decide to get up to your neck in the syntax swamp to fully understand
    every line of the definition, the `lark` document [5] is the place to go.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定深入语法沼泽，完全理解定义中的每一行，那么 `lark` 文档 [5] 是你该去的地方。
- en: 'Next, we’ll use the Python function from the SD WebUI code repository. This
    function utilizes the Lark `schedule_parser` syntax definition to parse the input
    prompt:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用来自 SD WebUI 代码库的 Python 函数。此函数使用 Lark `schedule_parser` 语法定义来解析输入提示：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set the total denoising steps to 10, and give a shorter name, `g`, for this
    function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将总去噪步骤数设置为 10，并为该函数提供一个更短的名字，`g`：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let’s throw some prompts to the function to see the parsing results:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向函数投掷一些提示以查看解析结果：
- en: 'Test #1: `cat`:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '测试 #1: `cat`：'
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding code will parse the `cat` input text as the following string:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将解析 `cat` 输入文本为以下字符串：
- en: '[PRE16]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The result indicates that all 10 steps will use `cat` to generate the image.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果表明所有 10 个步骤都将使用 `cat` 生成图像。
- en: 'Test #2: `[cat:dog:0.5]`:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '测试 #2: `[cat:dog:0.5]`：'
- en: 'Change the prompt to `[cat:dog:0.5]`:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将提示更改为 `[cat:dog:0.5]`：
- en: '[PRE17]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The function will generate the following result:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数将生成以下结果：
- en: '[PRE18]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The result means using `cat` for the first 5 steps, and `dog` for the last 5
    steps.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果意味着前 5 步使用 `cat`，最后 5 步使用 `dog`。
- en: 'Test #3: `[cat|dog]`:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '测试 #3: `[cat|dog]`：'
- en: 'The function also supports alternative scheduling. Change the prompt to `[cat
    | dog]`, with an “or” `|` operator in the middle of the two names:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该函数还支持替代调度。将提示更改为 `[cat | dog]`，在两个名称中间有一个“或” `|` 操作符：
- en: '[PRE19]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The prompt parser will generate the following result:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示解析器将生成以下结果：
- en: '[PRE20]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In other words, it alternates the prompt for each denoising step.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，它为每个去噪步骤交替提示。
- en: So far, it works well in terms of parsing. However, before feeding it to the
    pipeline, additional work needs to be done.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，它在解析方面工作得很好。然而，在将其馈送到管道之前，还需要做一些额外的工作。
- en: Filling in the missing steps
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填补缺失的步骤
- en: 'In *Test #2*, the generated result includes only two elements. We need to expand
    the result list to cover each step:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '在 *测试 #2* 中，生成的结果只包含两个元素。我们需要扩展结果列表以涵盖每个步骤：'
- en: '[PRE30]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This Python function, `parse_scheduled_prompts`, takes two arguments: `text`
    and `steps` (with a default value of 10). The function processes the given text
    to generate a list of prompts based on a learned conditioning schedule.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Python 函数 `parse_scheduled_prompts` 接受两个参数：`text` 和 `steps`（默认值为 10）。该函数处理给定的文本，根据学习到的条件调度生成提示列表。
- en: 'Here’s a step-by-step explanation of what the function does:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对函数功能的逐步解释：
- en: Use a `try-except` block to call the `get_learned_conditioning_prompt_schedules`
    function with the processed text and the specified number of steps. The result
    is stored in `parse_result`. If there’s an exception – say, a syntax error, it
    will be caught and printed.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `try-except` 块调用 `get_learned_conditioning_prompt_schedules` 函数，传入处理后的文本和指定的步数。结果存储在
    `parse_result` 中。如果有异常——比如语法错误，它将被捕获并打印。
- en: If the length of `parse_result` is 1, return `parse_result` as the final output.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `parse_result` 的长度为 1，则将 `parse_result` 作为最终输出返回。
- en: 'Loop through the range of steps and perform the following actions:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环遍历步数的范围并执行以下操作：
- en: Get the current prompt step and content from `parse_result`.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `parse_result` 获取当前的提示步骤和内容。
- en: Increment the loop counter `i` by `1` and store it in the variable step.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将循环计数器 `i` 增加 `1` 并将其存储在变量 step 中。
- en: If `step` is less than the current prompt step, append the current prompt content
    to `prompts_list` and continue to the next iteration.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `step` 小于当前的提示步骤，则将当前提示内容添加到 `prompts_list` 并继续到下一个迭代。
- en: If `step` is equal to the current prompt step, append the current prompt content
    to `prompts_list` and remove the first element from `parse_result`.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `step` 等于当前的提示步骤，则将当前提示内容添加到 `prompts_list` 并从 `parse_result` 中移除第一个元素。
- en: Return the `prompts_list` as the final output.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `prompts_list` 作为最终输出返回。
- en: The function essentially generates a list of prompts based on the learned conditioning
    schedule, with each prompt being added to the list according to the specified
    number of steps.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 函数本质上基于学习到的条件调度生成提示列表，每个提示根据指定的步数添加到列表中。
- en: 'Let’s call this function to test it out:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调用这个函数来测试它：
- en: '[PRE31]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will get a prompt list as shown here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到如下所示的提示列表：
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Five prompts for `cat`, and five prompts for `dog` – each denoising step will
    take one of the prompts.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 五个针对 `cat` 的提示和五个针对 `dog` 的提示——每个去噪步骤将使用其中一个提示。
- en: A Stable Diffusion pipeline supporting scheduled prompts
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持计划提示的 Stable Diffusion 管道
- en: Until now, all prompts are still in plain text form. We will need to use custom
    embedding code to encode unlimited and weighted prompts into embeddings, or we
    can simply use the default encoder from Diffusers to generate embeddings but with
    a 77-token limitation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有提示都仍然是纯文本形式。我们需要使用自定义嵌入代码将无限和加权提示编码为嵌入，或者我们可以简单地使用 Diffusers 的默认编码器生成嵌入，但有一个
    77 个标记的限制。
- en: To make the logic easier and more concise to follow, we will use the default
    text encoder in this section. Once we figure out how it works, it will be easy
    to swap the encoder with the more powerful one we built in [*Chapter 10*](B21263_10.xhtml#_idTextAnchor197).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使逻辑更容易和更简洁地跟踪，我们将在此部分使用默认文本编码器。一旦我们弄清楚它是如何工作的，就很容易将其与我们在 [*第 10 章*](B21263_10.xhtml#_idTextAnchor197)
    中构建的更强大的编码器交换。
- en: 'Since we will perform a minor surgical operation on the original Diffusers
    Stable Diffusion pipeline to support this embedding list, the operation includes
    creating a new pipeline class inherited from the Diffusers pipeline. We can directly
    reuse the tokenizer and text encoder from the initialized pipeline by using the
    following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将对原始 Diffusers Stable Diffusion 管道进行小手术以支持此嵌入列表，操作包括创建一个新的继承自 Diffusers
    管道的管道类。我们可以通过以下代码直接重用初始化管道中的分词器和文本编码器：
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'I will further explain the preceding code next. We will implement the whole
    logic in the `scheduler_call` function (similar to the `__call__` function of
    `StableDiffusionPipeline`):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一部分进一步解释前面的代码。我们将在 `scheduler_call` 函数中实现整个逻辑（类似于 `StableDiffusionPipeline`
    的 `__call__` 函数）：
- en: '[PRE34]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This Python function, `scheduler_call`, is a method of the `StableDiffusionPipeline_EXT`
    class, which is a subclass of `StableDiffusionPipeline`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Python 函数 `scheduler_call` 是 `StableDiffusionPipeline_EXT` 类的一个方法，该类是 `StableDiffusionPipeline`
    的子类。
- en: 'Here are the steps to implement the whole logic:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 实现整个逻辑的步骤如下：
- en: 'Set the default scheduler to `EulerDiscreteScheduler` for a better generation
    result:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认调度器设置为 `EulerDiscreteScheduler` 以获得更好的生成结果：
- en: '[PRE35]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Prepare the `device` and `do_classifier_free_guidance` parameters:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备 `device` 和 `do_classifier_free_guidance` 参数：
- en: '[PRE39]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Call the `parse_scheduled_prompts` function to have the `prompt_list` prompt
    list. This is the function we built in the previous section of this chapter:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`parse_scheduled_prompts`函数以获取`prompt_list`提示列表。这是我们在此章节前一部分构建的函数：
- en: '[PRE41]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If no scheduled prompt is found, use the normal single-prompt logic:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有找到计划中的提示，则使用正常的单提示逻辑：
- en: '[PRE42]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In *step 4*, the function processes the input prompt(s) to generate the prompt
    embeddings. The input prompt can be a single string or a list of strings. The
    function first parses the input prompt(s) into a list called `prompt_list`. If
    there is only one prompt in the list, the function directly encodes the prompt
    using the `_encode_prompt` method and stores the result in `prompt_embeds`. If
    there are multiple prompts, the function iterates through `prompt_list` and encodes
    each prompt separately using the `_encode_prompt` method. The resulting embeddings
    are stored in `embedding_list`.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*步骤4*中，函数处理输入提示以生成提示嵌入。输入提示可以是一个字符串或字符串列表。函数首先将输入提示（s）解析为名为`prompt_list`的列表。如果列表中只有一个提示，则函数直接使用`_encode_prompt`方法编码提示并将其结果存储在`prompt_embeds`中。如果有多个提示，则函数遍历`prompt_list`并使用`_encode_prompt`方法分别编码每个提示。生成的嵌入存储在`embedding_list`中。
- en: 'Prepare timesteps for the diffusion process:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备扩散过程的timesteps：
- en: '[PRE63]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Prepare latent variables to initialize the `latents` tensor (this is a PyTorch
    tensor):'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备潜在变量以初始化`latents`张量（这是一个PyTorch张量）：
- en: '[PRE65]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Implement the denoising loop:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现去噪循环：
- en: '[PRE77]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: In *step 7*, the denoising loop iterates through the timesteps of the diffusion
    process. If prompt scheduling is enabled (i.e., there are multiple prompt embeddings
    in `embedding_list`), the function selects the appropriate prompt embedding for
    the current timestep. The length of `embedding_list` is stored in `prompt_embeds_l_len`.
    If `prompt_embeds_l_len` is greater than `0`, it means prompt scheduling is enabled.
    The function calculates the `pe_index` index for the current timestep, `i`, using
    the modulo operator (`%`). This ensures that the index wraps around the length
    of `embedding_list` and selects the appropriate prompt embedding for the current
    timestep. The selected prompt embedding is then assigned to `prompt_embeds`.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*步骤7*中，去噪循环遍历扩散过程的timesteps。如果启用了提示调度（即`embedding_list`中有多个提示嵌入），则函数选择当前timestep的适当提示嵌入。`embedding_list`的长度存储在`prompt_embeds_l_len`中。如果`prompt_embeds_l_len`大于`0`，则表示启用了提示调度。函数使用模运算符（`%`）计算当前timestep
    `i`的`pe_index`索引。这确保了索引在`embedding_list`的长度上循环，并选择当前timestep的适当提示嵌入。选定的提示嵌入随后分配给`prompt_embeds`。
- en: 'The last step is denoising post-processing:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是去噪后处理：
- en: '[PRE120]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: In the last step, we convert the image data from latent space to pixel space
    by calling the `decode_latents()` function. The `StableDiffusionPipelineOutput`
    class is used here for a consistent structure to be maintained when returning
    outputs from the pipeline. We use it here to make our pipeline compatible with
    the Diffusers pipeline. You can also find the complete code in the code files
    associated with this chapter.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在最后一步，我们通过调用`decode_latents()`函数将图像数据从潜在空间转换为像素空间。在这里使用`StableDiffusionPipelineOutput`类是为了在从管道返回输出时保持一致的结构。我们在这里使用它来使我们的管道与Diffusers管道兼容。你还可以在与此章节相关的代码文件中找到完整的代码。
- en: 'Congratulations to you if you are still here! Let’s execute it to witness the
    result:'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你还在这里，恭喜你！让我们执行它以见证结果：
- en: '[PRE124]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'We should see an image like the one shown in *Figure 12**.4*:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到*图12.4*中所示的照片：
- en: '![Figure 12.4: A blended photo with 60% cat and 40% dog, using a custom scheduled
    prompt pipeline](img/B21263_12_04.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4：使用自定义计划提示管道混合了60%的猫和40%的狗的照片](img/B21263_12_04.jpg)'
- en: 'Figure 12.4: A blended photo with 60% cat and 40% dog, using a custom scheduled
    prompt pipeline'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：使用自定义计划提示管道混合了60%的猫和40%的狗的照片
- en: 'Here’s another example, using an alternative prompt `[cat|dog]`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个例子，使用替代提示`[猫|狗]`：
- en: '[PRE137]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Our alternative prompt gives an image similar to *Figure 12**.5*:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的替代提示给出了类似于*图12.5*的照片：
- en: '![Figure 12.5: A photo of a blended cat and dog, using the alternative prompt
    scheduling from our custom-scheduled prompt pipeline](img/B21263_12_05.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5：使用我们自定义计划提示管道的替代提示调度混合猫和狗的照片](img/B21263_12_05.jpg)'
- en: 'Figure 12.5: A photo of a blended cat and dog, using the alternative prompt
    scheduling from our custom-scheduled prompt pipeline'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：使用我们自定义计划提示管道的替代提示调度混合猫和狗的照片
- en: If you see half-cat, half-dog images generated, as shown in *Figure 12**.4*
    and *Figure 12**.5*, you have successfully built your custom prompt scheduler.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到了如*图12.4*和*图12.5*所示的半猫半狗的图像生成，那么您已经成功构建了您自定义的提示调度器。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced two solutions for conducting scheduled prompt
    image generation. The first solution, the `Compel` package, is the easiest one
    to use. Simply install the package, and you can use its prompt blend feature to
    blend two or more concepts in one prompt.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了两种进行计划提示图像生成的解决方案。第一种解决方案，`Compel`包，是使用起来最简单的一个。只需安装该包，您就可以使用其提示混合功能在一个提示中混合两个或更多概念。
- en: The second solution is a customized pipeline that first parses the prompt string
    and prepares a prompt list for each denoising step. The custom pipeline loops
    through the prompt list to create an embedding list. Finally, a `scheduler_call`
    function uses the prompt embedding from the embedding list to generate images
    with precise control.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种解决方案是一个定制的管道，它首先解析提示字符串，并为每个去噪步骤准备一个提示列表。自定义管道遍历提示列表以创建一个嵌入列表。最后，`scheduler_call`函数使用嵌入列表中的提示嵌入来生成具有精确控制的图像。
- en: If you successfully implement the custom scheduled pipeline, you can control
    generation in a more precise way. Speaking of controlling, in [*Chapter 13*](B21263_13.xhtml#_idTextAnchor257),
    we are going to explore another way to control image generation – ControlNet.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您成功实现了自定义的计划管道，您就可以以更精确的方式控制生成。说到控制，在[*第13章*](B21263_13.xhtml#_idTextAnchor257)中，我们将探讨另一种控制图像生成的方法——ControlNet。
- en: References
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Compel: [https://github.com/damian0815/compel](https://github.com/damian0815/compel)'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Compel：[https://github.com/damian0815/compel](https://github.com/damian0815/compel)
- en: 'Compel Syntax Features: [https://github.com/damian0815/compel/blob/main/doc/syntax.md](https://github.com/damian0815/compel/blob/main/doc/syntax.md)'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Compel语法特性：[https://github.com/damian0815/compel/blob/main/doc/syntax.md](https://github.com/damian0815/compel/blob/main/doc/syntax.md)
- en: 'Stable Diffusion WebUI Prompt Editing: [https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#prompt-editing](https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#prompt-editing'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稳定扩散WebUI提示编辑：[https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#prompt-editing](https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#prompt-editing)
- en: )
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Lark – a parsing toolkit for Python: [https://github.com/lark-parser/lark](https://github.com/lark-parser/lark)'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lark - Python的解析工具包：[https://github.com/lark-parser/lark](https://github.com/lark-parser/lark)
- en: 'Lark usage document: [https://lark-parser.readthedocs.io/en/stable/](https://lark-parser.readthedocs.io/en/stable/)'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lark使用文档：[https://lark-parser.readthedocs.io/en/stable/](https://lark-parser.readthedocs.io/en/stable/)
- en: Part 3 – Advanced Topics
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分 - 高级主题
- en: In Parts 1 and 2, we established a solid foundation for Stable Diffusion, covering
    its fundamentals, customization options, and optimization techniques. Now, it’s
    time to venture into more advanced territories, where we’ll explore cutting-edge
    applications, innovative models, and expert-level strategies to generate remarkable
    visual content.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1部分和第2部分中，我们为稳定扩散奠定了坚实的基础，涵盖了其基础知识、定制选项和优化技术。现在，是时候探索更高级的领域了，我们将探讨尖端应用、创新模型和专家级策略来生成卓越的视觉内容。
- en: The chapters in this part will take you on a thrilling journey through the latest
    developments in Stable Diffusion. You’ll learn how to generate images with unprecedented
    control using ControlNet, craft captivating videos with AnimateDiff, and extract
    insightful descriptions from images using powerful vision-language models such
    as BLIP-2 and LLaVA. Additionally, you’ll get acquainted with Stable Diffusion
    XL, a newer and more capable iteration of the Stable Diffusion model.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分中的章节将带您踏上一段激动人心的旅程，探索稳定扩散的最新发展。您将学习如何使用ControlNet以前所未有的控制力生成图像，使用AnimateDiff制作吸引人的视频，以及使用BLIP-2和LLaVA等强大的视觉语言模型从图像中提取有洞察力的描述。此外，您还将了解稳定扩散XL，这是稳定扩散模型的一个更新、更强大的迭代版本。
- en: To top it off, we’ll delve into the art of crafting optimized prompts for Stable
    Diffusion, including techniques to write effective prompts and leverage large
    language models to automate the process. By the end of this part, you’ll possess
    the expertise to tackle complex projects, push the boundaries of Stable Diffusion,
    and unlock new creative possibilities. Get ready to unleash your full potential
    and produce breathtaking results!
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 为了锦上添花，我们将深入探讨为稳定的扩散制作优化提示的艺术，包括编写有效提示的技术以及利用大型语言模型来自动化流程。在本部分结束时，你将具备处理复杂项目、拓展稳定的扩散边界和开启新的创意可能性的专业知识。准备好释放你的全部潜力，创造出令人叹为观止的结果！
- en: 'This part contains the following chapters:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 13*](B21263_13.xhtml#_idTextAnchor257)*, Generating Images with ControlNet*'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B21263_13.xhtml#_idTextAnchor257)*，使用ControlNet生成图像*'
- en: '[*Chapter 14*](B21263_14.xhtml#_idTextAnchor277)*, Generating Video Using Stable
    Diffusion*'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B21263_14.xhtml#_idTextAnchor277)*，使用稳定的扩散生成视频*'
- en: '[*Chapter 15*](B21263_15.xhtml#_idTextAnchor289)*, Generating Image Descriptions
    Using BLIP-2 and LLaVA*'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B21263_15.xhtml#_idTextAnchor289)*，使用BLIP-2和LLaVA生成图像描述*'
- en: '[*Chapter 16*](B21263_16.xhtml#_idTextAnchor309)*, Exploring Stable Diffusion
    XL*'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第16章*](B21263_16.xhtml#_idTextAnchor309)*，探索稳定的扩散XL*'
- en: '[*Chapter 17*](B21263_17.xhtml#_idTextAnchor335)*, Building Optimized Prompts
    for Stable Diffusion*'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第17章*](B21263_17.xhtml#_idTextAnchor335)*，构建针对稳定的扩散的优化提示*'
