- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Applications – Object Editing and Style Transferring
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用 - 对象编辑和风格迁移
- en: '**Stable Diffusion** (**SD**) is not only capable of generating a variety of
    images but it can also be utilized for image editing and style transfer from one
    image to another. In this chapter, we will explore solutions for image editing
    and style transfer.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Stable Diffusion**（**SD**）不仅能够生成各种图像，还可以用于图像编辑和风格从一个图像到另一个图像的迁移。在本章中，我们将探讨图像编辑和风格迁移的解决方案。'
- en: 'Along the way, we will also introduce the tools that enable us to achieve these
    goals: **CLIPSeg**, which is used to detect the content of an image; **Rembg**,
    which is a tool that flawlessly removes the background of an image; and **IP-Adapter**,
    which is used to transfer the style from one image to another.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们还将介绍使我们能够实现这些目标的工具：**CLIPSeg**，用于检测图像内容；**Rembg**，这是一个能够完美去除图像背景的工具；以及
    **IP-Adapter**，用于将风格从一个图像转移到另一个图像。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Editing images using Stable Diffusion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Stable Diffusion 编辑图像
- en: Object and style transferring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象和风格迁移
- en: Let’s start.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始。
- en: Editing images using Stable Diffusion
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Stable Diffusion 编辑图像
- en: Do you recall the background swap example we discussed in [*Chapter 1*](B21263_01.xhtml#_idTextAnchor015)?
    In this section, we will introduce a solution that can assist you in editing the
    content of an image.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得我们在 [*第 1 章*](B21263_01.xhtml#_idTextAnchor015) 中讨论的背景交换示例吗？在本节中，我们将介绍一个可以帮助您编辑图像内容的解决方案。
- en: Before we can edit anything, we need to identify the boundary of the object
    we want to edit. In our case, to obtain the background mask, we will use the CLIPSeg
    [1] model. **CLIPSeg**, which stands for **CLIP-based Image Segmentation**, is
    a model trained to segment images based on text prompts or reference images. Unlike
    traditional segmentation models that require a large amount of labeled data, CLIPSeg
    can achieve impressive results with little to no training data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够编辑任何东西之前，我们需要识别我们想要编辑的对象的边界。在我们的例子中，为了获取背景掩码，我们将使用 CLIPSeg [1] 模型。**CLIPSeg**，代表**基于
    CLIP 的图像分割**，是一个训练有素以基于文本提示或参考图像分割图像的模型。与需要大量标记数据的传统分割模型不同，CLIPSeg 可以在少量甚至没有训练数据的情况下实现令人印象深刻的结果。
- en: CLIPSeg builds upon the success of CLIP, the same model used by SD. CLIP is
    a powerful pre-trained model that learns to connect text and images. The CLIPSeg
    model adds a small decoder module on top of CLIP, allowing it to translate the
    learned relationships into pixel-level segmentation. This means we can provide
    CLIPSeg with a simple description such as “the background of this picture,” and
    CLIPSeg will return the mask of the targeted objects.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: CLIPSeg 建立在 CLIP 的成功之上，CLIP 是 SD 所使用的相同模型。CLIP 是一个强大的预训练模型，它学会了将文本和图像连接起来。CLIPSeg
    模型在 CLIP 的基础上添加了一个小的解码器模块，使其能够将学习到的关系转换为像素级分割。这意味着我们可以向 CLIPSeg 提供一个简单的描述，例如“这张图片的背景”，CLIPSeg
    将返回目标对象的掩码。
- en: Now, let’s see how we can use CLIPSeg to accomplish some tasks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用 CLIPSeg 完成一些任务。
- en: Replacing image background content
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换图像背景内容
- en: 'We will first load up the CLIPSeg processor and model, then provide both the
    prompt and image to the model to generate the mask data, and finally, use the
    SD inpainting pipeline to redraw the background. Let’s do it step by step:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将加载 CLIPSeg 处理器和模型，然后向模型提供提示和图像以生成掩码数据，最后使用 SD 修复管道重新绘制背景。让我们一步一步来做：
- en: Load the CLIPSeg model.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 CLIPSeg 模型。
- en: 'The following code will load up the `CLIPSegProcessor` processor and `CLIPSegForImageSegmentation`
    model:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码将加载 `CLIPSegProcessor` 处理器和 `CLIPSegForImageSegmentation` 模型：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `processor` will be used to preprocess both the prompt and images input.
    The `model` will be the one responsible for model inference.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`processor` 将用于预处理提示和图像输入。`model` 将负责模型推理。'
- en: Generate the grayscale mask.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成灰度掩码。
- en: 'By default, the CLIPSeg model will return logits of its result. By applying
    the `torch.sigmoid()` function, we can then have the grayscale mask of the target
    object in the image. The grayscale mask can then enable us to generate the binary
    mask, which will be used in the SD inpainting pipeline:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，CLIPSeg 模型将返回其结果的 logits。通过应用 `torch.sigmoid()` 函数，我们就可以得到图像中目标对象的灰度掩码。灰度掩码可以让我们生成二值掩码，该掩码将在
    SD 修复管道中使用：
- en: '[PRE8]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding code will generate a grayscale mask image that highlights the
    background, as shown in *Figure 18**.1*:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将生成一个突出显示背景的灰度掩码图像，如图 *图 18**.1* 所示：
- en: '![Figure 18.1: Background grayscale mask](img/B21263_18_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.1：背景灰度掩码](img/B21263_18_01.jpg)'
- en: 'Figure 18.1: Background grayscale mask'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.1：背景灰度掩码
- en: This mask is still not the one we want; we need a binary mask. Why do we need
    a binary mask? Because SD v1.5 inpainting works better with a binary mask than
    a grayscale mask. You may also add the grayscale mask to the SD pipeline to see
    the result; there’s nothing to lose by trying different combinations and inputs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个掩码还不是我们想要的；我们需要一个二值掩码。为什么我们需要二值掩码？因为 SD v1.5 修复模型与二值掩码相比，与灰度掩码配合得更好。你也可以将灰度掩码添加到
    SD 管道中查看结果；尝试不同的组合和输入不会有任何损失。
- en: Generate a binary mask.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成二值掩码。
- en: 'We will use the following code to convert a grayscale mask into a 0-1 binary
    mask image:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用以下代码将灰度掩码转换为 0-1 二值掩码图像：
- en: '[PRE26]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let me explain the key elements we presented in the preceding code:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我解释一下我们在前面的代码中展示的关键元素：
- en: '`bw_thresh`: This defines the threshold of treating a pixel as black or white.
    In the preceding code, any grayscale pixel value higher than 100 will be treated
    as a white highlight.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bw_thresh`：这定义了将像素视为黑色或白色的阈值。在前面代码中，任何大于 100 的灰度像素值将被视为白色高光。'
- en: '`mask_pil.convert("L")`: This converts the `mask_pil` image into grayscale
    mode. Grayscale images have only one channel, representing pixel intensity values
    from 0 (black) to 255 (white).'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_pil.convert("L")`：这一行将 `mask_pil` 图像转换为灰度模式。灰度图像只有一个通道，表示像素强度值从 0（黑色）到
    255（白色）。'
- en: '`.point(bw_fn, mode="1")`: This applies the `bw_fn` thresholding function to
    each pixel of the grayscale image. The `mode="1"` argument ensures that the output
    image is a 1-bit binary image (black and white only).'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.point(bw_fn, mode="1")`：这一行将 `bw_fn` 阈值函数应用于灰度图像的每个像素。`mode="1"` 参数确保输出图像是一个
    1 位二值图像（只有黑白）。'
- en: 'We will see the result shown in *Figure 18**.2*:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将看到 *图 18.2* 中显示的结果：
- en: '![Figure 18.2: Background binary mask](img/B21263_18_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.2：背景二值掩码](img/B21263_18_02.jpg)'
- en: 'Figure 18.2: Background binary mask'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.2：背景二值掩码
- en: 'Redraw the background using the SD inpainting model:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 SD 修复模型重新绘制背景：
- en: '[PRE29]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the preceding code, we use the SD v1.4 model as the inpainting model because
    it generates better results than the SD v1.5 model. If you execute it, you will
    see the exact result we presented in [*Chapter 1*](B21263_01.xhtml#_idTextAnchor015).
    The background is now no longer a vast planetary universe but blue sky and mountains.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 SD v1.4 模型作为修复模型，因为它生成的结果比 SD v1.5 模型更好。如果你执行它，你会看到我们在[*第一章*](B21263_01.xhtml#_idTextAnchor015)中展示的确切结果。现在背景不再是广阔的行星宇宙，而是蓝天和山脉。
- en: The same technique can be used for many other purposes, such as editing clothing
    in a photo and adding items to a photo.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的技术可以用于许多其他目的，例如编辑照片中的衣物和向照片中添加物品。
- en: Removing the image background
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除图像背景
- en: 'Many times, we want to just remove the background of an image. With the binary
    mask in hand, removing the background isn’t hard at all. We can do it using the
    following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候，我们只想移除图像的背景。有了二值掩码在手，移除背景根本不难。我们可以使用以下代码来完成：
- en: '[PRE45]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Here’s a breakdown of what each line does:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是每行所做事情的分解：
- en: '`from PIL import Image, ImageOps`: This line imports the `Image` and `ImageOps`
    modules from PIL. The `Image` module provides a class with the same name that
    is used to represent a PIL image. The `ImageOps` module contains a number of “ready-made”
    image-processing operations.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from PIL import Image, ImageOps`：这一行从 PIL 导入了 `Image` 和 `ImageOps` 模块。`Image`
    模块提供了一个同名的类，用于表示 PIL 图像。`ImageOps` 模块包含了许多“现成”的图像处理操作。'
- en: '`output_image = Image.new("RGBA", source_image.size, (255,255,255,255))`: This
    line creates a new image with the same size as `source_image`. The new image will
    be in RGBA mode, meaning it includes channels for red, green, blue, and alpha
    (transparency). The initial color of all pixels in the image is set to white `(255,255,255)`
    with full opacity `(255)`.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_image = Image.new("RGBA", source_image.size, (255,255,255,255))`：这一行创建了一个与
    `source_image` 大小相同的新的图像。新的图像将以 RGBA 模式存在，这意味着它包括红色、绿色、蓝色和 alpha（透明度）通道。图像中所有像素的初始颜色被设置为白色
    `(255,255,255)`，具有全不透明度 `(255)`。'
- en: '`inverse_bw_mask_pil = ImageOps.invert(bw_mask_pil)`: This line inverts the
    colors of the `bw_mask_pil` image using the `invert` function from ImageOps. If
    `bw_mask_pil` is a black and white image, the result will be a negative of the
    original image, that is, black becomes white and white becomes black.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inverse_bw_mask_pil = ImageOps.invert(bw_mask_pil)`: 这行代码使用ImageOps中的`invert`函数反转`bw_mask_pil`图像的颜色。如果`bw_mask_pil`是一个黑白图像，则结果将是原始图像的负片，即黑色变成白色，白色变成黑色。'
- en: '`r = Image.composite(source_image ,output_image, inverse_bw_mask_pil)`: This
    line creates a new image by blending `source_image` and `output_image` based on
    the `inverse_bw_mask_pil` mask image. Where the mask image is white (or shades
    of gray), the corresponding pixels from `source_image` are used, and where the
    mask image is black, the corresponding pixels from `output_image` are used. The
    result is assigned to `r`.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r = Image.composite(source_image, output_image, inverse_bw_mask_pil)`: 这行代码通过`inverse_bw_mask_pil`掩码图像将`source_image`和`output_image`混合创建一个新的图像。其中掩码图像为白色（或灰色阴影），则使用`source_image`中的相应像素，而掩码图像为黑色，则使用`output_image`中的相应像素。结果被分配给`r`。'
- en: 'Simply four lines of code enable the replacement of the background with pure
    white, as shown in *Figure 18**.3*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的四行代码就能实现将背景替换为纯白色，如图*图18*.3所示：
- en: '![Figure 18.3: Remove background using CLIPSeg](img/B21263_18_03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图18.3：使用CLIPSeg去除背景](img/B21263_18_03.jpg)'
- en: 'Figure 18.3: Remove background using CLIPSeg'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3：使用CLIPSeg去除背景
- en: 'But, we will see jagged edges; this is not good and can’t be perfectly solved
    using CLIPSeg. If you are going to feed this image into the diffusion pipeline
    again, SD will help fix the jagged edges problem by using another image-to-image
    pipeline. Based on the nature of the diffusion model, the background edges will
    be either blurred or rerendered with other pixels. To remove the background neatly,
    we will need other tools to help, for example, the Rembg project [2]. Its usage
    is also simple:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们会看到锯齿边缘；这并不好，而且不能通过CLIPSeg完美解决。如果你打算再次将此图像输入到扩散管道中，SD将使用另一个图像到图像的管道来帮助修复锯齿边缘问题。根据扩散模型的本性，背景边缘将被模糊或用其他像素重新渲染。为了干净地去除背景，我们需要其他工具的帮助，例如，Rembg项目[2]。它的使用也很简单：
- en: 'Install the package:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装包：
- en: '[PRE46]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Remove the background with two lines of code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用两行代码去除背景：
- en: '[PRE47]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'And we see the background is completely removed, as shown in *Figure 18**.4*:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到背景被完全去除，如图*图18*.4所示：
- en: '![Figure 18.4: Remove background using Rembg](img/B21263_18_04.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图18.4：使用Rembg去除背景](img/B21263_18_04.jpg)'
- en: 'Figure 18.4: Remove background using Rembg'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.4：使用Rembg去除背景
- en: 'To set the background as white, use three more lines of code, as shown below:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要将背景设置为白色，使用以下三行代码，如下所示：
- en: '[PRE49]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We can find the background is completely replaced with a white background. An
    object with a pure white background can be useful in some cases; for instance,
    we are going to use the object as a guidance embedding. No, you did not read that
    wrong; we can use the image as the input prompt. Let’s explore this in the next
    section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到背景被完全替换成了白色背景。具有纯白色背景的物体在某些情况下可能很有用；例如，我们打算将这个物体用作指导嵌入。不，你没有看错；我们可以将图像作为输入提示。让我们在下一节中探讨这个问题。
- en: Object and style transferring
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物体和风格迁移
- en: When we introduced the theory behind SD in *Chapters 4* and *5*, we learned
    that only text embedding is involved in the UNet diffusion process. Even if we
    provide an initial image as the starting point, the initial image is simply used
    as the starting noise or concatenated with initial noises. It does not have any
    influence on the steps of the diffusion process.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在第4章和第5章中介绍SD的理论时，我们了解到在UNet扩散过程中只涉及文本嵌入。即使我们提供一个初始图像作为起点，初始图像也仅仅被用作起始噪声或与初始噪声连接。它对扩散过程的步骤没有任何影响。
- en: That is until the IP-Adapter project [3] came about. IP-Adapter is a tool that
    lets you use an existing image as a reference for text prompts. In other words,
    we can take the image as another piece of prompt work together with text guidance
    to generate an image. Unlike Textual Inversion, which usually works well for certain
    concepts or styles, IP-Adapter works with any images.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 直到IP-Adapter项目[3]的出现。IP-Adapter是一个工具，它允许您使用现有的图像作为文本提示的参考。换句话说，我们可以将图像作为另一份提示工作，与文本指导一起生成图像。与通常对某些概念或风格效果良好的文本反转不同，IP-Adapter可以与任何图像一起工作。
- en: With the help of IP-Adapter, we can magically transfer an object from one image
    to a completely different one.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在IP-Adapter的帮助下，我们可以神奇地将一个物体从一个图像转移到另一个完全不同的图像中。
- en: Next, let’s start using IP-Adapter to transfer an object from one image to another
    one.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们开始使用 IP-Adapter 将一个对象从一个图像转移到另一个图像。
- en: Loading up a Stable Diffusion pipeline with IP-Adapter
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载带有 IP-Adapter 的 Stable Diffusion 流程
- en: 'Using IP-Adapter in Diffusers is simple enough, you don’t need to install any
    additional packages or manually download any model files:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Diffusers 中使用 IP-Adapter 简单到不需要安装任何额外的包或手动下载任何模型文件：
- en: 'Load the image encoder. It is this dedicated image encoder that plays a key
    role in turning the image into a guidance prompt embedding:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载图像编码器。正是这个专门图像编码器在将图像转换为引导提示嵌入中扮演了关键角色：
- en: '[PRE50]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Load a vanilla SD pipeline but with one additional `image_encoder` parameter:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载一个普通的 SD 流程，但增加一个额外的 `image_encoder` 参数：
- en: '[PRE57]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will use the image encoder model from `models/image_encoder` even when loading
    an SDXL pipeline, rather than `sdxl_models/image_encoder`; otherwise, an error
    message will be thrown. You can also replace the SD v1.5 base model with any other
    community-shared models.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 即使加载 SDXL 流程，我们也将使用 `models/image_encoder` 中的图像编码器模型，而不是 `sdxl_models/image_encoder`；否则，将抛出错误消息。您还可以用任何其他社区共享模型替换
    SD v1.5 基础模型。
- en: 'Apply IP-Adapter to the UNet pipeline:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 IP-Adapter 应用到 UNet 流程：
- en: '[PRE64]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: If you are using an SDXL pipeline, replace `models` with `sdxl_models`, and
    replace `ip-adapter_sd15.bin` with `ip-adapter_sdxl.bin`.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用 SDXL 流程，请将 `models` 替换为 `sdxl_models`，并将 `ip-adapter_sd15.bin` 替换为 `ip-adapter_sdxl.bin`。
- en: That is all; now we can use the pipeline just like any other pipeline. Diffusers
    will help you download the model files automatically if no IP-Adapter models exist.
    In the next section, we are going to use the IP-Adapter model to transfer a style
    from one image to another.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了；现在我们可以像使用任何其他流程一样使用这个流程。如果不存在 IP-Adapter 模型，Diffusers 将帮助您自动下载模型文件。在下一节中，我们将使用
    IP-Adapter 模型将一个图像的风格转移到另一个图像。
- en: Transferring style
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转移风格
- en: 'In this section, we are going to write code to transfer the famous *Girl with
    a Pearl Earring* by Johannes Vermeer (see *Figure 18**.5*) to the *astronaut riding
    a* *horse* image:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写代码将著名画家约翰内斯·维梅尔的 **《戴珍珠耳环的少女》**（见 *图 18**.5*）转移到 **宇航员骑马** 的图像：
- en: '![Figure 18.5: Girl with a Pearl Earring by Johannes Vermeer](img/B21263_18_05.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.5：约翰内斯·维梅尔的《戴珍珠耳环的少女》](img/B21263_18_05.jpg)'
- en: 'Figure 18.5: Girl with a Pearl Earring by Johannes Vermeer'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.5：约翰内斯·维梅尔的《戴珍珠耳环的少女》
- en: 'Here, let’s kick off the pipeline to transfer style:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，让我们启动流程以转换风格：
- en: '[PRE69]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In the preceding code, we used the original astronaut image – `source_image`
    – as the base, and the oil painting image as the IP-Adapter image prompt – `ip_image`
    (we want its style). Amazingly, we get the result shown in *Figure 18**.6*:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了原始宇航员图像 – `source_image` – 作为基础，并将油画图像作为 IP-Adapter 图像提示 – `ip_image`（我们想要其风格）。令人惊讶的是，我们得到了
    *图 18**.6* 中所示的结果：
- en: '![Figure 18.6: Astronaut riding a horse with a new style](img/B21263_18_06.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.6：宇航员骑着一匹马的新风格](img/B21263_18_06.jpg)'
- en: 'Figure 18.6: Astronaut riding a horse with a new style'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.6：宇航员骑着一匹马的新风格
- en: The style and feel of the *Girl with a Pearl Earring* image have successfully
    been applied to another image.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**《戴珍珠耳环的少女》** 图像的风格和感觉已成功应用于另一张图像。'
- en: IP-Adapter’s potential is huge. We can even transfer the clothing and face from
    one image to another. More usage samples can be found in the original IP-Adapter
    repository [3] and the Diffusers PR page [5].
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: IP-Adapter 的潜力巨大。我们甚至可以将一个图像中的服装和面部特征转移到另一个图像中。更多使用示例可以在原始 IP-Adapter 仓库 [3]
    和 Diffusers PR 页面 [5] 中找到。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, the focus was on using SD for image editing and style transferring.
    The chapter introduced tools such as CLIPSeg for image content detection, Rembg
    for background removal, and IP-Adapter for transferring styles between images.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，重点是使用 SD 进行图像编辑和风格转换。本章介绍了 CLIPSeg 用于图像内容检测、Rembg 用于背景移除以及 IP-Adapter 用于在图像之间转移风格等工具。
- en: The first section covered image editing, specifically replacing or removing
    the background. CLIPSeg is used to generate a mask of the background, which is
    then converted to a binary mask. The background is either replaced using SD or
    removed, with the latter option showing jagged edges. Rembg was introduced as
    a solution for smoother background removal.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分涵盖了图像编辑，特别是替换或移除背景。CLIPSeg 用于生成背景的掩码，然后将其转换为二值掩码。背景要么使用 SD 替换，要么移除，后者会显示锯齿状边缘。Rembg
    被介绍为更平滑的背景移除解决方案。
- en: The second section explored object and style transferring using IP-Adapter.
    The process involves loading an image encoder, incorporating it into an SD pipeline,
    and applying IP-Adapter to the UNet of the pipeline. The chapter concluded with
    an example of transferring the style of Vermeer’s *Girl with a Pearl Earring*
    onto an image of an astronaut riding a horse.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分探讨了使用IP-Adapter进行对象和风格转换。这个过程包括加载图像编码器，将其集成到SD管道中，并将IP-Adapter应用于管道的UNet。章节以将维梅尔的*戴珍珠耳环的少女*的风格转移到骑马的宇航员图像上的一个示例结束。
- en: In the next chapter, we are going to explore solutions to save and read the
    parameters and prompt information to and from the generated image files.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何保存和读取从生成的图像文件中保存和读取参数和提示信息的方法。
- en: References
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'CLIPSeg GitHub repository: [https://github.com/timojl/clipseg](https://github.com/timojl/clipseg)'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLIPSeg GitHub仓库：[https://github.com/timojl/clipseg](https://github.com/timojl/clipseg)
- en: 'Timo Lüddecke and Alexander S. Ecker, *Image Segmentation Using Text and Image*
    *Prompts*: [https://arxiv.org/abs/2112.10003](https://arxiv.org/abs/2112.10003)'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Timo Lüddecke 和 Alexander S. Ecker，*使用文本和图像提示进行图像分割*：[https://arxiv.org/abs/2112.10003](https://arxiv.org/abs/2112.10003)
- en: 'IP-Adapter GitHub repository: [https://github.com/tencent-ailab/IP-Adapter](https://github.com/tencent-ailab/IP-Adapter)'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IP-Adapter GitHub仓库：[https://github.com/tencent-ailab/IP-Adapter](https://github.com/tencent-ailab/IP-Adapter)
- en: 'Rembg, a tool to remove image backgrounds: [https://github.com/danielgatis/rembg](https://github.com/danielgatis/rembg)'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Rembg，一个用于去除图像背景的工具：[https://github.com/danielgatis/rembg](https://github.com/danielgatis/rembg)
- en: 'IP-Adapters original samples: [https://github.com/huggingface/diffusers/pull/5713](https://github.com/huggingface/diffusers/pull/5713)'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IP-Adapters原始样本：[https://github.com/huggingface/diffusers/pull/5713](https://github.com/huggingface/diffusers/pull/5713)
