- en: Using NEAT for XOR Solver Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NEAT进行XOR求解器优化
- en: In this chapter, you will learn about one of the classic computer science experiments
    that demonstrates that the NEAT algorithm works and can create a proper network
    topology. In this chapter, you will get first-hand experience of writing an objective
    function to guide the XOR problem solver. You will also learn how to select the
    correct hyperparameters of the NEAT algorithm to assist with solving the XOR problem. This
    chapter aims to introduce you to the basic techniques of how to apply the NEAT
    algorithm to solve classic computer science problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解一个经典的计算机科学实验，该实验证明了NEAT算法的有效性，并能创建合适的网络拓扑。在本章中，您将亲身体验编写一个目标函数来指导XOR问题求解器。您还将学习如何选择NEAT算法的正确超参数以帮助解决XOR问题。本章旨在向您介绍如何将NEAT算法应用于解决经典计算机科学问题的基本技术。
- en: After completing the experiment and exercises described in this chapter, you
    will have a solid understanding of the XOR experiment's particulars and get the
    practical skills you need to write the relevant Python source code using the NEAT-Python
    library. You will also gain experience in setting up the hyperparameters of the
    NEAT-Python library and using visualization utilities to visualize the results
    of an experiment. After that, you will be ready to begin experimenting with the
    more complex problems that will be discussed later in this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章描述的实验和练习后，您将对XOR实验的细节有一个扎实的理解，并获得使用NEAT-Python库编写相关Python源代码所需的实际技能。您还将获得设置NEAT-Python库的超参数和使用可视化工具可视化实验结果的经验。之后，您将准备好开始尝试本书后面将要讨论的更复杂的问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The XOR problem basics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XOR问题基础
- en: How to define the objective function to guide the XOR problem solver
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何定义目标函数来指导XOR问题求解器
- en: Hyperparameter selection for the XOR experiment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XOR实验的超参数选择
- en: Running the XOR experiment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行XOR实验
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following technical requirements should be met to carry out the experiments
    described in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行本章描述的实验，应满足以下技术要求：
- en: Windows 8/10, macOS 10.13 or newer, or modern Linux
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 8/10，macOS 10.13或更高版本，或现代Linux
- en: Anaconda Distribution version 2019.03 or newer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda Distribution版本2019.03或更高版本
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter3](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter3)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter3](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/tree/master/Chapter3)找到。
- en: XOR problem basics
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XOR问题基础
- en: The classic **multilayer perceptron** (**MLP**) or **artificial neural network**
    (**ANN**) without any *hidden units* in their topology is only capable of solving
    linearly separable problems correctly. As a result, such ANN configurations cannot
    be used for pattern recognition or control and `optxor_experiment.pyimization`
    tasks. However, with more complex MLP architectures that include some hidden units
    with a kind of non-linear activation function (such as sigmoid), it is possible
    to approximate any function to the given accuracy. Thus, a non-linearly separable
    problem can be used to study whether a neuroevolution process can grow any number
    of hidden units in the ANN of the solver phenotype.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在其拓扑中没有任何*隐藏单元*的经典**多层感知器**（**MLP**）或**人工神经网络**（**ANN**）只能正确解决线性可分问题。因此，这种ANN配置不能用于模式识别或控制和`优化`任务。然而，具有一些具有某种非线性激活函数（如sigmoid）的更复杂的MLP架构，可以近似任何函数到给定的精度。因此，非线性可分问题可以用来研究神经进化过程是否可以在求解器表型的ANN中增长任意数量的隐藏单元。
- en: The XOR problem solver is a classic computer science experiment in the field
    of reinforcement learning that cannot be solved without introducing non-linear
    execution to the solver algorithm. The solution search space of the problem has
    a minimum size and can be used to demonstrate that the NEAT algorithm can evolve
    the topology of the ANN, starting from a very straightforward one and gradually
    increasing the complexity to finding an appropriate network structure where all
    the connections are wired correctly. By demonstrating the NEAT algorithm's ability
    to grow an appropriate topology consistently, the XOR experiment also demonstrates
    that NEAT can avoid the local maxima of the fitness values landscape. The local
    maxima is a trap where the solver can get stuck, producing a local champion with
    the wrong connectivity pattern. After that, a local champion may dominate the
    population so much that the solver fails to solve a problem.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: XOR问题求解器是强化学习领域的一个经典计算机科学实验，如果不引入非线性行为到求解器算法中，是无法解决的。该问题的解决方案搜索空间具有最小尺寸，可以用来证明NEAT算法可以从一个非常简单的ANN拓扑结构开始进化，逐渐增加复杂性，找到所有连接都正确布线的适当网络结构。通过展示NEAT算法能够持续地生长适当的拓扑结构，XOR实验也证明了NEAT可以避免适应度值景观中的局部最大值。局部最大值是一个陷阱，求解器可能会陷入其中，产生一个具有错误连接模式的局部冠军。之后，一个局部冠军可能会在种群中占据主导地位，以至于求解器无法解决问题。
- en: 'Here is a table defining the XOR features:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个定义XOR特征的表格：
- en: '| **Input 1** | **Input 2** | **Output** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **输入1** | **输入2** | **输出** |'
- en: '| 1 | 1 | 0 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 0 |'
- en: '| 1 | 0 | 1 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 1 |'
- en: '| 0 | 1 | 1 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 1 |'
- en: '| 0 | 0 | 0 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: XOR is a binary logical operator that only returns true if only one of the two
    inputs is true. The two input signals must be combined by the non-linear hidden
    unit to produce the correct output signal. There is no linear function for the
    combination of XOR inputs that are able to separate them into their correct classes
    correctly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: XOR是一个二进制逻辑运算符，只有当两个输入中只有一个为真时才返回true。两个输入信号必须通过非线性隐藏单元组合，以产生正确的输出信号。没有线性函数能够正确地将XOR输入组合并分离到它们正确的类别中。
- en: The NEAT algorithm starts with the initial population, which encodes a very
    simple phenotype, and gradually evolves the topology of the phenotype until an
    appropriate ANN is created. The initial structure of the phenotype ANN does not
    include any hidden units and consists of two input units, one output unit, and
    one bias unit. The two input nodes and the bias node are connected to the output
    node, that is, the initial genotype has three connection genes and four node genes.
    The bias unit is a particular type of input that is always initialized to a specific
    value greater than 0 (usually, it is 1.0 or 0.5). The bias unit is necessary if
    we wish to set the activation of the neuron unit (output or hidden)—which is calculated
    by the related activation function that's applied to a sum of inputs and bias—to
    a specific non zero value if both inputs have a value of 0.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: NEAT算法从初始种群开始，该种群编码了一个非常简单的表型，并逐渐进化表型的拓扑结构，直到创建一个合适的ANN。表型ANN的初始结构不包含任何隐藏单元，由两个输入单元、一个输出单元和一个偏置单元组成。两个输入节点和偏置节点连接到输出节点，即初始基因型有三个连接基因和四个节点基因。偏置单元是一种特殊的输入，它始终初始化为大于0的特定值（通常为1.0或0.5）。如果我们希望将神经元单元（输出或隐藏）的激活（通过应用于输入和偏置的总和的相关激活函数计算得出）设置为特定的非零值，那么偏置单元是必要的——如果两个输入的值都是0。
- en: 'The initial and the smallest possible XOR phenotypes are shown in the following
    diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了初始和可能的最小XOR表型：
- en: '![](img/86915bea-fd14-4a1b-968f-0196f113782b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86915bea-fd14-4a1b-968f-0196f113782b.png)'
- en: Initial and optimal XOR phenotypes
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 初始和最优的XOR表型
- en: The ANN of the phenotype becomes more and more complex until the final solution
    is found by including one or more additional hidden nodes. The smallest possible
    solver includes only one hidden node, and the NEAT method demonstrates its power
    by finding an optimal solver configuration among the more complex ones.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表型的人工神经网络（ANN）变得越来越复杂，直到通过包含一个或多个额外的隐藏节点找到最终解决方案。可能的最小求解器只包含一个隐藏节点，NEAT方法通过在更复杂的配置中找到最优求解器配置来展示其能力。
- en: The objective function for the XOR experiment
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XOR实验的目标函数
- en: 'In the XOR experiment, the fitness of the organism in the population is defined
    as the squared distance between the correct answer and the sum of the outputs
    that are generated for all four XOR input patterns. It is computed as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XOR 实验中，种群中生物体的适应度定义为正确答案与为所有四个 XOR 输入模式生成的输出总和之间的平方距离。它按以下方式计算：
- en: The phenotype ANN is activated against all four XOR input patterns.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表型人工神经网络针对所有四个 XOR 输入模式进行激活。
- en: The output values are subtracted from the correct answers for each pattern,
    and the absolute values of the results are then summed.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输出值从每个模式的正确答案中减去，然后将结果的绝对值相加。
- en: The error value that was found at the previous step is subtracted from the maximal
    fitness value (*4*) to calculate organism fitness. The highest fitness value means
    better solver performance.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一步找到的错误值从最大适应度值（*4*）中减去，以计算生物体的适应度。最高的适应度值意味着更好的求解器性能。
- en: The calculated fitness is then squared to give proportionally more fitness to
    the organisms, thereby producing solver ANNs that give closer answers to the correct
    solution. This approach makes the evolutionary pressure more intense.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算出的适应度值然后平方，以给生物体提供更多比例的适应度，从而产生给出更接近正确答案的求解器人工神经网络。这种方法使进化压力更加激烈。
- en: 'Thus, the objective function can be defined as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，目标函数可以定义为以下：
- en: '![](img/5e576dee-454e-4fd3-8690-df4ec58c4f68.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e576dee-454e-4fd3-8690-df4ec58c4f68.png)'
- en: 'The corresponding Python source code that is based on the NEAT-Python library
    is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 NEAT-Python 库的相应 Python 源代码如下：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that there is no need to normalize the fitness value to fit the `[0,1]`
    range (like there is with backpropagation-based methods) because there are no
    backward gradient calculations involved in the training process. The organisms'
    fitness scores are compared directly based on their absolute values. Thus, the
    range of the values doesn't matter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，没有必要将适应度值归一化以适应 `[0,1]` 范围（如基于反向传播的方法那样），因为在训练过程中没有涉及反向梯度计算。生物体的适应度评分直接根据它们的绝对值进行比较。因此，值的范围无关紧要。
- en: You can also try different variations of fitness score calculation methods.
    For example, you can implement a function resembling mean squared error and compare
    the performance of the algorithm against the different implementations of the
    objective function. The only requirement is that the objective function should
    produce higher fitness scores for better solvers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以尝试不同的适应度评分计算方法的不同变体。例如，您可以实现一个类似于均方误差的函数，并比较算法针对不同目标函数实现的性能。唯一的要求是目标函数应该为更好的求解器产生更高的适应度评分。
- en: Hyperparameter selection
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超参数选择
- en: The XOR experiment we will discuss in this chapter uses the NEAT-Python library
    as a framework. The NEAT-Python library defines a set of hyperparameters that
    are used to control the execution and performance of the NEAT algorithm. The configuration
    file is stored in a format similar to Windows .INI files; each section starts
    with a name in square brackets ([*section*]), followed by key-value pairs that
    are delimited by an equals sign (*=*).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论的 XOR 实验使用 NEAT-Python 库作为框架。NEAT-Python 库定义了一组超参数，这些参数用于控制 NEAT 算法的执行和性能。配置文件存储的格式类似于
    Windows .INI 文件；每个部分以方括号内的名称（[*部分*]）开始，后跟由等号（*=*）分隔的键值对。
- en: In this section, we will discuss some hyperparameters of the NEAT-Python library
    that can be found in each section of the configuration file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 NEAT-Python 库中的一些超参数，这些参数可以在配置文件的每个部分中找到。
- en: A full list of the hyperparameters in the NEAT-Python library can be found at
    [https://neat-python.readthedocs.io/en/latest/config_file.html](https://neat-python.readthedocs.io/en/latest/config_file.html).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: NEAT-Python 库中所有超参数的完整列表可以在 [https://neat-python.readthedocs.io/en/latest/config_file.html](https://neat-python.readthedocs.io/en/latest/config_file.html)
    找到。
- en: NEAT section
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NEAT 部分
- en: 'This section specifies parameters that are specific to the NEAT algorithm.
    This section includes the following parameters:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本节指定了特定于 NEAT 算法的参数。本节包括以下参数：
- en: '`fitness_criterion`: The function that computes the termination criterion from
    a set of fitness values of all the genomes in the population. The parameter values
    are the names of standard aggregate functions, such as min, max, and mean. The
    min and max values are used to terminate the evolution process if the minimal
    or maximal fitness of the population exceeds the given `fitness_threshold`. When
    the value is set to mean, the average fitness of the population is used as a termination
    criterion.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fitness_criterion`: 从种群中所有基因组的适应度值集中计算终止标准的函数。参数值是标准聚合函数的名称，例如min、max和mean。min和max值用于在种群的最小或最大适应度超过给定的`fitness_threshold`时终止进化过程。当值设置为mean时，种群的平均适应度用作终止标准。'
- en: '`fitness_threshold`: The threshold value is compared against the fitness and
    calculated by the `fitness_criterion` function to test whether evolution must
    be terminated.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fitness_threshold`: 与适应度比较的阈值值，由`fitness_criterion`函数计算，以测试是否必须终止进化。'
- en: '`no_fitness_termination`: The flag that disables fitness-based termination
    of the evolutionary process is defined by the preceding parameters. When it''s
    set to `True`, the evolution will be terminated only after the maximum number
    of generations has been evaluated.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no_fitness_termination`: 定义了由前面的参数定义的基于适应度的进化过程终止的标志。当设置为`True`时，进化过程只有在评估了最大代数后才会终止。'
- en: '`pop_size`: The number of individual organisms in each generation.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop_size`: 每一代中个体的数量。'
- en: '`reset_on_extinction`: A flag that controls whether a new random population
    should be created when all the species in the current generation become extinct
    due to stagnation. If `False`, `CompleteExtinctionException` will be thrown upon
    complete extinction.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset_on_extinction`: 当由于停滞导致当前代的所有物种灭绝时，控制是否创建新的随机种群的一个标志。如果设置为`False`，在完全灭绝时将抛出`CompleteExtinctionException`异常。'
- en: DefaultStagnation section
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DefaultStagnation部分
- en: 'This section defines parameters that are specific to the species stagnation
    routines, as implemented by the `DefaultStagnation` class. This section includes
    the following parameters:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分定义了由`DefaultStagnation`类实现的特定于物种停滞例程的参数。此部分包括以下参数：
- en: '`species_fitness_func`: The name of a function that''s used to compute species
    fitness, that is, to calculate the aggregate fitness value of all the organisms
    belonging to a particular species. The allowed values are max, min, and mean.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`species_fitness_func`: 用于计算物种适应度的函数名称，即计算属于特定物种的所有生物的聚合适应度值。允许的值是max、min和mean。'
- en: '`max_stagnation`: The species that have not shown an improvement in the fitness
    value calculated by `species_fitness_func` in more than `max_stagnation` number
    of generations are considered stagnant and are subject to extinction.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_stagnation`: 在超过`max_stagnation`代数内没有显示出由`species_fitness_func`计算的适应度值提升的物种被认为是停滞的，并可能面临灭绝。'
- en: '`species_elitism`: The number of species to unconditionally protect from stagnation.
    It is intended to prevent the total extinction of the population before new species
    arise. The specified number of species with the highest fitness always survive
    in the population, despite showing no further fitness improvements.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`species_elitism`: 无条件保护免受停滞影响的物种数量。其目的是防止在出现新物种之前种群完全灭绝。在种群中，具有最高适应度的指定数量的物种总是能够存活下来，尽管它们没有显示出进一步的适应度提升。'
- en: DefaultReproduction section
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DefaultReproduction部分
- en: 'This section provides configuration for the reproduction routines that are
    implemented by the built-in `DefaultReproduction` class. This section includes
    the following parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分提供了由内置`DefaultReproduction`类实现的繁殖例程的配置。此部分包括以下参数：
- en: '`elitism`: The number of most-fit organisms in each species, which are copied
    without changes to the next generation. This factor allows us to retain any beneficial
    mutations that were found in the previous generations.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elitism`: 每个物种中最适应的个体数量，这些个体在下一代中无变化地复制。这个因素使我们能够保留在上一代中发现的任何有益突变。'
- en: '`survival_threshold`: The fraction of organisms in each species that are allowed
    to be parents of the next generation, that is, eligible for sexual reproduction
    (*crossover*). By adjusting this value, it is possible to define the lowest fitness
    score of the organism that is allowing it to participate in the reproduction process.
    This becomes possible because the `survival_threshold` fraction is taken from
    the sorted list of organisms, ordered by fitness in decreasing order.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`survival_threshold`: 每个物种中允许成为下一代父母（即有资格进行有性繁殖[*交叉*]）的有机体比例。通过调整此值，可以定义允许参与繁殖过程的有机体的最低适应度分数。这是因为`survival_threshold`比例是从按适应度降序排列的有机体列表中取出的。'
- en: '`min_species_size`: The minimum number of organisms per species to keep after
    the reproduction cycle.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_species_size`: 繁殖周期后每个物种中保留的有机体最小数量。'
- en: DefaultSpeciesSet section
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DefaultSpeciesSet部分
- en: 'This section provides the configuration for the speciation process that''s
    implemented by the built-in `DefaultSpeciesSet` class and includes the following
    parameter:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了由内置`DefaultSpeciesSet`类实现的物种形成过程的配置，包括以下参数：
- en: '`compatibility_threshold`: The threshold to control whether organisms belong
    to the same species (genomic distance is less than this value) or to a different
    species. Higher values mean the evolutionary process has less speciation power.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compatibility_threshold`: 控制有机体属于同一物种（基因组距离小于此值）还是不同物种的阈值。较高值意味着进化过程具有较少的物种形成能力。'
- en: DefaultGenome section
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DefaultGenome部分
- en: 'This section defines the configuration parameters that are used to create and
    maintain the genome, as implemented by the `DefaultGenome` class. This section includes
    the following parameters:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本节定义了用于创建和维护基因组（由`DefaultGenome`类实现）的配置参数。本节包括以下参数：
- en: '`activation_default`: The name of the activation function to use in node genes.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activation_default`: 用于节点基因中使用的激活函数的名称。'
- en: '`activation_mutate_rate`: If the genome supports multiple activation functions
    (such as for the CPPN genome), then this is the probability of the mutation replacing
    the activation function of the current node with a new one that''s been taken
    from the list of supported functions (see `activation_options`).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activation_mutate_rate`: 如果基因组支持多个激活函数（例如对于CPPN基因组），则这是突变替换当前节点激活函数为从支持函数列表中取出的新函数的概率（参见`activation_options`）。'
- en: '`activation_options`: A space-separated list of the activation functions that
    can be used by node genes.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activation_options`: 可以由节点基因使用的激活函数的空间分隔列表。'
- en: '`aggregation_default`: The name of the default aggregate function to be used
    by a network node to any aggregate input signals that are received from other
    nodes before activation.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aggregation_default`: 网络节点在激活之前用于从其他节点接收到的任何聚合输入信号的默认聚合函数的名称。'
- en: '`aggregation_mutate_rate`: If multiple aggregate functions are supported by
    the genome, then this parameter defines the probability of mutation that replaces
    the aggregate function of the current node with a new one from the list of aggregate
    functions (see `aggregation_options`).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aggregation_mutate_rate`: 如果基因组支持多个聚合函数，则此参数定义了突变替换当前节点聚合函数为聚合函数列表中的新函数的概率（参见`aggregation_options`）。'
- en: '`aggregation_options`: A space-separated list of the aggregate functions that
    can be used by node genes. The supported values are sum, min, max, mean, median,
    and maxabs.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aggregation_options`: 可以由节点基因使用的聚合函数的空间分隔列表。支持值包括sum（求和）、min（最小值）、max（最大值）、mean（平均值）、median（中位数）和maxabs（最大绝对值）。'
- en: '`compatibility_threshold`: The threshold to control whether organisms belong to
    the same species (genomic distance is less than this value) or to different species.
    Higher values mean that the evolutionary process has less speciation power.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compatibility_threshold`: 控制有机体属于同一物种（基因组距离小于此值）还是不同物种的阈值。较高值意味着进化过程具有较少的物种形成能力。'
- en: '`compatibility_disjoint_coefficient`: The coefficient that''s used during the
    genomic distance calculation to count how disjoint or excess genes contribute
    to the calculation result. Higher values of this parameter amplify the significance
    of the presence of disjoint or excess genes in the genomic distance calculation.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compatibility_disjoint_coefficient`: 在基因组距离计算过程中使用的系数，用于计算不重叠或过剩基因对计算结果的影响。此参数的较高值放大了不重叠或过剩基因在基因组距离计算中的重要性。'
- en: '`compatibility_weight_coefficient`: The coefficient that manages how the genomic
    distance calculation of the difference between the bias and response attributes
    of the node genes and the weight attributes of the connection genes contribute
    to the results.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compatibility_weight_coefficient`：该系数管理节点基因的偏差和响应属性与连接基因的权重属性之间的基因组距离计算的差异对结果的影响。'
- en: '`conn_add_prob`: The probability of a mutation that introduces a new connection
    gene between existing node genes.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn_add_prob`：引入新连接基因到现有节点基因之间的突变的概率。'
- en: '`conn_delete_prob`: The probability of a mutation that removes an existing
    connection gene from the genome.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conn_delete_prob`：从基因组中删除现有连接基因的突变的概率。'
- en: '`enabled_default`: The default value for the enabled attribute of the newly
    created connection genes.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enabled_default`：新创建的连接基因的启用属性的默认值。'
- en: '`enabled_mutate_rate`: The probability of a mutation that toggles the enabled
    attribute of the connection gene.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enabled_mutate_rate`：切换连接基因启用属性的突变的概率。'
- en: '`feed_forward`: Controls the type of phenotype networks to be generated during
    genesis. If set to `True`, then no recurrent connections are allowed.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feed_forward`：控制生成过程中要生成的表型网络的类型。如果设置为`True`，则不允许循环连接。'
- en: '`initial_connection`: Specifies the initial connectivity pattern for the newly
    created genomes. The allowed values include `unconnected`, `fs_neat_nohidden`,
    `fs_neat_hidden`, `full_direct`, `full_nodirect`, `partial_direct`, and `partial_nodirect`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initial_connection`：指定新创建基因组的初始连接模式。允许的值包括`unconnected`、`fs_neat_nohidden`、`fs_neat_hidden`、`full_direct`、`full_nodirect`、`partial_direct`和`partial_nodirect`。'
- en: '`node_add_prob`: The probability of a mutation that adds a new node gene.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_add_prob`：添加新节点基因的突变的概率。'
- en: '`node_delete_prob`: The probability of a mutation that removes the existing
    node gene from the genome and all the connections to it.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_delete_prob`：从基因组中删除现有节点基因及其所有连接的突变的概率。'
- en: '`num_hidden`, `num_inputs`, `num_outputs`: The number of hidden, input, and
    output nodes in the genomes of the initial population.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_hidden`、`num_inputs`、`num_outputs`：初始种群基因组的隐藏节点、输入节点和输出节点的数量。'
- en: '`single_structural_mutation`: If set to `True`, then only the structural mutations
    are allowed in the evolution process, that is, only the addition or removal of
    nodes or connections.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single_structural_mutation`：如果设置为`True`，则在进化过程中只允许结构突变，即只允许节点或连接的添加或删除。'
- en: XOR experiment hyperparameters
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XOR实验超参数
- en: 'The XOR experiment starts with a very straightforward initial genome configuration
    that has only two input nodes, one output node, and one special input—the bias
    node. No hidden node is introduced in the initial genome:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: XOR实验从一个非常简单的初始基因组配置开始，该配置只有两个输入节点、一个输出节点和一个特殊的输入——偏差节点。在初始基因组中不引入任何隐藏节点：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The activation function of all the network nodes is a sigmoid and the node
    inputs are aggregated by the `sum` function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网络节点的激活函数是S型，节点输入通过`sum`函数聚合：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The type of the encoded network is feed-forward fully connected:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编码网络的类型是前馈全连接：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'During evolution, the new network nodes and connections are added and/or removed
    with a particular probability:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在进化过程中，新的网络节点和连接以特定的概率被添加和/或删除：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'All the connections are enabled by default, with a very low probability of
    becoming disabled due to mutation:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有连接默认启用，由于突变而变为禁用的概率非常低：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The genomic distance is highly influenced by the excess/disjoint parts of the
    parent genomes to spur the species'' diversity:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 基因组距离高度受父代基因组多余/不连接部分的影响，以促进物种的多样性：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Species stagnation is prolonged to `20` generations, and unique species are
    partially prevented from extinction:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 物种停滞延长到`20`代，并部分防止独特物种灭绝：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The survival threshold of organisms within a species is set to a low value
    to narrow the evolutionary process, allowing only the fittest organisms to reproduce
    (the top 20% of the list of organisms, ordered by fitness). At the same time,
    elitism is also introduced to unconditionally copy the two fittest individuals
    to the next generation in each species. The minimal species size also influences
    speciation, and we leave it as the default value:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 物种内生物的生存阈值被设置为低值，以缩小进化过程，只允许最适应的生物繁殖（按适应性排序的生物列表的前20%）。同时，也引入了精英主义，无条件地将每个物种中两个最适应的个体复制到下一代。最小物种大小也影响物种形成，我们将其保留为默认值：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The species compatibility threshold controls the diversity of species in the
    population. Higher values of this parameter result in a more diverse population.
    Species diversity should be balanced to keep the evolutionary process going in
    the desired direction, avoiding the exploration of too many search vectors, but
    at the same time permitting the exploration of innovation:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 物种兼容性阈值控制种群中物种的多样性。此参数的较高值导致种群具有更高的多样性。物种多样性应保持平衡，以保持进化过程按预期方向进行，避免探索过多的搜索向量，同时允许探索创新：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The population size is set to `150`, which is pretty moderate, but sufficient
    for such a simple problem as XOR. The termination criterion (`fitness_threshold`)
    is set to `15.5` to guarantee that evolution terminates when the solution found
    is maximally close to the goal (the maximal fitness score is `16.0` according
    to our `fitness` function).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 种群大小设置为`150`，这相当适中，但对于如此简单的XOR问题来说已经足够了。终止标准（`fitness_threshold`）设置为`15.5`，以确保当找到的解决方案与目标（根据我们的`fitness`函数，最大适应度分数为`16.0`）最接近时，进化终止。
- en: 'In this task, we are interested in finding the evolution champion that''s able
    to solve the XOR problem, so our termination function (`fitness_criterion`) is
    the `max` function, which selects the maximal fitness among all the organisms
    in a population:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们感兴趣的是找到能够解决XOR问题的进化冠军，因此我们的终止函数（`fitness_criterion`）是`max`函数，它从种群中的所有生物中选择最大适应度：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The complete configuration file, `xor_config.ini`, is provided in the `Chapter3` directory in
    the source files repository associated with this chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的配置文件`xor_config.ini`包含在本章相关源文件存储库的`Chapter3`目录中。
- en: We have only presented the major hyperparameters that have a high impact on
    the NEAT algorithm's performance. The values of the hyperparameters were tested
    to produce a working XOR solver, but feel free to play around and see what happens.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只介绍了对NEAT算法性能有重大影响的超参数。这些超参数的值被测试以生成一个工作的XOR求解器，但请随意尝试并看看会发生什么。
- en: Running the XOR experiment
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行XOR实验
- en: Before we start working on the XOR experiment, we need to set up our Python
    environment correctly according to the requirements of the NEAT-Python library,
    which we chose as the framework for writing our code. The NEAT-Python library
    is available from PyPI, so we can use the pip command to install it into the virtual
    environment of the XOR experiment.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理XOR实验之前，我们需要根据我们选择的NEAT-Python库的要求正确设置我们的Python环境。NEAT-Python库可在PyPI上找到，因此我们可以使用pip命令将其安装到XOR实验的虚拟环境中。
- en: Environment setup
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境设置
- en: 'Before we start writing the code related to the XOR experiment, the appropriate
    Python environment should be created, and all the dependencies need to be installed
    into it. Follow these steps to set up the work environment properly:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写与XOR实验相关的代码之前，应该创建适当的Python环境，并将所有依赖项安装到其中。按照以下步骤正确设置工作环境：
- en: 'A Python 3.5 virtual environment for the XOR experiment is created using the
    `conda` command from the Anaconda Distribution, as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Anaconda Distribution中的`conda`命令创建一个用于XOR实验的Python 3.5虚拟环境，如下所示：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Make sure that Anaconda Distribution is installed in your system, as described
    in [Chapter 2](c673e180-4440-4eea-98f8-8800c77162c8.xhtml), *Python Libraries
    and Environment Setup*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的系统中已安装Anaconda Distribution，如[第2章](c673e180-4440-4eea-98f8-8800c77162c8.xhtml)中所述，*Python库和环境设置*。
- en: 'To use the newly created virtual environment, you must activate it:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用新创建的虚拟环境，您必须激活它：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After that, the NEAT-Python library can be installed into an active environment
    using the following command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，可以使用以下命令将NEAT-Python库安装到活动环境中：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We use the specific version (`0.92`) of the NEAT-Python library here, which
    was the most recent at the time of writing.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用NEAT-Python库的特定版本（`0.92`），这是撰写时的最新版本。
- en: 'Finally, we need to install the optional dependencies that are used by the
    visualization utilities. This can be done with the `conda` command, as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要安装可视化工具使用的可选依赖项。这可以通过以下`conda`命令完成：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, we are ready to start writing the source code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始编写源代码。
- en: XOR experiment source code
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XOR实验源代码
- en: 'To start the experiment, we need to create a directory named `Chapter3` using
    the `mkdir` command (for Linux and macOS) or `md` (for Windows):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实验，我们需要使用`mkdir`命令（适用于Linux和macOS）或`md`（适用于Windows）创建一个名为`Chapter3`的目录：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This directory will save all the source files related to the experiment described
    in this chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录将保存本章所述实验的所有相关源文件。
- en: Then, we need to copy the `xor_config.ini` file from the source code repository
    associated with this chapter into the newly created directory. This file contains
    the complete configuration of the hyperparameters for the XOR experiment, as we
    discussed earlier.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将`xor_config.ini`文件从与本章相关的源代码存储库复制到新创建的目录中。此文件包含 XOR 实验的超参数完整配置，正如我们之前所讨论的。
- en: The experiments that will be discussed in this book use various utilities to
    visualize the results to help us understand the internals of the neuroevolution
    process. The XOR experiment also depends on the specific visualization utilities
    that are implemented in the `visualize.py` file in this book's source code repository.
    You need to copy this file into the `Chapter3` directory as well.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将要讨论的实验使用各种实用工具来可视化结果，帮助我们理解神经进化过程的内部机制。XOR 实验还依赖于本书源代码存储库中`visualize.py`文件中实现的特定可视化实用工具。你需要将此文件复制到`Chapter3`目录中。
- en: The Anaconda Distribution installation includes VS Code, which is a free cross-platform
    code editor. It is reasonably straightforward in terms of functionality but provides
    excellent support for Python and makes it easy to switch between virtual environments.
    You can use it to write the source code for the experiments described in this
    book.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 分发安装包括 VS Code，这是一个免费的跨平台代码编辑器。在功能方面相当直观，但提供了对 Python 的出色支持，并使得在虚拟环境之间切换变得容易。你可以用它来编写本书中描述的实验的源代码。
- en: 'Finally, create `xor_experiment.py` in the `Chapter3` directory and use your
    favorite Python source code editor to write the code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`Chapter3`目录中创建`xor_experiment.py`，并使用你喜欢的 Python 源代码编辑器编写代码：
- en: 'First, we need to define the imports that will be used later:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要定义稍后将要使用的导入：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we need to write some fitness evaluation code, as we described earlier:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要编写一些适应度评估代码，正如我们之前所描述的：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Never miss the opportunity to write comments in the source code that describe
    the purpose of the function, its input parameters, and the results of execution.
    It is also advantageous to comment on some interesting/tricky parts of the source
    code to provide a better understanding of it to the person who will see it later
    (this could be you!).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要错过在源代码中添加注释的机会，描述函数的目的、输入参数和执行结果。对源代码中一些有趣/棘手的部分进行注释也有利，以便为将来看到它的人（这可能是你！）提供更好的理解。
- en: 'With the fitness evaluation function, you can write a function to evaluate
    all the organisms in the current generation and update the fitness of each genome
    accordingly:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适应度评估函数，你可以编写一个函数来评估当前代的所有生物体，并相应地更新每个基因组的适应度：
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have implemented the function to evaluate the fitness of the individual
    genome and the objective function has been defined, it is time to implement the
    function to run the experiment. The `run_experiment` function loads the hyperparameter
    configuration from the configuration file and creates the initial genome population:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经实现了评估单个基因组适应度的函数，并且目标函数已经被定义，是时候实现运行实验的函数了。`run_experiment`函数从配置文件中加载超参数配置并创建初始基因组种群：
- en: '[PRE19]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We are interested in the accumulation of statistics to evaluate the experiment
    and observe the process in real time. It is also essential to save checkpoints,
    which allows you to restore the execution from a given checkpoint in the case
    of failure. Thus, two types of reporters (standard output and statistics collector)
    and a checkpoint collector can be registered as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们对统计数据的积累感兴趣，以评估实验并实时观察过程。保存检查点也非常重要，这允许你在失败的情况下从给定的检查点恢复执行。因此，可以注册两种类型的报告器（标准输出和统计收集器）以及一个检查点收集器，如下所示：
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After that, we are ready to run neuroevolution for `300` generations by providing
    the `eval_genome` function, which serves to evaluate the fitness scores of each
    genome in the population of each generation until a solution is found or the process
    reaches the maximum number of generations:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们准备通过提供`eval_genome`函数来运行`300`代的神经进化，该函数用于评估每一代种群中每个基因组的适应度分数，直到找到解决方案或过程达到最大代数：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When the execution of the NEAT algorithm stops due to success or after reaching
    the maximum number of generations, the most fit genome is returned. It is possible
    to check whether this genome is a winner, that is, able to solve the XOR problem
    with a given accuracy:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 NEAT 算法的执行因成功或达到最大代数而停止时，将返回最健康的基因组。可以检查此基因组是否为赢家，即能否以给定的精度解决 XOR 问题：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, the collected statistics and the best-fit genome can be visualized
    to explore the results of the neuroevolution process and to see how it performed
    from zero to the maximum number of generations:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，可以可视化收集到的统计信息和最佳匹配基因组，以探索神经进化过程的结果，并查看其从零到最大代数的表现：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The complete source code of the XOR experiment runner can be found in the `xor_experiment.py` file
    at [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter3/xor_experiment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter3/xor_experiment.py).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: XOR 实验运行器的完整源代码可以在 [https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter3/xor_experiment.py](https://github.com/PacktPublishing/Hands-on-Neuroevolution-with-Python/blob/master/Chapter3/xor_experiment.py)
    文件中找到。
- en: As a result of the preceding code execution, Matplotlib will be used to render
    graphs with the collected statistics. Also, a network graph of the best-fit genome
    will be presented.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于前面的代码执行，Matplotlib 将用于渲染收集到的统计图。此外，还将展示最佳匹配基因组的网络图。
- en: Running the experiment and analyzing the results
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行实验和分析结果
- en: 'The following command should be issued in the `Chapter3` directory to start
    the experiment:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实验，应在 `Chapter3` 目录中发出以下命令：
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Don't forget to activate the `XOR_neat` virtual environment with `$ conda activate
    XOR_neat`. Otherwise, errors about missing a `neat` package will be raised.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用 `$ conda activate XOR_neat` 激活 `XOR_neat` 虚拟环境。否则，将引发有关缺少 `neat` 包的错误。
- en: 'After the preceding command is entered in your Terminal application of choice,
    the NEAT algorithm starts execution, and the Terminal window starts to show intermediate
    results in real time. For each generation, the output is as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在您选择的终端应用程序中输入前面的命令后，NEAT 算法开始执行，终端窗口开始实时显示中间结果。对于每一代，输出如下：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The population''s average fitness (`6.01675`) in generation `43`, which is
    quite low compared to the completion criterion set in the configuration file (`fitness_threshold
    =15.5`). However, it looks like we have some potential champion species (`ID:
    2`) that are on their way to reaching the target fitness threshold by evolving
    the champion organism with a fitness score of `14.54383`, which encodes an ANN
    phenotype that consists of four nodes and seven connections (the size is (`4,7`)).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '在第 43 代，种群的平均健康分数（`6.01675`）与配置文件中设置的完成标准（`fitness_threshold =15.5`）相比相当低。然而，看起来我们有一些有潜力的冠军物种（`ID:
    2`），它们正在通过进化具有健康分数 `14.54383` 的冠军生物体来达到目标健康分数阈值，该分数编码了一个由四个节点和七个连接组成的 ANN 表型（大小为
    `4,7`）。'
- en: 'The population includes 151 individuals separated into five species with the
    following properties:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 种群包括 151 个个体，分为五个物种，具有以下属性：
- en: '`id` is a species identifier.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 是物种标识符。'
- en: '`age` is the age of the species as the number of generations from their creation
    until now.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`age` 是物种的年龄，即从其创建到现在的代数。'
- en: '`size` is the number of individuals belonging to this species.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` 是属于此物种的个体数量。'
- en: '`fitness` is the species fitness score calculated from its individuals (max,
    in our case).'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fitness` 是从其个体（在我们的情况下为最大值）计算出的物种健康分数。'
- en: '`adj fit` is the fitness of a particular species that''s been adjusted to the
    entire population''s fitness scores.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adj fit` 是特定物种的适应性，它已被调整以适应整个种群的健康分数。'
- en: '`stag` is the stagnation age of a particular species as the number of generations
    since the species'' last fitness improvements.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stag` 是特定物种的停滞年龄，即自物种上次健康分数改善以来的代数。'
- en: 'When an appropriate XOR solver is found by the NEAT algorithm, the following
    output is presented in the Terminal window. It starts with general statistics
    about the final genome population and the winner (the successful XOR solver):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当 NEAT 算法找到适当的 XOR 求解器时，终端窗口将显示以下输出。它以关于最终基因组种群和赢家（成功的 XOR 求解器）的一般统计数据开始：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'From the preceding output, we can see that, in generation `44`, the evolution
    process creates a genome that encodes a phenotype ANN that can solve an XOR problem
    with a given accuracy. This genome belongs to the organism from species with `ID:2`,
    and this species has already championed the evolutionary process over the past
    seven generations. The champion organism (`ID:6531`) of generation `44` is a mutation
    of an individual (`ID:5368`) in the species with `ID:2` from the previous generation
    that has lost one hidden node and now has three nodes with seven connections (`size:
    (3, 7)`).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，我们可以看到，在代 `44` 中，进化过程创建了一个基因组，该基因组编码了一个表型 ANN，可以以给定的精度解决 XOR 问题。这个基因组属于
    `ID:2` 物种的生物，而这个物种在过去七代中已经主导了进化过程。代 `44` 的冠军生物（`ID:6531`）是来自上一代 `ID:2` 物种的一个个体（`ID:5368`）的变异，它失去了一个隐藏节点，现在有三个节点和七个连接（大小：`(3,
    7)`）。
- en: 'Then follows the best genome section:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是最佳基因组部分：
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The best genome section represents the performance statistics of a population
    champion, along with its genome configuration. Input nodes have the IDs `-1` and
    `-2` and are not shown because they are relatively simple, providing us with the
    means to input values into the network graph. The output node and two hidden nodes
    have the IDs `0`, `224`, and `612`, respectively. Also, `DefaultNodeGene` holds
    the values for bias, the name of the activation function, and the name of the
    function that's used to aggregate inputs at each node. The connection genes (`DefaultConnectionGene`),
    which will be presented later, provide the IDs of the source and target nodes,
    along with the associated connection weight.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳基因组部分代表了种群冠军的性能统计信息，以及其基因组配置。输入节点具有 IDs `-1` 和 `-2`，并且没有显示，因为它们相对简单，为我们提供了将值输入到网络图中的手段。输出节点和两个隐藏节点分别具有
    IDs `0`、`224` 和 `612`。此外，`DefaultNodeGene` 包含了偏置值、激活函数的名称以及用于在每个节点聚合输入的函数的名称。稍后将要介绍的连接基因（`DefaultConnectionGene`）提供了源节点和目标节点的
    ID，以及相关的连接权重。
- en: 'Finally, let''s look at the `Output` section:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看 `Output` 部分：
- en: '[PRE28]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `Output` section represents the output values that are produced by the ANN
    of the phenotype of the population champion when receiving four input data pairs.
    As we can see, the output is close to the expected values within the specified
    accuracy.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`Output` 部分表示当接收四个输入数据对时，种群冠军表型的 ANN 生成的输出值。正如我们所见，输出值在指定的精度范围内接近预期值。'
- en: 'The `Output` directory also contains a diagram of the ANN graph of the successful
    XOR solver, which is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`Output` 目录还包含成功解决 XOR 问题的 ANN 图的图表，如下所示：'
- en: '![](img/e46d445a-5e77-42fb-98f4-9c630bc3ebcf.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e46d445a-5e77-42fb-98f4-9c630bc3ebcf.png)'
- en: The ANN of the XOR winner phenotype
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: XOR 胜者表型的 ANN
- en: The ANN of the winner phenotype is close to the optimal configuration we described
    earlier, but it has one additional hidden node (`ID:612`). The bias node is not
    shown in the graph since the NEAT-Python library does not allocate a bias to a
    separate node; instead, it assigns a bias value to each network node as an attribute,
    which can be seen in the output listing (each `DefaultNodeGene` has a bias attribute).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 胜者表型的 ANN 接近我们之前描述的优化配置，但它有一个额外的隐藏节点（`ID:612`）。偏置节点在图中没有显示，因为 NEAT-Python 库不会为单独的节点分配偏置；相反，它将偏置值分配给每个网络节点作为属性，这可以在输出列表中看到（每个
    `DefaultNodeGene` 都有一个偏置属性）。
- en: 'A plot with the statistics of fitness change over generations of evolution
    is also saved to the `Output` directory:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含进化过程中适应度变化统计的图表也被保存在 `Output` 目录中：
- en: '![](img/e1a831ca-8acd-4dd7-a27b-7efeaec0d5ee.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e1a831ca-8acd-4dd7-a27b-7efeaec0d5ee.png)'
- en: Population's average and best fitness scores changing over generations
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 种群平均和最佳适应度分数随代数的变化
- en: The preceding plot visualizes the changes in the best and average fitness scores
    of the population over generations of evolution. The average fitness of the population
    has increased slightly. However, due to the speciation feature that was introduced
    in the NEAT algorithm, some species have demonstrated outstanding performance
    from the earliest generations (`#10`), and thanks to the preservation of the beneficial
    mutation, they finally managed to produce a champion organism that solves the
    XOR problem with a given accuracy.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表展示了种群在进化过程中的最佳和平均适应度分数的变化。种群的平均适应度略有提高。然而，由于在NEAT算法中引入的物种形成特性，一些物种从最早的一代（`#10`）就表现出卓越的性能，并且得益于对有益突变的保留，它们最终成功地产生了一个冠军生物体，该生物体以给定的精度解决了XOR问题。
- en: 'The `Output` directory also contains the speciation graph, as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`Output`目录还包含物种形成图，如下所示：'
- en: '![](img/34f1a205-b1d0-4253-bba7-28fd754060de.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/34f1a205-b1d0-4253-bba7-28fd754060de.png)'
- en: Speciation of the population over generations of evolution
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 进化过程中种群的多代物种形成
- en: The speciation graph demonstrates how the speciation process has evolved over
    the generations of the population of organisms. Each separate species is marked
    with a different color. The evolution began with a single species (`ID:1`), which
    includes the entire population. Then, the second species (`ID:2`) sprouted around
    the 10th generation and eventually produced a champion organism. Also, in the
    later stages of evolution, the population branched into three more species in
    generations `23`, `39`, and `42`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 物种形成图展示了物种形成过程如何在生物种群的多代中演变。每个独立的物种都用不同的颜色标记。进化始于一个单一的物种（`ID:1`），它包括整个种群。然后，第二个物种（`ID:2`）在第10代左右出现，并最终产生了一个冠军生物体。此外，在进化的后期阶段，种群在代数`23`、`39`和`42`时分支成了三个更多的物种。
- en: Exercises
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Now that we have the source code of the neuroevolutionary-based XOR solver,
    try to experiment by changing NEAT's hyperparameters, which control the evolutionary
    process.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基于神经进化的XOR求解器的源代码，尝试通过改变控制进化过程的NEAT超参数进行实验。
- en: 'One of the parameters of particular interest is `compatibility_threshold`,
    which can be found in the `DefaultSpeciesSet` section of the configuration file:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个特别感兴趣的参数是`compatibility_threshold`，它可以在配置文件的`DefaultSpeciesSet`部分找到：
- en: Try to increase its value and monitor the speciation of the population. Compare
    the performance of the algorithm with the new value against the default one (`3.0`).
    Does it get any better?
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试增加其值并监控种群的物种形成。将算法的新值与默认值（`3.0`）进行比较，看是否有任何改进？
- en: What happens if you decrease the value of this parameter? Compare its performance
    against the default value.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你减小这个参数的值会发生什么？将其性能与默认值进行比较。
- en: 'Another essential parameter that controls the evolutionary process is `min_species_size`,
    which can be found in the `DefaultReproduction` section. By changing the values
    of this parameter, you can directly control the minimum number of individuals
    per species and implicitly control the species'' diversity:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 控制进化过程的另一个重要参数是`min_species_size`，它可以在`DefaultReproduction`部分找到。通过改变此参数的值，你可以直接控制每个物种的最小个体数，并隐式地控制物种的多样性：
- en: Set the `compatibility_threshold` parameter value to the default (`3.0`) and
    try to increase the value of the `min_species_size` parameter in the range `[2,
    8]`. Compare the performance of the algorithm against the default value. See how
    the species' diversity changes over generations. Go through the algorithm's output
    and check whether any species have stagnated and have been removed from the evolution
    due to exceeding the stagnation age.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`compatibility_threshold`参数值设置为默认值（`3.0`），并尝试在范围 `[2, 8]` 内增加`min_species_size`参数的值。将算法的性能与默认值进行比较。查看物种多样性在代与代之间的变化。通过算法的输出检查是否有任何物种停滞并因超过停滞年龄而被从进化中移除。
- en: Set the `min_species_size` parameter value to extremely high for our population
    (32) and look for the explosion of the species diversity near the end of the evolution
    process on the speciation graph. Why does this happen? Check the graph depicting
    the configuration of the ANN phenotype in `Digraph.gv.svg`. Is this optimal?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`min_species_size`参数值设置为极高（32）以适应我们的种群，并在物种形成图上寻找进化过程接近结束时物种多样性的爆炸。为什么会发生这种情况？检查表示ANN表型的配置的`Digraph.gv.svg`图。这是否是最优的？
- en: Increasing the minimum size of species makes the evolutionary process more elaborate
    and allows it to keep more beneficial mutations. As a result, we have an increase
    in the chances of producing the optimal genome that encodes the ANN of the phenotype
    of the minimal XOR solver.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 增加物种的最小尺寸使进化过程更加精细，并允许它保留更多有益的突变。因此，我们增加了产生编码最小XOR求解器表型ANN的最优基因组的可能性。
- en: 'The graph of the ANN of the minimal XOR solver is as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最小XOR求解器的ANN图如下：
- en: '![](img/aaac3788-1eff-40bb-bdb8-ea1b6d4dcb2b.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aaac3788-1eff-40bb-bdb8-ea1b6d4dcb2b.png)'
- en: The optimal ANN phenotype with an increased minimum species size
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 增加最小物种尺寸的最优ANN表型
- en: As we already mentioned, the ANN of the minimal XOR solver has only one hidden
    node, as can be seen in the preceding diagram.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，最小XOR求解器的ANN只有一个隐藏节点，如前图所示。
- en: Try to implement some modified code to solve a three XOR (A xor B xor C) problem.
    Can it be solved with the same hyperparameters that we used in the experiment
    that we described in this chapter?
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试实现一些修改后的代码来解决一个三XOR（A xor B xor C）问题。能否使用我们在本章描述的实验中使用的相同超参数来解决？
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced a classic computer science problem related to
    the creation of the optimal XOR solver. We discussed the basics of the XOR problem
    and demonstrated its importance as the first experiment with neuroevolution—it
    allows you to check whether the NEAT algorithm can evolve a more complex ANN topology,
    starting with the most straightforward ANN configuration. Then, we defined the
    objective function for the optimal XOR solver and a detailed description of the
    NEAT hyperparameters. After that, we used the NEAT-Python library to write the
    source code of the XOR solver using a defined objective function, and then we
    experimented.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一个与创建最优XOR求解器相关的经典计算机科学问题。我们讨论了XOR问题的基本原理，并展示了它在神经进化实验中的重要性——它允许你检查NEAT算法是否能够从最简单的ANN配置开始进化出更复杂的ANN拓扑结构。然后，我们定义了最优XOR求解器的目标函数和NEAT超参数的详细描述。之后，我们使用NEAT-Python库，通过定义的目标函数编写了XOR求解器的源代码，并进行了实验。
- en: The results of the experiment we carried out allowed us to conclude the relationship
    between the number of species in the population, the minimum size of each species,
    and the performance of the algorithm, as well as the produced ANN topologies.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行的实验结果使我们能够得出种群中物种数量、每个物种的最小尺寸以及算法性能之间的关系，以及产生的ANN拓扑结构。
- en: In the next chapter, we will learn about classic reinforcement learning experiments,
    which are often used as benchmarks for control strategy implementation. You will
    learn how to write accurate simulations of real-life physical apparatuses and
    how to use such simulations to define the objective functions for the NEAT algorithm.
    You will get first-hand experience of writing the control strategies for various
    cart-pole balancing controllers using the NEAT-Python library.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习经典的强化学习实验，这些实验通常用作控制策略实现的基准。你将学习如何编写真实物理装置的准确模拟，以及如何使用这些模拟来定义NEAT算法的目标函数。你将亲身体验使用NEAT-Python库编写各种小车平衡控制器的控制策略。
