- en: Get Up and Running with TensorFlow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速入门 TensorFlow
- en: 'In this chapter, we are going to give an overview of one of the most widely
    used deep learning frameworks. TensorFlow has big community support that is growing
    day by day, which makes it a good option for building your complex deep learning
    applications. From the TensorFlow website:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述一个最广泛使用的深度学习框架。TensorFlow 拥有庞大的社区支持，并且日益壮大，使其成为构建复杂深度学习应用程序的一个良好选择。来自
    TensorFlow 网站的介绍：
- en: <q class="calibre52">"TensorFlow is an open source software library for numerical
    computation using data flow graphs. Nodes in the graph represent mathematical
    operations, while the graph edges represent the multidimensional data arrays (tensors)
    communicated between them. The flexible architecture allows you to deploy computation
    to one or more CPUs or GPUs in a desktop, server, or mobile device with a single
    API. TensorFlow was originally developed by researchers and engineers working
    on the Google Brain Team within Google's Machine Intelligence research organization
    for the purposes of conducting machine learning and deep neural networks research,
    but the system is general enough to be applicable in a wide variety of other domains
    as well."</q>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <q class="calibre52">“TensorFlow 是一个开源软件库，旨在通过数据流图进行数值计算。图中的节点代表数学运算，而图的边缘代表在节点间传递的多维数据数组（张量）。灵活的架构允许你将计算部署到一台或多台
    CPU 或 GPU 上，无论是在桌面、服务器还是移动设备上，都可以通过单一的 API 完成。TensorFlow 最初由谷歌机器智能研究组织中的 Google
    Brain 团队的研究人员和工程师开发，用于进行机器学习和深度神经网络的研究，但该系统足够通用，能够应用于许多其他领域。”</q>
- en: 'The following topics are going to  be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下内容：
- en: TensorFlow installation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow 安装
- en: The TensorFlow environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow 环境
- en: Computational graphs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算图
- en: TensorFlow data types, variables, and placeholders
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow 数据类型、变量和占位符
- en: Getting output from TensorFlow
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 TensorFlow 输出
- en: TensorBoard—visualizing learning
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorBoard——可视化学习
- en: TensorFlow installation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow 安装
- en: 'TensorFlow installation comes with two modes: CPU and GPU. We will start off
    the installation tutorial by installing TensorFlow in GPU mode.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 安装提供两种模式：CPU 和 GPU。我们将从安装 GPU 模式的 TensorFlow 开始。
- en: TensorFlow GPU installation for Ubuntu 16.04
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow GPU 安装教程（Ubuntu 16.04）
- en: The GPU mode installation of TensorFlow requires an up-to-date installation
    of the NVIDIA drivers because the GPU version of TensorFlow only supports CUDA
    at the moment. The following section will take you through a step-by-step process
    of installing NVIDIA drivers and CUDA 8.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 的 GPU 模式安装需要最新版本的 NVIDIA 驱动程序，因为目前只有 GPU 版本的 TensorFlow 支持 CUDA。以下部分将带你通过逐步安装
    NVIDIA 驱动程序和 CUDA 8 的过程。
- en: Installing NVIDIA drivers and CUDA 8
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 NVIDIA 驱动程序和 CUDA 8
- en: 'First off, you need to install the correct NVIDIA driver based on your GPU.
    I have a GeForce GTX 960M GPU, so I will go ahead and install `nvidia-375` (if
    you have a different GPU, you can use the NVIDIA search tool [http://www.nvidia.com/Download/index.aspx](http://www.nvidia.com/Download/index.aspx)
    to help you find your correct driver version). If you want to know your machine''s
    GPU, you can issue the following command in the terminal:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要根据你的 GPU 安装正确的 NVIDIA 驱动程序。我使用的是 GeForce GTX 960M GPU，所以我将安装 `nvidia-375`（如果你使用的是其他
    GPU，可以使用 NVIDIA 搜索工具 [http://www.nvidia.com/Download/index.aspx](http://www.nvidia.com/Download/index.aspx)
    来帮助你找到正确的驱动程序版本）。如果你想知道你的机器的 GPU 型号，可以在终端中执行以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should get the following output in the terminal:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到以下输出：
- en: '![](img/b73594fd-a0b9-48d2-a972-db1fc651aa25.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b73594fd-a0b9-48d2-a972-db1fc651aa25.png)'
- en: 'Next, we need to add a proprietary repository of NVIDIA drivers to be able
    to install the drivers using `apt-get`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一个专有的 NVIDIA 驱动程序仓库，以便能够使用 `apt-get` 安装驱动程序：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After successfully installing the NVIDIA drivers, restart the machine. To verify
    whether the drivers installed correctly, issue the following command in the Terminal:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装 NVIDIA 驱动程序后，重新启动机器。要验证驱动程序是否正确安装，可以在终端中执行以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should get the following output in the Terminal:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到以下输出：
- en: '![](img/d82ab7c0-53ee-4fb3-a5e7-e6a98d33fcc6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d82ab7c0-53ee-4fb3-a5e7-e6a98d33fcc6.png)'
- en: 'Next, we need to install CUDA 8\. Open the following CUDA download link: [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    Select your operating system, architecture, distribution, version, and finally,
    installer type as per the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装 CUDA 8。打开以下 CUDA 下载链接：[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)。根据以下截图选择你的操作系统、架构、发行版、版本，最后选择安装程序类型：
- en: '![](img/8e23b031-65b4-4c1c-9df7-a036dd2af7ac.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e23b031-65b4-4c1c-9df7-a036dd2af7ac.png)'
- en: 'The installer file is about 2 GB. You need to issue the following installation
    instructions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装文件大约 2 GB。你需要执行以下安装指令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we need to add the libraries to the `.bashrc` file by issuing the following
    commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过执行以下命令将库添加到 `.bashrc` 文件中：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, you need to verify the installation of CUDA 8 by issuing the following
    command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要通过执行以下命令来验证 CUDA 8 的安装：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should get the following output in the terminal:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到以下输出：
- en: '![](img/430d007d-a24c-4921-b941-b0e96bc1945d.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/430d007d-a24c-4921-b941-b0e96bc1945d.png)'
- en: 'Finally, in this section, we need to install cuDNN 6.0\. The **NVIDIA CUDA
    Deep Neural Network library** (**cuDNN**) is a GPU-accelerated library of primitives
    for deep neural networks. You can download it from NVIDIA''s web page. Issue the
    following commands to extract and install cuDNN:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在本节中，我们需要安装 cuDNN 6.0。**NVIDIA CUDA 深度神经网络库**（**cuDNN**）是一个为深度神经网络加速的 GPU
    库。你可以从 NVIDIA 的网页下载。执行以下命令以解压并安装 cuDNN：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To ensure that your installation has been successful, you can use the `nvidia-smi`
    tool in the terminal. If you had a successful installation, this tool will provide
    you with a monitoring information such as RAM and the running process for your
    GPU.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你的安装成功，你可以在终端中使用 `nvidia-smi` 工具。如果安装成功，该工具会提供关于 GPU 的监控信息，比如 RAM 和运行中的进程。
- en: Installing TensorFlow
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 TensorFlow
- en: After preparing the GPU environment for TensorFlow, we are now ready to install
    TensorFlow in GPU mode. But for going through the TensorFlow installation process,
    you can first install a few helpful Python packages that will help you in the
    next chapters and make your development environment easier.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 TensorFlow 准备好 GPU 环境之后，我们现在可以安装 GPU 版本的 TensorFlow。但在安装 TensorFlow 之前，你可以先安装一些有用的
    Python 包，这些包将在接下来的章节中帮助你，并使你的开发环境更为方便。
- en: 'We can start by installing some data manipulation, analysis, and visualization
    libraries by issuing the following commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下命令来安装一些数据处理、分析和可视化库：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, you can install more useful libraries, such as the virtual environment,
    Jupyter Notebook, and so on:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以安装更多有用的库，如虚拟环境、Jupyter Notebook 等：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we can start to install TensorFlow in GPU mode by issuing the following
    command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过执行以下命令开始安装 GPU 版本的 TensorFlow：
- en: '[PRE21]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can verify the successful installation of TensorFlow using Python:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 Python 来验证 TensorFlow 是否成功安装：
- en: '[PRE22]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should get the following output in the terminal:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到以下输出：
- en: '![](img/0ec98d26-4d2a-4c15-840d-1064375bad66.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ec98d26-4d2a-4c15-840d-1064375bad66.png)'
- en: TensorFlow CPU installation for Ubuntu 16.04
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow CPU 安装（适用于 Ubuntu 16.04）
- en: 'In this section, we are going to install the CPU version, which doesn''t require
    any drivers prior to installation. So, let''s start off by installing some useful
    packages for data manipulation and visualization:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装 CPU 版本，这个版本在安装之前不需要任何驱动程序。所以，首先让我们安装一些有用的数据处理和可视化的包：
- en: '[PRE23]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, you can install more useful libraries, such as the virtual environment,
    Jupyter Notebook, and so on:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以安装一些有用的库，比如虚拟环境、Jupyter Notebook 等：
- en: '[PRE26]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, you can install the latest TensorFlow in CPU mode by issuing the following
    command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过执行以下命令来安装最新的 TensorFlow CPU 版本：
- en: '[PRE30]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can check whether TensorFlow was installed successfully be running the
    following TensorFlow statements:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下 TensorFlow 语句来检查 TensorFlow 是否成功安装：
- en: '[PRE31]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should get the following output in the terminal:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到以下输出：
- en: '![](img/f1741db2-73e4-4a95-8ffe-94aba75c3c4d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1741db2-73e4-4a95-8ffe-94aba75c3c4d.png)'
- en: TensorFlow CPU installation for macOS X
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow CPU 安装（适用于 macOS X）
- en: 'In this section, we are going to install TensorFlow for macOS X using `virtualenv`.
    So, let''s start off by installing the `pip` tool by issuing the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 `virtualenv` 为 macOS X 安装 TensorFlow。所以，首先让我们通过执行以下命令安装 `pip` 工具：
- en: '[PRE32]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we need to install the virtual environment library:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装虚拟环境库：
- en: '[PRE33]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After installing the virtual environment library, we need to create a container
    or virtual environment which will host the installation of TensorFlow and any
    packages that you might want to install without affecting the underlying host
    system:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 安装虚拟环境库后，我们需要创建一个容器或虚拟环境，它将托管TensorFlow的安装以及你可能想要安装的任何包，而不会影响底层的主机系统：
- en: '[PRE34]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This assumes that the `targetDirectory` is `~/tensorflow`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里假设`targetDirectory`为`~/tensorflow`。
- en: 'Now that you have created the virtual environment, you can access it by issuing
    the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了虚拟环境，你可以通过输入以下命令来访问它：
- en: '[PRE36]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Once you issue this command, you'll get access to the virtual machine that you
    have just created and you can install any packages that will be only installed
    in this environment and won't affect the underlying or host system that you're
    using.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入这个命令，你将进入你刚刚创建的虚拟机，你可以在这个环境中安装任何包，而这些包只会安装在这个环境中，不会影响你所使用的底层或主机系统。
- en: 'In order to exit from the environment, you can issue the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出环境，你可以输入以下命令：
- en: '[PRE37]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Note that, for now, we do want to be inside the virtual environment, so turn
    it back on for now. Once you''re done playing with TensorFlow, you should deactivate
    it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当前我们确实需要待在虚拟环境内，所以暂时保持它激活。一旦你完成了TensorFlow的使用，应该退出虚拟环境：
- en: '[PRE38]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In order to install the CPU version of TensorFlow, you can issue the following
    commands, which will also install any dependent libraries that TensorFlow requires:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装TensorFlow的CPU版本，你可以输入以下命令，这将同时安装TensorFlow所需的所有依赖库：
- en: '[PRE39]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: TensorFlow GPU/CPU installation for Windows
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow GPU/CPU安装指南（Windows）
- en: 'We will assume that you have Python 3 already installed on your system. To
    install TensorFlow, start a terminal as an administrator as follows. Open up the
    Start menu, search for cmd, and then right-click on it and click Run as an administrator:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你的系统已经安装了Python 3。要安装TensorFlow，请以管理员身份启动终端，方法如下：打开开始菜单，搜索cmd，然后右键点击它并选择“以管理员身份运行”：
- en: '![](img/da53c90a-8a64-464d-a807-0fa362e3cfd2.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da53c90a-8a64-464d-a807-0fa362e3cfd2.png)'
- en: 'Once you have a command window opened, you can issue the following command
    to install TensorFlow in GPU mode:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开了命令窗口，你可以输入以下命令以在GPU模式下安装TensorFlow：
- en: You need to have `pip` or `pip3` (depending on your Python version) installed
    before issuing the next command.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在输入下一个命令之前安装`pip`或`pip3`（取决于你的Python版本）。
- en: '[PRE41]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Issue the following command to install TensorFlow in CPU mode:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令以在CPU模式下安装TensorFlow：
- en: '[PRE42]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The TensorFlow environment
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow环境
- en: TensorFlow is another deep learning framework from Google and, as the name **TensorFlow** implies,
    it's derived from the operations which neural networks perform on multidimensional
    data arrays or tensors! It's literally a flow of tensors.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow是谷歌推出的另一个深度学习框架，正如**TensorFlow**这个名称所暗示的，它源自神经网络在多维数据数组或张量上执行的操作！它实际上是张量的流动。
- en: But first off, why are we going to use a deep learning framework in this book?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，为什么我们要在本书中使用深度学习框架？
- en: '**It scales machine learning code**: Most of the research into deep learning
    and machine learning can be applied/attributed because of these deep learning
    frameworks. They have allowed data scientists to iterate extremely quickly and
    have made deep learning and other ML algorithms much more accessible to practitioners.
    Big companies such as Google, Facebook, and so on are using such deep learning
    frameworks to scale to billions of users.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它扩展了机器学习代码**：深度学习和机器学习的大部分研究能够被应用或归因于这些深度学习框架。它们使数据科学家能够极其快速地进行迭代，并使深度学习和其他机器学习算法更加易于实践者使用。像谷歌、Facebook等大公司正在使用这样的深度学习框架来扩展到数十亿用户。'
- en: '**It computes gradients**: Deep learning frameworks can also compute gradients
    automatically. If you go through gradient calculation step by step, you will find
    out that gradient calculation is not trivial and it could be tricky to implement
    a bug-free version of it yourself.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它计算梯度**：深度学习框架也可以自动计算梯度。如果你一步步跟踪梯度计算的过程，你会发现梯度计算并不简单，并且自己实现一个无错的版本可能会很棘手。'
- en: '**It standardizes machine learning applications for sharing**: Also, pretrained
    models are available online, which can be used across different deep learning
    frameworks, and these pretrained models help people who have limited resources
    in terms of GPU so that they don''t have to start from scratch every time. We
    can stand on the shoulders of giants and it take it from there.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它标准化了用于分享的机器学习应用程序**：此外，可以在线获取预训练模型，这些模型可以在不同的深度学习框架中使用，并且这些预训练模型帮助那些在GPU资源有限的人，这样他们就不必每次都从头开始。我们可以站在巨人的肩膀上，从那里开始。'
- en: '**There are lots of deep learning frameworks available** with different advantages,
    paradigms, levels of abstraction, programming languages, and so on.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有很多可用的深度学习框架**，具有不同的优势、范式、抽象级别、编程语言等等。'
- en: '**Interface with GPUs for parallel processing**: Using GPUs for computations
    is a fascinating feature, because GPUs speed up your code a lot faster than the
    CPU because of number of cores and parallelization.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与GPU接口进行并行处理**：使用GPU进行计算是一个非常迷人的特性，因为GPU比CPU拥有更多的核心和并行化，所以能够大大加速您的代码。'
- en: That's why Tensorflow is almost necessary in order to make progress in deep
    learning, because it can facilitate your projects.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么TensorFlow几乎是在深度学习中取得进展的必要条件，因为它可以促进您的项目。
- en: So, briefly, what is TensorFlow?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，简而言之，什么是TensorFlow？
- en: TensorFlow is a deep learning framework from Google which is open source for
    numerical computations using data flow graphs
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow是谷歌的深度学习框架，用于使用数据流图进行数值计算的开源工具。
- en: It was originally developed by the Google Brain Team to facilitate their machine
    learning research
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它最初由Google Brain团队开发，以促进他们的机器学习研究。
- en: TensorFlow is an interface for expressing machine learning algorithms and an
    implementation for executing such algorithms
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow是表达机器学习算法和执行这些算法的实现的接口。
- en: How does TensorFlow work and what is the underlying paradigm?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow是如何工作的，其潜在范式是什么？
- en: Computational graphs
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算图
- en: 'The biggest idea of all of the big ideas about TensorFlow is that the numeric
    computations are expressed as a computation graph, as shown in the following figure.
    So, the backbone of any TensorFlow program is going to be a computational graph,
    where the following is true:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有关TensorFlow的所有大想法中最重要的是，数值计算被表达为一个计算图，如下图所示。因此，任何TensorFlow程序的核心都将是一个计算图，以下内容为真：
- en: Graph nodes are operations which have any number of inputs and outputs
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图节点是具有任意数量输入和输出的操作。
- en: Graph edges between our nodes are going to be tensors that flow between these
    operations, and the best way of thinking about what tensors are in practice is
    as *n*-dimensional arrays
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们节点之间的图边将是在这些操作之间流动的张量，关于张量的最佳思考方式实际上是作为*n*维数组。
- en: 'The advantage of using such flow graphs as the backbone of your deep learning
    framework is that it allows you to build complex models in terms of small and
    simple operations. Also, this is going to make the gradient calculations extremely
    simple when we address that in a later section:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的流图作为深度学习框架的主干的优势在于，它允许您以小而简单的操作构建复杂的模型。此外，当我们在后面讨论梯度计算时，这将使得梯度计算变得非常简单：
- en: '![](img/e996731b-b5d1-4fd3-9409-937bffdea297.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e996731b-b5d1-4fd3-9409-937bffdea297.png)'
- en: Another way of thinking about a TensorFlow graph is that each operation is a
    function that can be evaluated at that point.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考TensorFlow图的方式是，每个操作都是可以在那一点评估的函数。
- en: TensorFlow data types, variables, and placeholders
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow数据类型、变量和占位符
- en: The understanding of computational graphs will help us to think of complex models
    in terms of small subgraphs and operations.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对计算图的理解将帮助我们将复杂模型看作是小子图和操作。
- en: 'Let''s look at an example of a neural network with only one hidden layer and
    what its computation graph might look like in TensorFlow:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个只有一个隐藏层的神经网络的例子，以及其在TensorFlow中可能的计算图是什么样子：
- en: '![](img/e7423ec6-bcff-4926-aa39-1dfaeef0ea5f.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7423ec6-bcff-4926-aa39-1dfaeef0ea5f.png)'
- en: So, we have some hidden layer that we are trying to compute, as the ReLU activation
    of some parameter matrix *W* time some input *x* plus a bias term *b*. The ReLU
    function takes the max of your output and zero.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有一些隐藏层，我们试图计算，如某个参数矩阵*W*时间一些输入*x*加上偏差项*b*的ReLU激活。ReLU函数取输出的最大值和零之间的较大者。
- en: 'The following diagram shows what the graph might look like in TensorFlow:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了TensorFlow中图形的可能样子：
- en: '![](img/efac83f1-6997-4383-a90b-64d40eb1aabf.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efac83f1-6997-4383-a90b-64d40eb1aabf.png)'
- en: In this graph, we have variables for our *b* and *W* and we have something called
    a placeholder for *x*; we also have nodes for each of the operations in our graph.
    So, let's get into more detail about those node types.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图中，我们为 *b* 和 *W* 定义了变量，并且我们为 *x* 定义了一个占位符；我们还为图中的每个操作定义了节点。接下来，我们将详细了解这些节点类型。
- en: Variables
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: 'Variables are going to be stateful nodes which output their current value.
    In this example, it''s just *b* and *W*. What we mean by saying that variables
    are stateful is that they retain their current value over multiple executions
    and it''s easy to restore saved values to variables:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 变量将是有状态的节点，它们输出当前的值。在这个例子中，就是 *b* 和 *W*。我们所说的变量是有状态的意思是，它们在多次执行过程中保持其当前值，而且很容易将保存的值恢复到变量中：
- en: '![](img/40b4497a-5fd5-48c1-8603-d839b777bdfb.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40b4497a-5fd5-48c1-8603-d839b777bdfb.png)'
- en: Also, variables have other useful features; for example, they can be saved to
    your disk during and after training, which facilities the use that we mentioned
    earlier that it allows people from different companies and groups to save, store,
    and send over their model parameters to other people. Also, the variables are
    the things that you want to tune to minimize the loss and we will see how to do
    that soon.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，变量还有其他有用的功能；例如，它们可以在训练过程中及训练后保存到磁盘，这使得我们之前提到的功能得以实现，即来自不同公司和团队的人们可以保存、存储并将他们的模型参数传输给其他人。而且，变量是你希望调整以最小化损失的东西，我们很快就会看到如何做到这一点。
- en: It's important to know that variables in the graph, such as *b* and *W*, are
    still operations because, by definition, all of your nodes in the graph are operations.
    So, when you evaluate these operations that are holding the values of *b* and
    *W* during runtime, you will get the value of those variables.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，图中的变量，如 *b* 和 *W*，仍然是操作，因为根据定义，图中的所有节点都是操作。因此，当你在运行时评估这些持有 *b* 和 *W*
    值的操作时，你将获得这些变量的值。
- en: 'We can use the `Variable()` function of TensorFlow to define a variable and
    give it some initial value:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 TensorFlow 的 `Variable()` 函数来定义一个变量并给它一个初始值：
- en: '[PRE43]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This line of code will define a variable of 2 by 2 and initialize it from the
    standard normal distribution. You can also give a name to the variable.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码将定义一个 2x2 的变量，并从标准正态分布中初始化它。你还可以为变量命名。
- en: Placeholders
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 占位符
- en: 'The next type of nodes are placeholders. Placeholders are nodes whose values
    are fed at execution time:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下一种类型的节点是占位符。占位符是那些在执行时输入值的节点：
- en: '![](img/4580007b-fbef-402c-b9ab-0c549ca2e9be.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4580007b-fbef-402c-b9ab-0c549ca2e9be.png)'
- en: If you have inputs into your computational graph that depend on some external
    data, these are placeholders for values that we are going to add into our computation
    during training. So, for placeholders, we don't provide any initial values. We
    just assign a data type and shape of a tensor so the graph still knows what to
    compute even though it doesn't have any stored values yet.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的计算图有依赖于外部数据的输入，这些输入就是我们将在训练过程中添加到计算中的占位符。因此，对于占位符，我们不提供任何初始值。我们只需指定张量的数据类型和形状，这样即使图中还没有存储任何值，计算图仍然知道该计算什么。
- en: 'We can use the placeholder function of TensorFlow to create a placeholder:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 TensorFlow 的占位符函数来创建一个占位符：
- en: '[PRE44]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: These lines of code define two placeholder variables of a certain shape and
    then define an operation (see the next section) that multiplies these two values
    together.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码行定义了两个特定形状的占位符变量，并定义了一个操作（参见下一节），该操作将这两个值相乘。
- en: Mathematical operations
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数学操作
- en: 'The third type of nodes are mathematical operations, and these are going to
    be our matrix multiplication (MatMul), addition (Add), and ReLU. All of these
    are nodes in your TensorFlow graph, and it''s very similar to NumPy operations:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种类型的节点是数学操作，它们将是我们的矩阵乘法（MatMul）、加法（Add）和 ReLU。这些都是你 TensorFlow 图中的节点，和 NumPy
    操作非常相似：
- en: '![](img/80bde29f-4adb-45e7-bc6c-1ffc47fbebf0.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80bde29f-4adb-45e7-bc6c-1ffc47fbebf0.png)'
- en: Let's see what this graph will look like in code.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这张图在代码中会是什么样子。
- en: 'We perform the following steps to produce the preceding graph:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来生成上面的图：
- en: Create weights *W* and *b*, including initialization. We can initialize the
    weight matrix *W* by sampling from uniform distribution *W ~ Uniform(-1,1)* and
    initialize *b* to be 0.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建权重 *W* 和 *b*，包括初始化。我们可以通过从均匀分布中采样来初始化权重矩阵 *W*，即 *W ~ Uniform(-1,1)*，并将 *b*
    初始化为 0。
- en: Create input placeholder *x*, which is going to have a shape of *m * 784* input
    matrix.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建输入占位符 *x*，它将具有 *m * 784* 的输入矩阵形状。
- en: Build a flow graph.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建流图。
- en: 'Let''s go ahead and follow those steps to build the flow graph:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按照以下步骤来构建流图：
- en: '[PRE45]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![](img/1a80ee6c-f094-4944-b153-0d6cdcb98b7d.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a80ee6c-f094-4944-b153-0d6cdcb98b7d.png)'
- en: So far, we have defined our graph and now, we need to actually run it.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经定义了我们的图，现在我们需要实际运行它。
- en: Getting output from TensorFlow
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取TensorFlow的输出
- en: In the previous section, we knew how to build a computational graph, but we
    need to actually run it and get its value.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们知道如何构建计算图，但我们需要实际运行它并获取其值。
- en: We can deploy/run the graph with something called a session, which is just a
    binding to a particular execution context such as a CPU or a GPU. So, we are going
    to take the graph that we build and deploy it to a CPU or a GPU context.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一种叫做会话（session）的方式来部署/运行图，这实际上是一个绑定到特定执行上下文（例如CPU或GPU）的机制。因此，我们将构建的图部署到CPU或GPU上下文中。
- en: 'To run the graph, we need to define a session object called `sess`, and we
    are going to call the function `run` which takes two arguments:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行图，我们需要定义一个叫做 `sess` 的会话对象，然后调用 `run` 函数，该函数接受两个参数：
- en: '[PRE46]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Here:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '`fetches` are the list of the graph nodes that return the output of the nodes.
    These are the nodes we are interested in computing the value of.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetches` 是图节点的列表，返回节点的输出。我们关注的正是这些节点的计算值。'
- en: '`feeds` are going to be a dictionary mapping from graph nodes to actual values
    that we want to run in our model. So, this is where we actually fill in the placeholders
    that we talked about earlier.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feeds` 是一个字典，将图节点映射到我们希望在模型中运行的实际值。因此，这就是我们实际填写之前提到的占位符的地方。'
- en: 'So, let''s go ahead and run our graph:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们继续运行我们的图：
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'After running our graph through the `sess` object, we should get an output
    similar to the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `sess` 对象运行我们的图后，我们应该得到类似下面的输出：
- en: '![](img/7faee772-f55c-41db-b38f-9768eb147d71.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7faee772-f55c-41db-b38f-9768eb147d71.png)'
- en: '[PRE48]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can also use the session variable in a with block to ensure that it will
    be closed after executing the graph:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在一个with块中使用会话变量，以确保在执行图后会话会被关闭：
- en: '[PRE49]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: TensorBoard – visualizing learning
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorBoard – 可视化学习
- en: 'The computations you''ll use TensorFlow for—such as training a massive deep
    neural network—can be complex and confusing, and its corresponding computational
    graph will be complex as well. To make it easier to understand, debug, and optimize
    TensorFlow programs, the TensorFlow team have included a suite of visualization
    tools called TensorBoard, which is a suite of web applications that can run through
    your browser. TensorBoard can be used to visualize your TensorFlow graph, plot
    quantitative metrics about the execution of your graph, and show additional data
    such as images that pass through it. When TensorBoard is fully configured, it
    looks like this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你将用TensorFlow进行的计算——例如训练一个庞大的深度神经网络——可能会很复杂且令人困惑，相应的计算图也将非常复杂。为了更容易理解、调试和优化TensorFlow程序，TensorFlow团队提供了一套可视化工具，称为TensorBoard，这是一个可以通过浏览器运行的Web应用套件。TensorBoard可以用来可视化你的TensorFlow图，绘制关于图执行的定量指标，并展示额外的数据，比如通过它的图像。当TensorBoard完全配置好后，它看起来是这样的：
- en: '![](img/f35cf3a4-a002-4007-94bd-c4be2f595744.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f35cf3a4-a002-4007-94bd-c4be2f595744.png)'
- en: To understand how TensorBoard works, we are going to build a computational graph
    which will act as a classifier for the MNIST dataset, which is a dataset of handwritten
    images.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解TensorBoard的工作原理，我们将构建一个计算图，它将作为MNIST数据集的分类器，MNIST是一个手写图像数据集。
- en: You don't have to understand all the bits and pieces of this model, but it will
    show you the general pipeline of a machine learning model implemented in TensorFlow.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要理解这个模型的所有细节，但它会向你展示一个用TensorFlow实现的机器学习模型的一般流程。
- en: 'So, let''s start off by importing TensorFlow and loading the the required dataset
    using TensorFlow helper functions; these helper functions will check whether you''re
    already downloaded the dataset, otherwise it will download it for you:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们从导入TensorFlow并使用TensorFlow的辅助函数加载所需的数据集开始；这些辅助函数会检查你是否已经下载了数据集，否则它会为你下载：
- en: '[PRE50]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, we need to define the hyperparameters (parameters that could be used
    to fine-tune the performance of your model) and inputs of our model:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义超参数（用于微调模型性能的参数）和模型的输入：
- en: '[PRE51]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now we need to build the model and define a cost function that we are going
    to optimize:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要构建模型并定义我们将要优化的代价函数：
- en: '[PRE52]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We will define the summary variable that will be used to monitor the changes
    that will happen on specific variables such as the loss and how it''s getting
    better through out the training process:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义一个摘要变量，用于监控特定变量（如损失函数）在训练过程中如何变化，以及其改进情况：
- en: '[PRE53]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Finally, we''ll run the model by defining a session variable which will be
    used to execute the computation graph that we have built:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过定义一个会话变量来运行模型，该变量将用于执行我们构建的计算图：
- en: '[PRE54]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The output of the training process should be similar to this:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 训练过程的输出应类似于以下内容：
- en: '[PRE55]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'To see the summarized statistics in TensorBoard, we are going to follow the
    message at the end of our output by issuing the following command in the terminal:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 TensorBoard 中查看汇总统计信息，我们将在终端中输入以下命令，执行输出末尾的提示信息：
- en: '[PRE56]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Then, open `http://0.0.0.0:6006/` into your web browser.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你的网页浏览器中打开`http://0.0.0.0:6006/`。
- en: 'When you open TensorBoard, you should get something similar to the following
    screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 TensorBoard 后，你应该会看到类似于以下的截图：
- en: '![](img/1f3b4ade-178f-41ca-aae9-76566e5db405.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f3b4ade-178f-41ca-aae9-76566e5db405.png)'
- en: This shows the variables that we were monitoring, such as the model accuracy
    and how it's getting higher, and the model loss and how it's getting lower throughout
    the training process. So, you observe that we had a normal learning process here.
    But sometimes you will find out that the accuracy and model loss are changing
    randomly or you want to keep track of some variables and how they are changing
    throughout the session, and TensorBoard will be very useful to help you spot any
    randomness or mistakes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示我们监控的变量，如模型的准确度以及它是如何逐渐提高的，模型的损失函数及其如何逐渐降低。因此，你会看到我们在这里经历了一个正常的学习过程。但有时你会发现准确度和模型损失会随机变化，或者你想跟踪一些变量及其在会话期间的变化，这时
    TensorBoard 将非常有用，帮助你发现任何随机性或错误。
- en: 'Also, if switched to the GRAPHS tab in TensorBoard, you will get to see the
    computational graph that we built in the preceding code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果切换到 TensorBoard 的 GRAPHS 标签页，你将看到我们在前面的代码中构建的计算图：
- en: '![](img/e74b2f16-147f-44e7-a169-1bc1f731860b.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e74b2f16-147f-44e7-a169-1bc1f731860b.png)'
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the installation process for Ubuntu and Mac, gave
    an overview of the TensorFlow programming model, and explained the different types
    of simple nodes that could be used for building complex operations and how to
    get output from TensorFlow using a session object. Also, we covered TensorBoard
    and why it will helpful for debugging and analyzing complex deep learning applications.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了 Ubuntu 和 Mac 的安装过程，介绍了 TensorFlow 编程模型，并解释了可用于构建复杂操作的不同类型的简单节点，以及如何通过会话对象从
    TensorFlow 获取输出。我们还介绍了 TensorBoard，并说明了它在调试和分析复杂深度学习应用中的重要性。
- en: Next, we will go through a basic explanation of neural networks and the intuition
    behind having multilayer neural networks. We will also cover some basic examples
    of TensorFlow and demonstrate how it could be used for regression and classification
    problems.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将简单解释神经网络及多层神经网络背后的直觉。我们还将涵盖一些 TensorFlow 的基本示例，并演示如何将其用于回归和分类问题。
