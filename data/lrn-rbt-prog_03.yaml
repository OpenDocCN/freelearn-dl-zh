- en: '*Chapter 2*: Exploring Robot Building Blocks – Code and Electronics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：探索机器人构建块 - 代码和电子'
- en: In this chapter, we'll take a robot apart to see its parts and systems. We'll
    explore the components of a robot, both the software (code, commands, and libraries)
    and the hardware, and how they go together. When starting to make a robot, it's
    valuable to think about the parts you want and how they relate to one another.
    I recommend sketching a plan of your robot—a block diagram as a guide to the connected
    code and parts, which we will explore in this chapter as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将拆解一个机器人以查看其部件和系统。我们将探索机器人的组件，包括软件（代码、命令和库）和硬件，以及它们是如何组合在一起的。在开始制作机器人时，考虑你想要的部件以及它们之间的关系是非常有价值的。我建议绘制一个机器人计划——一个作为连接代码和部件指南的框图，我们将在本章中探讨这一点。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Looking at what's inside a robot
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看机器人内部的情况
- en: Exploring types of robot components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索机器人组件类型
- en: Exploring controllers and I/O
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索控制器和 I/O
- en: Planning components and code structure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划组件和代码结构
- en: Planning the physical robot
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划物理机器人
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will require the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下内容：
- en: Simple drawing materials, such as a pen and paper
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的绘图材料，如钢笔和纸。
- en: Optional – diagram software such as Draw.io (free at [https://app.diagrams.net](https://app.diagrams.net))
    or Inkscape (free at [https://inkscape.org](https://inkscape.org))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选 - 图形软件，如 Draw.io（免费，见[https://app.diagrams.net](https://app.diagrams.net)）或
    Inkscape（免费，见[https://inkscape.org](https://inkscape.org)）。
- en: Looking at what's inside a robot
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看机器人内部的情况
- en: 'We can start by looking at a robot as a physical system. In *Figure 2.1*, we
    can see a simple hobby robot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从将机器人视为一个物理系统开始。在 *图 2.1* 中，我们可以看到一个简单的业余机器人：
- en: '![](img/B15660_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_01.jpg)'
- en: Figure 2.1 – An assembled hobby robot
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 - 组装好的业余机器人
- en: '*Figure 2.2* shows it in its disassembled form:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.2* 显示了它的拆解形式：'
- en: '![](img/B15660_02_02_NEW.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_02_NEW.jpg)'
- en: Figure 2.2 – A hobby robot's components laid out
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 - 业余机器人的组件布局
- en: 'The component groups in *Figure 2.2* include nine types of components:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.2* 中的组件组包括九种类型的组件：'
- en: The chassis or body forms the main structure of the robot; other parts are attached
    here.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 底盘或机身构成了机器人的主要结构；其他部件都附着在这里。
- en: A castor wheel balances this robot.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个滚轮平衡了这个机器人。
- en: Two drive wheels. Other robots may use more wheels or legs here.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个驱动轮。其他机器人可能在这里使用更多的轮子或腿。
- en: Motors are essential for the robot to move.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电机对于机器人移动是必不可少的。
- en: A motor controller bridges between a controller and connected motors.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个电机控制器在控制器和连接的电机之间架起桥梁。
- en: A controller, here a Raspberry Pi, runs instructions, takes information from
    the sensors, and processes this information to drive outputs, such as motors,
    through the motor controller.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个控制器，这里是一个 Raspberry Pi，运行指令，从传感器获取信息，并处理这些信息以通过电机控制器驱动输出，如电机。
- en: All robots must have power, usually one or more sets of batteries.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有机器人都必须有电源，通常是电池的一套或多套。
- en: Sensors provide information about the robot's environment or the state of its
    physical systems.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传感器提供有关机器人环境或其物理系统状态的信息。
- en: Finally, debug devices are outputs that allow the robot to communicate with
    humans about what its code is doing, and are also useful for looking good.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调试设备是允许机器人与人类沟通其代码正在做什么的输出，而且对于外观也很有用。
- en: We will examine these components in more detail later in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面更详细地检查这些组件。
- en: 'We can visualize a robot as a block diagram (*Figure 2.3*) of connected parts.
    Block diagrams use simple shapes to show a rough idea of how things may be connected:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将机器人可视化为一个连接部件的框图（*图 2.3*）。框图使用简单的形状来展示事物可能连接的大致想法：
- en: '![](img/B15660_02_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_03.jpg)'
- en: Figure 2.3 – A robot block diagram
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 机器人框图
- en: The block diagram in *Figure 2.3* does not use a formal notation. The key I've
    created is off the top of my head, but it should identify sensors, outputs, and
    controllers. It could be as simple as a sketch on some scrap paper. The critical
    factor is that you can see blocks of functionality in the hardware, with the high-level
    flow of data between them.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.3* 中的框图没有使用正式的符号。我创建的关键是从脑海中产生的，但它应该能够识别传感器、输出和控制器。它可能只是一个在废纸上的草图。关键因素是你可以在硬件中看到功能块，它们之间有高级的数据流。'
- en: It is from this diagram that you can develop more detailed plans, plans containing
    details in terms of electrical connections, power requirements, the hardware,
    and how much space is needed. Sketching a block diagram about a robot you'd like
    to create is the first step toward making it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这张图中制定更详细的计划，包括电气连接、电源需求、硬件以及所需空间的大小。绘制一个关于您想要创建的机器人的方块图是将其制作出来的第一步。
- en: Important note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A block diagram is *not* a schematic, nor a scale drawing of a finished robot.
    It doesn't even try to show the actual electronic connections. The picture ignores
    small details, such as how to signal an ultrasonic distance sensor before it responds.
    The connection lines give a general idea of the data flow. A block diagram is
    the right place to show the type and number of motors and sensors, along with
    additional controllers they may need.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 方块图*不是*电路图，也不是完成机器人的比例图。它甚至不试图显示实际的电子连接。图片忽略了小细节，例如在超声波距离传感器响应之前如何发出信号。连接线给出了数据流的一般概念。方块图是显示电机和传感器的类型和数量的正确地方，以及它们可能需要的附加控制器。
- en: This was a very brief overview of robot components, seeing a robot similar to
    the one you will build, along with it disassembled into parts. We took a look
    at a simple robot block diagram and its intent. In the next section, we will take
    a closer look at each of the robot's components, starting with motors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对机器人组件的简要概述，我们看到一个与你将要构建的机器人相似的机器人，以及它被拆解成各个部分。我们查看了一个简单的机器人方块图及其意图。在下一节中，我们将更详细地查看机器人的每个组件，从电机开始。
- en: Exploring types of robot components
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索机器人组件类型
- en: Before we look at the types of motors and sensors, let's get a brief understanding
    of what each of them is.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看电机和传感器的类型之前，让我们简要了解它们各自是什么。
- en: A *motor* is an output device that rotates when power is applied. Motors are
    a subset of a type of machinery called an *actuator*. It is an output device that
    creates motion from electrical power. This power can be modulated with signals
    to control movement. Examples of actuators are solenoids, valves, and pneumatic
    rams.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*电机*是一种在施加电力时旋转的输出设备。电机是称为*执行器*的一种机械的子集。它是一种从电能产生运动的输出设备。这种功率可以通过信号调节来控制运动。执行器的例子包括电磁阀、阀门和气缸。'
- en: A *sensor* is a device that provides input to a robot, allowing it to sense
    its environment. There are more sensor types than a single book can list, so we'll
    keep to the commonly available and fun-to-use ones. Displays and indicators are
    debug output devices, for giving feedback on the robot's operation to a human
    user/programmer. A few of these will be covered in this section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*传感器*是一种向机器人提供输入的设备，使其能够感知其环境。传感器的类型比一本书能列出的要多，所以我们只关注常见且易于使用的那些。显示屏和指示器是调试输出设备，用于向人类用户/程序员提供有关机器人操作的反馈。本节将介绍其中的一些。'
- en: Now, let's look at them in detail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地看看它们。
- en: Types of motors
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电机类型
- en: 'There are a number of different kinds of motors that robots commonly use. Let''s
    take a look at what each one does and how we might use them for different types
    of motion:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人常用到的电机种类繁多。让我们看看每种电机的作用以及我们如何可能用于不同类型的运动：
- en: Important note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Torque is a rotating/twisting force, for example, the force a motor will need
    in order to turn a wheel. If the torque increases, a motor will require more power
    (as current), and will slow down while trying to cope. A motor has a limit, the
    **stall torque**, at which point it will stop moving.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 扭矩是一种旋转/扭转力，例如，电机为了转动轮子所需的力。如果扭矩增加，电机将需要更多的功率（即电流），在试图应对时会减慢速度。电机有一个极限，即**堵转扭矩**，此时它将停止移动。
- en: '![](img/B15660_02_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_04.jpg)'
- en: Figure 2.4 – Different motor types – a DC motor, DC gear motor, servo motor,
    and stepper motor
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 不同类型的电机 – 直流电机、直流齿轮电机、伺服电机和步进电机
- en: 'To identify what each of these motors do, let''s look at them in detail:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定每种电机的作用，让我们详细地看看它们：
- en: '**DC motor**: This is the most simple type of motor in robotics and forms the
    basis of gear motors. It uses **Direct Current** (**DC**) voltage, which means
    it can be driven simply by voltage running one way through it. The motor speed
    is in proportion to the voltage running through it versus the torque required
    to move. A bare DC motor like the one in *Figure 2.4* can spin too fast to be
    useful. It will not have much torque and stall easily.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**直流电机**：这是机器人中最简单的电机类型，是齿轮电机的基础。它使用**直流**电压，这意味着可以通过通过它的电压方向来简单地驱动它。电机的速度与通过它的电压成正比，与所需的扭矩成反比。像*图2.4*中的裸直流电机可能会转得太快而无法使用。它将没有多少扭矩，并且容易卡住。'
- en: '**DC gear motor**: This is a DC motor fitted with a gearbox. This gearbox provides
    a reduction in speed and increases the torque it can handle. This mechanical advantage
    increases the motor''s ability to move a load. Note that this gear motor is missing
    soldered leads! I recommend these motor types for robot wheels. We will use gear
    motors such as this on our robot in [*Chapter 6*](B15660_06_Final_ASB_ePub.xhtml#_idTextAnchor096),
    *Building Robot Basics – Wheels, Power, and Wiring*, and [*Chapter 7*](B15660_07_Final_ASB_ePub.xhtml#_idTextAnchor131),
    *Drive and Turn – Moving Motors with Python*.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**直流齿轮电机**：这是一种配备变速箱的直流电机。这个变速箱降低了速度并增加了它可以处理的扭矩。这种机械优势增加了电机移动负载的能力。请注意，这种齿轮电机缺少焊接的引线！我推荐这些电机类型用于机器人轮子。我们将在[*第6章*](B15660_06_Final_ASB_ePub.xhtml#_idTextAnchor096)和[*第7章*](B15660_07_Final_ASB_ePub.xhtml#_idTextAnchor131)中使用这种类型的齿轮电机，*构建机器人基础
    – 轮子、电源和布线*，以及*驱动和转向 – 使用Python移动电机*。'
- en: '**Servo motor** (or **servomechanism**): This type of motor combines a gear
    motor with a sensor and a built-in controller as shown in *Figure 2.5*. A signal
    to a controller states a motor position, and the controller uses feedback from
    the sensor to try to reach this position. Servo motors are used in pan and tilt
    mechanisms, along with robot arms and limbs. We will look more closely at, and
    program, servo motors in [*Chapter 10*](B15660_10_Final_ASB_ePub.xhtml#_idTextAnchor192),
    *Using Python to Control Servo Motors*:![](img/B15660_02_05_NEW.jpg)'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**伺服电机**（或**伺服机构**）：这种电机将齿轮电机、传感器和内置控制器结合在一起，如*图2.5*所示。控制器接收到的信号表示电机位置，控制器使用传感器的反馈来尝试达到这个位置。伺服电机用于云台机构、机械臂和肢体。我们将在[*第10章*](B15660_10_Final_ASB_ePub.xhtml#_idTextAnchor192)中更详细地研究并编程伺服电机，*使用Python控制伺服电机*：![](img/B15660_02_05_NEW.jpg)'
- en: Figure 2.5 – Pictorial diagram of a servo motor mechanism
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.5 – 伺服电机机构的示意图
- en: '**Stepper motor**: These have coils powered in a sequence to let the motor
    step a certain number of degrees. Where exact motions are needed, engineers use
    steppers. Stepper motors tend to be slower and generate a lot of heat compared
    with DC motors or servo motors. You will find these in fine-control applications,
    such as 3D printers and high-end robot arms. They are heavier and more expensive
    than other motors.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**步进电机**：这些电机通过按顺序给线圈供电，使电机以一定数量的度数步进。当需要精确运动时，工程师会使用步进电机。与直流电机或伺服电机相比，步进电机通常速度较慢，产生的热量较多。你会在精密控制应用中找到这些电机，例如3D打印机和高端机械臂。它们比其他电机更重、更贵。'
- en: '**Brushless motor**: These are not shown in the diagram. They are driven with
    specialized controllers, and can be capable of high speed and torque. They run
    quieter and are popular in drones. There are no gear motor equivalents, so creation
    of a gearbox may be necessary.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无刷电机**：这些在图中没有显示。它们由专用控制器驱动，可以达到高速和高扭矩。它们运行时更安静，在无人机中很受欢迎。没有齿轮电机等效物，因此可能需要创建变速箱。'
- en: Important note
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: All but servo motors require hardware for a controller such as the Raspberry
    Pi to drive them. This hardware allows the Pi to control power-hungry devices
    without destroying them. Never connect DC motors, stepper motors, or solenoids
    directly to a Raspberry Pi!
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了伺服电机外，所有电机都需要硬件来驱动，例如Raspberry Pi。这种硬件允许Pi在不破坏它们的情况下控制耗电设备。永远不要将直流电机、步进电机或电磁铁直接连接到Raspberry
    Pi！
- en: Let's look at some other types of actuators next.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看其他类型的执行器。
- en: Other types of actuators
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他类型的执行器
- en: 'Linear actuators, like those shown in *Figure 2.6*, are devices that convert
    electrical signals into motion along a single axis. These can be a stepper motor
    driving a screw in a fixed enclosure, or use arrays of coils and magnets:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 线性执行器，如*图2.6*中所示，是将电信号转换为沿单轴运动的设备。这些可以是步进电机驱动固定封装中的螺钉，或者使用线圈和磁铁阵列：
- en: '![](img/B15660_02_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_06.jpg)'
- en: 'Figure 2.6 – Linear actuators: By Rollon91, [Image credit: https://commons.wikimedia.org/wiki/File:Uniline.jpg?uselang=fr
    [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)]'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 线性执行器：由Rollon91提供，[图片来源：https://commons.wikimedia.org/wiki/File:Uniline.jpg?uselang=fr
    [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)]]
- en: A **solenoid** is a simple linear actuator using an electromagnetic coil with
    a metal core that is pulled or pushed away when powered. A common use of this
    type is in hydraulic or pneumatic valves. Hydraulic and pneumatic systems generate
    powerful motions like those seen in excavators.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**电磁阀**是一种简单的线性执行器，使用带金属芯的电磁线圈，当通电时会被拉或推。这种类型的常见用途在液压或气动阀门中。液压和气动系统产生像挖掘机中看到的那种强大的运动。'
- en: Status indicators – displays, lights, and sounds
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态指示器 – 显示屏、灯光和声音
- en: Another helpful output device is a display. A single LED (a small electronic
    light) can indicate the status of some part of the robot. An array of LEDs could
    show more information and add color. A graphical display can show some text or
    pictures, like those found on a mobile phone. We will be connecting a multicolor
    LED strip to the robot as a display in [*Chapter 9*](B15660_09_Final_ASB_ePub.xhtml#_idTextAnchor171),
    *Programming RGB Strips in Python*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的输出设备是显示屏。单个LED（一个小型电子灯）可以指示机器人某些部分的状态。LED阵列可以显示更多信息并增加颜色。图形显示屏可以显示一些文本或图片，就像在手机上看到的那样。我们将在[*第9章*](B15660_09_Final_ASB_ePub.xhtml#_idTextAnchor171)，*Python中的RGB条带编程*中，将多彩LED条带连接到机器人作为显示屏。
- en: Speakers and beepers can be used for a robot to communicate with humans by making
    sounds. The sound output from these can range from simple noises through to speech
    or playing music.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 扬声器和蜂鸣器可以通过发出声音使机器人与人类进行交流。这些设备的声音输出可以从简单的噪音到语音或播放音乐。
- en: Many robots don't have any displays and rely on a connected phone or laptop
    to display their status for them. We will use a phone to control and see the status
    of our robot in [*Chapter 17*](B15660_17_Final_ASB_ePub.xhtml#_idTextAnchor396),
    *Controlling the Robot with a Phone and Python*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 许多机器人没有显示屏，依赖于连接的手机或笔记本电脑来显示它们的状态。我们将在[*第17章*](B15660_17_Final_ASB_ePub.xhtml#_idTextAnchor396)，*使用手机和Python控制机器人*中，使用手机来控制和查看我们机器人的状态。
- en: Types of sensors
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传感器类型
- en: '*Figure 2.7* shows a collection of sensor types used in robotics. They are
    similar to those that we will explore and use in this book. Let''s examine some
    of them and their uses. Note that these may look different from the same sensor
    types seen previously – there is a wide variation in sensors that do the same
    job. When we add them to the robot, we will cover their variants in more detail:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.7*展示了在机器人中使用的传感器类型集合。它们与我们将在本书中探索和使用的传感器类似。让我们检查一些它们的用途。请注意，这些可能看起来与之前看到的相同类型的传感器不同
    – 做同样工作的传感器有很大的差异。当我们把它们添加到机器人中时，我们将更详细地介绍它们的变体：'
- en: '![](img/B15660_02_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_07.jpg)'
- en: 'Figure 2.7 – A selection of sensors from my robots: 1 - A Raspberry Pi camera,
    2 - an optical distance sensor, 3 - an ultrasonic distance sensor, 4 - line sensors,
    5 - microphones, and 6 - an optical interrupt sensor'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 我机器人中的传感器选择：1 - 一款树莓派摄像头，2 - 一款光学距离传感器，3 - 一款超声波距离传感器，4 - 线性传感器，5 - 麦克风，6
    - 一款光学中断传感器
- en: 'Let''s understand each sensor from *Figure 2.7* in detail:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解一下图2.7中的每个传感器：
- en: '**Raspberry Pi camera module**: This module connects to a Raspberry Pi to provide
    it with imaging capabilities. We''ll use it for visual processing programming
    in [*Chapter 13*](B15660_13_Final_ASB_ePub.xhtml#_idTextAnchor283), *Robot Vision
    – Using a Pi Camera and OpenCV*. This module captures images or video sequences.
    It can generate a lot of data quickly, which is one of the problems associated
    with robot vision. It is sensitive to lighting conditions.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**树莓派摄像头模块**：此模块连接到树莓派，为其提供成像能力。我们将在[*第13章*](B15660_13_Final_ASB_ePub.xhtml#_idTextAnchor283)，*机器人视觉
    – 使用Pi摄像头和OpenCV*中进行视觉处理编程。此模块可以捕获图像或视频序列。它可以快速生成大量数据，这是与机器人视觉相关的问题之一。它对光照条件敏感。'
- en: '**Optical distance sensor**: The VL53L0X Time of Flight laser ranging sensor
    in *Figure 2.7* is a distance sensor. It uses an infrared laser to bounce off
    objects and detect how far away they are. It can be affected by lighting conditions.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**光学距离传感器**：图2.7中的VL53L0X飞行时间激光测距传感器是一个距离传感器。它使用红外激光反射物体并检测它们有多远。它可能会受到光照条件的影响。'
- en: The VL53L0X sensors use I2C to send a detected range to the Raspberry Pi and
    can share their two communication pins with many other devices. I2C is useful
    when you have many sensors and outputs and are starting to run out of places to
    connect things. I2C sensors can be a more expensive option.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: VL53L0X 传感器使用 I2C 将检测到的距离发送到 Raspberry Pi，并且可以与许多其他设备共享它们的两个通信引脚。当您有许多传感器和输出，并且开始用完连接东西的地方时，I2C
    非常有用。I2C 传感器可能是一个更昂贵的选项。
- en: '**Ultrasonic distance sensor**: The HC-SR04 is another distance/ranging sensor
    that bounces sound pulses off objects to detect distance. It is affected by the
    types of material an object is made from and will fail to detect certain surfaces,
    but is impervious to lighting conditions. Some surfaces, for example, fabrics,
    absorb the sound too much and never send it back, while other surfaces, such as
    grids or meshes, do not interact much with sound waves and will be transparent
    to the sensor.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**超声波距离传感器**: HC-SR04 是另一种距离/测距传感器，它通过从物体上反弹声脉冲来检测距离。它受物体材质类型的影响，可能无法检测某些表面，但对光照条件不敏感。例如，一些表面，如织物，吸收声音过多，永远不会将其反射回来，而其他表面，如网格或网状物，与声波相互作用不多，对传感器来说是透明的。'
- en: The HC-SR04 requires precise timing in the controller to time the echo, which
    we will have to manage in code. It has a longer range than the VL53L0X laser sensor,
    and is cheaper, but is also less sensitive at close distances. We will be programming
    sound-based range sensors in [*Chapter 8*](B15660_08_Final_ASB_ePub.xhtml#_idTextAnchor150),
    *Programming Distance Sensors with Python*.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HC-SR04 需要在控制器中精确计时以计时回声，这我们需要在代码中管理。它的测距范围比 VL53L0X 激光传感器长，且价格更低，但在近距离时灵敏度较低。我们将在[*第
    8 章*](B15660_08_Final_ASB_ePub.xhtml#_idTextAnchor150)，“使用 Python 编程距离传感器”中编程基于声音的测距传感器。
- en: '**Line sensors**: These are a set of three line-sensors that use light to detect
    transitions from light to dark. They can be adjusted to sense in different conditions.
    There are a few variations of these modules. These provide an on or off signal,
    depending on light or dark areas beneath it. They are the simplest of the sensors.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**线传感器**: 这些是一套三个线传感器，使用光来检测从光到暗的转变。它们可以调整以在不同的条件下感应。这些模块有几种变体。这些提供开或关的信号，取决于其下是光亮还是黑暗区域。它们是传感器中最简单的。'
- en: '**Microphone**: The fifth sensor is a pair of microphones. These can connect
    directly to the PCM pins on a Pi. Some other microphones need to be connected
    to electronics to process their signal into something the Raspberry Pi uses. We
    will use microphones for voice processing in [*Chapter 15*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344),
    *Voice Communication with a Robot Using Mycroft*.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**麦克风**: 第五个传感器是一对麦克风。这些可以直接连接到 Pi 的 PCM 引脚上。有些其他麦克风需要连接到电子设备上，以将它们的信号处理成 Raspberry
    Pi 可以使用的格式。我们将在[*第 15 章*](B15660_15_Final_ASB_ePub.xhtml#_idTextAnchor344)，“使用
    Mycroft 与机器人进行语音通信”中使用麦克风进行语音处理。'
- en: '**Optical interrupt sensor**: This detects infrared light passing through a
    gap between two posts, sensing whether something between the posts is interrupting
    the beam. These are used with notched wheels to detect rotation and speed by counting
    notches. When used with wheels, they are also known as encoders. We use encoders
    in [*Chapter 11*](B15660_11_Final_ASB_ePub.xhtml#_idTextAnchor219), *Programming
    Encoders with Python*.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**光断路传感器**: 这检测通过两个柱子之间缝隙的红外光，感知柱子之间是否有物体中断了光束。这些与带凹槽的轮子一起使用，通过计数凹槽来检测旋转和速度。当与轮子一起使用时，它们也被称为编码器。我们在[*第
    11 章*](B15660_11_Final_ASB_ePub.xhtml#_idTextAnchor219)，“使用 Python 编程编码器”中使用编码器。'
- en: There are many more sensors, including ones to detect positions of limbs, light,
    smoke, heat sources, and magnetic fields. These can be used to make more advanced
    robots and add more exciting behavior.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多传感器，包括检测肢体位置、光线、烟雾、热源和磁场的传感器。这些可以用来制造更先进的机器人，并添加更多令人兴奋的行为。
- en: We have covered motors, displays, indicators, and sensors, together with examples
    and some details regarding their types. These are the parts that allow our robot
    to interact with the world. Now we will move on to the controllers, the parts
    of a robot that run code and connect sensors and motors together.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了电机、显示屏、指示器和传感器，包括一些关于它们类型的示例和一些细节。这些是允许我们的机器人与世界交互的部件。现在我们将继续到控制器，这是机器人中运行代码并将传感器和电机连接在一起的部件。
- en: Exploring controllers and I/O
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索控制器和 I/O
- en: At the center of the robot block diagram, as in *Figure 2.3*, are controllers.
    Robots usually have a primary controller, a computer of some kind. They may also
    have some secondary controllers, and some more unusual robots have many controllers.
    This book keeps things simple, with your code running on a conventional central
    controller. The controller connects all the other parts together and forms the
    basis of their interactions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器人框图中心，如图*图2.3*所示，是控制器。机器人通常有一个主要控制器，某种类型的计算机。它们也可能有一些辅助控制器，而一些更不寻常的机器人有多个控制器。本书使事情保持简单，您的代码在传统的中央控制器上运行。控制器将所有其他部分连接在一起，并形成它们交互的基础。
- en: Before we look at controllers, we need to get a better understanding of an important
    component that connects controllers to other components, I/O pins.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看控制器之前，我们需要更好地理解一个重要的组件，它将控制器连接到其他组件，即I/O引脚。
- en: I/O pins
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I/O引脚
- en: I/O pins are used for input and output from the controller. They give the controller
    its ability to connect to real-world sensors and motors.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: I/O引脚用于控制器输入和输出。它们赋予控制器连接到现实世界传感器和电机的功能。
- en: The number of I/O pins on the controller is a limiting factor in what you can
    connect to a robot without using secondary controllers. You may also see the term
    **General Purpose Input Output** (**GPIO**). Controller I/O pins have different
    capabilities.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器上的I/O引脚数量是限制您在不使用辅助控制器的情况下连接到机器人的因素之一。您也可能看到术语**通用输入输出**（**GPIO**）。控制器I/O引脚具有不同的功能。
- en: 'The simplest I/O pins are only able to output or read an on/off signal, as
    shown in *Figure 2.8*. These are known as digital I/O pins. They can be programmed
    to perform complicated tasks through signal timing. This is the principle used
    in the HC-SR04 distance sensor. In *Figure 2.8*, this graph represents a voltage
    level over time. So, as we move along the *x* axis, the voltage is on the *y*
    axis. The upper level represents a digital logic high (`1`, `True`, `On`). The
    lower level represents a digital logic low (`0`, `False`, `Off`). The controller
    will attempt to interpret any value as high or low:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的I/O引脚只能输出或读取开/关信号，如图*图2.8*所示。这些被称为数字I/O引脚。它们可以通过信号定时编程执行复杂任务。这是HC-SR04距离传感器所使用的原理。在*图2.8*中，此图表示电压随时间的变化。因此，当我们沿着*x*轴移动时，电压在*y*轴上。较高的水平代表数字逻辑高（`1`，`True`，`On`）。较低的水平代表数字逻辑低（`0`，`False`，`Off`）。控制器将尝试将任何值解释为高或低：
- en: '![](img/B15660_02_08.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_08.jpg)'
- en: Figure 2.8 – A digital signal
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – 一个数字信号
- en: 'Analog input pins can read varying levels, like the signal in *Figure 2.9*,
    which is another voltage-over-time graph. If a sensor produces a changing resistance
    or continuous scale of values, then an analog pin is suitable. There is a resolution
    limit to this, for example, an 8 bit analog input will read 256 possible values:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟输入引脚可以读取不同的级别，如*图2.9*中的信号，这是一个电压随时间变化的图表。如果一个传感器产生变化的电阻或连续的值范围，那么模拟引脚就适用。这种情况下有一个分辨率限制，例如，8位模拟输入将读取256个可能值：
- en: '![](img/B15660_02_09.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_09.jpg)'
- en: Figure 2.9 – An analog signal
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 一个模拟信号
- en: '**Pulse Width Modulation** (**PWM**) pins output a cycling digital waveform
    shown in *Figure 2.10*. This diagram also shows voltage over time, although the
    timing of the pulses represents a continuous level, so the dashed line shows the
    continuous level produced by the timing. PWM outputs allow the code to select
    the frequency and how much time they are on for. The length of on-time versus
    off-time in a cycle changes to vary an output signal. This is often used to control
    the speed of motors:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**脉冲宽度调制**（**PWM**）引脚输出一个循环的数字波形，如图*图2.10*所示。此图还显示了电压随时间的变化，尽管脉冲的定时代表了一个连续的水平，因此虚线显示了由定时产生的连续水平。PWM输出允许代码选择频率以及它们开启的时间。在一个周期中开启时间与关闭时间的长度变化以改变输出信号。这通常用于控制电机的速度：'
- en: '![](img/B15660_02_10.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_10.jpg)'
- en: Figure 2.10 – A PWM signal in blue, with the dashed line showing its approximate
    value
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – 蓝色表示的PWM信号，虚线显示其近似值
- en: We will spend more time on PWM pins in [*Chapter 6*](B15660_06_Final_ASB_ePub.xhtml#_idTextAnchor096),
    *Building Robot Basics – Wheels, Power, and Wiring*, and [*Chapter 7*](B15660_07_Final_ASB_ePub.xhtml#_idTextAnchor131),
    *Drive and Turn – Moving Motors with Python*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第6章*](B15660_06_Final_ASB_ePub.xhtml#_idTextAnchor096)“构建机器人基础 – 轮子、电源和布线”和[*第7章*](B15660_07_Final_ASB_ePub.xhtml#_idTextAnchor131)“驱动和转向
    – 使用Python移动电机”中花费更多时间讨论PWM引脚。
- en: Some I/O pins can be used to form data transmission lines, such as serial, I2S,
    I2C, and SPI buses. They are known as data buses. Data buses are used to send
    data to or from other controllers and intelligent sensors. We'll use an SPI data
    bus for the RGB LEDs in [*Chapter 9*](B15660_09_Final_ASB_ePub.xhtml#_idTextAnchor171),
    *Programming RGB Strips in Python*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一些I/O引脚可以用来形成数据传输线，例如串行、I2S、I2C和SPI总线。它们被称为数据总线。数据总线用于向其他控制器和智能传感器发送或接收数据。我们将在[*第9章*](B15660_09_Final_ASB_ePub.xhtml#_idTextAnchor171)，“使用Python编程RGB条带”中使用SPI数据总线。
- en: Microcontroller pins can be used for digital or analog input and output, or
    part of a data bus. Many controllers allow the usage mode of pins to be configured
    in the software you run on them, but some capabilities are restricted to specific
    pins.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 微控制器引脚可用于数字或模拟输入和输出，或数据总线的一部分。许多控制器允许在运行的软件中配置引脚的使用模式，但某些功能仅限于特定引脚。
- en: Controllers
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'Although it''s possible to use bare microcontroller chips with the right skills
    to create surrounding electronics and your own PCBs, we''ll keep things simple
    in this book by using controller modules. These tend to come in packaged and easy-to-use
    systems:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用适当的技能和裸微控制器芯片创建周围电子设备和自己的PCB板是可能的，但为了简化本书的内容，我们将使用控制器模块。这些通常以包装和易于使用的系统形式出现：
- en: '![](img/B15660_02_11.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_11.jpg)'
- en: 'Figure 2.11 – A selection of controller modules: a Raspberry Pi, NodeMCU, Arduino,
    and micro:bit'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 – 控制器模块的选择：树莓派、NodeMCU、Arduino和micro:bit
- en: '*Figure 2.11* shows some of my favorite controllers. They can all be powered
    via a USB connection. All but the Raspberry Pi can also be programmed over a USB.
    They all have connectors for easy access to their I/O pins. For each of the controllers,
    let''s see what they are, along with their pros and cons:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.11*展示了我的几个最喜欢的控制器。它们都可以通过USB连接供电。除了树莓派，其他所有设备都可以通过USB编程。它们都有连接器，便于访问它们的I/O引脚。对于每个控制器，让我们看看它们是什么，以及它们的优缺点：'
- en: '**Raspberry Pi**: This is powerful enough for visual processing. It tends to
    consume a little more power and is more expensive, but is similar to a mobile
    phone in capability. It has the most flexible environment for programming. There
    are several models to consider. They have many I/O pins, but none are analog input
    pins.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**树莓派**：它足够强大，可以进行视觉处理。它消耗的电量略多，价格也更高，但功能上类似于移动电话。它拥有最灵活的编程环境。有几种型号可供选择。它们有许多I/O引脚，但没有模拟输入引脚。'
- en: '**NodeMCU**: This is based on the ESP8266 controller. This controller has built-in
    Wi-Fi and can be programmed with Arduino C++, MicroPython, or Lua. It has plenty
    of I/O pins, but only one can read analog signals. It supports many data bus types.
    It is somewhat faster and can hold larger programs than the Arduino. It is the
    cheapest controller in this lineup.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**NodeMCU**：这是基于ESP8266控制器。这个控制器内置Wi-Fi，可以用Arduino C++、MicroPython或Lua编程。它有大量的I/O引脚，但只有一个可以读取模拟信号。它支持多种数据总线类型。它比Arduino快一些，可以存储更大的程序。它是这一系列中最便宜的控制器。'
- en: '**Arduino Leonardo**: This is based on the Atmega 328 chip. Arduino controller
    modules formed the basis of most of my robots around 2010-2012\. The Arduino was
    important for the ease with which it could be connected to a PC via a USB and
    programmed to immediately interact with devices attached to its I/O pins.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Arduino Leonardo**：这是基于Atmega 328芯片的。Arduino控制器模块构成了我2010-2012年左右大多数机器人的基础。Arduino因其能够通过USB轻松连接到PC并立即与连接到其I/O引脚的设备交互而变得非常重要。'
- en: The Arduino is mostly programmed in the C++ language. It has the most flexible
    built-in I/O pins – seven analog pins, many digital pins, PWM output pins, and
    can be set up to handle most data buses. The Arduino's processor is very simple;
    it is not capable of visual or speech processing tasks. The Arduino has the lowest
    power consumption of all the options shown here.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Arduino主要使用C++语言编程。它具有最灵活的内置I/O引脚——七个模拟引脚、许多数字引脚、PWM输出引脚，并且可以配置以处理大多数数据总线。Arduino的处理器非常简单；它无法执行视觉或语音处理任务。Arduino是这里展示的所有选项中功耗最低的。
- en: '**micro:bit**: This was released in 2015 for use in education, and is ideal
    for children. Its use in robotics requires an additional adapter if you need more
    than the 3 I/O pins that it ships with, but it is still a pretty capable robot
    controller and comes with a handy built-in LED matrix. This can be programmed
    in MicroPython, C, JavaScript, and several other languages.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**micro:bit**：这款产品于 2015 年发布，用于教育目的，非常适合儿童。如果你需要比它随附的 3 个 I/O 引脚更多的引脚，那么在机器人中使用它需要额外的适配器，但仍然是一个相当强大的机器人控制器，并带有方便的内置
    LED 矩阵。它可以使用 MicroPython、C、JavaScript 以及其他几种语言进行编程。'
- en: An honorable mention should go to the PIC microcontroller, not pictured here.
    These were used for hobby robotics long before any of the others, and have a thriving
    community.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 应该特别提一下未在此图中展示的 PIC 微控制器。这些在其他人之前很久就被用于业余机器人，并且有一个繁荣的社区。
- en: 'Here is a comparison of controllers based on the pros and cons:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是基于优缺点比较的控制器：
- en: '![](img/B15660_02_Table_2.1.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_Table_2.1.jpg)'
- en: Where the other controllers may run a simple interpreter or compiled code, the
    Raspberry Pi runs a complete operating system. Current models have Wi-Fi and Bluetooth
    capabilities, which we will use to make a robot headless and connect with game
    controllers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 其他控制器可能运行简单的解释器或编译代码，而 Raspberry Pi 运行的是一个完整的操作系统。当前型号具有 Wi-Fi 和蓝牙功能，我们将使用这些功能使机器人无头并连接游戏控制器。
- en: Choosing a Raspberry Pi
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择 Raspberry Pi
- en: '*Figure 2.12* shows a few current Raspberry Pi models. As new Raspberry Pis
    are released, a robot builder may have to adapt this to the latest version. All
    these models have Wi-Fi and Bluetooth capabilities. The Raspberry Pi I/O pins
    support many of the data bus types and digital I/O. External controllers are needed
    for analog reading and some other I/O functions:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.12* 展示了一些当前的 Raspberry Pi 型号。随着新 Raspberry Pi 的发布，机器人制造商可能需要将其适应到最新版本。所有这些型号都具有
    Wi-Fi 和蓝牙功能。Raspberry Pi 的 I/O 引脚支持许多数据总线类型和数字 I/O。对于模拟读取和一些其他 I/O 功能，需要外部控制器：'
- en: '![](img/B15660_02_12.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_12.jpg)'
- en: Figure 2.12 – Raspberry Pi models – 4B, 3A+, and Zero W
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – Raspberry Pi 型号 – 4B、3A+ 和 Zero W
- en: 'Let''s look at each of these models in a little detail:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一详细看看这些型号：
- en: '**Raspberry Pi 4B**: This is the latest in the Raspberry Pi line at the time
    of writing. As the latest model, it is the fastest and most potent in the lineup.
    It takes up more space, is the most expensive in this group, and uses the most
    power.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi 4B**：这是在撰写本文时 Raspberry Pi 系列中的最新型号。作为最新型号，它是系列中最快、最强大的。它占用的空间更大，在这个群体中价格最高，并且消耗的功率最大。'
- en: '**Raspberry Pi 3A+**: This is the controller we will use for our robot. It
    provides an excellent compromise on size and power. It is fully capable of visual
    processing through a camera. It''s not quite as fast as the 4B+, but definitely
    quick enough for our purposes.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi 3A+**：这是我们为我们的机器人使用的控制器。它在尺寸和功率方面提供了极佳的折中方案。它能够通过摄像头进行视觉处理。它并不像
    4B+ 那么快，但绝对足够我们使用。'
- en: '**Raspberry Pi Zero W**: This is an inexpensive, lighter alternative to the
    other Raspberry Pi models. Cameras and speakers are still supported. The Zero
    WH model includes headers for I/O too. It performs speech and visual recognition
    slower than on a Raspberry Pi 3 and 4\. Their small size makes them an interesting
    option for a remote-control pad too.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi Zero W**：这是其他 Raspberry Pi 型号的一个经济、轻便的替代品。摄像头和扬声器仍然得到支持。Zero
    WH 型号还包括 I/O 引脚。它的语音和视觉识别性能比 Raspberry Pi 3 和 4 慢。它们的小巧尺寸使它们也成为遥控板的有趣选择。'
- en: 'Now that we know each of the models, let''s compare their pros and cons:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了每个型号，让我们比较一下它们的优缺点：
- en: '![](img/B15660_02_Table_2.2.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15660_02_Table_2.2.jpg)'
- en: The Raspberry Pi 4B may be the most powerful, but the 3A+ is powerful enough
    to be responsive to all the activities here.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 4B 可能是最强大的，但 3A+ 的性能足够强大，可以响应这里所有的活动。
- en: Planning components and code structure
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划组件和代码结构
- en: You've now briefly seen some components you might use in a robot, and you've
    encountered a block diagram to put them together. This is where you may start
    taking the next step and thinking further about how to connect things, and how
    the code you write for them will be structured.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经简要地看到了一些你可能用于机器人的组件，并且你已经遇到了一个将这些组件组合起来的框图。这就是你开始采取下一步并进一步思考如何连接这些组件，以及你为它们编写的代码将如何结构化的地方。
- en: Code is easier to reason about when taken as logical blocks instead of one large
    lump. Arranging code in ways that are similar to a hardware functionality diagram
    will help navigate your way around as it becomes more complicated.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当将代码视为逻辑块而不是一个大块时，推理起来更容易。以类似于硬件功能图的方式安排代码将有助于你在代码变得复杂时找到自己的路径。
- en: So, let's return to the robot block diagram in *Figure 2.3* to think about what
    we'll need to handle in our code for it. That diagram has three sensors and two
    outputs. Each component (sensor, output, and controller board) may need some code
    to deal with it, and then you need some code for the behavior of combined modules.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们回到*图2.3*中的机器人框图，来思考我们需要在代码中处理什么。该图有三个传感器和两个输出。每个组件（传感器、输出和控制板）可能需要一些代码来处理它，然后你需要一些代码来处理组合模块的行为。
- en: Motor controllers come in many flavors. They have different ways to output to
    motors, and they may have monitoring for battery levels. Some smart motor controllers
    interface with wheel encoders directly to ensure the wheels have traveled a specified
    amount. When we write behavior for a robot, we may not want to rewrite it if we
    change the motor controller. Mixing the direct motor controller code with the
    behavior code also makes it harder to reason about. For this, I recommend creating
    an interface layer, an *abstraction* between the real motor controller code and
    a standard interface, which will make swapping components possible. We will see
    this in practice in [*Chapter 7*](B15660_07_Final_ASB_ePub.xhtml#_idTextAnchor131),
    *Drive and Turn – Moving Motors with Python*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 电机控制器有多种类型。它们有不同的方式输出到电机，并且可能具有对电池电量的监控。一些智能电机控制器可以直接与轮编码器接口，以确保车轮已行驶了指定的距离。当我们为机器人编写行为时，如果我们更改电机控制器，可能不想重新编写它。将直接电机控制器代码与行为代码混合也会使推理变得更加困难。为此，我建议创建一个接口层，一个在真实电机控制器代码和标准接口之间的*抽象层*，这将使组件交换成为可能。我们将在[*第7章*](B15660_07_Final_ASB_ePub.xhtml#_idTextAnchor131)中看到这一点，*使用Python驱动和转向
    – 移动电机*。
- en: 'This is similar for each sensor. They will have some code to manage how they
    get signals and turn them into usable data. All these devices may have setup and
    teardown code that needs to run when starting or stopping behavior that connects
    to them. The camera is a sophisticated example of this, requiring processing to
    get the data values we can use to perform a task:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这对每个传感器都类似。它们将有一些代码来管理如何获取信号并将它们转换为可用的数据。所有这些设备都可能有一些设置和拆卸代码，需要在启动或停止连接到它们的操作时运行。相机是这种需求的复杂示例，需要处理以获取我们可以用来执行任务的数据值：
- en: '![](img/B15660_02_13.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B15660_02_13.jpg)'
- en: Figure 2.13 – A quick software block diagram, in pen on an envelope, and the
    same diagram using a computer
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – 一张快速的手绘软件框图，用笔在信封上绘制的，以及使用计算机绘制的相同图
- en: Just like the hardware, a simple diagram can represent the software. This can
    be made in a drawing program or sketched on any paper you have to hand. In *Figure
    2.13*, I've deliberately chosen a hand-drawn one so you don't feel that you need
    a drawing tool to do this. This won't be tidy, but it's quickly redrawn, and can
    even be done on the back of receipt paper if an idea comes to you while out dining.
    What is relevant here is the fact that if you use a pencil, go back over it in
    a pen or fine liner so that it doesn't fade. To make it clearer to the reader,
    I have made a computer drawing too, but don't feel you need to do this.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 就像硬件一样，一个简单的图可以表示软件。这可以在绘图程序中完成，或者在任何你手头的纸张上绘制。在*图2.13*中，我故意选择了一个手绘的版本，这样你就不会觉得你需要一个绘图工具来做这件事。这不会很整洁，但它可以快速重绘，甚至可以在外出就餐时在收据背面绘制。这里相关的事实是，如果你用铅笔，用钢笔或细线重新描一遍，这样它就不会褪色。为了使读者更容易理解，我还制作了一个计算机绘图，但你不必要这样做。
- en: Tip
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Scan your hand-drawn documents. If you have a scanner, or just a phone, I recommend
    scanning or getting a photo of your sketches, for later reference. Putting them
    into software such as Evernote or OneNote as images/PDFs with useful tags lets
    you look them up quickly later.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描你的手绘文档。如果你有扫描仪，或者只是一部手机，我建议扫描或拍照你的草图，以供以后参考。将它们作为图像/PDF文件放入Evernote或OneNote等软件中，并添加有用的标签，这样你就可以快速查找它们。
- en: After making a hand-drawn sketch, you can use a software tool. This will take
    longer than a hand-drawn version, and try not to be distracted by the quirks and
    styling of a tool.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制手绘草图后，你可以使用软件工具。这会比手绘版本花费更长的时间，并且尽量不要被工具的怪癖和风格所分心。
- en: In terms of the design itself, this is still a very simplistic view. The **Wheels**
    box will be a block of code, dealing with asking the wheel motor controller to
    do things. This may sit on top of code written by the motor controller company,
    or use I/O pins connected to the controller.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计本身方面，这仍然是一个非常简化的视角。**轮子**框将是一块代码，处理请求轮子电机控制器执行事情。这可能位于电机控制器公司编写的代码之上，或者使用连接到控制器的I/O引脚。
- en: '**Distance sensors** are blocks of code to read distances from the sensors,
    triggering them when necessary. We will look at two different kinds of sensors
    and compare them. By having a block of code like this, changing the sensors at
    this level means the other code won''t have to change.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**距离传感器**是代码块，用于从传感器读取距离，并在必要时触发它们。我们将查看两种不同的传感器并进行比较。通过在这个级别更改传感器，意味着其他代码不需要更改。'
- en: There is also a block of code for the **Camera**, doing fiddly stuff like setting
    it up, resolution, white balancing, and other parts that we will cover. On top
    of this is a layer that will use the camera images. That layer could get the position
    of a colored object, returning this position to the layer above.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个用于**摄像头**的代码块，执行诸如设置、分辨率、白平衡和其他我们将要讨论的部分。在这之上是一个将使用摄像头图像的层。该层可以获取彩色物体的位置，并将此位置返回到上层。
- en: Across the motors and distance sensors is a behavior layer that allows the robot
    to avoid collisions, perhaps when it is below a threshold on one side. This will
    override other behavior to turn away from that obstacle and drive off a bit.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在电机和距离传感器之间有一个行为层，允许机器人避免碰撞，例如当它在一边低于某个阈值时。这将覆盖其他行为，使机器人避开那个障碍物并稍微驶离。
- en: The top layer is another behavior that takes positional data from the **Get
    Object Position** code. Use this position to choose a direction, and then instruct
    the motors to drive to the object. If this behavior goes through the **Avoid Collisions**
    behavior, there could be a complicated interaction that leads the robot to seek
    the correct object, while avoiding obstacles and going around things. It will
    also not come close enough to the detected object to collide with it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最顶层是另一个行为，它从**获取对象位置**代码中获取位置数据。使用这个位置来选择一个方向，然后指示电机驱动到该对象。如果这个行为通过了**避免碰撞**行为，可能会出现复杂的交互，导致机器人寻找正确的对象，同时避开障碍物并绕过物体。它也不会靠近检测到的对象，以免与之相撞。
- en: Each module is relatively simple, perhaps with the lower layers that are closer
    to the hardware being more complex, especially in the case of the camera.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块相对简单，可能底层靠近硬件的部分更复杂，尤其是在摄像头的情况下。
- en: Breaking the code down into blocks like these means that you can approach a
    single block at a time, test, and tweak its behavior, and then focus on another
    one. When you have written blocks like this, you can reuse them. You will likely
    need the motor code multiple times and now will not need to write it multiple
    times.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码分解成这样的块意味着你可以一次处理一个块，测试和调整其行为，然后再专注于另一个。当你写出了这样的块时，你可以重用它们。你可能会需要多次使用电机代码，现在你不需要多次编写它。
- en: Using blocks to describe our software lets us implement the blocks and their
    interactions in different ways. We can consider whether we will use functions,
    classes, or services for these blocks. I will spend more time on this as we start
    writing the code for this and show the different approaches.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些块来描述我们的软件，让我们以不同的方式实现这些块及其交互。我们可以考虑是否将使用函数、类或服务来处理这些块。随着我们开始编写代码并展示不同的方法，我将花更多的时间在这上面。
- en: Planning the physical robot
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划物理机器人
- en: 'Let''s now put all of this to use and plan the layout of the physical parts
    of robot that we are making in this book. While we go through chapters, we will
    be adding new components each time, and keeping an overall map in our minds as
    we go helps us to see where we are. It is quite exciting to start to picture all
    the things a robot will do. Let''s start with a list of what our robot will do
    and be:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将所有这些应用到实际中，并规划我们在这本书中制作的机器人物理部件的布局。当我们翻阅章节时，我们每次都会添加新的组件，并且在我们前进的过程中保持一个整体地图在我们的脑海中，这有助于我们了解自己的位置。想象机器人将要执行的所有事情是非常令人兴奋的。让我们从列出我们的机器人将要做什么和成为什么开始：
- en: It will have wheels and be able to drive around the floor.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将配备轮子，能够在地面上行驶。
- en: It will have a Raspberry Pi 3A+ controller.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将配备一个Raspberry Pi 3A+控制器。
- en: It will have a motor controller for the wheels.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将有一个用于轮子的电机控制器。
- en: It will be able to indicate its status with a set of multicolored LEDs.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将能够通过一组多色LED指示其状态。
- en: The robot will use a pair of servo motors for a pan and tilt mechanism.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人将使用一对伺服电机来实现俯仰和倾斜机构。
- en: It will be able to avoid walls and navigate around obstacles with either ultrasonic
    or laser distance sensors.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将能够通过超声波或激光距离传感器避开墙壁并绕过障碍物。
- en: It will have an encoder per wheel to know how far it has moved.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将为每个轮子配备一个编码器，以了解它移动了多远。
- en: The robot will use a camera to sense colored objects or faces.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人将使用摄像头来感知彩色物体或人脸。
- en: It will be able to follow lines with the camera.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将能够通过摄像头跟随线条。
- en: The robot will have a microphone and speaker to work with voice commands.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人将配备麦克风和扬声器以处理语音命令。
- en: It will have a gamepad as a remote control.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将配备游戏手柄作为遥控器。
- en: It will need power for all of these things.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将需要为所有这些事物提供电力。
- en: 'Phew! That is a lot of functionality. Now, we need to draw the hardware blocks.
    *Figure 2.14* shows our block diagram. While done with Draw.io, a simple back-of-an-envelope
    sketch of a block diagram is an excellent start to robot planning. Most of my
    robots start off that way:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 呼吁！这有很多功能。现在，我们需要绘制硬件模块。*图2.14*显示了我们的模块图。虽然是用Draw.io完成的，但一个简单的模块图草图是机器人规划的一个很好的开始。我的大多数机器人都是从这种方式开始的：
- en: '![](img/B15660_02_14.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B15660_02_14.jpg)'
- en: Figure 2.14 – Block diagram of the robot we will build, created using the draw.io
    web app
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – 使用draw.io网络应用创建的我们将构建的机器人的模块图
- en: 'Although this looks like a daunting amount of robot, we will be focusing on
    an area of functionality in each chapter and building it before moving to other
    areas. The annotation here is not any formal notation, it is just a way of merely
    visualizing all the parts that will need to be connected. Along with this, I usually
    sketch roughly where I would physically place sensors and parts with one another:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来像是一大堆机器人，但我们将在每一章中关注一个功能区域，并在转移到其他区域之前构建它。这里的注释并不是任何正式的符号，它只是可视化所有需要连接的部件的一种方式。与此相关，我通常大致绘制出我将物理放置传感器和部件的位置：
- en: '![](img/B15660_02_15.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B15660_02_15.jpg)'
- en: Figure 2.15 – An overview of how the robot could be physically laid out, created
    with Draw.io
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 – 使用Draw.io创建的机器人可能物理布局概述
- en: 'The sketch in *Figure 2.15* is not exhaustive, accurate, or to scale, but just
    an idea of where I want the parts to end up. Note the following things in this
    diagram:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.15*中的草图并不详尽、准确或按比例，但它只是我想让部件最终到达位置的初步想法。注意以下图中的事项：'
- en: Sensors have a clear field of view, and the distance sensors are pointing out
    to the sides. I'll go into more detail in the relevant sensor chapters on why
    this is important.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器有一个清晰的视野，距离传感器指向两侧。我将在相关的传感器章节中详细介绍为什么这很重要。
- en: Encoders are placed over the wheels where they will be used.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码器被放置在轮子上，它们将在那里使用。
- en: Heavy items, specifically batteries, should be kept low (below the center of
    gravity) to avoid a robot tipping over.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重物，特别是电池，应保持低位（低于重心）以避免机器人翻倒。
- en: Batteries need to be changed, so think about access to them.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电池需要更换，因此要考虑它们的可访问性。
- en: Try to keep components that are directly connected quite close to one another.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量保持直接连接的组件相当接近。
- en: This is a rough plan. It need not be this detailed, and this is *not* the test
    fit. Real dimensions, design compromises, and hitches will mean that this will
    change. This is just a starting point.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个粗略的计划。它不需要这么详细，这也不是测试装配。实际尺寸、设计妥协和问题将意味着这会发生变化。这只是一个起点。
- en: As we work through the book, we will look at the details in these diagrams,
    and start to flesh out the real robot, making some of this less fuzzy. Any diagram
    like this, at the start of a project, should be taken as a bit rough. It is not
    to scale and should not be followed blindly. It is a guide, or a quick map from
    which to start working.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们通过本书，我们将查看这些图中的细节，并开始完善真正的机器人，使一些内容不那么模糊。任何这样的图，在项目开始时，都应该被视为相当粗糙的。它不是按比例的，不应该盲目跟随。它是一个指南，或是一个快速地图，从这里开始工作。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you've been able to see a number of the different component
    parts that go into a robot, and through a block diagram as a plan, start to visualize
    how you'd combine those blocks to make a whole robot. You've seen how you can
    quickly sketch your robot ideas on an envelope, and that drawing tools on a computer
    can be used for a neater version of the same diagram. You've had a quick tour
    of motors, sensors, and controllers, along with a few ways, including analog,
    digital, PWM, and data buses, for controllers to communicate with the other devices
    connected to them. Following on from this, you've seen a plan of the robot we
    will build in this book.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经能够看到组成机器人的多种不同组件，并通过一个作为计划的框图，开始可视化如何将这些模块组合成一个完整的机器人。你已经看到如何快速在信封上勾勒出你的机器人想法，以及电脑上的绘图工具可以用来制作更整洁的相同图示。你已经快速浏览了电机、传感器和控制器的相关知识，以及控制器与其他连接设备通信的几种方式，包括模拟、数字、PWM和数据总线。在此基础上，你已经看到了我们将在本书中构建的机器人的计划。
- en: In the next chapter, we will look at Raspbian, the operating system used on
    the Raspberry Pi in our robot, and start configuring it.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨我们机器人中使用的Raspbian操作系统，并开始对其进行配置。
- en: Exercise
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Try creating a block diagram for a different robot, thinking about inputs, outputs,
    and controllers.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试为不同的机器人创建一个框图，考虑输入、输出和控制器的因素。
- en: Are the Raspberry Pi 4B and 3A+ still the most recent versions? Would you use
    another model, and what would be the trade-offs?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Raspberry Pi 4B和3A+是否仍然是最新版本？你会使用其他型号吗？会有哪些权衡？
- en: What are the drawbacks of the laser ranging sensor versus the ultrasonic distance
    sensor?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激光测距传感器与超声波测距传感器相比有哪些缺点？
- en: Try drawing an approximate physical layout diagram for a different type of robot
    with a different controller.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试为不同类型的机器人绘制一个大致的物理布局图，并使用不同的控制器。
- en: Further reading
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Raspberry Pi Sensors*, *Rushi Gajjar*, *Packt Publishing*: Learn to integrate
    sensors into your Raspberry Pi projects and let your powerful microcomputer interact
    with the physical world.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Raspberry Pi 传感器》*，*鲁希·加贾尔*，*Packt Publishing*：学习如何将传感器集成到你的Raspberry Pi项目中，并让你的强大微控制器与物理世界互动。'
- en: '*Make Sensors: A Hands-On Primer for Monitoring the Real World with Arduino
    and Raspberry Pi*, *Tero Karvinen*, *Kimmo Karvinen*, *Ville Valtokari*, *Maker
    Media, Inc.*: Learn to use sensors to connect a Raspberry Pi or Arduino controller
    with the real world.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Make 传感器：使用Arduino和Raspberry Pi监控真实世界的动手入门》*，*特罗·卡尔维宁*，*基莫·卡尔维宁*，*维莱·瓦尔特卡里*，*Maker
    Media, Inc.*：学习如何使用传感器将Raspberry Pi或Arduino控制器与真实世界连接起来。'
- en: '*Make: Electronics: Learning Through Discovery*, *Charles Platt*, *Make Community,
    LLC*: This is a useful resource if you want to find out more about electronic
    components and dive deeper into the individual components.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Make: 电子元件：通过探索学习》*，*查尔斯·普拉特*，*Make Community, LLC*：如果你想要了解更多关于电子元件的信息，并深入探究各个单独的元件，这是一个有用的资源。'
