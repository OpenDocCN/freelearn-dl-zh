- en: Getting Started with PyTorch 1.3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用PyTorch 1.3
- en: PyTorch 1.3 has finally arrived! Are you ready to exploit its new features and
    functionalities to make your research and production easier?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 1.3终于发布了！你准备好利用它的新特性和功能，让你的研究和生产工作变得更加轻松吗？
- en: In this chapter, we will walk you through the breaking changes introduced in
    PyTorch, including switching from eager mode to graph mode. We will look at how
    to migrate older code to 1.x and walk you through the PyTorch ecosystem along
    with Cloud support.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将带你了解PyTorch中引入的重大变化，包括从eager模式切换到图模式。我们将探讨如何将旧代码迁移到1.x版本，并带你了解PyTorch生态系统以及云端支持。
- en: Also, we will introduce how to install CUDA so that you can take advantage of
    GPU acceleration for faster training and evaluation with your PyTorch code. We
    will show you the step-by-step installation process of PyTorch on Windows 10 and
    Ubuntu 18.04 (with pure Python or an Anaconda environment) and how to build PyTorch
    from source.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将介绍如何安装CUDA，以便你可以利用GPU加速来加快PyTorch代码的训练和评估过程。我们将展示在Windows 10和Ubuntu 18.04（无论是纯Python环境还是Anaconda环境）上安装PyTorch的逐步过程，以及如何从源代码构建PyTorch。
- en: Finally, as bonus content, we will present how to configure Microsoft VS Code
    for PyTorch development and some of the best extensions to make your work more
    enjoyable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，作为额外内容，我们将展示如何为PyTorch开发配置Microsoft VS Code，以及一些最好的扩展插件，以使你的工作更加愉快。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What's new in PyTorch 1.3?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch 1.3的新特性是什么？
- en: CUDA - GPU acceleration for fast training and evaluation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CUDA - 用于快速训练和评估的GPU加速
- en: Installing Pytorch on Windows and Linux
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows和Linux上安装PyTorch
- en: References and useful reading list
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考资料和有用的阅读书单
- en: What's new in PyTorch 1.3?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch 1.3的新特性是什么？
- en: '**PyTorch** ([https://pytorch.org](https://pytorch.org)) is an open source machine
    learning platform for Python. It is specifically designed for deep learning applications,
    such as **Convolutional Neural Networks** (**CNNs**), **Recurrent Neural Networks**
    (**RNNs**), and **Generative Adversarial Networks** (**GANs**), and it includes extensive
    layer definitions for these applications. It has built-in tensor operations that
    are designed to be used in the same way as NumPy arrays, and they are also optimized
    to run on GPUs for fast computation. It provides an automatic computational graph
    scheme so that you won''t need to calculate derivatives by hand.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyTorch** ([https://pytorch.org](https://pytorch.org)) 是一个开源的Python机器学习平台。它专门为深度学习应用设计，如**卷积神经网络**（**CNNs**）、**递归神经网络**（**RNNs**）和**生成对抗网络**（**GANs**），并为这些应用提供了广泛的层定义。它内置了张量操作，旨在像NumPy数组一样使用，同时也经过优化，能够在GPU上快速计算。它提供了自动计算图机制，因此你无需手动计算导数。'
- en: 'After around 3 years of development and improvements, PyTorch has finally reached
    its newest milestone, version 1.3! What comes with it is a big package of new
    features and new functionalities. Don''t worry about whether you''ll have to re-learn
    the tool; even when it''s a totally new version, PyTorch has always been good
    at keeping its core functionality consistent. In fact, its core modules haven''t
    changed much since its alpha release (version 0.1.1): `torch.nn`, `torch.autograd`,
    and `torch.optim`, unlike some other platforms. (Yes! We''re talking about you,
    TensorFlow!) Now let''s take a look at some of the new features in PyTorch.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 经过大约3年的开发和改进，PyTorch终于迎来了它的最新版本——1.3版！新版本带来了大量的新特性和新功能。你不用担心需要重新学习这个工具；即使是全新的版本，PyTorch一直擅长保持其核心功能的一致性。事实上，自从其alpha版（版本0.1.1）发布以来，其核心模块变化不大：`torch.nn`、`torch.autograd`和`torch.optim`，这与其他一些平台不同。（没错！我们说的就是你，TensorFlow！）现在，让我们来看看PyTorch的一些新特性。
- en: Easy switching from eager mode to graph mode
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从eager模式到图模式的轻松切换
- en: When PyTorch first caught people's attention around 2 years ago, one of its
    biggest advantages over other deep learning tools was its dynamic graph support.
    It might be the main reason people ditch their old tools and embrace PyTorch.
    As you might have noticed, recently, more authors of the latest deep learning
    papers are using PyTorch to implement their experiments.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当PyTorch大约两年前首次引起人们的关注时，它相对于其他深度学习工具的一个最大优势就是支持动态计算图。可能正是这个特点促使人们放弃旧有工具，转而采用PyTorch。正如你可能已经注意到的，最近，越来越多的最新深度学习论文的作者开始使用PyTorch来实现他们的实验。
- en: However, it doesn't mean that PyTorch is not fit for production environments.
    In version 1.0, PyTorch provides a **hybrid frontend** that easily transfers your
    code from eager mode (dynamic graph) to graph mode (static graph). You can write
    your code in as flexible a way as before. When you are satisfied with your code,
    just by changing a few lines of code in your model, it will be ready to be optimized
    for efficiency in graph mode. This process is accomplished by the torch.jit compiler.
    **JIT** (**Just**-**In**-**Time**) compiler is designed to serialize and optimize
    PyTorch code into **TorchScript**, which can run without a Python interpreter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不意味着PyTorch不适合生产环境。在1.0版本中，PyTorch提供了一个**混合前端**，可以轻松地将你的代码从动态图模式（eager
    mode）转换为图模式（静态图）。你可以像以前一样灵活地编写代码。当你对代码满意时，只需通过修改几行代码，它就能准备好在图模式下进行高效优化。这个过程是通过torch.jit编译器完成的。**JIT**（**即时**-**编译**）编译器旨在将PyTorch代码序列化并优化为**TorchScript**，后者可以在没有Python解释器的情况下运行。
- en: 'This means that, now, you can easily export your model to an environment where
    Python is not available or efficiency is extremely important, and call your model
    with C++ code. Two modalities are provided to convert traditional PyTorch code
    to TorchScript: tracing and scripting. **Tracing** is perfect for directly transforming
    your fixed model scheme with fixed inputs to graph mode.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着现在你可以轻松地将模型导出到一个没有Python的环境中，或者效率极为重要的地方，并通过C++代码调用你的模型。提供了两种方式将传统的PyTorch代码转换为TorchScript：追踪和脚本化。**追踪**非常适合直接将固定输入的固定模型结构转换为图模式。
- en: However, if there is any data-dependent control flow in your model (for example,
    RNN), **scripting** is designed for this type of scenario, where all possible
    control flow routes are converted into TorchScript. Bear in mind that, for now
    (at the time of writing this book), scripting still has its limitations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你的模型中存在任何数据依赖的控制流（例如RNN），**脚本化**是为这种场景设计的，其中所有可能的控制流路径都会转换为TorchScript。请记住，至少在编写本书时，脚本化仍然存在一些局限性。
- en: '**Dynamic graph** means that the computational graph is established each time
    you run your model and can be changed between different runs. It''s like everyone
    driving their own cars around the streets, when anyone can go anywhere each time
    they leave their home. It''s flexible for research purposes. However, the additional
    resource overheads that building the graphs before each run requires cannot be
    overlooked. Therefore, it might be a little inefficient for production purposes.
    **Static graph** means that the computational graph has to be established before
    the first run and it cannot be changed once established. It''s like everyone going
    to work on the bus. It''s efficient, but if the passengers want to travel to different
    destinations, they have to talk to the bus driver, who will then talk to the public
    transportation authorities. Then, the bus route can be changed the next day.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**动态图**意味着每次运行模型时都会建立计算图，并且可以在不同的运行之间进行更改。就像每个人开着自己的车在街上行驶，每次离开家时都可以去任何地方。它对研究来说非常灵活。然而，在每次运行之前建立计算图所需的额外资源开销是不可忽视的。因此，它可能对于生产环境来说效率较低。**静态图**意味着计算图必须在第一次运行之前建立，并且一旦建立就不能再更改。就像每个人都坐公共汽车上班。如果乘客想去不同的目的地，他们必须与公交车司机沟通，司机再与公共交通部门联系。然后，第二天公交路线可以进行调整。'
- en: Here's an example of how to change your models to graph mode.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何将模型转换为图模式的示例。
- en: 'Assume that we already have `model` on a given `device`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经在给定的`device`上拥有了`model`：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We only need to add these lines to `trace` the `model`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需添加这些代码行来`trace`模型：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we can `save` the traced model to file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将追踪后的模型`保存`到文件中：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that you should avoid using `torch.save(traced_model.state_dict(), "model_jit.pth")`
    to save the traced model, because, at the time of writing this book, the checkpoint
    file created in this way cannot be properly processed by the C++ API.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你应避免使用`torch.save(traced_model.state_dict(), "model_jit.pth")`来保存追踪后的模型，因为在编写本书时，以这种方式创建的检查点文件无法被C++
    API正确处理。
- en: Now, the traced model can be used in the same way as a normal `torch.nn.Module`
    in Python, and can also be used by other C++ code, which we will cover later.
    The full code for this example, where we train and export a CNN for classification
    on MNIST can be found in the `jit/mnist_jit.py` file located in the code repository
    for this chapter. You can refer to the official tutorial for more information
    about the hybrid frontend: [https://pytorch.org/tutorials/beginner/deploy_seq2seq_hybrid_frontend_tutorial.html](https://pytorch.org/tutorials/beginner/deploy_seq2seq_hybrid_frontend_tutorial.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，追踪模型可以像在 Python 中使用普通的 `torch.nn.Module` 一样使用，也可以被其他 C++ 代码使用，稍后我们会讲解这一点。这个示例的完整代码，包含我们训练并导出用于
    MNIST 分类的 CNN，可以在代码仓库中的 `jit/mnist_jit.py` 文件中找到。你可以参考官方教程，了解更多关于混合前端的信息：[https://pytorch.org/tutorials/beginner/deploy_seq2seq_hybrid_frontend_tutorial.html](https://pytorch.org/tutorials/beginner/deploy_seq2seq_hybrid_frontend_tutorial.html)。
- en: The C++ frontend
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ 前端
- en: Even though the backend of PyTorch is mostly implemented by C++, its frontend
    API has always been focused on Python. It's partly because Python has already
    been very popular among data scientists and it has tons of open source packages
    that help you focus on solving the problems, rather than re-creating the wheel.
    Also, it's extremely easy to read and write. However, Python is not known for
    computation and memory resource efficiency. Big companies often develop their
    own tools in C++ for better performance. But smaller companies or individual developers
    find it difficult to divert their main focus to developing their own C++ tools.
    Luckily, PyTorch has now shipped the C++ API with version 1.0\. Now, anyone can
    build efficient projects with it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 PyTorch 的后端主要是由 C++ 实现的，但其前端 API 一直以来都集中在 Python 上。部分原因是 Python 在数据科学家中已经非常流行，并且拥有大量开源包，帮助你专注于解决问题，而不是重新发明轮子。此外，Python
    还非常易于阅读和编写。然而，Python 并不以计算和内存资源效率著称。大公司通常会用 C++ 开发自己的工具，以实现更好的性能。但小公司或个人开发者往往很难将主要精力转向开发自己的
    C++ 工具。幸运的是，PyTorch 在版本 1.0 中发布了 C++ API，现在，任何人都可以利用它来构建高效的项目。
- en: Note that, right now, the C++ API of PyTorch is still under development and
    may undergo some changes in the future. In fact, the changes between v1.0.1 and
    v1.0.0 are so huge that the official documents and tutorials for v1.0.0 would
    not fit v1.0.1.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，目前 PyTorch 的 C++ API 仍在开发中，未来可能会发生一些变化。事实上，v1.0.1 和 v1.0.0 之间的变化非常大，以至于
    v1.0.0 的官方文档和教程无法适用于 v1.0.1。
- en: Here's an example of how to use the C++ API provided by PyTorch.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何使用 PyTorch 提供的 C++ API 的一个示例。
- en: 'Let''s load the traced model we exported previously:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载之前导出的追踪模型：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, let''s feed a dummy input image to the model:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们给模型输入一个虚拟的图片：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The full code for the C++ example can be found under the `jit` directory located
    in the code repository for this chapter, including a `CMakeLists.txt` file for
    compiling the `.cpp` file. You can refer to the official documentation for more
    information about C++ APIs: [https://pytorch.org/cppdocs](https://pytorch.org/cppdocs).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 示例的完整代码可以在本章的代码仓库中的 `jit` 目录下找到，其中包括用于编译 `.cpp` 文件的 `CMakeLists.txt` 文件。你可以参考官方文档，了解更多关于
    C++ API 的信息：[https://pytorch.org/cppdocs](https://pytorch.org/cppdocs)。
- en: The redesigned distributed library
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新设计的分布式库
- en: Debugging multithreading programs on a CPU is painful. Designing efficient GPU
    programs on distributed systems can be even more so. Fortunately, PyTorch keeps
    delivering ease-of-use distributed solutions for this very purpose. In version
    1.0, the `torch.distributed` module is performance-driven and runs asynchronously
    for all backends, including Gloo, NCCL, and MPI. The new distributed library is
    designed to deliver near-optimal performance on both single-node and multi-node
    systems. It's also specially optimized for less advanced network communication
    scenarios by reducing bandwidth exchanges and thus improves the performance of
    these systems.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CPU 上调试多线程程序非常痛苦，而在分布式系统上设计高效的 GPU 程序则可能更为复杂。幸运的是，PyTorch 不断推出易于使用的分布式解决方案，正是为了这个目的。在版本
    1.0 中，`torch.distributed` 模块是以性能为驱动，并对所有后端（包括 Gloo、NCCL 和 MPI）进行异步运行。新的分布式库旨在为单节点和多节点系统提供接近最佳的性能。它还特别针对较不先进的网络通信场景进行了优化，通过减少带宽交换，从而提升这些系统的性能。
- en: 'The NCCL backend is used for distributed GPU training, and the Gloo backend
    is used for distributed CPU training. The new distributed package also provides
    a helper utility, `torch.distributed.launch`, which is designed to launch multiple processes
    on both single-node and multi-node systems. An example of how to use it for distributed
    training is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: NCCL 后端用于分布式 GPU 训练，而 Gloo 后端则用于分布式 CPU 训练。新的分布式包还提供了一个辅助工具 `torch.distributed.launch`，旨在启动单节点和多节点系统上的多个进程。以下是如何使用它进行分布式训练的示例：
- en: 'Single-node `distributed` training:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 `distributed` 训练：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Multi-node `distributed` training:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多节点 `distributed` 训练：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding, `MASTER_IP` is a string containing the IP address of the master
    node, for example, `192.168.1.1`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`MASTER_IP` 是一个包含主节点 IP 地址的字符串，例如 `192.168.1.1`。
- en: Feel free to check out the official tutorial on distributed training with PyTorch
    1.3: [https://pytorch.org/docs/master/distributed.html](https://pytorch.org/docs/master/distributed.html), [https://pytorch.org/tutorials/intermediate/dist_tuto.html](https://pytorch.org/tutorials/intermediate/dist_tuto.html), [https://pytorch.org/tutorials/beginner/former_torchies/parallelism_tutorial.html](https://pytorch.org/tutorials/beginner/former_torchies/parallelism_tutorial.html) and [https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html](https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请随时查看关于使用 PyTorch 1.3 进行分布式训练的官方教程：[https://pytorch.org/docs/master/distributed.html](https://pytorch.org/docs/master/distributed.html)，[https://pytorch.org/tutorials/intermediate/dist_tuto.html](https://pytorch.org/tutorials/intermediate/dist_tuto.html)，[https://pytorch.org/tutorials/beginner/former_torchies/parallelism_tutorial.html](https://pytorch.org/tutorials/beginner/former_torchies/parallelism_tutorial.html)
    和 [https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html](https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html)。
- en: Better research reproducibility
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的研究可复现性
- en: You may have heard complaints about how hard it is to reproduce the experimental
    results in deep learning papers. Apparently, we need to trust the reviewers, even
    though they have to review thousands of papers for each top conference every year.
    However, does it mean we cannot trust our abilities to follow the exact steps
    written on paper? Now PyTorch has announced torch.hub to help with the research
    reproducible problem. Authors can now publish their trained models with Torch
    Hub and users can directly download and use them in their code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能听说过关于深度学习论文中实验结果难以复现的抱怨。显然，我们需要信任评审专家，尽管他们每年必须为每个顶级会议审阅成千上万的论文。然而，这是否意味着我们不能信任自己按照论文中确切步骤进行操作的能力？现在
    PyTorch 已宣布推出 torch.hub 来帮助解决研究可复现性的问题。作者现在可以通过 Torch Hub 发布他们的训练模型，用户则可以直接下载并在代码中使用它们。
- en: Here's an example of how to publish and use pre-trained models with Torch Hub.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个如何使用 Torch Hub 发布和使用预训练模型的示例。
- en: 'To publish your model, you need to create a `hubconf.py` file in a GitHub repository
    and define the entrypoint (for example, named `cnn`) like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布您的模型，您需要在 GitHub 仓库中创建一个 `hubconf.py` 文件，并定义入口点（例如，命名为 `cnn`），如下所示：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, `dependencies` is a list of the dependencies required
    to run your model, and `Net()` is the class that defines your model. Note that
    the published models have to live under certain a branch/tag, for example, the master
    branch. You can also upload your `pretrained` model files to other sites and download
    them in this way:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`dependencies` 是运行您的模型所需的依赖项列表，而 `Net()` 是定义您模型的类。请注意，发布的模型必须位于特定的分支/标签下，例如
    master 分支。您还可以将您的 `pretrained` 模型文件上传到其他网站，并通过这种方式下载它们：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Say we have published our model to [https://github.com/johnhany/torchhub](https://github.com/johnhany/torchhub).
    To use a published model, you only need to call `torch.hub`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经将模型发布到 [https://github.com/johnhany/torchhub](https://github.com/johnhany/torchhub)。要使用已发布的模型，您只需要调用
    `torch.hub`：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The full code for the Torch Hub example can be found under the `torchhub` directory
    located in the code repository for this chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 Torch Hub 示例的完整代码可以在代码库中的 `torchhub` 目录下找到。
- en: Miscellaneous
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他杂项
- en: Other than what we've mentioned previously, there are other things we can benefit
    from in the new version of PyTorch. By the end of this section, we will also talk
    about how to migrate your old PyTorch code to version 1.x.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前提到的内容，PyTorch 新版本还带来了其他好处。在本节结束时，我们还将讨论如何将您的旧 PyTorch 代码迁移到 1.x 版本。
- en: The PyTorch ecosystem
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch 生态系统
- en: There are many wonderful tools and projects built on the PyTorch platform. They
    explore the full potential of PyTorch in many domains. For example, **AllenNLP**
    ([https://allennlp.org](https://allennlp.org)) is an open source natural language
    processing library. Check out their demo site and see what state-of-the-art NLP
    algorithms are capable of: [https://demo.allennlp.org](https://demo.allennlp.org). **Fastai**
    ([https://docs.fast.ai](https://docs.fast.ai)) provides a simplified procedure
    of model training with PyTorch, and also offers practical deep learning courses
    at [https://course.fast.ai](https://course.fast.ai). **Translate** ([https://github.com/pytorch/translate](https://github.com/pytorch/translate))
    is a PyTorch library that's dedicated to natural language translation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多精彩的工具和项目是基于 PyTorch 平台构建的。它们在多个领域充分挖掘了 PyTorch 的潜力。例如，**AllenNLP** ([https://allennlp.org](https://allennlp.org))
    是一个开源的自然语言处理库。你可以查看他们的演示网站，了解最前沿的 NLP 算法能够实现什么：[https://demo.allennlp.org](https://demo.allennlp.org)。**Fastai**
    ([https://docs.fast.ai](https://docs.fast.ai)) 提供了一个简化的 PyTorch 模型训练流程，并且在 [https://course.fast.ai](https://course.fast.ai)
    上提供了实用的深度学习课程。**Translate** ([https://github.com/pytorch/translate](https://github.com/pytorch/translate))
    是一个专注于自然语言翻译的 PyTorch 库。
- en: Check out this site to find out more about the PyTorch ecosystem: [https://pytorch.org/ecosystem](https://pytorch.org/ecosystem).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 访问这个网站了解更多关于 PyTorch 生态系统的信息：[https://pytorch.org/ecosystem](https://pytorch.org/ecosystem)。
- en: Cloud support
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云端支持
- en: PyTorch is fully supported by popular cloud platforms such as Amazon AWS, Google
    Cloud Platform, and Microsoft Azure. If you don't currently own a CUDA-enabled
    GPU (which we will discuss in the next section), feel free to rent a GPU server
    provided by the platforms previously mentioned. Here's an official tutorial on
    distributed training with PyTorch on Amazon AWS: [https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html](https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 完全支持主流云平台，如 Amazon AWS、Google Cloud Platform 和 Microsoft Azure。如果你目前没有支持
    CUDA 的 GPU（我们将在下一节讨论此问题），可以随时租用前述平台提供的 GPU 服务器。以下是关于在 Amazon AWS 上使用 PyTorch 进行分布式训练的官方教程：[https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html](https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html)。
- en: Migrating your previous code to 1.x
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你之前的代码迁移到 1.x
- en: Despite all the breaking changes in PyTorch 1.x, most of the APIs or coding
    conventions have not changed too much. Therefore, if you are already comfortable
    with PyTorch 0.4, your code *should* mostly work as is. API changes from v0.4
    to v1.3 are listed in Breaking Changes at [https://github.com/pytorch/pytorch/releases](https://github.com/pytorch/pytorch/releases).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 PyTorch 1.x 引入了许多破坏性变化，大部分的 API 或编码规范变化并不大。因此，如果你已经熟悉 PyTorch 0.4，那么你的代码*应该*可以大部分照常工作。从
    v0.4 到 v1.3 的 API 变化可以在 Breaking Changes 中找到，链接为：[https://github.com/pytorch/pytorch/releases](https://github.com/pytorch/pytorch/releases)。
- en: The most common issue you might run into when migrating older code to PyTorch
    1.x would stem from indexing a 0-dimension tensor. You need to use `loss.item()`
    when, for example, printing the loss value, instead of `loss[0]`. The full code
    for this example is contained in the `ind-0-dim.py` file under the `pytorch_test` directory
    located in the code repository for this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你在将旧代码迁移到 PyTorch 1.x 时，最常遇到的问题通常源于索引 0 维度的张量。比如，当你打印损失值时，需要使用 `loss.item()`，而不是
    `loss[0]`。这个示例的完整代码可以在代码仓库中找到，路径为 `pytorch_test` 目录下的 `ind-0-dim.py` 文件。
- en: If your code is targeted at older versions than 0.4, you should perhaps check
    out the migration guide for PyTorch 0.4; first: [https://pytorch.org/blog/pytorch-0_4_0-migration-guide](https://pytorch.org/blog/pytorch-0_4_0-migration-guide).
    There is no official migration guide for versions later than 0.4, however, you'll
    certainly find plenty of information on the internet with a simple web search.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码针对的是早于 0.4 版本的 PyTorch，你或许应该首先查看 PyTorch 0.4 的迁移指南：[https://pytorch.org/blog/pytorch-0_4_0-migration-guide](https://pytorch.org/blog/pytorch-0_4_0-migration-guide)。不过，后续版本（大于
    0.4）的官方迁移指南并不存在，然而，你肯定可以通过简单的网络搜索找到很多相关信息。
- en: CUDA – GPU acceleration for fast training and evaluation
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CUDA – 用于快速训练和评估的 GPU 加速
- en: The NVIDIA CUDA Toolkit ([https://developer.nvidia.com/cuda-toolkit](https://developer.nvidia.com/cuda-toolkit))
    is a fully optimized parallel computing platform for general-purpose computing
    on graphics processing units (GPGPU). It allows us to perform scientific computing
    on NVIDIA graphic cards, including linear algebra, image and video processing,
    deep learning, and graph analytics. It is used by a lot of commercial and open
    source software to enable GPU-accelerated computation across different domains.
    If we look back at the development of deep learning, we should realize that the
    latest breakthroughs in GANs would have been almost impossible without the help
    of CUDA and powerful GPUs. Therefore, we highly recommend you try out the experiments
    in this book on a CUDA-compatible GPU; otherwise, the training time of neural
    networks could be painfully long on CPUs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: NVIDIA CUDA Toolkit ([https://developer.nvidia.com/cuda-toolkit](https://developer.nvidia.com/cuda-toolkit))
    是一个完全优化的并行计算平台，用于图形处理单元（GPGPU）上的通用计算。它允许我们在NVIDIA显卡上进行科学计算，包括线性代数、图像和视频处理、深度学习以及图形分析。许多商业和开源软件都使用它，以便在不同领域实现GPU加速计算。如果我们回顾深度学习的发展，就会意识到没有CUDA和强大GPU的帮助，GAN的最新突破几乎是不可能实现的。因此，我们强烈建议你在支持CUDA的GPU上尝试本书中的实验；否则，在CPU上训练神经网络的时间可能会非常漫长。
- en: In this section, we will walk you through the installation of CUDA on Windows
    10 and Ubuntu 18.04\. Before we start installing CUDA, you should make sure that
    your video card supports CUDA and you have installed the latest driver for your
    video card. To check whether your GPU is compatible with CUDA (or the exact CUDA
    version you want to install), you should first make sure you have an NVIDIA video
    card on your machine.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将指导你在Windows 10和Ubuntu 18.04上安装CUDA。在开始安装CUDA之前，你应该确保你的显卡支持CUDA，并且你已安装了最新的显卡驱动程序。要检查你的GPU是否与CUDA兼容（或者与你想安装的具体CUDA版本兼容），你首先需要确保你的机器上安装了NVIDIA显卡。
- en: 'On Windows, you can use third-party tools such as GPU-Z ([https://www.techpowerup.com/gpuz](https://www.techpowerup.com/gpuz))
    or GPU Caps Viewer ([http://www.ozone3d.net/gpu_caps_viewer](http://www.ozone3d.net/gpu_caps_viewer))
    to examine the specifications of your video card. You can always check this web
    pageto see if your video card is on the list: [https://www.geforce.com/hardware/technology/cuda/supported-gpus](https://www.geforce.com/hardware/technology/cuda/supported-gpus).
    The most straightforward and practical way, however, to check whether the latest
    CUDA perfectly runs on your system, is to finish the installation and evaluation
    steps in the following subsections without any issues.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，你可以使用第三方工具，如GPU-Z ([https://www.techpowerup.com/gpuz](https://www.techpowerup.com/gpuz))
    或 GPU Caps Viewer ([http://www.ozone3d.net/gpu_caps_viewer](http://www.ozone3d.net/gpu_caps_viewer))
    来检查显卡的规格。你也可以随时访问这个网页，查看你的显卡是否在支持列表上：[https://www.geforce.com/hardware/technology/cuda/supported-gpus](https://www.geforce.com/hardware/technology/cuda/supported-gpus)。然而，检查最新的CUDA是否在你的系统上完美运行的最直接且实用的方法，是按照下面小节中的安装和评估步骤，确保没有任何问题地完成安装。
- en: At the time of writing this book, the latest version of CUDA is 10.1.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，CUDA的最新版本是10.1。
- en: Installing NVIDIA driver
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装NVIDIA驱动程序
- en: On Windows 10, visit [https://www.nvidia.com/Download/index.aspx](https://www.nvidia.com/Download/index.aspx)
    to download the driver by choosing the product and operating system based on your
    video card and system. Installation on Windows should be very straightforward
    since it has a **graphical user interface** (**GUI**). You can keep the default
    settings during installation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10上，访问 [https://www.nvidia.com/Download/index.aspx](https://www.nvidia.com/Download/index.aspx)，根据你的显卡和操作系统选择产品并下载驱动程序。Windows上的安装应该非常简单，因为它具有**图形用户界面**（**GUI**）。你可以在安装过程中保持默认设置。
- en: 'On Ubuntu 18.04, you can always download CUDA from the *How to install CUDA
    10.1 on Ubuntu 18.04* ([https://gist.github.com/eddex/707f9cbadfaec9d419a5dfbcc2042611](https://gist.github.com/eddex/707f9cbadfaec9d419a5dfbcc2042611)).
    However, we recommend you install the NVIDIA driver in the following way so that
    your graphics driver can be updated in the same way as other software. First,
    open up a Terminal and add the proper repository to your package management source
    list by typing in the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 18.04上，你可以随时从 *如何在Ubuntu 18.04上安装CUDA 10.1* ([https://gist.github.com/eddex/707f9cbadfaec9d419a5dfbcc2042611](https://gist.github.com/eddex/707f9cbadfaec9d419a5dfbcc2042611))
    下载CUDA。然而，我们建议你按以下方式安装NVIDIA驱动程序，这样你可以像其他软件一样更新显卡驱动。首先，打开终端，并通过输入以下命令将适当的仓库添加到你的包管理源列表中：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, you can check your video card model and the recommended driver version
    by implementing the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过执行以下操作检查你的显卡型号和推荐的驱动程序版本：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output may look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能如下所示：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, install the recommended driver with the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令安装推荐的驱动程序：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you already have CUDA installed and plan on installing a different version
    of CUDA, we recommend you uninstall both the NVIDIA driver and CUDA toolkit, reboot
    your system, and install the latest driver before re-installing CUDA.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 CUDA，并计划安装不同版本的 CUDA，我们建议你卸载 NVIDIA 驱动程序和 CUDA 工具包，重启系统，并在重新安装 CUDA
    之前安装最新的驱动程序。
- en: When the installation is finished, reboot your system.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，重启你的系统。
- en: Installing CUDA
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 CUDA
- en: Here's the full list of CUDA toolkits: [https://developer.nvidia.com/cuda-toolkit-archive](https://developer.nvidia.com/cuda-toolkit-archive).
    Click CUDA Toolkit 10.1 to navigate to the download page for CUDA 10.1.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的 CUDA 工具包列表：[https://developer.nvidia.com/cuda-toolkit-archive](https://developer.nvidia.com/cuda-toolkit-archive)。点击
    CUDA Toolkit 10.1 来访问 CUDA 10.1 的下载页面。
- en: On **Windows 10**, select Windows | x86_64 | 10 | exe(local), and download the
    base installer. The installer file is about 2.1 GB. Again, we won't go into details
    regarding the installation process since it's GUI-based. Just keep the default
    settings during installation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Windows 10**上，选择 Windows | x86_64 | 10 | exe(local)，并下载基础安装程序。安装程序文件约为 2.1
    GB。再次提醒，由于安装过程是基于 GUI 的，我们不会详细讨论。安装时只需保持默认设置。
- en: Make sure you also install the official CUDA samples during installation. They
    are essential for us to evaluate the successful installation of CUDA later on
    and very useful for learning CUDA programming (if you are interested). Also, if
    you plan on installing Microsoft Visual Studio on Windows as well, make sure you
    install it before CUDA, because CUDA will then automatically detect Visual Studio
    and install the corresponding integration tool.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在安装过程中也安装官方的 CUDA 示例。它们对于我们后续评估 CUDA 是否成功安装至关重要，并且对于学习 CUDA 编程非常有用（如果你有兴趣的话）。此外，如果你计划在
    Windows 上安装 Microsoft Visual Studio，请确保在 CUDA 之前安装它，因为 CUDA 会自动检测 Visual Studio
    并安装相应的集成工具。
- en: 'On Ubuntu 18.04, select Linux | x86_64 | Ubuntu | 18.04 | runfile(local), and
    download the Base Installer. The installer file is about 2.0 GB. When the download
    is finished, which could take a little while (say it''s downloaded under the `~/Downloads`
    directory), open up a Terminal and type in the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 18.04 上，选择 Linux | x86_64 | Ubuntu | 18.04 | runfile(local)，并下载基础安装程序。安装程序文件大约
    2.0 GB。下载完成后（可能需要一段时间，假设它下载在`~/Downloads`目录下），打开终端并输入以下命令：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: During the installation, accept all default settings, except that we don't need
    to install the NVIDIA driver when prompted, since we have already installed a
    newer version previously.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，接受所有默认设置，除了当提示时我们不需要安装 NVIDIA 驱动程序，因为我们之前已经安装了更新版本。
- en: 'By the end of the installation of CUDA, there might be several warning messages,
    such as Missing recommended library: `libGLU.so`. Simply run `apt-get install
    libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev` to install those optional
    libraries.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CUDA 安装结束时，可能会有一些警告信息，例如缺少推荐的库：`libGLU.so`。只需运行`apt-get install libglu1-mesa
    libxi-dev libxmu-dev libglu1-mesa-dev`来安装这些可选库。
- en: 'Finally, add CUDA directories to your `~/.bashrc` file so that other software
    can find your CUDA library:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将 CUDA 目录添加到你的`~/.bashrc`文件，以便其他软件可以找到你的 CUDA 库：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Alternatively, you can open the file with `gedit ~/.bashrc` and manually add
    these two lines at the end of the file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以打开文件`gedit ~/.bashrc`并手动在文件末尾添加以下两行：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run `sudo ldconfig` to refresh the changes we make to the `.bashrc` file. Make
    sure you close and re-open the Terminal before running any other bash command.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`sudo ldconfig`以刷新我们对 `.bashrc` 文件所做的更改。确保在运行任何其他 bash 命令之前，关闭并重新打开终端。
- en: For other platforms, please visit [https://docs.nvidia.com/cuda/archive/10.0](https://docs.nvidia.com/cuda/archive/10.0)
    and follow the instructions there to install CUDA 10.0.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他平台，请访问[https://docs.nvidia.com/cuda/archive/10.0](https://docs.nvidia.com/cuda/archive/10.0)并按照该页面上的说明安装
    CUDA 10.0。
- en: Installing cuDNN
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 cuDNN
- en: In order to enable the fast computation capability provided by CUDA for neural
    networks, we need to install cuDNN. The **NVIDIA CUDA Deep Neural Network library**
    (**cuDNN**) is a GPU-accelerated library for deep neural networks. It's basically
    a low-level driver that runs on GPUs that provides multiple fully optimized forward
    and backward computation for common neural network operations. It has been used
    by many deep learning platforms, including PyTorch, so that the platform developers
    don't have to worry about implementing the basic neural network components and
    can focus on delivering better APIs for us to use.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用CUDA为神经网络提供的快速计算能力，我们需要安装cuDNN。**NVIDIA CUDA深度神经网络库**（**cuDNN**）是一个为深度神经网络提供GPU加速的库。它本质上是一个运行在GPU上的低级驱动程序，提供了多个完全优化的前向和反向计算，以支持常见的神经网络操作。它已经被许多深度学习平台使用，包括PyTorch，这样平台开发者就不需要担心实现基本的神经网络组件，而可以专注于提供更好的API供我们使用。
- en: First, we need to download cuDNN from this site: [https://developer.nvidia.com/rdp/cudnn-download](https://developer.nvidia.com/rdp/cudnn-download).
    Previous versions are available at [https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive).
    Look for the cuDNN release that fits your CUDA version and your OS. Normally,
    any version of cuDNN that's bigger than **7.0** would be acceptable for PyTorch.
    You can always grab the latest version, of course. Here, we will download **cuDNN
    v7.5.0 for CUDA 10.1** from the first of the preceding links. Please note that
    you will need to register an NVIDIA Developer account with a valid email address to
    become a member of the NVIDIA Developer Program; then all the cuDNN release files
    are free to download.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要从这个网站下载cuDNN：[https://developer.nvidia.com/rdp/cudnn-download](https://developer.nvidia.com/rdp/cudnn-download)。之前的版本可以在[https://developer.nvidia.com/rdp/cudnn-archive](https://developer.nvidia.com/rdp/cudnn-archive)找到。请根据您的CUDA版本和操作系统选择合适的cuDNN版本。通常，任何版本的cuDNN，只要大于**7.0**，都可以适用于PyTorch。当然，您也可以始终下载最新版本。在这里，我们将从上面链接中下载**cuDNN
    v7.5.0 for CUDA 10.1**。请注意，您需要注册一个有效电子邮件地址的NVIDIA开发者账户，以成为NVIDIA开发者计划的成员；然后所有的cuDNN发布文件都可以免费下载安装。
- en: 'On Windows 10, click Download cuDNN v7.5.0 (Feb 21, 2019); for CUDA 10.0, click
    **cuDNN Library for Windows 10**. This will download a `cudnn-10.0-windows10-x64-v7.5.0.56.zip`
    file that is about 224 MB. Unzip the downloaded file and copy the unzipped files
    to CUDA directory as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10上，点击下载cuDNN v7.5.0（2019年2月21日）；对于CUDA 10.0，点击**Windows 10的cuDNN库**。这将下载一个名为`cudnn-10.0-windows10-x64-v7.5.0.56.zip`的文件，大小约为224MB。解压下载的文件并将解压后的文件复制到CUDA目录，如下所示：
- en: '`[UNZIPPED_DIR]\cuda\bin\cudnn64_7.dll -> C:\Program Files\NVIDIA GPU Computing
    Toolkit\CUDA\v10.0\bin\cudnn64_7.dll`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[UNZIPPED_DIR]\cuda\bin\cudnn64_7.dll -> C:\Program Files\NVIDIA GPU Computing
    Toolkit\CUDA\v10.0\bin\cudnn64_7.dll`'
- en: '`[UNZIPPED_DIR]\cuda\include\cudnn.h -> C:\Program Files\NVIDIA GPU Computing
    Toolkit\CUDA\v10.0\include\cudnn.h`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[UNZIPPED_DIR]\cuda\include\cudnn.h -> C:\Program Files\NVIDIA GPU Computing
    Toolkit\CUDA\v10.0\include\cudnn.h`'
- en: '`[UNZIPPED_DIR]\cuda\lib\x64\cudnn.lib -> C:\Program Files\NVIDIA GPU Computing
    Toolkit\CUDA\v10.0\lib\x64\cudnn.lib`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[UNZIPPED_DIR]\cuda\lib\x64\cudnn.lib -> C:\Program Files\NVIDIA GPU Computing
    Toolkit\CUDA\v10.0\lib\x64\cudnn.lib`'
- en: 'On Ubuntu 18.04, click**Download cuDNN v7.5.0 (Feb 21, 2019)**; for CUDA 10.0,
    click **cuDNN Library for Linux**. A `cudnn-10.0-linux-x64-v7.5.0.56.tgz` file
    will be downloaded. The file size is about 433 MB. When the download is finished,
    let''s open up a Terminal and run the following scripts (we assume that your file
    has been downloaded to the `~/Downloads` directory):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 18.04上，点击**下载cuDNN v7.5.0（2019年2月21日）**；对于CUDA 10.0，点击**Linux的cuDNN库**。一个名为`cudnn-10.0-linux-x64-v7.5.0.56.tgz`的文件将被下载。文件大小约为433MB。下载完成后，让我们打开终端并运行以下脚本（假设您的文件已下载到`~/Downloads`目录）：
- en: 'Unzip the downloaded file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 解压下载的文件：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Copy the files to the system directory and grant the read permissions for all
    users (you may need to `cd` to the extracted folder first):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件复制到系统目录，并为所有用户授予读取权限（您可能需要先`cd`到解压文件夹）：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: On other platforms, please follow the instructions at [https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html)
    to install cuDNN.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他平台上，请参阅[https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html)上的说明来安装cuDNN。
- en: Evaluating your CUDA installation
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估您的CUDA安装
- en: Let's see if CUDA works properly on your machine. Here, we assume that you have
    also installed the official CUDA samples.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看CUDA在您的机器上是否正常工作。这里，我们假设您也已安装了官方的CUDA示例。
- en: Here, Microsoft Visual Studio is needed to build and test the CUDA sample on
    Windows. We are using Visual Studio Community 2017 in this example.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，构建和测试 CUDA 示例程序需要使用 Microsoft Visual Studio。我们在此示例中使用的是 Visual Studio Community
    2017。
- en: On Windows 10, navigate to the CUDA samples directory (for example, `C:\ProgramData\NVIDIA
    Corporation\CUDA Samples\v10.0`). Open the `1_Utilities\deviceQuery\deviceQuery_vs2017.sln`
    solution file with Visual Studio 2017.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 上，进入 CUDA 示例目录（例如，`C:\ProgramData\NVIDIA Corporation\CUDA Samples\v10.0`）。使用
    Visual Studio 2017 打开 `1_Utilities\deviceQuery\deviceQuery_vs2017.sln` 解决方案文件。
- en: 'In Visual Studio, switch the **Solution Configurations** to **Release**. Then,
    click Build | Build deviceQuery to build the sample code. When the build is finished,
    navigate to `C:\ProgramData\NVIDIA Corporation\CUDA Samples\v10.0\bin\win64\Release`
    and open PowerShell under this directory. Type in the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，将 **解决方案配置** 切换为 **发布**。然后，点击构建 | 构建 deviceQuery 来构建示例代码。构建完成后，进入
    `C:\ProgramData\NVIDIA Corporation\CUDA Samples\v10.0\bin\win64\Release` 目录，在该目录下打开
    PowerShell。输入以下命令：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output should look something like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This indicates that CUDA 10.0 has been successfully installed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示 CUDA 10.0 已成功安装。
- en: 'On Ubuntu 18.04, navigate to the CUDA samples directory (for example, `~/NVIDIA_CUDA-10.0_Samples`).
    Open the Terminal and type in:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 18.04 上，进入 CUDA 示例目录（例如，`~/NVIDIA_CUDA-10.0_Samples`）。打开终端并输入以下内容：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This should compile the `deviceQuery` program without any issue. Then, navigate
    to the build directory and run the program:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该能够顺利编译 `deviceQuery` 程序。然后，进入构建目录并运行该程序：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The output should look similar to that from Windows 10.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于 Windows 10 上的输出。
- en: Now we can move on to installing PyTorch 1.0!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始安装 PyTorch 1.0 了！
- en: Installing PyTorch on Windows and Linux
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 和 Linux 上安装 PyTorch
- en: To install and use PyTorch, we need to properly set up the Python development
    environment first. So, in this section, we will first talk about how to set up
    the Python environment, then how to install PyTorch either with official release
    binaries or by building from source. At the end of this section, we will introduce
    you to a lightweight, yet extremely powerful code editor tool, Microsoft VS Code,
    and show you how to configure it for PyTorch programming.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装和使用 PyTorch，我们首先需要正确设置 Python 开发环境。因此，在本节中，我们将首先讨论如何设置 Python 环境，然后介绍如何通过官方发布的二进制文件或从源代码构建来安装
    PyTorch。在本节结束时，我们还会向你介绍一个轻量但非常强大的代码编辑器工具——Microsoft VS Code，并展示如何配置它用于 PyTorch
    编程。
- en: Setting up the Python environment
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Python 环境
- en: In the following sections, we will walk you through how to set up the Python
    environment and how to install or build PyTorch on Windows 10 and Ubuntu 18.04\.
    We assume that, of course, you have successfully installed CUDA on your system
    (for example, CUDA 10.1).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将逐步讲解如何在 Windows 10 和 Ubuntu 18.04 上设置 Python 环境，以及如何安装或构建 PyTorch。当然，我们假设你已经成功安装了
    CUDA（例如，CUDA 10.1）。
- en: Installing Python
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python
- en: On Windows 10, visit [https://www.python.org/downloads/windows](https://www.python.org/downloads/windows)
    to download the Windows x86-64 executable installer. You may install any version
    you want. We'll install the latest version (at the time of writing), 3.7.5, as
    an example. Actually, 3.8.0 is the very latest version, but it's better to stay
    on the 3.7.x track. The downloaded `python-3.7.5-amd64.exe` file is about 25 MB.
    Keep the default settings during installation, except that we could change the
    installation path to an easier-to-find location, that is, `C:\Python37`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 上，访问 [https://www.python.org/downloads/windows](https://www.python.org/downloads/windows)
    下载 Windows x86-64 可执行安装程序。你可以安装任何版本，本文以最新版本（撰写时为 3.7.5）为例。实际上，3.8.0 是最新版本，但最好还是停留在
    3.7.x 版本轨道上。下载的 `python-3.7.5-amd64.exe` 文件约为 25 MB。在安装过程中保持默认设置，唯一需要更改的是安装路径，选择一个更容易找到的位置，即
    `C:\Python37`。
- en: Make sure you check the box for Add Python 3.7 to PATH during installation,
    otherwise, you'll have to add the environment variables manually: `C:\Python37\`
    and `C:\Python37\Scripts\`. The detailed process of adding environment variables
    on Windows 10 is described later in this chapter.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程中确保勾选了将 Python 3.7 添加到 PATH 选项，否则你需要手动添加环境变量：`C:\Python37\` 和 `C:\Python37\Scripts\`。关于在
    Windows 10 上添加环境变量的详细过程将在本章后面介绍。
- en: On Ubuntu 18.04, Python 2.7.15 and 3.7.1 have already been shipped with the
    system. So, you don't have to do anything for now.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 18.04 上，Python 2.7.15 和 3.7.1 已经随系统一起安装。因此，现在不需要做任何操作。
- en: On Ubuntu, if you plan on using the default version of Python provided by the
    system, think twice before you modify it (including upgrading, downgrading, or
    uninstalling) because it will affect many other things in your system. And always
    make sure you are using the right version of Python (that is, Python 2 vs 3).
    Sometimes, installing and using packages across Python 2 and Python 3 can be a
    little bit messy.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上，如果你计划使用系统提供的默认 Python 版本，在修改它之前（三思而后行），因为这可能会影响系统中的许多其他功能。始终确保你使用的是正确的
    Python 版本（即 Python 2 或 Python 3）。有时候，跨 Python 2 和 Python 3 安装和使用包可能会有些混乱。
- en: Installing Anaconda Python
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Anaconda Python
- en: On Windows 10, download the installer from [https://www.anaconda.com/distribution/#windows](https://www.anaconda.com/distribution/#windows). We'll
    download and install Python 3.7 version as an example. This will download an `Anaconda3-2018.12-Windows-x86_64.exe`
    file that is about 614 MB in size. Open this file to install Anaconda and keep
    the default settings unchanged. Note that we don't have to check the box for **Register
    Anaconda as the system Python 3.7** because we will create a new Python environment
    and add the corresponding environment variables manually later on.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 上，从 [https://www.anaconda.com/distribution/#windows](https://www.anaconda.com/distribution/#windows)
    下载安装程序。我们将以 Python 3.7 版本为例进行下载和安装。这将下载一个约 614 MB 的 `Anaconda3-2018.12-Windows-x86_64.exe`
    文件。打开此文件安装 Anaconda，保持默认设置不变。请注意，我们不需要勾选 **Register Anaconda as the system Python
    3.7** 选项，因为我们稍后会手动创建新的 Python 环境并添加相应的环境变量。
- en: At the end of the installation, you will be asked whether you want to install
    the Microsoft VS Code. We recommend you install one for Python development.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 安装结束时，系统会询问是否安装 Microsoft VS Code。我们建议你安装一个用于 Python 开发的编辑器。
- en: 'On Ubuntu 18.04, download the installer from [https://www.anaconda.com/distribution/#linux](https://www.anaconda.com/distribution/#linux).
    Here, we download and install Python version 3.7, for example. An `Anaconda3-2018.12-Linux-x86_64.sh`
    file will be downloaded. The file size is around 684 MB. Run this file to install
    it (assume that it''s located at `~/Downloads`):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 18.04 上，从 [https://www.anaconda.com/distribution/#linux](https://www.anaconda.com/distribution/#linux)
    下载安装程序。这里，我们以 Python 3.7 为例进行下载和安装。将会下载一个 `Anaconda3-2018.12-Linux-x86_64.sh`
    文件，文件大小约为 684 MB。运行此文件进行安装（假设它位于 `~/Downloads` 目录下）：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: During the installation, accept all default settings. By the end of the installation,
    you will be prompted as to whether to install Microsoft VS Code on your system.
    You can accept it if you haven't installed it yet.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，接受所有默认设置。安装结束时，系统会提示是否安装 Microsoft VS Code。如果你还没有安装，可以选择安装。
- en: Prerequisites before we move on
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在继续之前的先决条件
- en: 'There are some important, or even necessary, Python tools and libraries we
    need to install before moving on to the next section, including:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一部分之前，我们需要安装一些重要的，甚至是必需的 Python 工具和库，包括：
- en: '**Pip **<q>(</q>required<q>):</q> It is required to manage your Python packages.
    On Ubuntu, run `sudo apt-get install python-pip` for Python 2 or `sudo apt-get
    install python3-pip` for Python 3\. On Windows, it''s usually installed along
    with Python.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pip** <q>(</q>必需<q>):</q> 管理 Python 包所需的工具。在 Ubuntu 上，运行 `sudo apt-get install
    python-pip` 安装 Python 2，或运行 `sudo apt-get install python3-pip` 安装 Python 3。在 Windows
    上，通常会随着 Python 一起安装。'
- en: '**NumPy** <q>(</q>required<q>):</q> A scientific computing library for tensor
    representation, manipulation, and calculation, along with linear algebra, the
    Fourier transform, and random number capabilities. It is required to install PyTorch.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy** <q>(</q>必需<q>):</q> 一个用于张量表示、操作和计算的科学计算库，包含线性代数、傅里叶变换和随机数功能。它是安装
    PyTorch 的必要库。'
- en: '**SciPy** <q>(</q>optional<q>):</q> A collection of numerical algorithms including
    signal processing, optimization, and statistics. We will use it mainly for its
    statistics capability, for example, initializing parameters based on a certain
    random distribution.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SciPy** <q>(</q>可选<q>):</q> 一组包括信号处理、优化和统计的数值算法库。我们将主要使用它的统计功能，例如基于某种随机分布初始化参数。'
- en: '**OpenCV** <q>(</q>optional<q>):</q> A cross-platform open source computer
    vision library for efficient and real-time image processing and pattern recognition.
    We will use it to preprocess or visualize the data, parameters, and feature maps
    in neural networks.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenCV** <q>(</q>可选<q>):</q> 一个跨平台的开源计算机视觉库，用于高效的实时图像处理和模式识别。我们将使用它来预处理或可视化神经网络中的数据、参数和特征图。'
- en: '**Matplotlib** <q>(</q>optional<q>):</q> A publication-quality plotting library.
    We will use it to illustrate loss curves or other plots.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Matplotlib** <q>(</q>可选<q>):</q> 一个高质量的绘图库。我们将使用它来展示损失曲线或其他图表。'
- en: On Windows 10, you can visit [https://www.lfd.uci.edu/~gohlke/pythonlibs](https://www.lfd.uci.edu/~gohlke/pythonlibs)
    to download the `.whl` files for these libraries and install them with `pip install
    [FILENAME]` (for Python 2) or `pip3 install [FILENAME]` (for Python 3).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 上，你可以访问 [https://www.lfd.uci.edu/~gohlke/pythonlibs](https://www.lfd.uci.edu/~gohlke/pythonlibs)
    下载这些库的 `.whl` 文件，并使用 `pip install [FILENAME]`（对于 Python 2）或 `pip3 install [FILENAME]`（对于
    Python 3）进行安装。
- en: 'On Ubuntu 18.04, you can install these packages with the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 18.04 上，你可以使用以下命令安装这些软件包：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The installation may fail due to user permission issues. If you are an administrator
    user on Windows, make sure you open Command Prompt as administrator. If you have
    root access on Ubuntu, simply add `sudo` before the installation command. If you
    don't have the administrator or root access at all, install the packages with `pip3
    install --user`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程中可能会由于用户权限问题导致失败。如果你是 Windows 系统的管理员用户，请确保以管理员身份打开命令提示符。如果你在 Ubuntu 上拥有
    root 权限，只需在安装命令前添加 `sudo`。如果你完全没有管理员或 root 权限，可以使用 `pip3 install --user` 来安装这些软件包。
- en: Installing PyTorch
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PyTorch
- en: You can either install PyTorch using the official release binaries or by building
    it from source. You can install PyTorch directly on your system, or use a package
    manager (such as Anaconda) to avoid potential conflicts with other tools. At the
    time of writing this book, the latest version of PyTorch is v1.3.1\. Since we
    want to take advantage of the cutting-edge functionalities provided by PyTorch,
    we will install and use PyTorch 1.3 in all the remaining chapters of this book.
    You can, of course, choose any other version you wish, or install an even newer
    version than the one we use in this book. Simply change the version number to
    your own version when you follow the following instructions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用官方发布的二进制文件或从源代码构建的方式来安装 PyTorch。你可以直接在系统上安装 PyTorch，或者使用包管理器（例如 Anaconda）来避免与其他工具的潜在冲突。在撰写本书时，PyTorch
    的最新版本是 v1.3.1。由于我们希望利用 PyTorch 提供的前沿功能，因此在本书的剩余章节中，我们将安装并使用 PyTorch 1.3。当然，你可以选择任何你希望的其他版本，或者安装比本书中使用的版本更新的版本。只需在遵循以下安装步骤时，将版本号更改为你自己的版本。
- en: We highly recommend that you install PyTorch with Anaconda if you are using
    Ubuntu because it won't affect the default Python environment that's shipped with
    the system. If you are on Windows, you can basically delete the Python installation
    and re-install any other version you want, if anything goes seriously wrong.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Ubuntu，我们强烈建议你通过 Anaconda 安装 PyTorch，因为它不会影响系统自带的默认 Python 环境。如果你使用的是
    Windows，如果安装出了问题，你基本可以删除 Python 安装并重新安装你想要的任何版本。
- en: Installing official binaries
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装官方二进制文件
- en: Not too long ago, installing PyTorch was a major endeavor. However, the good
    folks at PyTorch.org have made it very easy for you to install PyTorch on your
    system. Go to [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)
    to get started. There, you will find a very simple point and click method to get
    the proper installation information.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，安装 PyTorch 是一项大工程。然而，PyTorch.org 的开发者们已经使你在系统上安装 PyTorch 变得非常容易。前往 [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)
    开始。你会在这里找到一个非常简单的点击式方法来获取正确的安装信息。
- en: 'You should start with the build that you want to install, and then select the
    operating system. Next, you should determine the way you want to install PyTorch,
    if it''s via Conda, pip, and so on. Next, select the version of Python you are
    going to target, and, finally, pick which version of CUDA you are using or whether
    you are going to go without a GPU:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从你想要安装的版本开始，然后选择操作系统。接下来，你应该确定安装 PyTorch 的方式，例如通过 Conda、pip 等。然后，选择你将使用的
    Python 版本，最后，选择你使用的 CUDA 版本，或者是否不使用 GPU：
- en: '![](img/ecc98148-db55-40dd-803f-d1d83c8ffc76.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecc98148-db55-40dd-803f-d1d83c8ffc76.png)'
- en: The last step is to select and copy the command from the box at the bottom of
    the grid. Paste this into your terminal or Command Prompt and run it. In a minute
    or two, you'll be all set.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是从网格底部的框中选择并复制命令。将其粘贴到终端或命令提示符中并执行。大约一两分钟后，你就完成了安装。
- en: You may also want to consider making the created Python environment the default
    Python for your system. To do that, all you need to do is add these environment
    variables: `C:\Users\John\Anaconda3\envs\torch` and `C:\Users\John\Anaconda3\envs\torch\Scripts`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可能想要将创建的 Python 环境设为系统的默认 Python。为此，你只需添加这些环境变量：`C:\Users\John\Anaconda3\envs\torch`
    和 `C:\Users\John\Anaconda3\envs\torch\Scripts`。
- en: 'How to add **environment variables** on Windows 10: (1) Right-click on the
    <q>Start</q> button and click <q>System</q>. (2) Click <q>System information</q>
    on the right in the <q>Settings</q> window, which will open up the <q>System Control
    Panel</q> (You may not need this step if you are on a rather old version of Windows
    10). (3) Click <q>Advanced system settings</q> on the left, which will open the
    <q>System Properties</q> window. (4) Click <q>the Environment Variables</q> button,
    which will open the <q>Environment Variables</q> window. (5) Double-click the
    line for <q>Path</q> variable in <q>User variables</q>. Now you can add or edit
    the paths pointing to Anaconda or Python directories. Each time you edit environment
    variables, make sure that you close the <q>Environment Variables</q> window and
    run this script in PowerShell: `$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
    + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")`.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在 Windows 10 上添加 **环境变量**： (1) 右键点击 <q>开始</q> 按钮，点击 <q>系统</q>。 (2) 在 <q>设置</q>
    窗口右侧点击 <q>系统信息</q>，这将打开 <q>系统控制面板</q>（如果你使用的是比较旧版本的 Windows 10，可能不需要这一步）。 (3)
    在左侧点击 <q>高级系统设置</q>，这将打开 <q>系统属性</q> 窗口。 (4) 点击 <q>环境变量</q> 按钮，打开 <q>环境变量</q>
    窗口。 (5) 双击 <q>用户变量</q> 中的 <q>Path</q> 变量行。现在你可以添加或编辑指向 Anaconda 或 Python 目录的路径。每次编辑环境变量时，确保关闭
    <q>环境变量</q> 窗口，并在 PowerShell 中运行此脚本：`$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
    + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")`。
- en: That's it! PyTorch has now been installed on your machine and you can follow
    the instructions in the *Evaluating your PyTorch* installation section to see
    if it works properly.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在 PyTorch 已经成功安装在你的机器上，你可以按照 *评估你的 PyTorch* 安装部分的说明，检查它是否正常工作。
- en: Building Pytorch from source
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建 PyTorch
- en: Here, we will only talk about building PyTorch from source using Anaconda Python
    on Ubuntu 18.04, because the build process has a very high chance of failing on
    Windows. First, let's create a new Python environment called `torch-nt` for building
    and installing the nightly version with `conda create -n torch-nt python=3.7` and
    activate it with `conda activate torch-nt`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只讨论如何在 Ubuntu 18.04 上使用 Anaconda Python 从源代码构建 PyTorch，因为在 Windows 上构建过程失败的几率非常高。首先，让我们创建一个名为
    `torch-nt` 的新 Python 环境，用于构建并安装夜间版本，使用命令 `conda create -n torch-nt python=3.7`，然后使用
    `conda activate torch-nt` 激活它。
- en: 'Next, install the dependencies needed for building PyTorch:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装构建 PyTorch 所需的依赖：
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, download the source code of PyTorch with Git:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 Git 下载 PyTorch 的源代码：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, `CMAKE_PREFIX_PATH` points to the root directory of your Python environment.
    All your environments created by Anaconda are located under the `~/anaconda3/envs`
    folder.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`CMAKE_PREFIX_PATH` 指向你的 Python 环境的根目录。所有由 Anaconda 创建的环境都位于 `~/anaconda3/envs`
    文件夹下。
- en: Wait a moment for it to finish. When it's done, run `python` in the Terminal,
    type in `import torch`, and press Enter. If no error pops up, it means that PyTorch
    has been successfully built and installed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 等待一会儿直到完成。当完成时，在终端中运行 `python`，输入 `import torch` 并按回车。如果没有错误弹出，说明 PyTorch 已成功构建并安装。
- en: Do you remember, do not run `import torch` under the same directory you build
    PyTorch from, because Python will try to pick up the Torch library from the source
    files, instead of the installed package.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你记得吗？不要在构建 PyTorch 的同一目录下运行 `import torch`，因为 Python 会尝试从源代码文件中加载 Torch 库，而不是加载已安装的包。
- en: Evaluating your PyTorch installation
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估你的 PyTorch 安装
- en: From now on, we will use the Anaconda Python environment called **torch** we
    previously created as the default Python environment in this book. We will also
    omit the (torch) indicator in front of the scripts. Also, by default, all of the
    code in this book is written for Python 3 (specifically, Python 3.7). If you are
    looking for Python 2 implementations, you might want to look at 3to2 ([https://pypi.org/project/3to2](https://pypi.org/project/3to2)).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们将使用之前创建的名为 **torch** 的 Anaconda Python 环境作为本书的默认 Python 环境。我们还将省略脚本前的（torch）指示符。此外，本书中的所有代码默认都为
    Python 3（特别是 Python 3.7）。如果你在寻找 Python 2 的实现，你可以查看 3to2（[https://pypi.org/project/3to2](https://pypi.org/project/3to2)）。
- en: 'Let''s write a short snippet for matrix multiplication using PyTorch. Create
    a Python source code file named `pytorch_test.py` and copy the following lines
    into this file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个使用 PyTorch 进行矩阵乘法的简短代码片段。创建一个名为 `pytorch_test.py` 的 Python 源代码文件，并将以下代码复制到该文件中：
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Open the Terminal and run this snippet:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行以下代码段：
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output may look like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能如下所示：
- en: '[PRE29]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The last line is totally random, so don't worry if you get a different result.
    The code is also available under the `pytorch_test` directory located in the code
    repository for this chapter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行完全是随机的，所以如果你得到不同的结果，不用担心。代码也可以在本章代码库中的`pytorch_test`目录下找到。
- en: You can always use the jit or torchhub examples in previous sections to evaluate
    the installation of PyTorch. Also, feel free to check out the official examples
    at [https://github.com/pytorch/examples](https://github.com/pytorch/examples).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时使用前面章节中的 jit 或 torchhub 示例来验证 PyTorch 的安装。也可以随时查看官方示例：[https://github.com/pytorch/examples](https://github.com/pytorch/examples)。
- en: Remember the simple GAN we implemented with NumPy in [Chapter 1](66a945c3-9fd3-4d27-a6ec-b47d2e299e84.xhtml), *Generative
    Adversarial Networks Fundamentals*? Now that you have your PyTorch up and ready,
    you can think about how you would implement it with PyTorch.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在[第1章](66a945c3-9fd3-4d27-a6ec-b47d2e299e84.xhtml)中使用 NumPy 实现的简单 GAN 吗？现在你已经安装并配置好了
    PyTorch，可以考虑如何用 PyTorch 来实现它。
- en: 'Bonus: setting up VS Code for Python coding'
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奖励：为 Python 编程配置 VS Code
- en: '**VS Code** is a lightweight, open source code editor developed by Microsoft.
    It has built-in syntax highlighting, autocompleting, debugging, Git management,
    and it has more than 10,000 extensions developed by the community. It supports Windows,
    macOS, and Linux, and it is the most popular development tool among software developers,
    according to a StackOverflow survey: [https://insights.stackoverflow.com/survey/2018/#technology-most-popular-development-environments](https://insights.stackoverflow.com/survey/2018/#technology-most-popular-development-environments).
    If you mainly work on your own machine for learning GANs with this book, we highly
    recommend you use VS Code for PyTorch development.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**VS Code** 是微软开发的轻量级开源代码编辑器。它具有内置的语法高亮、自动补全、调试、Git 管理功能，并且拥有超过 10,000 个社区开发的扩展。它支持
    Windows、macOS 和 Linux，根据 StackOverflow 的一项调查，它是软件开发人员中最受欢迎的开发工具：[https://insights.stackoverflow.com/survey/2018/#technology-most-popular-development-environments](https://insights.stackoverflow.com/survey/2018/#technology-most-popular-development-environments)。如果你主要在自己的机器上使用本书学习
    GAN，我们强烈建议你使用 VS Code 进行 PyTorch 开发。'
- en: If you often work remotely, which means that you have to write Python code locally
    and run that code on a remote server, you may consider using PyCharm Professional
    Edition ([https://www.jetbrains.com/pycharm](https://www.jetbrains.com/pycharm))
    for this purpose. It has a more mature remote development functionality than free
    VS Code extensions have to offer.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常进行远程工作，这意味着你需要在本地编写 Python 代码并在远程服务器上运行这些代码，你可以考虑使用 PyCharm 专业版（[https://www.jetbrains.com/pycharm](https://www.jetbrains.com/pycharm)）来完成这个任务。它提供的远程开发功能比免费的
    VS Code 插件更加成熟。
- en: Configuring VS Code for Python development
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Python 开发配置 VS Code
- en: Essentially, you only need the Python extension *(*`ms-python.python`*)* for
    Python programming in VS Code.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，你只需要安装 Python 扩展 *（`ms-python.python`）* 来进行 VS Code 中的 Python 编程。
- en: 'On Windows 10, click File | Preferences | Settings, click the {} button (Open
    Settings (JSON)) on the upper right, and type in the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 上，点击 文件 | 首选项 | 设置，点击右上角的 {} 按钮（打开设置（JSON）），然后输入以下内容：
- en: '[PRE30]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'On Ubuntu 18.04, click File |Preferences | Settings, click the {} button (Open
    Settings (JSON)) on the upper right, and type in the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 18.04 上，点击 文件 | 首选项 | 设置，点击右上角的 {} 按钮（打开设置（JSON）），然后输入以下内容：
- en: '[PRE31]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now, VS Code will automatically recognize it as an Anaconda Python environment
    and you are ready to write Python code with it!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，VS Code将自动识别它为一个Anaconda Python环境，你可以开始使用它来编写Python代码了！
- en: Recommended VS Code extensions
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐的VS Code扩展
- en: Here are some VS Code extensions that I personally find useful in Python development.
    I'm sure they will make your work a lot easier as well. Many thanks to their creators!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我个人认为在Python开发中非常有用的VS Code扩展。我相信它们也能让你的工作变得更轻松。非常感谢它们的创造者！
- en: '**Bracket Pair Colorizer** ([coenraads.bracket-pair-colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)):
    This matches each pair of brackets with different colors, which allows you to
    easily recognize them.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bracket Pair Colorizer** ([coenraads.bracket-pair-colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)):
    这个扩展为每一对括号匹配不同的颜色，让你可以轻松识别它们。'
- en: '**Code Runner** ([formulahendry.code-runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)):
    This allows you to run Python (and many other languages'') code with a click of
    the button. However, we don''t recommend you use it to run the training snippets
    of neural networks because the logging messages can be rather long and some messages
    might go missing in VS Code.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Code Runner** ([formulahendry.code-runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)):
    这个扩展允许你通过点击按钮运行Python（以及其他许多语言）的代码。然而，我们不建议你用它来运行神经网络的训练代码，因为日志信息可能会非常长，一些信息可能会在VS
    Code中丢失。'
- en: '**GitLens - Git supercharged** ([eamodio.gitlens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)):
    This is a powerful tool if you rely on Git to manage your source code. For example,
    it shows Git history on each line you''re currently looking at in the editor,
    shows all the local and remote changes in a tree structure, and so on.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLens - Git supercharged** ([eamodio.gitlens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)):
    如果你依赖Git来管理源代码，这是一个强大的工具。例如，它会在你当前查看的每一行显示Git历史记录，显示本地和远程的所有变更，采用树状结构展示等等。'
- en: '**indent-switcher** ([ephoton.indent-switcher](https://marketplace.visualstudio.com/items?itemName=ephoton.indent-switcher)):
    Everyone''s programming habits are different. Some like two spaces as indentation,
    and some like four spaces. You can switch between two-space and four-space indentation
    with this extension.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**indent-switcher** ([ephoton.indent-switcher](https://marketplace.visualstudio.com/items?itemName=ephoton.indent-switcher)):
    每个人的编程习惯不同。有些人喜欢使用两个空格作为缩进，而有些人喜欢四个空格。你可以通过这个扩展在两空格和四空格缩进之间切换。'
- en: '**Partial Diff** ([ryu1kn.partial-diff](https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff)):
    This allows you to compare two code snippets across different files.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Partial Diff** ([ryu1kn.partial-diff](https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff)):
    这个扩展允许你在不同文件中比较两个代码片段。'
- en: '**Path Intellisense** ([christian-kohler.path-intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)):
    This extension autocompletes filenames in your code.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Path Intellisense** ([christian-kohler.path-intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)):
    这个扩展会自动完成代码中的文件名。'
- en: '**Search - Open All Results** ([fabiospampinato.vscode-search-open-all-results](https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-search-open-all-results)):
    This supports searching keywords across multiple source files.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Search - Open All Results** ([fabiospampinato.vscode-search-open-all-results](https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-search-open-all-results)):
    这个扩展支持跨多个源文件搜索关键词。'
- en: '**Settings Sync** ([shan.code-settings-sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync)):
    This saves the installed extensions and user settings to a Gist file and recovers
    from that file. It can be very useful if you work on multiple machines and systems.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Settings Sync** ([shan.code-settings-sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync)):
    这个扩展将已安装的扩展和用户设置保存到一个Gist文件，并可以从该文件恢复。如果你在多台机器和系统上工作，这个工具非常有用。'
- en: References and useful reading list
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料和有用的阅读列表
- en: Udacity India. (2018, Mar 8). *Why Python is the most popular language used
    for Machine Learning*. Retrieved from [https://medium.com/@UdacityINDIA/why-use-python-for-machine-learning-e4b0b4457a77](https://medium.com/@UdacityINDIA/why-use-python-for-machine-learning-e4b0b4457a77).
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Udacity India. (2018, Mar 8). *为什么Python是机器学习中最流行的语言*。取自[https://medium.com/@UdacityINDIA/why-use-python-for-machine-learning-e4b0b4457a77](https://medium.com/@UdacityINDIA/why-use-python-for-machine-learning-e4b0b4457a77)。
- en: 'S Bhutani. (2018, Oct 7). *PyTorch 1.0 - A brief summary of the PTDC ’18: PyTorch
    1.0 Preview and Promise*. Retrieved from [https://hackernoon.com/pytorch-1-0-468332ba5163](https://hackernoon.com/pytorch-1-0-468332ba5163).'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: S Bhutani. (2018年10月7日). *PyTorch 1.0 - PTDC '18 概要：PyTorch 1.0 预览与承诺*. 来源：[https://hackernoon.com/pytorch-1-0-468332ba5163](https://hackernoon.com/pytorch-1-0-468332ba5163).
- en: C Perone. (2018, Oct 2). *PyTorch 1.0 tracing JIT and LibTorch C++ API to integrate
    PyTorch into NodeJS*. Retrieved from [http://blog.christianperone.com/2018/10/pytorch-1-0-tracing-jit-and-libtorch-c-api-to-integrate-pytorch-into-nodejs](http://blog.christianperone.com/2018/10/pytorch-1-0-tracing-jit-and-libtorch-c-api-to-integrate-pytorch-into-nodejs).
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C Perone. (2018年10月2日). *PyTorch 1.0 跟踪 JIT 和 LibTorch C++ API 以将 PyTorch 集成到
    NodeJS 中*. 来源：[http://blog.christianperone.com/2018/10/pytorch-1-0-tracing-jit-and-libtorch-c-api-to-integrate-pytorch-into-nodejs](http://blog.christianperone.com/2018/10/pytorch-1-0-tracing-jit-and-libtorch-c-api-to-integrate-pytorch-into-nodejs).
- en: 'T Wolf. (2018, Oct 15). *Training Neural Nets on Larger Batches: Practical
    Tips for 1-GPU, Multi-GPU and Distributed setups*. Retrieved from [https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255](https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255).'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: T Wolf. (2018年10月15日). *在更大的批量上训练神经网络：1-GPU、Multi-GPU 和分布式设置的实用技巧*. 来源：[https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255](https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255).
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Wow! That was a lot of work and information. Take a minute, grab a cup of coffee
    or tea, and come back. I'll wait.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！那真是做了很多工作和学习了大量信息。花点时间，拿杯咖啡或茶，休息一下，再回来。我等你。
- en: Let's look at all the things we've done.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们做了哪些工作。
- en: We have made sure that we are up to date with our Python installation, installed
    CUDA (assuming we have an NVIDIA GPU graphics card) and installed PyTorch. If
    you are anything like me, you are *chomping at the bit* to get going and do some
    programming.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确保了 Python 安装是最新的，安装了 CUDA（假设我们有一张 NVIDIA GPU 显卡）并安装了 PyTorch。如果你和我一样，你一定是*急不可待*想开始编程了。
- en: However, we need to get some more basics defined before we can really be productive,
    which is our goal. In the next chapter, we will go through some of the basics.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们真正提高生产力之前，我们需要先定义一些基本概念，这也是我们的目标。在下一章中，我们将一起回顾一些基础知识。
