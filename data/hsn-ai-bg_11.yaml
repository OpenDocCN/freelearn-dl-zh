- en: Deep Learning for Finance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融深度学习
- en: Deep learning is one of the most exciting new technologies being used in the
    financial services industry, and when used correctly, can improve investment returns. While
    tasks such as computer vision and **natural language processing** (**NLP**) are
    well-researched areas, the use of **Artificial Intelligence** (**AI**) techniques
    in financial services is still growing. It's important to note that some of the
    most advanced, lucrative deep learning techniques in AI are not published, nor
    will they ever be. The lucrative nature of the financial services space necessitates
    guarding advanced algorithms and measures, and so in this chapter we will focus
    on principles.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习是金融服务行业中最令人兴奋的新兴技术之一，正确应用时可以提高投资回报。虽然计算机视觉和**自然语言处理** (**NLP**)等任务已经有了充分的研究，但**人工智能**
    (**AI**) 技术在金融服务中的应用仍在不断发展。需要注意的是，一些最先进、最具盈利性的深度学习技术在人工智能领域并未公开，且未来也不会公开。金融服务领域的高盈利性决定了必须保护先进的算法和措施，因此在本章中，我们将重点讨论原则。
- en: The application of AI in the financial services industry is nuanced; ...
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能在金融服务行业中的应用具有复杂性；...
- en: Requirements
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需工具
- en: As usual, we will be utilizing Python 3 for our analysis. Python is an excellent
    choice for quantitative trading applications that have a frequency that's greater
    than a few seconds. For high-frequency applications, it is recommended that you
    use a mid-level language such as Java or C++.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，我们将使用 Python 3 进行分析。Python 是量化交易应用的优秀选择，尤其适用于频率高于几秒钟的场景。对于高频应用，建议使用 Java
    或 C++ 等中级语言。
- en: 'In this chapter, we will be using finance-specific Python libraries on top
    of our standard deep learning stack:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在标准深度学习技术栈之上使用专门的金融 Python 库：
- en: Zipline—An algorithmic trading library in Python. It is currently used as the
    backtesting package for the quantitative trading website Quantopian ([https://www.quantopian.com](https://www.quantopian.com)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Zipline—一个基于 Python 的算法交易库。目前它被用作量化交易网站 Quantopian ([https://www.quantopian.com](https://www.quantopian.com))
    的回测工具。
- en: Introduction to AI in finance
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工智能在金融中的应用简介
- en: Despite being one of the most computationally intensive fields, financial services
    is full of heuristics. The application of advanced AI techniques is tenuous at
    best; many firms simply don't engage in strategies that allow for easy adoption
    of AI. Talent wars for top quantitative talent with Silicon Valley has also made
    the problem worse. You may be saying to yourself *don't I need to have a finance
    background to work with this data? *It's worth noting that two of the world's
    top hedge funds were founded by teams that participated in the famous Netflix
    Machine Learning challenge. While there is incredible benefit in studying the
    techniques of algorithmic trading, you can get started with your knowledge of
    ANNs ...
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管金融服务是计算密集型领域之一，但它充满了启发式方法。高级 AI 技术的应用充其量也只是脆弱的；许多公司根本没有采用能够轻松应用 AI 的策略。与硅谷争夺顶尖量化人才的竞争也让这个问题变得更加严重。你可能会自问，*“我难道不需要有金融背景才能处理这些数据吗？”*值得注意的是，全球两大顶级对冲基金是由参与过著名
    Netflix 机器学习挑战赛的团队创办的。虽然研究算法交易技术有极大的好处，但你可以凭借对人工神经网络（ANNs）的了解来开始。
- en: Deep learning in trading
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易中的深度学习
- en: '**Trading** is the buying and selling of items in the financial market; in
    financial parlance, we call these items **derivatives**. Trades can be short-term
    (inter-day), medium-term (several days), or long-term (several weeks or more). According
    to experts at JP Morgan Chase, one of the largest banks in the world, AI applications
    are proven to be better suited than humans at short and medium-term trading strategies.
    In this section, we''ll explore some fundamental strategies for developing intelligent
    trading algorithms for short and medium- term trades. But first, let''s cover
    some basic concepts.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易**是金融市场中买卖物品的行为；在金融术语中，我们称这些物品为**衍生品**。交易可以是短期的（当天内）、中期的（几天）或长期的（几周或更长）。根据全球最大银行之一摩根大通的专家，AI
    应用在短期和中期交易策略上比人类更有效。在本节中，我们将探讨一些开发智能交易算法的基本策略，适用于短期和中期交易。但首先，让我们介绍一些基本概念。'
- en: Trading strategies seek to exploit market inefficienciesin order to make profit. One
    of the core policies in algorithmic training is called **alpha**,which is a measure
    of performance. Alpha measures the active return on a specific investment by matching
    a stock against an index. The difference between the performance of an individual
    investment and its matched index is the investment's alpha. In building networks
    for trading strategies, we want our networks to spot market inefficiencies that
    generate the most alpha for us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 交易策略试图利用市场低效来获利。算法训练中的一个核心策略被称为**阿尔法**，它是一种衡量业绩的指标。阿尔法通过将股票与一个指数进行对比，来衡量特定投资的主动回报。个别投资的表现与其匹配的指数之间的差异就是投资的阿尔法。在构建交易策略的网络时，我们希望我们的网络能够识别出那些为我们产生最大阿尔法的市场低效。
- en: 'We can generally break traditional stock analysis down into two categories:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常可以将传统的股票分析分为两类：
- en: '**Fundamental analysis** looks at the underlying factors that could influence
    a financial derivative, such as the general financial health of a company'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本面分析**则着眼于可能影响金融衍生品的基础因素，例如公司的一般财务健康状况。'
- en: '**Technical analysis** looks at the actual performance of the financial derivative
    in a more mathematical sense, attempting to predict price movements based on patterns
    in the asset''s price movements'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术分析**从更数学的角度审视金融衍生品的实际表现，试图通过资产价格变动中的模式来预测价格的走势。'
- en: 'In both of these cases, analysis is typically done with human reasoning, whereas
    deep learning comes into the world of **quantitative analysis**, specifically
    in what is known as **algorithmic trading**. Broadly defined, algorithmic trading
    is just as it sounds: trading that is conducted by a coded algorithm and not a
    physical human. Algorithmic trading strategies are validated by a process called
    **backtesting**, which runs the algorithm on historical data to determine whether
    it will perform well in the market.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，分析通常依赖于人工推理，而深度学习则进入了**量化分析**的领域，尤其是在所谓的**算法交易**中。广义上讲，算法交易就是其字面意义：由编码算法而非物理人类进行的交易。算法交易策略通过称为**回测**的过程进行验证，该过程将算法运行在历史数据上，以确定其是否能够在市场中表现良好。
- en: 'Algorithmic trading is used in several different types of areas:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易应用于多个不同的领域：
- en: '**Buy**-**side firms**: Firms utilize algorithmic trading to manage their mid-to
    long-term portfolio investments'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**买方**-**公司**：公司利用算法交易来管理其中长期投资组合。'
- en: '**Sell**-**side firms**: Firms use high-frequency algorithmic trading to take
    advantage of market opportunities and move markets themselves'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卖方**-**公司**：公司利用高频算法交易来利用市场机会，并且推动市场本身的变化。'
- en: '**Systematic traders**: These individuals and firms try to match a long-term
    investment with a short-term investment of highly correlated financial derivatives'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统化交易者**：这些个人和公司尝试将长期投资与短期投资高度相关的金融衍生品匹配。'
- en: What's shared among all three of these market entities is that algorithmic trading
    provides a more stable and systematic approach to active investing, which is something
    that a human instinct could not provide.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种市场主体的共同点是，算法交易提供了一种比人类直觉更稳定、系统化的主动投资方式。
- en: Another strategy relies on technical indicators, which are mathematical calculations
    based on the historical analysis of data. Most trading algorithms are used in
    what is known as **high**-**frequency trading** (**HFT**), which attempts to exploit
    market inefficiencies by conducting large numbers of extremely fast trades across
    markets. Unless you have access to some seriously fast computer hardware, it's
    unlikely for an individual to compete in this arena. Instead, we're going to build
    some fundamental algorithms in TensorFlow for non-HFT algorithmic trading.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种策略依赖于技术指标，这些指标是基于数据历史分析的数学计算。大多数交易算法用于所谓的**高频**交易（**HFT**），它试图通过在各市场中进行大量极其快速的交易来利用市场低效。除非你拥有一些极为快速的计算机硬件，否则个人很难在这个领域竞争。相反，我们将用TensorFlow构建一些基本的算法用于非高频算法交易。
- en: Building a trading platform
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建交易平台
- en: Before we dive into any particular strategies, let's get started with building
    the basis for our trading platform. In this section, we'll build out the code
    that will handle data ingestion and trading, and then we'll dive into two specific
    strategies.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入任何特定策略之前，让我们开始构建交易平台的基础。在这一部分，我们将构建处理数据输入和交易的代码，之后再深入研究两个具体策略。
- en: Basic trading functions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本交易功能
- en: 'Let''s start with the fundamental actions our platform could take on the market;
    we need it to be able to buy, sell, or hold stock:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从平台可以进行的基本操作开始；我们需要它能够买入、卖出或持有股票：
- en: 'First, let''s start with some imports:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从一些导入开始：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To make things easier on us down the road, we''re going to wrap these functions
    inside a single class that we''ll call `TradingPosition`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将来方便起见，我们将把这些函数包装在一个名为`TradingPosition`的类中：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's break the input variables down. The first variable that we are initializing
    is `code`, which we'll be using later as a status code for the action we are taking
    to buy, sell, or hold. We then create the variables for the price of the security,
    the amount of the security (that is, how much stock), and the current value of
    the security.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们拆解输入变量。我们初始化的第一个变量是`code`，稍后我们将使用它作为执行买入、卖出或持有操作的状态码。接着，我们创建表示证券价格、证券数量（即股票数量）和证券当前价值的变量。
- en: 'Now that we have our variables, we can start coding our trading actions. We''ll
    want to create a `status` function, which tracks the movement of prices in the
    market. For simplicity, we''ll call this function `TradeStatus`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了变量，我们可以开始编写交易操作的代码了。我们需要创建一个`status`函数，用来追踪市场中价格的变化。为了简化，我们将这个函数命名为`TradeStatus`：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, let''s create a function to `buy a stock`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个`买入股票`的函数：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, our function takes a `buy price`, the `amount`, and the `next price`
    in the series. We calculate the `buy price`, update our trading volume, and return
    a `trade status`. Next, let''s move on to `sell a stock`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们的函数接受一个`买入价格`、`数量`以及序列中的`下一个价格`。我们计算`买入价格`，更新我们的交易量，并返回一个`交易状态`。接下来，让我们继续到`卖出股票`：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In terms of the buy function, we feed in the `sell price` and the volume, update
    the class''s internal variables, and return a status. Lastly, we''ll just create
    a simple function to hold a stock, which more or less gives us a status of what
    the current price of that stock is:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在买入函数方面，我们输入`卖出价格`和交易量，更新类的内部变量，并返回一个状态。最后，我们将创建一个简单的函数来持有股票，它大致上会告诉我们当前股票的价格状态：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, let's move on to creating a class that will represent our artificial trader.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建一个表示人工交易者的类。
- en: Creating an artificial trader
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建人工交易者
- en: 'While utilizing algorithms to inform trading decisions is the definition of
    algorithmic trading, this is not necessarily automated trading. For that, we need
    to create an artificial trading agent that will execute our strategies for us:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用算法来指导交易决策是算法交易的定义，但这不一定是自动化交易。为了实现自动化交易，我们需要创建一个人工交易代理，它将代表我们执行交易策略：
- en: 'We''ll call this class `Trader` and initialize all of the variables that we''ll
    need for the trader algorithm:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将这个类命名为`Trader`，并初始化执行交易算法所需的所有变量：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Managing market data
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理市场数据
- en: 'As with any machine learning algorithm, selecting features for market prediction
    algorithms is critical, and can lead to the success or failure of the algorithm''s
    strategy. To reduce price curve data into its most fundamental parts, we can use
    a dimensionality reduction algorithm such as PCA, or even embed stock information
    to try to capture the most salient latent features. As we have learned, deep learning
    can help us overcome some of these selection issues, as ANNs implicitly conduct
    feature selection during the training process:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何机器学习算法一样，选择市场预测算法的特征至关重要，这可能决定算法策略的成功与否。为了将价格曲线数据简化到最基本的部分，我们可以使用降维算法，比如PCA，甚至可以嵌入股票信息，尝试捕捉最重要的潜在特征。正如我们所学，深度学习可以帮助我们克服这些选择问题，因为神经网络在训练过程中隐式地进行特征选择：
- en: 'We''ll call our new class `MarketHandler` and initialize all of the parameters
    and data that will be needed to handle our different trading strategies:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个新的类`MarketHandler`，并初始化所有处理不同交易策略所需的参数和数据：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We''ll also need to initialize a great deal of data handling processes to correctly
    manipulate our data for analysis:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要初始化大量的数据处理过程，以便正确操作数据进行分析：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we initialize the `env_data()` method and call the `self` class:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们初始化 `env_data()` 方法并调用 `self` 类：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Lastly, let''s initialize the data handling function that we just created:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们初始化刚才创建的数据处理函数：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, let's dive into building the models for our platform.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们开始构建我们平台的模型。
- en: Price prediction utilizing LSTMs
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LSTM 进行价格预测
- en: 'Let''s start by walking through a supervised learning example utilizing an
    LSTM to predict where the price of a given stock is going, based on its past performance.
    As we learned in previous chapters, LSTMs and **Recurrent Neural Networks **(**RNN**)
    in general are superior at modeling and prediction for series data. This model
    will utilize the trading platform structure that we created previously:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个有监督学习的例子来开始，这个例子使用 LSTM 来预测给定股票的价格走势，基于其过去的表现。正如我们在之前的章节中所学，LSTM 和**循环神经网络**（**RNN**）在处理和预测序列数据时表现优越。这个模型将使用我们之前创建的交易平台结构：
- en: 'Let''s start with our imports:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从导入库开始：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s create a class that will contain all of the code needed to run the RNN,
    which we''ll call `TradingRNN`. We''ll also initialize the necessary variables:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个包含所有运行 RNN 所需代码的类，命名为 `TradingRNN`。我们还会初始化必要的变量：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Backtesting your algorithm
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回测您的算法
- en: Backtesting is the process of testing your trading algorithm on bits of historical
    data in order to simulate its performance. While it's no guarantee that the algorithm
    will perform well in the wild, it gives us a good idea of how it will perform.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 回测是指在历史数据上测试您的交易算法，以模拟其表现。虽然不能保证算法在实际市场中表现良好，但它能为我们提供一个良好的参考，帮助我们预测其表现。
- en: In Python, we can backtest our algorithms using a library called **Zipline**.
    Zipline was created by the online trading algorithms platform Quantopian as their
    backtesting platform, and it's been open sourced to the public on GitHub. It provides
    ten years of historical stock data and a realistic trading environment in which
    you can test algorithms, including transaction costs, order delays, and slippage**.**
    Slippage is the price difference that can occur between the expected price at
    which a trade happens and the actual price it's executed at. To get started with
    Zipline in Python, we simply need to run `pip install zipline` on the command
    line.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们可以使用一个叫做**Zipline**的库来回测我们的算法。Zipline 是由在线交易算法平台 Quantopian 创建的回测平台，后来在
    GitHub 上开源，供公众使用。它提供了十年的历史股票数据，并提供一个现实的交易环境，您可以在其中测试算法，包括交易成本、订单延迟和**滑点**。滑点是指交易发生时预期价格与实际执行价格之间的差价。要在
    Python 中使用 Zipline，我们只需在命令行中运行`pip install zipline`。
- en: 'Any time we use Zipline, we must define two functions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每次使用 Zipline 时，我们都必须定义两个函数：
- en: '`initialize(context)`: This is called by Zipline before it starts running your
    algorithm. The context variable contains all of the global variables needed in
    your algorithm. Initialize is very similar to how we initialize variables in TensorFlow
    before running them through a session.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initialize(context)`：在 Zipline 开始运行您的算法之前会调用此函数。context 变量包含了您算法中所需的所有全局变量。Initialize
    函数非常类似于我们在 TensorFlow 中初始化变量的方式，在运行会话之前进行初始化。'
- en: '`handle_data(context, data)`: This function does exactly what it says: it passes
    the open, high, low, and close stock market data to your algorithm, along with
    the necessary context variables.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handle_data(context, data)`：这个函数做的正是它所说的：它将开盘、最高、最低和收盘的股市数据传递给您的算法，以及所需的上下文变量。'
- en: Event-driven trading platforms
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动交易平台
- en: Event-driven investing is an investing strategy that focuses on socioeconomic
    factors that might influence the stock market's movements, particularly right
    before a financial event such as an earnings call or merger. This strategy is
    typically used by larger funds, as they frequently have access to information
    not entirely open to the public and because it requires a large amount of expertise
    in analyzing these events correctly.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动投资是一种投资策略，重点关注可能影响股市走势的社会经济因素，尤其是在财报电话会议或并购等金融事件发生前。这种策略通常被大型基金采用，因为它们常常能获取一些并非完全公开的信息，而且需要在正确分析这些事件方面具备大量的专业知识。
- en: To do this, we'll extract events from raw text into tuples that describe the
    event. For instance, if we said that *Google* buys *Facebook*, the tuple would
    be (*Actor = Google, Action = buys, Object = Facebook, Time = January 1 2018*).
    These tuples can help us boil down events into their ...
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将从原始文本中提取事件并将其转化为元组，描述该事件。例如，如果我们说*Google*收购*Facebook*，则元组将是（*Actor = Google,
    Action = buys, Object = Facebook, Time = January 1 2018*）。这些元组可以帮助我们将事件简化为...
- en: Gathering stock price data
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集股票价格数据
- en: The majority of real-time market data comes though paid services; think Bloomberg
    terminals or a brokerage firm's website. Currently, the only non-paid real-time
    data API for financial markets is Alpha Vantage, which is maintained by a conglomerate
    of business and academic interests. You can install it by running `pip install
    alpha_vantage` on your command line. You can sign up for a free API key on Alpha
    Vantage's website.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数实时市场数据通过付费服务提供；比如Bloomberg终端或券商网站。目前，唯一一个不收费的实时金融市场数据API是Alpha Vantage，它由商业和学术界联合维护。你可以通过在命令行中运行`pip
    install alpha_vantage`来安装它。你可以在Alpha Vantage网站上注册一个免费的API密钥。
- en: 'Once you have your key, you can easily query the `api` with the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了API密钥，就可以使用以下方式轻松查询`api`：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Generating word embeddings
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成词嵌入
- en: 'For our embedding scheme, we are going to be using the implementation of GloVe
    from the previous chapter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的嵌入方案，我们将使用上一章中的GloVe实现：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Neural Tensor Networks for event embeddings
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于事件嵌入的神经张量网络
- en: A **Neural Tensor Network** (**NTN**) is a new form of neural network that works
    like a standard feed-forward network, only it contains something known as a **tensor
    layer** instead of standard hidden layers. The network was originally developed
    as a means of completing knowledge bases by connecting unconnected entities. For
    instance, if we had the entities Google and YouTube, the network would help connect
    the two entities so that Google -> Owns -> YouTube. It passes different relationship
    pairs through the network instead of through a singular vector, and it does this
    by passing them as a tensor. Each slice of that tensor represents a different
    variation of a relationship that two entities can have.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**神经张量网络**（**NTN**）是一种新的神经网络形式，它的工作方式类似于标准的前馈网络，但它包含一个被称为**张量层**的层，而不是标准的隐藏层。该网络最初是作为通过连接未连接的实体来完善知识库的手段开发的。例如，如果我们有实体Google和YouTube，网络将帮助将这两个实体连接起来，使得Google
    -> 拥有 -> YouTube。它通过将不同的关系对传递通过网络而不是通过单一的向量来工作，且通过将它们作为张量传递来实现这一点。该张量的每个切片代表两实体之间关系的不同变化。'
- en: 'In the realm of event-driven trading, we''re interested in NTNs because of
    their ability to relate entities to each other. For us, that means learning the
    entity event pairs that we created in the first part of this section:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件驱动交易领域，我们之所以对NTN感兴趣，是因为它能够将实体彼此关联。对我们来说，这意味着学习我们在本节第一部分创建的实体事件对：
- en: 'Let''s start by building our NTN with our core network, which we''ll contain
    in a function called `NTN`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从构建核心网络开始，并将其包含在一个名为`NTN`的函数中：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Still within the `NTN` function, we''ll loop over our embeddings and start
    to generate relationship embeddings from them:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`NTN`函数内，我们将遍历我们的嵌入并开始从中生成关系嵌入：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lastly, we''ll run the relationship through a nonlinearity and output them:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将通过非线性操作处理关系，并输出它们：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Lastly, let''s return all of our relationships that are embedding `predictions`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们返回所有包含`predictions`的嵌入关系：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, let''s define our `loss` function for the network. We''ll manually build
    out our `loss` function from TensorFlow''s native operations:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义网络的`loss`函数。我们将从TensorFlow的原生操作手动构建出我们的`loss`函数：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We''ll define a training algorithm that simply returns the minimized `loss`
    function utilizing TensorFlow''s built-in functions:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义一个训练算法，该算法仅返回最小化的`loss`函数，利用TensorFlow的内置函数：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we''ll create a short function to evaluate the performance of the
    network:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个简单的函数来评估网络的性能：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next, we'll finish up our model by predicting price movements with a CNN.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过卷积神经网络（CNN）来预测价格变动，完成我们的模型。
- en: Predicting events with a convolutional neural network
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用卷积神经网络预测事件
- en: Now that we have our embedding structure, it's time to predict off of that structure
    with a CNN. When you typically think of a CNN, and the work that we have completed
    on them, you're probably thinking of computer vision tasks such as recognizing
    an object in an image. Although this is what they were designed for, CNNs can
    also be great at detecting features in text.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了嵌入结构，是时候用CNN进行预测了。当你通常想到CNN以及我们在其上完成的工作时，你可能会想到计算机视觉任务，比如识别图像中的物体。尽管CNN是为此设计的，但它们在文本特征检测方面也表现出色。
- en: When we use CNNs in NLP, we replace the standard input of pixels with word embeddings.
    While in typical computer vision tasks you utilize the CNNs filters over small
    patches of the image, for NLP tasks, we use the same sliding window over the rows
    of a matrix of embeddings. The width of the sliding window, therefore, becomes
    ...
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在NLP中使用CNN时，我们将标准的像素输入替换为词嵌入。在典型的计算机视觉任务中，您使用CNN的过滤器对图像的小块进行处理，而在NLP任务中，我们对嵌入矩阵的行使用相同的滑动窗口。因此，滑动窗口的宽度就变成了……
- en: Deep learning in asset management
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产管理中的深度学习
- en: In financial services, a portfolio is a range of investments that are held by
    a person or organization. To achieve the best return possible (as anyone would
    want to!), portfolios are optimized by deciding how much capital should be invested
    into certain financial assets. In portfolio optimization theory, the objective
    is to have an allocation of assets that minimize risk and maximize reward. We
    would therefore need to create an algorithm that predicts the expected risks and
    rewards for each asset so that we may find the best optimization. Traditionally,
    this work is done by a financial advisor, however, AI has been shown to outperform
    many traditional advisor-built portfolios.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融服务中，投资组合是个人或组织持有的一系列投资。为了实现最佳回报（如同任何人都希望的那样！），通过决定应该将多少资金投资于某些金融资产来优化投资组合。在投资组合优化理论中，目标是拥有一个能够最小化风险并最大化回报的资产配置。因此，我们需要创建一个算法，预测每个资产的预期风险和回报，以便找到最佳优化方案。传统上，这项工作由财务顾问完成，然而，人工智能已经被证明在许多传统顾问构建的投资组合中表现得更好。
- en: Lately, there have been several attempts to develop deep learning models for
    asset allocations. Giving credence to the fact that many of these techniques are
    not published publicly, we are going to take a look at some fundamental methods
    that we as AI scientists may use for accomplishing this task.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，出现了几种尝试开发用于资产配置的深度学习模型。考虑到许多这些技术并未公开发布，我们将看看一些我们作为AI科学家可能会使用的基本方法，以完成这项任务。
- en: Our goal will be to train a model on an index of stocks, and see if we can outperform
    that index by at least 1%. We are going to effectively build an autoencoder to
    encode latent market information, and then use the decoder to construct an optimal
    portfolio. As we are dealing with series information, we'll use an RNN for both
    our encoder and decoder. Once we have an autoencoder trained on the data, we'll
    use it as the input for a simple feed-forward network that will predict our optimal
    portfolio allocations.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是对一个股票指数进行建模，并看看我们是否能以至少1%的收益超越该指数。我们将有效地构建一个自编码器来编码潜在的市场信息，然后使用解码器来构建一个最佳投资组合。由于我们处理的是时间序列信息，我们将为编码器和解码器都使用RNN。一旦我们在数据上训练好自编码器，我们将用它作为简单前馈网络的输入，来预测我们最佳的投资组合配置。
- en: Let's walk through how we would do this in TensorFlow.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何在TensorFlow中实现这一过程。
- en: 'As usual, let''s start with our imports:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如常，我们首先导入所需的模块：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s load up our stock data:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载我们的股票数据：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s begin our modeling process by creating our `AutoEncoder`, which we will
    contain in an `AutoEncoder` class. We''ll start by initializing the primary network
    variables, like we did previously:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过创建`AutoEncoder`开始我们的建模过程，并将其包含在`AutoEncoder`类中。我们将首先初始化主要的网络变量，就像之前做的那样：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Next, we'll create the `placeholders` for the input data, *x:*
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为输入数据创建`placeholders`，*x：*
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, let''s create our encoder. We''ll create a series of LSTM cells to encode
    the series data, but we will do it in a way we haven''t seen yet: by using a handy
    function from TensorFlow called `MultiRNNCell`. This function acts as a larger
    placeholder of RNNs that we can iterate inside of so that we may dynamically create
    the amount of layers based on whatever we decide the `num_layers` parameter is:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们创建编码器。我们将创建一系列LSTM单元来编码序列数据，但我们将以一种我们尚未见过的方式来实现：使用TensorFlow中的一个便捷函数`MultiRNNCell`。这个函数充当了一个更大的RNN占位符，我们可以在其中迭代，以便根据我们设置的`num_layers`参数动态创建层的数量：
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we''ll create a layer to handle the hidden states that are generated
    by the encoder:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个层来处理由编码器生成的隐藏状态：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can then create the `decoder` layer in the same fashion that we did with
    the encoder layer:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以以与编码器层相同的方式创建`decoder`层：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Lastly, we''ll create the output layer for the network:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将为网络创建输出层：
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we have the actual model constructed, we can go ahead and set up the
    training process. We''ll use exponential decay for the learning rate, which helps
    stabilize the training process by slowly decreasing the value of the learning
    rate:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经构建了实际模型，我们可以继续设置训练过程。我们将使用指数衰减来调整学习率，这有助于通过缓慢降低学习率的值来稳定训练过程：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we can run the training process:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以运行训练过程：
- en: '[PRE31]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: After we autoencode our stock index, we'll look at the difference between each
    different stock and its corresponding autoencoder version. We'll then rank the
    stocks by how well they have been autoencoded. As the algorithm learns the most
    important information about each of the stocks, the proximity of a stock to its
    version that has been run through the autoencoder provides a measure for that
    stock against the entire potential portfolio.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在对股票指数进行自编码后，我们将查看每只不同股票与其对应的自编码器版本之间的差异。然后我们将根据股票的自编码效果对其进行排名。随着算法学习到每只股票最重要的信息，股票与其经过自编码器处理后的版本的接近程度，提供了该股票在整个潜在投资组合中的衡量标准。
- en: 'As there is no benefit in having multiple stocks contributing to the latent
    information, we will limit the selected stocks to the top ten of these stocks
    that are close to their autoencoded version:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于让多个股票共同贡献潜在信息没有益处，我们将限制所选股票为这些接近自编码版本的前十只股票：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can take a look at how the autoencoder is working as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看自编码器如何工作的方式如下：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: While we still have to choose between the available stock, our picking decisions
    are now based on the out of sample performance of these stocks, making our market
    autoencoder a novel, data-driven approach.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们仍然需要在可用的股票中做出选择，但我们的选择决策现在是基于这些股票的样本外表现，从而使得我们的市场自编码器成为一种新颖的数据驱动方法。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to apply our deep learning knowledge to the
    financial services sector. We learned the principles of trading systems, and then
    designed a trading system of our own in TensorFlow. We then looked at how we can
    create a different type of trading system, one that utilizes events surrounding
    a company to predict its stock prices. Lastly, we explored a novel technique for
    embedding the stock market and utilizing those embeddings to predict price movement.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将深度学习知识应用于金融服务行业。我们学习了交易系统的原理，然后在TensorFlow中设计了自己的交易系统。接着，我们探讨了如何创建另一种类型的交易系统，这种系统利用公司周围的事件来预测其股价。最后，我们探索了一种新颖的技术，用于嵌入股市并利用这些嵌入来预测价格变动。
- en: Financial markets can be tricky to model due to their properties, but the techniques
    that we have covered in this chapter will give you the basis to build further
    models. Remember to always backtest your algorithm before deploying it in a real-time
    environment! ...
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于金融市场具有特殊的性质，它们的建模可能会很棘手，但我们在本章中所涵盖的技术将为你提供构建进一步模型的基础。记得在将算法部署到实时环境中之前，始终进行回测！...
