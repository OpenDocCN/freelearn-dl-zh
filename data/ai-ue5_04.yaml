- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Setting Up a Navigation Mesh
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置导航网格
- en: I’m pretty confident that, by now, you are aware that a pivotal element in AI
    game development is establishing a fully functional nav mesh. This entity acts
    as the cornerstone for directing AI-controlled agents through the game world with
    accuracy and effectiveness.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我相当确信，到现在为止，你已经意识到在AI游戏开发中，一个关键要素是建立一个完全功能化的导航网格。这个实体作为基石，用于精确有效地引导AI控制的代理穿越游戏世界。
- en: In this chapter, we will begin to put this understanding into practice by initiating
    a new project. By the conclusion of the chapter, you will have hands-on experience
    in developing and refining a navigation system within your own project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始将这种理解付诸实践，通过启动一个新项目。到本章结束时，你将在自己的项目中开发和完善导航系统的实际经验。
- en: This knowledge will serve as a crucial milestone in shaping your path as an
    AI programmer, propelling you toward the creation of groundbreaking games that
    will revolutionize the gaming industry!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这项知识将成为塑造你作为AI程序员道路上的一个关键里程碑，推动你朝着创造颠覆游戏行业的突破性游戏迈进！
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Unreal Agility Arena
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Unreal敏捷竞技场
- en: Creating an AI agent
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建AI代理
- en: Setting up a basic level
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本关卡
- en: Adding navigation modifiers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加导航修改器
- en: Working with navigation link proxies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与导航链接代理一起工作
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with this chapter, you should have set up Visual Studio (or
    JetBrains Rider) with all Unreal dependencies, as explained in [*Chapter 1*](B31016_01.xhtml#_idTextAnchor015)
    , *Getting Started with AI* *Game Development* .
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，你应该已经按照[*第1章*](B31016_01.xhtml#_idTextAnchor015)中解释的，设置了Visual Studio（或JetBrains
    Rider）以及所有Unreal依赖项，*入门AI游戏开发*。
- en: 'You’ll be using some starter content that’s available in this book’s companion
    repository at [https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5](https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5)
    . Through this link, locate the section for this chapter and download the following
    **.zip** file: **Unreal Agility Arena –** **Starter Content** .'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用本书配套仓库中可用的某些入门内容，该仓库的网址为[https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5](https://github.com/PacktPublishing/Artificial-Intelligence-in-Unreal-Engine-5)。通过此链接，找到本章的相应部分，并下载以下**.zip**文件：**Unreal敏捷竞技场
    –** **入门内容**。
- en: 'If you somehow get lost while going through this chapter, in the repository,
    you will also find the up-to-date project files here: **Unreal Agility Arena –**
    **Chapter 04** **End** . Also, to fully understand this chapter, it is necessary
    to have some basic knowledge about Blueprint visual scripting while I guide you
    through the key characteristics of setting up an AI agent.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这章中迷路了，在仓库中，你还可以在这里找到最新的项目文件：**Unreal敏捷竞技场 –** **第04章** **结束**。此外，为了完全理解本章内容，在我引导你了解设置AI代理的关键特征的同时，你需要具备一些关于Blueprint视觉脚本的基本知识。
- en: Introducing Unreal Agility Arena
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Unreal敏捷竞技场
- en: 'To kick off a successful project, it’s essential to have a solid foundation.
    Imagine diving into a short novel starting like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个成功的项目，拥有坚实的基础至关重要。想象一下，你开始阅读一本短篇小说，开头是这样的：
- en: '*In a secret underground lab hidden beneath a nondescript building, an eccentric
    scientist named Dr. Markus toiled away on his latest invention: AI dummy puppets.
    These puppets were no ordinary puppets; they were equipped with advanced AI technology
    that made them capable of interacting with the environment in the most* *unexpected
    ways.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*在一个隐藏在不起眼的建筑下的秘密地下实验室中，一位名叫马克斯博士的古怪科学家在他的最新发明上辛勤工作：AI木偶。这些木偶并非普通的木偶；它们配备了先进的AI技术，使它们能够以最*
    *意想不到的方式*与环境互动。*'
- en: '*Dr. Markus was known for his quirky personality and wild ideas. He believed
    that these puppets held the key to understanding human behavior and improving
    social interactions. With his trusty sidekick, Professor Viktoria, by his side,
    he embarked on a series of* *hilarious experiments.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*马克斯博士以其古怪个性和疯狂的想法而闻名。他相信这些木偶是理解人类行为和改善社会互动的关键。在他的忠实伙伴，维多利亚教授的陪伴下，他开始了一系列*
    *令人捧腹的实验*。'
- en: Well, it looks like you’ve stumbled upon the perfect starting point for creating
    the next big hit in the video game industry, and your task is to craft mind-blowingly
    awesome AI agents that will rock the world of gaming by seamlessly interacting
    with their virtual surroundings!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来你已经找到了创建视频游戏行业下一个大热门的完美起点，你的任务是制作出令人惊叹的AI智能体，它们将通过与虚拟环境的无缝交互震撼游戏世界！
- en: Explaining the project brief
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释项目概述
- en: The project you’ll be working on will be a set of **gym** levels, where you
    will be creating different behaviors for your AI agents.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你将要工作的项目将是一组**健身房**级别，在那里你将为你的AI智能体创建不同的行为。
- en: Note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In game development, a gym typically refers to a training environment where
    developers can test and train their AI algorithms and models. This term is also
    commonly used in the context of reinforcement learning, where AI agents learn
    to play games through trial and error in simulated environments. For the purpose
    of this book, we will stick to the first definition.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏开发中，健身房通常指的是一个开发者可以测试和训练他们的AI算法和模型的训练环境。这个术语在强化学习的背景下也经常被使用，在那里AI智能体通过在模拟环境中试错来学习玩游戏。为了这本书的目的，我们将坚持第一种定义。
- en: In my personal opinion, working on a gym is one of the most entertaining parts
    of the prototyping phase of a game because you don’t need to worry a lot about
    things working perfectly; you can experiment with all sort of things, and – in
    the end – you will most probably come up with creative and unconventional solutions!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，在健身房工作是一个游戏原型阶段中最有趣的部分之一，因为你不需要过多担心事物是否完美运行；你可以尝试各种各样的事情，最终你很可能会想出富有创意和非常规的解决方案！
- en: So, to start with, I have provided a project template – called Unreal Agility
    Arena – that you will be using during the rest of this book. After downloading
    and opening it in Unreal Engine, our main focus will be on creating self-contained
    levels to experiment with the knowledge acquired thus far. This will involve addressing
    small tasks and resolving them effectively.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，我提供了一个项目模板——称为Unreal Agility Arena——你将在本书的其余部分使用它。在下载并在虚幻引擎中打开它之后，我们的主要焦点将是创建自包含的级别来实验到目前为止获得的知识。这将涉及处理小任务并有效地解决它们。
- en: Once you reach [*Chapter 7*](B31016_07.xhtml#_idTextAnchor132) , *Introducing
    Behavior Trees* , you will be ready for something more challenging, and things
    will get a bit tougher, but also – I promise you – much more engaging and interesting!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你达到[*第7章*](B31016_07.xhtml#_idTextAnchor132)，“介绍行为树”，你将准备好迎接更具挑战性的内容，事情会变得有点困难，但我也向你保证——这将更加吸引人和有趣！
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As this book is about AI game programming rather than game design, balancing
    game mechanics will not be a primary focus of gameplay. Instead, the focus will
    be on making things work effectively.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书是关于AI游戏编程而不是游戏设计，因此平衡游戏机制不会是游戏玩法的主要焦点。相反，重点将在于确保事物有效运行。
- en: The very first step involves cracking open the project and diving into the delicious
    assets I’ve served up for you. So, let’s get started!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是打开项目，深入挖掘我为你准备的丰富资源。那么，让我们开始吧！
- en: Starting the project
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始项目
- en: While the project will mainly focus on gym levels, we aim for a visually appealing,
    or – as we game developers like to say – *juicy* look and feel. I understand that
    many of you may not have a background in 3D modeling (and neither do I!). That’s
    why we will be using some fantastic assets by Kay Lousberg ( [https://kaylousberg.com/](https://kaylousberg.com/)
    ) that are available for personal and commercial purposes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个项目将主要关注健身房级别，但我们追求的是视觉上吸引人的，或者正如我们游戏开发者喜欢说的——*诱人*的外观和感觉。我明白你们中的许多人可能没有3D建模的背景（我也没有！）。这就是为什么我们将使用凯·卢斯伯格（[https://kaylousberg.com/](https://kaylousberg.com/)）提供的某些出色的资产，这些资产可用于个人和商业用途。
- en: '![Figure 4.1 – Kay Lousberg’s website](img/B31016_04_1.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 凯·卢斯伯格的网站](img/B31016_04_1.jpg)'
- en: Figure 4.1 – Kay Lousberg’s website
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 凯·卢斯伯格的网站
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In this project, I have mainly used the **Prototypes Bits Extra** package that
    is freely distributable once you have bought a license. If you are thinking about
    using the models for a commercial project, please consider buying a license from
    Kay’s website as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我主要使用了**Prototypes Bits Extra**包，一旦购买了许可证，这个包就可以免费分发。如果你打算将模型用于商业项目，请考虑也从凯的网站上购买许可证。
- en: After downloading the file from the link provided at the start of this chapter,
    unzip it and open the project by double-clicking the **UnrealAgilityArena.uproject**
    file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头提供的链接中下载文件后，解压它，通过双击 **UnrealAgilityArena.uproject** 文件来打开项目。
- en: 'Once the project is open, please check what’s inside the **Content** folder.
    You will see these subfolders:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目打开，请检查 **Content** 文件夹中的内容。您将看到以下子文件夹：
- en: A **_GENERATED** folder that has some additional models I have created with
    the Unreal Engine **modeling tools**
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含我用 Unreal Engine **建模工具** 创建的一些额外模型的 **_GENERATED** 文件夹
- en: A **KayKit** folder that includes all models from Kay
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含 Kay 所有模型的 **KayKit** 文件夹
- en: A **Maps** folder that includes some pre-made levels that are ready for use
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含一些预制关卡，这些关卡已准备好使用的 **Maps** 文件夹
- en: A **Materials** folder that contains some materials needed by the project assets
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含项目资产所需的某些材质的 **Materials** 文件夹
- en: A **Textures** folder that contains some textures used by the project materials
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含项目材料使用的某些纹理的 **Textures** 文件夹
- en: A **Vfx** folder that contains some Niagara effects that we will be using later
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含我们将要使用的某些 Niagara 效果的 **Vfx** 文件夹
- en: With all these resources at our disposal, we are prepared to begin creating
    elements for the project, starting with an agent that will navigate through our
    level.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可利用的所有资源下，我们准备开始为项目创建元素，首先是一个将在我们的关卡中导航的代理。
- en: Creating an AI agent
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 AI 代理
- en: As the first step in testing the pathfinding system, we are going to create
    an agent whose sole aim is to reach a target actor inside the level; it won’t
    be anything fancy, just an actor that will be able to reach a target point in
    the level.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为测试路径查找系统的第一步，我们将创建一个代理，其唯一目标是到达关卡内的一个目标演员；它不会有什么特别之处，只是一个能够到达关卡内目标点的演员。
- en: 'Let’s start by creating a new folder inside **Content Drawer** and calling
    it **Blueprints** . Double-click on the newly created folder to open it and perform
    the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 **Content Drawer** 内创建一个新的文件夹并命名为 **Blueprints** 开始。双击新创建的文件夹以打开它并执行以下步骤：
- en: Right-click on **Content Drawer** and, from the menu that opens, select **Blueprint
    Class** .
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 **Content Drawer**，然后从打开的菜单中选择 **Blueprint Class** 。
- en: 'From the **Pick Parent Class** window that will open, select **Character**
    , as depicted in *Figure 4* *.2* :'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从将打开的 **Pick Parent Class** 窗口中，选择 **Character** ，如图 *Figure 4* *.2* 所示：
- en: '![Figure 4.2 – Character creation](img/B31016_04_2.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 4.2 – Character creation](img/B31016_04_2.jpg)'
- en: Figure 4.2 – Character creation
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 4.2 – Character creation
- en: Name the newly created asset **BP_NavMeshAgent** .
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的资产命名为 **BP_NavMeshAgent** 。
- en: Double-click on it to open it.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击它以打开它。
- en: As you probably already know, the **Character** class refers to a specific type
    of pawn that is designed to represent players or AI agents in a vertically oriented
    manner, allowing them to walk, jump, fly, and swim through the game world.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经知道，**Character** 类指的是一种特定的 pawn 类型，它被设计用来以垂直方式表示玩家或 AI 代理，允许他们在游戏世界中行走、跳跃、飞行和游泳。
- en: We will start by giving it a visual representation and setting up the main values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先给它一个视觉表示，并设置主要值。
- en: Creating the agent
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建代理
- en: 'With the **Blueprint** class opened and the **Viewport** tab selected, locate
    the **Details** panel and follow these steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Blueprint** 类打开且选择 **Viewport** 选项卡的情况下，找到 **Details** 面板并按照以下步骤操作：
- en: Open the **Skeletal Mesh Asset** property dropdown and select the **Dummy**
    asset.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **Skeletal Mesh Asset** 属性下拉菜单并选择 **Dummy** 资产。
- en: Open the **Anim Class** property dropdown and select the **ABP_Dummy** asset.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **Anim Class** 属性下拉菜单并选择 **ABP_Dummy** 资产。
- en: In the **Character Movement (Rotation Settings)** category, locate the **Max
    Walk Speed** property and set the value to **500.0 cm/s** .
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Character Movement (Rotation Settings)** 类别中，找到 **Max Walk Speed** 属性并将其值设置为
    **500.0 cm/s** 。
- en: In the **Character Movement (Rotation Settings)** category, locate the **Rotation
    Rate** property and set the **Z** value to **640.0°** .
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Character Movement (Rotation Settings)** 类别中，找到 **Rotation Rate** 属性并将 **Z**
    值设置为 **640.0°** 。
- en: In the same category, check the **Orient Rotation to** **Movement** checkbox.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一类别中，勾选 **Orient Rotation to** **Movement** 复选框。
- en: In the **Shape** category, set the **Capsule Half Height** property to **120.0**
    and the **Capsule Radius** property to **50.0** .
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Shape** 类别中，将 **Capsule Half Height** 属性设置为 **120.0**，将 **Capsule Radius**
    属性设置为 **50.0** 。
- en: In the **Pawn** category, uncheck the **Use Controller Rotation** **Yaw** property.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Pawn** 类别中，取消勾选 **Use Controller Rotation** **Yaw** 属性。
- en: 'The previous steps are quite straightforward, and they will just set up the
    character mesh, assign an animation Blueprint – that has already been created
    for you – and, finally, set the capsule component size and the movement rotation
    settings. The final result for the agent is shown in *Figure 4* *.3* :'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的步骤相当直接，它们将仅设置角色网格，分配一个动画蓝图（该蓝图已经为您创建）以及，最后，设置胶囊组件大小和移动旋转设置。代理的最终结果显示在*图 4*
    *.3* 中：
- en: '![Figure 4.3 – The agent Blueprint](img/B31016_04_3.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 代理蓝图](img/B31016_04_3.jpg)'
- en: Figure 4.3 – The agent Blueprint
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 代理蓝图
- en: The agent is almost ready, we just need to add some simple code logic in order
    to make it reach a target in the level.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 代理几乎准备好了，我们只需要添加一些简单的代码逻辑，使其能够到达关卡中的目标。
- en: Adding the navigation logic
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加导航逻辑
- en: 'Open the **Event Graph** tab and follow these steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**事件图**选项卡并按照以下步骤操作：
- en: Add a **Get AIController** node in the graph and connect its incoming **Controlled
    Actor** pin to a **Reference to** **Self** node.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个**获取 AIController**节点，并将其输入的**受控演员**引脚连接到一个**指向****自我**节点。
- en: Click and drag from the outgoing **Return Value** pin of the **Get AIController**
    node and add a **Move to Actor** node to the graph.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Get AIController**节点的输出**返回值**引脚点击并拖动，并将一个**移动到演员**节点添加到图中。
- en: Connect the outgoing execution pin of the **Event BeginPlay** node to the incoming
    execution pin of the **Move to** **Actor** node.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Event BeginPlay**节点的输出执行引脚连接到**移动到演员**节点的输入执行引脚。
- en: From the incoming **Goal** pin of the **Move to Actor** , click and drag and,
    once released, select the **Promote to variable** option; name the newly created
    variable **TargetActor** .
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Move to Actor**的输入**目标**引脚，点击并拖动，并在释放后选择**提升为变量**选项；为新创建的变量命名为**TargetActor**。
- en: In the **My Blueprint** tab, select the **TargetActor** variable and, in its
    **Detail** panel, check the **Instance** **Editable** property.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**我的蓝图**选项卡中，选择**TargetActor**变量，并在其**详细**面板中检查**实例****可编辑**属性。
- en: 'This is pretty simple; at the start of the game, the agent will try to navigate
    to a target actor; setting a variable to **Instance Editable** will make it visible
    in the level, in order to pick up the agent destination. The visual scripting
    code you have just created is shown in *Figure 4* *.4* :'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这相当简单；在游戏开始时，代理将尝试导航到目标演员；将变量设置为**实例可编辑**将使其在关卡中可见，以便拾取代理目的地。您刚刚创建的视觉脚本代码显示在*图
    4* *.4* 中：
- en: '![Figure 4.4 – The Blueprint graph](img/B31016_04_4.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 蓝图图](img/B31016_04_4.jpg)'
- en: Figure 4.4 – The Blueprint graph
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 蓝图图
- en: Our maybe not-so-clever agent is now fully equipped to navigate toward its designated
    target position. In the upcoming section, we will create a suitable environment
    for the agent to freely move around and explore.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能不是那么聪明的代理现在已经完全装备好，可以导航到指定的目标位置。在接下来的部分中，我们将为代理创建一个合适的环境，使其可以自由移动和探索。
- en: Setting up a basic level
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本关卡
- en: We are now going to create our first level and start testing the pathfinding
    system for the agent. The project template has some prefabs I created for you,
    particularly a set of **Packed Level Actors** for quickly prototyping your maps
    and a **Level Instance** for setting up the lighting system. You are more than
    welcome to create your own game levels, but during this phase, my advice is to
    follow along with what I will be doing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建我们的第一个关卡并开始测试代理的路径查找系统。项目模板包含我为您创建的一些预制件，特别是用于快速原型设计地图的**打包关卡演员**集和一个**关卡实例**用于设置照明系统。您完全可以创建自己的游戏关卡，但在这一阶段，我的建议是跟随我将要进行的操作。
- en: Note
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In Unreal Engine, a Level Instance allows you to create reusable instances of
    a level or a portion of a level; this way, you can efficiently duplicate and reuse
    parts of your level design without having to recreate them from scratch. A Packed
    Level Actor is a type of Level Instance that is optimized for rendering and can
    only contain static meshes. Level Instances and Packed Level Actors are particularly
    useful when you have complex or repetitive elements in your level that you want
    to reuse multiple times.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unreal Engine中，关卡实例允许您创建关卡或关卡部分的可重用实例；这样，您可以有效地复制和重用关卡设计的一部分，而无需从头开始重新创建。打包关卡演员是一种优化的关卡实例类型，只能包含静态网格。关卡实例和打包关卡演员在您需要在关卡中重复使用复杂或重复元素时特别有用。
- en: Creating the level
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建关卡
- en: 'To create our first gym, follow these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个健身房，请按照以下步骤操作：
- en: From the main menu, select **File** | **New Level** .
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单中选择**文件** | **新建级别**。
- en: Navigate to the **Maps/LevelInstances** folder and drag an instance of **LI_Lighting**
    inside your level; set its transform **Location** to **(0,** **0, 0)** .
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/LevelInstances**文件夹，并将**LI_Lighting**的实例拖动到您的级别中；将其变换**位置**设置为**(0,
    0, 0)**。
- en: Navigate to the **Maps/PackedLevelActors** folder and drag an instance of **PLA_Lab_01**
    inside your level; set its transform **Location** to **(0,** **0, 0)** .
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/PackedLevelActors**文件夹，并将**PLA_Lab_01**的实例拖动到你的级别中；将其变换**位置**设置为**(0,
    0, 0)**。
- en: 'From the **KayKit/PrototypeBits/Models** folder, drag some obstacles into the
    level just to make things a bit more engaging for your agent; my level is shown
    in *Figure 4* *.5* :'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**KayKit/PrototypeBits/Models**文件夹中，将一些障碍物拖动到级别中，以使您的代理更加有趣；我的级别如图*图 4* *.5*
    所示：
- en: '![Figure 4.5 – The base level](img/B31016_04_5.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 基础级别](img/B31016_04_5.jpg)'
- en: Figure 4.5 – The base level
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 基础级别
- en: Save the level in the **Maps** folder and name it **Gym_NavMesh_01** .
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将级别保存在**Maps**文件夹中，并命名为**Gym_NavMesh_01**。
- en: Adding the nav mesh
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加导航网格
- en: 'You are now ready to add the nav mesh on the level:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以为级别添加导航网格：
- en: From the **Quickly add to the project** button in the toolbar, select **Nav
    Mesh Bounds Volume** and drag an instance in the level; a **Recast Nav Mesh**
    actor will be automatically added along with the volume.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具栏中的**快速添加到项目**按钮，选择**Nav Mesh Bounds Volume**并将实例拖动到级别中；将自动添加**Recast Nav
    Mesh**演员以及体积。
- en: Set **Location** for the volume to **(0, 0, 0)** and **Scale** to **(20,** **20,
    1)** .
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将体积的**位置**设置为**(0, 0, 0)**和**缩放**设置为**(20, 20, 1)**。
- en: 'Click inside the level and hit the *P* key on your keyboard to show the generated
    nav mesh, as depicted in *Figure 4* *.6* :'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在级别内点击并按下键盘上的*P*键以显示生成的导航网格，如图*图 4* *.6* 所示：
- en: '![Figure 4.6 – The nav mesh](img/B31016_04_6.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 导航网格](img/B31016_04_6.jpg)'
- en: Figure 4.6 – The nav mesh
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 导航网格
- en: As you can see, the obstacles you have added will carve the nav mesh and make
    things more interesting for the soon-to-be-added agent.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您添加的障碍物将雕刻导航网格，并为即将添加的代理增添更多趣味。
- en: Adding the agent
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加代理
- en: 'As a last step, we need to add the agent and a target point to be reached.
    So, let’s start by doing this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，我们需要添加代理和要到达的目标点。所以，让我们先做这个：
- en: From the **Vfx** folder, drag an instance of the **NS_Target** Niagara system
    and place it anywhere on the nav mesh.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Vfx**文件夹中，拖动**NS_Target** Niagara系统的实例并将其放置在导航网格上的任何位置。
- en: From the **Blueprints** folder, drag an instance of the **BP_NavMeshAgent**
    Blueprint and place it on the blue-colored tile of the level; the **Location**
    value should be approximately **(-1650,** **30, 180)** .
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Blueprints**文件夹中，拖动**BP_NavMeshAgent** Blueprint的实例并将其放置在级别中蓝色的瓷砖上；**位置**值应大约为**(-1650,
    30, 180)**。
- en: 'With the agent selected, locate the **Target Actor** property in the **Details**
    panel and, from the dropdown menu, set its value to **NS_Target** , which is the
    previously added Niagara system. The final level should be similar to *Figure
    4* *.7* :'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择代理后，在**细节**面板中找到**目标演员**属性，并从下拉菜单中将其值设置为**NS_Target**，这是之前添加的Niagara系统。最终级别应类似于*图
    4* *.7*：
- en: '![Figure 4.7 – The final level](img/B31016_04_7.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 最终级别](img/B31016_04_7.jpg)'
- en: Figure 4.7 – The final level
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 最终级别
- en: Now that the level is complete, we can start testing it out.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在级别已经完成，我们可以开始测试它。
- en: Testing the gym
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试健身房
- en: Now that the gym is finished, you can start testing your agent to see how it
    behaves in the level.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在健身房已经完成，您可以从测试代理开始，看看它在级别中的行为如何。
- en: You can simply hit the **Play** button in the toolbar, or you can use the **Simulate**
    button that will not enter play mode but will show a simulation of how the level
    works. In this context, I personally prefer this second option as it will keep
    the nav mesh visible.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接在工具栏中点击**播放**按钮，或者使用**模拟**按钮，它不会进入播放模式，但会显示级别如何工作的模拟。在这个上下文中，我个人更喜欢第二种选择，因为它会保持导航网格可见。
- en: Once the simulation starts, you will see the agent reaching the target actor
    by taking the shortest route possible. You are free to experiment with obstacles
    to check how the agent behaves in different scenarios.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开始模拟，您将看到代理通过最短路径到达目标演员。您可以自由地实验障碍物，以检查代理在不同场景下的行为。
- en: In this section, you have begun to experiment hands-on with how the pathfinding
    system operates. You achieved this by creating an agent and a simple gym environment
    for your agent to navigate.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你已经开始亲手实验路径查找系统的运作方式。你通过创建一个智能体和一个简单的健身房环境来实现这一点，以便智能体进行导航。
- en: In the next section, you will be adding modifiers to the nav mesh to give your
    agent a bit more of a challenge.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将向导航网格添加修饰符，以给你的智能体增加一些挑战。
- en: Adding navigation modifiers
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加导航修饰符
- en: In this section, we are going to create another gym that will let us test nav
    mesh modifiers – actors that can be used to define areas where the cost to enter
    an area is different than the regular nav mesh.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建另一个健身房，以便我们可以测试导航网格修饰符——这些修饰符可以用来定义进入区域成本不同于常规导航网格的区域。
- en: We’ll start by creating the level and then by adding the modifiers.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建关卡，然后添加修饰符。
- en: Creating the level
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建关卡
- en: 'To create our second gym, follow these steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第二个健身房，请按照以下步骤操作：
- en: From the main menu, select **File** | **New Level** .
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单选择 **文件** | **新建关卡** 。
- en: Navigate to the **Maps/LevelInstances** folder and drag an instance of **LI_Lighting**
    inside your level; set its transform **Location** to **(0,** **0, 0)** .
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **Maps/LevelInstances** 文件夹，并将 **LI_Lighting** 实例拖动到你的关卡中；将它的变换 **位置** 设置为
    **(0, 0, 0)** 。
- en: Navigate to the **Maps/PackedLevelActors** folder and drag an instance of **PLA_Lab_04**
    inside your level; set its transform **Location** to **(0,** **0, 0)** .
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **Maps/PackedLevelActors** 文件夹，并将 **PLA_Lab_04** 实例拖动到你的关卡中；将它的变换 **位置**
    设置为 **(0, 0, 0)** 。
- en: Save the level in the **Maps** folder and name it **Gym_NavMesh_02** .
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将关卡保存在 **Maps** 文件夹中，并命名为 **Gym_NavMesh_02** 。
- en: 'Now, repeat the same steps you have done for the previous gym by doing the
    following:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，通过以下步骤重复你为之前健身房所做的相同步骤：
- en: Add the **Nav Mesh Bounds Volume** actor and set its boundaries so they cover
    the full walkable area.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 **Nav Mesh Bounds Volume** 行为，并设置其边界以覆盖整个可通行区域。
- en: Add the **NS_Target** Niagara System on the opposite side of the level in relation
    to the blue tile.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关卡蓝色瓷砖的对侧添加 **NS_Target** Niagara 系统。
- en: 'Add the **BP_NavMeshAgent** Blueprint on the blue tile and set the **Target
    Actor** property value to **NS_Target** . The level should now look like *Figure
    4* *.8* :'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在蓝色瓷砖上添加 **BP_NavMeshAgent** 蓝图，并将 **目标行为者** 属性值设置为 **NS_Target** 。现在关卡应该看起来像
    *图 4.8* ：
- en: '![Figure 4.8 – The updated nav mesh](img/B31016_04_8.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 更新的导航网格](img/B31016_04_8.jpg)'
- en: Figure 4.8 – The updated nav mesh
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 更新的导航网格
- en: So far, everything is quite similar to the previous gym; we are now going to
    insert a modifier and see how it behaves.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切与之前的健身房相当相似；我们现在将插入一个修饰符，看看它的表现如何。
- en: Incorporating a modifier
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加修饰符
- en: 'We are now ready to change the way the pathfinding system behaves by adding
    a modifier. To do so, follow these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备通过添加修饰符来改变路径查找系统的行为。为此，请按照以下步骤操作：
- en: From the **Quickly add to the project** button in the toolbar, select **Nav
    Modifier Volume** and drag an instance in the level.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具栏中的 **快速添加到项目** 按钮选择 **Nav Modifier Volume** 并将实例拖动到关卡中。
- en: Set **Location** for the volume to **(0, 0, 0)** and **Scale** to **(5,** **20,
    1)** .
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将体积的 **位置** 设置为 **(0, 0, 0)** 和 **缩放** 设置为 **(5, 20, 1)** 。
- en: You will notice that the nav mesh has now been modified and that it has been
    carved where the brown – let’s say muddy – tiles are placed.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到导航网格已经被修改，并且在放置棕色（让我们说泥泞的）瓷砖的地方被雕刻出来。
- en: '![Figure 4.9 – The level with the modifier added to it](img/B31016_04_9.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 添加了修饰符的关卡](img/B31016_04_9.jpg)'
- en: Figure 4.9 – The level with the modifier added to it
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 添加了修饰符的关卡
- en: If you test the level now, you will see the agent moving toward the target point
    but stopping next to the muddy terrain; this is happening because the modifier
    volume has changed the nav mesh and now there’s no way for the agent to reach
    its target.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在测试关卡，你会看到智能体向目标点移动，但在泥泞地形旁边停止；这是因为修饰符体积改变了导航网格，现在智能体无法到达其目标。
- en: By selecting the **Nav Modifier Volume** actor and checking the **Area Class**
    attribute in the **Details** panel, you will notice that it has been set to a
    value equal to **NavArea_Null** . This value applies an infinite cost to the area
    it is applied to, making it impossible for the agent to traverse it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择 **Nav Modifier Volume** 行为并在 **细节** 面板中检查 **区域类** 属性，你会注意到它已被设置为等于 **NavArea_Null**
    的值。此值将该区域应用于无限成本，使其对智能体来说无法穿越。
- en: '![Figure 4.10 – The Area Class attribute](img/B31016_04_10.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 区域类属性](img/B31016_04_10.jpg)'
- en: Figure 4.10 – The Area Class attribute
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 区域类属性
- en: If you try setting this value to **NavArea_Default** , you will notice that
    the nav mesh will behave as it would without any modifier in it, and that’s exactly
    what it does for this value; the cost for traversing this section is the same
    as that for the regular mesh. By testing the gym now, you will notice that the
    agent will walk through the muddy terrain and get to the target point.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试将此值设置为**NavArea_Default**，您会注意到导航网格的行为将像没有修饰符一样，这正是此值所做的那样；遍历此部分的成本与常规网格的成本相同。通过现在测试健身房，您会注意到智能体会穿过泥泞地形并到达目标点。
- en: 'If you need to check the cost for traversing each polygon in your nav mesh,
    you can do it by selecting the **Recast Nav Mesh** actor and – from the **Details**
    panel – checking the **Draw Polygon Cost** attribute. *Figure 4* *.11* shows the
    cost visualization in the level:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要检查导航网格中每个多边形的遍历成本，可以通过选择**Recast 导航网格**演员，并在**详细信息**面板中检查**绘制多边形成本**属性来完成。*图
    4.11* 显示了在关卡中的成本可视化：
- en: '![Figure 4.11 – The nav mesh traversal costs](img/B31016_04_11.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 导航网格遍历成本](img/B31016_04_11.jpg)'
- en: Figure 4.11 – The nav mesh traversal costs
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 导航网格遍历成本
- en: Let’s make the level a bit more interesting and add some custom-made modifier
    volumes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使关卡更有趣，并添加一些自定义修饰体积。
- en: Improving the level
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进关卡
- en: 'Let’s now create a safe path for our agent so it doesn’t get its feet dirty
    in the muddy area. We will create a passage through it by using some additional
    models. To do this, follow these steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为我们的智能体创建一个安全路径，以免它在泥泞区域弄脏脚。我们将通过使用一些额外的模型来创建一条通道。为此，请按照以下步骤操作：
- en: In the **KayKit/PrototypeBits/Models** folder, locate the **Pallet_Large_Pallet_Large**
    model.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**KayKit/PrototypeBits/Models**文件夹中，找到**Pallet_Large_Pallet_Large**模型。
- en: 'Drag three instances of this model in the level in order to create a passage
    through the muddy area, as depicted in *Figure 4* *.12* :'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此模型的三个实例拖放到关卡中，以在泥泞区域创建通道，如图 4.12 所示：
- en: '![Figure 4.12 – The bridge](img/B31016_04_12.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 桥梁](img/B31016_04_12.jpg)'
- en: Figure 4.12 – The bridge
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 桥梁
- en: 'It’s time to add another modifier for the bridge:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候为桥梁添加另一个修饰符了：
- en: Modify the size of the previously added **Nav Modifier Volume** actor in the
    level so that it covers the muddy passage on the left of the river.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改关卡中之前添加的**导航修饰体积**演员的大小，使其覆盖河流左侧的泥泞通道。
- en: Add another **Nav Modifier Volume** actor to the level so that it covers the
    muddy passage on the right of the river.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关卡中添加另一个**导航修饰体积**演员，使其覆盖河流右侧的泥泞通道。
- en: Add a third **Nav Modifier Volume** actor to the level and place it so it creates
    an area covering the whole bridge.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关卡中添加一个第三个**导航修饰体积**演员，并将其放置以创建覆盖整个桥梁的区域。
- en: In Unreal Engine, a **Nav Modifier Volume** is an actor that is used to change
    the way the nav mesh is generated and that can be added to the level to specify
    certain areas of the nav mesh itself.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unreal Engine 中，**导航修饰体积**是一个用于更改导航网格生成方式的演员，可以添加到关卡中以指定导航网格本身的某些区域。
- en: 'You should now have a totally impassable zone, created by three modifiers,
    as shown in *Figure 4* *.13* :'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该有三个修饰符创建的完全无法通行的区域，如图 4.13 所示：
- en: '![Figure 4.13 – The bridge with the modifiers](img/B31016_04_13.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 带有修饰符的桥梁](img/B31016_04_13.jpg)'
- en: Figure 4.13 – The bridge with the modifiers
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 带有修饰符的桥梁
- en: Now that we have added a safe passage, we are going to create custom modifiers
    in order to experiment with different settings.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了一条安全通道，我们将创建自定义修饰符以进行不同的设置实验。
- en: Creating custom modifiers
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义修饰符
- en: A modifier is a Blueprint extending the **NavArea** class; this means that you
    can create your own modifiers by subclassing this type and setting your own parameters.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 修饰符是扩展**NavArea**类的蓝图；这意味着您可以通过子类化此类型并设置自己的参数来创建自己的修饰符。
- en: 'We are now going to create one for the muddy surface and one for the bridge.
    Let’s start with the first one:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个用于泥泞表面的和一个用于桥梁的修饰符。让我们从第一个开始：
- en: Open **Content Drawer** and, in the **Blueprints** folder, right-click and choose
    **Blueprint Class** .
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**内容抽屉**，在**蓝图**文件夹中，右键单击并选择**蓝图类**。
- en: From the **ALL CLASSES** dropdown list, select the **NavArea** type.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**所有类**下拉列表中选择**NavArea**类型。
- en: Name the newly created asset **NavArea_Mud** and double-click on it to open
    it.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的资产命名为**NavArea_Mud**并双击它以打开。
- en: 'Change its values as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式更改其值：
- en: Change **Default Cost** to **10.0** .
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**默认成本**更改为**10.0**。
- en: Change **Fixed Area Entering Cost** to **2.0** .
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**固定区域进入成本**更改为**2.0**。
- en: Change **Draw Color** to a recognizable color of your choice.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**绘制颜色**更改为你选择的易于识别的颜色。
- en: '![Figure 4.14 – The cost settings for the muddy nav area](img/B31016_04_14.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图4.14 – 污泥导航区域的成本设置](img/B31016_04_14.jpg)'
- en: Figure 4.14 – The cost settings for the muddy nav area
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14 – 污泥导航区域的成本设置
- en: While the **Draw Color** value is almost self-explanatory – it will be used
    to color the nav mesh area covered by the volume – **Default Cost** is a multiplier
    applied to the overall cost for traversing the area. This means that the pathfinding
    system will compute the traversal cost multiplied by the value of **Default Cost**
    . **Fixed Area Entering Cost** , on the other hand, is a cost that is applied
    only once – when the agent enters the area covered by the volume. In this case,
    we have opted for a fixed cost for entering the muddy area and a high cost for
    traversing it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然**绘制颜色**值几乎不言自明——它将被用来为体积覆盖的导航网格区域着色——**默认成本**是应用于穿越该区域整体成本的一个乘数。这意味着路径查找系统将计算穿越成本乘以**默认成本**的值。另一方面，**固定区域进入成本**是一次性应用的成本——当代理进入体积覆盖的区域时。在这种情况下，我们选择了进入泥泞区域的固定成本和穿越它的高成本。
- en: 'Now, let’s do the same steps for the bridge area:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为桥梁区域执行相同的步骤：
- en: Open **Content Drawer** and, in the **Blueprints** folder, right-click and choose
    **Blueprint Class** .
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**内容抽屉**，在**蓝图**文件夹中，右键单击并选择**蓝图类**。
- en: From the **ALL CLASSES** dropdown list, select the **NavArea** type.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**所有类**下拉列表中，选择**NavArea**类型。
- en: Name the newly created asset **NavArea_Bridge** and double-click on it to open
    it.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的资产命名为**NavArea_Bridge**并双击它以打开。
- en: 'Change its values as follows:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式更改其值：
- en: Change **Default Cost** to **5.0** .
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**默认成本**更改为**5.0**。
- en: Change **Fixed Area Entering Cost** to **0.0** .
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**固定区域进入成本**更改为**0.0**。
- en: Change **Draw Color** to a recognizable color of your choice.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**绘制颜色**更改为你选择的易于识别的颜色。
- en: '![Figure 4.15 – The cost settings for the bridge nav area](img/B31016_04_15.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图4.15 – 桥梁导航区域的成本设置](img/B31016_04_15.jpg)'
- en: Figure 4.15 – The cost settings for the bridge nav area
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15 – 桥梁导航区域的成本设置
- en: In this case, we want to create an easier path for the agent, so we have set
    the fixed cost to **0.0** and the traversal cost to a lower value.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望为代理创建一条更简单的路径，因此我们将固定成本设置为**0.0**，并将穿越成本设置为更低的值。
- en: We now need to apply these classes to the modifiers in the level.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要将这些类应用到关卡中的修饰符上。
- en: Applying the custom modifiers
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用自定义修饰符
- en: 'We are now ready to get the newly created classes and apply them to the level
    modifiers. To do so, follow these steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好获取新创建的类并将它们应用到关卡修饰符上。为此，请按照以下步骤操作：
- en: Select the two mud **Nav Modifier Volumes** and, in the **Area Class** property
    dropdown of the **Details** panel, select **NavArea_Mud** .
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择两个泥**导航修饰体积**，在**详细信息**面板的**区域类**属性下拉列表中，选择**NavArea_Mud**。
- en: Select the bridge **Nav Modifier Volume** and, in the **Area Class** property
    dropdown of the **Details** panel, select **NavArea_Bridge** .
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择桥梁**导航修饰体积**，在**详细信息**面板的**区域类**属性下拉列表中，选择**NavArea_Bridge**。
- en: 'The nav mesh should be updated and should look like the one shown in *Figure
    4* *.16* :'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 导航网格应该已更新，并应看起来像*图4.16*中所示：
- en: '![Figure 4.16 – The modified nav mesh area](img/B31016_04_16.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图4.16 – 修改后的导航网格区域](img/B31016_04_16.jpg)'
- en: Figure 4.16 – The modified nav mesh area
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16 – 修改后的导航网格区域
- en: Note
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Depending on how you created your bridge, you may have a less regular modifier
    area than mine; additionally, the nav mesh may be generated so that it is not
    fully walkable. To solve these issues, you will need to play a bit with the pallet
    model’s **Z** value and the size of your modifier.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你创建桥梁的方式，你可能会有比我更不规则的修饰区域；此外，导航网格可能生成得不够完全可通行。为了解决这些问题，你需要稍微调整模型面板的**Z**值和修饰区域的大小。
- en: We are finally ready to test this level.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终准备好测试这个关卡。
- en: Testing the level
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试关卡
- en: To test your gym, simply start the level simulation; you should see your agent
    going toward the bridge, crossing it, and reaching the target point. Although
    the muddy terrain is walkable, passing through it has a higher cost than traversing
    the bridge.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试你的健身房，只需开始关卡模拟；你应该看到你的代理走向桥梁，穿过它，并到达目标点。尽管泥泞的地形是可通行的，但穿过它的成本比穿越桥梁要高。
- en: 'To double-check it, add some impassable obstacles on the bridge, just like
    I did in *Figure 4* *.17* :'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了双重检查，请在桥梁上添加一些不可通行的障碍物，就像我在*图 4.17*中做的那样：
- en: '![Figure 4.17 – The obstructed bridge](img/B31016_04_17.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 被阻挡的桥梁](img/B31016_04_17.jpg)'
- en: Figure 4.17 – The obstructed bridge
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 被阻挡的桥梁
- en: If you start the simulation, you will see the agent going straight to the target
    point; although the muddy terrain has a high traversal cost, there is no other
    viable solution so the agent will opt for it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你开始模拟，你会看到代理直接走向目标点；尽管泥泞的地形有很高的通过成本，但没有其他可行的解决方案，所以代理将选择它。
- en: This concludes this section, where you learned about how modifiers work. In
    the next section, I will show you another method to modify your nav meshes using
    link proxies.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分内容到此结束，你学习了如何使用修饰符。在下一节中，我将向你展示另一种使用链接代理修改导航网格的方法。
- en: Working with navigation link proxies
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与导航链接代理一起工作
- en: As we have already seen in [*Chapter 3*](B31016_03.xhtml#_idTextAnchor058) ,
    *Presenting the Unreal Engine Navigation System* , a **Nav Link Proxy** is an
    actor used to define specific areas where agents can navigate even if a portion
    of the level cannot be traversed. A **Nav Link Proxy** is placed in the game world
    to mark a start point and an endpoint, creating a navigation link. This link will
    provide a connection – which can be mono- or bi-directional – between two areas
    that may not be directly accessible.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们已在[*第 3 章*](B31016_03.xhtml#_idTextAnchor058)中看到的，*介绍虚幻引擎导航系统*，**导航链接代理**是一个用于定义代理可以导航的特定区域的演员，即使关卡的一部分无法穿越。**导航链接代理**放置在游戏世界中，以标记起点和终点，创建一个导航链接。此链接将在两个可能无法直接到达的区域之间提供连接——可以是单向或双向的。
- en: To check how this link works, we’ll be creating a new gym.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查这个链接是如何工作的，我们将创建一个新的健身房。
- en: Creating the level
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建关卡
- en: 'To create this new gym, follow these steps:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这个新的健身房，请按照以下步骤操作：
- en: From the main menu, select **File** | **New Level** .
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单中选择**文件**|**新建关卡**。
- en: Navigate to the **Maps/LevelInstances** folder and drag an instance of **LI_Lighting**
    inside your level; set its transform **Location** to **(0,** **0, 0)** .
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/LevelInstances**文件夹，并将**LI_Lighting**实例拖动到你的关卡中；将其变换的**位置**设置为**(0,
    0, 0)**。
- en: Navigate to the **Maps/PackedLevelActors** folder and drag an instance of **PLA_Lab_03**
    inside your level; set its transform **Location** to **(0,** **0, 0)** .
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Maps/PackedLevelActors**文件夹，并将**PLA_Lab_03**实例拖动到你的关卡中；将其变换的**位置**设置为**(0,
    0, 0)**。
- en: Save the level in the **Maps** folder and name it **Gym_NavMesh_03** .
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将关卡保存在**Maps**文件夹中，并命名为**Gym_NavMesh_03**。
- en: 'This gym has a wide water channel in the middle of it, along with a bridge,
    as depicted in *Figure 4* *.18* :'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这个健身房中间有一个宽阔的水道，还有一个桥梁，如*图 4.18*所示：
- en: '![Figure 4.18 – The gym](img/B31016_04_18.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 健身房](img/B31016_04_18.jpg)'
- en: Figure 4.18 – The gym
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 健身房
- en: 'Now, let’s add a few nav meshes – one for each walkable area – along with the
    agent and the target point:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加几个导航网格——每个可通行区域一个——以及代理和目标点：
- en: Add two **Nav Mesh Bounds Volume** actors and set their boundaries so that they
    cover the walkable areas on each side of the river.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加两个**导航网格边界体积**演员，并设置它们的边界，以便覆盖河流两侧的可通行区域。
- en: Add the **NS_Target** Niagara System on the opposite side of the level from
    the blue tile.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关卡蓝色瓷砖的对侧添加**NS_Target** Niagara 系统。
- en: 'Add the **BP_NavMeshAgent** Blueprint on the blue tile and set the **Target
    Actor** property value to **NS_Target** . The level should now look like *Figure
    4* *.19* :'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在蓝色瓷砖上添加**BP_NavMeshAgent**蓝图，并将**目标演员**属性值设置为**NS_Target**。现在关卡应该看起来像*图 4.19*：
- en: '![Figure 4.19 – The gym with the nav mesh](img/B31016_04_19.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 带有导航网格的健身房](img/B31016_04_19.jpg)'
- en: Figure 4.19 – The gym with the nav mesh
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 带有导航网格的健身房
- en: If you test your gym right now, you will notice your agent walking toward the
    target point but stopping near the channel. Well, I guess that’s about as unexpected
    as a penguin wearing a tuxedo to a fancy party – there is no connection, so there
    can be no successful pathfinding!
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在测试你的训练场，你会注意到你的智能体走向目标点，但在水道附近停下。嗯，我想这就像一只企鹅穿着燕尾服参加一个盛大的派对一样出人意料——没有联系，所以不可能有成功的路径搜索！
- en: Let’s now allow the agent to walk through the bridge.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们让智能体穿过这座桥。
- en: Adding a Nav Link Proxy
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加导航链接代理
- en: 'To add a link that will connect the two sides of the channel, do the following
    steps:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个连接水道两边的链接，请按照以下步骤操作：
- en: From the **Quickly add to the project** button in the toolbar, select **Nav
    Link Proxy** and drag an instance in the level.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中的**快速添加到项目**按钮中选择**导航链接代理**，并将一个实例拖到关卡中。
- en: You will notice that this actor has a couple of diamond-shaped gizmos called,
    respectively, **PointLinks[0].Left** and **PointLinks[0].Right** ; those are the
    connection points that will shape your link proxy.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到这个演员有几个菱形的小工具，分别称为**PointLinks[0].Left**和**PointLinks[0].Right**；这些是形成你的链接代理的连接点。
- en: '![Figure 4.20 – One of the two point links](img/B31016_04_20.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 两个点链接之一](img/B31016_04_20.jpg)'
- en: Figure 4.20 – One of the two point links
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 两个点链接之一
- en: 'Select each of the point links and move them so that they are placed on each
    side of the bridge, as depicted in *Figure 4* *.21* :'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择每个点链接并将它们移动到桥梁的两侧，如图 *图 4.21* 所示：
- en: '![Figure 4.21 – A nav mesh proxy](img/B31016_04_21.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 一个导航网格代理](img/B31016_04_21.jpg)'
- en: Figure 4.21 – A nav mesh proxy
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 一个导航网格代理
- en: The **Point Links** attribute is a list of elements that can be used to create
    connections between unreachable locations. By default, there is just one, but
    you can add as many as you want.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**点链接**属性是一个可以用来在不可达位置之间创建连接的元素列表。默认情况下只有一个，但你可以添加任意多个。'
- en: Testing the gym
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试训练场
- en: Now that also this gym is finished, you can test it to see how your agent behaves.
    Once the simulation starts, you will see the agent reach the target point by traversing
    the bridge as if a nav mesh existed on it.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 既然这个训练场也完成了，你可以测试它来看看你的智能体表现如何。一旦模拟开始，你会看到智能体通过桥梁到达目标点，就像上面存在导航网格一样。
- en: Note
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you try placing some obstacles on the bridge, you will notice your agent
    running straight on them and stopping; this happens because there is no actual
    nav mesh on the bridge, but a straight link. This means that Nav Link Proxies
    are a powerful tool, but they need to be used wisely.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试在桥上放置一些障碍物，你会注意到你的智能体直接冲过去然后停下；这是因为桥上实际上没有导航网格，而是一个直接的链接。这意味着导航链接代理是一个强大的工具，但需要明智地使用。
- en: In this section, you have seen how to use Nav Link Proxies to connect unreachable
    sections of your nav mesh; with this new knowledge, you’re all set to make your
    AI friends do some epic cliff dives and pull off all sorts of wacky tricks!
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你看到了如何使用导航链接代理连接导航网格中不可达的部分；有了这些新知识，你就可以让你的 AI 朋友们做一些史诗般的悬崖跳水，并完成各种古怪的花样了！
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you started working with the Navigation System; by starting
    from a simple navigable area, you added some obstacles and checked how the agent
    behaves. Next, you learned how to modify your walkable areas by adding non-traversable
    zones or difficult terrain. Lastly, you gained some understanding of how to link
    disconnected parts of the nav mesh.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你开始使用导航系统；从简单的可导航区域开始，你添加了一些障碍物并检查了智能体的行为。接下来，你学习了如何通过添加不可穿越区域或困难地形来修改可通行区域。最后，你了解了一些如何连接导航网格不连续部分的方法。
- en: All this knowledge is crucial because it helps your AI agents figure out where
    they can go without bumping into walls or getting stuck in a maze of confusion.
    You can think of the nav mesh as the GPS for your digital pals, ensuring they
    don’t end up lost in the virtual wilderness!
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些知识都是至关重要的，因为它帮助你的 AI 代理确定他们可以去哪里而不会撞到墙壁或陷入混乱的迷宫。你可以把导航网格想象成你数字伙伴的 GPS，确保他们不会在虚拟荒野中迷路！
- en: In the next chapter, we will get deeper into the realm of the nav mesh; get
    ready to create some more advanced and fascinating stuff in Unreal Engine!
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨导航网格的领域；准备好在 Unreal Engine 中创建更多高级和迷人的内容吧！
