- en: Working with Caffe
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Caffe
- en: In [Chapter 2](270a3617-74cd-4e64-98f7-eb0c4e3cbcf6.xhtml), *Composing Networks*,
    and [Chapter 3](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml), *Training Networks*,
    we learned how to compose networks and train them, respectively. In this chapter,
    we will examine the relationship between Caffe2 and Caffe and look at how to use
    Caffe models in Caffe2 and vice versa.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](270a3617-74cd-4e64-98f7-eb0c4e3cbcf6.xhtml)中，*组合网络*，以及[第3章](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml)中，*训练网络*，我们分别学习了如何组合网络和训练网络。在本章中，我们将探讨Caffe2与Caffe之间的关系，并看看如何在Caffe2中使用Caffe模型，反之亦然。
- en: 'The objectives of this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标如下：
- en: The relationship between Caffe and Caffe2
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caffe与Caffe2的关系
- en: Introduction to AlexNet
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AlexNet简介
- en: Building and installing Caffe
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和安装Caffe
- en: Caffe model file formats
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caffe模型文件格式
- en: Caffe2 model file formats
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caffe2模型文件格式
- en: Converting a Caffe model to Caffe2
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Caffe模型转换为Caffe2
- en: Converting a Caffe2 model to Caffe
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Caffe2模型转换为Caffe
- en: The relationship between Caffe and Caffe2
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffe与Caffe2的关系
- en: At the *NIPS* academic conference held in 2012, Alex Krizhevsky and his collaborators,
    one of whom was the neural network pioneer, Geoffrey Hinton, presented a record
    breaking result at the **ImageNet Large-Scale Visual Recognition Competition**
    (**ILSVRC**). Research teams competed in various image recognition tasks that
    used the ImageNet dataset. Krizhevsky's results on the image classification task
    were 10.8% better than the state of the art. He had used GPUs for the first time
    to train a CNN with many layers. This network structure would popularly be called
    **AlexNet** later. The design of such a deep neural network with a large number
    of layers is the reason why this field came to be called deep learning. Krizhevsky
    shared the entire source code of his network, now called **cuda-convnet**, along
    with its highly GPU-optimized training code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在2012年举办的*NIPS*学术会议上，Alex Krizhevsky及其合作者，包括神经网络先驱Geoffrey Hinton，展示了**ImageNet大规模视觉识别竞赛**（**ILSVRC**）的突破性结果。研究团队在使用ImageNet数据集的各种图像识别任务中竞争。Krizhevsky在图像分类任务上的结果比当时的技术水平提高了10.8%。他首次利用GPU训练了一个具有多层的CNN。这种网络结构后来被广泛称为**AlexNet**。设计这样一个具有大量层次的深度神经网络正是深度学习领域得名的原因。Krizhevsky分享了他的整个网络源代码，现在称为**cuda-convnet**，以及高度GPU优化的训练代码。
- en: Soon after this, **Yangqing Jia**, and his collaborators from the UC **Berkeley
    Vision and Learning Center** (**BVLC**) tried to replicate these results, releasing
    their software as *DeCaf*. This library was later polished and streamlined and
    released as **Caffe**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，**贾扬清**及其来自加州大学**伯克利视觉与学习中心**（**BVLC**）的合作者尝试复制这些结果，将其软件命名为*DeCaf*。这个库后来经过改进和简化，并以**Caffe**的名义发布。
- en: Unlike most of the buggy and poorly designed research code of its time, Caffe
    was a well-designed deep learning library that made it easy to compose a network
    using a prototxt text file. It was modular by design, making it easy for researchers
    to add new layers and training algorithms. This made Caffe popular during the
    period 2012 to 2016\. Most of the groundbreaking networks and models in the field
    of image recognition were released in Caffe. This is why Caffe is an important
    deep learning framework, and you might still find several classic models only
    available for Caffe.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与其时代大多数存在缺陷和设计不良的研究代码不同，Caffe是一个设计良好的深度学习库，通过prototxt文本文件轻松组合网络。其设计具有模块化特性，使得研究人员可以轻松添加新层和训练算法。这使得Caffe在2012年至2016年期间非常流行。图像识别领域的大多数重要网络和模型都是在Caffe中发布的。这就是为什么Caffe是一个重要的深度学习框架，你可能仍然会发现几个经典模型只能在Caffe中使用的原因。
- en: In the meantime, there was growing interest in alternatives to Caffe. This was
    because Caffe was beginning to show its limitations. Although a Python API was
    added late in 2014, Caffe was primarily a C++ library. This C++ requirement meant
    slow speed of experimentation and development. Caffe was also primarily designed
    for image recognition problems. Practitioners found it difficult to add features
    for solving other problems, such as speech recognition. Other useful features,
    such as the utilization of different precision data types and quantization and
    multi-GPU training, were not present in Caffe. These features were later grafted
    painfully onto Caffe, but were not optimal in terms of engineering and maintenance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，人们对Caffe的替代方案产生了越来越大的兴趣。这是因为Caffe开始暴露出其局限性。尽管在2014年底添加了Python API，但Caffe主要是一个C++库。这个C++的要求导致了实验和开发的速度较慢。Caffe还主要是为图像识别问题设计的。实践者发现，很难为解决其他问题（如语音识别）添加功能。其他有用的功能，如不同精度数据类型的利用、量化和多GPU训练，在Caffe中也没有。这些功能后来被痛苦地添加到Caffe中，但在工程和维护方面并不理想。
- en: These issues resulted in a new breed of deep learning libraries that were written
    with ease of use, distributed training, and customization in mind, gaining in
    popularity. These included TensorFlow and PyTorch.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题促使了新一代深度学习库的出现，这些库以易用性、分布式训练和定制化为核心，逐渐流行起来。这些库包括TensorFlow和PyTorch。
- en: Yangqing Jia moved from university to Facebook and he led the creation of a
    modern deep learning library, Caffe2, the subject of this book. Because he had
    created Caffe too, Caffe2 borrowed a lot of the good ideas from Caffe and was
    built to interoperate with Caffe.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 颜清佳从大学转到Facebook，并领导创建了现代深度学习库Caffe2，本书的主题。因为他也创建了Caffe，所以Caffe2借鉴了许多Caffe的好点子，并且被构建为与Caffe兼容。
- en: Introduction to AlexNet
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AlexNet简介
- en: We mentioned AlexNet in the earlier section that introduced Caffe. AlexNet was
    a seminal network structure because of the large number of layers it employed
    for the first time, and for showing how such a deep neural network could be trained
    in a reasonable time by utilizing GPUs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的部分中提到过AlexNet，它是一个开创性的网络结构，因为它首次采用了大量的层，并展示了如何通过利用GPU在合理的时间内训练如此深的神经网络。
- en: 'Figure 4.1 shows the network structure of AlexNet generated by Caffe''s network
    visualization tool, `draw_net.py` . This tool uses the GraphViz library to render
    the graph layout:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1显示了由Caffe的网络可视化工具`draw_net.py`生成的AlexNet网络结构。此工具使用GraphViz库来呈现图形布局：
- en: '![](img/e15f1dfa-f5a9-45f4-87e2-7f78bca94187.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e15f1dfa-f5a9-45f4-87e2-7f78bca94187.png)'
- en: 'Figure 4.1: Network structure of AlexNet using the GraphViz layout'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1：使用GraphViz布局的AlexNet网络结构
- en: In this visualization, layers are drawn as rectangles and data tensors between
    layers are drawn as elongated octagons. For example, the first layer rectangle
    after the input layer depicts a convolution layer named `conv1`. It uses kernels
    of size ![](img/df3f5ab1-5fa4-40aa-884f-7cb8ddb104f5.png), a stride of `4`, and
    a padding of `0`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在此可视化中，层被绘制为矩形，而层之间的数据张量被绘制为拉长的八边形。例如，输入层之后的第一个矩形表示一个名为`conv1`的卷积层。它使用大小为![](img/df3f5ab1-5fa4-40aa-884f-7cb8ddb104f5.png)的卷积核，步幅为`4`，填充为`0`。
- en: Examining the AlexNet structure in *Figure 4.1* we can see that AlexNet is similar
    in spirit to the LeNet model we looked at in [Chapter 3](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml),
    *Training Networks*. Compared to LeNet, however, it has many more convolution
    layers and fully connected layers at the end. Furthermore, it has replaced the
    use of traditional tanh and sigmoid layers with ReLU. Krizhevsky describes in
    his paper how these changes, along with some training innovations and the use
    of GPUs, made training such a deep network tractable.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图4.1*中检查AlexNet结构时，我们可以看到，AlexNet在精神上与我们在[第3章](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml)中看到的LeNet模型相似，*训练网络*。然而，与LeNet相比，AlexNet有更多的卷积层和末端的全连接层。此外，它还用ReLU代替了传统的tanh和sigmoid层。Krizhevsky在他的论文中描述了这些变化，以及一些训练创新和GPU的使用，如何使得训练这样一个深层网络变得可行。
- en: In the rest of this chapter, we will use AlexNet as the example model to learn
    how to understand Caffe and Caffe2 network description languages, and how to convert
    between the two.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将使用AlexNet作为示例模型，学习如何理解Caffe和Caffe2网络描述语言，并学习如何在两者之间转换。
- en: Building and installing Caffe
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建与安装Caffe
- en: The version of Caffe maintained by BVLC can be freely downloaded from [https://github.com/BVLC/caffe](https://github.com/BVLC/caffe).
    A GPU-optimized fork of Caffe maintained by NVIDIA can be downloaded from [https://github.com/NVIDIA/caffe](https://github.com/NVIDIA/caffe).
    For the remainder of this discussion, we will use BVLC Caffe, though NVIDIA Caffe
    should also build and work similarly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: BVLC 维护的 Caffe 版本可以从 [https://github.com/BVLC/caffe](https://github.com/BVLC/caffe)
    免费下载。由 NVIDIA 维护的 GPU 优化版 Caffe 可以从 [https://github.com/NVIDIA/caffe](https://github.com/NVIDIA/caffe)
    下载。接下来的讨论中，我们将使用 BVLC 版本的 Caffe，尽管 NVIDIA 的 Caffe 也应能成功构建并类似地工作。
- en: Note that Caffe offers building using CMake or Make. We look at the CMake build
    process in this book. If you want Caffe to use the GPU, you will need to have
    CUDA and cuDNN libraries already installed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Caffe 提供了使用 CMake 或 Make 进行构建。在本书中，我们将讨论 CMake 构建过程。如果你希望 Caffe 使用 GPU，你需要提前安装
    CUDA 和 cuDNN 库。
- en: Installing Caffe prerequisites
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Caffe 的前置依赖
- en: 'Install the following prerequisites:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装以下前置依赖：
- en: 'First, install the libraries that Caffe depends on:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，安装 Caffe 所依赖的库：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For BLAS on CPU, the best performance comes from installing Intel''s MKL libraries.
    (Steps to install MKL were described in [Chapter 1](5f3ecee9-fc6c-4a3f-bc8f-3bffb7cb2269.xhtml),
    *Introduction and Installation*.) If you do not have MKL, or you are not using
    an Intel CPU, then you can install either ATLAS or OpenBLAS:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 CPU 上的 BLAS，最佳性能来自安装英特尔的 MKL 库。（MKL 的安装步骤已在[第1章](5f3ecee9-fc6c-4a3f-bc8f-3bffb7cb2269.xhtml)，“*简介与安装*”中描述。）如果没有
    MKL，或者你不使用英特尔 CPU，那么可以安装 ATLAS 或 OpenBLAS：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To build the Python interface to Caffe, make sure these packages are installed:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建 Python 接口以使用 Caffe，请确保已安装以下软件包：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now ready to build Caffe from source.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备从源代码构建 Caffe。
- en: Building Caffe
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Caffe
- en: 'To build Caffe, observe the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Caffe，请按照以下步骤操作：
- en: 'Since we have chosen to use CMake, the building process is simple and straightforward:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们选择使用 CMake，构建过程既简单又直接：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To build and run the Caffe unit tests, execute the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建并运行 Caffe 单元测试，请执行以下命令：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This can take a substantial amount of time to finish.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要相当长的时间才能完成。
- en: 'To build the Python interface to Caffe, execute the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建 Caffe 的 Python 接口，请执行以下命令：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By default, the install directory will be a subdirectory inside the `build`
    directory. Add this `build/install/python` path to the `PYTHONPATH` environment
    variable before you import Caffe into Python.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，安装目录将是 `build` 目录下的一个子目录。将此 `build/install/python` 路径添加到 `PYTHONPATH`
    环境变量中，然后再将 Caffe 导入 Python。
- en: Caffe model file formats
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffe 模型文件格式
- en: 'To be able to use Caffe models in Caffe2, we first need to understand the model
    file formats that Caffe can export to. Caffe exports a trained model into two
    files, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Caffe2 中使用 Caffe 模型，我们首先需要了解 Caffe 能够导出的模型文件格式。Caffe 会将训练好的模型导出为两个文件，如下所示：
- en: The structure of the neural network is stored as a `.prototxt` file
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神经网络的结构以 `.prototxt` 文件形式存储
- en: The weights of the layers of the neural network are stored as a `.caffemodel`
    file
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神经网络各层的权重存储为 `.caffemodel` 文件
- en: Prototxt file
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prototxt 文件
- en: 'The prototxt is a text file that holds information about the structure of the
    neural network:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: prototxt 是一个文本文件，包含神经网络结构的信息：
- en: A list of layers in the neural network
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 神经网络中各层的列表
- en: The parameters of each layer, such as its name, type, input dimensions, and
    output dimensions
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一层的参数，如其名称、类型、输入维度和输出维度
- en: The connections between the layers
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各层之间的连接
- en: Caffe exports a neural network by serializing it using the Google **Protocol
    Buffers** (**ProtoBuf**) serialization library. The prototxt file is a serialization
    of the neural network structure in the ProtoBuf text format.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe 通过使用 Google **协议缓冲区**（**Protocol Buffers**, **ProtoBuf**）序列化库将神经网络导出为序列化格式。prototxt
    文件是神经网络结构在 ProtoBuf 文本格式中的序列化。
- en: We can look at the prototxt files of some of the popular CNN networks in the
    `models` directory in the Caffe source code. (Refer to the *Building and Installing
    Caffe* section on how to get Caffe source code.) You might find several prototxt
    filenames there, each of which has a different purpose.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以查看 Caffe 源代码中 `models` 目录下的一些流行 CNN 网络的 prototxt 文件。（参见*构建与安装 Caffe*部分，了解如何获取
    Caffe 源代码。）你可能会在其中找到几个 prototxt 文件名，每个文件名都有不同的用途。
- en: 'Here is a description of what some of the typical Caffe prototxt filenames
    mean:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些典型 Caffe prototxt 文件名的含义：
- en: '`deploy.prototxt`: This file describes the structure of the network that can
    be deployed for inference. It does not include the extra layers that are typically
    required for training a network. (We looked at extra layers or operators added
    to network for training in [Chapter 3](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml),
    *Training Networks*.) This is the prototxt file we typically want, if we wish
    to take a pretrained Caffe model and use it for inference in Caffe2.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy.prototxt`：这个文件描述了可以用于推理的网络结构。它不包括通常用于训练网络的额外层。（我们在[第 3 章](3c2dd7d3-b762-49a3-a5d6-0b791eadadb2.xhtml)，*训练网络*中查看了为训练网络添加的额外层或操作符。）这是我们通常希望的
    prototxt 文件，如果我们希望将预训练的 Caffe 模型用于 Caffe2 中的推理。'
- en: '`train_val.prototxt`: This file describes the structure of the network that
    was used for training. It includes all the extra layers that were added to aid
    in the training and validation process. This is the prototxt file we typically
    want, if we wish to take a pretrained Caffe model and continue training or fine-tuning
    it in Caffe2.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train_val.prototxt`：这个文件描述了用于训练的网络结构。它包括所有为帮助训练和验证过程而添加的额外层。如果我们希望将预训练的 Caffe
    模型继续训练或微调到 Caffe2 中，这是我们通常需要的 prototxt 文件。'
- en: Now, let's look at AlexNet as an example. (AlexNet was introduced earlier in
    this chapter.) A version of the AlexNet pretrained model is available in the Caffe
    source code in the `models/bvlc_alexnet` directory.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们以 AlexNet 为例。（AlexNet 在本章前面介绍过。）AlexNet 预训练模型的一个版本可以在 Caffe 源代码中的 `models/bvlc_alexnet`
    目录下找到。
- en: 'Here are the first two layers from the `deploy.prototxt` file of AlexNet:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 AlexNet 的 `deploy.prototxt` 文件中的前两层：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can see that the `prototxt` file format is easy to read and modify by humans.
    Note that the network is named `"AlexNet"`. We can see two layers in the preceding
    code snippet named `"data"` and `"conv1"`. The `"data"` layer is an `Input` layer
    and we can see that it requires input to be of dimensions ![](img/c45f6c81-95fe-4555-ad87-e7ad610e6c4a.png).
    The `"conv1"` layer is a `Convolution` layer and we can see many of its parameters,
    including a kernel size of ![](img/09207daa-bfd8-4c9e-b002-9670976ba764.png) and
    stride of size ![](img/4a34b802-04cc-4c4e-8a3d-382d36dcabfd.png).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，`prototxt` 文件格式易于人类阅读和修改。请注意，网络的名称是 `"AlexNet"`。我们可以在前面的代码片段中看到两个名为 `"data"`
    和 `"conv1"` 的层。`"data"` 层是一个 `Input` 层，我们可以看到它要求输入的尺寸是 ![](img/c45f6c81-95fe-4555-ad87-e7ad610e6c4a.png)。`"conv1"`
    层是一个 `Convolution` 层，我们可以看到它的许多参数，包括核大小为 ![](img/09207daa-bfd8-4c9e-b002-9670976ba764.png)
    和步幅为 ![](img/4a34b802-04cc-4c4e-8a3d-382d36dcabfd.png)。
- en: The syntax used for describing a neural network as a Caffe prototxt file is,
    itself, described in a `caffe.proto` text file. This is a file written in the
    Google protocol buffer language. You can find this file in the Caffe source code
    at `src/caffe/proto/caffe.proto`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用于描述神经网络的 Caffe prototxt 文件的语法，本身是在一个 `caffe.proto` 文本文件中描述的。这个文件是用 Google 协议缓冲语言编写的。你可以在
    Caffe 源代码中的 `src/caffe/proto/caffe.proto` 找到这个文件。
- en: 'As an example, here is a partial description of `ConvolutionParameter` from
    the `caffe.proto` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，下面是来自 `caffe.proto` 文件的 `ConvolutionParameter` 部分描述：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By looking at this, we can start to understand the convolution layer parameters
    in the `deploy.prototxt` easily, for example, what the parameters `num_outputs`,
    `kernel_size`, and `stride` mean.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看这个，我们可以开始轻松理解 `deploy.prototxt` 中的卷积层参数，例如，`num_outputs`、`kernel_size` 和
    `stride` 这些参数的含义。
- en: In this way, you can understand any Caffe prototxt file that you come across.
    It is essentially a list of layers, with names and parameters and links to previous
    and later layers. For information about a particular layer type, refer to the
    `caffe.proto` file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你可以理解遇到的任何 Caffe prototxt 文件。它本质上是一个层列表，包含层的名称和参数，并链接到前后层。有关特定层类型的信息，请参阅
    `caffe.proto` 文件。
- en: Caffemodel file
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffemodel 文件
- en: The `caffemodel` file is a binary file that holds the weights of the layers
    of a neural network. This file is a serialization of the trained neural network
    in the **ProtoBuf binary format**. A binary format is used because of the need
    to store floating point or integer values that represent the weights. This file
    is typically large, in the order of hundreds of megabytes, and so it typically
    needs to be downloaded separately.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`caffemodel` 文件是一个二进制文件，保存了神经网络各层的权重。这个文件是训练好的神经网络的 **ProtoBuf 二进制格式** 序列化。使用二进制格式是因为需要存储表示权重的浮动点或整数值。这个文件通常很大，通常达到数百兆字节，因此通常需要单独下载。'
- en: 'For each of the popular models that Caffe provides along with its source code,
    there is a corresponding `readme.md` file that has the details required to download
    the `caffemodel` file for that network. As an example, Figure 4.2 shows the `readme.md`
    of the AlexNet model:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Caffe 提供的每个流行模型，其源代码中都有相应的 `readme.md` 文件，其中包含下载该网络的 `caffemodel` 文件所需的详细信息。例如，图
    4.2 显示了 AlexNet 模型的 `readme.md`：
- en: '![](img/23c3070a-8b79-40b6-8d40-1e0719b290f9.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23c3070a-8b79-40b6-8d40-1e0719b290f9.png)'
- en: 'Figure 4.2: readme.md of the AlexNet model'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：AlexNet 模型的 readme.md
- en: Downloading Caffe model files
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 Caffe 模型文件
- en: 'Caffe provides a Python script in `scripts/download_model_binary.py` in its
    source code that can be used to download the caffemodel files of a model. This
    script needs to be provided with the model directory as input. For example, to
    download the `caffemodel` file for AlexNet, we can invoke the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe 在其源代码中提供了一个 Python 脚本 `scripts/download_model_binary.py`，用于下载模型的 caffemodel
    文件。此脚本需要提供模型目录作为输入。例如，要下载 AlexNet 的 `caffemodel` 文件，可以调用以下命令：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This script looks for a `readme.md` in the input model directory (like the one
    in *Figure 4.2*), figures out the caffemodel URL from the preamble in the `readme.md`,
    downloads the `caffemodel` file, and ensures that the downloaded file is correct
    by matching its SHA1 hash to the hash provided in the preamble.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本在输入模型目录中寻找 `readme.md`（类似于 *Figure 4.2* 中的文件），从 `readme.md` 的序言中找出 caffemodel
    的 URL，下载 `caffemodel` 文件，并通过将其 SHA1 哈希与序言中提供的哈希进行匹配，确保下载文件正确。
- en: Caffe2 model file formats
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Caffe2 模型文件格式
- en: 'To be able to use Caffe models in Caffe2, we also need to understand the model
    file formats that Caffe2 can import. Just like Caffe, Caffe2 also uses Protobuf
    for serialization and deserialization of its model files. Caffe2 imports a trained
    model from two files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够在 Caffe2 中使用 Caffe 模型，我们还需要了解 Caffe2 可以导入的模型文件格式。与 Caffe 类似，Caffe2 也使用 Protobuf
    对其模型文件进行序列化和反序列化。Caffe2 从两个文件导入训练好的模型：
- en: The structure of the neural network stored as a `predict_net.pb` file or as
    a `predict_net.pbtxt` file
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神经网络的结构以 `predict_net.pb` 文件或 `predict_net.pbtxt` 文件存储
- en: The weights of the operators of the neural network stored as a `init_net.pb`
    file
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神经网络运算符的权重存储为 `init_net.pb` 文件
- en: predict_net file
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: predict_net 文件
- en: The `predict_net` binary file, which is usually named `predict_net.pb`, holds
    the list of operators in the neural network, the parameters of each operator,
    and the connections between the operators. This file is a serialization of the
    neural network structure in the ProtoBuf binary format.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`predict_net` 二进制文件通常命名为 `predict_net.pb`，保存神经网络中的运算符列表、每个运算符的参数以及运算符之间的连接。该文件以
    ProtoBuf 二进制格式序列化神经网络结构。'
- en: We can observe that Caffe2 uses a binary serialization file compared to a text
    serialization file used by Caffe. This is not too much trouble in Caffe2 because
    it has a Python API that can be used to easily understand the network structure
    after importing the file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到，与 Caffe 使用的文本序列化文件相比，Caffe2 使用了二进制序列化文件。在 Caffe2 中，这并不会带来太多麻烦，因为它有一个
    Python API，可以在导入文件后轻松理解网络结构。
- en: Optionally, we can also use `predict_net` text file, usually named `predict_net.pbtxt`,
    which is a text file that is equivalent to the `predict_net` binary file, but
    stored in the ProtoBuf text format.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们还可以使用 `predict_net` 文本文件，通常命名为 `predict_net.pbtxt`，这是一个等效于 `predict_net`
    二进制文件的文本文件，但以 ProtoBuf 文本格式存储。
- en: 'Continuing with our AlexNet example, the first convolution layer of that network
    would appear as a convolution operator in `predict_net.pbtxt`, shown as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的 AlexNet 示例，该网络的第一个卷积层将出现在 `predict_net.pbtxt` 中，显示如下：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note how the `predict_net` text file is quite easy for humans to read, just
    like the prototxt text file of Caffe.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `predict_net` 文本文件如何对人类非常易读，就像 Caffe 的 prototxt 文本文件一样。
- en: The syntax used for describing a neural network as a Caffe2 `predict_net` file
    is itself described in a `caffe2.proto` text file. This is a file written in the
    Google protocol buffer language. You can find this file in the Caffe2 source code
    at `proto/caffe2.proto`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 Caffe2 `predict_net` 文件的语法本身在 `caffe2.proto` 文本文件中描述。这是一个使用 Google protocol
    buffer 语言编写的文件。您可以在 Caffe2 源代码的 `proto/caffe2.proto` 中找到此文件。
- en: 'Here is the definition of the operator from `caffe2.proto`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是来自 `caffe2.proto` 的运算符定义：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can see how Caffe2 defines an operator in more general terms, instead of
    focusing on defining each and every operator (or layer) explicitly as Caffe did.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，Caffe2 在更一般的术语中定义了操作符，而不是像 Caffe 那样明确地定义每个操作符（或层）。
- en: init_net file
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: init_net 文件
- en: The `init_net binary file`, which is typically named `init_net.pb`, holds the
    weights of the operators of a neural network. This file is a serialization of
    the trained neural network in the ProtoBuf binary format. Just like the Caffe
    `caffemodel` file, this file too can be typically large, in the order of hundreds
    of megabytes. It is named `init_net` because the weights inside the file can be
    used to initialize the operators in the network.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`init_net 二进制文件`，通常命名为 `init_net.pb`，包含神经网络操作符的权重。该文件是经过训练的神经网络在 ProtoBuf 二进制格式中的序列化。与
    Caffe 的 `caffemodel` 文件类似，这个文件通常也会很大，通常在几百兆字节的数量级。之所以命名为 `init_net`，是因为文件中的权重可用于初始化网络中的操作符。'
- en: Converting a Caffe model to Caffe2
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Caffe 模型转换为 Caffe2
- en: To be able to use a Caffe model in Caffe2, we need to convert it from its Caffe
    formats to Caffe2 file formats. Caffe2 provides a script named `python/caffe_translator.py`
    that can be used for this purpose.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Caffe2 中使用 Caffe 模型，我们需要将其从 Caffe 格式转换为 Caffe2 文件格式。Caffe2 提供了一个名为 `python/caffe_translator.py`
    的脚本，可用于此目的。
- en: 'For example, we can convert our AlexNet files from Caffe to Caffe2 by invoking
    the script as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过如下方式将 AlexNet 文件从 Caffe 转换为 Caffe2：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Running this script generates three files, `predict_net.pb`, `predict_net.pbtxt`,
    and `init_net.pb`, for AlexNet:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本会生成三个文件，分别是 `predict_net.pb`、`predict_net.pbtxt` 和 `init_net.pb`，用于 AlexNet：
- en: '![](img/a9e99589-e2ad-46ee-94e0-e5fab9850175.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9e99589-e2ad-46ee-94e0-e5fab9850175.png)'
- en: 'Figure 4.3: AlexNet network structure in Caffe2'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：Caffe2 中的 AlexNet 网络结构
- en: '*Figure 4.3* shows the AlexNet network structure in Caffe2 after it was converted
    from the Caffe model. This graph visualization was generated using the `Caffe2
    net_drawer.py` tool that utilizes GraphViz for the network layout. You can find
    more information about Caffe2 model visualization using `net_drawer` in [Chapter
    7](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml), *Caffe2 at the Edge and in the
    cloud*.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4.3* 显示了将 AlexNet 从 Caffe 模型转换为 Caffe2 后的网络结构图。该图的可视化是使用 `Caffe2 net_drawer.py`
    工具生成的，该工具利用 GraphViz 来布局网络。你可以在 [第 7 章](91e4cdcf-24f6-4426-ac95-b6845c020d83.xhtml)，*Caffe2
    在边缘和云端* 中找到有关 Caffe2 模型可视化的更多信息。'
- en: From the diagram, we can see that every Caffe layer is replaced with a Caffe2
    operator. The operators are drawn in rectangles and both weights and data tensors
    are drawn as elongated octagons. By looking at the first convolution operator,
    we note how it has three tensors—one for the data (named `data`), and two for
    the weights and bias for that operator (named `conv1_w` and `conv1_b`).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中可以看出，每个 Caffe 层都被替换成了 Caffe2 操作符。操作符以矩形表示，权重和数据张量以延长的八边形表示。通过查看第一个卷积操作符，我们注意到它有三个张量——一个用于数据（命名为
    `data`），两个用于该操作符的权重和偏置（分别命名为 `conv1_w` 和 `conv1_b`）。
- en: Converting a Caffe2 model to Caffe
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Caffe2 模型转换为 Caffe
- en: In the previous sections in this chapter, we focused on how to convert a Caffe
    model to a Caffe2 model. Since Caffe is not being actively developed now, and
    Caffe2 was, in part, created to supersede Caffe2, this path of migrating a Caffe
    model to Caffe2 is what the majority of users are interested in.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前几节中，我们主要讨论了如何将 Caffe 模型转换为 Caffe2 模型。由于 Caffe 当前没有积极开发，而 Caffe2 部分是为了取代
    Caffe2 创建的，因此大多数用户关注的就是将 Caffe 模型迁移到 Caffe2 的路径。
- en: However, if you need to use a Caffe2 model in Caffe, then that process is bound
    to be more arduous. There does not seem to be any direct way to convert a Caffe2
    model to Caffe. If you are sure that the Caffe2 operators and their arguments
    are fully supported in Caffe, then you could try going through an intermediary
    format such as ONNX (see [Chapter 5](4481e225-7882-4625-9d42-63ba41e74b4f.xhtml),
    *Working with Other Frameworks*).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你需要在 Caffe 中使用 Caffe2 模型，那么这个过程会更为艰难。目前似乎没有直接的方法将 Caffe2 模型转换为 Caffe。如果你确定
    Caffe2 的操作符及其参数在 Caffe 中是完全支持的，那么你可以尝试通过一个中间格式，如 ONNX（参见 [第 5 章](4481e225-7882-4625-9d42-63ba41e74b4f.xhtml)，*与其他框架的协作*）来进行转换。
- en: 'If the ONNX route is not feasible, then you might have to resort to executing
    the following tasks manually:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 ONNX 路径不可行，那么你可能需要手动执行以下任务：
- en: Export Caffe2 operators, arguments, and weights of the model
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出 Caffe2 操作符、参数和模型的权重
- en: Create a Caffe network manually, matching Caffe2 operators to corresponding
    Caffe layers
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动创建一个 Caffe 网络，将 Caffe2 操作符与相应的 Caffe 层匹配
- en: Implement new Caffe layers in C++ if there isn't a layer matching an operator
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有与操作符匹配的层，使用 C++ 实现新的 Caffe 层
- en: Load weights manually to Caffe layers and use this Caffe network for inference
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动加载权重到 Caffe 层并使用该 Caffe 网络进行推理
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the Caffe deep learning framework and examined
    the relationship between Caffe and Caffe2\. We examined the Caffe and Caffe2 model
    file formats. Using AlexNet as an example network, we looked at how to convert
    a Caffe model to Caffe2 format. Finally, we looked at the difficulties in converting
    a Caffe2 model to Caffe.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Caffe 深度学习框架，并探讨了 Caffe 和 Caffe2 之间的关系。我们研究了 Caffe 和 Caffe2 的模型文件格式。以
    AlexNet 为例网络，我们查看了如何将 Caffe 模型转换为 Caffe2 格式。最后，我们探讨了将 Caffe2 模型转换为 Caffe 的难点。
- en: Caffe is a DL framework that has reached its end of life and no new features
    are being added to it. In the next chapter, we will look at contemporary DL frameworks,
    such as TensorFlow and PyTorch, and see how we can exchange models to and from
    Caffe2 and these other frameworks.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Caffe 是一个深度学习框架，已经进入生命周期的尾声，不再添加新特性。在下一章中，我们将讨论当代深度学习框架，如 TensorFlow 和 PyTorch，并了解如何在
    Caffe2 和这些其他框架之间交换模型。
