- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: 1\. Introduction to Machine Learning with TensorFlow
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 使用 TensorFlow 进行机器学习简介
- en: 'Activity 1.01: Performing Tensor Addition in TensorFlow'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1.01：在 TensorFlow 中执行张量加法
- en: '**Solution:**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**解答：**'
- en: 'Import the TensorFlow library:'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 TensorFlow 库：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create two tensors with a rank `0` using TensorFlow''s `Variable` class:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 TensorFlow 的 `Variable` 类创建两个秩为 `0` 的张量：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new variable to add the two scalars created and print the result:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新变量，将创建的两个标量相加，并打印结果：
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will result in the following output:'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE3]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This output shows the total revenue for `Product A` at `Location X`.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该输出显示 `产品 A` 在 `地点 X` 的总收入。
- en: 'Create two tensors, a scalar of rank `0` and a vector of rank `1`, using TensorFlow''s
    `Variable` class:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 TensorFlow 的 `Variable` 类创建两个张量，一个是秩为 `0` 的标量，另一个是秩为 `1` 的向量：
- en: '[PRE4]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new variable as the sum of the scalar and vector created and print
    the result:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新变量，将创建的标量和向量相加，并打印结果：
- en: '[PRE5]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will result in the following output:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE6]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The result is the new sales goal for `Salesperson 1` at `Location X`.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果是 `销售员 1` 在 `地点 X` 的新销售目标。
- en: 'Now create three tensors with a rank of 2, representing the revenue for each
    product, salesperson, and location, using TensorFlow''s `Variable` class:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用 TensorFlow 的 `Variable` 类创建三个秩为 2 的张量，表示每个产品、销售人员和地点的收入：
- en: '[PRE7]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a new variable as the sum of the three tensors created and print the result:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新变量，作为三个张量的和，并打印结果：
- en: '[PRE8]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will result in the following output:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 1.42: The output of the matrix summation as a NumPy variable'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.42：矩阵求和结果作为 NumPy 变量的输出'
- en: '](img/B16341_01_42.jpg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_01_42.jpg)'
- en: 'Figure 1.42: The output of the matrix summation as a NumPy variable'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.42：矩阵求和结果作为 NumPy 变量的输出
- en: The result represents the total revenue for each product at each location.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表示每个产品在每个地点的总收入。
- en: In this activity, you performed addition on tensors with ranks `0`, `1`, and
    `2`, and showed that scalars (tensors of rank 0) can be added to tensors of other
    ranks, known as scalar addition.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本活动中，你对秩为 `0`、`1` 和 `2` 的张量进行了加法运算，并展示了标量（秩为 0 的张量）可以与其他秩的张量相加，这被称为标量加法。
- en: 'Activity 1.02: Performing Tensor Reshaping and Transposition in TensorFlow'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1.02：在 TensorFlow 中执行张量重塑和转置
- en: '**Solution:**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**解答：**'
- en: 'Import the TensorFlow library:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 TensorFlow 库：
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a one-dimensional array with 24 elements using TensorFlow''s `Variable`
    class. Verify the shape of the matrix:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 TensorFlow 的 `Variable` 类创建一个包含 24 个元素的单维数组。验证矩阵的形状：
- en: '[PRE10]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will result in the following output:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE11]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Reshape the matrix so that it has 12 rows and 2 columns using TensorFlow''s
    `reshape` function. Verify the shape of the new matrix:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 TensorFlow 的 `reshape` 函数将矩阵重塑为 12 行 2 列。验证新矩阵的形状：
- en: '[PRE12]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will result in the following output:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE13]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Reshape the matrix so that it has a shape of `3x4x2` using TensorFlow''s `reshape`
    function. Verify the shape of the new matrix:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 TensorFlow 的 `reshape` 函数将矩阵重塑为 `3x4x2` 的形状。验证新矩阵的形状：
- en: '[PRE14]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will result in the following output:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE15]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Verify that the rank of this new tensor is of rank `3` by using TensorFlow''s
    `rank` function:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用 TensorFlow 的 `rank` 函数验证这个新张量的秩为 `3`：
- en: '[PRE16]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will result in the following output:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE17]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Transpose the tensor created in *step 3*. Verify the shape of the new tensor:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转置 *步骤 3* 中创建的张量。验证新张量的形状：
- en: '[PRE18]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will result in the following output:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE19]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this activity, you have practiced performing tensor reshaping and transposition
    on tensors of various ranks and learned how to change the rank of a tensor by
    reshaping it. You simulated the grouping of 24 school children into class projects
    of varying sizes using TensorFlow's `reshape` and `transpose` functions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本活动中，你练习了对各种秩的张量进行重塑和转置，并学习了如何通过重塑改变张量的秩。你使用 TensorFlow 的 `reshape` 和 `transpose`
    函数模拟了将 24 个小学生分组为不同大小的班级项目。
- en: 'Activity 1.03: Applying Activation Functions'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 1.03：应用激活函数
- en: '**Solution:**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**解答：**'
- en: 'Import the TensorFlow library:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 TensorFlow 库：
- en: '[PRE20]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a `3x4` tensor as an input in which the rows represent the sales from
    various sales representatives, the columns represent various vehicles available
    at the dealership, and values represent the average percentage difference from
    the MSRP. The values can be positive or negative depending on whether the salesperson
    was able to sell for more or less than the MSRP:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`3x4`的张量作为输入，其中行表示来自不同销售代表的销售数据，列表示经销商提供的各种汽车，值表示与建议零售价（MSRP）的平均百分比差异。根据销售人员是否能够以高于或低于MSRP的价格销售，值可以是正数或负数：
- en: '[PRE21]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `4x1` `weights` tensor with a shape of `4x1` representing the MSRP
    of the cars:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`4x1`的`weights`张量，形状为`4x1`，表示汽车的建议零售价（MSRP）：
- en: '[PRE22]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a bias tensor of size `3x1` representing the fixed costs associated
    with each salesperson:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个大小为`3x1`的偏置张量，表示与每个销售人员相关的固定成本：
- en: '[PRE23]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Matrix multiply the input by the weight to show the average deviation from
    the MSRP on all cars and add the bias to subtract the fixed costs of the salesperson:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输入矩阵与权重进行矩阵乘法，显示所有汽车的平均偏差值，并加上偏置来减去销售人员的固定成本：
- en: '[PRE24]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following is the output:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Figure 1.43: The output of the matrix multiplication'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.43: 矩阵乘法的输出'
- en: '](img/B16341_01_43.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_01_43.jpg)'
- en: 'Figure 1.43: The output of the matrix multiplication'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 1.43: 矩阵乘法的输出'
- en: 'Apply a ReLU activation function to highlight the net-positive salespeople:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用ReLU激活函数来突出显示净正销售的销售人员：
- en: '[PRE25]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This will result in the following output:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 1.44: The output after applying the activation function'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 1.44: 应用激活函数后的输出'
- en: '](img/B16341_01_44.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_01_44.jpg)'
- en: 'Figure 1.44: The output after applying the activation function'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.44: 应用激活函数后的输出'
- en: This result shows the result of salespeople that had net-positive sales; those
    with net-negative sales are zeroed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果显示了那些有净正销售的销售人员的结果；那些净负销售的销售人员被置为零。
- en: In this activity, you performed tensor multiplication on tensors of various
    sizes, tensor addition, and also applied an activation function. You began by
    defining the tensors, followed by matrix multiplying two of them, then adding
    a bias tensor, and finally applying an activation function to the result.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你对不同大小的张量进行了张量乘法、张量加法，并且应用了激活函数。你首先定义了张量，然后对其中两个进行了矩阵乘法，接着加上了一个偏置张量，最后对结果应用了激活函数。
- en: 2\. Loading and Processing Data
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 加载和处理数据
- en: 'Activity 2.01: Loading Tabular Data and Rescaling Numerical Fields with a MinMax
    Scaler'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 2.01：加载表格数据并使用MinMaxScaler重新缩放数值字段
- en: '**Solution:**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**解答：**'
- en: Open a new Jupyter notebook to implement this activity. Save the file as `Activity2-01.ipnyb`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter笔记本来实现此活动。将文件保存为`Activity2-01.ipnyb`。
- en: 'In a new Jupyter Notebook cell, import the pandas library, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的Jupyter Notebook单元格中，导入pandas库，如下所示：
- en: '[PRE26]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a new pandas DataFrame named `df` and read the `Bias_correction_ucl.csv`
    file into it. Examine whether your data is properly loaded by printing the resultant
    DataFrame:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的pandas DataFrame，命名为`df`，并将`Bias_correction_ucl.csv`文件读取到其中。通过打印结果DataFrame来检查数据是否正确加载：
- en: '[PRE27]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you change the path (highlighted) to the CSV file based on its location
    on your system. If you're running the Jupyter notebook from the same directory
    where the CSV file is stored, you can run the preceding code without any modification.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你根据文件在系统上的位置更改路径（高亮部分）。如果你在存储CSV文件的同一目录中运行Jupyter笔记本，可以不做任何修改直接运行上述代码。
- en: 'Drop the `date` column using the `drop` method. Since you''re dropping the
    columns, pass `1` to the `axis` argument and `True` to the `inplace` argument:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`drop`方法删除`date`列。由于你正在删除列，请将`1`传递给`axis`参数，将`True`传递给`inplace`参数：
- en: '[PRE28]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Plot a histogram of the `Present_Tmax` column that represents the maximum temperature
    across dates and weather stations across the dataset:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制`Present_Tmax`列的直方图，表示数据集中不同日期和气象站的最高温度：
- en: '[PRE29]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output will be as follows:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.20: A Temperature versus Frequency histogram of the Present_Tmax
    column'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.20: Present_Tmax列的温度与频率的直方图'
- en: '](img/B16341_02_20.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_02_20.jpg)'
- en: 'Figure 2.20: A Temperature versus Frequency histogram of the Present_Tmax column'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 2.20: Present_Tmax列的温度与频率的直方图'
- en: The resultant histogram shows the distribution of values for the `Present_Tmax`
    column.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果直方图显示了`Present_Tmax`列值的分布。
- en: 'Import `MinMaxScaler` and use it to fit and transform the feature DataFrame:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`MinMaxScaler`并使用它来拟合和转换特征DataFrame：
- en: '[PRE30]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Plot a histogram of the transformed `Present_Tmax` column:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制变换后的 `Present_Tmax` 列的直方图：
- en: '[PRE31]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output will be as follows:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.21: A histogram of the rescaled Present_Tmax column'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.21：重新缩放的 `Present_Tmax` 列的直方图'
- en: '](img/B16341_02_21.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_02_21.jpg)'
- en: 'Figure 2.21: A histogram of the rescaled Present_Tmax column'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21：重新缩放的 `Present_Tmax` 列的直方图
- en: The resultant histogram shows that the temperature values range from `0` to
    `1`, as evidenced by the range on the *x* axis of the histogram. By using `MinMaxScaler`,
    the values will always have a minimum value of `0` and a maximum value of `1`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的直方图显示温度值范围从 `0` 到 `1`，这一点从直方图的 *x* 轴范围可以看出。通过使用 `MinMaxScaler`，这些值将始终保持最小值为
    `0`，最大值为 `1`。
- en: In this activity, you have performed some further preprocessing of the numerical
    fields. Here, you scaled the numerical fields so that they have a minimum value
    of `0` and a maximum value of `1`. This could be beneficial over the standard
    scaler if the numerical fields are not normally distributed. It also ensures the
    resulting fields are bound between a minimum and maximum value.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次活动中，您进一步对数值字段进行了预处理。在这里，您对数值字段进行了缩放，使其最小值为 `0`，最大值为 `1`。如果数值字段不是正态分布的，这比标准缩放器更有用。它还确保结果字段限制在最小值和最大值之间。
- en: 'Activity 2.02: Loading Image Data for Batch Processing'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 2.02：加载用于批处理的图像数据
- en: '**Solution:**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook to implement this activity. Save the file as `Activity2-02.ipnyb`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter Notebook 来实现此活动。将文件保存为 `Activity2-02.ipnyb`。
- en: 'In a new Jupyter Notebook cell, import the `ImageDataGenerator` class from
    Keras'' preprocessing package:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的 Jupyter Notebook 单元格中，导入 Keras 的预处理包中的 `ImageDataGenerator` 类：
- en: '[PRE32]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Instantiate the `ImageDataGenerator` class and pass the `rescale` argument
    with a value of `1/255` to convert image values so that they''re between `0` and
    `1`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化 `ImageDataGenerator` 类，并传入 `rescale` 参数，值为 `1/255`，以将图像值转换为介于 `0` 和 `1`
    之间：
- en: '[PRE33]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Use the data generator''s `flow_from_directory` method to direct the data generator
    to the image data. Pass in the arguments of the target size, the batch size, and
    the class mode:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据生成器的 `flow_from_directory` 方法将数据生成器指向图像数据。传入目标大小、批量大小和类别模式等参数：
- en: '[PRE34]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a function to display the images in the batch:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来显示批次中的图像：
- en: '[PRE35]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Take a batch from the data generator and pass it to the function to display
    the images and their labels:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据生成器中获取一个批次，并将其传递给函数以显示图像及其标签：
- en: '[PRE36]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output will be as follows:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.22: Augmented images from a batch'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.22：从批次中增强的图像'
- en: '](img/B16341_02_22.jpg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_02_22.jpg)'
- en: 'Figure 2.22: Augmented images from a batch'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22：从批次中增强的图像
- en: he output shows a batch of 25 images and their respective labels that have been
    augmented by rotation, zooming, and shearing. The augmented images show the same
    objects but with different pixel values, which helps create more robust models.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了一个批次的 25 张图像及其各自的标签，这些图像通过旋转、缩放和剪切进行增强。增强后的图像显示了相同的物体，但具有不同的像素值，这有助于创建更强健的模型。
- en: 'Activity 2.03: Loading Audio Data for Batch Processing'
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 2.03：加载用于批处理的音频数据
- en: '**Solution:**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook to implement this activity. Save the file as `Activity2-03.ipnyb`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter Notebook 来实现此活动。将文件保存为 `Activity2-03.ipnyb`。
- en: 'In a new Jupyter Notebook cell, import the TensorFlow and `os` libraries:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的 Jupyter Notebook 单元格中，导入 TensorFlow 和 `os` 库：
- en: '[PRE37]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a function that will load and then return an audio file using TensorFlow''s
    `read_file` function followed by the `decode_wav` function, respectively. Return
    the transpose of the resultant tensor:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，使用 TensorFlow 的 `read_file` 函数加载音频文件，然后用 `decode_wav` 函数返回音频数据，最终返回结果张量的转置：
- en: '[PRE38]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Load in the paths to the audio data as a list using `os.list_dir`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `os.list_dir` 将音频数据的路径加载为列表：
- en: '[PRE39]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create a function that will take a dataset object, shuffle it, and load the
    audio using the function you created in *Step 2*. Then, apply the absolute value
    and the `log1p` function to the dataset. This function adds `1` to each value
    then takes the logarithm. Next, repeat the dataset object, batch it, and prefetch
    it with a buffer size equal to the batch size:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，接收数据集对象，对其进行洗牌，并使用在*步骤 2*中创建的函数加载音频数据。然后，将绝对值和 `log1p` 函数应用到数据集。此函数将每个值加
    `1`，然后取对数。接着，重复数据集对象，批量化，并使用等于批量大小的缓冲区大小预取数据：
- en: '[PRE40]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a dataset object using TensorFlow''s `from_tensor_slices` function and
    pass in the paths to the audio files. Then, apply the function you created in
    *Step 5* to the dataset object:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用TensorFlow的`from_tensor_slices`函数创建数据集对象，并传入音频文件的路径。然后，将你在*第5步*中创建的函数应用到数据集对象上：
- en: '[PRE41]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Take the first batch of the dataset and print it out:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取数据集的第一批数据并打印出来：
- en: '[PRE42]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output will look as follows:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.23: A batch of the audio data'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.23：音频数据的一批数据'
- en: '](img/B16341_02_23.jpg)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_02_23.jpg)'
- en: 'Figure 2.23: A batch of the audio data'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.23：音频数据的一批数据
- en: The output shows the first batch of MFCC spectrum values in tensor form.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出显示了第一批MFCC频谱值的张量形式。
- en: 'Plot the first audio file from the batch:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制第一批音频文件：
- en: '[PRE43]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The output will look as follows:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.24: A visual representation of the batch of the preprocessed audio
    data'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.24：预处理音频数据批次的可视化表示'
- en: '](img/B16341_02_24.jpg)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_02_24.jpg)'
- en: 'Figure 2.24: A visual representation of the batch of the preprocessed audio
    data'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24：预处理音频数据批次的可视化表示
- en: The preceding plot shows the preprocessed audio data. You can see that the values
    are non-negative, with a minimum value of `0`, and that the data is logarithmically
    scaled.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表展示了预处理后的音频数据。你可以看到，值是非负的，最小值为`0`，并且数据是以对数比例缩放的。
- en: 3\. TensorFlow Development
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. TensorFlow开发
- en: 'Activity 3.01: Using TensorBoard to Visualize Tensor Transformations'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 3.01：使用TensorBoard可视化张量变换
- en: '**Solution:**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Import the TensorFlow library and set a seed:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库并设置种子：
- en: '[PRE44]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Set the log directory and initialize a file writer object to write the trace:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置日志目录并初始化一个文件写入对象以写入追踪记录：
- en: '[PRE45]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a TensorFlow function to multiply two tensors and add a value of `1`
    to all elements in the resulting tensor using the `ones_like` function to create
    a tensor of the same shape as the result of the matrix multiplication. Then, apply
    a sigmoid function to each value of the tensor:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个TensorFlow函数，用于将两个张量相乘，并使用`ones_like`函数将`1`加到结果张量的所有元素中，`ones_like`函数创建一个与矩阵乘法结果相同形状的张量。然后，对张量的每个值应用sigmoid函数：
- en: '[PRE46]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create two tensors with the shape `5x5x5`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建形状为`5x5x5`的两个张量：
- en: '[PRE47]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Turn on graph tracing:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开启图形追踪：
- en: '[PRE48]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Apply the function to the two tensors and export the trace to the log directory:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该函数应用于两个张量，并将追踪记录导出到日志目录：
- en: '[PRE49]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Launch TensorBoard in the command line and view the graph in a browser:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行启动TensorBoard并在浏览器中查看图形：
- en: '[PRE50]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You should get something like the following image:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到如下图像：
- en: '![Figure 3.19: A visual representation of tensor transformation in TensorBoard'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.19：TensorBoard中张量变换的可视化表示'
- en: '](img/B16341_03_06.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_06.jpg)'
- en: 'Figure 3.19: A visual representation of tensor transformation in TensorBoard'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19：TensorBoard中张量变换的可视化表示
- en: The result represents the graph created for the tensor transformation. You can
    see in the bottom left at the beginning of the graph that a matrix multiplication
    is performed on the tensors named `x` and `y` on the node named `MatMul`. In the
    bottom right is the creation of the tensor using the `ones_like` function. The
    input nodes represent the shape of the tensor and the value, which is a constant
    value. Upon the creation of the two tensors, they are input into a node representing
    the addition function, after which the output is input to a node representing
    the application of the sigmoid function. The final nodes represent the creation
    of the output tensor.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表示为张量变换创建的图形。你可以看到，在图形的左下角，执行了矩阵乘法操作，操作的张量为命名为`x`和`y`的张量，位于名为`MatMul`的节点上。在右下角，使用`ones_like`函数创建了张量。输入节点表示张量的形状和常量值。创建两个张量后，它们被输入到一个表示加法函数的节点中，然后输出被输入到一个表示应用sigmoid函数的节点中。最终节点表示输出张量的创建。
- en: In this activity, you created functions for tensor transformation, and then
    presented a visual representation of the transformation in TensorBoard.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你创建了张量变换的函数，并在TensorBoard中展示了变换的可视化表示。
- en: 'Activity 3.02: Performing Word Embedding from a Pre-Trained Model from TensorFlow
    Hub'
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 3.02：从TensorFlow Hub使用预训练模型进行词嵌入
- en: '**Solution:**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Import TensorFlow and TensorFlow Hub and print the version of the library:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow和TensorFlow Hub并打印库的版本：
- en: '[PRE51]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You should get the versions of TensorFlow and TensorFlow Hub.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该获得TensorFlow和TensorFlow Hub的版本。
- en: '![Figure 3.20: The output of the versions of TensorFlow and TensorFlow Hub
    in Google Colab'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.20：Google Colab中TensorFlow和TensorFlow Hub的版本输出'
- en: '](img/B16341_03_20.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_20.jpg)'
- en: 'Figure 3.20: The output of the versions of TensorFlow and TensorFlow Hub in
    Google Colab'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.20：Google Colab中TensorFlow和TensorFlow Hub的版本输出
- en: 'Set the handle for the module for the universal sentence encoder:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置通用句子编码器模块的句柄：
- en: '[PRE52]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Use the TensorFlow Hub `KerasLayer` class to create a hub layer, passing in
    the following arguments: `module_handle`, `input_shape`, and `dtype`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用TensorFlow Hub的`KerasLayer`类创建hub层，传入以下参数：`module_handle`、`input_shape`和`dtype`：
- en: '[PRE53]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a list containing a string to encode with the encoder:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含待编码字符串的列表：
- en: '[PRE54]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Apply `hub_layer` to the text to embed the sentence as a vector:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`hub_layer`到文本上，将句子嵌入为一个向量：
- en: '[PRE55]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You should get the following output:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 3.21: The output of the embedding vector'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.21：嵌入向量的输出'
- en: '](img/B16341_03_18.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_18.jpg)'
- en: 'Figure 3.21: The output of the embedding vector'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21：嵌入向量的输出
- en: Here, you can see that the text has been converted to a 512-dimensional embedding
    vector. The embedding vector is a one-dimensional tensor that maps the text into
    a vector of continuous variables as shown in the preceding figure.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到文本已经被转换成了一个512维的嵌入向量。嵌入向量是一个一维张量，将文本映射为一个连续变量的向量，如前面的图所示。
- en: In this activity, you used the Google Colab environment to download a model
    from TensorFlow Hub. You used a universal sentence encoder to embed a sentence
    into a 512-dimensional vector. This activity has shown that with a few short lines
    of code on powerful remote servers, you can access state-of-the-art machine learning
    models for any application.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你使用了Google Colab环境从TensorFlow Hub下载了一个模型。你使用了一个通用句子编码器将句子嵌入为一个512维的向量。这个活动展示了通过在强大的远程服务器上只用几行简短的代码，你可以为任何应用访问最先进的机器学习模型。
- en: 4\. Regression and Classification Models
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 回归和分类模型
- en: 'Activity 4.01: Creating a Multi-Layer ANN with TensorFlow'
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.01：使用TensorFlow创建多层ANN
- en: '**Solution:**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook to implement this activity.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter笔记本来实现这个活动。
- en: 'Import the TensorFlow and pandas libraries:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow和pandas库：
- en: '[PRE56]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Load in the dataset using the pandas `read_csv` function:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用pandas的`read_csv`函数加载数据集：
- en: '[PRE57]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you change the path (highlighted) to the CSV file based on its location
    on your system. If you're running the Jupyter notebook from the same directory
    where the CSV file is stored, you can run the preceding code without any modification.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保你根据系统中的CSV文件位置更改路径（高亮部分）。如果你从与CSV文件存储在同一目录的Jupyter笔记本中运行代码，可以直接运行前面的代码而无需修改。
- en: 'Drop the `date` column and drop any rows that have null values:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`date`列并删除任何包含空值的行：
- en: '[PRE58]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create target and feature datasets:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建目标和特征数据集：
- en: '[PRE59]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Rescale the feature dataset:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新缩放特征数据集：
- en: '[PRE60]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Initialize a Keras model of the `Sequential` class:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个`Sequential`类的Keras模型：
- en: '[PRE61]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add an input layer to the model using the model''s `add` method, and set `input_shape`
    to be the number of columns in the feature dataset. Add four hidden layers of
    sizes `64`, `32`, `16`, and `8` to the model with the first having a ReLU activation
    function, then add an output layer with one unit:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模型的`add`方法为模型添加输入层，并将`input_shape`设置为特征数据集中的列数。向模型中添加四个大小分别为`64`、`32`、`16`和`8`的隐藏层，第一个隐藏层使用ReLU激活函数，然后添加一个包含一个单元的输出层：
- en: '[PRE62]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Compile the model with an RMSprop optimizer with a learning rate equal to `0.001`
    and the mean squared error for the loss:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用RMSprop优化器编译模型，学习率为`0.001`，损失使用均方误差：
- en: '[PRE63]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Create a TensorBoard callback:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个TensorBoard回调：
- en: '[PRE64]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Fit the model to the training data for `100` epochs, with a batch size equal
    to `32` and a validation split equal to 20%:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模型拟合到训练数据上，训练`100`个epoch，批次大小为`32`，验证集比例为20%：
- en: '[PRE65]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You should get the following output:'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 4.16: The output of the fitting process showing the epoch,'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.16：拟合过程的输出，显示了每个epoch的训练时间和损失，'
- en: training time per sample, and loss after each epoch
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个epoch的训练时间和损失
- en: '](img/B16341_04_16.jpg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_04_16.jpg)'
- en: 'Figure 4.16: The output of the fitting process showing the epoch, training
    time per sample, and loss after each epoch'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.16：拟合过程的输出，显示了每个epoch的训练时间和损失
- en: 'Evaluate the model on the training data:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上评估模型：
- en: '[PRE66]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This will result in the following output:'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将导致以下输出：
- en: '[PRE67]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Visualize the model architecture and model-fitting process in TensorBoard by
    calling the following on the command line:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中调用以下内容来可视化TensorBoard中的模型架构和模型拟合过程：
- en: '[PRE68]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The model architecture should look like the following:'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型架构应如下所示：
- en: '![Figure 4.17: A visual representation of the model architecture in TensorBoard'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.17：在TensorBoard中显示模型架构的可视化表示'
- en: '](img/B16341_04_17.jpg)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_04_17.jpg)'
- en: 'Figure 4.17: A visual representation of the model architecture in TensorBoard'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.17：在TensorBoard中显示模型架构的可视化表示
- en: 'Visualize the model-fitting process in TensorBoard. You should get the following output:![Figure
    4.18: A visual representation of the loss as a function of an epoch'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在TensorBoard中可视化模型拟合过程。你应该得到如下输出：![图 4.18：损失函数与epoch的关系的可视化表示
- en: on the training and validation split in TensorBoard
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在TensorBoard中关于训练和验证集的分割
- en: '](img/B16341_04_18.jpg)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_04_18.jpg)'
- en: 'Figure 4.18: A visual representation of the loss as a function of an epoch
    on the training and validation split in TensorBoard'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18：训练和验证集在TensorBoard中显示的损失函数与epoch的关系
- en: During the model-fitting process, the loss on the training and validation sets
    is calculated after each epoch and displayed in TensorBoard in the `SCALARS` tab.
    From TensorBoard, you can see that the mean squared error reduces after each epoch
    consistently on the training set but plateaus on the validation set.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型拟合过程中，每个epoch后会计算训练集和验证集的损失，并在TensorBoard的`SCALARS`标签页中显示。在TensorBoard中，你可以看到训练集的均方误差在每个epoch后持续减少，但在验证集上则趋于平稳。
- en: In this activity, you have further practiced building models in TensorFlow and
    viewing its architecture and training process in TensorBoard. During this section,
    you have learned how to build, train, and evaluate ANNs using TensorFlow for regression
    tasks. You used Keras layers of the `Dense` class as an easy way to create fully
    connected layers that include activation functions on the output of the layers.
    The layers can be created simply by passing in the number of units desired in
    the layer. Keras configures the initialization of the weights and biases, as well
    as any other additional parameters that are common in a machine learning workflow.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次活动中，你进一步练习了使用TensorFlow构建模型，并在TensorBoard中查看其架构和训练过程。在这一部分，你学习了如何使用TensorFlow构建、训练和评估用于回归任务的ANN（人工神经网络）。你使用了`Dense`类的Keras层，这是一种简单的方式来创建完全连接的层，并在层的输出上包括激活函数。通过传递所需的单位数，Keras可以简单地创建这些层。Keras还负责配置权重和偏差的初始化，以及任何其他机器学习工作流程中常见的额外参数。
- en: 'Activity 4.02: Creating a Multi-Layer Classification ANN with TensorFlow'
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动4.02：使用TensorFlow创建多层分类ANN
- en: '**Solution:**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook to implement this activity.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter笔记本来实现此活动。
- en: 'Import the TensorFlow and pandas libraries:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow和pandas库：
- en: '[PRE69]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Load in the dataset using the pandas `read_csv` function:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用pandas的`read_csv`函数加载数据集：
- en: '[PRE70]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you change the path (highlighted) to the CSV file based on its location
    on your system. If you're running the Jupyter notebook from the same directory
    where the CSV file is stored, you can run the preceding code without any modification.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保根据CSV文件在你系统上的位置更改路径（高亮部分）。如果你在与CSV文件存储在同一目录下运行Jupyter笔记本，则无需修改代码即可运行上述代码。
- en: 'Drop any rows that have null values:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除任何包含空值的行：
- en: '[PRE71]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Set the target values to `true` when values of the `critical_temp` column are
    above `77.36` and `false` when below. The feature dataset is the remaining columns
    in the dataset:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`critical_temp`列的值大于`77.36`时，将目标值设置为`true`，小于时设置为`false`。特征数据集是数据集中剩余的列：
- en: '[PRE72]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Rescale the feature dataset:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新缩放特征数据集：
- en: '[PRE73]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Initialize a Keras model of the `Sequential` class:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个`Sequential`类的Keras模型：
- en: '[PRE74]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Add an input layer to the model using the model''s `add` method and set `input_shape`
    to the number of columns in the feature dataset. Add three hidden layers of sizes
    `32`, `16`, and `8` to the model, then add an output layer with `1` unit and a
    sigmoid activation function:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用模型的`add`方法添加一个输入层，并将`input_shape`设置为特征数据集中的列数。向模型添加三个隐藏层，大小分别为`32`、`16`和`8`，然后添加一个输出层，包含`1`个单位并使用sigmoid激活函数：
- en: '[PRE75]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Compile the model with an RMSprop optimizer with a learning rate equal to `0.0001`
    and binary cross-entropy for the loss and compute the accuracy metric:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用RMSprop优化器编译模型，学习率设置为`0.0001`，损失函数使用二元交叉熵，并计算准确度指标：
- en: '[PRE76]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Create a TensorBoard callback:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个TensorBoard回调：
- en: '[PRE77]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Fit the model to the training data for `50` epochs and a validation split equal
    to 20%:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模型拟合到训练数据上，进行`50`个周期，并且设置验证集比例为 20%：
- en: '[PRE78]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'You should get the following output:'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会得到以下输出：
- en: '![Figure 4.19: The output of the fitting process showing the epoch, training
    time per sample, loss, and accuracy after each epoch, and evaluated on the validation
    split'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.19：拟合过程的输出，显示了每个周期、每个样本的训练时间、损失和准确度，并在验证集上进行了评估'
- en: '](img/B16341_04_19.jpg)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_04_19.jpg)'
- en: 'Figure 4.19: The output of the fitting process showing the epoch, training
    time per sample, loss, and accuracy after each epoch, and evaluated on the validation
    split'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.19：拟合过程的输出，显示了每个周期、每个样本的训练时间、损失和准确度，并在验证集上进行了评估
- en: 'Evaluate the model on the training data:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练数据上评估模型：
- en: '[PRE79]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'This will display the following output:'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示以下输出：
- en: '[PRE80]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Visualize the model architecture and model-fitting process in TensorBoard by
    calling the following on the command line:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行中调用以下命令，在 TensorBoard 中可视化模型架构和模型拟合过程：
- en: '[PRE81]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'You should get a screen similar to the following in the browser:'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会在浏览器中看到类似以下的屏幕：
- en: '![Figure 4.20: A visual representation of the model architecture in TensorBoard'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.20：TensorBoard 中模型架构的可视化表示'
- en: '](img/B16341_04_20.jpg)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_04_20.jpg)'
- en: 'Figure 4.20: A visual representation of the model architecture in TensorBoard'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20：TensorBoard 中模型架构的可视化表示
- en: 'The loss function can be visualized as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 损失函数可以如下所示进行可视化：
- en: '![Figure 4.21: A visual representation of the accuracy and loss as a function
    of an epoch on the training and validation split in TensorBoard'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.21：TensorBoard 中显示训练和验证集准确度与损失随周期变化的可视化表示'
- en: '](img/B16341_04_21.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16341_04_21.jpg)'
- en: 'Figure 4.21: A visual representation of the accuracy and loss as a function
    of an epoch on the training and validation split in TensorBoard'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21：TensorBoard 中显示训练和验证集准确度与损失随周期变化的可视化表示
- en: During the model-fitting process, the accuracy and loss on the training and
    validation sets are calculated after each epoch and displayed in TensorBoard in
    the `SCALARS` tab. From TensorBoard, you can see that the loss metric (binary
    cross-entropy) reduces after each epoch consistently on the training set but plateaus
    on the validation set.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型拟合过程中，每个周期后计算训练集和验证集的准确度和损失，并在 TensorBoard 的 `SCALARS` 标签页中显示。从 TensorBoard
    中你可以看到，损失指标（二元交叉熵）在训练集上每个周期后都会持续下降，但在验证集上则趋于平稳。
- en: In this activity, you have practiced building classification models in TensorFlow
    by building a multi-layer ANN to determine whether a material will exhibit superconductivity
    above or below the boiling point of nitrogen. Moreover, you used TensorBoard to
    view the models' architecture and monitor key metrics during the training process,
    including the loss and the accuracy of the models.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你通过构建一个多层人工神经网络（ANN），练习了如何在 TensorFlow 中构建分类模型，以判断某种材料是否会在氮气的沸点上方或下方表现出超导性。此外，你还使用
    TensorBoard 查看模型的架构，并在训练过程中监控关键指标，包括损失和准确率。
- en: 5\. Classification Models
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 分类模型
- en: 'Activity 5.01: Building a Character Recognition Model with TensorFlow'
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 5.01：使用 TensorFlow 构建字符识别模型
- en: '**Solution**:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: Open a new Jupyter notebook.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter 笔记本。
- en: 'Import the pandas library and use `pd` as the alias:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 pandas 库并使用`pd`作为别名：
- en: '[PRE82]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Create a variable called `file_url` that contains the URL to the dataset:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`file_url`的变量，其中包含数据集的 URL：
- en: '[PRE83]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Load the dataset into a `DataFrame()` function called `data` using `read_csv()`
    method, provide the URL to the CSV file, and set `header=None` as the dataset
    doesn't provide column names. Print the first five rows using `head()` method.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`方法将数据集加载到一个名为`data`的`DataFrame()`函数中，提供 CSV 文件的 URL，并设置`header=None`，因为数据集没有提供列名。使用`head()`方法打印前五行。
- en: '[PRE84]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The expected output will be as follows:'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出将如下所示：
- en: '![Figure 5.42: First five rows of the data'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.42：数据的前五行'
- en: '](img/B16341_05_42.jpg)'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_42.jpg)'
- en: 'Figure 5.42: First five rows of the data'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.42：数据的前五行
- en: You can see that the dataset contains `17` columns and they are all numeric.
    Column `0` is the `target` variable, and each value corresponds to a letter of
    the alphabet.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到数据集包含了`17`列，并且所有列都是数字型的。列`0`是`目标`变量，每个值对应字母表中的一个字母。
- en: 'Extract the target variable (column `0`) using the `pop()` method and save
    it in a variable called `target`:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pop()`方法提取目标变量（列`0`），并将其保存在名为`target`的变量中：
- en: '[PRE85]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Split `data` into a training set by keeping the first 15,000 observations and
    save it in a variable called `X_train`. Perform the same split on `target` and
    save the first 15,000 cases in a variable called `y_train`:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`data`划分为训练集，保留前15,000个观测值，并将其保存在名为`X_train`的变量中。对`target`进行相同的划分，并将前15,000个案例保存在名为`y_train`的变量中：
- en: '[PRE86]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Split `data` into a test set by keeping the last 5,000 observations and save
    it in a variable called `X_test`. Perform the same split on `target` and save
    the last 5,000 cases in a variable called `y_test`:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`data`划分为测试集，保留最后5,000个观测值，并将其保存在名为`X_test`的变量中。对`target`进行相同的划分，并将最后5,000个案例保存在名为`y_test`的变量中：
- en: '[PRE87]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Import the TensorFlow library and use `tf` as the alias:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库，并使用`tf`作为别名：
- en: '[PRE88]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Set the seed as `8` using `tf.random.set_seed()` to get reproducible results:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.random.set_seed()`将种子设置为`8`，以获得可重复的结果：
- en: '[PRE89]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Instantiate a sequential model using `tf.keras.Sequential()` and store it in
    a variable called `model`:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.keras.Sequential()`实例化一个顺序模型，并将其保存在名为`model`的变量中：
- en: '[PRE90]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Import the `Dense()` class from `tensorflow.keras.layers`:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.keras.layers`导入`Dense()`类：
- en: '[PRE91]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Create a fully connected layer of `512` units with `Dense()` and specify ReLu
    as the activation function and the input shape as `(16,)`, which corresponds to
    the number of features from the dataset. Save it in a variable called `fc1`:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`512`个单元的全连接层，指定ReLu为激活函数，输入形状为`(16,)`，这对应数据集中的特征数量。将其保存在名为`fc1`的变量中：
- en: '[PRE92]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Create a fully connected layer of `512` units with `Dense()` and specify ReLu
    as the activation function. Save it in a variable called `fc2`:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`512`个单元的全连接层，并指定ReLu为激活函数。将其保存在名为`fc2`的变量中：
- en: '[PRE93]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Create a fully connected layer of `128` units with `Dense()` and specify ReLu
    as the activation function. Save it in a variable called `fc3`:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`128`个单元的全连接层，并指定ReLu为激活函数。将其保存在名为`fc3`的变量中：
- en: '[PRE94]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Create a fully connected layer of `128` units with `Dense()` and specify ReLu
    as the activation function. Save it in a variable called `fc4`:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`128`个单元的全连接层，并指定ReLu为激活函数。将其保存在名为`fc4`的变量中：
- en: '[PRE95]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Create a fully connected layer of `26` units with `Dense()` and specify softmax
    as the activation function. Save it in a variable called `fc5`:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`26`个单元的全连接层，并指定softmax为激活函数。将其保存在名为`fc5`的变量中：
- en: '[PRE96]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Sequentially add all five fully connected layers to the model using `add()` method.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`add()`方法顺序地将所有五个全连接层添加到模型中。
- en: '[PRE97]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Print the summary of the model using `summary()` method.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`summary()`方法打印模型的总结。
- en: '[PRE98]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The expected output will be as follows:'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '![Figure 5.43: Summary of the model architecture'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.43：模型架构总结'
- en: '](img/B16341_05_43.jpg)'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_43.jpg)'
- en: 'Figure 5.43: Summary of the model architecture'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.43：模型架构总结
- en: The preceding output shows that there are five layers in your model (as expected)
    and also tells you the number of parameters at each layer.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述输出显示了模型中有五个层（符合预期），并且告诉你每个层的参数数量。
- en: 'Instantiate `SparseCategoricalCrossentropy()` from `tf.keras.losses` and save
    it in a variable called `loss`:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tf.keras.losses`实例化`SparseCategoricalCrossentropy()`，并将其保存在名为`loss`的变量中：
- en: '[PRE99]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Instantiate `Adam()` from `tf.keras.optimizers` with `0.001` as the learning
    rate and save it in a variable called `optimizer`:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tf.keras.optimizers`实例化`Adam()`，学习率为`0.001`，并将其保存在名为`optimizer`的变量中：
- en: '[PRE100]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Compile the model using `compile()` method, specify the optimizer and loss
    parameters you just created, and use accuracy as the metric to be reported:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`compile()`方法编译模型，指定刚刚创建的优化器和损失函数参数，并使用准确度作为报告的指标：
- en: '[PRE101]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Start the model training process using `fit()` method on the training set for
    five epochs:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fit()`方法开始模型的训练过程，在训练集上训练五个epoch：
- en: '[PRE102]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The expected output will be as follows:'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '![Figure 5.44: Logs of the training process'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.44：训练过程的日志'
- en: '](img/B16341_05_44.jpg)'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_44.jpg)'
- en: 'Figure 5.44: Logs of the training process'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.44：训练过程的日志
- en: The preceding output shows the logs of each epoch during the training of the
    model. Note that it took around 2 seconds to process a single epoch, and the accuracy
    score increased from `0.6229` (first epoch) to `0.9011` (fifth epoch).
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述输出显示了模型训练过程中每个epoch的日志。请注意，处理一个epoch大约需要2秒，且准确率从`0.6229`（第一个epoch）提高到`0.9011`（第五个epoch）。
- en: Evaluate the performance of the model on the test set using `evaluate()` method.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`evaluate()`方法评估模型在测试集上的表现。
- en: '[PRE103]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The expected output will be as follows:'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '![Figure 5.45: Performance of the model on the test set'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.45：模型在测试集上的表现'
- en: '](img/B16341_05_45.jpg)'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_45.jpg)'
- en: 'Figure 5.45: Performance of the model on the test set'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.45：模型在测试集上的表现
- en: 'Predict the probabilities for each class on the test set using `predict()`
    method. Save it in a variable called `preds_proba`:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`predict()`方法预测测试集上每个类别的概率，并将结果保存在名为`preds_proba`的变量中：
- en: '[PRE104]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Convert the class probabilities into a single predicted value using `argmax()`
    method with `axis=1`:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`argmax()`方法并设置`axis=1`，将类别概率转换为单一的预测值：
- en: '[PRE105]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Import `confusion_matrix` from `tensorflow.math`:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.math`导入`confusion_matrix`：
- en: '[PRE106]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Print the confusion matrix on the test set:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印测试集上的混淆矩阵：
- en: '[PRE107]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The expected output will be as follows:'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下所示：
- en: '![Figure 5.46: Confusion matrix of the test set'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.46：测试集的混淆矩阵'
- en: '](img/B16341_05_39.jpg)'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_39.jpg)'
- en: 'Figure 5.46: Confusion matrix of the test set'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.46：测试集的混淆矩阵
- en: The preceding output shows the model is correctly predicting the 26 letters
    of the alphabet most of the time (most of the values are located on the diagonal).
    It achieved an accuracy score of around 0.89 for both the training and test sets.
    This activity concludes the section on multi-class classification. In the section
    ahead, you will look at another type of classification called multi-label.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示，模型大多数时候正确地预测了26个字母（大多数值位于对角线上）。它在训练集和测试集上的准确率约为0.89。这个活动结束了多类别分类部分。在接下来的部分，你将了解另一种分类方法——多标签分类。
- en: 'Activity 5.02: Building a Movie Genre Tagging a Model with TensorFlow'
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动5.02：使用TensorFlow构建电影类型标记模型
- en: '**Solution:**'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter notebook。
- en: 'Import the pandas library and use `pd` as the alias:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入pandas库并将其别名设为`pd`：
- en: '[PRE108]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Create a variable called `feature_url` that contains the URL to the dataset:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`feature_url`的变量，包含数据集的URL：
- en: '[PRE109]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Load the dataset into a DataFrame called `feature` using `read_csv()` method
    and provide the URL to the CSV file. Print the first five rows using the `head()` method:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`方法将数据集加载到名为`feature`的DataFrame中，并提供CSV文件的URL。使用`head()`方法打印前五行：
- en: '[PRE110]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The expected output will be as follows:'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下所示：
- en: '![Figure 5.47: The first five rows of the features'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.47：特征数据的前五行'
- en: '](img/B16341_05_47.jpg)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_47.jpg)'
- en: 'Figure 5.47: The first five rows of the features'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.47：特征数据的前五行
- en: 'Create a variable called `target_url` that contains the URL to the dataset:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`target_url`的变量，包含数据集的URL：
- en: '[PRE111]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Load the dataset into a DataFrame called `target` using `read_csv()` method
    and provide the URL to the CSV file. Print the first five rows using the `head()` method:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`方法将数据集加载到名为`target`的DataFrame中，并提供CSV文件的URL。使用`head()`方法打印前五行：
- en: '[PRE112]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The expected output will be as follows:'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下所示：
- en: '![Figure 5.48: The first five rows of the targets'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.48：目标数据的前五行'
- en: '](img/B16341_05_48.jpg)'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_48.jpg)'
- en: 'Figure 5.48: The first five rows of the targets'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.48：目标数据的前五行
- en: 'Split the data into a training set by keeping the first 15,000 observations
    and save it in a variable called `X_train`. Perform the same split on `target`
    and save the first 15,000 cases in a variable called `y_train`:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据拆分为训练集，保留前15,000条观察数据并将其保存在名为`X_train`的变量中。对`target`进行相同的拆分，将前15,000条数据保存在名为`y_train`的变量中：
- en: '[PRE113]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Split the data into a test set by keeping the last 5,000 observations and save
    it in a variable called `X_test`. Perform the same split on `target` and save
    the last 5,000 cases in a variable called `y_test`:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据拆分为测试集，保留最后的5,000条观察数据并将其保存在名为`X_test`的变量中。对`target`进行相同的拆分，将最后的5,000条数据保存在名为`y_test`的变量中：
- en: '[PRE114]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Import the TensorFlow library and use `tf` as the alias:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库并将其别名设为`tf`：
- en: '[PRE115]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Set the seed for `tensorflow` as `8` using `tf.random.set_seed()`. This will
    help to get reproducible results:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.random.set_seed()`将`tensorflow`的种子设置为`8`，这将帮助获得可重复的结果：
- en: '[PRE116]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Instantiate a sequential model using `tf.keras.Sequential()` and store it in
    a variable called `model`:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.keras.Sequential()`实例化一个顺序模型，并将其保存在名为`model`的变量中：
- en: '[PRE117]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Import the `Dense()` class from `tensorflow.keras.layers`:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.keras.layers`导入`Dense()`类：
- en: '[PRE118]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Create a fully connected layer of `512` units with `Dense()` and specify ReLu
    as the activation function and the input shape as `(1001,)` which corresponds
    to the number of features from the dataset. Save it in a variable called `fc1`:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`512`个单元的全连接层，并指定ReLu作为激活函数，输入形状为`(1001,)`，对应数据集的特征数量。将其保存在名为`fc1`的变量中：
- en: '[PRE119]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Create a fully connected layer of `512` units with `Dense()` and specify ReLu
    as the activation function. Save it in a variable called `fc2`:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`512`个单元的全连接层，并指定ReLu作为激活函数。将其保存在一个名为`fc2`的变量中：
- en: '[PRE120]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Create a fully connected layer of `128` units with `Dense()` and specify ReLu
    as the activation function. Save it in a variable called `fc3`:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`128`个单元的全连接层，并指定ReLu作为激活函数。将其保存在一个名为`fc3`的变量中：
- en: '[PRE121]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Create a fully connected layer of `128` units with `Dense()` and specify ReLu
    as the activation function. Save it in a variable called `fc4`:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`128`个单元的全连接层，并指定ReLu作为激活函数。将其保存在一个名为`fc4`的变量中：
- en: '[PRE122]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Create a fully connected layer of `28` units with `Dense()` and specify sigmoid
    as the activation function. Save it in a variable called `fc5`:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`28`个单元的全连接层，并指定sigmoid作为激活函数。将其保存在一个名为`fc5`的变量中：
- en: '[PRE123]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Sequentially add all five fully connected layers to the model using `add()` method.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`add()`方法依次将所有五个全连接层添加到模型中。
- en: '[PRE124]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Print the summary of the model using `summary()` method.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`summary()`方法打印模型的总结。
- en: '[PRE125]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The expected output will be as follows:'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出将如下所示：
- en: '![Figure 5.49: Summary of the model architecture'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.49：模型架构的总结'
- en: '](img/B16341_05_49.jpg)'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_49.jpg)'
- en: 'Figure 5.49: Summary of the model architecture'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.49：模型架构的总结
- en: 'Instantiate `BinaryCrossentropy()` from `tf.keras.losses` and save it in a
    variable called `loss`:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tf.keras.losses`实例化`BinaryCrossentropy()`并将其保存在一个名为`loss`的变量中：
- en: '[PRE126]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Instantiate `Adam()` from `tf.keras.optimizers` with `0.001` as the learning
    rate and save it in a variable called `optimizer`:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tf.keras.optimizers`实例化`Adam()`，设置学习率为`0.001`，并将其保存在一个名为`optimizer`的变量中：
- en: '[PRE127]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Compile the model using `compile()` method and specify the optimizer and loss
    parameters that were just created, with accuracy as the metric to be reported:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`compile()`方法编译模型，并指定刚刚创建的优化器和损失函数参数，同时设置准确率为报告的指标：
- en: '[PRE128]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Start the model training process using the `fit()` method on the training set
    for `20` epochs:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fit()`方法开始在训练集上进行模型训练，训练20个epoch：
- en: '[PRE129]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The expected output will be as follows:'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出将如下所示：
- en: '![Figure 5.50: Logs of the training process'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.50：训练过程的日志'
- en: '](img/B16341_05_50.jpg)'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_50.jpg)'
- en: 'Figure 5.50: Logs of the training process'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.50：训练过程的日志
- en: You can observe that the model is trained for 20 epochs and that accuracy is
    improving, achieving `61.67%` after the ninth epoch.
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以观察到，模型在训练了20个epoch后，准确率逐步提高，在第九个epoch时达到了`61.67%`。
- en: 'Evaluate the performance of the model on the test set using the `evaluate()` method:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`evaluate()`方法评估模型在测试集上的表现：
- en: '[PRE130]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'The expected output will be as follows:'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出将如下所示：
- en: '![Figure 5.51: Performance of the model on the test set'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图5.51：模型在测试集上的表现'
- en: '](img/B16341_05_51.jpg)'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_05_51.jpg)'
- en: 'Figure 5.51: Performance of the model on the test set'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.51：模型在测试集上的表现
- en: The preceding output shows the model achieved an accuracy score of `0.13` on
    the test set, which is extremely low, while it got an accuracy of `0.62` on the
    training set. This model is struggling to learn the relevant pattern to correctly
    predict the different genres of movies. You could try different architectures
    with different numbers of hidden layers and units on your own. You can also try
    different learning rates and optimizers. As the scores are very different on the
    training and test sets, the model is overfitting and has simply learned patterns
    relevant to just the training set.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示，模型在测试集上达到了`0.13`的准确率，这个值非常低，而在训练集上的准确率为`0.62`。这个模型在学习如何正确预测不同类型电影的模式上存在困难。你可以尝试不同的架构，使用不同数量的隐藏层和单元。你还可以尝试不同的学习率和优化器。由于训练集和测试集上的得分差异很大，说明模型发生了过拟合，只学到了与训练集相关的模式。
- en: 6\. Regularization and Hyperparameter Tuning
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 正则化和超参数调整
- en: 'Activity 6.01: Predicting Income with L1 and L2 Regularizers'
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动6.01：使用L1和L2正则化器预测收入
- en: '**Solution:**'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter笔记本。
- en: 'Import the pandas library and use `pd` as the alias:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入pandas库并使用`pd`作为别名：
- en: '[PRE131]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Create a list called `usecols` containing the column names `AAGE`, `ADTIND`,
    `ADTOCC`, `SEOTR`, `WKSWORK`, and `PTOTVAL`:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`usecols`的列表，包含列名`AAGE`、`ADTIND`、`ADTOCC`、`SEOTR`、`WKSWORK`和`PTOTVAL`：
- en: '[PRE132]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Create a variable called `train_url` that contains the URL to the training
    set:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`train_url`的变量，包含训练集的URL：
- en: '[PRE133]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Load the training dataset into a DataFrame, `train_data`, using the `read_csv()`
    method. Provide the URL to the CSV file and the `usecols` list to the `usecols`
    parameter. Print the first five rows using the `head()` method:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`方法将训练数据集加载到`train_data`的DataFrame中。为`usecols`参数提供CSV文件的URL和`usecols`列表。使用`head()`方法打印前五行：
- en: '[PRE134]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'The expected output will be as follows:'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 6.23: First five rows of the training set'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.23：训练集的前五行'
- en: '](img/B16341_06_23.jpg)'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_23.jpg)'
- en: 'Figure 6.23: First five rows of the training set'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.23：训练集的前五行
- en: 'Extract the target variable (`PTOTVAL`) using the `pop()` method and save it
    in a variable called `train_target`:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pop()`方法提取目标变量（`PTOTVAL`），并将其保存在名为`train_target`的变量中：
- en: '[PRE135]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Create a variable called `test_url` that contains the URL to the test set:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`test_url`的变量，包含测试集的URL：
- en: '[PRE136]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Load the test dataset into a DataFrame, `X_test`, using the `read_csv()` method.
    Provide the URL to the CSV file and the `usecols` list to the `usecols` parameter.
    Print the first five rows using the `head()` method:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`方法将测试数据集加载到`X_test`的DataFrame中。为`usecols`参数提供CSV文件的URL和`usecols`列表。使用`head()`方法打印前五行：
- en: '[PRE137]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The expected output will be as follows:'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 6.24: First five rows of the test set'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.24：测试集的前五行'
- en: '](img/B16341_06_24.jpg)'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_24.jpg)'
- en: 'Figure 6.24: First five rows of the test set'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.24：测试集的前五行
- en: 'Extract the target variable (`PTOTVAL`) using the `pop()` method and save it
    in a variable called `test_target`:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pop()`方法提取目标变量（`PTOTVAL`），并将其保存在名为`test_target`的变量中：
- en: '[PRE138]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Import the TensorFlow library and use `tf` as the alias. Then, import the `Dense`
    class from `tensorflow.keras.layers`:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库并使用`tf`作为别名。然后，从`tensorflow.keras.layers`导入`Dense`类：
- en: '[PRE139]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Set the seed as `8` using `tf.random.set_seed()` to get reproducible results:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.random.set_seed()`将种子设置为`8`，以获取可复现的结果：
- en: '[PRE140]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Instantiate a sequential model using `tf.keras.Sequential()` and store it in
    a variable called `model`:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.keras.Sequential()`实例化一个顺序模型，并将其保存在名为`model`的变量中：
- en: '[PRE141]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Import the `Dense` class from `tensorflow.keras.layers`:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.keras.layers`导入`Dense`类：
- en: '[PRE142]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Create a fully connected layer of `1048` units with `Dense()` and specify ReLu
    as the activation function and the input shape as `(5,)`, which corresponds to
    the number of features from the dataset. Save it in a variable called `fc1`:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含`1048`个单元的全连接层，指定ReLu作为激活函数，并将输入形状设置为`(5,)`，这对应数据集中的特征数量。将其保存在名为`fc1`的变量中：
- en: '[PRE143]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Create three fully connected layers of `512`, `128`, and `64` units with `Dense()`
    and specify ReLu as the activation function. Save them in three variables, called
    `fc2`, `fc3`, and `fc4`, respectively:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建三个全连接层，分别包含`512`、`128`和`64`个单元，并指定ReLu作为激活函数。将它们分别保存在名为`fc2`、`fc3`和`fc4`的三个变量中：
- en: '[PRE144]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Create a fully connected layer of three units (corresponding to the number
    of classes) with `Dense()` and specify softmax as the activation function. Save
    it in a variable called `fc5`:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含三个单元的全连接层（对应类别数量），并指定softmax作为激活函数。将其保存在名为`fc5`的变量中：
- en: '[PRE145]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Create a fully connected layer of a single unit with `Dense()`. Save it in
    a variable called `fc5`:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Dense()`创建一个包含单个单元的全连接层。将其保存在名为`fc5`的变量中：
- en: '[PRE146]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Sequentially add all five fully connected layers to the model using the `add()` method:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按顺序使用`add()`方法将五个全连接层添加到模型中：
- en: '[PRE147]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Print the summary of the model:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印模型的总结：
- en: '[PRE148]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'You will get the following output:'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![Figure 6.25: Summary of the model architecture'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.25：模型架构的总结'
- en: '](img/B16341_06_25.jpg)'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_25.jpg)'
- en: 'Figure 6.25: Summary of the model architecture'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.25：模型架构的总结
- en: 'Instantiate `Adam()` from `tf.keras.optimizers` with `0.05` as the learning
    rate and save it in a variable called `optimizer`:'
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tf.keras.optimizers`实例化`Adam()`，学习率为`0.05`，并将其保存到名为`optimizer`的变量中：
- en: '[PRE149]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Compile the model, specify the optimizer, and set `mse` as the loss and metric
    to be displayed:'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译模型，指定优化器，并将`mse`设置为损失函数和显示的度量：
- en: '[PRE150]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Start the model training process using the `fit()` method for five epochs and
    split the data into a validation set with 20% of the data:'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fit()`方法开始模型训练过程，训练五个周期，并将数据拆分为20%的验证集：
- en: '[PRE151]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The expected output will be as follows:'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 6.26: Logs of the training process'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.26：训练过程的日志'
- en: '](img/B16341_06_26.jpg)'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_26.jpg)'
- en: 'Figure 6.26: Logs of the training process'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.26：训练过程的日志
- en: The preceding output shows the model is overfitting. It achieved an MSE score
    of `1005740` on the training set and only `1070237` on the validation set. Now,
    train another model with L1 and L2 regularization.
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述输出表明模型存在过拟合问题。在训练集上的MSE分数为`1005740`，而在验证集上的MSE分数为`1070237`。现在，训练另一个模型，使用L1和L2正则化。
- en: 'Create five fully connected layers similar to the previous models and specify
    both L1 and L2 regularizers for the `kernel_regularizer` parameters. Use the value
    `0.001` for the regularizer factor. Save them into five variables, called `reg_fc1`,
    `reg_fc2`, `reg_fc3`, `reg_fc4`, and `reg_fc5`:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建五个全连接层，类似于之前的模型，并为`kernel_regularizer`参数指定L1和L2正则化器。正则化器因子使用`0.001`。将其保存为五个变量，分别命名为`reg_fc1`、`reg_fc2`、`reg_fc3`、`reg_fc4`和`reg_fc5`：
- en: '[PRE152]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Instantiate a sequential model using `tf.keras.Sequential()`, store it in a
    variable called `model2`, and add all five fully connected layers sequentially
    to the model using the `add()` method:'
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.keras.Sequential()`实例化一个顺序模型，将其存储在名为`model2`的变量中，并使用`add()`方法将五个全连接层按顺序添加到模型中：
- en: '[PRE153]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Print the summary of the model:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印模型概览：
- en: '[PRE154]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'The output will be as follows:'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 6.27: Summary of the model architecture'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.27：模型架构概览'
- en: '](img/B16341_06_27.jpg)'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_27.jpg)'
- en: 'Figure 6.27: Summary of the model architecture'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.27：模型架构概览
- en: 'Compile the model using the `compile()` method, specify the optimizer, and
    set `mse` as the loss and metric to be displayed:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`compile()`方法编译模型，指定优化器，并将`mse`作为损失函数和要显示的评估指标：
- en: '[PRE155]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Start the model training process using the `fit()` method for five epochs and
    split the data into a validation set with 20% of the data:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fit()`方法启动模型训练过程，进行五轮训练，并将数据分为验证集，其中20%的数据用于验证：
- en: '[PRE156]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'The output will be as follows:'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 6.28: Logs of the training process'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.28：训练过程日志'
- en: '](img/B16341_06_28.jpg)'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_28.jpg)'
- en: 'Figure 6.28: Logs of the training process'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.28：训练过程日志
- en: With the addition of L1 and L2 regularization, the model has similar accuracy
    scores between the training (`4028182`) and test (`3970020`) sets. Therefore,
    the model is not overfitting much.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 添加L1和L2正则化后，模型在训练集（`4028182`）和测试集（`3970020`）上的准确度分数相似。因此，模型没有严重的过拟合问题。
- en: 'Activity 6.02: Predicting Income with Bayesian Optimization from Keras Tuner'
  id: totrans-523
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动6.02：使用Keras Tuner中的贝叶斯优化预测收入
- en: '**Solution:**'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook.
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter笔记本。
- en: 'Import the pandas library and use `pd` as the alias:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入pandas库，并使用`pd`作为别名：
- en: '[PRE157]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Create a list called `usecols` containing the following column names: `AAGE`,
    `ADTIND`, `ADTOCC`, `SEOTR`, `WKSWORK`, and `PTOTVAL`:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`usecols`的列表，包含以下列名：`AAGE`、`ADTIND`、`ADTOCC`、`SEOTR`、`WKSWORK`和`PTOTVAL`：
- en: '[PRE158]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'Create a variable called `train_url` that contains the URL to the training
    set:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`train_url`的变量，包含训练集的URL：
- en: '[PRE159]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Load the training dataset into a DataFrame called `train_data` using the `read_csv()`
    method, and provide the URL to the CSV file and the `usecols` list to the `usecols`
    parameter. Print the first five rows using the `head()` method:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`方法将训练数据集加载到名为`train_data`的DataFrame中，并将CSV文件的URL和`usecols`列表提供给`usecols`参数。使用`head()`方法打印前五行：
- en: '[PRE160]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'You will get the following output:![Figure 6.29: First five rows of the training
    set'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将获得如下输出：![图6.29：训练集的前五行
- en: '](img/B16341_06_29.jpg)'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_29.jpg)'
- en: 'Figure 6.29: First five rows of the training set'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.29：训练集的前五行
- en: 'Extract the target variable (`PTOTVAL`) using the `pop()` method, and save
    it in a variable called `train_target`:'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pop()`方法提取目标变量（`PTOTVAL`），并将其保存到名为`train_target`的变量中：
- en: '[PRE161]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Create a variable called `test_url` that contains the URL to the test set:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`test_url`的变量，包含测试集的URL：
- en: '[PRE162]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Load the test dataset into a DataFrame called `X_test` using the `read_csv()`
    method and provide the URL to the CSV file and the `usecols` list to the `usecols`
    parameter. Print the first five rows using the `head()` method:'
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`方法将测试数据集加载到名为`X_test`的DataFrame中，并将CSV文件的URL和`usecols`列表提供给`usecols`参数。使用`head()`方法打印前五行：
- en: '[PRE163]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'The output will be the following:'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 6.30: First five rows of the test set'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.30：测试集的前五行'
- en: '](img/B16341_06_30.jpg)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_30.jpg)'
- en: 'Figure 6.30: First five rows of the test set'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.30：测试集的前五行
- en: 'Extract the target variable (`PTOTVAL`) using the `pop()` method, and save
    it in a variable called `test_target`:'
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pop()`方法提取目标变量（`PTOTVAL`），并将其保存到名为`test_target`的变量中：
- en: '[PRE164]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Import the TensorFlow library and use `tf` as the alias. Then, import the `Dense`
    class from `tensorflow.keras.layers`:'
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库并使用`tf`作为别名。然后，从`tensorflow.keras.layers`导入`Dense`类：
- en: '[PRE165]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Set the seed as `8` using `tf.random.set_seed()` to get reproducible results:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.random.set_seed()`设置种子为`8`，以获得可复现的结果：
- en: '[PRE166]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Define a function called `model_builder` to create a sequential model with
    the same architecture as *Activity 6.01*, *Predicting Income with L1 and L2 Regularizers*.
    But this time, provide a hyperparameter, `hp.Choice`, for the learning rate, `hp.Int`
    for the number of units for the input layer, and `hp.Choice` for L2 regularization:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`model_builder`的函数，用于创建一个与*活动 6.01*、*使用 L1 和 L2 正则化预测收入*相同架构的顺序模型。 但这次，提供一个超参数`hp.Choice`来选择学习率，`hp.Int`来设置输入层的单元数，`hp.Choice`来设置L2正则化：
- en: '[PRE167]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Install the `keras-tuner` package and then import it and assign it the `kt`
    alias:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`keras-tuner`包，然后导入它并赋予`kt`别名：
- en: '[PRE168]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Instantiate a `BayesianOptimization` tuner, and assign `val_mse` to `objective`
    and `10` to `max_trials`:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个`BayesianOptimization`调优器，并将`val_mse`赋值给`objective`，将`10`赋值给`max_trials`：
- en: '[PRE169]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Launch the hyperparameter search with `search()` on the training and test sets:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`search()`方法在训练集和测试集上启动超参数搜索：
- en: '[PRE170]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Extract the best hyperparameter combination (index `0`) with `get_best_hyperparameters()`
    and save it in a variable called `best_hps`:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`get_best_hyperparameters()`提取最佳超参数组合（索引为`0`），并将其保存在名为`best_hps`的变量中：
- en: '[PRE171]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Extract the best value for the number of units for the input layer, save it
    in a variable called `best_units`, and print its value:'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取输入层单元数的最佳值，将其保存在名为`best_units`的变量中，并打印其值：
- en: '[PRE172]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'You will get the following output:'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE173]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: The best value for the number of units of the input layer found by Hyperband
    is `128`.
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Hyperband找到的输入层单元数的最佳值是`128`。
- en: 'Extract the best value for the learning rate, save it in a variable called
    `best_lr`, and print its value:'
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取学习率的最佳值，将其保存在名为`best_lr`的变量中，并打印其值：
- en: '[PRE174]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'The best value for the learning rate hyperparameter found by Hyperband is `0.001`:'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Hyperband找到的学习率超参数的最佳值是`0.001`：
- en: '[PRE175]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Extract the best value for the L2 regularization, save it in a variable called
    `best_l2`, and print its value:'
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取L2正则化的最佳值，将其保存在名为`best_l2`的变量中，并打印其值：
- en: '[PRE176]'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'The best value for the learning rate hyperparameter found by Hyperband is `0.001`:'
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hyperband找到的学习率超参数的最佳值是`0.001`：
- en: '[PRE177]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Start the model training process using the `fit()` method for five epochs and
    use the test set for `validation_data`:'
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fit()`方法开始模型训练过程，训练五个周期，并将测试集作为`validation_data`：
- en: '[PRE178]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'You should get an output similar to the following:'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到类似以下的输出：
- en: '![Figure 6.31: Logs of the training process'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图6.31：训练过程的日志'
- en: '](img/B16341_06_22.jpg)'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_06_22.jpg)'
- en: 'Figure 6.31: Logs of the training process'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.31：训练过程的日志
- en: With Bayesian optimization, you found the best combination of hyperparameters
    for the number of units for the input layer (`128`), learning rate (`0.001`),
    and L2 regularization (`0.001`). With these hyperparameters, the final model achieved
    an MSE score of `994174` on the training set and `989335` on the test set. This
    is a great improvement from *Activity 6.01*, *Predicting Income with L1 and L2
    Regularizers*, and the model is not overfitting much.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 使用贝叶斯优化，你找到了输入层单元数（`128`）、学习率（`0.001`）和L2正则化（`0.001`）的最佳超参数组合。使用这些超参数，最终模型在训练集上的MSE得分为`994174`，在测试集上的MSE得分为`989335`。这相比于*活动
    6.01*、*使用 L1 和 L2 正则化预测收入*，有了很大的改进，且模型没有出现过拟合。
- en: 7\. Convolutional Neural Networks
  id: totrans-583
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 卷积神经网络
- en: 'Activity 7.01: Building a CNN with More ANN Layers'
  id: totrans-584
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 7.01：构建具有更多ANN层的CNN
- en: '**Solution:**'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'There are several possible ways to arrive at a solution for this activity.
    The following steps describe one of these methods and are similar to those used
    on the `CIFAR-10` dataset earlier in the chapter:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以得出此活动的解决方案。以下步骤描述了其中一种方法，类似于本章之前在`CIFAR-10`数据集上使用的步骤：
- en: Start a new Jupyter notebook.
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个新的Jupyter笔记本。
- en: 'Import the TensorFlow library:'
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库：
- en: '[PRE179]'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Import the additional libraries needed:'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的附加库：
- en: '[PRE180]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Load the `CIFAR-100` dataset directly from `tensorflow_datasets` and view its
    properties:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接从`tensorflow_datasets`加载`CIFAR-100`数据集并查看其属性：
- en: '[PRE181]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'This will give the following output:'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![Figure 7.42: Properties of the CIFAR-100 dataset'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.42：CIFAR-100数据集的属性'
- en: '](img/B16341_07_42.jpg)'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_07_42.jpg)'
- en: 'Figure 7.42: Properties of the CIFAR-100 dataset'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.42：CIFAR-100数据集的属性
- en: 'Use a rescaling layer to rescale images. Then, build a test and train data
    pipeline by rescaling, caching, shuffling, batching, and prefetching the images:'
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用重缩放层对图像进行重缩放。然后，通过重缩放、缓存、打乱、批处理和预取图像，构建测试和训练数据管道：
- en: '[PRE182]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Build the model using the functional API:'
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用函数式API构建模型：
- en: '[PRE183]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Compile and fit the model:'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并拟合模型：
- en: '[PRE184]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'The output will look like the following image:'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下图所示：
- en: '![Figure 7.43: Model fit'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.43：模型拟合'
- en: '](img/B16341_07_43.jpg)'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_07_43.jpg)'
- en: 'Figure 7.43: Model fit'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.43：模型拟合
- en: 'Plot the loss and accuracy by using the following code:'
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码绘制损失和准确率：
- en: '[PRE185]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Loss plot would look like the following:'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 损失图将如下所示：
- en: '![Figure 7.44: Loss plot'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.44：损失图'
- en: '](img/B16341_07_44.jpg)'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_07_44.jpg)'
- en: 'Figure 7.44: Loss plot'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.44：损失图
- en: 'Accuracy plot would look like the following:'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 准确率图将如下所示：
- en: '![Figure 7.45: Accuracy plot'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.45：准确率图'
- en: '](img/B16341_07_45.jpg)'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_07_45.jpg)'
- en: 'Figure 7.45: Accuracy plot'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.45：准确率图
- en: 'Display a misclassified example. Use the following code:'
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示一个错误分类的示例。使用以下代码：
- en: '[PRE186]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'This will produce the following output:'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 7.46: Wrong classification example'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.46：错误分类示例'
- en: '](img/B16341_07_46.jpg)'
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_07_46.jpg)'
- en: 'Figure 7.46: Wrong classification example'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.46：错误分类示例
- en: 'The output shows an example of a wrong classification: the prediction was lion,
    and the true value was mouse. In this activity, the number of classes was 100,
    which makes it significantly more difficult than in *Exercise 7.05*, *Building
    a CNN*, in which there were only 10 classes. Nevertheless, you can see that after
    15 epochs, the accuracy continued to increase, and loss continued to decrease
    even on the validation dataset. You could then expect better model performance
    if you were to let the model train for more epochs.'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了一个错误分类的例子：预测为狮子，真实标签为老鼠。在这个任务中，类别数为100，这使得它比*练习7.05*、*构建CNN*（仅有10个类别）要困难得多。不过，你可以看到，在经过15个epoch后，准确率持续提高，损失不断减少，甚至在验证数据集上也是如此。如果让模型继续训练更多的epoch，你可以期待更好的模型性能。
- en: 8\. Pre-Trained Networks
  id: totrans-625
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 预训练网络
- en: 'Activity 8.01: Fruit Classification with Fine-Tuning'
  id: totrans-626
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动8.01：通过微调进行水果分类
- en: '**Solution:**'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook.
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter notebook。
- en: 'Import the TensorFlow library as `tf`:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库为`tf`：
- en: '[PRE187]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Create a variable called `file_url` containing a link to the dataset:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`file_url`的变量，包含数据集的链接：
- en: '[PRE188]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Download the dataset using `tf.keras.get_file` with `''fruits360.zip''`, `origin=file_url`,
    and `extract=True` as parameters, and save the result to a variable called `zip_dir`:'
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.keras.get_file`下载数据集，参数为`'fruits360.zip'`、`origin=file_url`和`extract=True`，并将结果保存到名为`zip_dir`的变量中：
- en: '[PRE189]'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'Import the `pathlib` library:'
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`pathlib`库：
- en: '[PRE190]'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Create a variable called `path` containing the full path to the `fruits360_filtered`
    directory using `pathlib.Path(zip_dir).parent`:'
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`path`的变量，使用`pathlib.Path(zip_dir).parent`存储`fruits360_filtered`目录的完整路径：
- en: '[PRE191]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Create two variables called `train_dir` and `validation_dir` that take the
    full path to the train (`Training`) and validation (`Test`) folders, respectively:'
  id: totrans-639
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个变量`train_dir`和`validation_dir`，分别存储训练（`Training`）和验证（`Test`）文件夹的完整路径：
- en: '[PRE192]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Create two variables called `total_train` and `total_val` that get the number
    of images for the training and validation sets:'
  id: totrans-641
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个变量`total_train`和`total_val`，获取训练集和验证集中的图像数量：
- en: '[PRE193]'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'Import `ImageDataGenerator` from `tensorflow.keras.preprocessing`:'
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.keras.preprocessing`导入`ImageDataGenerator`：
- en: '[PRE194]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'Create an `ImageDataGenerator` model called `train_img_gen` with data augmentation:'
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`train_img_gen`的`ImageDataGenerator`模型，进行数据增强：
- en: '[PRE195]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'Create an `ImageDataGenerator` mode called `val_img_gen` with rescaling by
    dividing by `255`:'
  id: totrans-647
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`val_img_gen`的`ImageDataGenerator`模型，按`255`进行重缩放：
- en: '[PRE196]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'Create four variables called `batch_size`, `img_height`, `img_width`, and `channel`
    that take the values `32`, `224`, `224`, and `3`, respectively:'
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建四个变量`batch_size`、`img_height`、`img_width`和`channel`，并分别赋值为`32`、`224`、`224`和`3`：
- en: '[PRE197]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Create a data generator called `train_data_gen` using `flow_from_directory()`
    and specify the batch size, training folder, and target size:'
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`flow_from_directory()`创建一个名为`train_data_gen`的数据生成器，并指定批处理大小、训练文件夹和目标大小：
- en: '[PRE198]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'Create a data generator called `val_data_gen` using `flow_from_directory()`
    and specify the batch size, validation folder, and target size:'
  id: totrans-653
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`flow_from_directory()`创建一个名为`val_data_gen`的数据生成器，并指定批处理大小、验证文件夹和目标大小：
- en: '[PRE199]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Import `numpy` as `np`, `tensorflow` as `tf`, and `layers` from `tensorflow.keras`:'
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`numpy`为`np`，`tensorflow`为`tf`，以及从`tensorflow.keras`导入`layers`：
- en: '[PRE200]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'Set `8` as the seed for `numpy` and `tensorflow`:'
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`8`为`numpy`和`tensorflow`的随机种子：
- en: '[PRE201]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'Import `NASNetMobile` from `tensorflow.keras.applications`:'
  id: totrans-659
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.keras.applications`导入`NASNetMobile`：
- en: '[PRE202]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Instantiate a `NASNetMobile` model into a variable called `base_model`:'
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个`NASNetMobile`模型并保存到名为`base_model`的变量中：
- en: '[PRE203]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'Print a summary of this `NASNetMobile` model:'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`NASNetMobile`模型的摘要：
- en: '[PRE204]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'The expected output is as follows:'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 8.8: Summary of the model'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.8：模型总结'
- en: '](img/B16341_08_08.jpg)'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_08_08.jpg)'
- en: 'Figure 8.8: Summary of the model'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.8：模型总结
- en: 'Create a new model using `tf.keras.Sequential()` by adding the base model to
    the `Flatten` and `Dense` layers. Save this model to a variable called `model`:'
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.keras.Sequential()`创建一个新模型，将基础模型添加到`Flatten`和`Dense`层中，并将此模型保存到名为`model`的变量中：
- en: '[PRE205]'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'Instantiate a `tf.keras.optimizers.Adam()` class with `0.001` as the learning
    rate and save it to a variable called `optimizer`:'
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个`tf.keras.optimizers.Adam()`类，设置学习率为`0.001`，并将其保存到名为`optimizer`的变量中：
- en: '[PRE206]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Compile the neural network using the `compile()` method with `categorical_crossentropy`
    as the loss function, an Adam optimizer with a learning rate of `0.001`, and `accuracy`
    as the metric to be displayed:'
  id: totrans-673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`compile()`方法编译神经网络，设置`categorical_crossentropy`为损失函数，使用学习率为`0.001`的Adam优化器，并将`accuracy`作为显示的指标：
- en: '[PRE207]'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'Fit the neural networks with `fit()` method. This model may take a few minutes
    to train:'
  id: totrans-675
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fit()`方法训练神经网络。该模型可能需要几分钟才能完成训练：
- en: '[PRE208]'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'The expected output is as follows:'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期输出如下：
- en: '![Figure 8.9: Epochs of the trained model'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.9：训练模型的Epochs'
- en: '](img/B16341_08_06.jpg)'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_08_06.jpg)'
- en: 'Figure 8.9: Epochs of the trained model'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9：训练模型的Epochs
- en: In this activity, you used fine-tuning to customize a `NASNetMobile` model pre-trained
    on ImageNet on a dataset containing images of fruit. You froze the first 700 layers
    of this model and trained only the last few on five epochs. You achieved an accuracy
    score of `0.9549` for the training set and `0.8264` for the test set.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 在本活动中，您使用了微调技术，将预先在ImageNet上训练的`NASNetMobile`模型自定义为一个包含水果图像的数据集。您冻结了模型的前700层，并仅在五个Epoch上训练了最后几层。您在训练集上的准确率为`0.9549`，在测试集上的准确率为`0.8264`。
- en: 'Activity 8.02: Transfer Learning with TensorFlow Hub'
  id: totrans-682
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动8.02：使用TensorFlow Hub进行迁移学习
- en: '**Solution:**'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Open a new Jupyter notebook.
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter笔记本。
- en: 'Import the TensorFlow library:'
  id: totrans-685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入TensorFlow库：
- en: '[PRE209]'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'Create a variable called `file_url` containing a link to the dataset:'
  id: totrans-687
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`file_url`的变量，包含指向数据集的链接：
- en: '[PRE210]'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Download the dataset using `tf.keras.get_file` with `cats_and_dogs.zip`, `origin=file_url`,
    and `extract=True` as parameters and save the result to a variable called `zip_dir`:'
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tf.keras.get_file`下载数据集，设置参数`cats_and_dogs.zip`、`origin=file_url`和`extract=True`，并将结果保存到名为`zip_dir`的变量中：
- en: '[PRE211]'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Import the `pathlib` library:'
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`pathlib`库：
- en: '[PRE212]'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Create a variable called `path` containing the full path to the `cats_and_dogs_filtered`
    directory using `pathlib.Path(zip_dir).parent`:'
  id: totrans-693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`path`的变量，使用`pathlib.Path(zip_dir).parent`获取`cats_and_dogs_filtered`目录的完整路径：
- en: '[PRE213]'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'Create two variables called `train_dir` and `validation_dir` that take the
    full path to the `train` and `validation` folders:'
  id: totrans-695
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个变量，分别命名为`train_dir`和`validation_dir`，并赋值为`train`和`validation`文件夹的完整路径：
- en: '[PRE214]'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Create two variables called `total_train` and `total_val` that will get the
    number of images for the training and validation sets (`2000` and `1000`, respectively):'
  id: totrans-697
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个变量，分别命名为`total_train`和`total_val`，它们将获取训练集和验证集的图像数量（分别为`2000`和`1000`）：
- en: '[PRE215]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'Import `ImageDataGenerator` from `tensorflow.keras.preprocessing`:'
  id: totrans-699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.keras.preprocessing`导入`ImageDataGenerator`：
- en: '[PRE216]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'Instantiate two `ImageDataGenerator` classes and call them `train_image_generator`
    and `validation_image_generator`. These will rescale images by dividing by `255`:'
  id: totrans-701
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化两个`ImageDataGenerator`类，并分别命名为`train_image_generator`和`validation_image_generator`。它们将通过除以`255`来重新缩放图像：
- en: '[PRE217]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'Create three variables called `batch_size`, `img_height`, and `img_width` that
    take the values `32`, `224`, and `224`, respectively:'
  id: totrans-703
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个变量，分别命名为`batch_size`、`img_height`和`img_width`，并分别赋值为`32`、`224`和`224`：
- en: '[PRE218]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'Create a data generator called `train_data_gen` using `flow_from_directory()`
    and specify the batch size, the path to the training folder, target size, and
    mode of the class:'
  id: totrans-705
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`train_data_gen`的数据生成器，使用`flow_from_directory()`并指定批次大小、训练文件夹路径、目标大小和类的模式：
- en: '[PRE219]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'Create a data generator called `val_data_gen` using `flow_from_directory()`
    and specify the batch size, paths to the validation folder, target size, and mode
    of the class:'
  id: totrans-707
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`val_data_gen`的数据生成器，使用`flow_from_directory()`并指定批次大小、验证文件夹路径、目标大小和类的模式：
- en: '[PRE220]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Import `numpy` as `np`, `tensorflow` as `tf`, and `layers` from `tensorflow.keras`:'
  id: totrans-709
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`numpy`作为`np`，`tensorflow`作为`tf`，以及从`tensorflow.keras`导入`layers`：
- en: '[PRE221]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'Set `8` (this is totally arbitrary) as `seed` for numpy and tensorflow:'
  id: totrans-711
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`8`（这是完全任意的）作为`numpy`和tensorflow的`seed`：
- en: '[PRE222]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Import `tensorflow_hub`, as shown here:'
  id: totrans-713
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`tensorflow_hub`，如下所示：
- en: '[PRE223]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'Load the EfficientNet B0 feature vector from TensorFlow Hub:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从TensorFlow Hub加载EfficientNet B0特征向量：
- en: '[PRE224]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'Create a new model that combines the EfficientNet B0 module with two new top
    layers, with `500` and `1` as units, and ReLu and sigmoid as the activation functions:'
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模型，结合EfficientNet B0模块和两个新的顶层，单位分别为`500`和`1`，激活函数为ReLu和sigmoid：
- en: '[PRE225]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'Compile this model by providing `binary_crossentropy` as the `loss` function,
    an Adam optimizer with a learning rate of `0.001`, and `accuracy` as the metric
    to be displayed:'
  id: totrans-719
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译该模型，提供`binary_crossentropy`作为`loss`函数，使用学习率为`0.001`的Adam优化器，并设置`accuracy`作为显示的指标：
- en: '[PRE226]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'Fit the model and provide the train and validation data generators. Run it
    for five epochs:'
  id: totrans-721
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拟合模型并提供训练和验证数据生成器。运行五个epoch：
- en: '[PRE227]'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'The expected output will be as follows:'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期的输出如下：
- en: '![Figure 8.10: Model training output'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.10：模型训练输出'
- en: '](img/B16341_08_07.jpg)'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_08_07.jpg)'
- en: 'Figure 8.10: Model training output'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10：模型训练输出
- en: In this activity, you achieved a very high accuracy score (with `1` and `0.99`
    for the training and test sets, respectively), using transfer learning from TensorFlow
    Hub. You used the **EfficientNet B0** feature vector combined with two custom
    final layers, and your final model is almost perfectly predicting images of cats
    and dogs.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次活动中，您通过使用来自TensorFlow Hub的迁移学习，取得了非常高的准确率（训练集和测试集的准确率分别为`1`和`0.99`）。您使用了**EfficientNet
    B0**特征向量，结合了两个自定义的最终层，最终模型几乎完美地预测了猫狗图像。
- en: 9\. Recurrent Neural Networks
  id: totrans-728
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. 循环神经网络
- en: 'Activity 9.01: Building an RNN with Multiple LSTM Layers to Predict Power Consumption'
  id: totrans-729
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 9.01：构建一个具有多个LSTM层的RNN来预测电力消耗
- en: '**Solution:**'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: Perform the following steps to complete this activity.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此活动。
- en: Open a new Jupyter or Colab notebook.
  id: totrans-732
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter或Colab笔记本。
- en: 'Import the libraries needed. Use `numpy`, `pandas`, `datetime`, and `MinMaxScaler`
    to scale the dataset between zero and one:'
  id: totrans-733
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库。使用`numpy`、`pandas`、`datetime`和`MinMaxScaler`将数据集缩放到零到一之间：
- en: '[PRE228]'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'Use the `read_csv()` function to read in your CSV file and store your dataset
    in a pandas DataFrame, `data`:'
  id: totrans-735
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv()`函数读取CSV文件并将数据集存储在一个pandas DataFrame中，命名为`data`：
- en: '[PRE229]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'Create a new column, `Datetime`, by combining `Date` and `Time` columns using
    the following code:'
  id: totrans-737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码通过组合`Date`和`Time`列来创建一个新的列`Datetime`：
- en: '[PRE230]'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'Sort the DataFrame in ascending order using the `Datetime` column:'
  id: totrans-739
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Datetime`列按升序排序DataFrame：
- en: '[PRE231]'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'Create a list called `num_cols` containing the columns that have numeric values
    – `Global_active_power`, `Global_reactive_power`, `Voltage`, `Global_intensity`,
    `Sub_metering_1`, `Sub_metering_2`, and `Sub_metering_3`:'
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`num_cols`的列表，其中包含具有数值值的列——`Global_active_power`、`Global_reactive_power`、`Voltage`、`Global_intensity`、`Sub_metering_1`、`Sub_metering_2`和`Sub_metering_3`：
- en: '[PRE232]'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Convert all columns listed in `num_cols` to a numeric datatype:'
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`num_cols`中列出的所有列转换为数值数据类型：
- en: '[PRE233]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'Call the `head()` function on your data to take a look at the first five rows
    of your DataFrame:'
  id: totrans-745
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据上调用`head()`函数，查看DataFrame的前五行：
- en: '[PRE234]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'You should get the following output:'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会得到以下输出：
- en: '![Figure 9.40: First five rows of the DataFrame'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.40：DataFrame的前五行'
- en: '](img/B16341_09_40.jpg)'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_40.jpg)'
- en: 'Figure 9.40: First five rows of the DataFrame'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.40：DataFrame的前五行
- en: 'Call `tail()` on your data to take a look at the last five rows of your DataFrame:'
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据上调用`tail()`函数，查看DataFrame的最后五行：
- en: '[PRE235]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'You should get the following output:'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会得到以下输出：
- en: '![Figure 9.41: Last five rows of the DataFrame'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.41：DataFrame的最后五行'
- en: '](img/B16341_09_41.jpg)'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_41.jpg)'
- en: 'Figure 9.41: Last five rows of the DataFrame'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.41：DataFrame的最后五行
- en: 'Iterate through columns in `num_cols` and fill in missing values with the average
    using the following code:'
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代`num_cols`中的列，并使用以下代码用平均值填充缺失值：
- en: '[PRE236]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Use `drop()` to remove `Date`, `Time`, `Global_reactive_power`, and `Datetime`
    columns from your DataFrame and save the results in a variable called `df`:'
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`drop()`删除DataFrame中的`Date`、`Time`、`Global_reactive_power`和`Datetime`列，并将结果保存在名为`df`的变量中：
- en: '[PRE237]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Create a scaler from `MinMaxScaler` to your DataFrame to numbers between zero
    and one. Use `fit_transform` to fit the model to the data and then transform the
    data according to the fitted model:'
  id: totrans-761
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MinMaxScaler`从DataFrame中创建一个缩放器，将数据转换到0到1之间。使用`fit_transform`将模型拟合到数据，并根据拟合的模型转换数据：
- en: '[PRE238]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'You should get the following output:'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 9.42: Standardized training data'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.42：标准化训练数据'
- en: '](img/B16341_09_42.jpg)'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_42.jpg)'
- en: 'Figure 9.42: Standardized training data'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.42：标准化训练数据
- en: The preceding screenshot shows the data has been standardized. Values sit between
    0 and 1 now.
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的截图显示数据已经标准化。现在数值位于0和1之间。
- en: 'Create two empty lists called `X` and `y` that will be used to store features
    and target variables:'
  id: totrans-768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个空列表，命名为`X`和`y`，它们将用于存储特征和目标变量：
- en: '[PRE239]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'Create a training dataset that has the previous 60 minutes'' power consumption
    so that you can predict the value for the next minute. Use a `for` loop to create
    data in 60 time steps:'
  id: totrans-770
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个训练数据集，包含前60分钟的用电量，以便预测下一分钟的值。使用`for`循环在60个时间步长中创建数据：
- en: '[PRE240]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'Convert `X` and `y` into NumPy arrays in preparation for training your model:'
  id: totrans-772
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`X`和`y`转换为NumPy数组，为训练模型做准备：
- en: '[PRE241]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Split the dataset into training and testing sets with data before and after
    the index `217440`, respectively:'
  id: totrans-774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据集分为训练集和测试集，分别使用索引`217440`之前和之后的数据：
- en: '[PRE242]'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'You will need some additional libraries for building LSTM. Use `Sequential`
    to initialize the neural net, `Dense` to add a dense layer, `LSTM` to add an LSTM
    layer, and `Dropout` to help prevent overfitting:'
  id: totrans-776
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建LSTM时，你需要一些额外的库。使用`Sequential`初始化神经网络，使用`Dense`添加密集层，使用`LSTM`添加LSTM层，使用`Dropout`帮助防止过拟合：
- en: '[PRE243]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Initialize your neural network. Add LSTM layers with `20`, `40`, and `80` units.
    Use a ReLU activation function and set `return_sequences` to `True`. The `input_shape`
    should be the dimensions of your training set (the number of features and days).
    Finally, add your dropout layer:'
  id: totrans-778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化你的神经网络。添加LSTM层，其中包含`20`、`40`和`80`个单元。使用ReLU激活函数，并将`return_sequences`设置为`True`。`input_shape`应为训练集的维度（特征数和天数）。最后，添加Dropout层：
- en: '[PRE244]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'Print the architecture of the model using the `summary()` function:'
  id: totrans-780
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`summary()`函数打印模型的架构：
- en: '[PRE245]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'The preceding command gives valuable information about the model, layers, and
    parameters:'
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令提供了有关模型、层和参数的宝贵信息：
- en: '![Figure 9.43: Model summary'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.43：模型摘要'
- en: '](img/B16341_09_43.jpg)'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_43.jpg)'
- en: 'Figure 9.43: Model summary'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.43：模型摘要
- en: 'Use the `compile()` method to configure your model for training. Select Adam
    as your optimizer and mean squared error to measure your loss function:'
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`compile()`方法配置你的模型进行训练。选择Adam作为优化器，使用均方误差来衡量损失函数：
- en: '[PRE246]'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'Fit your model and set it to run on two epochs. Set your batch size to `32`:'
  id: totrans-788
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拟合你的模型，并设置运行两次迭代。将批处理大小设置为`32`：
- en: '[PRE247]'
  id: totrans-789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'Save the predictions on the test set in a variable called `y_pred` using `regressor.predict(X_test)`:'
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`regressor.predict(X_test)`将测试集的预测值保存在名为`y_pred`的变量中：
- en: '[PRE248]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'Take a look at the real household power consumption and your predictions for
    the last hour of data from your test set:'
  id: totrans-792
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看测试集数据中最后一小时的真实家庭用电量和你的预测值：
- en: '[PRE249]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'You should get the following output:'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 9.44: Household power consumption prediction visualization'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.44：家庭用电量预测可视化'
- en: '](img/B16341_09_44.jpg)'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_44.jpg)'
- en: 'Figure 9.44: Household power consumption prediction visualization'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.44：家庭用电量预测可视化
- en: As you can see in *Figure 9.44*, your results are pretty good. You can observe
    that for the most part, your predictions are close to the actual values.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图9.44*所示，你的结果相当不错。你可以观察到，大多数情况下，预测值接近实际值。
- en: 'Activity 9.02: Building an RNN for Predicting Tweets'' Sentiment'
  id: totrans-799
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动9.02：构建RNN预测推文情感
- en: '**Solution:**'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Perform the following steps to complete this activity:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此活动：
- en: Open a new Jupyter or Colab notebook.
  id: totrans-802
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter或Colab笔记本。
- en: 'Import the libraries needed. Use `numpy` for computation and `pandas` to work
    with your dataset:'
  id: totrans-803
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库。使用`numpy`进行计算，使用`pandas`处理数据集：
- en: '[PRE250]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: 'Use the `read_csv` method to read in your CSV file and store your dataset in
    a pandas DataFrame, `data`:'
  id: totrans-805
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read_csv`方法读取CSV文件，并将数据集存储在pandas的DataFrame `data`中：
- en: '[PRE251]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'Call the `head()` method on your data to take a look at the first five rows
    of your DataFrame:'
  id: totrans-807
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用数据的`head()`方法，查看DataFrame的前五行：
- en: '[PRE252]'
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'You should get the following output:'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 9.45: First five rows of the DataFrame'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.45：DataFrame的前五行'
- en: '](img/B16341_09_45.jpg)'
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_45.jpg)'
- en: 'Figure 9.45: First five rows of the DataFrame'
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.45：数据框的前五行
- en: In the preceding screenshot, you can see the different sentiments stored in
    the `airline_sentiment` column.
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的截图中，你可以看到存储在`airline_sentiment`列中的不同情感。
- en: 'Call `tail()` on your data to take a look at the last five rows of your DataFrame:'
  id: totrans-814
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据上调用`tail()`以查看数据框的最后五行：
- en: '[PRE253]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'You should get the following output:'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 9.46: Last five rows of the DataFrame'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.46：数据框的最后五行'
- en: '](img/B16341_09_46.jpg)'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_46.jpg)'
- en: 'Figure 9.46: Last five rows of the DataFrame'
  id: totrans-819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.46：数据框的最后五行
- en: 'Create a new DataFrame called `df` that will have only `text` as features and
    `airline_sentiment` as the target variable:'
  id: totrans-820
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的数据框`df`，该数据框仅包含`text`作为特征，`airline_sentiment`作为目标变量：
- en: '[PRE254]'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'Subset `df` by removing all rows where `airline_sentiment` is equal to `neutral`
    by using the following command:'
  id: totrans-822
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令，通过移除`airline_sentiment`等于`neutral`的所有行，来子集化`df`：
- en: '[PRE255]'
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Transform the `airline_sentiment` column to a numeric type by replacing `negative`
    with `0` and `positive` with `1`. Save the result to a variable, `y`:'
  id: totrans-824
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`airline_sentiment`列转换为数值类型，将`negative`替换为`0`，`positive`替换为`1`。将结果保存到变量`y`中：
- en: '[PRE256]'
  id: totrans-825
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Create a variable, `X`, that will contain the data from the text column in
    `df`:'
  id: totrans-826
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个变量`X`，它将包含`df`中`text`列的数据：
- en: '[PRE257]'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Import `Tokenizer` from `tensorflow.keras.preprocessing.text` and `pad_sequences`
    from `tensorflow.keras.preprocessing.sequence`:'
  id: totrans-828
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`tensorflow.keras.preprocessing.text`导入`Tokenizer`，从`tensorflow.keras.preprocessing.sequence`导入`pad_sequences`：
- en: '[PRE258]'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'Instantiate a `Tokenizer()` class with `num_words` equal to `10000`. This will
    keep only the first 10,000 most frequent words. Save it into a variable, `tokenizer`:'
  id: totrans-830
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化`Tokenizer()`类，并将`num_words`设置为`10000`。这将仅保留前10,000个最频繁的单词，并将其保存到一个名为`tokenizer`的变量中：
- en: '[PRE259]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'Fit `tokenizer` on the data `X`:'
  id: totrans-832
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据`X`上拟合`tokenizer`：
- en: '[PRE260]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'Print the vocabulary from `tokenizer`:'
  id: totrans-834
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`tokenizer`中的词汇：
- en: '[PRE261]'
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'You should get output like the following:'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到如下输出：
- en: '![Figure 9.47: Vocabulary defined by tokenizer'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.47：由tokenizer定义的词汇'
- en: '](img/B16341_09_47.jpg)'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_47.jpg)'
- en: 'Figure 9.47: Vocabulary defined by tokenizer'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.47：由tokenizer定义的词汇
- en: From the output vocabulary, you can see the word `to` has been assigned the
    index `1`, `the` is assigned `2`, and so on. You can use it to map the raw text
    into a numerical version of it.
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从输出词汇中，你可以看到单词`to`被分配了索引`1`，`the`被分配了索引`2`，依此类推。你可以用它将原始文本映射成其数值版本。
- en: 'Create the `vocab_size` variable, to contain the length of the tokenizer vocabulary
    plus an additional character that will be used for unknown words:'
  id: totrans-841
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`vocab_size`变量，包含tokenizer词汇的长度，并加上一个额外的字符，用于表示未知单词：
- en: '[PRE262]'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'Transform the raw text from `X` to an encoded version using the vocabulary
    from `tokenizer`. Save the result in a variable called `encoded_tweets`:'
  id: totrans-843
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tokenizer`的词汇，将`X`中的原始文本转换为编码版本。将结果保存在名为`encoded_tweets`的变量中：
- en: '[PRE263]'
  id: totrans-844
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'Pad `encoded_tweets` with `0` at the end for a maximum of 280 characters. Save
    the result in a variable called `padded_tweets`:'
  id: totrans-845
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`encoded_tweets`进行填充，填充字符为`0`，最大长度为280个字符。将结果保存在名为`padded_tweets`的变量中：
- en: '[PRE264]'
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: 'Print the shape of `padded_tweets`:'
  id: totrans-847
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`padded_tweets`的形状：
- en: '[PRE265]'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: 'You should get the following result:'
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到如下结果：
- en: '[PRE266]'
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: As you can see, prepared tweets now all have the same length, that is, 280 characters.
  id: totrans-851
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，准备好的推文现在都具有相同的长度，即280个字符。
- en: 'Randomly permute the indices of `padded_tweets`. Save the result in the `indices`
    variable:'
  id: totrans-852
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随机排列`padded_tweets`的索引。将结果保存到`indices`变量中：
- en: '[PRE267]'
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'Create two variables, `train_idx` and `test_idx`, to contain the first 10,000
    indices and the remaining ones respectively:'
  id: totrans-854
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个变量，`train_idx`和`test_idx`，分别包含前10,000个索引和剩余的索引：
- en: '[PRE268]'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'Using `padded_tweets` and `y`, split the data into training and testing sets.
    Save them into four different variables called `X_train`, `X_test`, `y_train`,
    and `y_test`:'
  id: totrans-856
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`padded_tweets`和`y`，将数据拆分为训练集和测试集，并保存为四个不同的变量，分别命名为`X_train`、`X_test`、`y_train`和`y_test`：
- en: '[PRE269]'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'You will need some additional libraries to build your model. Import `Sequential`,
    `Dense`, `LSTM`, `Dropout`, and `Embedding` using the following code:'
  id: totrans-858
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将需要一些额外的库来构建你的模型。使用以下代码导入`Sequential`、`Dense`、`LSTM`、`Dropout`和`Embedding`：
- en: '[PRE270]'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: 'Initialize your neural network. Add an embedding layer by providing the length
    of the vocabulary, the length of the embedding layer, and the input length. Add
    two LSTM layers with `50` and `100` units. Use a ReLU activation function and
    set `return_sequences` to `True`. Then, add a dropout layer for each LSTM with
    a dropout of 20%. Finally, add a fully-connected layer with sigmoid as the final
    activation function:'
  id: totrans-860
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化你的神经网络。通过提供词汇表长度、嵌入层长度和输入长度来添加嵌入层。添加两个LSTM层，单元数分别为`50`和`100`。使用ReLU激活函数，并将`return_sequences`设置为`True`。然后，为每个LSTM层添加一个丢弃层，丢弃率为20%。最后，添加一个全连接层，并将sigmoid作为最终激活函数：
- en: '[PRE271]'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: 'Check the summary of the model using the `summary()` function:'
  id: totrans-862
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`summary()`函数检查模型的摘要：
- en: '[PRE272]'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: 'You should get the following output:'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会得到以下输出：
- en: '![Figure 9.48: Model summary'
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.48：模型摘要'
- en: '](img/B16341_09_48.jpg)'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_48.jpg)'
- en: 'Figure 9.48: Model summary'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.48：模型摘要
- en: 'Use the `compile()` method to configure your model for training. Select `adam`
    as your optimizer, `binary_crossentropy` to measure your loss function, and `accuracy`
    as the metric to be displayed:'
  id: totrans-868
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`compile()`方法配置你的模型进行训练。选择`adam`作为优化器，`binary_crossentropy`作为损失函数，并将`accuracy`作为显示的指标：
- en: '[PRE273]'
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'Fit your model and set it to run on two epochs. Set your batch size to `32`:'
  id: totrans-870
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拟合你的模型并设置为运行两个epoch。将批处理大小设置为`32`：
- en: '[PRE274]'
  id: totrans-871
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'You should get the following output:'
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会得到以下输出：
- en: '![Figure 9\. 49: Training the model'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 9.49：训练模型'
- en: '](img/B16341_09_49.jpg)'
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_09_49.jpg)'
- en: 'Figure 9\. 49: Training the model'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.49：训练模型
- en: As you can see in *Figure 9.49*, your model achieved an accuracy of `0.7978`
    on the training set with minimal data preparation. You can try to improve this
    by removing stop words or extremely frequent words such as `the` and `a` that
    don't really help to assess the sentiment of a tweet and see if you can achieve
    the same performance on the testing set. You can deduce that the model can correctly
    predict almost 80% of the sentiments for the tweets in the training data.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在*图 9.49*中看到的，模型在训练集上的准确率为`0.7978`，并且几乎没有数据预处理。你可以尝试通过去除停用词或极其频繁的词汇，如`the`和`a`，来改善这一点，因为这些词汇并不真正帮助评估推文的情感，看看是否能够在测试集上达到相同的表现。你可以推断出该模型能够正确预测训练数据中约80%的推文情感。
- en: 10\. Custom TensorFlow Components
  id: totrans-877
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. 自定义TensorFlow组件
- en: 'Activity 10.01: Building a Model with Custom Layers and a Custom Loss Function'
  id: totrans-878
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 10.01：构建具有自定义层和自定义损失函数的模型
- en: '**Solution:**'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'To get started, open a new Colab or Jupyter Notebook. If you are using Google
    Colab, you will need to download the dataset into your Google Drive first:'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，打开一个新的Colab或Jupyter Notebook。如果你使用的是Google Colab，你需要先将数据集下载到Google Drive中：
- en: Open a new Jupyter notebook or Google Colab notebook.
  id: totrans-881
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的Jupyter Notebook或Google Colab Notebook。
- en: 'If you are using Google Colab, you can upload your dataset locally with the
    following code. Otherwise, go to *step 4*. Click on `Choose Files` to navigate
    to the CSV file and click `Open`. Save the file as `uploaded`. Then, go to the
    folder where you saved the dataset:'
  id: totrans-882
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是Google Colab，你可以使用以下代码在本地上传数据集。否则，跳到*步骤4*。点击`选择文件`来导航到CSV文件并点击`打开`。将文件保存为`uploaded`。然后，进入你保存数据集的文件夹：
- en: '[PRE275]'
  id: totrans-883
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Unzip the dataset in the current folder:'
  id: totrans-884
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压当前文件夹中的数据集：
- en: '[PRE276]'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: 'Create a variable, `directory`, that contains the path to the dataset:'
  id: totrans-886
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个变量`directory`，它包含数据集的路径：
- en: '[PRE277]'
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'Import all the required libraries:'
  id: totrans-888
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所有必要的库：
- en: '[PRE278]'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: 'Create a variable, `path`, that contains the full path to the data using `pathlib.Path`:'
  id: totrans-890
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个变量`path`，该变量包含使用`pathlib.Path`访问数据的完整路径：
- en: '[PRE279]'
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'Create two variables, called `train_dir` and `validation_dir`, that take the
    full paths to the train and validation folders, respectively:'
  id: totrans-892
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个变量，分别命名为`train_dir`和`validation_dir`，它们保存训练和验证文件夹的完整路径：
- en: '[PRE280]'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'Create four variables, called `train_table_dir`, `train_glass_dir`, `validation_table_dir`,
    and `validation_glass_dir`, that take the full paths to the glass and table folders
    for the train and validation sets, respectively:'
  id: totrans-894
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建四个变量，分别命名为`train_table_dir`、`train_glass_dir`、`validation_table_dir`和`validation_glass_dir`，它们分别保存训练和验证集中的眼镜和桌子文件夹的完整路径：
- en: '[PRE281]'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'Create four variables that will contain the number of images of glasses and
    tables for the training and validation sets:'
  id: totrans-896
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建四个变量，这些变量将包含用于训练和验证集的眼镜和桌子的图像数量：
- en: '[PRE282]'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'Display a bar chart with the total number of images of glasses and tables:'
  id: totrans-898
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示一个条形图，展示眼镜和桌子的图像总数：
- en: '[PRE283]'
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: 'You should get the following output:'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会得到以下输出：
- en: '![Figure 10.12: Number of images of glasses and tables'
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.12：眼镜和桌子的图像数量'
- en: '](img/B16341_10_12.jpg)'
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_10_12.jpg)'
- en: 'Figure 10.12: Number of images of glasses and tables'
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.12：眼镜和桌子图像数量
- en: The preceding chart shows you the dataset is well balanced. There are almost
    as many images of glasses as tables, around 3,500 images each.
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述图表显示数据集是平衡的。眼镜和桌子的图像几乎一样多，每种大约有3500张图像。
- en: 'Create two variables, called `total_train` and `total_val`, that will get the
    number of images for the training and validation sets, respectively:'
  id: totrans-905
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个变量，分别命名为`total_train`和`total_val`，它们将获取训练集和验证集的图像数量：
- en: '[PRE284]'
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'Import the `ImageDataGenerator` class:'
  id: totrans-907
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`ImageDataGenerator`类：
- en: '[PRE285]'
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'Instantiate two `ImageDataGenerator` classes, `train_image_generator` and `validation_image_generator`,
    that will rescale the images by dividing by 255:'
  id: totrans-909
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化两个`ImageDataGenerator`类，`train_image_generator`和`validation_image_generator`，它们会通过除以255来重新缩放图像：
- en: '[PRE286]'
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: 'Create three variables, called `batch_size`, `img_height`, and `img_width`,
    that take the values `32`, `100`, and `100`, respectively:'
  id: totrans-911
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个变量，分别命名为`batch_size`、`img_height`和`img_width`，它们的值分别为`32`、`100`和`100`：
- en: '[PRE287]'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: 'Create a data generator called `train_data_gen` using `flow_from_directory()`
    method and specify the batch size, the path to the training folder, the value
    of the `shuffle` parameter, the size of the target, and the class mode:'
  id: totrans-913
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`flow_from_directory()`方法创建一个数据生成器，命名为`train_data_gen`，并指定批量大小、训练文件夹路径、`shuffle`参数的值、目标大小和类别模式：
- en: '[PRE288]'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'Create a data generator called `val_data_gen` using `flow_from_directory()`
    method and specify the batch size, the path to the validation folder, the size
    of the target, and the class mode:'
  id: totrans-915
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`flow_from_directory()`方法创建一个数据生成器，命名为`val_data_gen`，并指定批量大小、验证文件夹路径、目标大小和类别模式：
- en: '[PRE289]'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Create your custom loss function. Use `def` and choose a name for your custom
    loss, `custom_loss_function`, in this case. Then, add your two arguments, `y_true`
    and `y_pred`. Now, create a variable, `squared_difference`, to store the square
    of `y_true` minus `y_pred`. Finally, return the calculated loss using your `tf.reduce_mean`
    from `squared_difference`:'
  id: totrans-917
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你的自定义损失函数。使用`def`定义并选择一个名称作为自定义损失函数，本例中为`custom_loss_function`。然后，添加两个参数，`y_true`和`y_pred`。接下来，创建一个变量`squared_difference`来存储`y_true`减去`y_pred`的平方。最后，使用`tf.reduce_mean`返回由`squared_difference`计算出的损失值：
- en: '[PRE290]'
  id: totrans-918
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: 'Build a function that takes your input as a tensor and adds ReLU and batch
    normalization to it:'
  id: totrans-919
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，将输入作为张量并为其添加ReLU和批归一化：
- en: '[PRE291]'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Create a function to build the residual block. You will need to take a tensor
    as your input and pass it to two Conv2D layers. Next, add the input to the output,
    followed by ReLU and batch normalization.
  id: totrans-921
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来构建残差块。你需要将一个张量作为输入并将其传递给两个Conv2D层。接下来，将输入加到输出上，然后添加ReLU和批归一化。
- en: 'Since you used an `Add` layer for the skip connection in your `residual_block`,
    you need to make sure that its inputs are always of the same shape. The `downsample`
    parameter is used to specify the strides of the first Conv2D layer. It specifies
    `strides=2` if `True` and `strides=1` if `False`. When `strides=1`, the output
    (`int_output`) is the same size as the input. But when `strides=2`, the dimensions
    of `int_ouput` are halved. To take this into account, add a Conv2D layer with
    `kernel_size=1` to the skip connection:'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于你在`residual_block`中使用了`Add`层进行跳跃连接，因此需要确保其输入始终具有相同的形状。`downsample`参数用于指定第一个Conv2D层的步幅。若`True`，则指定`strides=2`；若`False`，则指定`strides=1`。当`strides=1`时，输出（`int_output`）与输入相同大小。而当`strides=2`时，`int_output`的维度会减半。为了解决这个问题，在跳跃连接中添加一个`kernel_size=1`的Conv2D层：
- en: '[PRE292]'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: 'Now, use the `keras.layers.Input()` layer to define the input layer of your
    model. Here, your shape is 100 pixels by 100 pixels and has three colors (RGB).
    Then, create your model with your custom architecture. Finally, reference your
    input and output tensors with `model = Model (inputs, outputs)`:'
  id: totrans-924
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`keras.layers.Input()`层来定义模型的输入层。这里，形状是100像素乘100像素，并且有三种颜色（RGB）。然后，使用自定义架构创建模型。最后，使用`model
    = Model(inputs, outputs)`引用输入和输出张量：
- en: '[PRE293]'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'Get a summary of your model:'
  id: totrans-926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取你的模型摘要：
- en: '[PRE294]'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: 'The summary will be shown on running the preceding command:'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前述命令时，将显示模型的摘要：
- en: '![Figure 10.13: Model summary'
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.13：模型摘要]'
- en: '](img/B16341_10_13.jpg)'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_10_13.jpg)'
- en: 'Figure 10.13: Model summary'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.13：模型摘要
- en: 'Compile this model by providing your custom loss function, using Adam as the
    optimizer and accuracy as the metric to be displayed:'
  id: totrans-932
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自定义损失函数、Adam优化器和准确率作为度量标准，编译该模型并显示：
- en: '[PRE295]'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: 'Fit the model and provide the train and validation data generators, the number
    of epochs, the steps per epoch, and the validation steps:'
  id: totrans-934
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拟合模型，并提供训练和验证数据生成器、epoch 数量、每个 epoch 的步骤数以及验证步骤数：
- en: '[PRE296]'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'You should get the following output:'
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该获得以下输出：
- en: '![Figure 10.14: Screenshot of the training progress'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.14：训练进度截图'
- en: '](img/B16341_10_14.jpg)'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_10_14.jpg)'
- en: 'Figure 10.14: Screenshot of the training progress'
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.14：训练进度截图
- en: The preceding screenshot shows the information displayed by TensorFlow during
    the training of your model. You can see the accuracy achieved on the training
    and validation sets for each epoch. On the fifth epoch, the model is `85.9%` accurate
    on the training set and `88.5%` on the validation set.
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述截图显示了在训练模型过程中，TensorFlow 展示的信息。你可以看到每个 epoch 在训练集和验证集上获得的准确率。在第五个 epoch，模型在训练集上的准确率为`85.9%`，在验证集上的准确率为`88.5%`。
- en: 'Plot your training and validation accuracy:'
  id: totrans-941
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制你的训练和验证准确率：
- en: '[PRE297]'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'You should get the following output:'
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该获得以下输出：
- en: '![Figure 10.15: Training and validation accuracy'
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.15：训练和验证准确率'
- en: '](img/B16341_10_15.jpg)'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_10_15.jpg)'
- en: 'Figure 10.15: Training and validation accuracy'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.15：训练和验证准确率
- en: The preceding chart shows the accuracy scores for the training and validation
    sets for each epoch.
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述图表显示了每个 epoch 在训练集和验证集上的准确度分数。
- en: 'Plot your training and validation loss:'
  id: totrans-948
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制你的训练和验证损失：
- en: '[PRE298]'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'You should get the following output:'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该获得以下输出：
- en: '![Figure 10.16: Training and validation loss'
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.16：训练和验证损失'
- en: '](img/B16341_10_16.jpg)'
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_10_16.jpg)'
- en: 'Figure 10.16: Training and validation loss'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.16：训练和验证损失
- en: The preceding chart shows the loss scores for the training and validation sets
    for each epoch.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表显示了每个 epoch 的训练集和验证集的损失分数。
- en: With this activity, you have successfully built a custom MSE loss function and
    a custom residual block layer and trained this custom deep learning model on the
    glass versus table dataset. You now know how to go beyond the default classes
    offered by TensorFlow and build your own custom deep learning models.
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本活动，你已成功构建了一个自定义的 MSE 损失函数和自定义的残差块层，并在玻璃与桌面数据集上训练了该自定义深度学习模型。你现在知道如何超越 TensorFlow
    提供的默认类，构建你自己的自定义深度学习模型。
- en: 11\. Generative Models
  id: totrans-956
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. 生成模型
- en: 'Activity 11.01: Generating Images Using GANs'
  id: totrans-957
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 11.01：使用 GAN 生成图像
- en: '**Solution**:'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Perform the following steps to complete this activity:'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此活动：
- en: 'Load Google Colab and Google Drive:'
  id: totrans-960
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 Google Colab 和 Google Drive：
- en: '[PRE299]'
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'Your output should look something like this:'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应该类似于此：
- en: '[PRE300]'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'Import the libraries that you will be using:'
  id: totrans-964
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入你将使用的库：
- en: '[PRE301]'
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: 'Create a function to format a time string to track your time usage:'
  id: totrans-966
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来格式化时间字符串，以跟踪你的时间使用情况：
- en: '[PRE302]'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: 'Set the generation resolution to `3`. Also, set `img_rows` and `img_cols` to
    `5` and `img_margin` to `16` so that your preview images will be a `5x5` array
    (25 images) with a 16-pixel margin. Set `seed_vector` equal to `200`, `data_path`
    to where you stored your image dataset, and `epochs` to `500`. Finally, print
    the parameters:'
  id: totrans-968
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成分辨率设置为 `3`。同时，将 `img_rows` 和 `img_cols` 设置为 `5`，`img_margin` 设置为 `16`，这样你的预览图像将是一个
    `5x5` 数组（25 张图片），并有 16 像素的边距。将 `seed_vector` 设置为 `200`，`data_path` 设置为存储图像数据集的位置，`epochs`
    设置为 `500`。最后，打印参数：
- en: '[PRE303]'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'Your output should look something like this:'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应该类似于此：
- en: '![Figure 11.30: Output showing the parameters'
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.30：显示参数的输出'
- en: '](img/B16341_11_30.jpg)'
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_30.jpg)'
- en: 'Figure 11.30: Output showing the parameters'
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.30：显示参数的输出
- en: 'If a NumPy preprocessed file exists from prior execution, then load it into
    memory; otherwise, preprocess the data and save the image binary:'
  id: totrans-974
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果之前执行时已经存在一个 NumPy 预处理文件，则将其加载到内存中；否则，预处理数据并保存图像二进制文件：
- en: '[PRE304]'
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: 'Batch and shuffle the data. Use the `tensorflow.data.Dataset` object library
    to use its functions to shuffle the dataset and create batches:'
  id: totrans-976
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对数据进行批处理并打乱顺序。使用 `tensorflow.data.Dataset` 对象库，利用其函数打乱数据集并创建批次：
- en: '[PRE305]'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: 'Build the generator for the DCGAN:'
  id: totrans-978
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 DCGAN 构建生成器：
- en: '[PRE306]'
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: 'Build the discriminator for the DCGAN:'
  id: totrans-980
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 DCGAN 构建判别器：
- en: '[PRE307]'
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: 'Build the generator for the vanilla GAN:'
  id: totrans-982
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为原始 GAN 构建生成器：
- en: '[PRE308]'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: 'Build the discriminator for the vanilla GAN:'
  id: totrans-984
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为原始 GAN 构建判别器：
- en: '[PRE309]'
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'Create a function to generate and save images that can be used to view progress
    during the model''s training:'
  id: totrans-986
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来生成并保存图像，用于查看模型训练过程中的进展：
- en: '[PRE310]'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: 'Initialize the generator for the DCGAN and view the output:'
  id: totrans-988
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 DCGAN 的生成器并查看输出：
- en: '[PRE311]'
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: 'Your output should look something like this:'
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应该类似于此：
- en: '![Figure 11.31: Output showing noise from the DCGAN generator'
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.31：显示 DCGAN 生成器噪声的输出'
- en: '](img/B16341_11_31.jpg)'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_31.jpg)'
- en: 'Figure 11.31: Output showing noise from the DCGAN generator'
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.31：显示 DCGAN 生成器噪声的输出
- en: 'Initialize the generator for the vanilla GAN and view the output:'
  id: totrans-994
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化原始 GAN 的生成器并查看输出：
- en: '[PRE312]'
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'You should get the following output:'
  id: totrans-996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 11.31: Output showing noise from the DCGAN generator'
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.31：显示 DCGAN 生成器噪声的输出'
- en: '](img/B16341_11_32.jpg)'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_32.jpg)'
- en: 'Figure 11.32: Output showing noise from the vanilla GAN generator'
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.32：显示原始 GAN 生成器噪声的输出
- en: 'Print the decision of the DCGAN discriminator evaluated on the seed image:'
  id: totrans-1000
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印 DCGAN 判别器在种子图像上评估的决策：
- en: '[PRE313]'
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'Your output should look something like this:'
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应该如下所示：
- en: '[PRE314]'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: 'Print the decision of the vanilla GAN evaluated on the seed image:'
  id: totrans-1004
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印原始 GAN 在种子图像上评估的决策：
- en: '[PRE315]'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: 'Your output should look something like this:'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应该如下所示：
- en: '[PRE316]'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: 'Create your loss functions. Since the output of both the discriminator and generator
    networks is different, you can define two separate loss functions for them. Moreover,
    they need to be trained separately in independent passes through the networks.
    Both GANs can utilize the same loss functions for their discriminators and generators.
    You can use `tf.keras.losses.BinaryCrossentropy` for `cross_entropy`. This calculates
    the loss between true and predicted labels. Then, define the `discrim_loss` function
    from `real_output` and `fake_output` using `tf.ones` and `tf.zeros` to calculate
    `total_loss`:'
  id: totrans-1008
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你的损失函数。由于判别器和生成器网络的输出不同，你可以为它们分别定义两个独立的损失函数。此外，它们需要在独立的网络传递中分别进行训练。两个 GAN
    都可以为它们的判别器和生成器使用相同的损失函数。你可以使用`tf.keras.losses.BinaryCrossentropy`来计算`cross_entropy`。这会计算真实标签和预测标签之间的损失。然后，使用`tf.ones`和`tf.zeros`从`real_output`和`fake_output`定义`discrim_loss`函数，以计算`total_loss`：
- en: '[PRE317]'
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: 'Create two Adam optimizers, one for the generator and one for the discriminator.
    Use the same learning rate and momentum for each:'
  id: totrans-1010
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个 Adam 优化器，一个用于生成器，一个用于判别器。每个优化器使用相同的学习率和动量：
- en: '[PRE318]'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Here, you have your individual training step. It's very important that you only
    modify one network's weights at a time. With `tf.GradientTape()`, you can train
    the discriminator and generator at the same time, but separately from one another.
    This is how TensorFlow does automatic differentiation. It calculates the derivatives.
    You'll see that it creates two "tapes" – `gen_tape` and `disc_tape`. Think of
    these as recordings of the calculations for each.
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你有你的单个训练步骤。非常重要的一点是，你每次只能修改一个网络的权重。通过`tf.GradientTape()`，你可以同时训练判别器和生成器，但它们彼此独立。这就是
    TensorFlow 自动求导的工作方式。它会计算导数。你会看到它创建了两个“录音带”——`gen_tape`和`disc_tape`。可以把它们看作是每个计算过程的记录。
- en: 'Create `real_output` and `fake_output` for the discriminator. Use this for
    the generator loss (`g_loss`). Then, calculate the discriminator loss (`d_loss`)
    and the gradients of both the generator and discriminator with `gradients_of_generator`
    and `gradients_of_discriminator` and apply them. Encapsulate these steps within
    a function, passing in the generator, discriminator, and images, and returning
    the generator loss (`g_loss`) and discriminator loss (`d_loss`):'
  id: totrans-1013
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为判别器创建`real_output`和`fake_output`。将此用作生成器的损失（`g_loss`）。然后，计算判别器损失（`d_loss`）以及生成器和判别器的梯度，通过`gradients_of_generator`和`gradients_of_discriminator`并应用它们。将这些步骤封装在一个函数中，传入生成器、判别器和图像，并返回生成器损失（`g_loss`）和判别器损失（`d_loss`）：
- en: '[PRE319]'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: 'Create a number of fixed seeds with `fixed_seeds` equal to the number of images
    to display so that you can track the same images. This allows you to see how individual
    seeds evolve over time, tracking your time with `for epoch in range`. Now, loop
    through each batch with `for image_batch in dataset`. Continue to track your loss
    for both the generator and discriminator with `generator_loss` and `discriminator_loss`.
    Now, you have a nice display of all this information as it trains:'
  id: totrans-1015
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个固定种子列表，`fixed_seeds`的数量等于要显示的图像数量，这样你就可以跟踪相同的图像。这使你能够看到每个种子如何随时间变化，通过`for
    epoch in range`来跟踪你的时间。现在，通过`for image_batch in dataset`循环处理每个批次。继续跟踪生成器和判别器的损失，使用`generator_loss`和`discriminator_loss`。现在，你可以在训练过程中查看所有这些信息：
- en: '[PRE320]'
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: 'Train the DCGAN model on your training dataset:'
  id: totrans-1017
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的训练数据集上训练 DCGAN 模型：
- en: '[PRE321]'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: 'Your output should look something like this:'
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应该如下所示：
- en: '![Figure 11.33: Output during training of the DCGAN model'
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.33：训练过程中 DCGAN 模型的输出'
- en: '](img/B16341_11_33.jpg)'
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_33.jpg)'
- en: 'Figure 11.33: Output during training of the DCGAN model'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.33：DCGAN模型训练过程中的输出
- en: The output shows the loss for the generator and discriminator at each epoch.
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出显示了每个周期生成器和判别器的损失。
- en: 'Train the vanilla model on your training dataset:'
  id: totrans-1024
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的训练数据集上训练香草模型：
- en: '[PRE322]'
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: 'Your output should look something like this:'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的输出应该类似于以下内容：
- en: '![Figure 11.34: Output during training of the vanilla GAN model'
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图11.34：香草GAN模型训练过程中的输出'
- en: '](img/B16341_11_34.jpg)'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_34.jpg)'
- en: 'Figure 11.34: Output during training of the vanilla GAN model'
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.34：香草GAN模型训练过程中的输出
- en: 'View your images generated by the DCGAN model after the 100th epoch:'
  id: totrans-1030
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看DCGAN模型在第100个周期后的生成图像：
- en: '[PRE323]'
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'You will get output like the following:'
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到类似下面的输出：
- en: '![Figure 11.35: Output images from the DCGAN model after 100 epochs'
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图11.35：DCGAN模型在100个周期后的输出图像'
- en: '](img/B16341_11_35.jpg)'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_35.jpg)'
- en: 'Figure 11.35: Output images from the DCGAN model after 100 epochs'
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.35：DCGAN模型在100个周期后的输出图像
- en: 'View your images generated by the DCGAN model after the 500th epoch:'
  id: totrans-1036
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看DCGAN模型在第500个周期后的生成图像：
- en: '[PRE324]'
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'You will get output like the following:'
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到类似下面的输出：
- en: '![Figure 11.36: Output images from the DCGAN model after 500 epochs'
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图11.36：DCGAN模型在500个周期后的输出图像'
- en: '](img/B16341_11_36.jpg)'
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_36.jpg)'
- en: 'Figure 11.36: Output images from the DCGAN model after 500 epochs'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.36：DCGAN模型在500个周期后的输出图像
- en: 'View your images generated by the vanilla GAN model after the 100th epoch:'
  id: totrans-1042
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看香草GAN模型在第100个周期后的生成图像：
- en: '[PRE325]'
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: 'You will get output like the following:'
  id: totrans-1044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到类似下面的输出：
- en: '![Figure 11.37: Output images from the vanilla GAN model after 100 epochs'
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图11.37：香草GAN模型在100个周期后的输出图像'
- en: '](img/B16341_11_37.jpg)'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_37.jpg)'
- en: 'Figure 11.37: Output images from the vanilla GAN model after 100 epochs'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.37：香草GAN模型在100个周期后的输出图像
- en: 'View your images generated by the vanilla GAN model after the 500th epoch:'
  id: totrans-1048
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看香草GAN模型在第500个周期后的生成图像：
- en: '[PRE326]'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'You will get output like the following:'
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到类似下面的输出：
- en: '![Figure 11.38: Output images from the vanilla GAN model after 500 epochs'
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图11.38：香草GAN模型在500个周期后的输出图像'
- en: '](img/B16341_11_38.jpg)'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_11_38.jpg)'
- en: 'Figure 11.38: Output images from the vanilla GAN model after 500 epochs'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.38：香草GAN模型在500个周期后的输出图像
- en: The output shows the images generated by the vanilla GAN after 500 epochs. You
    can see that they are very different from those generated by the DCGAN.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了香草GAN在500个周期后生成的图像。你可以看到它们与DCGAN生成的图像有很大不同。
- en: You've just completed the last activity of the book. You created your own images
    with a DCGAN and compared them to a vanilla GAN model. As you can see from *Figure
    11.36* and *Figure 11.38*, the results are very different from those of the DCGAN
    model, which were clearly recognizable as banana-like with different variations
    and orientations. With that model, though some images were more banana-like than
    others, all still exhibit at least some identifiable characteristics of bananas,
    such as color, shape, and presence of the black tip. The results from the vanilla
    GAN model, however, look more like pixel averages of the training dataset, which
    is overall not a good representation of real-life bananas. All images seem to
    have the same orientation, which may be another indicator that the results are
    more of a pixel average of the training data.
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚完成了本书的最后一项活动。你用DCGAN创建了自己的图像，并将其与香草GAN模型进行比较。如*图11.36*和*图11.38*所示，DCGAN模型的结果明显不同，图像呈现出香蕉形状并具有不同的变化和方向。即使某些图像比其他的更像香蕉，但所有图像至少都有香蕉的可识别特征，比如颜色、形状和黑色尖端的存在。然而，香草GAN模型的结果看起来更像是训练数据集的像素平均值，整体上无法很好地代表现实中的香蕉。所有图像似乎都具有相同的方向，这可能是另一个表明结果更像是训练数据像素平均值的指示。
- en: '![Rayon](img/Matthew_Moocarme.png)'
  id: totrans-1056
  prefs: []
  type: TYPE_IMG
  zh: '![Rayon](img/Matthew_Moocarme.png)'
- en: '**Matthew Moocarme**'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '**Matthew Moocarme**'
- en: '![Rayon](img/Anthony_So.png)'
  id: totrans-1058
  prefs: []
  type: TYPE_IMG
  zh: '![Rayon](img/Anthony_So.png)'
- en: '**Anthony So**'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '**Anthony So**'
- en: '![Rayon](img/Anthony_Maddalone.png)'
  id: totrans-1060
  prefs: []
  type: TYPE_IMG
  zh: '![Rayon](img/Anthony_Maddalone.png)'
- en: '**Anthony Maddalone**'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: '**Anthony Maddalone**'
- en: Hey!
  id: totrans-1062
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嘿！
- en: We're Matthew Moocarme, Anthony So, and Anthony Maddalone, the authors of this
    book. We really hope you enjoyed reading our book and found it useful for learning
    TensorFlow.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是Matthew Moocarme、Anthony So和Anthony Maddalone，本书的作者。我们真的希望你喜欢阅读本书，并且觉得它对学习TensorFlow有帮助。
- en: It would really help us (and other potential readers!) if you could leave a
    review on Amazon sharing your thoughts on *The TensorFlow Workshop*.
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能在亚马逊上留下评论，分享你对*《TensorFlow工作坊》*的看法，这将对我们（以及其他潜在的读者）大有帮助！
- en: Go to the link [https://packt.link/r/1800205252](https://packt.link/r/1800205252).
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问链接 [https://packt.link/r/1800205252](https://packt.link/r/1800205252)。
- en: OR
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: Scan the QR code to leave your review.
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描二维码留下您的评论。
- en: '![Barcode](img/qr-code-https___packt.link_r_1800205252.jpg)'
  id: totrans-1068
  prefs: []
  type: TYPE_IMG
  zh: '![条形码](img/qr-code-https___packt.link_r_1800205252.jpg)'
- en: Your review will help us to understand what's worked well in this book and what
    could be improved upon for future editions, so it really is appreciated.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 您的评论将帮助我们了解本书中的优点和未来版本可以改进的地方，因此我们非常感激。
- en: Best wishes,
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 祝一切顺利，
- en: Matthew Moocarme, Anthony So, and Anthony Maddalone
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: 马修·穆卡姆，安东尼·索，安东尼·马多隆
- en: '![Packt Logo](img/Packt_Logo.png)'
  id: totrans-1072
  prefs: []
  type: TYPE_IMG
  zh: '![Packt logo](img/Packt_Logo.png)'
