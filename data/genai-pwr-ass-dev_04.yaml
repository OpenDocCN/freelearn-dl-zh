- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Boost Coding Efficiency for Python and Java with Auto-Code Generation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过自动代码生成提高 Python 和 Java 的编码效率
- en: 'In this chapter we will look at the following key topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下关键主题：
- en: Overview of the use case for weather data analysis
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天气数据分析用例概述
- en: Python auto-code generation using Amazon Q Developer for weather data analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q 开发者为天气数据分析生成 Python 自动代码
- en: Java auto-code generation using Amazon Q Developer for weather data analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Q 开发者为天气数据分析生成 Java 自动代码
- en: In the previous chapter, we laid the foundation for different auto-code generation
    techniques to interact with AI-powered code assistants. We discussed common prompting
    techniques such as single-line, multi-line, chain-of-thought, and chat with code
    assistant, as well as common code-building methods.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们为不同的自动代码生成技术与其 AI 驱动的代码助手交互奠定了基础。我们讨论了常见的提示技术，如单行、多行、思维链和与代码助手聊天，以及常见的代码构建方法。
- en: In this chapter, we will look at how you can use Amazon Q Developer to suggest
    code in a variety of IDEs. We will start with the two most prominent programming
    languages used by developers, Python and Java, to demonstrate how auto-code can
    be generated using techniques from [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060).
    We will also see how Amazon Q Developer adds value during the code development
    process by enabling a chat with the code assistant technique.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用 Amazon Q 开发者工具在多种集成开发环境（IDEs）中建议代码。我们将从开发者最常用的两种编程语言，Python 和
    Java，开始，展示如何利用第 [*3章*](B21378_03.xhtml#_idTextAnchor060) 中的技术生成自动代码。我们还将看到 Amazon
    Q 开发者如何通过启用与代码助手进行聊天的技术，在代码开发过程中增加价值。
- en: We believe that demonstrating the effectiveness and ease of use of AI-powered
    code assistants using a sample application will be impactful.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信，通过一个示例应用程序展示 AI 驱动的代码助手的效率和易用性将具有影响力。
- en: In the next section, let’s first define the sample use case that we will use
    for both Python and Java scripts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们首先定义我们将用于 Python 和 Java 脚本的示例用例。
- en: An overview of the use case for weather data analysis
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 天气数据分析用例概述
- en: Many customers are keen to understand the weather patterns for a specific city,
    which holds significant importance for numerous applications and can be regarded
    as a crucial data source across a wide variety of applications. Weather data applications
    in enterprises can serve various purposes across different industries.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多客户都渴望了解特定城市的天气模式，这对于众多应用都具有重要意义，并且可以被视为广泛应用中的关键数据源。企业中的天气数据应用可以在不同行业中服务于各种目的。
- en: 'Here’s a general overview of how weather data applications can be utilized
    in some of the enterprises:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个概述，说明天气数据应用如何在某些企业中得到利用：
- en: '**Risk management and insurance**: Insurance companies can use weather data
    to assess and mitigate risks connected with weather-related events such as hurricanes,
    floods, or wildfires. By analyzing historical weather patterns and forecasts,
    insurers can better understand potential risks and adjust their policies accordingly.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**风险管理及保险**：保险公司可以使用天气数据来评估和减轻与天气相关事件（如飓风、洪水或野火）相关的风险。通过分析历史天气模式和预报，保险公司可以更好地理解潜在风险并相应调整其政策。'
- en: '**Supply chain optimization**: Weather data can help optimize supply chain
    operations by providing insights into weather conditions that may impact transportation,
    logistics, and distribution networks. Enterprises can use weather forecasts to
    anticipate disruptions and optimize routes and inventory management accordingly.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**供应链优化**：天气数据可以通过提供可能影响运输、物流和分销网络的天气条件洞察来帮助优化供应链运营。企业可以使用天气预报来预测中断，并相应地优化路线和库存管理。'
- en: '**Energy management**: Energy companies can leverage weather data to optimize
    energy production and distribution. For example, renewable energy companies can
    use weather forecasts to predict solar or wind energy generation, helping them
    better plan and manage their energy resources.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能源管理**：能源公司可以利用天气数据来优化能源生产和分配。例如，可再生能源公司可以使用天气预报来预测太阳能或风能的生成，帮助他们更好地规划和管理工作资源。'
- en: '**Finance industry**: In the finance industry, weather data can be leveraged
    in various ways to enhance decision-making processes and improve risk management
    strategies. In retail banking, weather patterns directly influence consumer behavior
    and spending habits, thereby affecting banking operations. Additionally, in the
    real estate sector, weather data holds substantial value, particularly concerning
    property insurance and mortgage lending.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金融行业**：在金融行业，天气数据可以通过多种方式被利用来增强决策过程和改善风险管理策略。在零售银行业务中，天气模式直接影响消费者的行为和消费习惯，从而影响银行业务。此外，在房地产行业，天气数据具有很高的价值，尤其是在财产保险和抵押贷款方面。'
- en: '**Agriculture and farming**: Agriculture enterprises can use weather data to
    optimize crop planning, irrigation schedules, and pest management. By analyzing
    weather patterns and forecasts, farmers can make data-driven decisions to improve
    crop yields and minimize risks connected with weather-related events.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**农业和农业**：农业企业可以利用天气数据优化作物规划、灌溉计划和害虫管理。通过分析天气模式和预报，农民可以做出基于数据的决策，以提高作物产量并最小化与天气相关事件相关的风险。'
- en: '**Retail and marketing**: Retailers can use weather data to optimize marketing
    campaigns and inventory management. For example, retailers can adjust their promotions
    and inventory levels based on weather forecasts to capitalize on consumer behavior
    changes that are influenced by weather conditions.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零售和营销**：零售商可以利用天气数据优化营销活动和库存管理。例如，零售商可以根据天气预报调整促销和库存水平，以利用受天气条件影响的消费者行为变化。'
- en: '**Construction and infrastructure**: Construction companies can use weather
    data to plan construction projects more effectively and minimize weather-related
    delays. By integrating weather forecasts into project planning and scheduling,
    construction enterprises can optimize resource allocation and reduce project risks.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建筑和基础设施**：建筑公司可以利用天气数据更有效地规划建设项目并最小化与天气相关的延误。通过将天气预报整合到项目规划和调度中，建筑企业可以优化资源配置并降低项目风险。'
- en: '**Tourism and hospitality**: Enterprises in the tourism and hospitality industry
    can use weather data to optimize operations and enhance customer experiences.
    For example, hotels and resorts can adjust pricing and marketing strategies based
    on weather forecasts to attract more visitors during favorable weather conditions.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旅游和酒店业**：旅游和酒店业的企业可以利用天气数据优化运营并提升客户体验。例如，酒店和度假村可以根据天气预报调整定价和营销策略，以在有利天气条件下吸引更多游客。'
- en: Overall, weather data applications in enterprises can provide valuable insights
    and help businesses make informed decisions across various industries, ultimately
    driving efficiency, reducing risks, and improving competitiveness. There are many
    vendors, such as OpenWeatherMap, The Weather Company, AerisWeather, WeatherTAP,
    AccuWeather, and Yahoo Weather, that provide weather data to enterprises.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，企业中的天气数据应用可以提供有价值的见解，帮助企业跨行业做出明智的决策，最终提高效率、降低风险和增强竞争力。有许多供应商，如OpenWeatherMap、The
    Weather Company、AerisWeather、WeatherTAP、AccuWeather和Yahoo Weather，为企业和机构提供天气数据。
- en: Application requirements – weather data analysis
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用需求 – 天气数据分析
- en: For our application, we will use weather data provided by OpenWeatherMap, which
    offers a rich set of APIs. With **api.openweathermap.org**, you gain access to
    a comprehensive source of weather information, enabling you to seamlessly integrate
    real-time and forecasted weather data into your applications. OpenWeatherMap’s
    API offers a wide range of weather data, including current weather conditions,
    forecasts, historical data, and more. Whether you’re building a weather app, optimizing
    logistics, or planning outdoor events, our API provides the data you need to make
    informed decisions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用，我们将使用OpenWeatherMap提供的天气数据，它提供了一套丰富的API。通过**api.openweathermap.org**，您可以访问一个全面的天气信息来源，使您能够无缝地将实时和预测天气数据集成到您的应用中。OpenWeatherMap的API提供了一系列的天气数据，包括当前天气状况、预报、历史数据等。无论您是在构建天气应用、优化物流还是规划户外活动，我们的API都能提供您做出明智决策所需的数据。
- en: Let’s define the requirements for this simple and versatile application. We
    will use the same application requirements for both Python and Java scripts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义这个简单且通用的应用的需求。我们将为Python和Java脚本使用相同的应用需求。
- en: Application requirements – weather data analysis
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应用需求 – 天气数据分析
- en: '**Business requirement**: Analysts are interested in getting weather forecasting
    for a country and city. They would like to see the chart visualizing temperature
    changes.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**业务需求**：分析师对获取国家和城市的天气预报感兴趣。他们希望看到可视化温度变化的图表。'
- en: '**User inputs**: The application should accept a country and city name as parameters
    from users.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户输入**：应用程序应接受用户输入的国家和城市名称作为参数。'
- en: '**Data fetch**: Based on the inputs provided, the application requests the
    weather data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
    using an API key.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据获取**：根据提供的输入，应用程序使用 API 密钥从 [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
    请求天气数据。'
- en: '**Data table**: Shows the table with datetime and corresponding temperature
    in Fahrenheit.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据表**：显示包含日期时间和相应华氏温度的表格。'
- en: '**Data visualization**: Creates simple graphs to plot the temperature in Fahrenheit
    and date based on dataset sourced from OpenWeatherMap.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据可视化**：创建简单的图表，根据从 OpenWeatherMap 获取的数据集绘制华氏温度和日期。'
- en: Prerequisites to access the OpenWeatherMap API
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 OpenWeatherMap API 的先决条件
- en: OpenWeatherMap provides options to request the data using API calls. As a prerequisite,
    you need to create an account. Here is the summary of the steps; for additional
    information, reference [https://openweathermap.org/](https://openweathermap.org/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWeatherMap 提供使用 API 调用请求数据的选项。作为先决条件，您需要创建一个账户。以下是步骤摘要；如需更多信息，请参考 [https://openweathermap.org/](https://openweathermap.org/)。
- en: 'To get weather data from OpenWeatherMap, you need to follow these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 OpenWeatherMap 获取天气数据，您需要遵循以下步骤：
- en: '**Sign up**: Go to the OpenWeatherMap website ([https://openweathermap.org/](https://openweathermap.org/))
    and sign up for an account. Once you have signed up and logged in, move on to
    the next step.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注册**：访问 OpenWeatherMap 网站 ([https://openweathermap.org/](https://openweathermap.org/))
    并注册账户。注册并登录后，继续下一步。'
- en: '`api.openweathermap.org` API to collect the dataset. Based on the number of
    times we call the API in this chapter, it will stay within the free tier.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `api.openweathermap.org` API 收集数据集。根据我们在本章中调用 API 的次数，它将保持在免费层。
- en: '**Get an API key**: You can generate an API key from your account dashboard
    or use the default key.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取 API 密钥**：您可以从账户仪表板生成 API 密钥或使用默认密钥。'
- en: '![Figure 4.1 – An OpenWeatherMap API key](img/B21378_04_001.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – OpenWeatherMap API 密钥](img/B21378_04_001.jpg)'
- en: Figure 4.1 – An OpenWeatherMap API key
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – OpenWeatherMap API 密钥
- en: Note down the API key as we will need it in the next sections to call APIs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 记下 API 密钥，因为我们将在下一节中调用 API 时需要它。
- en: Python auto-code generation using Amazon Q Developer for weather data analysis
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Q Developer 自动生成 Python 代码进行天气数据分析
- en: As we have defined the use case (problem statement) and completed the prerequisites,
    let’s utilize various auto-code generation techniques to get the solution. To
    illustrate these techniques, we will leverage the Python programming language
    inside JetBrains’ PyCharm IDE, which has been set up to work with Amazon Q Developer.
    Please refer to [*Chapter 2*](B21378_02.xhtml#_idTextAnchor022)for detailed steps
    on setting up Amazon Q Developer with JetBrains’ PyCharm IDE.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经定义了用例（问题陈述）并完成了先决条件，让我们利用各种自动代码生成技术来获取解决方案。为了说明这些技术，我们将利用 JetBrains 的
    PyCharm IDE 中的 Python 编程语言，该 IDE 已配置为与 Amazon Q Developer 一起使用。请参阅 [*第 2 章*](B21378_02.xhtml#_idTextAnchor022)
    中设置 Amazon Q Developer 与 JetBrains PyCharm IDE 的详细步骤。
- en: Solution blueprint for weather data analysis
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 天气数据分析的解决方案蓝图
- en: 'As an experienced code developer or data engineer, you will need to convert
    the preceding business objectives into technical requirements by defining reusable
    functions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名经验丰富的代码开发者或数据工程师，您需要通过定义可重用函数将前面的业务目标转换为技术需求：
- en: Write a Python script for weather data analysis.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个用于天气数据分析的 Python 脚本。
- en: Write a function to get weather data using API key for user entered country
    and city from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数，使用 API 密钥获取用户输入的国家和城市的天气数据，从 [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)。
- en: Convert the return dates from an API call to the UTC format. (Note that the
    OpenWeatherMap API will return dates associated with the next 40 hours from the
    time of the request.)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 API 调用返回的日期转换为 UTC 格式。（请注意，OpenWeatherMap API 将返回与请求时间相关的未来 40 小时的日期。）
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 API 调用返回的温度从摄氏度转换为华氏度。
- en: Write a function to show the date in UTC and the temperature in Fahrenheit as
    a table.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数，以表格形式显示 UTC 日期和华氏度温度。
- en: Write a function to plot temperature on the *y* axis and date on the *x* axis
    based on `temperature_data`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数，根据 `temperature_data` 在 *y* 轴上绘制温度，在 *x* 轴上绘制日期。
- en: Accept user inputs for country and city names.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受用户输入的国家和城市名称。
- en: Use the user-provided country and city names to call the `get_weather_data()`
    function.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用用户提供的国家和城市名称调用 `get_weather_data()` 函数。
- en: Create a table with the datetime and temperature (in Fahrenheit) based on weather
    data.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据天气数据创建一个包含日期和时间（华氏度温度）的表格。
- en: Plot a graph for the specified city with `Temperature (°F)` on the *y* axis
    and `Date` on the *x* axis based on weather data.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据天气数据为指定城市绘制一个图表，其中 *y* 轴为 `Temperature (°F)`，*x* 轴为 `Date`。
- en: Generate the documentation for the script.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成脚本的文档。
- en: To achieve the overall solution, we will mainly use **chain-of-thought prompts**
    to obtain the end-to-end script and a combination of single-line and multi-line
    prompts for individual code fragments. We will also chat with the code assistant
    for documentation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现整体解决方案，我们将主要使用**思维链提示**来获取端到端脚本，以及单行和多行提示的组合来处理单个代码片段。我们还将与代码助手进行对话以生成文档。
- en: Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The output of the AI-powered code assistant is non-deterministic, so you may
    not get the exact same code that follows. You may also need to modify some parts
    of the code to meet the requirements. Additionally, auto-generated code may reference
    packages that you will need to manually install. To install missing packages in
    JetBrains’ PyCharm IDE, please refer to the instructions at [https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能代码助手的输出是非确定性的，因此您可能不会得到完全相同的代码。您可能还需要修改代码的一些部分以满足要求。此外，自动生成的代码可能引用了您需要手动安装的包。要在
    JetBrains 的 PyCharm 集成开发环境中安装缺失的包，请参阅[https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html)中的说明。
- en: Let’s proceed with step-by-step solutions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步进行解决方案。
- en: Requirement 1
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 1
- en: Write a Python script with the latest Python version.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最新版本的 Python 编写 Python 脚本。
- en: Use JetBrains’ PyCharm IDE to create a `book_weather_data.py` file and make
    sure that Amazon Q Developer is enabled.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JetBrains 的 PyCharm 集成开发环境创建一个 `book_weather_data.py` 文件，并确保已启用 Amazon Q
    开发者。
- en: '![Figure 4.2 – JetBrains’ PyCharm IDE with the .py file and Amazon Q Developer
    enabled](img/B21378_04_002.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – JetBrains 的 PyCharm 集成开发环境，已启用 .py 文件和 Amazon Q 开发者](img/B21378_04_002.jpg)'
- en: Figure 4.2 – JetBrains’ PyCharm IDE with the .py file and Amazon Q Developer
    enabled
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – JetBrains 的 PyCharm 集成开发环境，已启用 .py 文件和 Amazon Q 开发者
- en: The previous step will generate a file with the `.py` extension, which Amazon
    Q Developer will recognize when generating code. Therefore, there is no need to
    include the language name Python in your prompts.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上一步将生成一个以 `.py` 扩展名的文件，当生成代码时，Amazon Q 开发者将能够识别该文件。因此，在您的提示中不需要包含 Python 语言名称。
- en: Requirements 2, 3, and 4
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 2、3 和 4
- en: 'Let’s combine requirements 2, 3, and 4 to create a multi-line prompt:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将要求 2、3 和 4 结合起来创建一个多行提示：
- en: Write a function to get weather data based on user’s selection of a country
    and a city from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个函数，根据用户从 [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
    选择的国家和城市获取天气数据。
- en: Convert the return dates from an API call to the UTC format.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 API 调用返回的日期转换为 UTC 格式。
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 API 调用返回的温度从摄氏度转换为华氏度。
- en: We are using the multi-line prompt technique. As a reminder, in this technique,
    we can instruct our code assistant to generate the code based on our specific
    requirements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用多行提示技术。提醒一下，在这个技术中，我们可以指示我们的代码助手根据我们的具体要求生成代码。
- en: 'We write the prompt as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提示编写如下：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that as part of the multi-line prompt, we have provided specific instructions
    for the code assistant to follow:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，作为多行提示的一部分，我们已经为代码助手提供了具体的说明：
- en: The function name to use is `get_weather_data()`
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用的函数名称是 `get_weather_data()`
- en: 'The function has two input parameters: country and city'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数有两个输入参数：国家和城市
- en: Get data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
    获取数据
- en: Return date and temperature as `temperature_data`
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回日期和温度作为 `temperature_data`
- en: '![Figure 4.3 – The Python get_weather_data() function](img/B21378_04_003.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – Python 的 get_weather_data() 函数](img/B21378_04_003.jpg)'
- en: Figure 4.3 – The Python get_weather_data() function
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – Python 的 get_weather_data() 函数
- en: Observe that the code assistant followed the specific instructions provided
    in the prompt. In addition, it also determined that `api_key` is required to get
    the data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast),
    so it added that as one of the parameters.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，代码助手遵循了提示中的具体指令。此外，它还确定需要 `api_key` 来从 [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
    获取数据，因此将其作为参数之一添加。
- en: Requirement 5
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 5
- en: Write a function to show the date in UTC and temperature in Fahrenheit as a
    table.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，以表格形式显示 UTC 日期和华氏温度。
- en: 'We are using the **single-line prompt** technique, as the requirement is easy
    and can easily be described in a single line. Note that as part of the single-line
    prompt, we have provided specific instructions for the code assistant to follow:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 **单行提示** 技术，因为要求简单，可以很容易地用一行描述。请注意，作为单行提示的一部分，我们已为代码助手提供了具体指令：
- en: The function name to use is `display_weather_table()`.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用的函数名是 `display_weather_table()`.
- en: Use `temperature_data` to show the table. This is the chain-of-thought prompt,
    that we are connecting previously the defined return results from the `get_weather_data()`
    function as the input for this function.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `temperature_data` 显示表格。这是思维链提示，我们将先前定义的 `get_weather_data()` 函数的返回结果作为此函数的输入。
- en: 'We write the prompt as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提示写成如下形式：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 4.4 – The Python display_weather_table () function](img/B21378_04_004.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – Python 的 display_weather_table() 函数](img/B21378_04_004.jpg)'
- en: Figure 4.4 – The Python display_weather_table () function
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – Python 的 display_weather_table() 函数
- en: Requirement 6
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 6
- en: Write a function to plot `temperature` on the *y* axis and `date` on the *x*
    axis based on `temperature_data`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，根据 `temperature_data` 在 *y* 轴上绘制 `温度`，在 *x* 轴上绘制 `日期`。
- en: 'We are using the single-line prompt technique, as the requirement is easy and
    can easily be described in a single line. Note that as part of the single-line
    prompt, we have provided specific instructions for the code assistant to follow:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用单行提示技术，因为要求简单，可以很容易地用一行描述。请注意，作为单行提示的一部分，我们已为代码助手提供了具体指令：
- en: Function name to use is `plot_temperature_graph()`
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用的函数名是 `plot_temperature_graph()`
- en: Use `temperature_data` to show the table. This is the chain-of-thought prompts
    as we are connecting previously defined return result from `get_weather_data()`
    function as input for this function.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `temperature_data` 显示表格。这是思维链提示，因为我们正在将先前定义的 `get_weather_data()` 函数的返回结果作为此函数的输入。
- en: 'We write the prompt as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提示写成如下形式：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure 4.5 – The Python plot_temperature_graph () function](img/B21378_04_005.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – Python 的 plot_temperature_graph() 函数](img/B21378_04_005.jpg)'
- en: Figure 4.5 – The Python plot_temperature_graph () function
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – Python 的 plot_temperature_graph() 函数
- en: Requirements 7, 8, 9, and 10
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 7、8、9 和 10
- en: 'Let’s combine requirements 7, 8 ,9 , and 10 to create a multi-line prompt technique:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将要求 7、8、9 和 10 结合起来创建多行提示技术：
- en: Accept user inputs for country and city name.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受用户输入的国家和城市名称。
- en: Use a user-provided country and city name to call the `get_weather_data()` function.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户提供的国家和城市名称调用 `get_weather_data()` 函数。
- en: Create a table with datetime and temperature (in Fahrenheit) based on the weather
    data.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据天气数据创建一个包含日期和时间（华氏温度）的表格。
- en: Plot a graph for the specified city with `Temperature (°F)` on the Y-axis and
    `Date` on the X-axis based on weather data
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据天气数据，以 `温度 (°F)` 为 Y 轴，`日期` 为 X 轴绘制指定城市的图表
- en: We are using the chain-of-thought prompt technique to link all the previously
    defined functions together.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用思维链提示技术将所有先前定义的函数链接在一起。
- en: 'We write the prompt as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提示写成如下形式：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will get the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '![Figure 4.6 – The Python code to get the user inputs and display weather data](img/B21378_04_006.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – Python 获取用户输入并显示天气数据的代码](img/B21378_04_006.jpg)'
- en: Figure 4.6 – The Python code to get the user inputs and display weather data
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – Python 获取用户输入并显示天气数据的代码
- en: Note that in the preceding prompt, I have not included error handling for the
    input data. However, I encourage you to experiment with the prompt by adding more
    context to instruct Amazon Q Developer to suggest code with additional error handling.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在先前的提示中，我没有包括输入数据的错误处理。然而，我鼓励您通过添加更多上下文来实验提示，以指导 Amazon Q 开发者建议带有额外错误处理的代码。
- en: Now let’s ensure that the script is running as expected. Run the code and enter
    a country and city to get the weather data.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保脚本按预期运行。运行代码并输入国家和城市以获取天气数据。
- en: 'For testing, I will use the following values, but feel free to choose your
    own:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试，我将使用以下值，但请随意选择您自己的：
- en: 'Country name: `US`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家名称：`US`
- en: 'City name: `Atlanta`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 城市名称：`Atlanta`
- en: '![Figure 4.7 – The Python output table with user input country, city, and weather
    information](img/B21378_04_007.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图4.7 – 包含用户输入的国家、城市和天气信息的 Python 输出表格](img/B21378_04_007.jpg)'
- en: Figure 4.7 – The Python output table with user input country, city, and weather
    information
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – 包含用户输入的国家、城市和天气信息的 Python 输出表格
- en: Now let’s review the second part of the output related to the chart plotted
    for the date and corresponding temperature.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾与日期和相应温度绘制的图表相关的输出第二部分。
- en: '![Figure 4.8 – The Python output chart with the date and temperature](img/B21378_04_008.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8 – 包含日期和温度的 Python 输出图表](img/B21378_04_008.jpg)'
- en: Figure 4.8 – The Python output chart with the date and temperature
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 包含日期和温度的 Python 输出图表
- en: Requirement 11
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求11
- en: Generate the documentation for the script.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 生成脚本的文档。
- en: Let’s use Amazon Q Developer chat with the code assistant technique to generate
    documentation. Remember that Amazon Q Developer supports the `Explain` prompt
    (for more details, see [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Amazon Q 开发者与代码助手聊天技术来生成文档。请记住，Amazon Q 开发者支持“解释”提示（更多详情，见[*第3章*](B21378_03.xhtml#_idTextAnchor060)）
- en: Alternatively, you can highlight the entire code, then right-click and select
    the **Amazon Q** option from the pop-up menu followed by **Explain Code**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以突出显示整个代码，然后右键单击并从弹出菜单中选择**Amazon Q**选项，然后选择**解释代码**。
- en: '![Figure 4.9 – The Python code documentation from Amazon Q Developer](img/B21378_04_009.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9 – Amazon Q 开发者提供的 Python 代码文档](img/B21378_04_009.jpg)'
- en: Figure 4.9 – The Python code documentation from Amazon Q Developer
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9 – Amazon Q 开发者提供的 Python 代码文档
- en: The preceding screenshot shows the first part of the code explanation provided
    by Amazon Q Developer.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了 Amazon Q 开发者提供的代码解释的第一部分。
- en: Now let’s use a few suggested prompts for additional documentation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用一些额外的提示来生成更多文档。
- en: As you can see, Amazon Q Developer analyzed the script that was open in the
    editor window. It then attempted to comprehend the code to derive its logic. Finally,
    it consolidated all its findings to generate documentation aimed at helping users
    understand the code better.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Amazon Q 开发者分析了编辑器窗口中打开的脚本。然后它试图理解代码以推导其逻辑。最后，它综合所有发现以生成旨在帮助用户更好地理解代码的文档。
- en: '![Figure 4.10 – The Python Amazon Q Developer suggested prompts](img/B21378_04_010.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10 – Python Amazon Q 开发者建议的提示](img/B21378_04_010.jpg)'
- en: Figure 4.10 – The Python Amazon Q Developer suggested prompts
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10 – Python Amazon Q 开发者建议的提示
- en: Note that Amazon Q Developer prompts for additional suggestions to obtain further
    in-depth documentation. Please feel free to explore further. Application developers
    can use Amazon Q Developer for code improvements just by using the chat with code
    assistant technique.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Amazon Q 开发者提示进行额外的建议以获得更深入的文档。请随意进一步探索。应用程序开发者可以通过使用与代码助手聊天技术来使用 Amazon
    Q 开发者进行代码改进。
- en: 'Let’s ask Amazon Q Developer to provide updated or improved code for our previously
    generated `display_weather_table()` function:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们要求 Amazon Q 开发者为之前生成的 `display_weather_table()` 函数提供更新或改进的代码：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure 4.11 – The Amazon Q Developer suggested improvements in Python](img/B21378_04_011.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图4.11 – Amazon Q 开发者建议的 Python 改进](img/B21378_04_011.jpg)'
- en: Figure 4.11 – The Amazon Q Developer suggested improvements in Python
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – Amazon Q 开发者建议的 Python 改进
- en: As you can see in the preceding snapshot, Amazon Q Developer provided new code
    with additional validation, the use of a dataframe, and recommended changes. You
    can update the code fragment simply by using either `Insert at cursor` or `Copy`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的快照中所见，Amazon Q 开发者提供了带有额外验证的新代码，使用了 dataframe，并推荐了更改。您可以通过使用“在光标处插入”或“复制”来简单地更新代码片段。
- en: I have illustrated a simple use case with one of the code fragments, but by
    following the preceding steps, you can get recommended updated code from Amazon
    Q Developer regardless of your use case. Additionally, you can adjust the prompts
    to instruct Amazon Q Developer to generate code with error and exception handling.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用其中一个代码片段演示了一个简单的用例，但通过遵循前面的步骤，您可以从Amazon Q Developer获取针对您用例的推荐更新代码。此外，您可以调整提示以指示Amazon
    Q Developer生成具有错误和异常处理的代码。
- en: Use-case summary
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例摘要
- en: As illustrated, we used a combination of chain-of-thought, single-line, and
    multi-line prompts to create an end-to-end Python script for a weather data application.
    We utilized JetBrains’ PyCharm IDE, which was set up to work with Amazon Q Developer.
    For the script, we used Amazon Q Developer with specific prompts to auto-generate
    functions for retrieving weather data from OpenWeatherMap, converting temperature
    from Celsius to Fahrenheit, converting dates to UTC format, and plotting charts.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，我们使用了一系列的提示，包括思维链、单行和多行提示，创建了一个用于天气数据应用的端到端Python脚本。我们使用了配置为与Amazon Q
    Developer一起工作的JetBrains PyCharm IDE。对于脚本，我们使用Amazon Q Developer和特定的提示来自动生成从OpenWeatherMap检索天气数据、将温度从摄氏度转换为华氏度、将日期转换为UTC格式以及绘制图表的功能。
- en: Additionally, we leveraged Amazon Q Developer’s chat feature to generate detailed
    documentation and receive code improvement recommendations for our weather data
    application. Through this approach, we showcased how effectively integrating various
    prompt types and leveraging the capabilities of Amazon Q Developer can streamline
    the development process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还利用了Amazon Q Developer的聊天功能来生成详细的文档，并为我们天气数据应用获得代码改进建议。通过这种方法，我们展示了如何有效地整合各种提示类型并利用Amazon
    Q Developer的能力来简化开发过程。
- en: By adjusting prompts or simply instructing Amazon Q Developer in a chat-style
    interface, readers can further direct Amazon Q Developer to generate code with
    enhanced error and exception handling, making the solution robust and versatile
    for different use cases. This example demonstrates the power of combining advanced
    IDEs and intelligent code assistants to build sophisticated applications efficiently.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调整提示或简单地通过聊天式界面指示Amazon Q Developer，读者可以进一步指导Amazon Q Developer生成具有增强错误和异常处理的代码，使解决方案对不同用例具有鲁棒性和多功能性。此示例展示了结合高级IDE和智能代码助手高效构建复杂应用的能力。
- en: In the next section, let’s implement the same application using the Java language.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们使用Java语言实现相同的应用程序。
- en: Java auto code generation using Amazon Q Developer for weather data analysis
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon Q Developer进行天气数据分析的Java自动代码生成
- en: As we have defined the use case and completed the prerequisites, let’s use different
    auto-code generation techniques to achieve the use case. To illustrate this, we
    will leverage Java programming language inside **Visual Studio Code** (**VS Code**)
    IDE that has been set up to work with Amazon Q Developer. Please refer to [*Chapter
    2*](B21378_02.xhtml#_idTextAnchor022) for detailed steps to help you set up Amazon
    Q Developer with VS Code IDE.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经定义了用例并完成了先决条件，让我们使用不同的自动代码生成技术来实现这个用例。为了说明这一点，我们将在已经设置为与Amazon Q Developer一起工作的**Visual
    Studio Code**（**VS Code**）IDE中使用Java编程语言。请参考[*第2章*](B21378_02.xhtml#_idTextAnchor022)中的详细步骤，以帮助您使用VS
    Code IDE设置Amazon Q Developer。
- en: Solution blueprint for weather data analysis
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 天气数据分析解决方案蓝图
- en: 'As an experienced code developer or data engineer, you will need to convert
    the preceding business objectives into technical requirements by defining reusable
    functions:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名经验丰富的代码开发者或数据工程师，您需要通过定义可重用函数将前面的业务目标转换为技术要求：
- en: Write a Java script for weather data analysis.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写用于天气数据分析的JavaScript脚本。
- en: Accept user inputs for country and city name.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受用户输入的国家和城市名称。
- en: Get weather data using an API key for a user-entered country and city from `http://api.openweathermap.org/data/2.5/forecast`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用用户输入的国家和城市从`http://api.openweathermap.org/data/2.5/forecast`获取天气数据。
- en: Convert the return dates from an API call to the UTC format. (Note that, the
    OpenWeatherMap API will return dates associated with the next 40 hours from the
    time of the request.)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将API调用返回的日期转换为UTC格式。（注意，OpenWeatherMap API将返回与请求时间相关的未来40小时的日期。）
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将API调用返回的温度从摄氏度转换为华氏度。
- en: Show the date in UTC and temperature in Fahrenheit as a table.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以表格形式显示UTC日期和华氏度温度。
- en: Plot a graph for the specified city with `Temperature` `(°F)` on the *y* axis
    and `Date` on the *x* axis based on weather data.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据天气数据，以 `温度` `(°F)` 为 *y* 轴，`日期` 为 *x* 轴绘制指定城市的图表。
- en: Generate the documentation for the script.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成脚本的文档。
- en: To achieve the overall solution, we will mainly use a combination of single-line
    and multi-line prompts for individual code fragments, as well as chat with the
    code assistant for documentation.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现整体解决方案，我们将主要使用单行和多行提示的组合来处理单个代码片段，并与代码助手进行对话以生成文档。
- en: Note
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The output of the AI-powered code assistant is non-deterministic, so you may
    not get the exact same code that follows. You may also need to modify some parts
    of the code to meet the requirements. Additionally, auto-generated code may reference
    packages or methods that you will need to manually install. To install missing
    packages in VS Code IDE, please reference [https://code.visualstudio.com/docs/java/java-project](https://code.visualstudio.com/docs/java/java-project).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: AI 辅助代码助手的输出是非确定性的，因此您可能不会得到以下完全相同的代码。您可能还需要修改代码的一些部分以满足要求。此外，自动生成的代码可能引用您需要手动安装的包或方法。要在
    VS Code IDE 中安装缺失的包，请参考 [https://code.visualstudio.com/docs/java/java-project](https://code.visualstudio.com/docs/java/java-project)。
- en: Let’s proceed with step-by-step solutions.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步进行解决方案。
- en: Requirement 1
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 1
- en: Write a Java script for weather data analysis.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 编写用于天气数据分析的 Java 脚本。
- en: Use VS Code IDE to create a new Java project. Create the `book_weather_data.java`
    file and make sure that Amazon Q Developer is enabled.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VS Code IDE 创建一个新的 Java 项目。创建 `book_weather_data.java` 文件，并确保已启用 Amazon Q
    开发者。
- en: '![Figure 4.12 – VS Code IDE with the .java file and Amazon Q Developer](img/B21378_04_012.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 包含 .java 文件和 Amazon Q 开发者的 VS Code IDE](img/B21378_04_012.jpg)'
- en: Figure 4.12 – VS Code IDE with the .java file and Amazon Q Developer
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 包含 .java 文件和 Amazon Q 开发者的 VS Code IDE
- en: The previous step will create a file with a `.java` extension, which Amazon
    Q Developer will reference, so there’s no need to include the language name Java
    in your prompts.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 上一步将创建一个具有 `.java` 扩展名的文件，Amazon Q 开发者将引用该文件，因此无需在您的提示中包含 Java 语言名称。
- en: Requirement 2
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 2
- en: Accept user inputs for country and city name.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接受用户输入的国家和城市名称。
- en: We are using the single-line prompt technique, as it’s a very straightforward
    requirement.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用单行提示技术，因为它是一个非常直接的要求。
- en: 'We write the prompt as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提示信息编写如下：
- en: '[PRE5]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will then get the following output:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将得到以下输出：
- en: '![Figure 4.13 – Java accepts the user input](img/B21378_04_013.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – Java 接受用户输入](img/B21378_04_013.jpg)'
- en: Figure 4.13 – Java accepts the user input
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – Java 接受用户输入
- en: Requirements 3, 4, and 5
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 3、4 和 5
- en: Let’s combine requirements 3, 4, and 5, as they make up one logical unit.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将要求 3、4 和 5 结合起来，因为它们构成一个逻辑单元。
- en: Get weather data based on countries and cities from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)
    中的国家和城市获取天气数据。
- en: Convert the return dates from the API call to the UTC format.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 API 调用的返回日期转换为 UTC 格式。
- en: Convert the returned temperatures from the API call from Celsius to Fahrenheit.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 API 调用返回的温度从摄氏度转换为华氏度。
- en: 'We are using the multi-line prompt technique to describe the logic. We write
    the prompt as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用多行提示技术来描述逻辑。我们将提示信息编写如下：
- en: '[PRE6]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 4.14 – The Java code to get the weather data](img/B21378_04_014.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 获取天气数据的 Java 代码](img/B21378_04_014.jpg)'
- en: Figure 4.14 – The Java code to get the weather data
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 获取天气数据的 Java 代码
- en: Requirement 6
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 6
- en: Show the date in UTC and temperature in Fahrenheit as a table.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以表格形式显示 UTC 日期和华氏度温度。
- en: 'We are using the single-line prompt technique. We write the prompt as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用单行提示技术。我们将提示信息编写如下：
- en: '[PRE7]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will then get the following output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将得到以下输出：
- en: '![Figure 4.15 – The Java code to display weather data as a table](img/B21378_04_015.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 显示天气数据的 Java 代码](img/B21378_04_015.jpg)'
- en: Figure 4.15 – The Java code to display weather data as a table
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 显示天气数据的 Java 代码
- en: Requirement 7
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 7
- en: Plot a graph for the specified city with `Temperature (°F)` on the *y* axis
    and `Date` on the *x* axis based on weather data.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 根据天气数据，以 `温度 (°F)` 为 *y* 轴，`日期` 为 *x* 轴绘制指定城市的图表。
- en: 'We are using the single-line prompt technique. We write the prompt as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用单行提示技术。我们将提示信息编写如下：
- en: '[PRE8]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure 4.16 – The Java code to display weather data as a chart](img/B21378_04_016.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – 显示天气数据的图表的 Java 代码](img/B21378_04_016.jpg)'
- en: Figure 4.16 – The Java code to display weather data as a chart
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 显示天气数据的图表的 Java 代码
- en: Now let’s ensure that the script is running as expected. Run the code and enter
    the country and city to get the weather data.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保脚本按预期运行。运行代码并输入国家和城市以获取天气数据。
- en: 'For testing, I will use the following values, but feel free to choose your
    own:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试，我将使用以下值，但请随意选择您自己的：
- en: 'Country name: `US`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家名称：`US`
- en: 'City name: `Atlanta`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 城市名称：`亚特兰大`
- en: '![Figure 4.17 – The Java code output for user input country, city, and weather
    information](img/B21378_04_017.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 用户输入国家、城市和天气信息的 Java 代码输出](img/B21378_04_017.jpg)'
- en: Figure 4.17 – The Java code output for user input country, city, and weather
    information
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 用户输入国家、城市和天气信息的 Java 代码输出
- en: Now let’s review the second part of the output related to the chart plotted
    for the date and corresponding temperature.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾与日期和相应温度绘制的图表相关的输出第二部分。
- en: '![Figure 4.18 – The Java output for a weather information chart](img/B21378_04_018.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 天气信息图表的 Java 输出](img/B21378_04_018.jpg)'
- en: Figure 4.18 – The Java output for a weather information chart
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 天气信息图表的 Java 输出
- en: Requirement 8
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求 8
- en: Generate the documentation for the script.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 生成脚本的文档。
- en: Let’s use the Amazon Q Developer chat with code assistant technique to generate
    documentation. Remember that Amazon Q Developer supports the `Explain` prompt
    or command (see [*Chapter 3*](B21378_03.xhtml#_idTextAnchor060) for reference).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Amazon Q 开发者与代码助手技术生成文档。请记住，Amazon Q 开发者支持 `Explain` 提示或命令（参见 [*第 3 章*](B21378_03.xhtml#_idTextAnchor060)
    以获取参考）。
- en: Alternatively, you can highlight the entire code, then right-click and select
    the **Amazon Q** option from the pop-up menu followed by **Explain**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以选择整个代码，然后右键单击并从弹出菜单中选择 **Amazon Q** 选项，然后选择 **Explain**。
- en: '![Figure 4.19 – Amazon Q Developer in Java for overview documentation](img/B21378_04_019.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – Java 中的 Amazon Q 开发者概述文档](img/B21378_04_019.jpg)'
- en: Figure 4.19 – Amazon Q Developer in Java for overview documentation
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – Java 中的 Amazon Q 开发者概述文档
- en: As you can see, Amazon Q Developer analyzed the script that was open in the
    editor window. It then attempted to comprehend the code to derive its logic. Finally,
    it consolidated all its findings to generate documentation aimed at helping users
    understand the code better.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Amazon Q 开发者分析了编辑器窗口中打开的脚本。然后它试图理解代码以推导其逻辑。最后，它综合所有发现以生成旨在帮助用户更好地理解代码的文档。
- en: Now let’s use the suggested prompts for additional documentation as seen in
    the following screenshot.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下屏幕截图中看到的附加文档建议。
- en: '![Figure 4.20 – Amazon Q Developer suggested prompts in Java](img/B21378_04_020.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – Java 中的 Amazon Q 开发者建议提示](img/B21378_04_020.jpg)'
- en: Figure 4.20 – Amazon Q Developer suggested prompts in Java
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – Java 中的 Amazon Q 开发者建议提示
- en: Note that Amazon Q Developer shares additional suggestions to obtain further
    in-depth documentation. Please feel free to explore them further.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Amazon Q 开发者提供了额外的建议以获得更深入的文档。请随意进一步探索它们。
- en: Application developers can use Amazon Q Developer for code improvements simply
    by using the chat with code assistant technique. Let’s ask Amazon Q Developer
    to provide updated or improved code for the previously generated `'Converting
    temperature to Fahrenheit and date to UTC, and adding data to a time` `series'`
    requirement.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发者可以通过使用与代码助手聊天技术来使用 Amazon Q 开发者进行代码改进。让我们要求 Amazon Q 开发者为之前生成的 `'将温度转换为华氏度和日期转换为
    UTC，并将数据添加到时间序列'` 要求提供更新或改进的代码。
- en: 'We write the prompt as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提示编写如下：
- en: '[PRE9]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Observe in the following screenshot that Amazon Q Developer has recommended
    multiple code changes to improve the code, making it easier to understand. This
    includes creating new methods and standardizing the code to use object-oriented
    approaches such as class encapsulation instead of plain variables.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中观察，Amazon Q 开发者建议了多个代码更改以改进代码，使其更容易理解。这包括创建新方法和将代码标准化以使用面向对象的方法，如类封装而不是普通变量。
- en: '![Figure 4.21 – Amazon Q Developer for Java code improvement](img/B21378_04_021.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – Java 代码改进的 Amazon Q 开发者](img/B21378_04_021.jpg)'
- en: Figure 4.21 – Amazon Q Developer for Java code improvement
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – Java 代码改进的 Amazon Q 开发者
- en: Applications can use these recommendations to obtain the exact code using Amazon
    Q Developer. Additionally, Amazon Q Developer provided code fragments. You can
    update the script simply by using either **Insert at cursor** or **Copy**.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以使用这些推荐来使用亚马逊Q开发者获取确切的代码。此外，亚马逊Q开发者还提供了代码片段。你可以通过使用**插入光标处**或**复制**来更新脚本。
- en: I have illustrated a simple use case with one of the code fragments, but by
    following the preceding steps, you can get recommended updated code from Amazon
    Q Developer for any use case. Additionally, you can adjust the prompts to instruct
    Amazon Q Developer to generate code with error and exception handling.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我用一个代码片段的简单用例进行了说明，但通过遵循前面的步骤，你可以从亚马逊Q开发者那里获取任何用例的推荐更新代码。此外，你可以调整提示来指导亚马逊Q开发者生成具有错误和异常处理的代码。
- en: Use-case summary
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例摘要
- en: As illustrated, we employed a variety of prompt types – chain-of-thought, single-line,
    and multi-line – to develop a JavaScript script for a weather data application.
    We utilized VS Code IDE, which was configured to integrate seamlessly with Amazon
    Q Developer. Using Amazon Q Developer, we applied specific prompts to automatically
    generate functions for retrieving weather data from OpenWeatherMap, converting
    temperature from Celsius to Fahrenheit, converting dates to UTC format, and plotting
    charts. Moreover, we took advantage of Amazon Q Developer’s chat feature to generate
    comprehensive documentation and receive suggestions for enhancing our weather
    data application’s code. This approach highlights the versatility of using different
    prompt styles to tailor code generation to specific requirements within the JavaScript
    ecosystem. By leveraging advanced IDEs such as VS Code alongside intelligent code
    assistants such as Amazon Q Developer, developers can streamline the development
    process and enhance productivity. The ability to receive detailed documentation
    and actionable insights through chat interactions further demonstrates how integrating
    these tools can foster efficient and effective software development practices.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，我们使用了各种提示类型——思维链、单行和多行——来开发一个天气数据应用的JavaScript脚本。我们使用了配置为与亚马逊Q开发者无缝集成的VS
    Code IDE。使用亚马逊Q开发者，我们应用了特定的提示来自动生成从OpenWeatherMap检索天气数据、将温度从摄氏度转换为华氏度、将日期转换为UTC格式以及绘制图表的功能。此外，我们利用亚马逊Q开发者的聊天功能生成全面的文档，并获得改进我们天气数据应用代码的建议。这种方法突出了使用不同提示样式来定制JavaScript生态系统中特定要求的代码生成的灵活性。通过利用VS
    Code等高级IDE以及亚马逊Q开发者等智能代码助手，开发者可以简化开发过程并提高生产力。通过聊天交互接收详细文档和可操作见解的能力进一步展示了如何将这些工具集成以促进高效和有效的软件开发实践。
- en: By adjusting prompts or simply instructing Amazon Q Developer in a chat-style
    interface, readers can further direct Amazon Q Developer to generate code with
    enhanced error and exception handling, making the solution robust and versatile
    for different use cases. This example demonstrates the power of combining advanced
    IDEs and intelligent code assistants to build sophisticated applications efficiently.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调整提示或简单地以聊天式界面指导亚马逊Q开发者，读者可以进一步指导亚马逊Q开发者生成具有增强错误和异常处理的代码，使解决方案对不同用例既稳健又灵活。本例展示了结合高级IDE和智能代码助手高效构建复杂应用的能力。
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how AI-powered code assistants can help Python and
    Java developers generate application code from the local IDE of their choice.
    To illustrate the functionality, we addressed the simple yet versatile application
    of weather data analysis.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了AI驱动的代码助手如何帮助Python和Java开发者从他们选择的本地IDE生成应用代码。为了说明功能，我们讨论了简单而通用的天气数据分析应用。
- en: Here are the key features covered throughout the application’s development.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是整个应用开发过程中涵盖的关键特性。
- en: We walked through the prerequisites of generating the API key for OpenWeatherMap,
    allowing us to obtain weather data for a user-entered country and city combination.
    We used the API key to retrieve the weather data provided by OpenWeatherMap, which
    offers a rich set of APIs. We gathered forecast weather data from [http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讲解了生成OpenWeatherMap API密钥的先决条件，使我们能够获取用户输入的国家和城市组合的天气数据。我们使用API密钥检索OpenWeatherMap提供的天气数据，OpenWeatherMap提供了一套丰富的API。我们从[http://api.openweathermap.org/data/2.5/forecast](http://api.openweathermap.org/data/2.5/forecast)收集了天气预报数据。
- en: For coding, we used VS Code IDE for Java, which has been set up to work with
    Amazon Q Developer. For Python, we utilized JetBrains’ PyCharm IDE, which was
    also configured to work with Amazon Q Developer.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编码，我们使用了适用于 Java 的 VS Code IDE，该 IDE 已配置为与 Amazon Q Developer 一起使用。对于 Python，我们使用了
    JetBrains 的 PyCharm IDE，该 IDE 也已配置为与 Amazon Q Developer 一起使用。
- en: To get the code recommendations, we employed a combination of chain-of-thought,
    single-line, and multi-line prompts to create a JavaScript script for the weather
    data application. We used Amazon Q Developer with specific prompts to auto-generate
    functions to retrieve weather data from OpenWeatherMap, convert temperature from
    Celsius to Fahrenheit, convert dates to UTC format, and then plot the chart. Additionally,
    for documentation and code improvement, we used the chat with code assistant technique
    to interact with Amazon Q Developer. This allowed us to generate detailed documentation
    and receive code improvement recommendations for our weather data application.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取代码建议，我们结合了思维链、单行和多行提示，为天气数据应用程序创建了一个 JavaScript 脚本。我们使用 Amazon Q Developer
    和特定的提示来自动生成从 OpenWeatherMap 获取天气数据、将温度从摄氏度转换为华氏度、将日期转换为 UTC 格式，并绘制图表的功能。此外，为了文档和代码改进，我们使用了与代码助手进行对话的技术来与
    Amazon Q Developer 交互。这使我们能够生成详细的文档并收到针对我们的天气数据应用程序的代码改进建议。
- en: By leveraging advanced IDEs such as VS Code and PyCharm alongside Amazon Q Developer,
    we demonstrated how various prompt styles can streamline the development process
    across multiple programming languages. This approach not only enhances productivity
    but also ensures that the generated code is robust and well-documented, making
    it easier for developers to understand and maintain.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 VS Code 和 PyCharm 等高级 IDE 以及 Amazon Q Developer，我们展示了如何通过多种提示风格简化跨多种编程语言的开发过程。这种方法不仅提高了生产力，还确保了生成的代码健壮且文档齐全，使得开发者更容易理解和维护。
- en: In the next chapter, we will look at how Amazon Q Developer can generate code
    for multiple other programming languages such as JavaScript, C#, Go, PHP, Shell,
    and so on.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Amazon Q Developer 如何为 JavaScript、C#、Go、PHP、Shell 等多种其他编程语言生成代码。
- en: References
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'OpenWeatherMap: [https://openweathermap.org/](https://openweathermap.org/)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OpenWeatherMap: [https://openweathermap.org/](https://openweathermap.org/)'
- en: 'Getting started with Amazon Q Developer in VS Code and JetBrains: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 VS Code 和 JetBrains 中开始使用 Amazon Q Developer: [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-in-IDE-setup.html)'
- en: 'Getting started with Java in VS Code: [https://code.visualstudio.com/docs/java/java-tutorial](https://code.visualstudio.com/docs/java/java-tutorial)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 VS Code 中开始使用 Java: [https://code.visualstudio.com/docs/java/java-tutorial](https://code.visualstudio.com/docs/java/java-tutorial)'
- en: 'Installing missing packages in JetBrains’ PyCharm IDE: [https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 JetBrains PyCharm IDE 中安装缺失的包: [https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html)'
- en: 'Installing missing packages in VS Code IDE: [https://code.visualstudio.com/docs/java/java-project](https://code.visualstudio.com/docs/java/java-project)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在 VS Code IDE 中安装缺失的包: [https://code.visualstudio.com/docs/java/java-project](https://code.visualstudio.com/docs/java/java-project)'
