- en: Getting started with TensorFlow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门 TensorFlow
- en: TensorFlow is an open source deep learning library by Google. It provides primitives
    for defining functions on tensors and automatically computing their derivatives.
    A tensor can be represented as a multidimensional array of numbers. Scalar, Vector,
    and Matrix are types of tensors. TensorFlow is mainly used to design computational
    graphs, build, and train deep learning models. The TensorFlow library does numerical
    computations using data flow graphs, where the nodes represent mathematical operations
    and the edges represent the data points (usually multidimensional arrays or tensors
    that are transmitted between these edges).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 是 Google 提供的一个开源深度学习库。它提供了用于定义张量函数并自动计算其导数的原语。张量可以表示为多维数字数组。标量、向量和矩阵是张量的类型。TensorFlow
    主要用于设计计算图、构建和训练深度学习模型。TensorFlow 库通过数据流图执行数值计算，其中节点代表数学操作，边代表数据点（通常是多维数组或在这些边之间传输的张量）。
- en: Environment setup
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境设置
- en: It is best to use an IDE such as PyCharm to edit Python code; it provides faster
    development tools and coding assistance. Code completion and inspection makes
    coding and debugging faster and simpler, ensuring that you focus on the end goal
    of programming neural networks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最好使用像 PyCharm 这样的 IDE 来编辑 Python 代码；它提供更快的开发工具和编码辅助。代码自动完成和检查使得编码和调试更快、更简单，确保你可以专注于编程神经网络的最终目标。
- en: 'TensorFlow provides APIs for multiple languages: Python, C++, Java, Go, and
    so on. We will download a version of TensorFlow that will enable us to write the
    code for deep learning models in Python. On the TensorFlow installation website,
    we can find the most common ways and latest instructions to install TensorFlow
    using virtualenv, pip, and Docker.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 提供了多种语言的 API：Python、C++、Java、Go 等。我们将下载一个 TensorFlow 版本，使我们能够用 Python
    编写深度学习模型的代码。在 TensorFlow 安装网站上，我们可以找到使用 virtualenv、pip 和 Docker 安装 TensorFlow
    的最常见方法和最新说明。
- en: 'The following steps describe how to set up a local development environment:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何设置本地开发环境：
- en: Download the Pycharm community edition.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Pycharm 社区版。
- en: Get the latest Python version on Pycharm.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Pycharm 中获取最新版本的 Python。
- en: 'Go to Preferences, set up the python interpreter, and install the latest version
    of TensorFlow:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入“首选项”，设置 Python 解释器，并安装最新版本的 TensorFlow：
- en: '![](img/a0d7a22e-da9c-4477-827f-b3a6dcc80db6.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0d7a22e-da9c-4477-827f-b3a6dcc80db6.png)'
- en: 'TensorFlow will now appear in the installed packages list. Click on OK. Now
    test your installation with a program such as hello world:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TensorFlow 现在会出现在已安装的包列表中。点击“确定”。现在用如 hello world 这样的程序来测试你的安装：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: TensorFlow comparison with Numpy
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow 与 Numpy 的对比
- en: TensorFlow and Numpy are both N-dimensional array libraries. TensorFlow additionally
    allows us to create tensor functions and compute derivatives. TensorFlow has become
    one of the major libraries used for deep learning as it is incredibly efficient
    and can run on GPUs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 和 Numpy 都是 N 维数组库。TensorFlow 还允许我们创建张量函数并计算导数。TensorFlow 已成为深度学习的主要库之一，因为它非常高效，且可以在
    GPU 上运行。
- en: 'The following program describes how `TensorFlow` and `numpy` can be used to
    perform similar operations such as creating tensors of a `(3,3)` shape:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序描述了如何使用 `TensorFlow` 和 `numpy` 执行类似操作，如创建形状为 `(3,3)` 的张量：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出结果如下：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Computational graph
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算图
- en: TensorFlow is based on building a computational graph. A computational graph
    is a network of nodes, where each node defines an operation running a function;
    this can be as plain as addition or subtraction, or as complicated as a multivariate
    equation. TensorFlow programs are structured in a construction phase that assembles
    a graph and an execution phase that utilizes a session object to execute operations
    in the graph.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 基于构建计算图。计算图是一个节点网络，每个节点定义了执行某个函数的操作；这些操作可以是简单的加法或减法，也可以是复杂的多变量方程。TensorFlow
    程序在构建阶段组装图，在执行阶段利用会话对象执行图中的操作。
- en: An operation is referred to as the op and can return zero or more tensors, which
    can be used later in the graph. Each op can be given a constant, array, or n-dimensional
    matrix.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个操作被称为 op，可以返回零个或多个张量，这些张量可以在图中稍后使用。每个 op 都可以给定常量、数组或 n 维矩阵。
- en: Graph
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图
- en: The default graph gets instantiated when the TensorFlow library is imported.
    Constructing a graph object instead of using the default graph is useful when
    creating multiple models in one file that do not depend on each other. Constants
    and operations are added to the graph in TensorFlow.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 默认图会在导入TensorFlow库时实例化。构建图对象而非使用默认图在创建多个不依赖于彼此的模型时非常有用。常量和操作会被添加到TensorFlow图中。
- en: 'Variables and operations applied outside of `newGraph.as_default()` will get
    added to the default graph, which is created when the library is imported:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`newGraph.as_default()`之外应用的变量和操作将被添加到默认图中，默认图会在库被导入时创建：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Session objects
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话对象
- en: A session in TensorFlow encapsulates the environment in which tensor objects
    are evaluated. Sessions can have their private variables, queues, and readers
    that are designated. We should use the close method at the end of the session.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow中的会话封装了张量对象求值的环境。会话可以有它们自己的私有变量、队列和指定的读取器。我们应该在会话结束时使用close方法。
- en: 'The session has three arguments, which are optional:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 会话有三个参数，这些参数是可选的：
- en: '`Target`: The execution engine to connect to'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Target`：要连接的执行引擎'
- en: '`graph`: The graph object to be started'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`graph`：要启动的图对象'
- en: '`config`: This is a ConfigProto protocol buffer'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：这是一个ConfigProto协议缓冲区'
- en: 'To run a single step of the TensorFlow computation, the step function is invoked
    and necessary dependencies of the graph are executed:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行TensorFlow计算的单步操作，需调用步骤函数并执行图中的必要依赖：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`sess.run(c)` in the currently active session!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当前活动会话中的`sess.run(c)`！
- en: 'The preceding code gives the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出如下：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `tf.InteractiveSession()` function is an easy way of keeping a default
    session open in `ipython`. The `sess.run(c)` is an example of a TensorFlow Fetch:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`tf.InteractiveSession()`函数是保持默认会话在`ipython`中打开的简便方法。`sess.run(c)`是TensorFlow获取操作的一个示例：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Variables
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: When training a model, we use variables to hold and update the parameters. Variables
    are like in-memory buffers containing tensors. All tensors we used previously
    were constant tensors, not variables.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 训练模型时，我们使用变量来保存和更新参数。变量就像内存缓冲区，包含张量。我们之前使用的所有张量都是常量张量，而不是变量。
- en: 'Variables are managed or maintained by the session object. Variables persist
    between sessions, which is useful because tensor and operation objects are immutable:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 变量由会话对象进行管理或维护。变量在会话之间持久存在，这非常有用，因为张量和操作对象是不可变的：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code gives the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出如下：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'TensorFlow variables must be initialized before they have values, which is
    in contrast with constant tensors:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow变量在赋值前必须初始化，这与常量张量不同：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code gives this output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出如下：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code gives the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出如下：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Fetching variable states:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 获取变量状态：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code gives this output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出如下：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Scope
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围
- en: TensorFlow models may have hundreds of variables. `tf.variable_scope()` provides
    a simple name.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow模型可能有成百上千个变量。`tf.variable_scope()`提供了一个简单的命名方式。
- en: 'To manage the complexity of models and break down into unique pieces, TensorFlow
    has scopes. Scopes are extremely simple and help when using TensorBoard. Scopes
    can also be nested inside of other scopes:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理模型的复杂性并将其分解为独立的部分，TensorFlow提供了作用域。作用域非常简单，并且在使用TensorBoard时非常有用。作用域也可以嵌套在其他作用域内：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following example shows how to use the reuse option to understand the behavior
    of `get_variable`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何使用重用选项来理解`get_variable`的行为：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Data input
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据输入
- en: 'Input external data to TensorFlow objects:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 向TensorFlow对象输入外部数据：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code gives the following output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出如下：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Placeholders and feed dictionaries
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 占位符和输入字典
- en: 'Using `tf.convert_to_tensor()` to input data is convenient but it doesn''t
    scale. Use `tf.placeholder` variables (dummy nodes that provide entry points for
    data to a computational graph). A `feed_dict` is a Python dictionary mapping:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tf.convert_to_tensor()`输入数据是方便的，但它不能扩展。使用`tf.placeholder`变量（虚拟节点，用于为计算图提供数据的入口）。`feed_dict`是一个Python字典映射：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding code gives this output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码输出如下：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Auto differentiation
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动微分
- en: Auto differentiation is also known as **algorithmic differentiation**, which
    is an automatic way of numerically computing the derivatives of a function. It
    is helpful for computing gradients, Jacobians, and Hessians for use in applications
    such as numerical optimization. Backpropagation algorithm is an implementation
    of the reverse mode of automatic differentiation for calculating the gradient.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 自动微分也被称为**算法微分**，它是一种自动计算函数导数的方法。这对于计算梯度、雅可比矩阵和海森矩阵等在数值优化等应用中非常有用。反向传播算法是自动微分反向模式的一种实现，用于计算梯度。
- en: 'In the following example, using the `mnist` dataset, we calculate the loss
    using one of the `loss` functions. The question is: how do we fit the model to
    the data?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，使用`mnist`数据集，我们使用其中一个`loss`函数计算损失。问题是：我们如何将模型拟合到数据上？
- en: 'We can use `tf.train.Optimizer` and create an optimizer. `tf.train.Optimizer.minimize(loss,
    var_list)` adds an optimization operation to the computational graph and automatic
    differentiation computes gradients without user input:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`tf.train.Optimizer`来创建优化器。`tf.train.Optimizer.minimize(loss, var_list)`将优化操作添加到计算图中，自动微分则无需用户输入即可计算梯度：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: TensorBoard
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorBoard
- en: TensorFlow has a powerful built-in visualization tool called **TensorBoard**. It
    allows developers to interpret, visualize, and debug computational graphs. To
    visualize graph and metrics automatically in TensorBoard, TensorFlow writes events
    related to the execution of a computational graph to a particular folder.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow具有一个强大的内置可视化工具，叫做**TensorBoard**。它允许开发者解释、可视化和调试计算图。为了自动在TensorBoard中可视化图形和指标，TensorFlow会将与计算图执行相关的事件写入特定文件夹。
- en: 'This example shows a computational graph of the analysis done earlier:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了之前分析的计算图：
- en: '![](img/45fbcf50-72f4-49f2-b52f-04dee2a903b6.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45fbcf50-72f4-49f2-b52f-04dee2a903b6.png)'
- en: To examine the graph, click on the graph tab on the top panel of TensorBoard.
    If the graph has several nodes, visualizing it in a single view can be hard. To
    make our visualization more accessible, we can organize the related operations
    into groups using `tf.name_scope` with specific names.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看图形，请点击TensorBoard顶部面板中的图形标签。如果图形中有多个节点，单独查看可能会很困难。为了让我们的可视化更易访问，我们可以使用`tf.name_scope`并指定名称，将相关操作组织成组。
