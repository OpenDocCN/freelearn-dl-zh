- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introducing 3D Data Processing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 3D 数据处理
- en: In this chapter, we are going to discuss some basic concepts that are very fundamental
    to 3D deep learning and that will be used frequently in later chapters. We will
    begin by learning about the most frequently used 3D data formats, as well as the
    many ways that we are going to manipulate them and convert them to different formats.
    We will start by setting up our development environment and installing all the
    necessary software packages, including Anaconda, Python, PyTorch, and PyTorch3D.
    We will then talk about the most frequently used ways to represent 3D data – for
    example, point clouds, meshes, and voxels. We will then move on to the 3D data
    file formats, such as PLY and OBJ files. We will then discuss 3D coordination
    systems. Finally, we will discuss camera models, which are mostly related to how
    3D data is mapped to 2D images.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论一些对于 3D 深度学习非常基础的概念，并且这些概念将在后续章节中频繁使用。我们将从学习最常用的 3D 数据格式开始，了解我们如何操作它们并将它们转换为不同的格式。我们将首先设置我们的开发环境并安装所有必要的软件包，包括
    Anaconda、Python、PyTorch 和 PyTorch3D。接着，我们将讨论最常用的 3D 数据表示方式——例如，点云、网格和体素。然后我们将介绍
    3D 数据文件格式，如 PLY 和 OBJ 文件。接下来，我们将讨论 3D 坐标系统。最后，我们将讨论相机模型，这主要与 3D 数据如何映射到 2D 图像相关。
- en: After reading this chapter, you will be able to debug 3D deep learning algorithms
    easily by inspecting output data files. With a solid understanding of coordination
    systems and camera models, you will be ready to build on that knowledge and learn
    about more advanced 3D deep learning topics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读完本章后，您将能够通过检查输出数据文件轻松调试 3D 深度学习算法。通过对坐标系统和相机模型的深入理解，您将能够在此基础上进一步学习更高级的 3D
    深度学习主题。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Setting up a development environment and installing Anaconda, PyTorch, and PyTorch3D
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境并安装 Anaconda、PyTorch 和 PyTorch3D
- en: 3D data representation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D 数据表示
- en: 3D data formats – PLY and OBJ files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D 数据格式——PLY 和 OBJ 文件
- en: 3D coordination systems and conversion between them
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D 坐标系统及其之间的转换
- en: Camera models – perspective and orthographic cameras
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机模型——透视相机和正交相机
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to run the example code snippets in this book, you will need to have
    a computer ideally with a GPU. However, running the code snippets with only CPUs
    is possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行本书中的示例代码，您需要一台理想情况下配备 GPU 的计算机。然而，仅使用 CPU 也可以运行这些代码片段。
- en: 'The recommended computer configuration includes the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐的计算机配置包括以下内容：
- en: A GPU such as the GTX series or RTX series with at least 8 GB of memory
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少配备 8GB 内存的 GPU，如 GTX 系列或 RTX 系列
- en: Python 3
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3
- en: The PyTorch library and PyTorch3D libraries
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch 库和 PyTorch3D 库
- en: The code snippets for this chapter can be found at [https://github.com/PacktPublishing/3D-Deep-Learning-with-Python](https://github.com/PacktPublishing/3D-Deep-Learning-with-Python).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码片段可以在 [https://github.com/PacktPublishing/3D-Deep-Learning-with-Python](https://github.com/PacktPublishing/3D-Deep-Learning-with-Python)
    上找到。
- en: Setting up a development environment
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: 'Let us first set up a development environment for all the coding exercises
    in this book. We recommend using a Linux machine for all the Python code examples
    in this book:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为本书中的所有编码练习设置一个开发环境。我们建议使用 Linux 机器来运行本书中的所有 Python 代码示例：
- en: 'We will first set up Anaconda. Anaconda is a widely used Python distribution
    that bundles with the powerful CPython implementation. One advantage of using
    Anaconda is its package management system, enabling users to create virtual environments
    easily. The individual edition of Anaconda is free for solo practitioners, students,
    and researchers. To install Anaconda, we recommend visiting the website, [anaconda.com](http://anaconda.com),
    for detailed instructions. The easiest way to install Anaconda is usually by running
    a script downloaded from their website. After setting up Anaconda, run the following
    command to create a virtual environment of Python 3.7:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先设置 Anaconda。Anaconda 是一个广泛使用的 Python 发行版，捆绑了强大的 CPython 实现。使用 Anaconda
    的一个优势是它的包管理系统，使用户能够轻松创建虚拟环境。Anaconda 的个人版对于个人使用者、学生和研究人员是免费的。要安装 Anaconda，我们建议访问
    [anaconda.com](http://anaconda.com) 网站获取详细的安装说明。通常，安装 Anaconda 最简单的方法是运行从其网站下载的脚本。设置好
    Anaconda 后，运行以下命令创建一个 Python 3.7 的虚拟环境：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will create a virtual environment with Python version 3.7\. In
    order to use this virtual environment, we need to activate it first by running
    the command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将创建一个 Python 3.7 版本的虚拟环境。为了使用这个虚拟环境，我们需要先激活它，方法是运行以下命令：
- en: 'Activate the newly created virtual environments with the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令激活新创建的虚拟环境：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install PyTorch. Detailed instructions on installing PyTorch can be found on
    its web page at [www.pytorch.org/get-started/locally/](http://www.pytorch.org/get-started/locally/).
    For example, I will install PyTorch 1.9.1 on my Ubuntu desktop with CUDA 11.1,
    as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 PyTorch。有关安装 PyTorch 的详细说明，可以在其网页 [www.pytorch.org/get-started/locally/](http://www.pytorch.org/get-started/locally/)
    上找到。例如，我将在我的 Ubuntu 桌面上安装 PyTorch 1.9.1，CUDA 版本为 11.1，命令如下：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Install PyTorch3D. PyTorch3D is an open source Python library for 3D computer
    vision recently released by Facebook AI Research. PyTorch3D provides many utility
    functions to easily manipulate 3D data. Designed with deep learning in mind, almost
    all 3D data can be handled by mini-batches, such as cameras, point clouds, and
    meshes. Another key feature of PyTorch3D is the implementation of a very important
    3D deep learning technique, called *differentiable rendering*. However, the biggest
    advantage of PyTorch3D as a 3D deep learning library is its close ties to PyTorch.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 PyTorch3D。PyTorch3D 是 Facebook AI Research 最近发布的一个开源 Python 库，用于 3D 计算机视觉。PyTorch3D
    提供了许多实用功能，可以轻松操作 3D 数据。它的设计考虑了深度学习，几乎所有的 3D 数据都可以通过小批量处理，例如相机、点云和网格。PyTorch3D
    的另一个关键特点是实现了一种非常重要的 3D 深度学习技术，称为 *可微渲染*。然而，PyTorch3D 作为 3D 深度学习库的最大优势是它与 PyTorch
    的紧密结合。
- en: 'PyTorch3D may need some dependencies, and detailed instructions on how to install
    these dependencies can be found on the PyTorch3D GitHub home page at [github.com/facebookresearch/pytorch3d](http://github.com/facebookresearch/pytorch3d).
    After all the dependencies have been installed by following the instructions from
    the website, installing PyTorch3D can be easily done by running the following
    command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch3D 可能需要一些依赖库，如何安装这些依赖库的详细说明可以在 PyTorch3D GitHub 首页找到，网址是 [github.com/facebookresearch/pytorch3d](http://github.com/facebookresearch/pytorch3d)。在按照网站上的说明安装了所有依赖项后，安装
    PyTorch3D 可以通过运行以下命令轻松完成：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have set up the development environment, let’s go ahead and start
    learning data representation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了开发环境，让我们开始学习数据表示。
- en: 3D data representation
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D 数据表示
- en: In this section, we will learn the most frequently used data representation
    of 3D data. Choosing data representation is a particularly important design decision
    for many 3D deep learning systems. For example, point clouds do not have grid-like
    structures, thus convolutions cannot be usually used directly for them. Voxel
    representations have grid-like structures; however, they tend to consume a high
    amount of computer memory. We will discuss the pros and cons of these 3D representations
    in more detail in this section. Widely used 3D data representations usually include
    point clouds, meshes, and voxels.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习最常用的 3D 数据表示方法。选择数据表示是许多 3D 深度学习系统中的一个特别重要的设计决策。例如，点云没有类似网格的结构，因此通常不能直接对其进行卷积操作。体素表示有类似网格的结构；然而，它们往往消耗大量计算机内存。在本节中，我们将更详细地讨论这些
    3D 表示的优缺点。广泛使用的 3D 数据表示通常包括点云、网格和体素。
- en: Understanding point cloud representation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解点云表示
- en: A 3D point cloud is a very straightforward representation of 3D objects, where
    each point cloud is just a collection of 3D points, and each 3D point is represented
    by one three-dimensional tuple (*x*, *y*, or *z*). The raw measurements of many
    depth cameras are usually 3D point clouds.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 点云是 3D 物体的一种非常直观的表示方式，其中每个点云只是由多个 3D 点组成，每个 3D 点由一个三维元组（*x*、*y* 或 *z*）表示。许多深度摄像头的原始测量数据通常是
    3D 点云。
- en: 'From a deep learning point of view, 3D point clouds are one of the unordered
    and irregular data types. Unlike regular images, where we can define neighboring
    pixels for each individual pixel, there are no clear and regular definitions for
    neighboring points for each point in a point cloud – that is, convolutions usually
    cannot be applied to point clouds. Thus, special types of deep learning models
    need to be used for processing point clouds, such as PointNet: [https://arxiv.org/abs/1612.00593](https://arxiv.org/abs/1612.00593).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从深度学习的角度来看，3D点云是无序且不规则的数据类型。与常规图像不同，我们可以为每个像素定义邻近像素，而在点云中，每个点的邻近点没有清晰且规则的定义——也就是说，卷积通常不能应用于点云。因此，需要使用特殊类型的深度学习模型来处理点云，比如PointNet：[https://arxiv.org/abs/1612.00593](https://arxiv.org/abs/1612.00593)。
- en: Another issue for point clouds as training data for 3D deep learning is the
    heterogeneous data issue – that is, for one training dataset, different point
    clouds may contain different numbers of 3D points. One approach for avoiding such
    a heterogeneous data issue is forcing all the point clouds to have the same number
    of points. However, this may not be always possible – for example, the number
    of points returned by depth cameras may be different from frame to frame.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于点云作为3D深度学习训练数据的另一个问题是异构数据问题——即，对于一个训练数据集，不同的点云可能包含不同数量的3D点。解决这种异构数据问题的一种方法是强制所有点云具有相同数量的点。然而，这并不总是可行的——例如，深度相机返回的点数可能会随着帧的变化而不同。
- en: The heterogeneous data may create some difficulties for mini-batch gradient
    descent in training deep learning models. Most deep learning frameworks assume
    that each mini-batch contains training examples of the same size and dimensions.
    Such homogeneous data is preferred because it can be most efficiently processed
    by modern parallel processing hardware, such as GPUs. Handling heterogeneous mini-batches
    in an efficient way needs some additional work. Luckily, PyTorch3D provides many
    ways of handling heterogeneous mini-batches efficiently, which are important for
    3D deep learning.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 异构数据可能会给小批量梯度下降训练深度学习模型带来一些困难。大多数深度学习框架假设每个小批量包含相同大小和维度的训练样本。这样的同质数据是首选，因为它可以通过现代并行处理硬件（如GPU）最有效地处理。高效处理异构小批量数据需要额外的工作。幸运的是，PyTorch3D提供了许多高效处理异构小批量数据的方法，这对于3D深度学习至关重要。
- en: Understanding mesh representation
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解网格表示法
- en: Meshes are another widely used 3D data representation. Like points in point
    clouds, each mesh contains a set of 3D points called vertices. In addition, each
    mesh also contains a set of polygons called faces, which are defined on vertices.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 网格是另一种广泛使用的3D数据表示形式。就像点云中的点一样，每个网格包含一组称为顶点的3D点。此外，每个网格还包含一组称为面片的多边形，这些面片是在顶点上定义的。
- en: In most data-driven applications, meshes are a result of post-processing from
    raw measurements of depth cameras. Often, they are manually created during the
    process of 3D asset design. Compared to point clouds, meshes contain additional
    geometric information, encode topology, and have surface-normal information. This
    additional information becomes especially useful in training learning models.
    For example, graph convolutional neural networks usually treat meshes as graphs
    and define convolutional operations using the vertex neighboring information.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数数据驱动的应用中，网格是深度相机原始测量结果的后处理结果。通常，它们是在3D资产设计过程中手动创建的。与点云相比，网格包含额外的几何信息，编码拓扑，并且具有表面法线信息。这些额外的信息在训练学习模型时尤其有用。例如，图卷积神经网络通常将网格视为图形，并使用顶点邻域信息定义卷积操作。
- en: Just like point clouds, meshes also have similar heterogeneous data issues.
    Again, PyTorch3D provides efficient ways for handling heterogeneous mini-batches
    for mesh data, which makes 3D deep learning efficient.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 就像点云一样，网格也有类似的异构数据问题。同样，PyTorch3D提供了处理网格数据异构小批量的高效方法，这使得3D深度学习变得高效。
- en: Understanding voxel representation
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解体素表示法
- en: 'Another important 3D data representation is voxel representation. A voxel is
    the counterpart of a pixel in 3D computer vision. A pixel is defined by dividing
    a rectangle in 2D into smaller rectangles and each small rectangle is one pixel.
    Similarly, a voxel is defined by dividing a 3D cube into smaller-sized cubes and
    each cube is called one voxel. The processes are shown in the following figure:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种重要的3D数据表示法是体素表示法。体素是3D计算机视觉中像素的对应物。像素是通过将2D矩形划分为更小的矩形来定义的，每个小矩形就是一个像素。类似地，体素是通过将3D立方体划分为更小的立方体来定义的，每个立方体称为一个体素。这个过程如下图所示：
- en: '![Figure 1.1 – Voxel representation is the 3D counterpart of 2D pixel representation,
    where a cubic space is divided into small volume elements ](img/B18217_01_001Redraw.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 体素表示法是2D像素表示法的3D对应物，其中一个立方体空间被划分成小的体积元素](img/B18217_01_001Redraw.jpg)'
- en: Figure 1.1 – Voxel representation is the 3D counterpart of 2D pixel representation,
    where a cubic space is divided into small volume elements
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 体素表示法是2D像素表示法的3D对应物，其中一个立方体空间被划分成小的体积元素
- en: Voxel representations usually use **Truncated Signed Distance Functions** (**TSDFs**)
    to represent 3D surfaces. A **Signed Distance Function** (**SDF**) can be defined
    at each voxel as the (signed) distance between the center of the voxel to the
    closest point on the surface. A positive sign in an SDF indicates that the voxel
    center is outside an object. The only difference between a TSDF and an SDF is
    that the values of a TSDF are truncated, such that the values of a TSDF always
    range from -1 to +1.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 体素表示法通常使用**截断有符号距离函数**（**TSDFs**）来表示3D表面。**有符号距离函数**（**SDF**）可以在每个体素上定义为体素中心到表面最近点的（有符号）距离。SDF中的正号表示体素中心在物体外部。TSDF和SDF之间的唯一区别在于TSDF的值是截断的，因此TSDF的值始终范围在-1到+1之间。
- en: Unlike point clouds and meshes, voxel representation is ordered and regular.
    This property is like pixels in images and enables the use of convolutional filters
    in deep learning models. One potential disadvantage of voxel representation is
    that it usually requires more computer memory, but this can be reduced by using
    techniques such as hashing. Nevertheless, voxel representation is an important
    3D data representation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与点云和网格不同，体素表示法是有序且规则的。这个特性类似于图像中的像素，使得在深度学习模型中可以使用卷积滤波器。体素表示法的一个潜在缺点是它通常需要更多的计算机内存，但通过使用诸如哈希等技术可以减少内存需求。尽管如此，体素表示法仍然是一个重要的3D数据表示法。
- en: There are 3D data representations other than the ones mentioned here. For example,
    multi-view representations use multiple images taken from different viewpoints
    to represent a 3D scene. RGB-D representations use an additional depth channel
    to represent a 3D scene. However, in this book, we will not be diving too deep
    into these 3D representations. Now that we have learned the basics of 3D data
    representations, we will dive into a few commonly used file formats for point
    clouds and meshes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这里提到的3D数据表示方式，还有其他的3D数据表示方式。例如，多视角表示法使用从不同视点拍摄的多张图像来表示一个3D场景。RGB-D表示法使用一个额外的深度通道来表示一个3D场景。然而，在本书中，我们不会深入探讨这些3D表示法。现在我们已经了解了3D数据表示的基础知识，接下来我们将深入了解几种常用的点云和网格文件格式。
- en: 3D data file format – Ply files
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D数据文件格式 – Ply文件
- en: The PLY file format was developed in the mid-1990s by a group of researchers
    from Stanford University. It has since evolved into one of the most widely used
    3D data file formats. The file format has both an ASCII version and a binary version.
    The binary version is preferred in cases where file sizes and processing efficiencies
    are needed. The ASCII version makes it quite easy to debug. Here, we will discuss
    the basic format of PLY files and how to use both Open3D and PyTorch3D to load
    and visualize 3D data from PLY files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: PLY文件格式是由斯坦福大学的一组研究人员在1990年代中期开发的。此后，它已发展成为最广泛使用的3D数据文件格式之一。该文件格式有ASCII版本和二进制版本。在需要文件大小和处理效率的情况下，二进制版本更受偏好。ASCII版本则使得调试变得相对容易。接下来，我们将讨论PLY文件的基本格式，以及如何使用Open3D和PyTorch3D加载并可视化PLY文件中的3D数据。
- en: In this section, we are going to discuss the two most frequently used data file
    formats to represent point clouds and meshes, the PLY file format and the OBJ
    file format. We are going to discuss the formats and how to load and save these
    file formats using PyTorch3D. PyTorch3D provides excellent utility functions,
    so loading from and saving to these file formats is efficient and easy using these
    utility functions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论两种最常用的数据文件格式来表示点云和网格，即PLY文件格式和OBJ文件格式。我们将讨论这些格式以及如何使用PyTorch3D加载和保存这些文件格式。PyTorch3D提供了优秀的实用函数，因此使用这些实用函数可以高效且轻松地加载和保存这些文件格式。
- en: 'An example, a `cube.ply` file, is shown in the following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例，`cube.ply`文件，在以下代码片段中显示：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As seen here, each PLY file contains a header part and a data part. The first
    line of every ASCII PLY file is always `ply`, which indicates that this is a PLY
    file. The second line, `format ascii 1.0`, shows that the file is of the Ascii
    type with a version number. Any lines starting with `comment` will be considered
    as a comment line, and thus anything following `comment` will be ignored when
    the PLY file is loaded by a computer. The `element vertex 8` line means that the
    first type of data in the PLY file is vertex and we have eight vertices. `property
    float32 x` means that each vertex has a property named `x` of the `float32 type`.
    Similarly, each vertex also has `y` and `z` properties. Here, each vertex is one
    3D point. The `element face 12 line` means that the second type of data in this
    PLY file is of the `face` type and we have 12 faces. `property list unit8 int32
    vertex_indices` shows that each face will be a list of vertex indices. The header
    part of the `ply` file always ends with an `end_header` line.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所见，每个PLY文件包含一个头部和一个数据部分。每个ASCII PLY文件的第一行始终为`ply`，表示这是一个PLY文件。第二行`format ascii
    1.0`表示文件是ASCII类型，并带有版本号1.0。以`comment`开头的任何行将被视为注释行，因此加载PLY文件时计算机会忽略`comment`后的内容。`element
    vertex 8`行表示PLY文件中第一种数据类型是顶点，我们有八个顶点。`property float32 x`表示每个顶点具有名为`x`的`float32`类型属性。同样，每个顶点还具有`y`和`z`属性。在这里，每个顶点都是一个3D点。`element
    face 12 line`行表示该PLY文件的第二种数据类型是`face`，我们有12个面。`property list unit8 int32 vertex_indices`显示每个面将是一个顶点索引列表。PLY文件的头部部分总是以`end_header`行结束。
- en: The first part of the data part of the PLY file consists of eight lines, where
    each line is the record for one vertex. The three numbers in each line represent
    the three `x`, `y`, and `z` properties of the vertex. For example, the three numbers
    -1, -1, -1 specify that the vertex has an `x` coordinate of `-1`, `y` coordinate
    of `-1`, and `z` coordinate of `-1`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: PLY文件数据部分的第一部分由八行组成，每行记录一个顶点。每行中的三个数字表示顶点的三个`x`、`y`和`z`属性。例如，三个数字-1, -1, -1指定该顶点具有`x`坐标为`-1`，`y`坐标为`-1`和`z`坐标为`-1`。
- en: The second part of the data part of the ply file consists of 12 lines, where
    each line is the record for one face. The first number in the sequence of numbers
    indicates the number of vertices that the face has, and the following numbers
    are the vertex indices. The vertex indices are determined by the order that the
    vertices are declared in the PLY file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: PLY文件的数据部分的第二部分由12行组成，每行记录一个面的数据。序列中的第一个数字表示面有多少个顶点，接下来的数字是顶点的索引。顶点的索引由PLY文件中声明顶点的顺序确定。
- en: 'We can use both Open3D and PyTorch3D to open the preceding file. Open3D is
    a Python package that is very handy for visualizing 3D data, and PyTorch3D is
    handy for using this data for deep learning models. The following is a code snippet,
    `ply_example1.py`, for visualizing the mesh in the `cube.ply` file and loading
    the vertices and meshes as PyTorch tensors:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Open3D和PyTorch3D打开前述文件。Open3D是一个非常方便用于可视化3D数据的Python包，而PyTorch3D则适用于将这些数据用于深度学习模型。以下是一个代码片段，`ply_example1.py`，用于可视化`cube.ply`文件中的网格，并将顶点和网格加载为PyTorch张量：
- en: '[PRE34]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In the preceding Python code snippet, a `cube.ply` mesh file is first opened
    by the `open3d` package by using the `read_triangle_mesh` function and all the
    3D data is read into the mesh variable. The mesh can then be visualized using
    the Open3D library `draw_geometries` function. When you run this function, the
    Open3D library will pop up a window for interactively visualizing the mesh – that
    is, you can rotate, zoom into, and zoom out of the mesh using your mouse interactively.
    The `cube.ply` file, as you can guess, defines a mesh of a cube with eight vertices
    and six sides, where each side is covered by two faces.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的Python代码片段中，`cube.ply`网格文件首先通过`open3d`库使用`read_triangle_mesh`函数打开，并将所有3D数据读取到网格变量中。然后，可以使用Open3D库的`draw_geometries`函数来可视化该网格。当你运行这个函数时，Open3D库将弹出一个窗口进行交互式可视化——也就是说，你可以使用鼠标进行旋转、缩放和拉近/远离网格。正如你猜到的，`cube.ply`文件定义了一个具有八个顶点和六个面的立方体网格，每个面由两个三角形组成。
- en: We can also use the `PyTorch3D` library to load the same mesh. However, this
    time, we are going to obtain several PyTorch tensors – for example, one tensor
    for vertices and one tensor for faces. These tensors can be input into any PyTorch
    deep learning model directly. In this example, the `load_ply` function returns
    a tuple of vertices and faces, both of which are conventionally in the format
    of PyTorch tensors. When you run this `ply_example1.py` code snippet, the returned
    vertices should be a PyTorch tensor with a shape of `[8, 3]` – that is, there
    are eight vertices, and each vertex has three coordinates. Similarly, the returned
    faces should be a PyTorch tensor with a shape of [12, 3], that is, there are 12
    faces, and each face has 3 vertex indices.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`PyTorch3D`库来加载相同的网格。不过，这一次，我们将获得几个PyTorch张量——例如，一个张量表示顶点，一个张量表示面。这些张量可以直接输入到任何PyTorch深度学习模型中。在这个示例中，`load_ply`函数返回一个元组，其中包含顶点和面的信息，这些信息通常采用PyTorch张量的格式。当你运行这个`ply_example1.py`代码片段时，返回的顶点应该是一个形状为`[8,
    3]`的PyTorch张量——也就是说，有八个顶点，每个顶点有三个坐标。同样，返回的面应该是一个形状为`[12, 3]`的PyTorch张量——即有12个面，每个面有3个顶点索引。
- en: 'In the following code snippet, we show another example of the `parallel_plane_mono.ply`
    file, which can also be downloaded from our GitHub repository. The only difference
    between the mesh in this example and the mesh in the `cube is.ply` file is the
    number of faces. Instead of the six sides of a cube, here we have only four faces,
    which form two parallel planes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们展示了另一个`parallel_plane_mono.ply`文件的示例，该文件也可以从我们的GitHub仓库下载。这个示例中的网格与`cube_is.ply`文件中的网格的唯一区别在于面数的不同。在这里，我们有四个面，它们组成了两个平行平面，而不是六个立方体的面：
- en: '[PRE48]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The mesh can be interactively visualized by the following `ply_example2.py`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该网格可以通过以下`ply_example2.py`进行交互式可视化：
- en: 'First, we import all the needed Python libraries:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入所有需要的Python库：
- en: '[PRE70]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We load the mesh using `open3d`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`open3d`来加载网格：
- en: '[PRE71]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We use `draw_geometries` to open a window for visualizing interactively with
    the mesh:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`draw_geometries`来打开一个窗口，以便与网格进行交互式可视化：
- en: '[PRE72]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We use `pytorch3d` to open the same mesh:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`pytorch3d`来打开相同的网格：
- en: '[PRE73]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We can print out the information about the loaded vertices and faces. In fact,
    they are just ordinary PyTorch3D tensors:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以打印出加载的顶点和面的信息。实际上，它们只是普通的PyTorch3D张量：
- en: '[PRE74]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'For each vertex, we can also define properties other than the *x*, *y*, and
    *z* coordinates. For example, we can also define colors for each vertex. An example
    of `parallel_plane_color.ply` is shown here:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个顶点，我们还可以定义除*x*、*y*和*z*坐标之外的属性。例如，我们还可以为每个顶点定义颜色。下面是`parallel_plane_color.ply`的示例：
- en: '[PRE75]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Note that in the preceding example, along with *x*, *y*, and *z*, we also define
    some additional properties for each vertex – that is, the red, green, and blue
    properties, all in the `uchar` data type. Now, each record for one vertex is one
    line of six numbers. The first three are *x*, *y*, and *z* coordinates. The following
    three numbers are the RGB values.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的示例中，除了*x*、*y*和*z*外，我们还为每个顶点定义了一些额外的属性——即红色、绿色和蓝色属性，所有这些属性的类型都是`uchar`数据类型。现在，每个顶点的记录就是一行六个数字。前三个是*x*、*y*和*z*坐标，接下来的三个数字是RGB值。
- en: 'The mesh can be visualized by using `ply_example3.py` as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`ply_example3.py`来可视化网格，如下所示：
- en: '[PRE100]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: We also provide `cow.ply`, which is a real-world example of a 3D mesh. The readers
    can visualize the mesh using `ply_example4.py`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了`cow.ply`，这是一个真实世界的3D网格示例。读者可以使用`ply_example4.py`来可视化该网格。
- en: By now, we have talked about the basic elements of the PLY file format, such
    as vertices and faces. Next, we will discuss the OBJ 3D data format.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，我们已经讨论了 PLY 文件格式的基本元素，例如顶点和面。接下来，我们将讨论 OBJ 3D 数据格式。
- en: 3D data file format – OBJ files
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D 数据文件格式 - OBJ 文件
- en: In this section, we are going to discuss another widely used 3D data file format,
    the OBJ file format. The OBJ file format was first developed by Wavefront Technologies
    Inc. Like the PLY file format, the OBJ format also has both an ASCII version and
    a binary version. The binary version is proprietary and undocumented. So, we are
    going to discuss the ASCII version in this section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将讨论另一种广泛使用的 3D 数据文件格式——OBJ 文件格式。OBJ 文件格式最初由 Wavefront Technologies Inc.
    开发。与 PLY 文件格式类似，OBJ 格式也有 ASCII 版本和二进制版本。二进制版本是专有且未公开文档的。因此，本节我们将讨论 ASCII 版本。
- en: Like the previous section, here we are going to learn the file format by looking
    at examples. The first example, `cube.obj`, is shown as follows. As you can guess,
    the OBJ file defines a mesh of a cube.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 像前一节一样，我们将通过查看示例来学习文件格式。第一个示例 `cube.obj` 如下所示。如你所料，OBJ 文件定义了一个立方体的网格。
- en: The first line, `mtlib ./cube.mtl`, declares the companion **Material Template
    Library** (**MTL**) file. The **MTL** file describes surface shading properties,
    which will be explained in the next code snippet.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行 `mtlib ./cube.mtl` 声明了配套的 **材质模板库** (**MTL**) 文件。**MTL** 文件描述了表面阴影属性，这将在下一个代码片段中进行解释。
- en: For the `o cube` line, the starting letter, `o`, indicates that the line defines
    an object, where the name of the object is `cube`. Any line starting with `#`
    is a comment line – that is, the rest of the line will be ignored by a computer.
    Each line starts with `v`, which indicates that each line defines a vertex. For
    example, `v -0.5 -0.5 0.5` defines a vertex with an *x* coordinate of 0.5, a *y*
    coordinate of 0.5, and a *z* coordination of 0.5\. For each line starting with
    `f`, `f` indicates that each line contains a definition for one face. For example,
    the `f 1 2 3` line defines a face, with its three vertices being the vertices
    with indices 1, 2, and 3.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `o cube` 行，起始字母 `o` 表明此行定义了一个物体，物体的名称是 `cube`。任何以 `#` 开头的行都是注释行——即计算机会忽略该行的其余部分。每一行以
    `v` 开头，表示该行定义了一个顶点。例如，`v -0.5 -0.5 0.5` 定义了一个顶点，其 *x* 坐标为 0.5，*y* 坐标为 0.5，*z*
    坐标为 0.5。每一行以 `f` 开头时，`f` 表示该行包含一个面的定义。例如，`f 1 2 3` 行定义了一个面，其三个顶点为索引为 1、2 和 3 的顶点。
- en: 'The `usemtl Door` line declares that the surfaces declared after this line
    should be shaded using a material property defined in the MTL file, named `Door`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`usemtl Door` 行声明了在此行之后声明的表面应使用在 MTL 文件中定义的材质属性进行阴影渲染，材质名称为 `Door`：'
- en: '[PRE113]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The `cube.mtl` companion MTL file is shown as follows. The file defines a material
    property called `Door`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 配套的 `cube.mtl` MTL 文件如下所示。该文件定义了一个名为 `Door` 的材质属性：
- en: '[PRE138]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'We will not discuss these material properties in detail except for `map_Kd`.
    If you are curious, you can refer to a standard computer graphics textbook such
    as *Computer Graphics: Principles and Practice*. We will list some rough descriptions
    of these properties as follows, just for the sake of completeness:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '除了 `map_Kd` 以外，我们不会详细讨论这些材质属性。如果你感兴趣，可以参考标准的计算机图形学教材，如 *Computer Graphics:
    Principles and Practice*。我们将以下列出这些属性的一些简要描述，仅供完整性参考：'
- en: '`Ka`: Specifies an ambient color'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ka`：指定环境光颜色'
- en: '`Kd`: Specifies a diffuse color'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Kd`：指定漫反射颜色'
- en: '`Ks`: Specifies a specular color'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ks`：指定镜面反射颜色'
- en: '`Ns`: Defines the focus of specular highlights'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ns`：定义镜面高光的聚焦程度'
- en: '`Ni`: Defines the optical density (a.k.a index of refraction)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ni`：定义光学密度（即折射率）'
- en: '`d`: Specifies a factor for dissolve'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：指定溶解因子'
- en: '`illum`: Specifies an illumination model'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`illum`：指定光照模型'
- en: '`map_Kd`: Specifies a color texture file to be applied to the diffuse reflectivity
    of the material'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map_Kd`：指定应用于材质漫反射反射率的颜色纹理文件'
- en: 'The `cube.obj` file can be opened by both Open3D and PyTorch3D. The following
    code snippet, `obj_example1.py`, can be downloaded from our GitHub repository:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`cube.obj` 文件可以通过 Open3D 和 PyTorch3D 打开。以下代码片段 `obj_example1.py` 可以从我们的 GitHub
    仓库中下载：'
- en: '[PRE145]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: In the preceding code snippet, the defined mesh of a cube can be interactively
    visualized by using the Open3D `draw_geometries` function. The mesh will be shown
    in a window, and you can rotate, zoom into, and zoom out of the mesh using your
    mouse. The mesh can also be loaded using the PyTorch3D `load_obj` function. The
    `load_obj` function will return the `vertices`, `faces`, and `aux` variables,
    either in the format of a PyTorch tensor or tuples of PyTorch tensors.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，定义的立方体网格可以通过使用Open3D的`draw_geometries`函数进行交互式可视化。网格将在一个窗口中显示，您可以使用鼠标旋转、缩放以及放大或缩小网格。网格也可以通过PyTorch3D的`load_obj`函数加载。`load_obj`函数将返回`vertices`、`faces`和`aux`变量，格式可以是PyTorch张量或PyTorch张量元组。
- en: 'An example output of the `obj_example1.py` code snippet is shown as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`obj_example1.py`代码片段的一个示例输出如下所示：'
- en: '[PRE161]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: From the code snippet output here, we know that the returned vertices variable
    is a PyTorch tensor with a shape of 8 x 3, where each row is a vertex with the
    *x*, *y*, and *z* coordinates. The returned variable, `faces`, is a named tuple
    of three PyTorch tensors, `verts_idx`, `normals_idx`, and `textures_idx`. In the
    preceding example, all the `normals_idx` and `textures_idx` tensors are invalid
    because `cube.obj` does not include definitions for normal and textures. We will
    see in the next example how normals and textures can be defined in the OBJ file
    format. `verts_idx` is the vertex indices for each face. Note that the vertex
    indices are 0-indexed here in PyTorch3D, where the indices start from 0\. However,
    the vertex indices in OBJ files are 1-indexed, where the indices start from 1\.
    PyTorch3D has already made the conversion between the two ways of vertex indexing
    for us.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里输出的代码片段中，我们知道返回的顶点变量是一个形状为8 x 3的PyTorch张量，其中每一行是一个顶点，包含*x*、*y*和*z*坐标。返回的变量`faces`是一个包含三个PyTorch张量的命名元组，分别是`verts_idx`、`normals_idx`和`textures_idx`。在之前的示例中，所有`normals_idx`和`textures_idx`张量都是无效的，因为`cube.obj`没有包括法线和纹理的定义。在下一个示例中，我们将看到如何在OBJ文件格式中定义法线和纹理。`verts_idx`是每个面的顶点索引。请注意，这里的顶点索引是从0开始的，在PyTorch3D中，索引从0开始。然而，OBJ文件中的顶点索引是从1开始的，索引从1开始。PyTorch3D已经为我们完成了两者之间的转换。
- en: The return variable, `aux`, contains some extra mesh information. Note that
    the `texture_image` field of the `aux` variable is empty. The texture images are
    used in MTL files to define colors on vertices and faces. Again, we will show
    how to use this feature in our next example.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 返回变量`aux`包含一些额外的网格信息。请注意，`aux`变量的`texture_image`字段为空。纹理图像在MTL文件中用于定义顶点和面上的颜色。我们将在下一个示例中展示如何使用这个功能。
- en: In the second example, we will use an example `cube_texture.obj` file to highlight
    more OBJ file features. The file is shown as follows.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，我们将使用一个示例`cube_texture.obj`文件来突出更多OBJ文件的特性。该文件如下所示。
- en: 'The `cube_texture.obj` file is like the `cube.obj` file, except for the following
    differences:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`cube_texture.obj`文件与`cube.obj`文件类似，不同之处如下：'
- en: There are some additional lines starting with `vt`. Each such line declares
    a texture vertex with *x* and *y* coordinates. Each texture vertex defines a color.
    The color is the pixel color at a so-called texture image, where the pixel location
    is the *x* coordinate of the texture vertex x width, and the *y* coordinate of
    the texture vertex x height. The texture image would be defined in the `cube_texture.mtl`
    companion.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一些以`vt`开头的附加行。每一行都声明一个具有*x*和*y*坐标的纹理顶点。每个纹理顶点定义一个颜色。该颜色是所谓纹理图像中的像素颜色，其中像素位置是纹理顶点的*x*坐标与纹理的宽度以及*y*坐标与纹理的高度。纹理图像将在`cube_texture.mtl`伴随文件中定义。
- en: There are additional lines starting with `vn`. Each such line declares a normal
    vector – for example, the `vn 0.000000 -1.000000 0.000000` line declares a normal
    vector pointing to the negative *z* axis.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一些以`vn`开头的附加行。每一行都声明一个法线向量——例如，`vn 0.000000 -1.000000 0.000000`这一行声明了一个指向负*z*轴的法线向量。
- en: 'Each face definition line now contains more information about each vertex.
    For example, the `f 2/1/1 3/2/1 4/3/1` line contains the definitions for the three
    vertices. The first triple, `2/1/1`, defines the first vertex, the second triple,
    `3/2/1`, defines the second vertex, and the third triple, `4/3/1`, defines the
    third vertex. Each such triplet is the vertex index, texture vertex index, and
    normal vector index. For example, `2/1/1` defines a vertex, where the vertex geometric
    location is defined in the second line starting with `v`, the color is defined
    in the first line starting with `vt`, and the normal vector is defined in the
    first line starting with `vn`:'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个面定义行现在包含关于每个顶点的更多信息。例如，`f 2/1/1 3/2/1 4/3/1` 行包含三个顶点的定义。第一个三元组 `2/1/1` 定义了第一个顶点，第二个三元组
    `3/2/1` 定义了第二个顶点，第三个三元组 `4/3/1` 定义了第三个顶点。每个这样的三元组表示顶点索引、纹理顶点索引和法向量索引。例如，`2/1/1`
    定义了一个顶点，其中顶点的几何位置在第二行以 `v` 开头的定义中，颜色在第一行以 `vt` 开头的定义中，而法向量在第一行以 `vn` 开头的定义中：
- en: '[PRE193]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'The `cube_texture.mtl` companion is as follows, where the line starting with
    `map_Kd` declares the texture image. Here, `wal67ar_small.jpg` is a 250 x 250
    RGB image file in the same folder as the MTL file:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`cube_texture.mtl` 的伴随文件如下，其中以 `map_Kd` 开头的行声明了纹理图像。在这里，`wal67ar_small.jpg`
    是一个 250 x 250 的 RGB 图像文件，和 MTL 文件在同一文件夹中：'
- en: '[PRE237]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'Again, we can use Open3D and PyTorch3D to load the mesh in the `cube_texture.obj`
    file – for example, by using the following `obj_example2.py` file:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Open3D 和 PyTorch3D 来加载 `cube_texture.obj` 文件中的网格，例如，通过使用以下 `obj_example2.py`
    文件：
- en: '[PRE243]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'The output of the `obj_example2.py` code snippet should be as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`obj_example2.py` 代码片段的输出应如下所示：'
- en: '[PRE263]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: Note
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This is not the complete output; please check this while you run the code.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是完整的输出；请在运行代码时检查这个。
- en: Compared with the output of the `obj_example1.py` code snippet, the preceding
    output has the following differences.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `obj_example1.py` 代码片段的输出相比，前面的输出有以下不同：
- en: The `normals_idx` and `textures_idx` fields of the `faces` variable all contain
    valid indices now instead of taking a `-``1` value.
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`faces` 变量的 `normals_idx` 和 `textures_idx` 字段现在都包含有效的索引，而不是取 `-1` 的值。'
- en: The `normals` field of the `aux` variable is a PyTorch tensor now, instead of
    being `None`.
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aux` 变量的 `normals` 字段现在是一个 PyTorch 张量，而不是 `None`。'
- en: The `verts_uvs` field of the `aux` variable is a PyTorch tensor now, instead
    of being `None`.
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aux` 变量的 `verts_uvs` 字段现在是一个 PyTorch 张量，而不是 `None`。'
- en: The `texture_images` field of the `aux` variable is not an empty dictionary
    any longer. The `texture_images` dictionary contains one entry with a key, `Skin`,
    and a PyTorch tensor with a shape of (250, 250, 3). This tensor is exactly the
    same as the image contained in the `wal67ar_small.jpg` file, as defined in the
    `mtl_texture.mtl` file.
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aux` 变量的 `texture_images` 字段不再是一个空字典。`texture_images` 字典包含一个条目，其中键为 `Skin`，值为一个形状为
    (250, 250, 3) 的 PyTorch 张量。这个张量与 `mtl_texture.mtl` 文件中定义的 `wal67ar_small.jpg`
    文件中的图像完全相同。'
- en: We have learned how to use basic 3D data file formats and PLY and OBJ files.
    In the next section, we will learn the basic concepts of 3D coordination systems.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何使用基本的 3D 数据文件格式，以及 PLY 和 OBJ 文件。在下一节中，我们将学习 3D 坐标系的基本概念。
- en: Understanding 3D coordination systems
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 3D 坐标系
- en: 'In this section, we are going to learn about the frequently used coordination
    systems in PyTorch3D. This section is adapted from PyTorch’s documentation of
    camera coordinate systems: [https://pytorch3d.org/docs/cameras](https://pytorch3d.org/docs/cameras).
    To understand and use the PyTorch3D rendering system, we usually need to know
    these coordination systems and how to use them. As discussed in the previous sections,
    3D data can be represented by points, faces, and voxels. The location of each
    point can be represented by a set of *x*, *y*, and *z* coordinates, with respect
    to a certain coordination system. We usually need to define and use multiple coordination
    systems, depending on which one is most convenient.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习 PyTorch3D 中常用的坐标系。本节内容改编自 PyTorch 的摄像机坐标系文档：[https://pytorch3d.org/docs/cameras](https://pytorch3d.org/docs/cameras)。为了理解和使用
    PyTorch3D 渲染系统，我们通常需要了解这些坐标系及其使用方法。如前所述，3D 数据可以通过点、面和体素来表示。每个点的位置可以通过一组 *x*、*y*
    和 *z* 坐标来表示，相对于某个特定的坐标系。我们通常需要定义并使用多个坐标系，具体取决于哪一个最方便。
- en: '![Figure 1.2 – A world coordinate system, where the origin and axis are defined
    independently of the camera positions ](img/B18217_01_002.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 世界坐标系统，其中原点和轴是独立于相机位置定义的](img/B18217_01_002.jpg)'
- en: Figure 1.2 – A world coordinate system, where the origin and axis are defined
    independently of the camera positions
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 世界坐标系统，其中原点和轴是独立于相机位置定义的
- en: 'The first coordination system we frequently use is called the **world coordination
    system**. This coordinate system is a 3D coordination system chosen with respect
    to all the 3D objects, such that the locations of the 3D objects can be easy to
    determine. Usually, the axis of the world coordination system does not agree with
    the object orientation or camera orientation. Thus, there exist some non-zero
    rotations and displacements between the origin of the world coordination system
    and the object and camera orientations. A figure showing the world coordination
    system is shown here:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常使用的第一个坐标系统被称为**世界坐标系统**。这个坐标系统是相对于所有 3D 对象选择的 3D 坐标系统，以便可以轻松确定 3D 对象的位置。通常，世界坐标系统的轴与物体的朝向或相机的朝向不一致。因此，世界坐标系统的原点与物体和相机的朝向之间存在一些非零的旋转和平移。以下是一个展示世界坐标系统的图示：
- en: '![Figure 1.3 – The camera view coordinate system, where the origin is at the
    camera projection center and the three axes are defined according to the imaging
    plane ](img/B18217_01_003.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 相机视图坐标系统，其中原点位于相机投影中心，三个轴根据成像平面定义](img/B18217_01_003.jpg)'
- en: Figure 1.3 – The camera view coordinate system, where the origin is at the camera
    projection center and the three axes are defined according to the imaging plane
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 相机视图坐标系统，其中原点位于相机投影中心，三个轴根据成像平面定义
- en: Since the axis of the world coordination system usually does not agree with
    the camera orientation, for many situations, it is more convenient to define and
    use a camera view coordination system. In PyTorch3D, the camera view coordination
    system is defined such that the origin is at the projection point of the camera,
    the *x* axis points to the left, the *y* axis points upward, and the *z* axis
    points to the front.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 由于世界坐标系统的轴通常与相机的朝向不一致，因此在许多情况下，定义并使用相机视图坐标系统会更为方便。在 PyTorch3D 中，相机视图坐标系统被定义为原点位于相机的投影点，*x*
    轴指向左侧，*y* 轴指向上方，*z* 轴指向前方。
- en: '![Figure 1.4 – The NDC coordinate system, in which the volume is confined to
    the ranges that the camera can render ](img/B18217_01_004.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – NDC 坐标系统，其中体积被限制在相机可以渲染的范围内](img/B18217_01_004.jpg)'
- en: Figure 1.4 – The NDC coordinate system, in which the volume is confined to the
    ranges that the camera can render
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – NDC 坐标系统，其中体积被限制在相机可以渲染的范围内
- en: The **normalized device coordinate** (**NDC**) confines the volume that a camera
    can render. The *x* coordinate values in the NDC space range from -1 to +1, as
    do the *y* coordinate values. The *z* coordinate values range from znear to zfar,
    where znear is the nearest depth and zfar is the farthest depth. Any object out
    of this znear to zfar range would not be rendered by the camera.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准化设备坐标** (**NDC**) 限制了相机可以渲染的体积。NDC 空间中的 *x* 坐标值范围从 -1 到 +1，*y* 坐标值也是如此。*z*
    坐标值的范围从 znear 到 zfar，其中 znear 是最近的深度，zfar 是最远的深度。任何超出这个 znear 到 zfar 范围的物体都不会被相机渲染。'
- en: Finally, the screen coordinate system is defined in terms of how the rendered
    images are shown on our screens. The coordinate system contains the *x* coordinate
    as the columns of the pixels, the *y* coordinate as the rows of the pixels, and
    the *z* coordinate corresponding to the depth of the object.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，屏幕坐标系统是根据渲染图像在我们屏幕上显示的方式定义的。该坐标系统包含 *x* 坐标作为像素的列，*y* 坐标作为像素的行，*z* 坐标对应物体的深度。
- en: To render the 3D object correctly on our 2D screens, we need to switch between
    these coordinate systems. Luckily, these conversions can be easily carried out
    by using the PyTorch3D camera models. We will discuss coordinatation conversion
    in more detail after we discuss the camera models.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的 2D 屏幕上正确渲染 3D 物体，我们需要在这些坐标系统之间进行切换。幸运的是，这些转换可以通过使用 PyTorch3D 相机模型轻松完成。在我们讨论相机模型后，将更详细地讨论坐标转换。
- en: Understanding camera models
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解相机模型
- en: In this section, we will learn about camera models. In 3D deep learning, usually
    we need to use 2D images for 3D detection. Either 3D information is detected solely
    from 2D images, or 2D images are fused with depth for high accuracy. Nevertheless,
    camera models are essential to build correspondence between the 2D space and the
    3D world.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习相机模型。在3D深度学习中，通常我们需要使用2D图像进行3D检测。要么是从2D图像中单独检测3D信息，要么是将2D图像与深度信息融合以获得更高的准确性。尽管如此，相机模型在建立2D空间与3D世界之间的对应关系时至关重要。
- en: In PyTorch3D, there are two major camera models, the orthographic camera defined
    by the `OrthographicCameras` class and the perspective camera model defined by
    the `PerspectiveCameras` class. The following figure shows the differences between
    the two camera models.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyTorch3D中，有两种主要的相机模型，分别是由`OrthographicCameras`类定义的正交相机和由`PerspectiveCameras`类定义的透视相机模型。下图展示了这两种相机模型之间的区别。
- en: '![Figure 1.5 – Two major camera models implemented in PyTorch3D, perspective
    and orthographic ](img/B18217_01_005Redraw.jpg)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – PyTorch3D中实现的两种主要相机模型，透视和正交](img/B18217_01_005Redraw.jpg)'
- en: Figure 1.5 – Two major camera models implemented in PyTorch3D, perspective and
    orthographic
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – PyTorch3D中实现的两种主要相机模型，透视和正交
- en: The orthographic cameras use orthographic projections to map objects in the
    3D world to 2D images, while the perspective cameras use perspective projections
    to map objects in the 3D world to 2D images. The orthographic projections map
    objects to 2D images, disregarding the object depth. For example, just as shown
    in the figure, two objects with the same geometric size at different depths would
    be mapped to 2D images of the same size. On the other hand, in perspective projections,
    if an object moved far away from the camera, it would be mapped to a smaller size
    on the 2D images.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 正交相机使用正交投影将3D世界中的物体映射到2D图像，而透视相机使用透视投影将3D世界中的物体映射到2D图像。正交投影将物体映射到2D图像时不考虑物体的深度。例如，如图所示，两个在不同深度但几何大小相同的物体将被映射到相同大小的2D图像上。而在透视投影中，如果物体远离相机，它将在2D图像上被映射为更小的大小。
- en: Now that we have learned about the basic concept of camera models, let us look
    at some coding examples to see how we can create and use these camera models.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了相机模型的基本概念，接下来让我们通过一些编码示例来看一下如何创建和使用这些相机模型。
- en: Coding for camera models and coordination systems
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相机模型和坐标系的编码
- en: 'In this section, we are going to leverage everything we have learned to build
    a concrete camera model and convert between different coordinate systems, using
    a concrete code snippet example written in Python and PyTorch3D:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将利用所学的所有知识，构建一个具体的相机模型，并在不同坐标系之间进行转换，使用一个用Python和PyTorch3D编写的具体代码示例：
- en: 'First, we are going to use the following mesh defined by a `cube.obj` file.
    Basically, the mesh is a cube:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用由`cube.obj`文件定义的以下网格。基本上，这个网格是一个立方体：
- en: '[PRE311]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: The example code snippet is `camera.py`, which can be downloaded from the book’s
    GitHub repository.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码片段是`camera.py`，可以从本书的GitHub仓库中下载。
- en: 'Let us import all the modules that we need:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入所有需要的模块：
- en: '[PRE312]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'We can load and visualize the mesh by using Open3D’s `draw_geometrics` function:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用Open3D的`draw_geometrics`函数加载并可视化网格：
- en: '[PRE313]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'We define a `camera` variable as a PyTorch3D `PerspectiveCamera` object. The
    camera here is actually mini-batched. For example, the rotation matrix, R, is
    a PyTorch tensor with a shape of [8, 3, 3], which actually defines eight cameras,
    each with one of the eight rotation matrices. This is the same case for all other
    camera parameters, such as image sizes, focal lengths, and principal points:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了一个`camera`变量，作为一个PyTorch3D的`PerspectiveCamera`对象。这里的相机实际上是mini-batched的。例如，旋转矩阵R是一个形状为[8,
    3, 3]的PyTorch张量，它实际上定义了八个相机，每个相机都有一个旋转矩阵。其他所有相机参数，如图像大小、焦距和主点，也是同样的情况：
- en: '[PRE314]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: 'Once we have defined the camera variable, we can call the `get_world_to_view_transform`
    class member method to obtain a `Transform3d` object, `world_to_view_transform`.
    We can then use the `transform_points` member method to convert from world coordination
    to camera view coordination. Similarly, we can also use the `get_full_projection_transform`
    member method to obtain a `Transform3d` object, which is for the conversion from
    world coordination to screen coordination:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们定义了相机变量，就可以调用 `get_world_to_view_transform` 类成员方法来获取一个 `Transform3d` 对象，即
    `world_to_view_transform`。然后，我们可以使用 `transform_points` 成员方法将世界坐标转换为相机视图坐标。同样地，我们还可以使用
    `get_full_projection_transform` 成员方法来获取一个 `Transform3d` 对象，该对象用于将世界坐标转换为屏幕坐标：
- en: '[PRE315]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: The code example shows the basic ways that PyTorch3D cameras can be used and
    how easy it is to switch between different coordinate systems using PyTorch3D.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例展示了如何使用 PyTorch3D 相机的基本方法，以及如何使用 PyTorch3D 在不同坐标系之间切换的简便性。
- en: Summary
  id: totrans-448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we first learned how to set up our development environment.
    We then talked about the most widely used 3D data representations. We then explored
    some concrete examples of 3D data representation by learning about the 3D data
    file formats, the PLY format and the OBJ format. Then, we learned about the basic
    concepts of 3D coordination systems and camera models. In the last part of the
    chapter, we learned how to build camera models and convert between different coordination
    systems through a hands-on coding example.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了如何设置开发环境。接着，我们讨论了最广泛使用的 3D 数据表示方法。然后，我们通过学习 3D 数据文件格式，如 PLY 格式和
    OBJ 格式，来探讨了 3D 数据表示的具体实例。之后，我们了解了 3D 坐标系统和相机模型的基本概念。在本章的最后部分，我们通过实际编程示例学习了如何构建相机模型并在不同坐标系统之间进行转换。
- en: In the next chapter, we will talk about more important 3D deep learning concepts,
    such as rendering to convert 3D models to 2D images, heterogeneous mini-batching,
    and several ways to represent rotations.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论更多重要的 3D 深度学习概念，如渲染将 3D 模型转换为 2D 图像、异构小批量处理以及几种表示旋转的方法。
