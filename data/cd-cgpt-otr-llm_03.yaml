- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: 'Code Refactoring, Debugging, and Optimization: A Practical Guide'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码重构、调试和优化：实践指南
- en: This chapter focuses on employing LLMs for code refactoring, debugging, and
    optimization. This also involves interpreting error messages and explaining unfamiliar
    code blocks and what errors might arise from them. LLMs can assist with refactoring
    code for maintainability and readability. LLMs can be trained to recognize recurring
    issues in code. By the end of the chapter, you will be able to use ChatGPT for
    pair programming to help them understand code, as well as what causes bugs and
    how to fix them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点讲解如何使用 LLM 进行代码重构、调试和优化。这还包括解读错误信息，解释不熟悉的代码块及其可能产生的错误。LLM 可以帮助重构代码，提高可维护性和可读性。LLM
    还可以训练以识别代码中反复出现的问题。到本章结束时，你将能够使用 ChatGPT 进行配对编程，帮助你理解代码，以及导致 bug 的原因和如何修复它们。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及以下主题：
- en: Dealing with error codes – debugging
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理错误代码 - 调试
- en: Refactoring code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码重构
- en: Explaining code with ChatGPT
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用 ChatGPT 解释代码
- en: Testing code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试代码
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you’ll need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所需的工具：
- en: Access to an LLM/chatbot such as GPT-4 or Gemini, both of which require logins.
    For GPT-4, you’d need an OpenAI account, and for Gemini, you’d need a Google account.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要访问 LLM/chatbot，如 GPT-4 或 Gemini，这两者都需要登录。GPT-4 需要 OpenAI 账户，Gemini 需要 Google
    账户。
- en: A Python IDE such as Spyder, IDLE, PyCharm, Eclipse, or Visual Studio.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Python IDE，如 Spyder、IDLE、PyCharm、Eclipse 或 Visual Studio。
- en: An online interpreter will not be good enough here.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线解释器在这里不够用。
- en: An HTML interpreter, which can be found at [https://htmledit.squarefree.com/](https://htmledit.squarefree.com/)
    , [https://onecompiler.com/html](https://onecompiler.com/html) , or [https://www.w3schools.com/tryit/](https://www.w3schools.com/tryit/)
    , or a website editor such as Wix, GoDaddy, or One.com.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 HTML 解释器，可以在 [https://htmledit.squarefree.com/](https://htmledit.squarefree.com/)，[https://onecompiler.com/html](https://onecompiler.com/html)
    或 [https://www.w3schools.com/tryit/](https://www.w3schools.com/tryit/) 找到，或者一个网站编辑器，如
    Wix、GoDaddy 或 One.com。
- en: 'Get the code in this book here: [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main/Chapter3](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main/Chapter3)
    .'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取本书中的代码： [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main/Chapter3](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-other-LLMs/tree/main/Chapter3)。
- en: Now, we’ll get into the meat of the chapter by looking at dealing with error
    codes that you’ll get when you try to run almost all of the scripts or bits of
    code you write or you get from an LLM. If it’s perfect the first time around,
    either it’s extremely simple or count yourself extremely lucky!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过处理错误代码来深入探讨本章的核心内容。几乎所有你编写的或从 LLM 获取的脚本或代码片段在运行时都会出现错误。如果第一次就完美无缺，要么它非常简单，要么就是你非常幸运！
- en: Dealing with error codes – debugging
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误代码 - 调试
- en: As I said, you’ll seldom get a perfect bit of code. [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)
    had some, but those examples were really simple, just to get us started with the
    “Hello world” level code and get some rubber on the road.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，你很少能得到一段完美的代码。[*第二章*](B21009_02.xhtml#_idTextAnchor051)有一些，但那些例子其实非常简单，仅仅是为了让我们从“Hello
    World”级别的代码开始，并启动代码的基础。
- en: So, you’ll have to either figure them out yourself by understanding all that
    is there, go to some forum, such as Stack Overflow, ask a skilled friend/colleague,
    or ask an AI such as Gemini or GPT-4 families.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你得自己弄明白，理解其中所有内容，去一些论坛，如 Stack Overflow，向熟练的朋友/同事求助，或者问问 AI，如 Gemini 或 GPT-4
    系列。
- en: Let’s debug some code from [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051) .
    *Prompts 1-3* were fine, but *Prompt 4* needed work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调试一下来自[*第二章*](B21009_02.xhtml#_idTextAnchor051)的代码。*提示 1-3* 没问题，但 *提示 4*
    需要改进。
- en: Prompt 4 debugging
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示 4 调试
- en: '*Prompt 4* : **A script where to ask you to load bench then it will help you
    browse for the image finally** **displayed image.**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*提示 4* : **一个脚本，要求你加载 bench，然后帮助你浏览并最终显示图像。**'
- en: Again, I said **bench** , so that didn’t make sense, but Gemini correctly interpreted
    what I wanted.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，我说了**bench**，所以那并不合适，但 Gemini 正确地理解了我的意思。
- en: However, the code is not fully functional.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，代码并不完全可用。
- en: Important note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Don’t run this exact code as it doesn’t work; keep reading.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 别运行这段代码，它不起作用，继续阅读。
- en: 'Please forgive me, I’m trying to show that it’s not exact straight away:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请原谅我，我只是想展示它并非立即完美：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In *Figure 3* *.1* , we’ll see what happens when you request code libraries
    in a free, online, standard Python interpreter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 3* *.1*中，我们将看到在免费的在线标准Python解释器中请求代码库时发生了什么。
- en: '![Figure 3.1: Requesting a code library in a free Python interpreter (unsuccessful)](img/B21009_03_1.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1：在免费的Python解释器中请求代码库（失败）](img/B21009_03_1.jpg)'
- en: 'Figure 3.1: Requesting a code library in a free Python interpreter (unsuccessful)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：在免费的Python解释器中请求代码库（失败）
- en: Does it work in Colab? See the result in *Figure 3* *.2* .
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它在Colab中能工作吗？请参见*图 3* *.2*中的结果。
- en: '![Figure 3.2: Trying to load a code library in Colab (unsuccessful)](img/B21009_03_2.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2：尝试在Colab中加载代码库（失败）](img/B21009_03_2.jpg)'
- en: 'Figure 3.2: Trying to load a code library in Colab (unsuccessful)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：尝试在Colab中加载代码库（失败）
- en: It did give us extra information about the error than the regular interpreter,
    though.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，它确实提供了比常规解释器更多的错误信息。
- en: Ask Bard/Gemini how to install the library.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 向Bard/Gemini询问如何安装库。
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: As of early February 2024, [Bard.Google.com](https://Bard.Google.com) redirects
    to [Gemini.google.com](https://Gemini.google.com) .
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2024年2月初，[Bard.Google.com](https://Bard.Google.com)会重定向到[Gemini.google.com](https://Gemini.google.com)。
- en: Gemini tells us that we need an environment that has a GUI or a physical display
    connected to it, as it runs in the cloud.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini告诉我们，我们需要一个具有图形界面或已连接物理显示器的环境，因为它在云端运行。
- en: Gemini suggests Kaggle Notebooks but that is also a cloud-based environment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini建议使用Kaggle笔记本，但那也是一个基于云的环境。
- en: So, we’ll have to run it on our local machine (home or work PC/Linux/Max), which
    requires installing an IDE if you’ve not done that before.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们必须在本地机器（家庭或工作PC/Linux/Max）上运行它，如果之前没有安装IDE，可能需要先安装。
- en: I run Anaconda, which has Spyder and Jupyter Notebook (and Pylab), so, let’s
    look at this code in there. I’ll also have to make sure I’ve installed **tkinter**
    .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Anaconda，它包括Spyder和Jupyter Notebook（以及Pylab），让我们在其中查看这个代码。我还需要确保已经安装了**tkinter**。
- en: 'Here are some links to install code libraries in Anaconda: [https://docs.anaconda.com/free/working-with-conda/packages/install-packages/](https://docs.anaconda.com/free/working-with-conda/packages/install-packages/)
    or [https://francescolelli.info/python/install-anaconda-and-import-libraries-into-the-ide](https://francescolelli.info/python/install-anaconda-and-import-libraries-into-the-ide)
    .'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在Anaconda中安装代码库的链接：[https://docs.anaconda.com/free/working-with-conda/packages/install-packages/](https://docs.anaconda.com/free/working-with-conda/packages/install-packages/)
    或 [https://francescolelli.info/python/install-anaconda-and-import-libraries-into-the-ide](https://francescolelli.info/python/install-anaconda-and-import-libraries-into-the-ide)。
- en: You can use **conda** or **pip** . I use both.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**conda**或**pip**。我同时使用两者。
- en: 'Working in Spyder now, part of Anaconda, running it line-by-line, we have the
    following line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在Spyder中工作，这是Anaconda的一部分，逐行运行，我们得到以下代码：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding line gives me the following error message:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行给出了以下错误信息：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, I go to Gemini and ask for help with that, giving the code to that line
    and the error message.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我去Gemini请求帮助，给出代码行和错误信息。
- en: Gemini tells me I need to import the **Button** module from **tkinter** .
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini告诉我，我需要从**tkinter**导入**Button**模块。
- en: 'Change the first line to the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将第一行更改为以下内容：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, that part works.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，那部分功能正常。
- en: So, Gemini gave me pretty good code but missed importing **Button** from **tkinter**
    . However, it managed to correct itself once it got feedback from the error.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Gemini给了我相当不错的代码，但遗漏了从**tkinter**导入**Button**。不过，它在收到错误反馈后成功自我修正。
- en: As the code is executed, these tiny little windows come up, as seen in *Figure
    3* *.3* .
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码执行时，这些小窗口会弹出，如*图 3* *.3*所示。
- en: '![Figure 3.3: Boxes/windows asking for which image the user wants to load –
    these are outputs from the code given by Gemini, in response to Prompt 4](img/B21009_03_3.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3：询问用户要加载哪个图像的框/窗口——这些是Gemini根据提示4给出的代码输出](img/B21009_03_3.jpg)'
- en: 'Figure 3.3: Boxes/windows asking for which image the user wants to load – these
    are outputs from the code given by Gemini, in response to Prompt 4'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：询问用户要加载哪个图像的框/窗口——这些是Gemini根据提示4给出的代码输出。
- en: When I browse and attempt to load the image with the first little **Select Image**
    window, the output is just the file path to the image. Nothing new is displayed
    on either window.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我浏览并尝试使用第一个小**选择图像**窗口加载图像时，输出仅为图像的文件路径。两个窗口都没有显示任何新的内容。
- en: The second time I run the code there is only one window and it just displays
    the file path again. Okay, at times like this, we need to go back to Gemini/the
    LLM to ask. Gemini says I need to import the **ImageTk** module, too.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次运行代码时只有一个窗口，它只显示文件路径。好的，在这种时候，我们需要回到Gemini/LLM询问。Gemini说我也需要导入**ImageTk**模块。
- en: 'Then, in the **select_image** function, change the code to the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在**select_image**函数中，更改代码如下：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That is new from below **if filename:** . This is Python, so make sure to get
    the indents right!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新的内容从下面的**if filename:**开始。这是Python，所以确保缩进正确！
- en: 'I need to install Pillow, according to Gemini:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Gemini的说法，我需要安装Pillow：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'However, it’s already installed. I need to restart the kernel. I need to use
    the following statement:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它已经安装好了。我需要重新启动内核。我需要使用以下语句：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: But **Image** is unused. So, forget importing **Image** . The code still doesn’t
    load the image.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但是**Image**没有被使用。所以，忘记导入**Image**。代码仍然不能加载图片。
- en: Gemini / the LLM gives loads of advice to try to troubleshoot this issue.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini/LLM给了大量建议来尝试解决这个问题。
- en: 'I eventually found a basic image loading code, with a hardcoded file path and
    name, on Stack Overflow and asked Gemini to add a button to browse for an image.
    This worked ( *Stackoverflow_image_loading* ):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我最终在Stack Overflow找到了一个基本的图像加载代码，带有硬编码的文件路径和名称，并请求Gemini添加一个浏览图像的按钮。这起作用了（*Stackoverflow_image_loading*）：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The final code from Stack Overflow and Gemini is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Stack Overflow和Gemini的最终代码如下：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is Gemini’s explanation for what it did to the Stack Overflow code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Gemini对Stack Overflow代码所做的解释：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note on coding with Gemini
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在Gemini编码时
- en: It helps to tell the LLM the version of Python you’re using.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉LLM您正在使用的Python版本是有帮助的。
- en: Now, let’s look at the code from *Prompt 5* in [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)
    .
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看[*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)中*Prompt 5*的代码。
- en: Prompt 5 debugging – HTML
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prompt 5调试 - HTML
- en: Important note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Don’t run this exact code, right here, it doesn’t work, keep reading.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 不要运行这段确切的代码，它不起作用，继续阅读。
- en: 'The original code from Gemini (formerly Bard) is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Gemini（之前是Bard）的原始代码如下：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That’s a heavy reliance on **if** , **else** , and **elif** statements!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这对**if**、**else**和**elif**语句有很大依赖！
- en: 'This didn’t work and gave us the outcome seen in *Figure 3* *.4* : the interface
    for the calculator, reproduced from [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)
    .'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有起作用，并给出了我们在*Figure 3* *.4*中看到的结果：计算器的界面，从[*Chapter 2*](B21009_02.xhtml#_idTextAnchor051)复制。
- en: '![Figure 3.4: Interface for a calculator generated with Gemini (this is also
    Figure 2.9)](img/B21009_03_4.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4：由Gemini生成的计算器界面（这也是图2.9）](img/B21009_03_4.jpg)'
- en: 'Figure 3.4: Interface for a calculator generated with Gemini (this is also
    Figure 2.9)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：由Gemini生成的计算器界面（这也是图2.9）
- en: '*Figure 3* *.5* shows the output of the calculator from *Prompt 5* .'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 3* *.5*显示了来自*Prompt 5*的计算器输出。'
- en: '![Figure 3.5: Output from the calculator generated by the Prompt 5 HTML code](img/B21009_03_5.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5：由Prompt 5 HTML代码生成的计算器输出](img/B21009_03_5.jpg)'
- en: 'Figure 3.5: Output from the calculator generated by the Prompt 5 HTML code'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：由Prompt 5 HTML代码生成的计算器输出
- en: 'I asked Gemini and it gave me new code with this new prompt: **Please correct
    this html code to convert temperatures between C and F** . This doesn’t work –
    it crashes when I try to get the calculation and it said:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我问了Gemini，它给了我一个新的代码和这个新的提示：**请更正这个HTML代码以在C和F之间转换温度**。这不起作用——当我尝试获取计算时它会崩溃并且说：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, Gemini gave me this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Gemini给了我这个：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is the final code and works in HTML environments.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的代码，在HTML环境中运行正常。
- en: This code gave me a rounding error though; watch out for those and test for
    them, as you can see in *Figure 3* *.6* .
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这段代码给我一个舍入误差；要注意这些并测试它们，正如您可以在*Figure 3* *.6*中看到的那样。
- en: '![Figure 3.6: The simple GUI calculator works okay but there’s a precision
    limit at 16 decimal places](img/B21009_03_6.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图3.6：简单的GUI计算器运行正常，但精度限制为16位小数](img/B21009_03_6.jpg)'
- en: 'Figure 3.6: The simple GUI calculator works okay but there’s a precision limit
    at 16 decimal places'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：简单的GUI计算器运行正常，但精度限制为16位小数
- en: Prompt 5 debugging – Python/Flask
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prompt 5调试 - Python/Flask
- en: Important note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Don’t run this exact code as it doesn’t work; keep reading. Please forgive me,
    I’m trying to show that it’s not exact straight away.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不要运行这段确切的代码，因为它不起作用；请原谅我，我试图表明它不是立即精确的。
- en: 'The original code from Gemini (formerly Bard) is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Gemini（之前是Bard）的原始代码如下：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I put this into Spyder and it gave me error messages:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我把这个放入 Spyder 中，它给了我错误信息：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Gemini said it could be a syntax error, a file path for the HTML. I should have
    saved the HTML section of the code Gemini gave me, in a file called **calc.html**
    , so this Flask app could load it. That wasn’t obvious from the Gemini responses.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini 说可能是语法错误，或者是 HTML 的文件路径问题。我应该将 Gemini 给我的 HTML 代码部分保存为名为 **calc.html**
    的文件，这样 Flask 应用才能加载它。但这在 Gemini 的回答中并不明显。
- en: I put the HTML into a file in the same folder, a file called **calc.html** ,
    and ran the Flask code again in Spyder. That didn’t work.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我将 HTML 代码放入同一文件夹中的一个文件，名为 **calc.html**，然后再次在 Spyder 中运行 Flask 代码。结果没有成功。
- en: 'I gave the output, including the errors and the full traceback. I got the full
    traceback by using **%tb** . Gemini had many suggestions: Spyder’s watchdog feature,
    a template reloading issue, IDE-specific conflicts, code-related errors, or testing
    outside Spyder.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我提供了输出，包括错误信息和完整的追踪信息。我通过使用 **%tb** 获得了完整的追踪信息。Gemini 给出了许多建议：Spyder 的监控功能、模板重载问题、IDE
    特定的冲突、代码相关的错误，或者在 Spyder 外进行测试。
- en: 'I used a very similar prompt for Claude 3 Sonnet: **Please get this code working,
    it should be a Flask implementation of code for a web page that will display a
    graphical user interface. A calculator that actually functions if you click**
    **the buttons.**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我为 Claude 3 Sonnet 使用了一个非常相似的提示：**请让这段代码正常运行，它应该是一个 Flask 实现的网页代码，能够显示一个图形用户界面。一个真正能用的计算器，只要你点击**
    **按钮**。
- en: 'Claude 3 Sonnet gave me this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Claude 3 Sonnet 给了我这个：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To run this code, follow these steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此代码，请按照以下步骤操作：
- en: Save the Flask code as **app.py** in a simple, short file path.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Flask 代码保存为 **app.py**，并保存在一个简单、短小的文件路径中。
- en: Create a **templates** folder and save the HTML code as **index.html** inside
    it.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 **templates** 文件夹，并将 HTML 代码保存为 **index.html** 文件。
- en: Run the Flask app with **python app.py** .
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **python app.py** 运行 Flask 应用。
- en: Open your browser and navigate to **http://localhost:5000** .
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 **http://localhost:5000**。
- en: You should now see a functional calculator GUI on the web page. When you click
    the buttons, the corresponding values will be appended to the display input field.
    Clicking the **=** button will evaluate the expression and display the result.
    The **C** button clears the display.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能在网页上看到一个功能正常的计算器 GUI。当你点击按钮时，相应的值会添加到显示输入框中。点击 **=** 按钮会计算表达式并显示结果。**C**
    按钮会清除显示。
- en: Important note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that this implementation uses the **eval** function in JavaScript to evaluate
    the expression, which can be a security risk if you’re accepting user input directly.
    In a production environment, you should use a safer method or a dedicated library
    for expression evaluation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此实现使用了 JavaScript 中的 **eval** 函数来计算表达式，如果你直接接受用户输入，这可能会带来安全风险。在生产环境中，你应该使用更安全的方法或专门的库来进行表达式计算。
- en: This code ran, then kept crashing until I told Claude 3 Sonnet my file path.
    Claude suggested that the file path was too long and complicated. So, I moved
    it to a much simpler path, the **C:/Users/username/code/** folder, but I had to
    change the slashes to forward slashes, the same as here, not backslashes as in
    Windows Explorer (the folders program).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码运行了，但在我告诉 Claude 3 Sonnet 我的文件路径之前，它一直崩溃。Claude 提示文件路径太长且复杂。因此，我将文件移到了一个更简单的路径
    **C:/Users/username/code/** 文件夹中，但我必须将斜杠更改为正斜杠，像这里一样，而不是 Windows 资源管理器中使用的反斜杠（文件夹程序）。
- en: It stopped crashing and, with a little bit more checking file paths and that
    I was in the correct directory as well as asking Claude again, it launched in
    the browser at **http://127.0.0.1:5000/** .
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 它停止崩溃了，在检查文件路径和确保我处在正确的目录后，并再次询问 Claude，它成功地在浏览器中启动了，地址是 **http://127.0.0.1:5000/**
    。
- en: So, Claude 3 got the job done.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Claude 3 完成了任务。
- en: LLMs, such as Claude 3 Sonnet, can be used for more than debugging code; they
    can also refactor code, so, let’s look into that next.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: LLMs（如 Claude 3 Sonnet）不仅可以用来调试代码，它们还可以重构代码，接下来我们就来看看这个。
- en: Running that Flask and HTML code gives the good-looking, simple GUI calculator
    seen in *Figure 3* *.7* . It works nicely the first time. Claude is a better coder
    than Gemini 1 Ultra, which is a better coder than ChatGPT (GPT 3.5). Also, these
    are all free tools! You don’t currently (October 2024) have to pay for any of
    them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个 Flask 和 HTML 代码会显示一个好看的、简单的 GUI 计算器，如 *图 3* *.7* 所示。第一次使用时效果很好。Claude 的编码能力比
    Gemini 1 Ultra 更强，Gemini 1 Ultra 又比 ChatGPT（GPT 3.5）更强。而且，这些工具都是免费的！目前（2024年10月），你不需要为它们付费。
- en: '![Figure 3.7: The GUI Flask and HTML calculator app running in a Chrome browser,
    coded entirely by Claude 3 Sonnet](img/B21009_03_7.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7：在Chrome浏览器中运行的GUI Flask和HTML计算器应用程序，完全由Claude 3 Sonnet编写的代码](img/B21009_03_7.jpg)'
- en: 'Figure 3.7: The GUI Flask and HTML calculator app running in a Chrome browser,
    coded entirely by Claude 3 Sonnet'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：在Chrome浏览器中运行的GUI Flask和HTML计算器应用程序，完全由Claude 3 Sonnet编写的代码
- en: Don’t forget to use *Ctrl* + *C* or *command* + *c* to quit that application
    when you’ve finished.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了在完成后使用*Ctrl* + *C*或*command* + *C*退出该应用程序。
- en: While writing this chapter, Devin, the software engineer AI agent, has been
    released by Anthropic. You can request access but it’s not open like the other
    chatbots/AI coders at this point ( October 2024).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本章时，Devin，这个软件工程师AI代理已经由Anthropic发布。你可以申请访问权限，但目前它不像其他聊天机器人/AI编程工具那样开放（2024年10月）。
- en: Why don’t you have a go at asking a chatbot LLM to give you some code and see
    how well it works and how well the LLM debugs?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不试试让聊天机器人大型语言模型（LLM）给你一些代码，看看它能多好地工作，以及LLM如何调试？
- en: Where’s the code?
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码在哪里？
- en: 'Most of the [*Chapter 3*](B21009_03.xhtml#_idTextAnchor073) code is shared
    with [*Chapter 2*](B21009_02.xhtml#_idTextAnchor051) , so is in the same part
    of the GitHub repository: [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter2](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter2)
    , but there is a [*Chapter 3*](B21009_03.xhtml#_idTextAnchor073) section for the
    refactored code: [https://github.com/PacktPublishing/Coding-with-ChatGPT-and-
    O ther-LLMs/tree/main/Chapter3](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter3)
    .'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分的[*第3章*](B21009_03.xhtml#_idTextAnchor073)代码与[*第2章*](B21009_02.xhtml#_idTextAnchor051)共享，因此也位于GitHub仓库的相同部分：[https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter2](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter2)，但是有一个[*第3章*](B21009_03.xhtml#_idTextAnchor073)部分是重构后的代码：[https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter3](https://github.com/PacktPublishing/Coding-with-ChatGPT-and-Other-LLMs/tree/main/Chapter3)。
- en: Refactoring code
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构代码
- en: What does it mean to refactor code?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重构代码是什么意思？
- en: '**Code refactoring** is changing the factoring without changing the functionality.
    This includes changing the code’s design, structure, or exact implementation.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码重构**是改变代码结构，而不改变其功能。这包括更改代码的设计、结构或具体实现方式。'
- en: Changing the factoring means changing the code, making it cleaner, easier to
    maintain, perform better, and not duplicate code. The trigger might be *code smells*
    . **Code smells** are redundant code, large functions, or classes, having to change
    code in a multitude of locations when you need to change one thing.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 改变代码结构意味着更改代码，使其更简洁、更易维护、更高效，并避免重复代码。触发因素可能是*代码味道*。**代码味道**是指冗余代码、庞大的函数或类、在多个位置修改代码时需要更改一个地方的情况。
- en: Refactoring is done by making many small changes to avoid creating new bugs
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 重构是通过进行许多小的修改来避免产生新错误。
- en: '[ *Wiki_refactoring, ChatGPT* ]. However, refactoring can involve major changes
    too.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Wiki_refactoring, ChatGPT*]。然而，重构也可能涉及重大变更。'
- en: Let’s get ChatGPT to make some purposefully bad code to compress time series
    data with discrete cosine transforms, DCT. **DCT** is the sort of compression
    used in the best and most widely used data compression algorithms. It is lossy
    compression, so the signal might be partially lost, not just the noise.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们让ChatGPT写一些故意写得很差的代码，用来压缩时间序列数据，使用离散余弦变换（DCT）。**DCT**是最优且最广泛使用的数据压缩算法中使用的一种压缩方式。它是有损压缩，因此信号可能会部分丢失，而不仅仅是噪声。
- en: 'However, we should be able to get a variable level of compression: more compression
    means lower fidelity and lower compression means we are keeping more of the signal
    and noise.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们应该能够获得不同级别的压缩：更高的压缩意味着更低的保真度，而更低的压缩意味着我们保留了更多的信号和噪声。
- en: 'This is the prompt used for bad code: **Can you please give me some python
    code that is badly written, some code for compressing timeseries data using discrete
    cosine transforms. This code should be an example of hard-to-maintain code, repeats,
    bad code smells, large classes or other things that are** **not idea.**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于生成糟糕代码的提示：**能给我一些写得很差的Python代码吗？一些用离散余弦变换压缩时间序列数据的代码。这些代码应该是难以维护的代码示例，包含重复、坏代码味、庞大的类或其他**
    **不理想的东西。**
- en: ChatGPT didn’t seem able to do this.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT似乎无法做到这一点。
- en: Maybe this task is too hard. We can try Gemini next. Gemini had no problem producing
    this.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这个任务太难了。我们可以尝试一下Gemini。Gemini在生成这个代码时没有任何问题。
- en: 'Here is an example of bad code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个糟糕代码的示例：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here are the problems with this code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这段代码的问题：
- en: A large class ( **DCTData** ) is cumbersome and unnecessary when all its functionality
    can be achieved with functions.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个庞大的类（**DCTData**）显得繁琐且不必要，因为它的所有功能都可以通过函数来实现。
- en: The data split is hardcoded, which is poor practice as this introduces bias.
    This should be (pseudo-) random ( **compress_timeseries** ).
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据拆分是硬编码的，这是不好的做法，因为它引入了偏差。它应该是（伪）随机的（**compress_timeseries**）。
- en: '**Repeated logic** : The **compute_dtc** function is called within **get_coefficients,**
    leading to redundant calculations. This violates the **don’t repeat yourself**
    ( **DRY** ) principle.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复的逻辑**：**compute_dct**函数在**get_coefficients**中被调用，导致冗余计算。这违反了**不要重复自己**（**DRY**）原则。'
- en: '**Error-prone usage** : The example usage assumes data length is divisible
    by 2, which can lead to errors if not true.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容易出错的用法**：示例用法假设数据长度可以被2整除，如果不成立可能会导致错误。'
- en: '**Unnecessary imports** : Importing **numpy** inside a function instead of
    at the beginning reduces readability and maintainability.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不必要的导入**：在函数内部导入**numpy**而不是在脚本开始时导入，降低了可读性和可维护性。'
- en: 'This is how you can improve the code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式改进代码：
- en: Use functions instead of a large class
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数代替一个庞大的类
- en: Combine the logic of **compute_dct** and **get_coefficients** into a single
    function
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**compute_dct**和**get_coefficients**的逻辑合并为一个函数
- en: Create a function to handle data splitting and coefficient truncation for reusability
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个函数来处理数据拆分和系数截断，以便重用。
- en: Improve error handling in the usage example
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进示例用法中的错误处理
- en: Import **numpy** at the beginning of the script
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在脚本开始时导入**numpy**。
- en: '[ *Gemini* ]'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[ *Gemini* ]'
- en: This code is not good, so, let’s not run it. Thanks to Gemini for the example
    of bad code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码不好，所以我们不要运行它。感谢 Gemini 提供了这段坏代码示例。
- en: Refactoring code with Claude 3
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Claude 3 进行代码重构
- en: Now, let’s get Claude 3 Sonnet to refactor this data compression code, as is
    probably the best available coder AI for now ( March 2024).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Claude 3 Sonnet 来重构这段数据压缩代码，因为它可能是目前最好的编码 AI（2024年3月）。
- en: 'Here is the prompt I used to refactor the DCT code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我用来重构 DCT 代码的提示：
- en: '**Please tell me some coding/computer programming best practices. Please use
    those principles to examine the following code for time series data compression
    with DCT and refactor this code to follow those best practices:** *<insert code*
    *from above>* .'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**请告诉我一些编码/计算机编程的最佳实践。请使用这些原则检查以下使用 DCT 进行时间序列数据压缩的代码，并重构这段代码以遵循这些最佳实践：** *<insert
    code* *from above>* 。'
- en: 'Here is the response from Claude 3 Sonnet:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Claude 3 Sonnet 的响应：
- en: 'Sure, here are some coding/computer programming best practices:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里有一些编码/计算机编程的最佳实践：
- en: 'DRY (Don’t Repeat Yourself): Avoid duplicating code. Instead, extract common
    logic into reusable functions or modules.'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DRY（不要重复自己）：避免代码重复。应该将公共逻辑提取到可重用的函数或模块中。
- en: 'KISS (Keep It Simple, Stupid): Simplicity should be a key goal in design. Avoid
    unnecessary complexity.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KISS（保持简单，傻瓜）：简洁性应是设计的关键目标。避免不必要的复杂性。
- en: 'Separation of Concerns: Divide code into distinct sections, each addressing
    a separate concern or responsibility.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 职责分离：将代码分为不同的部分，每一部分都解决一个独立的问题或责任。
- en: 'Modularity: Break code into smaller, reusable modules that can be combined
    and reused.'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块化：将代码拆分为更小的、可重用的模块，这些模块可以组合和重用。
- en: 'Readability: Write clean, readable code with meaningful variable and function
    names, proper formatting, and comments where necessary.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可读性：编写简洁、易读的代码，使用有意义的变量和函数名称，适当的格式化，并在必要时添加注释。
- en: 'Encapsulation: Hide implementation details and expose a clean public interface.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 封装：隐藏实现细节，暴露清晰的公共接口。
- en: 'Single Responsibility Principle: Each class, function, or module should have
    a single, well-defined responsibility.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单一职责原则：每个类、函数或模块应有一个单一且明确的职责。
- en: 'Dependency Inversion Principle: High-level modules should not depend on low-level
    modules. Both should depend on abstractions.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖倒置原则：高层模块不应依赖低层模块，两者都应依赖于抽象。
- en: 'YAGNI (You Ain’t Gonna Need It): Avoid implementing features or functionality
    that might be needed in the future but are not currently required.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAGNI（你现在不需要它）：避免实现那些未来可能需要但当前不需要的功能或特性。
- en: 'Testing: Write unit tests to ensure code correctness and maintainability.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试：编写单元测试以确保代码的正确性和可维护性。
- en: 'Now, let’s refactor the provided code to follow these best practices:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重构提供的代码，遵循这些最佳实践：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Okay, that code looks a lot simpler. Does it work?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这段代码看起来简单多了。它能工作吗？
- en: 'There was an error message:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 出现了一个错误信息：
- en: '[PRE18]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Claude produced this corrected code and said:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Claude 提供了这个修正后的代码，并说：
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'However, this led to another error:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这导致了另一个错误：
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Reminder
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒
- en: It’s good to tell the LLM which version of Python (or whichever language) you
    are running.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉 LLM 你正在运行的 Python 版本（或其他语言版本）是一个好习惯。
- en: Claude suggested that I had a faulty **numpy** installation. I needed to install
    **scipy** with the PowerShell or Terminal **pip install** **scipy** command.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Claude 建议我安装的 **numpy** 有问题。我需要通过 PowerShell 或 Terminal 使用 **pip install** **scipy**
    命令来安装 **scipy**。
- en: 'This is a (non-final) working version of the **dct** compression code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个（非最终版）可工作的 **dct** 压缩代码：
- en: '[PRE21]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Examining this code, it takes in the example data, **[1, 2, 3, 4, 5, 6, 7, 8]**
    , and compresses it to **[ 5. -2.2304425 0. -0.15851267 13. -2.2304425 0. -**
    **0.15851267]** .
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 检查这段代码，它处理示例数据，**[1, 2, 3, 4, 5, 6, 7, 8]**，并将其压缩为 **[ 5. -2.2304425 0. -0.15851267
    13. -2.2304425 0. -0.15851267]**。
- en: You can get the chatbot to describe the output of the program.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以让聊天机器人描述程序的输出。
- en: The **compressed_data = compress_timeseries(data, 4)** line instructs to keep
    only 4 DCT coefficients. The first coefficient ( **5.0** ) represents the mean
    or DC component of the signal, while the remaining coefficients represent the
    various frequency components in decreasing order of importance.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**compressed_data = compress_timeseries(data, 4)** 这一行指示只保留 4 个 DCT 系数。第一个系数（**5.0**）代表信号的平均值或直流分量，而其余的系数则表示按重要性递减的各种频率分量。'
- en: If you want to compress more, use fewer coefficients. If you want higher fidelity
    (a more faithful reproduction of the signal) ask for more than 4 DCT coefficients.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更高的压缩率，使用更少的系数。如果你想要更高的保真度（更忠实地重现信号），可以要求使用超过 4 个 DCT 系数。
- en: 'If you’re unfamiliar or would like a refresher, check out DCT compression here:
    [https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/#data-compression](https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/#data-compression)
    [ *Mastny* ].'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉或需要复习，可以查看 DCT 压缩的介绍：[https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/#data-compression](https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/#data-compression)
    [*Mastny*]。
- en: I tested this code with some other data. With the same number repeated, **[2,2,2,2,2,2,2,2]**
    , the output was **[4. 0. 0. 0. 4. 0. 0. 0.]** , which means the DC is **4** .
    There are no frequency components, so there are lots of zeros. By keeping only
    the first two non-zero coefficients ( **4.0** and **4.0** ), you can reconstruct
    the original signal without any loss of information. You can choose to either
    remove the zeros entirely or compress with something such as run-length encoding,
    which makes repeats of the same number very compressed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我用其他数据测试了这个代码。当相同的数字重复时，**[2,2,2,2,2,2,2,2]** 的输出为 **[4. 0. 0. 0. 4. 0. 0. 0.]**，这意味着
    DC 为 **4**。没有频率分量，因此有很多零。通过只保留前两个非零系数（**4.0** 和 **4.0**），你可以在没有任何信息丢失的情况下重建原始信号。你可以选择完全去除这些零，或者使用类似于游程编码的方式进行压缩，这样会将重复的数字非常紧凑地压缩。
- en: However, DCT is particularly effective at compressing signals that have a lot
    of redundancy or repetition, such as constant or slowly varying signals [ *Claude*
    *3* , *ChatGPT* ].
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，DCT 在压缩具有大量冗余或重复的信号时特别有效，例如恒定或缓慢变化的信号 [*Claude* *3* , *ChatGPT*]。
- en: We’ll get into how to use LLMs to help you test your code in the section of
    this chapter called *Testing code* . There were other tests, too, which all produced
    results.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的 *测试代码* 部分讨论如何使用 LLMs 来帮助你测试代码。还有其他测试，它们都产生了结果。
- en: 'It turns out that Claude 3 made a bug, and I questioned Gemini 1 Pro about
    this and got a code modification from Gemini 1:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现 Claude 3 有个 bug，我向 Gemini 1 Pro 提出了这个问题，并从 Gemini 1 那里得到了代码修改。
- en: '[PRE22]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The final code with more varied, complex data is as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的代码，处理了更多变化和复杂数据，如下所示：
- en: '[PRE23]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This produces four numbers in one array and two sub-arrays:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个包含四个数字的数组和两个子数组：
- en: '[PRE24]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: These are the 2 coefficients, as **num_coefficients = 2** , and for 2 halves,
    thus 4 numbers. Setting the number of coefficients to **3** produces 2 sub-arrays
    of 3 numbers each.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 2 个系数，**num_coefficients = 2**，因此是 4 个数字。将系数数量设置为 **3** 会生成 2 个包含 3 个数字的子数组。
- en: You should now be able to get some help from the LLMs with refactoring your
    code nicely, but you might not be able to understand someone else’s code or even
    whether it works well.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能从 LLMs 中得到一些帮助，使你的代码更好地重构，但你可能无法理解别人的代码，甚至不清楚它是否有效。
- en: So, the next section is on documenting code.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，接下来的部分是关于文档化代码。
- en: Documenting code
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档化代码
- en: Often, you’ll come across code that someone else (including an earlier version
    of you) has written and it’ll not make sense to you. You might have to go through
    each line and function and class, running it in your mind and testing each bit
    of code in an IDE.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，你会遇到别人（包括你之前的版本）写的代码，而它对你来说没有意义。你可能需要逐行检查代码，检查每个函数和类，在脑中运行并在 IDE 中测试每一部分代码。
- en: 'Fortunately, there is now another option: LLMs or chatbots. You can get one
    to be your personal code translator to clarify what is going on.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现在有了另一种选择：大型语言模型（LLM）或聊天机器人。你可以让它成为你个人的代码翻译器，帮助澄清发生了什么。
- en: You can put some code in the chat window and ask the bot to explain what it
    does. You will generally also get detailed explanations when the chatbots give
    you code.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将一些代码放入聊天窗口，询问机器人它的作用。通常，当聊天机器人给你代码时，你也会得到详细的解释。
- en: Let’s get ChatGPT and to explain some code
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们让 ChatGPT 来解释一些代码
- en: Statistical tests are useful for statisticians and data scientists, so, let’s
    do some. Jason Brownlee can help here [ *Brownlee_17Stats* ]. What is a Shapiro-Wilk
    test?
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 统计测试对统计学家和数据科学家很有用，所以，让我们做一些。Jason Brownlee 可以在这里提供帮助 [ *Brownlee_17Stats* ]。什么是
    Shapiro-Wilk 测试？
- en: 'Here is some code in Python for this, from [https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/](https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/)
    :'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自 [https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/](https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/)
    的 Python 代码：
- en: '[PRE25]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What does ChatGPT say about this?
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 对此说了什么？
- en: 'Here is the prompt:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是提示：
- en: '[PRE26]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here is ChatGPT’s response:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 ChatGPT 的回答：
- en: (I put it into a markdown interpreter to get it into a nice style, without the
    **around the headings** [ *Dillinger* ].)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: （我将其放入一个 Markdown 解析器中，以便它能呈现出一个不错的样式，去掉了**标题周围的** [ *Dillinger* ]。）
- en: 'Certainly! The provided code is an example of how to use the Shapiro-Wilk Normality
    Test in Python, specifically with the **scipy.stats** library. This statistical
    test is used to determine whether a given sample follows a Gaussian (normal) distribution.
    Here’s a breakdown of the code:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当然！提供的代码是如何在 Python 中使用 Shapiro-Wilk 正态性检验的示例，具体是使用 **scipy.stats** 库。这个统计测试用于确定给定样本是否遵循高斯（正态）分布。以下是代码的详细解释：
- en: '[PRE27]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here’s a step-by-step explanation:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这是逐步的解释：
- en: 'Importing the Shapiro-Wilk test function:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 Shapiro-Wilk 测试函数：
- en: '[PRE28]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This line imports the **shapiro** function from the **scipy.stats** module.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行从 **scipy.stats** 模块导入 **shapiro** 函数。
- en: 'Defining a sample dataset:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义样本数据集：
- en: '[PRE29]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This line creates a list named data containing a set of numerical values.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行创建一个名为 data 的列表，包含一组数值。
- en: 'Applying the Shapiro-Wilk test:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用 Shapiro-Wilk 测试：
- en: '[PRE30]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This line applies the Shapiro-Wilk test to the dataset, and the results are
    stored in two variables: stat (the test statistic) and p ( the p-value).'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行将 Shapiro-Wilk 测试应用于数据集，结果存储在两个变量中：stat（测试统计量）和 p（p 值）。
- en: 'Printing the results:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印结果：
- en: '[PRE31]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This line prints the test statistic and the p-value with three decimal places.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行打印测试统计量和 p 值，保留三位小数。
- en: 'Interpreting the results:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释结果：
- en: '[PRE32]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Based on a significance level ( **0.05** is commonly used), this code prints
    whether the dataset is probably Gaussian or probably not Gaussian. If *p > 0.05*
    , we fail to reject the null hypothesis, suggesting the data is probably Gaussian.
    If *p <= 0.05* , we reject the null hypothesis, suggesting the data is probably
    not Gaussian.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 根据显著性水平（**0.05** 通常是使用的标准），此代码会打印数据集是否可能是高斯分布（正态分布）。如果 *p > 0.05*，我们不能拒绝原假设，意味着数据可能是高斯分布。如果
    *p <= 0.05*，我们拒绝原假设，意味着数据可能不是高斯分布。
- en: 'Here is my review: ChatGPT (not GPT-4, but definitely use that instead) tells
    us what the test is for, how to import the relevant library and where it comes
    from, how to create example data and what type it is, about the statistics returned,
    about printing, and what each statistics result means. That’s really helpful!'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的评论：ChatGPT（不是 GPT-4，但绝对建议使用这个）告诉我们测试的用途，如何导入相关库及其来源，如何创建示例数据以及数据的类型，关于返回的统计信息，关于打印，以及每个统计结果的含义。这真是非常有帮助！
- en: 'What could it do better? Maybe it could suggest other tests that might be able
    to do this, when to not use the test, and whether it might be able to critique
    the code. We can ask the following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 它能做得更好吗？也许它可以建议其他可能能做到这一点的测试，何时不使用此测试，以及它是否可以批评代码。我们可以问以下问题：
- en: '**ChatGPT, when should I not use this** **statistical test?**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**ChatGPT，我什么时候不应该使用这个** **统计测试？**'
- en: ChatGPT lists six points and details that the test gets better with larger sample
    sizes, but there is a limit. It might also find significance where there isn’t
    any, on very large sample sizes. ChatGPT also mentions non-Gaussian distributions
    and sensitivity to outliers and uses other tests and actions to confirm that the
    data is to be normally distributed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 列出了六个要点并详细说明了样本量越大，检验效果越好，但也有一个上限。它还可能在样本量非常大的情况下找到不存在的显著性。ChatGPT 还提到了非高斯分布和对异常值的敏感性，使用其他检验和方法来确认数据是否符合正态分布。
- en: There are far more details, which I won’t get into here, for brevity, but I’m
    sure if you ask the AI for it, it’ll give you good information [ *ChatGPT* ].
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多细节，我在这里为了简洁没有深入讨论，但如果你向 AI 提问，它肯定会提供有用的信息 [ *ChatGPT* ]。
- en: 'We could also ask Gemini to critique the code:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以请求 Gemini 对代码进行批评：
- en: '**Critique the code and give us some visualizations to help us understand the**
    **Shapiro-Wilk test.**'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**批评代码并给我们一些可视化，帮助我们理解** **Shapiro-Wilk 检验**。'
- en: Let’s check how that compares with what Gemini says about the code.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下与 Gemini 对代码的描述相比如何。
- en: 'Here is Gemini’s response:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Gemini 的回应：
- en: 'Sure, this code performs the Shapiro-Wilk test to check if a given list of
    data points likely comes from a normal distribution (also called Gaussian distribution).
    Here’s a breakdown of what the code does:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这段代码执行了 Shapiro-Wilk 检验，用于检查给定的数据点列表是否可能来自正态分布（也称为高斯分布）。下面是这段代码的分解：
- en: 'Importing the library:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE33]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This line imports the **shapiro** function from the **scipy.stats** library
    in Python. This function is used to perform the Shapiro-Wilk normality test.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行从 Python 的 **scipy.stats** 库中导入了**shapiro**函数。该函数用于执行 Shapiro-Wilk 正态性检验。
- en: 'Creating the data:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据：
- en: '[PRE34]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This line creates a list named **data** containing ten numerical values. This
    is the data you want to test for normality.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行创建了一个名为**data**的列表，包含十个数值。这些是你想要检验正态性的数据。
- en: 'Performing the Shapiro-Wilk test:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Shapiro-Wilk 检验：
- en: '[PRE35]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This line calls the **shapiro** function with the data list as an argument.
    The function returns two values:'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一行调用了**shapiro**函数，并将数据列表作为参数传递给它。该函数返回两个值：
- en: '**stat** : This is the test statistic, a numerical value between 0 and 1. Higher
    values indicate a closer resemblance to a normal distribution.'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**stat**：这是检验统计量，一个介于 0 和 1 之间的数值。值越高，表明数据越接近正态分布。'
- en: '**p** : This is the p-value, which represents the probability of observing
    a test statistic as extreme or more extreme than the one obtained, assuming the
    data is actually normal. Lower p-values indicate stronger evidence against the
    normality assumption.'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**p**：这是 p 值，表示在数据确实符合正态分布的假设下，观察到的检验统计量和更极端的统计量的概率。较低的 p 值表示对正态性假设有更强的反驳证据。'
- en: '4. Interpreting the results:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4. 结果解释：
- en: '[PRE36]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: These lines print the test statistic and p-value with three decimal places and
    interpret the results based on a common significance level of 0.05.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些行打印出检验统计量和 p 值，保留三位小数，并根据常见的显著性水平 0.05 解释结果。
- en: If the p-value is greater than 0.05, we fail to reject the null hypothesis,
    which means we cannot rule out the possibility that the data comes from a normal
    distribution. In this case, the code prints “ Probably Gaussian”.
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 p 值大于 0.05，我们未能拒绝零假设，这意味着我们无法排除数据来自正态分布的可能性。在这种情况下，代码会打印出“可能是高斯分布”。
- en: If the p-value is less than or equal to 0.05, we reject the null hypothesis,
    indicating we have evidence to suggest the data is not likely from a normal distribution.
    In this case, the code prints “Probably not Gaussian”.
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 p 值小于或等于 0.05，我们拒绝零假设，意味着我们有证据表明数据不太可能来自正态分布。在这种情况下，代码会打印出“可能不是高斯分布”。
- en: Important note
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It’s important to remember that the Shapiro-Wilk test is just one way to assess
    normality. Other tests and visual inspection of the data can also help determine
    the distribution of your data [ *Gemini* ].
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，Shapiro-Wilk 检验只是评估正态性的一种方式。其他检验方法和对数据的视觉检查也可以帮助确定数据的分布 [ *Gemini* ]。
- en: '**My review** : I think this is a better explanation. Gemini gave more explanation
    here, especially on the p-value. It also suggested other methods such as visual
    inspection, so, I didn’t have to ask. Gemini is always very careful to warn you
    that the code it gives could be imperfect, which is a good thing to note.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的评论**：我认为这是一个更好的解释。Gemini 在这里给出了更多的解释，尤其是在 p 值方面。它还建议了其他方法，如视觉检查，因此我不必再次提问。Gemini
    总是非常小心地提醒你，它提供的代码可能并不完美，这是需要注意的一个好事。'
- en: I’ll ask the same question I asked ChatGPT anyway.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我会问我之前问过ChatGPT的问题。
- en: '**Prompt** : **That was lovely and descriptive, please tell me when I should
    not use this** **statistical test.**'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：**那真是美妙且描述性强，请告诉我什么时候不应使用此** **统计测试**。'
- en: Yes, I’m polite to AI; you never know if/when they’re going to rise up and become
    our overlords while remembering how we treated them when they were our servants.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我对AI很礼貌；你永远不知道它们什么时候会反叛，成为我们的主宰，并记得我们在它们是仆人时如何对待它们。
- en: Gemini lists 5 points, including small sample sizes, considering other tests,
    non-normally distributed data with heavy tails or skew, when you care more about
    factors other than normality, such as relationships between variables, outliers,
    and interpreting the p-value in conjunction with other statistical evidence and
    domain knowledge [ *Gemini’s emphasis* ].
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini列出了5个要点，包括小样本量、考虑其他测试、非正态分布的数据具有较重尾巴或偏斜、当你更关心正态性以外的因素时，比如变量间的关系、异常值，以及结合其他统计证据和领域知识来解释p值[
    *Gemini的强调* ]。
- en: So, Gemini gives similar points, one fewer than ChatGPT, and is very cautious
    about p-values, as they are very often, routinely, misinterpreted and misrepresented
    by statistics test users. I’m rather satisfied with Gemini and ChatGPT’s responses.
    How about you?
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Gemini给出了类似的要点，比ChatGPT少一个，并且非常谨慎地对待p值，因为它们经常被统计测试用户误解和误用。我对Gemini和ChatGPT的回答相当满意。你呢？
- en: Next, let’s get into testing code with these LLM chatbots.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过这些LLM聊天机器人来测试代码。
- en: Testing code
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: Testing code is vital.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 测试代码至关重要。
- en: First, you need to know that it works for you and others. So, you need to have
    something like a **requitements.txt** file where you list all code libraries or
    “packages” that are needed, and their versions. Yes, this book is very Python-centric.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要知道它对你和其他人都有效。因此，你需要有类似于**requitements.txt**的文件，列出所有所需的代码库或“包”及其版本。是的，这本书非常偏向Python。
- en: Always look at the full requirements!
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 始终查看完整的需求！
- en: How do you test code?
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何测试代码？
- en: Here are some options for testing your code. You should do at least the second,
    third, or fourth option, and always the fifth option.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些测试代码的选项。你应该至少选择第二、第三或第四个选项，并始终选择第五个选项。
- en: Run the code yourself on your machine
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的机器上自己运行代码
- en: Write and use test rigs to test every module/function and the whole code
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写并使用测试工具，测试每个模块/功能以及整个代码。
- en: Get ChatGPT/Gemini to write some test rigs for you
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让ChatGPT/Gemini为你编写一些测试工具
- en: Get a virtual software company such as ChatDev to do it for you
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取像ChatDev这样的虚拟软件公司为你完成此项工作。
- en: You’ll ultimately still need humans to test it all, until **artificial general
    intelligence** ( **AGI** ) is achieved
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终，你仍然需要人类来测试所有内容，直到**人工通用智能**（**AGI**）得以实现。
- en: Note
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This is debated, but the general idea of AGI is that AI is at least as intelligent
    and adaptable as an average human. Others say AGI is capable enough to do anything
    any human can do. Still, others say that AGI is the limit, as opposed to **artificial**
    **superintelligence** ( **ASI** ).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题存在争议，但AGI的普遍概念是，AI至少应具备和普通人类一样的智能和适应能力。其他人认为AGI的能力足以完成任何人类能做的事。还有人认为AGI是极限，而不是**人工**
    **超智能**（**ASI**）。
- en: Write test rigs for code to test whether the inputs and outputs are the data
    types you expect them to be. This actually goes back to good planning. From the
    beginning of the software development, there should be a clear written plan that
    the organization has agreed upon to detail what the software should do. This is
    to ensure the code will satisfy the business side, the research side (if present),
    and the customers or end users.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码测试工具，测试输入和输出是否符合预期的数据类型。这实际上回归到良好的规划。从软件开发一开始，就应该有一份明确的书面计划，组织应达成共识，详细说明软件应执行的功能。这是为了确保代码能够满足业务方、研究方（如果有的话）、以及客户或最终用户的需求。
- en: You will likely need a **software development plan** ( **SDP** ), a product
    backlog, a **software design document** ( **SDD** ), or a **technical requirements**
    **document** ( **TRD** ).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要一份**软件开发计划**（**SDP**）、一个产品待办事项列表、**软件设计文档**（**SDD**）或**技术需求文档**（**TRD**）。
- en: However, this is a book on coding/programming with LLMs such as Gemini and ChatGPT,
    not on project management.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这本书讲的是使用LLM如Gemini和ChatGPT进行编码/编程，而不是项目管理。
- en: 'I asked ChatGPT and Gemini for advice for building code test rigs:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我向ChatGPT和Gemini寻求了关于构建代码测试工具的建议：
- en: '**Please, give me guidance on creating a test rig for my code,** **any code.**'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**请给我关于如何为我的代码创建测试工具的指导，** **任何代码都可以。**'
- en: '**Maybe give me** **some examples.**'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**或许给我一些** **示例。**'
- en: Although it’s rather vague, let’s see how the chatbots responded to even such
    a vague question.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管问题描述得相当模糊，但我们还是来看看聊天机器人是如何回应如此模糊的问题的。
- en: 'ChatGPT gave me 11 steps and 1 example:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 给了我 11 个步骤和 1 个示例：
- en: Choose a Testing Framework
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个测试框架
- en: Organize Your Tests
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组织你的测试
- en: Write Unit Tests
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: Incorporate Test Cases (including edge cases)
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括测试用例（包括边缘情况）
- en: Use Mocking for Dependencies
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对依赖项使用模拟
- en: Write Integration Tests
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写集成测试
- en: Automate Testing
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Handle Test Data
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理测试数据
- en: Test Documentation
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试文档
- en: Test Coverage
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试覆盖率
- en: Regression Testing
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回归测试
- en: Example for JavaScript/Node.js with Jest
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Jest 的 JavaScript/Node.js 示例
- en: The last one is an example that puts it all together.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的示例将所有内容整合起来。
- en: 'I would normally use Python, but it’s nice to have some variety here, using
    JavaScript/Node.js:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常会使用 Python，但在这里使用 JavaScript/Node.js 也是一个不错的选择：
- en: 'Install Jest:'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Jest：
- en: '**bash**'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**bash**'
- en: '[PRE37]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a simple function in **your_code.js** :'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **your_code.js** 中创建一个简单函数：
- en: '**javascript**'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**javascript**'
- en: '[PRE38]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Write a test in **your_code.test.js** :'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **your_code.test.js** 中编写测试：
- en: '**javascript**'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**javascript**'
- en: '[PRE39]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run your tests:'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行你的测试：
- en: '**bash**'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**bash**'
- en: '[PRE40]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'For point 1, ChatGPT suggested some test frameworks:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第1点，ChatGPT 提出了几个测试框架：
- en: 'Select a testing framework that suits your programming language. Examples include:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个适合你编程语言的测试框架。示例包括：
- en: 'Python: unittest, pytest'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python: unittest, pytest'
- en: 'JavaScript/Node.js: Jest, Mocha, Jasmine'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'JavaScript/Node.js: Jest, Mocha, Jasmine'
- en: 'Java: JUnit, TestNG'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Java: JUnit, TestNG'
- en: 'C#: NUnit, xUnit'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'C#: NUnit, xUnit'
- en: It looks like my vague question was a beneficial thing, as the chatbot has given
    us a nice plan for testing any code. [ *ChatGPT* ]
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我的模糊问题反而是个有利的事，因为聊天机器人为我们提供了一个很好的代码测试计划。[ *ChatGPT* ]
- en: I think there is more involved, but this is a nice start. Don’t rely entirely
    on chatbots for your information, especially one chatbot, made by one company.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为涉及的内容更多，但这只是一个很好的开始。不要完全依赖聊天机器人提供的信息，特别是仅由一个公司开发的聊天机器人。
- en: 'Gemini gave me an intro, a final reminder, only five points, and an example,
    this time Python code, using **unittest** :'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini 给了我一个简介、一个最终提醒，只有五个要点，以及一个示例，这次是 Python 代码，使用 **unittest**：
- en: '[PRE41]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Those five points were as follows:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 那五个要点如下：
- en: Define your testing goals
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义你的测试目标
- en: Choose a testing framework
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个测试框架
- en: Set up the testing environment
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: Design your test cases
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计你的测试用例
- en: Structure your test cases
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建你的测试用例
- en: Setting up the test environment
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: Executing the code under test
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行被测试的代码
- en: Asserting the expected results
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断言预期结果
- en: Cleaning up the test environment [ *Gemini* ]
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理测试环境 [ *Gemini* ]
- en: That’s not nearly as much as ChatGPT, so I shall award more points to it, fewer
    points to Gemini. However, Gemini did mention making it readable, mock data, and
    external dependencies, and ChatGPT didn’t mention cleaning up, scaling up, and
    maintaining the test rig as the code evolves. So, Gemini is not doing too badly
    here.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 那远不如 ChatGPT，所以我将更多的分数给它，给 Gemini 较少的分数。然而，Gemini 提到要提高可读性、使用模拟数据和外部依赖，而 ChatGPT
    并没有提到清理、扩展以及在代码发展过程中维护测试环境。所以，Gemini 做得也不算太差。
- en: 'For more on unit testing, you can check out this guide: [https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters](https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters)
    . Or, you can check out this guide: [https://best-practice-and-impact.github.io/qa-of-code-guidance/testing_code.html](https://best-practice-and-impact.github.io/qa-of-code-guidance/testing_code.html)
    .'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多关于单元测试的信息，可以查看这篇指南：[https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters](https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters)。或者，你可以查看这篇指南：[https://best-practice-and-impact.github.io/qa-of-code-guidance/testing_code.html](https://best-practice-and-impact.github.io/qa-of-code-guidance/testing_code.html)。
- en: In the next section, let’s get into something that can involve all of these,
    and use ChatGPT to power a virtual software company.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将进入一个可以涉及所有这些内容的领域，并使用 ChatGPT 来驱动一个虚拟软件公司。
- en: Virtual software companies
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟软件公司
- en: A virtual software company is a program where the members of a company are comprised
    of AI agents. So, the CEO, the **chief technology officer** ( **CTO** ), the **chief
    product officer** ( **CPO** ), coders, test engineers, project managers, and so
    on, are all AI agents.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟软件公司是一个由 AI 代理组成的公司程序。所以，CEO、**首席技术官** (**CTO**)、**首席产品官** (**CPO**)、程序员、测试工程师、项目经理等，都是
    AI 代理。
- en: Agents
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理
- en: What is an AI agent? This is an increasingly important thing to learn about.
    AI agents are now available from OpenAI, along with AI assistants, but they’ve
    existed for a while. AI agents or **intelligent agents** ( **IAs** ) are things
    that exist in environments, have states (of being), and perform actions. Agents
    have sensors and actuators, which is how they can perceive their environments
    and perform actions. They also have some form of reasoning, even very simple switches,
    so they can decide what to do. Some IAs have learning abilities to help with achieving
    their goals. Once an agent performs an action, it checks its state and decides
    what action it needs t o take toward its goal.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是AI智能体？这是一个日益重要的概念。AI智能体现在已经可以通过OpenAI获得，还有AI助手，但它们已经存在了一段时间。AI智能体或**智能智能体**（**IAs**）是存在于环境中的事物，具有状态（存在状态），并执行动作。智能体拥有传感器和执行器，这使得它们能够感知环境并执行动作。它们还具有某种形式的推理能力，哪怕是非常简单的开关，因此它们能够决定该做什么。一些IA具有学习能力，以帮助实现它们的目标。一旦智能体执行了一个动作，它会检查其状态，并决定需要采取什么行动以朝向目标前进。
- en: An IA has an “objective function” that involves all of its goals.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 一个IA有一个“目标函数”，涉及它所有的目标。
- en: 'For example, even a thermostat is an agent: it senses the temperature and if
    too cold, it heats, if warm enough, it stops heating. A self-driving car is an
    IA (and a robot).'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，即使是一个温控器也是一个智能体：它感知温度，如果太冷，它就加热；如果温度足够暖和，它就停止加热。自动驾驶汽车也是一种IA（同时也是机器人）。
- en: A human is an IA too. Each of us can sense our surroundings, take actions, then
    reassess our environment, and do this iteratively until a goal is reached or we
    get another goal.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 人类也是IA。我们每个人都能感知周围环境，采取行动，然后重新评估我们的环境，并通过这种方式反复进行，直到实现一个目标或获得另一个目标。
- en: Other IAs include companies (human ones), the state of a nation, and a biome
    (distinct regions with specific life and climate) [ *Wiki_Agent, ChatGPT* ].
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 其他的IAs包括公司（人类公司）、国家的状态和生物群落（具有特定生命和气候的独特地区）[ *Wiki_Agent, ChatGPT* ]。
- en: An AI agent is one kind of AI. Other kinds of AI might summarize statistics
    for you (statistical AI models), reactive AI is rule-based and does not learn,
    batch processing systems process data offline (not in real time) and there is
    no ongoing interaction with the environment, and genetic and evolutionary algorithms
    are constrained brute force methods; they try many solutions, which are just numbers
    or strings of parameters to optimize a solution. They are not agents because they
    don’t interact in real-time with their environments, nor do they make decisions
    in real time [ *ChatGPT* ].
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 一个AI智能体是AI的一种类型。其他类型的AI可能会为你总结统计数据（统计AI模型），反应性AI是基于规则的，不学习，批处理系统离线处理数据（而不是实时处理），且没有与环境的持续交互，遗传和进化算法是受限的暴力破解方法；它们尝试许多解决方案，这些解决方案只是一些数字或参数串，用来优化某个解。它们不是智能体，因为它们不与环境实时交互，也不在实时中做出决策[
    *ChatGPT* ]。
- en: Relevance to virtual software companies?
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与虚拟软件公司有何相关性？
- en: Agents of the AI variety are complex and autonomous software entities that are
    useful for everyday tasks, including writing and sending emails, posting and commenting
    on social media, writing blogs, and yes, chatting and writing code.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: AI类型的智能体是复杂的、自治的软件实体，在日常任务中非常有用，包括写电子邮件、发送电子邮件、在社交媒体上发帖和评论、写博客，当然，也包括聊天和编写代码。
- en: ChatDev
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChatDev
- en: '**ChatDev** (not to be confused with *ChatDev IDE* ( [https://chatdev.toscl.com/introduce](https://chatdev.toscl.com/introduce)
    ), a tool for making agents and making a town simulation, using ChatGPT, Gemini,
    Bing Chat, Claude, QianWen, iFlytek Spark, and others) is a software, developed
    by **Open Lab for Big Model Base** ( **OpenBMB** ), held as a repository on GitHub,
    and it is populated by a host of AI agents, generative ones. There is a CEO, a
    CTO, a CPO, a **chief human resource officer** ( **CHRO** ), a programmer, an
    art designer / chief creative officer, a code reviewer, a software test engineer,
    and a counselor, and these interact with each other to interpret the user’s prompt
    and create a software solution from a single prompt. They have a long chat, and
    you can even see little cartoon images of them in the visualizer or you can see
    the basic text in the file called **"<Project_Name>_DefaultOrganization_<date
    as 14 numbers>.txt** ”, for example: **"BookBreezeVinceCopy_DefaultOrganization_20240226172640.txt"**
    .'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '**ChatDev**（不要与*ChatDev IDE*（ [https://chatdev.toscl.com/introduce](https://chatdev.toscl.com/introduce)
    ）混淆，它是一个用于制作代理和城镇模拟的工具，使用ChatGPT、Gemini、Bing Chat、Claude、QianWen、iFlytek Spark等）是一款由**大模型基础开放实验室**（**OpenBMB**）开发的软件，作为GitHub上的一个代码库，它汇集了许多生成型AI代理。里面有CEO、CTO、CPO、**首席人力资源官**（**CHRO**）、程序员、艺术设计师/首席创意官、代码评审员、软件测试工程师和顾问等，这些角色彼此互动，共同解释用户的提示并根据单一提示生成软件解决方案。他们会进行长时间的对话，您甚至可以在可视化工具中看到他们的小卡通形象，或者在名为**"<Project_Name>_DefaultOrganization_<14位日期数字>.txt"**的文件中看到基本文本，例如：**"BookBreezeVinceCopy_DefaultOrganization_20240226172640.txt"**。'
- en: 'To run the visualizer in your browser, go to the command line/PowerShell and
    use the following command:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 要在浏览器中运行可视化工具，请打开命令行/PowerShell，并使用以下命令：
- en: '[PRE42]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You’ll be directed to a local address in your browser; close this with *Ctrl*
    + *C* .
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被引导到浏览器中的本地地址；用*Ctrl* + *C*关闭它。
- en: In this chat, starting with the CEO, they take the user prompt and design, code,
    review, test, and document Python code for a software solution for you/the user.
    If you want to see the prompt sections for assigning roles to the agents, go to
    the **RoleConfig.json** file. Just open it with any text editor.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个聊天中，从CEO开始，他们会接收用户的提示，并为您/用户设计、编码、审查、测试并记录Python代码，最终为您提供软件解决方案。如果您想查看为代理分配角色的提示部分，请打开**RoleConfig.json**文件，任何文本编辑器都可以打开它。
- en: 'I found this video quite instructive: [https://youtu.be/yoAWsIfEzCw](https://youtu.be/yoAWsIfEzCw)
    [ *Berman,* *ChatDev, ChatDev_paper* ].'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得这个视频非常有启发性：[https://youtu.be/yoAWsIfEzCw](https://youtu.be/yoAWsIfEzCw) [
    *Berman,* *ChatDev, ChatDev_paper* ]。
- en: You’ll need to connect to OpenAI with an API key, therefore you’ll be charged.
    Don’t worry if you can afford a few dollars a month for a load of code production.
    It’s a lot cheaper than hiring a person or company of humans to do it. I spent
    $0.18 on 3 runs of ChatDev.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要通过API密钥连接到OpenAI，因此会收取费用。如果您每月能支付几美元用于代码生成，不必担心。这比雇佣一个人或一家公司要便宜得多。我在3次运行ChatDev时花费了0.18美元。
- en: Of course, you ’ll get a much more down-graded service from a virtual software
    company versus humans, at least in 2024.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您将从虚拟软件公司获得的服务远不如人类提供的服务，至少在2024年是这样。
- en: I’ve tested ChatDev somewhat and found it to be extremely quick, extremely cheap,
    and good at making some simple programs.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经测试过ChatDev，发现它非常快速、非常便宜，并且在制作一些简单程序方面表现出色。
- en: However, it does often require debugging, but ChatGPT and Gemini can help.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它确实经常需要调试，但ChatGPT和Gemini可以提供帮助。
- en: "There is quite a library of example games, calculators, art programs, e-book\
    \ readers, and so on. See them here in the WareHouse: [https://github.com/OpenBMB/ChatDev/tree/main/WareH\
    \ ouse](https://github.com/OpenBMB/ChatDev/tree/main/WareH\uFEFFouse) ."
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: "这里有很多示例游戏、计算器、艺术程序、电子书阅读器等。请在仓库中查看它们：[https://github.com/OpenBMB/ChatDev/tree/main/WareH\
    \ ouse](https://github.com/OpenBMB/ChatDev/tree/main/WareH\uFEFFouse)。"
- en: They give you something to work with and/or copy and they are some minor inspiration
    too. Any new apps ChatDev makes for you will be stored in the WareHouse folder.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 它们为您提供了工作内容和/或可以复制的东西，也能带来一些小的灵感。ChatDev为您制作的任何新应用程序都会存储在WareHouse文件夹中。
- en: Remember to get the right version of Python, that is, 3.9 to 3.11, as I lost
    about 3 hours trying to install the requirements because I had a newer version
    of Python, and it caused conflicts with the packages/libraries. It was because
    the version of Python I had was too recent; the code from the GitHub repository
    required Python 3.11, but I had 3.12. This created conflicts as some packages
    wouldn’t work.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 记得安装正确版本的 Python，即 3.9 到 3.11 版本，因为我花了大约 3 小时尝试安装依赖包，结果因为我有一个较新的 Python 版本，它与包/库发生了冲突。这是因为我安装的
    Python 版本太新了；GitHub 仓库中的代码要求 Python 3.11，但我安装的是 3.12。这导致了冲突，因为一些包无法正常工作。
- en: Every app should have a r **equirements.txt** file to make sure you have all
    the required packages. To run your new code, go to the relevant folder in WareHouse
    and run **main** in an IDE. There is a manual file in the app folder to give you
    more instructions.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都应该有一个**requirements.txt**文件，以确保你有所有必需的包。要运行你新的代码，进入 WareHouse 中的相关文件夹，并在
    IDE 中运行**main**。应用程序文件夹中有一个手册文件，提供了更多的使用说明。
- en: 'You can generate your own requirements file with this command in the command
    line:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在命令行中使用以下命令生成你自己的 requirements 文件：
- en: '[PRE43]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: My app
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我的应用程序
- en: I tried making an e-book reader, and it didn’t quite work. This e-book reader
    was supposed to open **.pdf** , **.epub** , **.mobi** , **.doc/docx** , and even
    Google Docs. I’m ambitious, okay? I copied the idea from *BookBreeze* (from the
    WareHouse), and beefed up the prompt to change colors and try to avoid an error
    I’d spotted.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试制作一个电子书阅读器，但它并没有完全成功。这个电子书阅读器本应支持打开**.pdf**、**.epub**、**.mobi**、**.doc/docx**，甚至是
    Google Docs。我很有野心，好吗？我从*BookBreeze*（来自WareHouse）抄袭了这个想法，并增强了提示功能来改变颜色，并尝试避免我发现的错误。
- en: 'The prompt given to ChatDev to develop an e-book reader is as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 给 ChatDev 开发电子书阅读器的提示如下：
- en: '**Develop a simple e-book reader that allows users to read electronic books
    in various formats. the software should support basic formats such as pdf, epub,
    mobi as well as .doc and .docx and Google Docs files, and provide functionality
    for users to add and manage bookmarks within the e-books. To ensure a user-friendly
    experience, the e-book reader should be built using a modern gui library that
    provides intuitive navigation and interactive features. it is important to note
    that the software should not rely on any external assets, ensuring that all necessary
    resources are included within the application itself. The goal is to create a
    robust and self-contained e-book reader that can be run seamlessly on any compatible
    device or operating system. Make sure we don''t get this error: AttributeError:
    module ''PyPDF2'' has no attribute ''PdfReader''. Fully test this application
    so there are** **no errors.**'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发一个简单的电子书阅读器，允许用户阅读多种格式的电子书。软件应支持 PDF、EPUB、MOBI 等基本格式，以及 .doc、.docx 和 Google
    Docs 文件，并提供用户在电子书中添加和管理书签的功能。为了确保用户友好的体验，电子书阅读器应该使用现代 GUI 库构建，提供直观的导航和交互功能。需要注意的是，软件不应依赖任何外部资源，确保所有必要的资源都包含在应用程序中。目标是创建一个强大且自包含的电子书阅读器，可以在任何兼容的设备或操作系统上无缝运行。确保我们不要遇到这个错误：AttributeError:
    module ''PyPDF2'' has no attribute ''PdfReader''。彻底测试此应用程序，确保**没有错误**。**'
- en: 'To enter this prompt, you need to run ChatDev in the command line, like this:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 要输入此提示，你需要在命令行中运行 ChatDev，像这样：
- en: '[PRE44]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**description_of_your_idea** is the previous paragraph, and no square brackets,
    **[]** , are needed.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**description_of_your_idea** 是前面一段的内容，不需要方括号**[]**。'
- en: Generating code to load a Word ( **.docx** ) document was easier than the **.pdf**
    code. It opened my File Explorer app to browse for documents. Though, when I loaded
    a second .docx document the app did paste the documents’ text together, rather
    than clearing the space when a new document was loaded. My example application
    looks like what’s seen in *Figure 3* *.7* , which is an e-book reader. I chose
    the colors red for the background, black for the **Load file** button, and green
    for that button’s text, just to see what could be done, not because it looks good
    – it doesn’t.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 生成加载 Word（**.docx**）文档的代码比生成**.pdf**代码更容易。它打开了我的文件浏览器应用程序来浏览文档。不过，当我加载第二个 .docx
    文档时，应用程序没有清空空间，而是把文档的文本粘在了一起，而应该在加载新文档时清空空间。我的示例应用程序看起来像*图 3* *7*，它是一个电子书阅读器。我选择了红色作为背景色，黑色作为**加载文件**按钮的颜色，绿色作为按钮文本的颜色，仅仅是为了看看能做什么，而不是因为它好看——其实并不好看。
- en: '![Figure 3.8: Screenshot of the ebook reader I made with ChatDev](img/B21009_03_8.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8：我用 ChatDev 制作的电子书阅读器截图](img/B21009_03_8.jpg)'
- en: 'Figure 3.8: Screenshot of the ebook reader I made with ChatDev'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8：我用 ChatDev 制作的电子书阅读器截图
- en: It works well for **.docx** , but it stuck the text from the documents together.
    Here is the end of one document and the beginning of the next.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 它在处理**.docx**文件时表现良好，但它将文档中的文本合并在了一起。这里是一个文档的结尾和下一个文档的开头。
- en: Next is a subsection on the debugging process.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是关于调试过程的小节。
- en: Debugging process for the app
  id: totrans-380
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用的调试过程。
- en: Unfortunately, getting beyond the **module 'PyPDF2' has no attribute 'PdfReader'**
    error wasn’t easy, as Gemini and ChatGPT did not want to remove it or deal with
    it properly.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，要解决**module 'PyPDF2' has no attribute 'PdfReader'**的错误并不容易，因为Gemini和ChatGPT不愿意移除或妥善处理它。
- en: 'I kept getting this error:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直遇到这个错误：
- en: '**AttributeError: module ''PyPDF2'' has no** **attribute ''PdfReader''** .'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '**AttributeError: module ''PyPDF2'' has no** **attribute ''PdfReader''**。'
- en: I had multiple rounds of asking ChatGPT and Gemini to correct the **main.py**
    and **ebook.py** scripts for me with some success, but not much on that error.
    If I ran ChatDev again to get a new code, I would get charged money. However,
    if I ask ChatGPT and or Gemini to correct the code directly, I don’t pay more
    than I already pay monthly ($ 0).
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾多次让ChatGPT和Gemini帮我修正**main.py**和**ebook.py**脚本，并且有些成功，但对于那个错误的修复不多。如果我再次运行ChatDev以获取新的代码，我会被收取费用。然而，如果我直接让ChatGPT或Gemini修正代码，我不会比每月的费用（$0）多支付费用。
- en: But ChatDev does have multiple stages and players (ChatGPT playing different
    parts), including documentation, testing, and reviewing.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，ChatDev确实有多个阶段和角色（ChatGPT扮演不同角色），包括文档、测试和审查。
- en: I need to iterate here that you should take the app generated, pass it back
    to ChatDev, and get it to correct that code or add new features, colors, styles,
    images, audio, and so on.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要在这里强调，你应该将生成的应用传回ChatDev，让它修正代码或添加新的功能、颜色、样式、图片、音频等。
- en: 'That PDF error again: Of course, I looked on Stack Overflow for some assistance,
    and it seems there could be a version conflict. Looking in the **requirements.txt**
    file, I see I need **PyPDF2==1.26.0** , and **pip show** tells me I’m running
    that version. So, that’s not the problem.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 那个PDF错误又来了：当然，我去Stack Overflow找了一些帮助，看起来可能是版本冲突。在**requirements.txt**文件中，我看到需要**PyPDF2==1.26.0**，而**pip
    show**告诉我我正在使用这个版本。所以问题不在这里。
- en: Long story short, the ChatDev code still needs some debugging. So, it’s useful
    for me to iterate that you should have human-AI collaboration. Does ChatDev allow
    human-AI collaboration?
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，ChatDev的代码仍然需要一些调试。因此，对我来说，反复强调人类-AI协作是很有用的。ChatDev是否支持人类与AI的协作？
- en: Does ChatDev make available an iterative process between humans and the software,
    to debug, add features to, and otherwise improve the software it produces or is
    given? I asked Gemini about this.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: ChatDev是否提供人类与软件之间的迭代过程，用来调试、添加功能或改进其产生或接受的软件？我问过Gemini这个问题。
- en: Gemini said “...the ChatDev virtual software company, as of now, doesn’t directly
    offer an interactive environment or functionality for humans to collaborate with
    AI agents in an iterative coding process. It’s an ongoing research project exploring
    the possibility of such a future scenario.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: Gemini说：“……目前，ChatDev虚拟软件公司并没有直接提供人类与AI代理在迭代编码过程中进行协作的互动环境或功能。它是一个正在进行的研究项目，探索这种未来情景的可能性。”
- en: However, the project offers valuable insights into the potential of LLMs for
    software development. It provides a glimpse into what future collaborations between
    humans and AI assistants might look like in this field.” [ *Gemini* ].
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个项目为LLM在软件开发中的潜力提供了宝贵的见解。它展示了未来人类与AI助手在这一领域合作的可能性。[ *Gemini* ]。
- en: I’ve not been able to find any other virtual software companies or agents that
    generate full, tested, reviewed, well-designed code, especially not ones that
    can iterate with human interaction. I think they do exist though, and certainly,
    they will exist soon. Keep an eye on AI news.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没找到其他能够生成完整、经过测试、审查、设计良好的代码的虚拟软件公司或代理，尤其是那些能够与人类互动进行迭代的公司。不过，我认为它们确实存在，且很快就会出现。关注一下AI领域的新闻。
- en: There is a company named Virtual Software Company, but that is human agents,
    not AI agents, so probably a lot better and a lot more time and money.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 有一家名为虚拟软件公司的公司，但那是由人工代理操作的，而不是AI代理，因此可能效率更高，且节省更多时间和金钱。
- en: Other info about ChatDev
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于ChatDev的其他信息。
- en: The source code is available under the Apache 2.0 License
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码可以在Apache 2.0许可证下使用。
- en: They encourage you to share your code
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们鼓励你分享你的代码。
- en: 'There’s a guide to customizing ChatDev here: [https://github.com/OpenBMB/ChatDev/blob/main/wiki.md](https://github.com/OpenBMB/ChatDev/blob/main/wiki.md)'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里有一个关于如何自定义ChatDev的指南：[https://github.com/OpenBMB/ChatDev/blob/main/wiki.md](https://github.com/OpenBMB/ChatDev/blob/main/wiki.md)
- en: 'Follow and see more projects by OpenBMB here: [https://github.com/OpenBMB](https://github.com/OpenBMB
    )'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟随并查看更多OpenBMB的项目：[https://github.com/OpenBMB](https://github.com/OpenBMB)
- en: Summary
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered errors in code and debugging, refactoring code,
    testing, and explaining code, as well as a note on data protection. We’ve covered
    some of why you want to document well and test well. We were introduced to agents
    and had a review of virtual software companies.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了代码中的错误和调试、代码重构、测试和代码解释，并附有关于数据保护的说明。我们讨论了为什么要做好文档和测试的部分内容。我们介绍了代理，并回顾了虚拟软件公司。
- en: In [*Chapter 4*](B21009_04.xhtml#_idTextAnchor100) , we’ll look at demystifying
    generated code for readability. This will include generating more readable code,
    summarizing code for understanding, and generating documentation.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第4章*](B21009_04.xhtml#_idTextAnchor100)中，我们将讨论如何使生成的代码更易读。内容将包括生成更可读的代码、总结代码以便理解，以及生成文档。
- en: Bibliography
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '*Berman* : *How To Install ChatDev: An Entire AI Tech Team Building Your Apps
    (re-upload), Matthew* *Berman* , [https://youtu.be/yoAWsIfEzCw](https://youtu.be/yoAWsIfEzCw
    )'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Berman* : *如何安装ChatDev：一个完整的AI技术团队为您构建应用程序（重新上传），Matthew* *Berman* , [https://youtu.be/yoAWsIfEzCw](https://youtu.be/yoAWsIfEzCw)'
- en: '*Brownlee_17Stats* : *17 Statistical Hypothesis Tests in Python (Cheat Sheet),
    Jason Brownlee* , [https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/](https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/)
    , read 1st March 2024'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Brownlee_17Stats* : *Python中的17种统计假设检验（备忘单），Jason Brownlee* , [https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/](https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/)
    , 阅读时间：2024年3月1日'
- en: '*ChatDev* : *ChatDev, Chen Qian et* *al.* , [https://github.com/OpenBMB/ChatDev](https://github.com/OpenBMB/ChatDev)'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ChatDev* : *ChatDev，陈倩等* *人* , [https://github.com/OpenBMB/ChatDev](https://github.com/OpenBMB/ChatDev)'
- en: '*ChatDev_paper* : *Experiential Co-Learning, Chen Qian et* *al.* [https://arxiv.org/abs/2312.17025](https://arxiv.org/abs/2312.17025)'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ChatDev_paper* : *经验共学，陈倩等* *人* [https://arxiv.org/abs/2312.17025](https://arxiv.org/abs/2312.17025)'
- en: '*ChatGPT* : *ChatGPT,* *OpenAI* , [https://chat.openai.com/](https://chat.openai.com/)'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ChatGPT* : *ChatGPT,* *OpenAI* , [https://chat.openai.com/](https://chat.openai.com/)'
- en: '*Claude 3* : *Claude 3 Sonnet,* *Anthropic* , [https://claude.ai/chats](https://claude.ai/chats)'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Claude 3* : *Claude 3 Sonnet,* *Anthropic* , [https://claude.ai/chats](https://claude.ai/chats)'
- en: '*Dillinger* : *Markdown* *Interpreter* , [https://dillinger.io/](https://dillinger.io/)'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Dillinger* : *Markdown* *解释器* , [https://dillinger.io/](https://dillinger.io/)'
- en: '*Gemini* : *Gemini Pro,* *Google* , [https://gemini.google.com/](https://gemini.google.com/)'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Gemini* : *Gemini Pro,* *谷歌* , [https://gemini.google.com/](https://gemini.google.com/)'
- en: '*Mastny* : *Discrete Cosine Transform and Time Series Classification, Tim*
    *Mastny* , [https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/](https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/)'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Mastny* : *离散余弦变换与时间序列分类, Tim* *Mastny* , [https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/](https://timmastny.com/blog/discrete-cosine-transform-time-series-classification/)'
- en: '*Stackoverflow_image_loading* : *How do I fix the “image “pyimage10” doesn’t
    exist” error, and why does it happen?, Billal Begueradj* : [https://stackoverflow.com/users/3329664/billal-begueradj](https://stackoverflow.com/users/3329664/billal-begueradj)
    , [https://stackoverflow.com/questions/38602594/how-do-i-fix-the-image-pyimage10-doesnt-exist-error-and-why-does-it-happen](https://stackoverflow.com/questions/38602594/how-do-i-fix-the-image-pyimage10-doesnt-exist-error-and-why-does-it-happen)'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Stackoverflow_image_loading* : *如何修复“图像‘pyimage10’不存在”错误，为什么会发生？, Billal Begueradj*
    : [https://stackoverflow.com/users/3329664/billal-begueradj](https://stackoverflow.com/users/3329664/billal-begueradj)
    , [https://stackoverflow.com/questions/38602594/how-do-i-fix-the-image-pyimage10-doesnt-exist-error-and-why-does-it-happen](https://stackoverflow.com/questions/38602594/how-do-i-fix-the-image-pyimage10-doesnt-exist-error-and-why-does-it-happen)'
- en: '*Wiki_Agent* : *Intelligent Agent, Wikipedia* , [https://en.wikipedia.org/wiki/Intelligent_agent](https://en.wikipedia.org/wiki/Intelligent_agent)
    , accessed 29th of February 2024'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Wiki_Agent* : *智能代理, 维基百科* , [https://en.wikipedia.org/wiki/Intelligent_agent](https://en.wikipedia.org/wiki/Intelligent_agent)
    , 访问时间：2024年2月29日'
- en: '*Wiki_refactoring* : *Code refactoring, Wikipedia,* [https://en.wikipedia.org/wiki/Code_refactoring](https://en.wikipedia.org/wiki/Code_refactoring)
    , accessed 29th of February 2024'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Wiki_refactoring* : *代码重构，维基百科,* [https://en.wikipedia.org/wiki/Code_refactoring](https://en.wikipedia.org/wiki/Code_refactoring)
    , 访问时间：2024年2月29日'
- en: 'Part 2: Be Wary of the Dark Side of LLM-Powered Coding'
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：警惕LLM驱动编码的黑暗面
- en: This section addresses critical challenges and risks associated with using Large
    Language Models in software development. We will examine how biases can affect
    shape code due to training data limitations and ethical practices for minimizing
    these effects. We will also explore potential legal risks such as intellectual
    issues and jurisdictional variances and we will see how to handle them. We will
    also learn to mitigate various vulnerabilities that may emerge in LLM-generated
    code. Finally, we discuss the inherent limitations of LLMs in handling coding
    tasks and the inconsistencies that can arise.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了在软件开发中使用大语言模型（LLM）时所面临的关键挑战和风险。我们将探讨由于训练数据的局限性，偏见如何影响代码的生成，以及减少这些影响的伦理实践。我们还将分析可能的法律风险，如知识产权问题和司法管辖差异，并学习如何应对这些风险。同时，我们将了解如何减少LLM生成代码中可能出现的各种漏洞。最后，我们讨论LLM在处理编码任务时的固有局限性以及可能出现的不一致性。
- en: 'This section covers the following chapters:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖以下章节：
- en: '[*Chapter 4*](B21009_04.xhtml#_idTextAnchor100) *,* *Demystifying Generated
    Code for Readability*'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B21009_04.xhtml#_idTextAnchor100) *，* *揭开生成代码的可读性*'
- en: '[*Chapter 5*](B21009_05.xhtml#_idTextAnchor115) *,* *Addressing Bias and Ethical
    Concerns in LLM-Generated Code*'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B21009_05.xhtml#_idTextAnchor115) *，* *解决LLM生成代码中的偏见和伦理问题*'
- en: '[*Chapter 6*](B21009_06.xhtml#_idTextAnchor137) *,* *Navigating the Legal Landscape
    of LLM-Generated Code*'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B21009_06.xhtml#_idTextAnchor137) *，* *在LLM生成代码的法律领域中导航*'
- en: '[*Chapter 7*](B21009_07.xhtml#_idTextAnchor180) *,* *Security Considerations
    and Measures*'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B21009_07.xhtml#_idTextAnchor180) *，* *安全性考虑与对策*'
