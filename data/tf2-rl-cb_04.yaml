- en: '*Chapter 4*: Reinforcement Learning in the Real World – Building Cryptocurrency
    Trading Agents'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 4 章*：现实世界中的强化学习——构建加密货币交易智能体'
- en: '**Deep reinforcement learning** (**deep RL**) agents have a lot of potential
    when it comes to solving challenging problems in the real world and a lot of opportunities
    exist. However, only a few successful stories of using deep RL agents in the real
    world beyond games exist due to the various challenges associated with real-world
    deployments of RL agents. This chapter contains recipes that will help you successfully
    develop RL agents for an interesting and rewarding real-world problem: **cryptocurrency
    trading**. The recipes in this chapter contain information on how to implement
    custom OpenAI Gym-compatible learning environments for cryptocurrency trading
    with both discrete and continuous-value action spaces. In addition, you will learn
    how to build and train RL agents for trading cryptocurrency. Trading learning
    environments will also be provided.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**深度强化学习**（**深度 RL**）智能体在解决现实世界中的挑战性问题时具有很大的潜力，并且存在许多机会。然而，现实世界中成功应用深度 RL 智能体的故事较少，除了游戏领域，主要是由于与
    RL 智能体在实际部署中相关的各种挑战。本章包含了一些食谱，帮助你成功开发用于一个有趣且具有回报的现实世界问题的 RL 智能体：**加密货币交易**。本章的食谱包含了如何为加密货币交易实现自定义的、兼容
    OpenAI Gym 的学习环境，这些环境支持离散和连续值的动作空间。此外，你还将学习如何为加密货币交易构建和训练 RL 智能体。交易学习环境也将提供。'
- en: 'Specifically, the following recipes will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，本章将涉及以下食谱：
- en: Building a Bitcoin trading RL platform using real market data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用真实市场数据构建比特币交易强化学习平台
- en: Building an Ethereum trading RL platform using price charts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用价格图表构建以太坊交易强化学习平台
- en: Building an advanced cryptocurrency trading platform for RL agents
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为强化学习智能体构建一个先进的加密货币交易平台
- en: Training a cryptocurrency trading bot using RL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 RL 训练加密货币交易机器人
- en: Let's get started!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code in the book has been extensively tested on Ubuntu 18.04 and Ubuntu
    20.04 and should work with later versions of Ubuntu if Python 3.6+ is available.
    With Python 3.6+ installed, along with the necessary Python packages listed at
    the start of each of recipe, the code should run fine on Windows and macOS X too.
    You should create and use a Python virtual environment named `tf2rl-cookbook`
    to install the packages and run the code in this book. Installing Miniconda or
    Anaconda for Python virtual environment management is recommended.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 书中的代码在 Ubuntu 18.04 和 Ubuntu 20.04 上经过了广泛测试，并且如果安装了 Python 3.6+，它应该也能在后续版本的
    Ubuntu 上运行。安装了 Python 3.6+ 并且根据每个食谱开头列出的必要 Python 包后，这些代码应该在 Windows 和 macOS X
    上也能正常运行。你应该创建并使用一个名为 `tf2rl-cookbook` 的 Python 虚拟环境来安装这些包，并运行本书中的代码。建议安装 Miniconda
    或 Anaconda 来管理 Python 虚拟环境。
- en: 'The complete code for each recipe in each chapter is available here: [https://github.com/PacktPublishing/Tensorflow-2-Reinforcement-Learning-Cookbook](https://github.com/PacktPublishing/Tensorflow-2-Reinforcement-Learning-Cookbook).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个章节中每个食谱的完整代码可以在这里找到：[https://github.com/PacktPublishing/Tensorflow-2-Reinforcement-Learning-Cookbook](https://github.com/PacktPublishing/Tensorflow-2-Reinforcement-Learning-Cookbook)。
- en: Building a Bitcoin trading RL platform using real market data
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用真实市场数据构建比特币交易强化学习平台
- en: This recipe will help you build a cryptocurrency trading RL environment for
    your agents. This environment simulates a Bitcoin trading exchange based on real-world
    data from the Gemini cryptocurrency exchange. In this environment, your RL agent
    can place buy/sell/hold trades and get rewards based on the profit/loss it makes,
    starting with an initial cash balance in the agent's trading account.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将帮助你为智能体构建一个加密货币交易强化学习环境。这个环境模拟了基于来自 Gemini 加密货币交易所的真实数据的比特币交易所。在这个环境中，强化学习智能体可以进行买入/卖出/持有交易，并根据它的利润/亏损获得奖励，初始时智能体的交易账户中会有一笔现金余额。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete this recipe, make sure you have the latest version. You will need
    to activate the `tf2rl-cookbook` Python/conda virtual environment. Make sure to
    update the environment so that it matches the latest conda environment specification
    file (`tfrl-cookbook.yml`) in this cookbook''s code repository. If the following
    `import` statements run without issues, you are ready to get started:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为完成这个食谱，请确保你使用的是最新版本。你需要激活 `tf2rl-cookbook` Python/conda 虚拟环境。确保更新该环境，使其与本书代码库中的最新
    conda 环境规范文件（`tfrl-cookbook.yml`）匹配。如果以下 `import` 语句没有问题，那么你就可以开始了：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, let's begin!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始吧！
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: 'Follow these steps to learn how to implement `CryptoTradingEnv`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤学习如何实现 `CryptoTradingEnv`：
- en: Let's begin by importing the necessary Python modules.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从导入所需的 Python 模块开始：
- en: 'We''ll also be using the `TradeVisualizer` class implemented in `trading_utils.py`.
    We''ll discuss this in more deail when we actually use it:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将使用在 `trading_utils.py` 中实现的 `TradeVisualizer` 类。我们将在实际使用时更详细地讨论这个类：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To make it easy to configure the cryptocurrency trading environment, we will
    set up an environment config dictionary. Notice that our cryptocurrency trading
    environment has been configured so that we can trade Bitcoin based on real data
    from the Gemini cryptocurrency exchange:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了方便配置加密货币交易环境，我们将设置一个环境配置字典。请注意，我们的加密货币交易环境已被配置好，能够基于来自 Gemini 加密货币交易所的真实数据进行比特币交易：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s begin our `CryptoTradingEnv` class definition:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始定义我们的 `CryptoTradingEnv` 类：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll be using a file object as our cryptocurrency exchange data source. We
    must make sure that the data source exists before loading/streaming the data into
    memory:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个文件对象作为加密货币交易所的数据源。我们必须确保在加载/流式传输数据到内存之前，数据源是存在的：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The opening balance in the Agent''s account is configured using `env_config`.
    Let''s initialize the opening account balance based on the configured value:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理账户中的初始余额通过 `env_config` 配置。让我们根据配置的值初始化初始账户余额：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, let''s define the action and observation space for this cryptocurrency
    trading environment using the standard space type definitions provided by the
    OpenAI Gym library:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用 OpenAI Gym 库提供的标准空间类型定义来定义该加密货币交易环境的动作空间和观察空间：
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s define the trade order size that will be executed when the agent places
    a trade:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义代理在进行交易时将执行的交易订单大小：
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With that, we have successfully initialized the environment! Now, let''s move
    on and define the `step(…)` method. You will notice that we have simplified the
    implementation of the `step (…)` method for ease of understanding using two helper
    member methods: `self.execute_trade_action` and `self.get_observation`. We''ll
    define these helper member methods later, once we have finished implementing the
    basic RL Gym environment methods (`step`, `reset`, and `render`) . Now, let''s
    look at the implementation of the `step` method:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至此，我们已成功初始化环境！接下来，让我们定义 `step(…)` 方法。你会注意到，为了简化理解，我们使用了两个辅助成员方法：`self.execute_trade_action`
    和 `self.get_observation`，简化了 `step(…)` 方法的实现。我们将在稍后定义这些辅助方法，等到我们完成基本的 RL Gym 环境方法（`step`、`reset`
    和 `render`）的实现。现在，让我们看看 `step` 方法的实现：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s define the `reset()` method, which will be executed at the start
    of every episode:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们定义 `reset()` 方法，它将在每个 episode 开始时执行：
- en: '[PRE9]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As the next step, we'll define the `render()` method, which will provide us
    with a view into the cryptocurrency trading environment so that we understand
    what's going on! This is where we will be using the `TradeVisualizer` class from
    the `trading_utils.py` file. `TradeVisualizer` helps us visualize the live account
    balance of the Agent as the Agent learns in the environment. The visualizer also
    provides a visual indication of the buy and sell trades that the Agent performs
    by performing actions in the environment. A sample screenshot of the output from
    the `render()` method has been provided here for your reference:![Figure 4.1 –
    A sample rendering of the CryptoTradingEnv environment ](img/B15074_04_01.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步，我们将定义 `render()` 方法，它将为我们提供加密货币交易环境的视图，帮助我们理解发生了什么！在这里，我们将使用来自 `trading_utils.py`
    文件中的 `TradeVisualizer` 类。`TradeVisualizer` 帮助我们可视化代理在环境中学习时的实时账户余额。该可视化工具还通过显示代理在环境中执行的买卖交易，直观地呈现代理的操作。以下是
    `render()` 方法输出的示例截图，供您参考：![图4.1 – CryptoTradingEnv 环境的示例渲染](img/B15074_04_01.jpg)
- en: '[PRE10]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we''ll implement a method that will close all the visualization windows
    once the training is complete:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将实现一个方法，在训练完成后关闭所有可视化窗口：
- en: '[PRE11]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we can implement the `execute_trade_action` method, which we used in the
    `step (…)` method earlier in Step 9\. We''ll split the implementation into three
    steps, one for each order type: Hold, Buy, and Sell. Let''s start with the Hold
    order type as that''s the simplest. You will see why in a bit!'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以实现 `execute_trade_action` 方法，它在之前第9步的 `step(…)` 方法中有所使用。我们将把实现过程分为三个步骤，每个步骤对应一个订单类型：Hold、Buy
    和 Sell。我们先从 Hold 订单类型开始，因为它是最简单的。稍后你会明白为什么！
- en: '[PRE12]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We actually need to implement one more intermediate step before we can move
    on and implement the Buy and Sell order execution logic. Here, we must determine
    the order type (buy versus sell) and then the price of the Bitcoin at the current
    simulated time:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际上，在我们继续实现买入和卖出订单执行逻辑之前，我们需要实现另一个中间步骤。在这里，我们必须确定订单类型（买入或卖出），然后获取当前模拟时间下比特币的价格：
- en: '[PRE13]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we are ready to implement the logic for executing a Buy trade order, as
    follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备好实现执行买入交易订单的逻辑，代码如下：
- en: '[PRE14]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s update the `trades` list with the latest buy trade:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用最新的买入交易更新`trades`列表：
- en: '[PRE15]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The next step is to implement the logic for executing Sell trade orders:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是实现执行卖出交易订单的逻辑：
- en: '[PRE16]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To finish up our trade execution function, we need to add a couple of lines
    of code that will update the account value once the trade order has been executed:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成我们的交易执行函数，我们需要添加几行代码来更新账户价值，一旦交易订单执行完毕：
- en: '[PRE17]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With that, we have finished implementing a Bitcoin trading RL environment powered
    by real BTCUSD data from the Gemini cryptocurrency exchange! Let''s look at how
    we can easily create the environment and run a sample, rather than using a random
    agent in this environment with just six lines of code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到此为止，我们已经完成了一个由Gemini加密货币交易所提供的真实BTCUSD数据驱动的比特币交易强化学习环境的实现！让我们看看如何轻松创建环境并运行示例，而不是在这个环境中使用一个随机代理，所有这一切只需要六行代码：
- en: '[PRE18]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see the sample random agent acting in the `CryptoTradingEnv` environment.
    The `env.render()` function should produce a rendering that looks similar to the
    following:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该能看到在`CryptoTradingEnv`环境中随机代理的示例。`env.render()`函数应该产生类似以下的渲染：
- en: '![Figure 4.2 – A rendering of the CryptoTradingEnv environment showing the
    agent''s current account balance and the buy/sell trade being executed ](img/B15074_04_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 展示CryptoTradingEnv环境的渲染，显示代理的当前账户余额以及买卖交易的执行情况](img/B15074_04_02.jpg)'
- en: Figure 4.2 – A rendering of the CryptoTradingEnv environment showing the agent's
    current account balance and the buy/sell trade being executed
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 展示CryptoTradingEnv环境的渲染，显示代理的当前账户余额以及买卖交易的执行情况
- en: Now, let's see how this all works.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看这一切是如何运作的。
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In this recipe, we implemented the `CryptoTradingEnv` function, which offers
    tabular observations of shape (6, horizon + 1), where the horizon can be configured
    through the `env_config` dictionary. The horizon parameter specifies the horizon
    of the duration of the time window (for example, 3 days) that the Agent is allowed
    to observe the cryptocurrency market data at every step before making a trade.
    Once the Agent takes one of the allowed discrete actions – 0(hold), 1(buy), or
    2(sell) – the appropriate trade is executed at the current exchange price of the
    cryptocurrency (Bitcoin) and the trading account balance is updated accordingly.
    The Agent will also receive a reward based on the profit (or loss) that's made
    through the trades from the start of the episode.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们实现了`CryptoTradingEnv`函数，它提供了形状为(6, horizon + 1)的表格型观察数据，其中horizon可以通过`env_config`字典进行配置。horizon参数指定了时间窗口的持续时间（例如，3天），即Agent在每次交易之前允许观察加密货币市场数据的时间长度。一旦Agent执行了允许的离散动作之一——0（保持）、1（买入）或2（卖出）——相应的交易将在当前的加密货币（比特币）交易价格下执行，并且交易账户余额将随之更新。Agent还将根据从本集开始的交易所获得的利润（或亏损）获得奖励。
- en: Building an Ethereum trading RL platform using price charts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用价格图表构建以太坊交易强化学习平台
- en: This recipe will teach you to implement an Ethereum cryptocurrency trading environment
    for RL Agents with visual observations. The Agent will observe a price chart with
    Open, High, Low, Close, and Volume information over a specified time period to
    take an action (Hold, Buy, or Sell). The objective of the Agent is to maximize
    its reward, which is the profit you would make if you deployed the Agent to trade
    in your account!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将教你如何为RL代理实现一个以太坊加密货币交易环境，提供视觉观察数据。Agent将观察指定时间段内的价格图表，图表包含开盘价、最高价、最低价、收盘价和交易量信息，以便做出决策（保持、买入或卖出）。Agent的目标是最大化其奖励，即如果你将Agent部署到你的账户进行交易时所能获得的利润！
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To complete this recipe, make sure you have the latest version. You will need
    to activate the `tf2rl-cookbook` Python/conda virtual environment. Make sure that
    will update the environment so that it matches the latest conda environment specification
    file (`tfrl-cookbook.yml`), which can be found in this cookbook''s code repository.
    If the following `import` statements run without any issues, you are ready to
    get started:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个食谱，确保你使用的是最新版本。你需要激活`tf2rl-cookbook` Python/conda虚拟环境。确保它会更新环境，使其匹配最新的conda环境规格文件（`tfrl-cookbook.yml`），该文件可以在本食谱的代码库中找到。如果以下`import`语句没有问题，你就可以开始了：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: Let's follow the OpenAI Gym framework in order to implement our learning environment
    interface. We will add some logic that will simulate cryptocurrency trade execution
    and reward the agent appropriately since this will aid your learning.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们遵循OpenAI Gym框架来实现我们的学习环境接口。我们将添加一些逻辑，模拟加密货币交易执行并适当地奖励智能体，因为这将有助于你的学习。
- en: 'Follow these steps to complete your implementation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成你的实现：
- en: 'Let''s begin by configuring the environment using a dictionary:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过使用字典来配置环境：
- en: '[PRE20]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s define the `CryptoTradingVisualEnv` class and load the settings from
    `env_config`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义`CryptoTradingVisualEnv`类并从`env_config`加载设置：
- en: '[PRE21]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As the next step, based on the frequency configuration for the market data
    feed, let''s load the cryptocurrency exchange data from the input stream:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步，根据市场数据源的频率配置，加载来自输入流的加密货币交易所数据：
- en: '[PRE22]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s initialize other environment class variables and define the state and
    action space:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们初始化其他环境类变量，并定义状态和动作空间：
- en: '[PRE23]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s define the `reset` method in order to (re)initialize the environment
    class variables:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义`reset`方法，以便（重新）初始化环境类变量：
- en: '[PRE24]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The key feature of this environment is that the Agent''s observations are images
    of the price chart, similar to the one you can see on a human trader''s computer
    screen. This chart contains flashy plots with red and green bars and candles!
    Let''s define the `get_observation` method in order to return an image of the
    charting screen:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个环境的关键特性是，智能体的观察是价格图表的图像，类似于你在人工交易员的计算机屏幕上看到的图表。这个图表包含闪烁的图形、红绿条和蜡烛！让我们定义`get_observation`方法，以返回图表屏幕的图像：
- en: '[PRE25]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we''ll implement the trade execution logic of the trading environment.
    The current price of the Ethereum cryptocurrency (in USD) must be extracted from
    the market data stream (a file, in this case):'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将实现交易环境的交易执行逻辑。必须从市场数据流中提取以太坊加密货币（以美元计）的当前价格（在本例中为一个文件）：
- en: '[PRE26]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If the Agent decides to execute a buy order, we must calculate the number of
    Ethereum tokens/coins the Agent can buy in a single step and execute the "Buy"
    order at the simulated exchange:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果智能体决定执行买入订单，我们必须计算智能体在单步中可以购买的以太坊代币/币的数量，并在模拟交易所执行“买入”订单：
- en: '[PRE27]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Instead, if the Agent decides to sell, the following logic will execute the
    sell order:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相反，如果智能体决定卖出，以下逻辑将执行卖出订单：
- en: '[PRE28]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s update the account balance to reflect the effect of the Buy/Sell trade:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更新账户余额，以反映买卖交易的影响：
- en: '[PRE29]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We are now ready to implement the `step` method:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备实现`step`方法：
- en: '[PRE30]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s implement a method that will render the current state as an image to
    the screen. This will help us understand what''s going on in the environment while
    the Agent is learning to trade:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们实现一个方法，将当前状态渲染为图像并显示到屏幕上。这将帮助我们理解智能体在学习交易时环境中发生了什么：
- en: '[PRE31]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'That completes our implementation! Let''s quickly check out the environment
    by using a random agent:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就完成了我们的实现！让我们快速查看一下使用随机智能体的环境：
- en: '[PRE32]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should see the sample random agent acting in `CryptoTradinVisualEnv`, wherein
    the agent receives visual/image observations similar to the one shown here:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到示例随机智能体在`CryptoTradinVisualEnv`中执行的情况，其中智能体接收与此处所示相似的视觉/图像观察：
- en: '![Figure 4.3 – Sample observation sent to the learning Agent ](img/B15074_04_03.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 发送给学习智能体的示例观察](img/B15074_04_03.jpg)'
- en: Figure 4.3 – Sample observation sent to the learning Agent
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 发送给学习智能体的示例观察
- en: That's it for this recipe!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，这个食谱完成了！
- en: How it works…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In this recipe, we implemented a visual Ethereum cryptocurrency trading environment
    that provides images as input to the agents. The images contain charting information,
    such as Open, High, Low, Close, and Volume data. This chart looks like what a
    human trader's screen will look like and informs the agent about the current market
    signals.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们实现了一个可视化的以太坊加密货币交易环境，提供图像作为代理的输入。图像包含了图表信息，如开盘、最高、最低、收盘和成交量数据。这个图表看起来就像一个人类交易员的屏幕，向代理提供当前市场的信号。
- en: Building an advanced cryptocurrency trading platform for RL agents
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个高级的加密货币交易平台为RL代理
- en: Instead of allowing the Agent to only take discrete actions, such as buying/selling/holding
    a pre-set amount of Bitcoin or Ethereum tokens, what if we allowed the Agent to
    decide how many crypto coins/tokens it would like to buy or sell? That is exactly
    what this recipe will allow you to create in the form of a `CryptoTradingVisualContinuousEnv`
    RL environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不让代理只采取离散的动作，比如购买/卖出/持有预设数量的比特币或以太坊代币，而是让代理决定它想买或卖多少加密货币/代币呢？这正是这个食谱所要让你实现的功能，创建一个`CryptoTradingVisualContinuousEnv`的RL环境。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete this recipe, you need to ensure you have the latest version. You
    will need to activate the `tf2rl-cookbook` Python/conda virtual environment. Make
    sure that you update the environment so that it matches the latest conda environment
    specification file (`tfrl-cookbook.yml`), which can be found in this cookbook''s
    code repository. If the following `import` statements run without any issues,
    you are ready to get started:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个方案，你需要确保你拥有最新版本的内容。你需要激活`tf2rl-cookbook` Python/conda 虚拟环境。确保你更新环境，以便它符合最新的
    conda 环境规范文件（`tfrl-cookbook.yml`），该文件可以在这个食谱的代码库中找到。如果以下的`import`语句没有任何问题地运行，那么你就可以开始了：
- en: '[PRE33]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做…
- en: This is going to be a complex environment as it uses high-dimensional images
    as observations and allows for continuous, real-value actions to be performed.
    However, you are likely familiar with the components of this recipe due to having
    experience implementing the previous recipes in this chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个复杂的环境，因为它使用高维图像作为观察输入，并允许执行连续的真实值动作。不过，由于你在本章中已经实现了前面几个食谱的经验，你很可能已经熟悉这个食谱的各个组成部分。
- en: 'Let''s get started:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'First, we must define the configuration parameters that are allowed for this
    environment:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要定义该环境允许的配置参数：
- en: '[PRE34]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Let''s jump right into the definition of the learning environment class:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们直接进入学习环境类的定义：
- en: '[PRE35]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This step is straightforward as we simply load the market data into memory
    from the input source:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一步很直接，因为我们只需要将市场数据从输入源加载到内存中：
- en: '[PRE36]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, let''s define the continuous action space and the observation space of
    the environment:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们定义环境的连续动作空间和观察空间：
- en: '[PRE37]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let''s define the outline of the `step` method for the environment. We''ll
    complete the helper method implementations in the following steps:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义环境中`step`方法的大致框架。接下来的步骤中我们将完成帮助方法的实现：
- en: '[PRE38]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The first helper method is the `execute_trade_action` method. The implementation
    in the next few steps should be straightforward, given that the previous recipes
    also implemented the logic behind buying and selling cryptocurrency at an exchange
    rate:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个帮助方法是`execute_trade_action`方法。接下来的几步实现应该很简单，因为前面几个食谱已经实现了在交易所按汇率买卖加密货币的逻辑：
- en: '[PRE39]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'A Buy order at the exchange can be simulated as follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过如下方式模拟交易所中的买入订单：
- en: '[PRE40]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Similarly, a Sell order can be simulated in the following manner:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样地，卖出订单可以通过以下方式模拟：
- en: '[PRE41]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once the Buy/Sell order has been executed, the account balance needs to be
    updated:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦买入/卖出订单执行完毕，账户余额需要更新：
- en: '[PRE42]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To test `CryptoTradingVisualcontinuousEnv`, you can use the following lines
    of code for the `__main__` function:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试`CryptoTradingVisualcontinuousEnv`，你可以使用以下代码行来进行`__main__`函数的测试：
- en: '[PRE43]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '`CryptoTradingVisualcontinuousEnv` provides an RL environment with a trader
    screen-like image as the observation and provides a continuous, real-valued action
    space for the Agents to act in. The actions in this environment are one-dimensional,
    continuous, and real-valued and the magnitude indicates the fraction amount of
    the crypto coins/tokens. If the action has a positive sign (0 to 1), it''s interpreted
    as a Buy order, while if the action has a negative sign (-1 to 0), it''s interpreted
    as a Sell order. The fraction amount is converted into a number of allowable coins
    that can be bought or sold based on the balance in the trading account.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`CryptoTradingVisualcontinuousEnv`提供了一个强化学习环境，观察值是类似交易者屏幕的图像，并为代理提供了一个连续的、实值的动作空间。在这个环境中，动作是单维的、连续的且实值的，大小表示加密货币的购买/出售比例。如果动作为正（0到1），则解释为买入指令；如果动作为负（-1到0），则解释为卖出指令。这个比例值根据交易账户中的余额转换成可以买卖的加密货币数量。'
- en: Training a cryptocurrency trading bot using RL
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用强化学习训练加密货币交易机器人
- en: The soft actor-critic Agent is one of the most popular and state-of-the-art
    RL Agents available and is based on an off-policy, maximum entropy-based deep
    RL algorithm. This recipe provides all the ingredients you will need to build
    a soft actor-critic Agent from scratch using TensorFlow 2.x and train it for cryptocurrency
    (Bitcoin, Ethereum, and so on) trading using real data from the Gemini cryptocurrency
    exchange.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Soft Actor-Critic（SAC）代理是目前最流行、最先进的强化学习代理之一，基于一个脱离策略的最大熵深度强化学习算法。这个配方提供了你从零开始构建SAC代理所需的所有组件，使用TensorFlow
    2.x，并使用来自Gemini加密货币交易所的真实数据来训练它进行加密货币（比特币、以太坊等）交易。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To complete this recipe, make sure you have the latest version. You will need
    to activate the `tf2rl-cookbook` Python/conda virtual environment. Make sure that
    you update the environment so that it matches the latest conda environment specification
    file (`tfrl-cookbook.yml`), which can be found in this cookbook''s code repository.
    If the following `import` statements run without any issues, you are ready to
    get started:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个配方，请确保你使用的是最新版本。你需要激活`tf2rl-cookbook`的Python/conda虚拟环境。确保更新环境，使其与最新的conda环境规格文件（`tfrl-cookbook.yml`）匹配，该文件可以在本配方的代码库中找到。如果以下`import`语句没有问题，说明你可以开始操作了：
- en: '[PRE44]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How to do it…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: This recipe will guide you through the step-by-step process of implementing
    the SAC Agent. It will also help you train the agent in the cryptocurrency trading
    environments so that you can automate your profit-making machine!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将指导你逐步实现SAC代理的过程，并帮助你在加密货币交易环境中训练代理，从而实现自动化的盈利机器！
- en: 'Let''s gear up and begin the implementation:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备好，开始实现：
- en: 'SAC is an actor-critic Agent, so it has both the actor and the critic components.
    Let''s begin by defining our actor neural network using TensorFlow 2.x:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SAC是一个演员-评论家代理，所以它有演员和评论家两个组件。让我们先定义使用TensorFlow 2.x的演员神经网络：
- en: '[PRE45]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, let''s define the critic neural network:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义评论家神经网络：
- en: '[PRE46]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Given the current model weights and the target model weights, let''s implement
    a quick function that will slowly update the target weights using `tau` as the
    averaging factor. This is like the Polyak averaging step:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定当前模型的权重和目标模型的权重，让我们实现一个快速的函数，利用`tau`作为平均因子，慢慢更新目标权重。这就像Polyak平均步骤：
- en: '[PRE47]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We are now ready to initialize our SAC Agent class:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备初始化我们的SAC代理类：
- en: '[PRE48]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'As the next step, we''ll initialize the actor network and print a summary of
    the actor neural network:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为下一步，我们将初始化演员网络，并打印演员神经网络的摘要：
- en: '[PRE49]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, we''ll define the two critic networks and print the summary of the critic
    neural network as well:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义两个评论家网络，并打印评论家神经网络的摘要：
- en: '[PRE50]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s initialize the `alpha` temperature parameter and the target entropy:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们初始化`alpha`温度参数和目标熵：
- en: '[PRE51]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We''ll also initialize the other hyperparameters of SAC:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将初始化SAC的其他超参数：
- en: '[PRE52]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'That completes the `__init__` method of the SAC agent. Next, we''ll implement
    a method that will (pre)process the action that''s taken:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这完成了SAC代理的`__init__`方法。接下来，我们将实现一个方法来（预）处理采取的动作：
- en: '[PRE53]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We are now ready to implement the `act` method in order to generate the SAC
    agent''s action, given a state:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备实现`act`方法，以便在给定状态下生成SAC代理的动作：
- en: '[PRE54]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In order to save experiences to the Replay memory, let''s implement the `remember`
    function:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将经验保存到回放记忆中，让我们实现`remember`函数：
- en: '[PRE55]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, let''s begin implementing the experience replay process. We''ll start
    by initializing the replay method. We''ll complete the implementation of the replay
    method in the upcoming steps:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始实现经验回放过程。我们将从初始化回放方法开始。我们将在接下来的步骤中完成回放方法的实现：
- en: '[PRE56]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Let''s start a persistent `GradientTape` function and begin accumulating gradients.
    We''ll do this by processing the actions and obtaining the next set of actions
    and log probabilities:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动一个持久化的`GradientTape`函数，并开始累积梯度。我们通过处理动作并获取下一组动作和对数概率来实现这一点：
- en: '[PRE57]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'With that, we can now compute the losses of the two critic networks:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样，我们现在可以计算两个评论者网络的损失：
- en: '[PRE58]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The current state-action and log probabilities, as prescribed by the actor,
    can be computed as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前的状态-动作对和由演员提供的对数概率可以通过以下方式计算：
- en: '[PRE59]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We can now compute the actor loss and apply gradients to the critic:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以计算演员的损失并将梯度应用到评论者上：
- en: '[PRE60]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Similarly, we can compute and apply the actor''s gradients:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，我们可以计算并应用演员的梯度：
- en: '[PRE61]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, let''s log the summaries to TensorBoard:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将摘要记录到TensorBoard：
- en: '[PRE62]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'That completes our experience replay method. Now, we can move on to the `train`
    method''s implementation. Let''s begin by initializing the `train` method. We
    will complete the implementation of this method in the following steps:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这完成了我们的经验回放方法。现在，我们可以继续`train`方法的实现。让我们从初始化`train`方法开始。我们将在接下来的步骤中完成此方法的实现：
- en: '[PRE63]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now, we are ready to start the main training loop. First, let''s handle the
    end of episode case:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备开始主训练循环。首先，让我们处理结束集的情况：
- en: '[PRE64]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'For every step into the environment, the following steps will need to be executed
    for the SAC agent to learn:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次进入环境时，SAC代理学习需要执行以下步骤：
- en: '[PRE65]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'With the agent updates taken care of, we can now log some more useful information
    to TensorBoard:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理完代理更新后，我们现在可以将一些有用的信息记录到TensorBoard中：
- en: '[PRE66]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'As the last step in our train method implementation, we can save the actor
    and critic models to facilitate resuming our training or reloading from a checkpoint:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为我们`train`方法实现的最后一步，我们可以保存演员和评论者模型，以便在需要时恢复训练或从检查点重新加载：
- en: '[PRE67]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Now, we''ll actually implement the `save_model` method we referenced previously:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将实际实现之前引用的`save_model`方法：
- en: '[PRE68]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Let''s quickly implement a method that will load the actor and critic states
    from the saved model so that we can restore/resume from a previously saved checkpoint
    when needed:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速实现一个方法，从保存的模型中加载演员和评论者的状态，以便在需要时可以从之前保存的检查点恢复或继续：
- en: '[PRE69]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'To run the SAC agent in "test" mode, we can implement a helper method:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要以“测试”模式运行SAC代理，我们可以实现一个辅助方法：
- en: '[PRE70]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'That completes our SAC agent implementation. We are now ready to train the
    SAC agent in `CryptoTradingContinuousEnv`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这完成了我们的SAC代理实现。我们现在准备在`CryptoTradingContinuousEnv`中训练SAC代理：
- en: '[PRE71]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How it works…
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'SAC is a powerful RL algorithm and has proven to be effective across a variety
    of RL simulation environments. SAC maximizes the entropy of the agent''s policy,
    in addition to optimizing for the maximum episodic rewards. You can watch the
    progress of the agent as it learns to trade using the TensorBoard since this recipe
    includes code for logging the agent''s progress along the way. You can launch
    TensorBoard using the following command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: SAC是一种强大的RL算法，已证明在各种RL仿真环境中有效。SAC不仅优化最大化每集奖励，还最大化代理策略的熵。您可以通过TensorBoard观察代理的学习进度，因为这个示例包括了记录代理进展的代码。您可以使用以下命令启动TensorBoard：
- en: '[PRE72]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The preceding command will launch TensorBoard. You can access it with your
    browser at the default address of `http://localhost:6006`. A sample TensorBoard
    screenshot has been provided here for reference:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将启动TensorBoard。您可以通过浏览器在默认地址`http://localhost:6006`访问它。这里提供了一个TensorBoard截图供参考：
- en: '![Figure 4.4 – A screenshot of TensorBoard showing the SAC agent''s training
    progress in CryptoTradingContinuousEnv ](img/B15074_04_04.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – TensorBoard截图，显示SAC代理在CryptoTradingContinuousEnv中的训练进度](img/B15074_04_04.jpg)'
- en: Figure 4.4 – A screenshot of TensorBoard showing the SAC agent's training progress
    in CryptoTradingContinuousEnv
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – TensorBoard截图，显示SAC代理在CryptoTradingContinuousEnv中的训练进度
- en: That concludes this recipe and this chapter. Happy training!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章节的内容。祝你训练愉快！
