- en: Making the First Steps in the World of AI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AI世界的第一步
- en: '*From the bronze giant Talos, to Symbolic Systems and Neural Networks: how
    AI has been shaped and used in video games.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*从青铜巨人塔洛斯到符号系统和神经网络：AI是如何在视频游戏中被塑造和使用的。*'
- en: Welcome, reader, to the beginning of our journey in Artificial Intelligence,
    or AI for short. Have you ever wondered about how those hard-working peons in
    *Warcraft* explore complicated maps? Or, how those perky ghosts in *Pac-Man* can
    get you wherever you are? Or perhaps how your opponents in *Final Fantasy* optimize
    their attacks to slaughter your team?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎读者，欢迎来到我们人工智能之旅的开始，或者简称为AI。你有没有想过那些在《魔兽世界》中辛勤工作的平民是如何探索复杂的地图的？或者，那些在《吃豆人》中活泼的幽灵是如何把你带到任何地方的？或者，也许你的对手在《最终幻想》中是如何优化攻击来屠杀你的团队的？
- en: '![](img/68ed6eec-3c27-47e4-bbf6-7d203106baa5.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68ed6eec-3c27-47e4-bbf6-7d203106baa5.png)'
- en: A screenshot from Final Fantasy XV [Square Enix, 2016] during a battle.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 来自《最终幻想XV》[Square Enix, 2016]的战斗截图。
- en: Then you've come to the right place!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 那你就来对地方了！
- en: In this chapter, we will explore the prerequisites to becoming an AI game developer
    and how AI is used in the game development pipeline. Then, we will take a look
    at the history of AI in general and in video games, and learn how the conjunctive
    effort of many brilliant minds built AI as we know it today. Afterwards, we will
    discuss the AI Framework underneath the Unreal Engine, since this book will focus
    on Unreal.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨成为AI游戏开发者的先决条件以及AI在游戏开发流程中的应用。然后，我们将回顾AI的一般历史和在视频游戏中的历史，了解众多杰出人士的联合努力是如何构建出我们今天所知道的AI。之后，我们将讨论Unreal引擎下的AI框架，因为本书将专注于Unreal。
- en: Finally, we will plan our journey and get a general overview of the topics that
    the different chapters in this book deal with.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将规划我们的旅程，并对本书不同章节所涉及的主题有一个总体了解。
- en: Before starting...
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开始之前...
- en: '... I''d like to reply to some questions that some of you might already have.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '...我想回答一些你们中的一些人可能已经有的问题。'
- en: '**Does this book take into account Blueprint or C++?**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**这本书考虑了Blueprint和C++吗？**'
- en: This book will explain both, so don't worry.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将解释这两者，所以请放心。
- en: If you don't know C++, you can follow along with the Blueprint part of this
    book, and if you so wish, you can try the C++ one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道C++，你可以跟随本书的Blueprint部分，如果你愿意，也可以尝试C++部分。
- en: If, on the other hand, you are a programmer that prefers C++, then don't worry!
    This book will explain how to deal with AI in Unreal using C++.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果，另一方面，你是一个更喜欢C++的程序员，那么请不要担心！本书将解释如何在Unreal中使用C++处理AI。
- en: '**There are so many books around about AI, why should I choose this one?**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于AI的书有很多，我为什么应该选择这本书？**'
- en: Different books explain different aspects of AI, and often they are not mutually
    exclusive, but rather they complement each other.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的书解释了AI的不同方面，而且它们往往不是相互排斥的，而是相互补充的。
- en: However, the major point of interest of this book is that it is a good compromise
    between the theory of the different AI systems that are present in Unreal and
    practical applications, since the whole book is full of concrete examples.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这本书的主要亮点在于它很好地平衡了Unreal中存在的不同AI系统的理论以及实际应用，因为整本书都充满了具体的例子。
- en: '**Does this book provide a test project/materials to work on?**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**这本书提供测试项目/材料来工作吗？**'
- en: Absolutely, yes. You will be able to download the content for this book from
    the following link: [http://hog.red/AIBook2019ProjectFiles](http://hog.red/AIBook2019ProjectFiles)
    (the link is case-sensitive).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对，是的。你将能够从以下链接下载本书的内容：[http://hog.red/AIBook2019ProjectFiles](http://hog.red/AIBook2019ProjectFiles)（链接区分大小写）。
- en: '**I am already using the Unreal Engine for Artificial Intelligence, is this
    book good for me?**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**我已经在使用Unreal Engine进行人工智能开发，这本书对我有帮助吗？**'
- en: This all depends on your level of knowledge. In fact, in the first part of this
    book, we will talk mainly about the AI framework that's built into the Unreal
    Engine and how to use it. This is probably the part you are more familiar with if
    you have had some experience with Unreal for AI. However, this book will dive
    deep in these topics, that even an expert could find some useful tips. The second
    part, instead, will discuss some debugging methods for Game AI and will also explain
    how to extend them (mainly with C++). Feel free to have a look at the outline,
    and decide if this book suits you.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都取决于你的知识水平。实际上，本书的第一部分，我们将主要讨论内置在虚幻引擎中的AI框架以及如何使用它。如果你在虚幻引擎AI方面有一些经验，这可能是你更熟悉的部分。然而，本书将深入探讨这些主题，即使是专家也能找到一些有用的提示。相反，第二部分将讨论游戏AI的一些调试方法，并解释如何扩展它们（主要使用C++）。请随意查看大纲，并决定这本书是否适合你。
- en: '**I am already using another game engine, is this book still good for me?**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**我已经在使用另一个游戏引擎，这本书对我还有用吗？**'
- en: Well, as much as I'd like to say that this is a general book about AI, it isn't—at
    least not completely. Although the main focus will still be toward the main concepts
    of AI, we will look at implementing them in Unreal. However, this book will heavily
    rely on the built-in AI framework in Unreal. Thus, I encourage you to read more
    generalized books about AI to get a better understanding. On the other hand, you
    can always try. Maybe, by understanding some concepts here, other books will be
    easier to read and you will be able to transfer this knowledge into the game engine
    of your choice.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，尽管我很想说我写的是一本关于AI的通用书籍，但这并不是——至少不是完全如此。尽管主要焦点仍然是AI的主要概念，但我们将探讨如何在虚幻引擎中实现它们。然而，这本书将大量依赖虚幻引擎内置的AI框架。因此，我鼓励你阅读更多关于AI的通用书籍，以获得更好的理解。另一方面，你总是可以尝试。也许，通过理解这里的一些概念，其他书籍会更容易阅读，你将能够将这种知识转移到你选择的任何游戏引擎中。
- en: '**I''m a student/teacher, is this book suitable for teaching in class?**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**我是一个学生/教师，这本书适合在课堂上教学吗？**'
- en: 'Absolutely, yes. I know how important it is to find good resources when teaching
    a class, and I''m writing this book with this intention in mind. As a result,
    regardless of whether you are a student or a teacher, you will find a section
    at the end of each chapter with some exercises that you can improve your skills
    this (or propose them to your students, if you are a teacher). Also, you can find
    some more integrative material here: [http://hog.red/AIBook2019LearningMaterial](http://hog.red/AIBook2019LearningMaterial)
    (the link is case-sensitive).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对是的。我知道找到好的资源对于教学来说有多重要，我写这本书正是出于这个目的。因此，无论你是学生还是教师，你都会在每一章的末尾找到一个部分，其中包含一些练习，你可以通过这些练习提高你的技能（或者如果你是教师，你可以将这些练习推荐给你的学生）。此外，你还可以在这里找到一些更综合的材料：[http://hog.red/AIBook2019LearningMaterial](http://hog.red/AIBook2019LearningMaterial)（链接对大小写敏感）。
- en: '**Is this book going to cover everything, everything, and everything about
    AI in Unreal and all its systems?**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**这本书是否会涵盖关于虚幻引擎及其所有系统的AI的方方面面？**'
- en: Well, despite my best efforts to describe each of the systems in great detail,
    covering everything is an impossible task, due also to the complexity of such
    big engine. However, I'm confident to say that this book covers most of the aspects
    related to each AI system within the Unreal Engine, including how to extend the
    built-in systems and how to efficiently perform debugging. Thus, I can certainly
    say that this book is very comprehensive.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我尽力详细描述每个系统，但涵盖所有内容是不可能的任务，这也归因于如此大型引擎的复杂性。然而，我有信心地说，这本书涵盖了与虚幻引擎中每个AI系统相关的几乎所有方面，包括如何扩展内置系统以及如何高效地进行调试。因此，我确实可以说这本书非常全面。
- en: Prerequisites
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前置条件
- en: 'Since this book is targeted at people who are getting started with AI in game
    development, I will not assume any prior/background knowledge in AI. However,
    please take the following into account:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书面向的是刚开始在游戏开发中使用AI的人群，因此我不会假设读者有任何关于AI的先验/背景知识。然而，请考虑以下几点：
- en: '*Blueprint users*: You should be familiar with Blueprint programming, and know
    how a Blueprint graph works in general.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*蓝图用户*：你应该熟悉蓝图编程，并了解蓝图图的一般工作原理。'
- en: '*C++ users*: You should be familiar with programming, especially with the C
    family languages (such as C, C#, C++, or even Java), and in particular with C++,
    since it''s the language that Unreal Engine uses. Being familiar with the Unreal
    Engine C++ API is a great bonus, although not strictly required. So, even if you
    are not a master, don''t worry—follow along and you will learn.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C++ 用户*：您应该熟悉编程，特别是 C 家族语言（如 C、C#、C++ 或甚至 Java），尤其是 C++，因为这是 Unreal Engine
    使用的语言。熟悉 Unreal Engine C++ API 是一个很大的加分项，尽管不是强制性的。所以，即使您不是专家，也不要担心——跟随步骤，您将会学到。'
- en: Also, it would be great if you had some knowledge about vector math and physical
    kinematic principles – at least the ones commonly used in video games. Either
    way, in case you are rusty on those, don't worry too much, since it is not required
    for this book; however, it is *nice to have* if you're looking for a job as an
    AI Developer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您对矢量数学和物理运动学原理有所了解——至少是视频游戏中常用的那些——那就太好了。无论如何，如果您对这些内容不太熟悉，也不要过于担心，因为这本书并不要求您必须掌握；然而，如果您在寻找人工智能开发者的工作，这将是一个加分项。
- en: Installing and preparing the software
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和准备软件
- en: Before you continue reading, let's install the software we need. In particular,
    we will need Unreal Engine and Visual Studio.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在您继续阅读之前，让我们安装我们需要的软件。特别是，我们需要 Unreal Engine 和 Visual Studio。
- en: Unreal Engine
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unreal Engine
- en: Let's talk about Unreal Engine. After all, this is a book about how to develop
    game AI within this wonderful game engine.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来谈谈 Unreal Engine。毕竟，这是一本关于如何在这样一个优秀的游戏引擎中开发游戏人工智能的书。
- en: '*Unreal Engine* is a game engine that was developed by *Epic Games*. It was
    first released in 1998, and nowadays it is one of the most used (open) game engines
    (alongside Unity) due to its powerful features. The following screenshot shows
    the main interface of Unreal Engine:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*Unreal Engine* 是由 *Epic Games* 开发的一款游戏引擎。它最初于 1998 年发布，如今由于它强大的功能，它是使用最广泛的（开源）游戏引擎之一（与
    Unity 并列）。下面的截图显示了 Unreal Engine 的主界面：'
- en: '![](img/9c8d5e35-5810-4640-8cd6-75071136d49b.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9c8d5e35-5810-4640-8cd6-75071136d49b.png)'
- en: Screenshot of the main interface of Unreal Engine
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 主界面截图
- en: We need to have the latest version of Unreal Engine installed. You can find
    it by visiting [https://www.unrealengine.com/en-US/what-is-unreal-engine-4](https://www.unrealengine.com/en-US/what-is-unreal-engine-4)
    . Unless you took Unreal Engine from the source code ([https://docs.unrealengine.com/en-us/Programming/Development/BuildingUnrealEngine](https://docs.unrealengine.com/en-us/Programming/Development/BuildingUnrealEngine)),
    you will have the *Epic Launcher* installed. If you are a Blueprint user, and
    do not intend to use C++, then this is enough for you. If, on the other hand,
    you will be using C++, you will need to perform a couple of extra steps.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装最新版本的 Unreal Engine。您可以通过访问 [https://www.unrealengine.com/en-US/what-is-unreal-engine-4](https://www.unrealengine.com/en-US/what-is-unreal-engine-4)
    来找到它。除非您是从源代码获取的 Unreal Engine ([https://docs.unrealengine.com/en-us/Programming/Development/BuildingUnrealEngine](https://docs.unrealengine.com/en-us/Programming/Development/BuildingUnrealEngine))，否则您将安装
    *Epic Launcher*。如果您是 Blueprint 用户，并且不打算使用 C++，那么这已经足够了。如果您将使用 C++，您需要执行几个额外的步骤。
- en: 'When installing the Engine, you will need to check some options (if you are
    using C++). In particular, we need to check that we have both "***Engine Source***"
    and "***Editor symbols for debugging***", as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装引擎时，如果您使用的是 C++，您需要检查一些选项。特别是，我们需要确认我们既有 “***Engine Source***” 也有 “***Editor
    symbols for debugging***”，如下面的截图所示：
- en: '![](img/1fbaf220-3e90-4a85-a4b9-43bade811eeb.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1fbaf220-3e90-4a85-a4b9-43bade811eeb.png)'
- en: By doing so, we will be able to navigate through the C++ Engine Source and also
    have a full stack of calls in the case of a crash (so you will know what went
    wrong).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们能够导航 C++ 引擎源代码，并在发生崩溃时拥有完整的调用栈（这样您就会知道出了什么问题）。
- en: Visual Studio
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio
- en: You won't need this if you are using Blueprint—this is for C++ users only.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Blueprint，您不需要这样做——这仅适用于 C++ 用户。
- en: In fact, we will need an IDE to edit our C++ code. We are going to use *Visual
    Studio*, since it's well-integrated with Unreal. You will be able to download
    *Visual Studio Community Edition* for free through the official website, [https://www.visualstudio.com](https://www.visualstudio.com),
    or from [https://visualstudio.microsoft.com/vs/](https://visualstudio.microsoft.com/vs/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们需要一个集成开发环境（IDE）来编辑我们的 C++ 代码。我们将使用 *Visual Studio*，因为它与 Unreal 集成得很好。您可以通过官方网站
    [https://www.visualstudio.com](https://www.visualstudio.com) 或 [https://visualstudio.microsoft.com/vs/](https://visualstudio.microsoft.com/vs/)
    免费下载 *Visual Studio Community Edition*。
- en: 'You may also find this short guide on how to set up *Visual Studio *so that
    it works with Unreal Engine useful: [https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也会发现这个关于如何设置*Visual Studio*以便与Unreal Engine一起工作的简短指南很有用：[https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup)。
- en: Once you have everything installed and ready to go, we can continue with the
    rest of this chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装好所有东西并准备就绪，我们就可以继续本章的其余部分。
- en: If you are a *MacOS* user, there is a version of *Visual Studio* for *MacOS*.
    You can use that one. Alternatively, you might be able to use *XCode*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名*MacOS*用户，有一个适用于*MacOS*的*Visual Studio*版本。你可以使用那个版本。或者，你可能能够使用 *XCode*。
- en: Becoming an AI Game Developer
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为AI游戏开发者
- en: Ever dreamed of becoming an AI Game Developer? Or maybe just be able to write
    "*intelligent*" programs? Then this book is for you!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你曾梦想过成为一名AI游戏开发者吗？或者只是能够编写"*智能*"程序？那么这本书就是为你准备的！
- en: However, I need to advise you that this is no easy task.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我必须建议你，这并不是一件容易的任务。
- en: Game development and design are some of the most extensive works of art around.
    This is due to a large amount of expertise that is required to bring a game to
    life. You can get an idea of this by just looking at the final credits in a game.
    They are endless and contain names of people who have dedicated a lot of their
    time to the game in various roles. AI development is a central part of this big
    process, and it requires years to master it, like most things in life. As such,
    iteration is key, and a great place to get started in this book.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发和设计是周围最广泛的艺术作品之一。这是由于将游戏带到生命中所需要的专业知识量很大。你只需看看游戏中的最终字幕就能得到这个想法。它们是无穷无尽的，包含了许多人在各种角色上为游戏投入了大量时间的名字。AI开发是这个大过程中的一个核心部分，它需要多年的时间来掌握，就像生活中的大多数事情一样。因此，迭代是关键，这本书是一个开始的好地方。
- en: What it means to be an AI Game Developer
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为AI游戏开发者意味着什么
- en: First of all, you will need to master maths, physics, and coding. Also, you
    will mostly probably work in an interdisciplinary team, which includes artists,
    designers, and programmers. In fact, you will probably work with existing proprietary
    software technology, and it's required that you are able to build new technology
    to fulfill the project's technical requirements. You will be asked to research
    coding techniques and algorithms so that you keep yourself up to date on technological
    developments and advancements in the game industry and to identify technical and
    developmental risks/obstacles and generate solutions to overcome identified risks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要掌握数学、物理和编程。此外，你很可能会在一个跨学科团队中工作，这个团队包括艺术家、设计师和程序员。实际上，你可能需要与现有的专有软件技术合作，并且需要你能够构建新技术以满足项目的技术要求。你将被要求研究编码技术和算法，以便你能够跟上游戏行业的技术发展和进步，并识别技术和发展风险/障碍，并生成解决方案来克服已识别的风险。
- en: On the other hand, you will be able to give life to characters and entities
    in video games. After all the frustrations that you might go through, you will
    be the first one to assist, or better, generate an intelligent behavior in games.
    It takes time and is quite challenging, so don't be too hard on yourself in the
    early stages. Once you achieve some real AI in your game that can think on its
    own, this is an achievement worthy of rewarding yourself for.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，你将能够赋予视频游戏中的角色和实体生命。在你可能经历的所有挫折之后，你将是第一个提供帮助的人，或者更好的是，在游戏中生成智能行为。这需要时间，而且相当具有挑战性，所以在早期阶段不要对自己太苛刻。一旦你在游戏中实现了可以独立思考的真正AI，这将是一个值得奖励自己的成就。
- en: For beginners in AI, this book will help you set the first stones toward that
    goal. For experts, this book will provide a useful guide to refresh the different
    AI systems in Unreal, and explore in-depth features that might help you in your
    work.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于AI的初学者来说，这本书将帮助你为那个目标奠定第一块基石。对于专家来说，这本书将提供一份有用的指南，帮助你刷新Unreal中的不同AI系统，并深入探索可能有助于你工作的功能。
- en: AI in the game development process
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏开发过程中的AI
- en: The game development pipeline might vary a lot, depending on which studio you
    visit, but all of them lead to the creation of a video game. This is not a book
    about pipelines, so we won't explore them, but it's important to have a rough
    idea of where AI is collocated.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发流程可能会因你访问的哪个工作室而大不相同，但它们都指向了视频游戏的创作。这不是一本关于流程的书，所以我们不会探索它们，但了解AI大致的位置是很重要的。
- en: 'In fact, AI intersects with many parts of the game development pipeline. Here
    are some of the main ones:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，AI与游戏开发流程的许多部分相交。以下是一些主要的部分：
- en: '**Animation**: It might surprise some of you, but there is a lot of research
    going on regarding this topic. Sometimes, animation and AI overlap. For instance,
    one of the problems that developers need to solve consists of how we can procedurally
    generate hundreds of animations for characters, which can behave realistically,
    and also how they interact with each other. In fact, solving the inverse kinematic
    (IK) is a mathematical problem, but which of the infinite solutions to choose
    to achieve a goal (or just to provide a realistic look) is an AI task. We won''t
    face this specific problem during this book, but the last chapter will provide
    pointers to places where you can learn more about this.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：可能会让一些人感到惊讶，但关于这个主题正在进行很多研究。有时，动画和AI会重叠。例如，开发者需要解决的一个问题是如何以程序化的方式为角色生成数百个动画，这些动画可以表现得非常逼真，以及它们如何相互交互。实际上，解决逆运动学（IK）是一个数学问题，但选择无限多解中的哪一个来实现目标（或者只是提供一个逼真的外观）是一个AI任务。在这本书中，我们不会面对这个具体问题，但最后一章将提供一些指向你可以了解更多信息的地点。'
- en: '**Level Design**: If a game automatically produces levels, then AI plays an
    important role in that game. *Procedural Content Generation* (PCG) in games is
    a hot topic at the moment. There are games that are entirely based on PCG. Different
    tools to procedurally generate height maps can help Level Designers achieve realistic
    looking landscapes and environments. This is indeed a wide topic to explore.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关卡设计**：如果一个游戏能够自动生成关卡，那么AI在这个游戏中就扮演着重要的角色。*程序性内容生成*（PCG）在游戏中是一个热门话题。有些游戏完全基于PCG。不同的工具可以用来程序化生成高度图，帮助关卡设计师实现看起来逼真的景观和环境。这确实是一个值得深入探讨的广泛话题。'
- en: '**Game Engine**: Of course, inside the game engine, there are many AI algorithms
    that come into play. Some of these are specific for agents, while others just
    improve the engine''s features and/or tasks. These represent the most vast category,
    in which they can vary from simple algorithms to adjust a Bezier curve based on
    the context, to implementing behavior trees or finite state machines for animations.
    Under the hood, there is a lot going on here. We will explore some of these concepts
    in this book, but the message to take home is that an algorithm can be adapted
    to solve similar problems in different fields. In fact, if Finite State Machines
    (FSMs) are used to make decisions, why not use them to "*decide*" which animation
    to play? Or why not even handle the whole game logic (i.e. the blueprint visual
    scripting in Unreal Engine)?'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏引擎**：当然，在游戏引擎内部，有很多AI算法在发挥作用。其中一些是针对代理的特定算法，而另一些则只是改进了引擎的功能和/或任务。这些构成了最广泛的类别，它们可以从简单的调整贝塞尔曲线的算法到实现用于动画的行为树或有限状态机。在底层，这里有很多事情在进行。在这本书中，我们将探讨一些这些概念，但要记住的是，一个算法可以被调整来解决不同领域中的类似问题。实际上，如果有限状态机（FSMs）被用来做出决策，为什么不用它们来“决定”播放哪个动画？或者为什么不甚至处理整个游戏逻辑（即Unreal引擎中的蓝图可视化脚本）？'
- en: '**Non-Player Characters** (**NPCs**): This is the most visible example of using
    AI in games, and this is also the most obvious AI to the Player (we will explore
    more about the relationship between the AI and the player in [Chapter 14](d9a581ce-adca-46fe-8f95-a78b762ebc46.xhtml),
    G*oing Beyond*). This is what most of this book is focused on; that is, from moving
    the character (for instance, with a Pathfinding Algorithm) to making decisions
    (i.e. with Behavior trees), or collaborate with other NPCs (multi-agent systems).'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非玩家角色**（**NPCs**）：这是在游戏中使用AI的最明显例子，也是玩家最明显的AI（我们将在第14章“超越”中探讨AI与玩家之间的关系）。这本书的大部分内容都集中在这一点上；也就是说，从移动角色（例如，使用寻路算法）到做出决策（即使用行为树），或者与其他NPC合作（多代理系统）。'
- en: Unfortunately, we don't have the space to deal with all of these topics in this
    book. Therefore, we will just be focusing on the last part (NPCs), and explore
    the AI Framework that's built into Unreal.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，我们在这本书中没有足够的空间来处理所有这些主题。因此，我们将只关注最后一部分（NPCs），并探索内置在Unreal中的AI框架。
- en: A bit of history
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点历史
- en: Before venturing on our journey, I believe that having a general overview of
    the history of AI and AI in games might be beneficial. Of course, you can skip
    this part if you are a more hands-on type of person who cannot wait to getting
    down to programming AI.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这段旅程之前，我相信对人工智能和游戏人工智能的历史有一个大致的了解可能会很有益。当然，如果你是一个更倾向于动手操作、迫不及待想要开始编程人工智能的人，你可以跳过这部分内容。
- en: What is AI?
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是人工智能？
- en: This is a very interesting question, which doesn't have a unique answer. In
    fact, different answers lead to different aspects of AI. Let's explore some (of
    many) definitions that have been given by different scholars (in chronological
    order).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有趣的问题，它没有唯一的答案。实际上，不同的答案会引导我们了解人工智能的不同方面。让我们探索一些（众多）不同学者（按时间顺序）给出的定义。
- en: 'Actually, Russell and Norvig, in their book, organized these specific definitions
    into four categories. Here is their schema:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在他们的书中，Russell和Norvig将这些特定的定义组织成了四个类别。以下是他们的框架：
- en: '![](img/981bfe0d-8e8f-412c-b761-38ef9cbc0ab1.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/981bfe0d-8e8f-412c-b761-38ef9cbc0ab1.png)'
- en: 'Russell and Norvig''s four categories. Top-left: "Systems that think like humans".
    Top-Right: "Systems that think rationally". Bottom-Left: "Systems that act like
    humans". Bottom-Right: "Systems that act rationally".'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Russell和Norvig的四个类别。左上角：“像人类一样思考的系统”。右上角：“理性思考的系统”。左下角：“像人类一样行动的系统”。右下角：“理性行动的系统”。
- en: We don't have the time to go into detail about the question "*What is AI?*",
    since this could fill up another book on its own, but the last chapter of this
    book will also include some philosophical reference where you can expand your
    knowledge on this topic.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有时间详细探讨“什么是人工智能？”这个问题，因为这可以单独填满一本书，但本书的最后一章也将包括一些哲学参考，你可以在这里扩展你对这个主题的了解。
- en: A glance into the past
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾过去
- en: It might come unexpected to some of you, but the story of AI started well before
    computers. In fact, even ancient Greeks hypothesized the existence of intelligence
    machines. A famous example is the bronze giant Talos, who protected the city of
    Crete from invaders. Another is the golden helpers of Hephaestus, who helped God
    in his volcano forge along with the Cyclops. In the XVII century, René Descartes
    wrote about automatons that could think, and believed that animals were do different
    from machines, which could be replicated with pulleys, pistons, and cams.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些人来说，人工智能的故事始于计算机之前。事实上，甚至古希腊人也假设了智能机器的存在。一个著名的例子是青铜巨人塔洛斯，它保护克里特城免受入侵者。另一个例子是赫菲斯托斯的金色助手，它们帮助上帝在火山锻造中工作，还有独眼巨人。在17世纪，勒内·笛卡尔写下了关于能够思考的自动机，并相信动物与机器不同，可以用滑轮、活塞和凸轮复制。
- en: However, the core of this story starts in 1931, when the Austrian logician,
    mathematician, and philosopher Kurt Gödel proved that all the true statements
    in the first-order logic are derivable. On the other hand, this is not true for
    higher order logics, in which some true (or false) statements are unprovable.
    This made first-order logic a good candidate to automate derived logical consequences.
    Sounds complicated? Well, you can imagine how that sounded to the ears of his
    traditionalist contemporaries.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个故事的核心始于1931年，当时奥地利逻辑学家、数学家和哲学家库尔特·哥德尔证明了所有一阶逻辑中的真命题都是可推导的。另一方面，这在高阶逻辑中并不成立，其中一些真（或假）命题是无法证明的。这使得一阶逻辑成为自动推导逻辑后果的良好候选者。听起来很复杂吗？嗯，你可以想象这对他的传统主义同代人来说听起来是怎样的。
- en: '![](img/d3fab71d-5a35-4d94-9d8a-a4e9ee4434ed.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3fab71d-5a35-4d94-9d8a-a4e9ee4434ed.png)'
- en: Photo of Alan Turing at the age of 16
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 阿兰·图灵16岁时的照片
- en: 'In 1937, Alan Turing, an English computer scientist, mathematician, logician,
    cryptanalyst, philosopher, and theoretical biologist, pointed out some of the
    limits of "*intelligent machines*" with the halting problem: it is not possible
    to predict a-priori if a program will terminate unless it is actually run. This
    has many consequences in theoretical computer science. However, the fundamental
    step happened thirteen years later, in 1950, when Alan Turing wrote his famous
    paper "*Computing Machinery and Intelligence*", in which he talked about the imitation
    game, nowadays mostly known as "*The Turing Test*": a way to define what an intelligent
    machine is.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在1937年，英国计算机科学家、数学家、逻辑学家、密码分析家、哲学家和理论生物学家艾伦·图灵，通过停机问题指出了“*智能机器*”的一些局限性：除非实际运行，否则无法预先判断一个程序是否会终止。这在理论计算机科学中产生了许多后果。然而，根本性的步骤发生在十三年后的1950年，当时艾伦·图灵撰写了他的著名论文“*计算机与智能*”，在其中他讨论了模仿游戏，现在通常被称为“*图灵测试*”：一种定义智能机器的方法。
- en: 'In the 1940s, some attempts were made to emulate biological systems: McCulloch
    and Pitts developed a mathematical model for a neuron in 1943, and Marvin Minsky
    created a machine that was able to emulate 40 neurons with 3,000 vacuum tubes
    in 1951\. However, they fell into the dark.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪40年代，一些尝试试图模拟生物系统：1943年，麦克洛奇和皮茨为神经元开发了一个数学模型，1951年，马文·明斯基创建了一台机器，能够用3000个真空管模拟40个神经元。然而，他们陷入了黑暗。
- en: 'From the late 1950s through to the early 1980s, a great portion of AI research
    was devoted to "*Symbolic systems*". These are based on two components: a knowledge
    base made out of symbols and a reasoning algorithm, which uses logical inference
    to manipulate those symbols, in order to expand the knowledge base itself.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从20世纪50年代末到20世纪80年代初，大量的人工智能研究致力于“*符号系统*”。这些系统基于两个组件：由符号组成的知识库和一个推理算法，该算法使用逻辑推理来操纵这些符号，以扩展知识库本身。
- en: During this period, many brilliant minds made significant progresses. A name
    worth quoting is McCarthy, who organized a conference in Dartmouth College in
    1956, where the term "*Artificial Intelligence*" was first coined. Two years later,
    he invented the high-level programming language *LISP*, in which the first programs
    that were able to modify themselves were written. Other remarkable results include
    Gelernter's *Geometry Theorem Prover* in 1959, the *General Problem Solver* (GPS)
    by Newell and Simon in 1961, and the famous chat-bot *Eliza* by Weizenbaum, which
    was the first software that, in 1966, could have a conversation in natural language.
    Finally, the apotheosis of symbolic systems happened in 1972 with the invention
    of *PROLOG* by the French scientist Alain Colmerauer.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时期，许多杰出的思想者取得了显著的进步。值得提及的名字是麦卡锡，他在1956年在达特茅斯学院组织了一次会议，在那里首次提出了“*人工智能*”这个术语。两年后，他发明了高级编程语言*LISP*，在其中编写了第一个能够自我修改的程序。其他引人注目的成果包括1959年盖尔伦特的*几何定理证明器*，1961年纽厄尔和西蒙的*通用问题求解器*（GPS），以及由维齐纳鲍姆开发的著名聊天机器人*Eliza*，这是1966年第一款能够用自然语言进行对话的软件。最后，在1972年，法国科学家阿兰·科梅拉乌尔发明了*PROLOG*，标志着符号系统的顶峰。
- en: Symbolic systems led to many AI techniques, which are still used in games, such
    as blackboard architectures, pathfinding, decision trees, state machines, and
    steering algorithms, and we will explore all of them throughout this book.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 符号系统导致了众多人工智能技术的产生，这些技术至今仍被用于游戏，如黑板架构、路径查找、决策树、状态机和转向算法，我们将在本书中探讨所有这些内容。
- en: The trade-off of these systems is between knowledge and search. The more knowledge
    you have, the less you need to search, and the faster you can search, the less
    knowledge you will need. This has even been proven mathematically by Wolpert and
    Macready in 1997\. We will have the chance to examine this trade-off in more detail
    later in this book.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些系统的权衡在于知识和搜索之间。你拥有的知识越多，你需要的搜索就越少，你搜索得越快，你需要的知识就越少。这甚至已经在1997年由沃尔珀特和麦克雷德通过数学证明了。我们将在本书的后面有机会更详细地考察这种权衡。
- en: At the beginning of the 1990s, symbolic systems became inadequate, because they
    proved hard to scale to larger problems. Also, some philosophical arguments arose
    against them, maintaining that symbolic systems are an incompatible model for
    organic intelligence. As a result, old and new technologies have been developed
    that were inspired by biology. The old Neural Networks were dusted off from the
    shelf, with the success of Nettalk in 1986, a program that was able to learn how
    to read aloud, and with the publication of the book "*Parallel distributed processing*"
    by Rumelhart and McClelland in the same year. In fact, "*back-propagation*" algorithms
    were rediscovered, since they allow a Neural Network (NN) to actually learn.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代初，符号系统变得不适用，因为它们证明难以扩展到更大的问题。此外，一些哲学论点反对它们，认为符号系统是有机智能的不兼容模型。因此，开发了受生物学启发的旧技术和新技术。旧的神经网络被从架子上取下来，1986年Nettalk的成功，这个程序能够学会如何朗读，以及同年Rumelhart和McClelland出版的书"*并行分布式处理*"。事实上，"*反向传播*"算法被重新发现，因为它们允许神经网络（NN）真正地学习。
- en: In the last 30 years of AI, research took new directions. From the work of Pearl
    on "*Probabilistic reasoning in intelligent systems*", probability has been adopted
    as one of the principal tools to handle uncertainty. As a result, AI started to
    use many statistical techniques, such as Bayesian-nets, Support Vector Machines
    (SVMs), Gaussian processes, and the Markov Hidden Model, which is used widely
    to represent the temporal evolution of the states of a system. Also, the introduction
    of large databases unlocked many possibilities in AI, and a new whole branch named
    "*Deep Learning*" arose.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去30年的AI研究中，研究方向发生了新的变化。从Pearl在"*智能系统中的概率推理*"上的工作开始，概率被采纳为处理不确定性的主要工具之一。因此，人工智能开始使用许多统计技术，如贝叶斯网络、支持向量机（SVMs）、高斯过程和马尔可夫隐模型，后者被广泛用于表示系统状态的时态演变。此外，大型数据库的引入为人工智能解锁了许多可能性，并出现了一个名为"*深度学习*"的新分支。
- en: However, it's important to keep in mind that, even if AI researchers discover
    new and more advance techniques, the old are not to be discarded. In fact, we
    will see how, depending on the problem and its size, a specific algorithm can
    shine.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重要的是要记住，即使人工智能研究人员发现了新的和更先进的技巧，旧的技巧也不应该被丢弃。事实上，我们将看到，根据问题和其规模的不同，特定的算法可以大放异彩。
- en: AI in games
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏中的AI
- en: The history of AI in video games is as interesting as what we talked about in
    the previous section. We don't have the time to go through it in detail and analyze
    every single game and how each one of them contributed to the field. For the most
    curious of you, toward the end of this book, you will find other lectures, videos,
    and books where you can dive deeper into the history of AI in games.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 视频游戏中人工智能的历史与我们之前讨论的内容一样有趣。我们没有时间详细地回顾并分析每一款游戏以及它们如何为该领域做出贡献。对于最好奇的你们，在本书的结尾，你们将找到其他讲座、视频和书籍，你们可以更深入地了解视频游戏中人工智能的历史。
- en: 'The first form of AI in video games was rudimental and used in games like **Pong**
    [*Atari*, 1972], **Space Invaders** [*Midway Games West, Inc*., 1978], and so
    on. In fact, beyond moving a paddle to try and catch a ball, or moving aliens
    toward the player, there wasn''t much more we could do:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 视频游戏中人工智能的第一种形式是原始的，并用于像**《乒乓》**[*Atari*, 1972]，**《太空侵略者》**[*Midway Games West,
    Inc*., 1978]等游戏。事实上，除了移动球拍试图捕捉球，或者移动外星人向玩家移动之外，我们并没有做更多的事情：
- en: '![](img/c86806ca-4daf-4fad-827d-285c2f8e832b.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c86806ca-4daf-4fad-827d-285c2f8e832b.png)'
- en: A screenshot of **Space Invaders** Midway Games West, Inc., 1978], in which
    a rudimental form of AI is used to control the aliens
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**《太空侵略者》**的一个截图[Midway Games West, Inc., 1978]，其中使用了一种原始形式的人工智能来控制外星人'
- en: 'The first renowned game that used a noticeable AI was **Pac-Man** [*Midway
    Games West, Inc.*, 1979]. The four *monsters* (later named *ghosts* due to a flickering
    port in the Atari 2600) used an FSM to chase (or flee from) the player:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第一款使用显著人工智能的著名游戏是**《吃豆人》**[*Midway Games West, Inc.*, 1979]。四个**怪物**（后来因为Atari
    2600中的闪烁端口而被称为**幽灵**）使用有限状态机（FSM）来追逐（或逃离）玩家：
- en: '![](img/30482b02-8104-4223-94f4-ac5f99d868e6.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/30482b02-8104-4223-94f4-ac5f99d868e6.png)'
- en: A screenshot from the game **Pac-Man** Midway Games West, Inc., 1979], in which
    the four monsters use an FSM trying to catch the player
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**《吃豆人》**游戏的一个截图[Midway Games West, Inc., 1979]，其中四个怪物使用有限状态机试图捕捉玩家'
- en: 'During the 1980s, AI in games didn''t change much. It was only with the introduction
    of **Warcraft: Orcs & Humans** [*Blizzard Entertainment*, 1994] that a pathfinding
    system was successfully implemented in a video game. We will explore the Navigation
    system in Unreal in [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml), *Navigation:*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪80年代，游戏中的AI并没有太大变化。直到**《魔兽世界：兽人 vs 人类》**[*Blizzard Entertainment*, 1994]的引入，路径查找系统才在视频游戏中成功实现。我们将在[第三章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)，*导航*中探讨导航系统：
- en: '![](img/27bbf5bf-6748-4d4d-8c46-3876435e494f.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27bbf5bf-6748-4d4d-8c46-3876435e494f.png)'
- en: 'A screenshot from **Warcraft: Orcs Humans** Blizzard Entertainment, 1994],
    in which the units (orc peons and grunts in this screenshot) use pathfinding algorithms
    to move in the map'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**《魔兽世界：兽人 vs 人类》**[Blizzard Entertainment, 1994]的截图，其中单位（本截图中的兽人步兵和士兵）使用路径查找算法在地图上移动'
- en: 'The game that probably started to sensitize people about AI was **Goldeneye
    007** [*Rare Ltd.*, 1997], which showed how AI could improve gameplay. Although
    it was still relying on FSMs, the innovation was that characters could *see* each
    other, and act accordingly. We will explore *agent-awareness* in [Chapter 5](94d71bd8-35a2-481e-adac-1fc3494350ba.xhtml),* Agent
    Awareness*. This was a hot topic at the time, and some games made it the main
    game mechanic, such as **Thief: The Dark Project** [*Looking Glass Studios, Inc.*,
    1998]:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是开始让人们关注AI的游戏是**《007黄金眼》**[*Rare Ltd.*, 1997]，它展示了AI如何提升游戏体验。尽管它仍然依赖于FSM，但创新之处在于角色可以*看到*彼此，并相应地行动。我们将在[第五章](94d71bd8-35a2-481e-adac-1fc3494350ba.xhtml)，*代理意识*中探讨*代理意识*。这当时是一个热门话题，一些游戏将其作为主要游戏机制，例如**《盗贼：暗影项目》**[*Looking
    Glass Studios, Inc.*, 1998]：
- en: '![](img/4b4769fa-42b2-46be-98f5-75b43cc90fa5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b4769fa-42b2-46be-98f5-75b43cc90fa5.png)'
- en: A screenshot from **Goldeneye 007** Rare Ltd., 1997], which has changed how
    people perceive AI in video games
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**《007黄金眼》**[*Rare Ltd.*, 1997]的截图，它改变了人们对于视频游戏AI的看法'
- en: 'and **Metal Gear Solid** [*Konami Corporation*, 1998]:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 和**《合金装备固体》**[*Konami Corporation*, 1998]：
- en: '![](img/eee2d65c-c724-4049-aeae-f6ac6a85cb51.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eee2d65c-c724-4049-aeae-f6ac6a85cb51.png)'
- en: A screenshot from **Metal Gear Solid** [*Konami Corporation*, 1998],
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**《合金装备固体》**[*Konami Corporation*, 1998]的截图，'
- en: 'Another hot topic was modeling a soldiers'' emotions during battles. One of
    the first games that implemented an emotional model was **Warhammer: Dark Omen**
    [*Mindscape*, 1998], but it was only with **Shogun: Total War** [*The Creative
    Assembly*, 2000] that these models were used with extreme success with a large
    number of soldiers without performance issues:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个热门话题是在战斗中模拟士兵的情绪。最早实现情感模型的游戏之一是**《战锤：黑暗预兆》**[*Mindscape*, 1998]，但直到**《全面战争：幕府将军》**[*The
    Creative Assembly*, 2000]，这些模型才在大量士兵中使用并取得了极大的成功，而没有性能问题：
- en: '![](img/eee4cb0a-4b47-4e11-b18e-178e449089ec.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eee4cb0a-4b47-4e11-b18e-178e449089ec.png)'
- en: 'A screenshot from **Warhammer: Dark Omen,** one of the first games that used
    an emotional model for soldiers'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**《战锤：黑暗预兆》**的截图，这是最早使用士兵情感模型的游戏之一'
- en: and
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '![](img/e4fb9ab1-12bf-4e7c-ba19-a92705b21626.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4fb9ab1-12bf-4e7c-ba19-a92705b21626.png)'
- en: 'A screenshot from Shogun: Total War. The emotional model of the soldiers were
    more sophisticated than the one in Warhammer: Dark Omen, and yet it was used successfully
    with many soldiers'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**《全面战争：幕府将军》**的截图。士兵的情感模型比《战锤：黑暗预兆》中的更复杂，但仍然成功地用于许多士兵'
- en: 'Some games even made AI the core of the gameplay. Although one of the first
    games to do so was **Creatures** [*Cyberlife Technology Ltd.*, 1997], the concept
    is more evident in games like **The Sims** [*Maxis Software, Inc.*, 2000] or **Black
    and White** [*Lionhead Studios Ltd.*, 2001]:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一些游戏甚至将AI作为游戏的核心。尽管最早这样做的一款游戏是**《Creatures》**[*Cyberlife Technology Ltd.*, 1997]，但这一概念在**《模拟人生》**[*Maxis
    Software, Inc.*, 2000]或**《黑与白》**[*Lionhead Studios Ltd.*, 2001]等游戏中更为明显：
- en: '![](img/53a162f4-6729-4196-983f-ed257e27632f.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/53a162f4-6729-4196-983f-ed257e27632f.png)'
- en: A screenshot from The Sims. A Sim (the character) is cooking, which is part
    of a complex behavior piloted by AI in the game.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**《模拟人生》**的截图。一个模拟者（角色）正在烹饪，这是游戏中由AI驱动的复杂行为的一部分。'
- en: In the last 20 years, many AI techniques have been adopted and/or developed.
    However, if the game doesn't require an advanced AI, you will probably find FSMs,
    still being broadly used, along with Behavior trees, which we will start exploring
    soon in [Chapter 2](00781951-41e3-4e33-8512-052e7aecfd15.xhtml)*, Behavior Trees
    and Blackboards*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的20年里，许多AI技术已被采用和/或开发。然而，如果游戏不需要高级AI，你可能会发现仍然广泛使用的有限状态机（FSMs），以及我们将很快在[第2章](00781951-41e3-4e33-8512-052e7aecfd15.xhtml)中探讨的**行为树**，**黑板**。
- en: AI in games – Industry and Academia
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏中的AI – 行业与学术界
- en: When it comes to comparing AI that's applied to video games, both in Academia
    and in the Industry, there is a big discrepancy. I would say that there was almost
    a fight between the two. Let's have a look at the reasons behind this. In fact,
    they have very different goals.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到比较应用于视频游戏的AI，无论是在学术界还是在工业界，都存在很大的差异。我可以说，两者之间几乎有一场斗争。让我们看看背后的原因。事实上，它们的目标非常不同。
- en: Academia wants to *create AI agents for games that **think intelligently** to
    act in the environment and interact with the player.*
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 学术界希望**创建能够智能思考并在环境中行动以及与玩家互动的游戏AI代理**。
- en: On the other hand, the game industry wants to *create AI agents for games that
    **seem to think intelligently** to act in the environment and interact with the
    player.*
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，游戏行业希望**创建看起来能够智能思考并在环境中行动以及与玩家互动的游戏AI代理**。
- en: We can clearly notice that the first leads to a **more realistic AI**, whereas
    the second leads to a **more believable AI**. Of course, commercial games are
    more worried about the latter rather than the former.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地注意到，前者导致**更真实的AI**，而后者导致**更可信的AI**。当然，商业游戏更担心后者而不是前者。
- en: We will explore this concept in more detail in [Chapter 14](d9a581ce-adca-46fe-8f95-a78b762ebc46.xhtml), *Going
    Beyond*, when we talk about the psychology and game design involved in creating
    an AI system for games. In fact, to achieve a believable behavior, you often need
    to try and be realistic as well.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第14章](d9a581ce-adca-46fe-8f95-a78b762ebc46.xhtml)中更详细地探讨这个概念，**超越**，当我们讨论创建游戏AI系统所涉及的心理学和游戏设计时。实际上，为了实现可信的行为，你通常需要尝试并使其尽可能真实。
- en: However, in more formal terms, we can say that game AI falls in the category
    of *weak AI* (opposite to *strong AI*), which focuses on solving a specific task
    or problem *intelligently*, rather than develop a consciousness behind it. In
    any case, we won't venture further into this.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在更正式的术语中，我们可以这样说，游戏AI属于**弱AI**（与**强AI**相对）的范畴，它专注于以**智能**的方式解决特定任务或问题，而不是在其背后发展意识。无论如何，我们不会进一步探讨这个问题。
- en: Planning our journey
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划我们的旅程
- en: It's finally time to start planning our journey, before jumping into the next
    chapter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始规划我们的旅程了，在跳入下一章之前。
- en: Technical terminology
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术术语
- en: 'Since, for some of you, this is your first journey into AI, it''s important
    that you have a small glossary of the technical terms that are used throughout
    this book (and in general, in AI). We have already encountered some of these in
    the past few pages:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于对于一些人来说，这是他们第一次进入AI领域，因此了解这本书（以及在AI中通常使用的）中使用的术语的小型词汇表很重要。我们在过去几页中已经遇到了其中的一些：
- en: '**Agents** are systems that are capable of autonomous reasoning toward solving
    a specific set of goals.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理**是能够自主推理以解决特定目标集的系统。'
- en: '**Backward Chaining** is the process of tracing the cause of a problem by working
    backwards.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反向链式推理**是通过向后工作来追踪问题原因的过程。'
- en: '**Blackboard** is an architecture for exchanging data between different agents,
    and sometimes even within the agent itself (especially in Unreal).'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**黑板**是不同代理之间交换数据以及有时甚至在代理本身内部（特别是在虚幻引擎中）交换数据的架构。'
- en: '**Environment** is the world where an agent lives. For instance, the game world
    is the environment of an NPC from the same game. Another example is a chess board,
    which represents the environment of a system that plays chess against humans (or
    other systems).'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**是代理生活的世界。例如，游戏世界是同一游戏中NPC的环境。另一个例子是棋盘，它代表了一个与人类（或其他系统）下棋的系统的环境。'
- en: '**Forward Chaining**, opposite to Backward Chaining, is the process to work
    forward to find the solution to a problem.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正向链式推理**，与**反向链式推理**相反，是通过向前工作来找到问题解决方案的过程。'
- en: '**Heuristic** is a practical approach to problem-solving, which does not guarantee
    to be optimal, nor sufficient for immediate goals. Heuristic methods are used
    when finding the optimal solution to a problem is impractical (if not impossible),
    in order to find a satisfactory solution. They can be thought of as mental shortcuts
    to lighten cognitive load during a decision-making process. Sometimes, it can
    represent the knowledge of an agent based on his/her past experience (although
    this is often given a-priori). The term "*Heuristic*" derives from ancient Greek,
    with the meaning of "*find*" or "*discover*".'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启发式**是一种解决问题的实用方法，它不保证是最优的，也不足以满足即时目标。当寻找问题的最优解不切实际（甚至不可能）时，使用启发式方法来找到令人满意的解决方案。它们可以被视为在决策过程中减轻认知负担的心理捷径。有时，它可以代表基于代理过去经验的认知（尽管这通常是在先验的基础上给出的）。术语"*启发式*"源自古希腊，其意义为"*找到*"或"*发现*"。'
- en: 'For a more extensive glossary, you can have a look at the one on Wikipedia.
    Here is the link: [https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence](https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更广泛的词汇表，你可以查看维基百科上的一个。以下是链接：[https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence](https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence)。
- en: The bottom-up approach
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自下而上的方法
- en: 'Usually, when a system is built or studied, there are two main approaches:
    top-down and bottom-up. The former starts from the high-level structures of the
    system and proceeds gradually into the granular details of the system. The latter
    starts from the basics and proceeds to create more complex structures that depend
    on the previous ones. Both approaches are valid, but, as a matter of preference,
    I chose the bottom-up approach to introduce the topics of this book.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当一个系统被构建或研究时，有两种主要的方法：自上而下和自下而上。前者从系统的较高层次结构开始，逐渐进入系统的颗粒度细节。后者从基础开始，逐步创建依赖于前者的更复杂结构。两种方法都是有效的，但出于个人偏好，我选择了自下而上的方法来介绍本书的主题。
- en: In fact, we will start with how an agent can move, then understand how it can
    perceive, and finally use this data to make an informative decision or even come
    up with a plan. This is reflected in the structure of this book and its parts.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们将从代理如何移动开始，然后理解它如何感知，最后使用这些数据来做出信息化的决策，甚至制定一个计划。这一点反映在这本书的结构和各部分中。
- en: The agent schema
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理模式
- en: 'Since, during this book, we will be going through the different parts of how
    an AI agent can perceive, move, plan, and interact with its surroundings, it will
    be useful to draw a schema for this. Of course, there can be many other schemas,
    and they are all equally valid, but I believe that this one is particularly useful
    for getting started with *AI Game Development*:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在这本书中，我们将探讨人工智能代理如何感知、移动、规划和与周围环境交互的不同部分，因此绘制一个为此目的的方案将是有用的。当然，可能会有许多其他方案，它们都是同样有效的，但我相信这个方案对于开始*AI游戏开发*特别有用：
- en: '![](img/8f80e4f4-82f6-4501-98a6-b81090fbddd0.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8f80e4f4-82f6-4501-98a6-b81090fbddd0.png)'
- en: The Agent model that we are going to use in this book
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将要使用的代理模型
- en: Since we chose a bottom-up approach, we should read the schema from the bottom.
    We will refer to this in more formal terms as our *agent model*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们选择了自下而上的方法，我们应该从底部读取模式。我们将更正式地称这个为我们的*代理模型*。
- en: First, we can see that the agent always exchanges information with the Game
    World, which includes geometry, physics, and animations, but also abstractions
    of it. This information is used at all the levels of our agent model.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以看到代理总是与游戏世界交换信息，这包括几何、物理和动画，以及它们的抽象。这些信息被用于我们代理模型的所有层级。
- en: From the bottom, we can see that our first concern is how to move in the environment.
    This is a process that can be split into Motion and Pathfinding ([Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)*,
    Navigation*). Going up the chain, we can see that the agent perceives the world
    ([Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml),* Environment Query System,
    and 5, Agent Awareness*), and, based on this perception, the agent can make a
    decision ([Chapter 2](00781951-41e3-4e33-8512-052e7aecfd15.xhtml), *Behavior Trees
    and Blackboards*). Sometimes, making the best decision at that moment in time,
    might not lead to a better result in the long run, and so the agent should be
    able to plan ahead. Often, in video games, an AI system (which is not necessarily
    an NPC) can control more than one character, and, as a result, it should be able
    to coordinate a group of characters. Finally, the agent might need to collaborate
    with other agents. Of course, we won't be able to go deep into each topic in this
    book, but feel free to take a look online so that you can dive deeper into certain
    topics.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层来看，我们首先关注的是如何在环境中移动。这是一个可以分解为运动和路径查找的过程（[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)*，导航*）。沿着链向上，我们可以看到代理感知世界（[第4章](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)，*环境查询系统*和第5章，代理意识*），并且基于这种感知，代理可以做出决策（[第2章](00781951-41e3-4e33-8512-052e7aecfd15.xhtml)，*行为树和黑板*）。有时，在那一刻做出最佳决策可能不会在长期内带来更好的结果，因此代理应该能够提前规划。通常，在视频游戏中，一个AI系统（不一定是NPC）可以控制多个角色，因此它应该能够协调一组角色。最后，代理可能需要与其他代理协作。当然，我们无法在这本书中深入探讨每个主题，但你可以自由地在网上查看，以便更深入地了解某些主题。
- en: 'One final remark: Often, AI in games doesn''t use all of these levels at once;
    some implement just one of them, or mix them up. However, it''s important to keep
    in mind how things are structured before you start playing with them.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点：通常，游戏中的AI不会一次性使用所有这些层级；有些只实现其中之一，或者混合使用。然而，在开始操作之前，了解事物的结构是很重要的。
- en: Unreal Engine AI Framework
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚幻引擎AI框架
- en: Despite other game engines, which just give you rendering capability, Unreal
    Engine comes with many things implemented (and extended through plugins). This
    doesn't mean that making a game is easier, but rather that we have more tools
    to develop one.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其他游戏引擎只提供渲染能力，但虚幻引擎自带了许多实现（并通过插件扩展）。这并不意味着制作游戏更容易，而是我们拥有更多开发游戏所需的工具。
- en: 'As a matter of fact, Unreal implements many tools for Artificial Intelligence
    as well. While we explore them, we can create a schema of these tools and how
    they correlate to each other. So, let''s try to just understand at which level
    we are going to operate. This means scratching the surface of the **Unreal Game
    Play Framework** (you can find more information about this here: [https://docs.unrealengine.com/en-us/Gameplay/Framework](https://docs.unrealengine.com/en-us/Gameplay/Framework)).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，虚幻引擎也实现了许多人工智能工具。当我们探索它们时，我们可以创建一个这些工具及其相互关联的架构。因此，让我们先了解一下我们将要在哪个层面上操作。这意味着要深入了解**虚幻游戏框架**（你可以在以下链接中找到更多关于此的信息：[https://docs.unrealengine.com/en-us/Gameplay/Framework](https://docs.unrealengine.com/en-us/Gameplay/Framework))。
- en: There is a Controller Class, which can be divided into two subclasses. The first
    one is a Player Controller; as the name suggests, it offers an interface between
    the game and the player (of course, it is not covered in this book, since we will
    focus on AI and not general Gameplay). The second class is the AIController, which,
    instead, offers an interface between our AI algorithms and the game itself.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个控制器类，它可以分为两个子类。第一个是玩家控制器；正如其名所示，它为游戏和玩家之间提供了一个接口（当然，这本书中并未涵盖，因为我们将会关注AI而不是通用的游戏玩法）。第二个类是AIController，它提供的是我们的AI算法和游戏本身之间的接口。
- en: 'The following diagram shows these and how they interact with one another:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了这些工具以及它们如何相互作用：
- en: '![](img/7a56b556-a050-42e2-9591-252dc5412561.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7a56b556-a050-42e2-9591-252dc5412561.png)'
- en: Both kinds of controllers can possess a Pawn, which can be considered a virtual
    avatar. For the player, this may be the main character; for an AIController, a
    Pawn can be the enemy who wants to defeat the player.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种控制器都可以拥有一个Pawn，这可以被认为是一个虚拟化身。对于玩家来说，这可能就是主要角色；对于AIController来说，Pawn可以是被玩家想要击败的敌人。
- en: In this book, we will focus only on the AIController, and all the tools around
    and beneath it to bring our AI to life (we will not cover the dotted sections
    in the preceding diagram). We will understand what I mean by this at a later stage,
    but the key concept is that we are going to operate at the level of an ***AIController***.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将只关注AIController，以及所有围绕和在其下为我们的AI带来生命力的工具（我们不会涵盖前图中省略的部分）。我们将在稍后的阶段理解我的意思，但关键概念是我们将操作在***AIController***的层面。
- en: If you are already a bit familiar with C++ and Unreal, you can have a look at
    its class, which is defined in the ***AIController.h*** file, to learn a bit more
    about this controller.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经对C++和Unreal有些熟悉，你可以查看其类，该类定义在***AIController.h***文件中，以了解更多关于这个控制器的信息。
- en: A sketch of our journey
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们旅程的草图
- en: Now that we have a rough idea of the schema we are going to use, let's break
    down what we will cover in this book, more or less in the order we will face the
    topics (I said more or less, because some topics are spread over more than one
    chapter, and they need to iterate once our knowledge of AI has been expanded).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对将要使用的架构有了大致的了解，让我们按我们将要面对的主题的顺序（我说的是大致的顺序，因为有些主题会跨越多个章节，并且在我们对AI的了解扩展后需要迭代）来分解这本书将要涵盖的内容。
- en: 'However, you can think of this book as being divided into three parts:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以将这本书视为分为三个部分：
- en: '*Chapters 2-7*: A description of the different built-in AI systems'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第2-7章*：对不同内置AI系统的描述'
- en: '*Chapters 8-10*: A concrete example of how to use the AI systems we explored
    in the previous chapters'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第8-10章*：如何使用我们在前几章中探索的AI系统的具体示例'
- en: '*Chapters 11-13*: A description of the different debugging methods for Game
    AI (since I believe that this part is equally important that knowing the systems
    themselves)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第11-13章*：对游戏AI的不同调试方法的描述（因为我相信这部分与了解系统本身同等重要）'
- en: Let's talk about what we will be covering in this book in detail.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细谈谈这本书将要涵盖的内容。
- en: Decision-making with Behavior Trees (chapters 2, 6, 8, 9, and 10)
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用行为树进行决策（第2、6、8、9和10章）
- en: Once the agent can perceived the world around it, it needs to start making decisions,
    which have consequences. Some decision-making processes might become so complicated
    that the agent needs to come up with a proper plan to successfully achieve a goal.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦智能体能够感知其周围的世界，它就需要开始做出决策，这些决策会有后果。某些决策过程可能会变得非常复杂，以至于智能体需要制定一个适当的计划才能成功实现目标。
- en: The built-in Unreal Engine framework for AI rotates around Behavior Trees, which
    occupy a significant part of this book. Of course, this doesn't preclude the possibility
    to implement other AI systems on your own for decision-making in Unreal, but,
    by choosing Behavior Trees, you will have a strong set of tools ready to go, which
    we will explore in detail in this book.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的Unreal Engine框架围绕行为树旋转，这占据了本书的大部分内容。当然，这并不排除你在Unreal中自行实现其他AI系统进行决策的可能性，但通过选择行为树，你将拥有一套强大的工具集，我们将在本书中详细探讨。
- en: Navigation (chapters 3 and 7)
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航（第3和7章）
- en: Unless the game is discrete or turn-based, each AI agent needs to move around
    its own environment in a continuous fashion. Unreal provides a strong Navigation
    System that lets your AI Agents navigate easily within the environment, from falling
    to jumping, from crouching to swimming, to different kind of areas and different
    types of agent.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 除非游戏是离散的或回合制的，否则每个AI智能体都需要以连续的方式在其自己的环境中移动。Unreal提供了一个强大的导航系统，允许你的AI智能体在环境中轻松导航，从坠落到跳跃，从蹲伏到游泳，到不同类型的区域和不同类型的智能体。
- en: This system is so huge that it will be hard to cover it all, but we will do
    our best to cover everything you need to get started in [Chapter 3](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml),
    *Navigation*.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统如此庞大，要全部涵盖它将很困难，但我们将尽力涵盖你开始学习[第3章](fe5b7602-fcb4-4d39-bf8c-e1742909205a.xhtml)，“导航”所需的所有内容。
- en: Environment Query System (chapters 4 and 12)
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境查询系统（第4和12章）
- en: The *Environment Query System (ESQ)* can gather information from the environment
    surrounding the agent, thus allowing the agent to make decisions accordingly.
    This book dedicates a whole chapter to this system. In fact, it lies between [Chapter
    5](94d71bd8-35a2-481e-adac-1fc3494350ba.xhtml), *Agent Awareness*, and *Decision
    Making*, and it is a great resource that's already built into Unreal.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*环境查询系统 (ESQ)* 可以从代理周围的环境中收集信息，从而允许代理据此做出决策。本书专门用一章来介绍这个系统。实际上，它位于[第5章](94d71bd8-35a2-481e-adac-1fc3494350ba.xhtml)，*代理意识*和*决策制定*之间，并且是已经内置到Unreal中的宝贵资源。'
- en: Agent Awareness (chapters 5 and 12)
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理意识（第5章和第12章）
- en: '*Agent Awareness* (or *Perception*) deals with the capacity to give senses
    to the AI agents. In particular, we will cover sight, which is the most common
    and widely used, but also hearing and smell.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*代理意识*（或*感知*）涉及赋予AI代理感官的能力。特别是，我们将涵盖视觉，这是最常见和最广泛使用的，但也会涉及听觉和嗅觉。'
- en: Moreover, we will start to explore how this data will be used in higher level
    structures so that the agent can act accordingly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将开始探讨这些数据如何被用于高级结构中，以便代理可以相应地行动。
- en: Crowds (chapter 7)
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人群（第7章）
- en: When you have many AI agents within your map, the environment becomes easily
    overcrowded, and the various agents might interfere with each other. Crowds Systems
    allow you to control large sets of AI Agents (while they can keep an individual
    behavior) so that they can avoid each other.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在地图中拥有许多AI代理时，环境会变得容易过于拥挤，各种代理可能会相互干扰。人群系统允许你控制大量AI代理（同时它们可以保持个体行为），以便它们可以避免彼此。
- en: Designing Behavior Trees (chapters 8, 9, and 10)
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计行为树（第8、9和10章）
- en: 'It is not enough for an AI developer to know how a Behavior Tree works: he/she
    needs to know how to design them. In fact, most of your job is about creating
    an abstract system that coordinates all your AI agents, and only after that will
    you spend the rest of the time implementing it. Therefore, we will cover a single
    and large example of how to design, create single pieces, and build a whole *Behavior
    Tree* from scratch.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于AI开发者来说，仅仅了解行为树的工作原理是不够的：他们需要知道如何设计它们。实际上，你的大部分工作都是关于创建一个抽象系统来协调所有AI代理，然后你才会花剩下的时间来实现它。因此，我们将涵盖一个单一且庞大的示例，展示如何从头开始设计、创建单个部分，并构建一个完整的
    *行为树*。
- en: Debugging methods for Game AI (chapters 11, 12, and 13)
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏AI的调试方法（第11、12和13章）
- en: Once you have learned about all the different AI systems, you can start to experiment
    on those or program a game, but how do you understand if your AI is doing what
    you have planned and/or is performing well? Debugging methods are key in any software,
    but in Game AI, you will also need visual debugging. As such, Unreal Engine comes
    with many debugging methods (including some that are specific for AI), and I strongly
    believe that being knowledgeable of those is very important. You will not only
    learn the tools, but also how to extend them as per your needs.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你了解了所有不同的AI系统，你就可以开始对这些系统进行实验或编写游戏，但如何理解你的AI是否按照你的计划执行并且/或者表现良好？调试方法在任何软件中都是关键，但在游戏AI中，你还需要视觉调试。因此，Unreal
    Engine提供了许多调试方法（包括一些专门针对AI的方法），我坚信了解这些方法非常重要。你不仅会学习工具，还会学习如何根据你的需求扩展它们。
- en: Going beyond (chapter 14)
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越（第14章）
- en: This last section of this book will explore some exciting ideas and innovation
    that's currently going on in the AI world, and will give you the inspiration to
    continue your wonderful journey. I will introduce some of the ongoing research
    on AI that's being applied to games, and how this can ultimately benefit your
    game. Being aware of new technologies and algorithms is key in this field so that
    you are always up to date.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本书最后一部分将探讨一些目前在AI领域正在进行的激动人心的想法和创新，并为你继续美妙旅程提供灵感。我将介绍一些正在进行的AI研究，这些研究被应用于游戏，以及这最终如何对你的游戏产生益处。在这个领域，了解新技术和算法是关键，这样你才能始终保持最新。
- en: Enabling AI for C++ users
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为C++用户启用AI
- en: 'In case you are following this book as a C++ user, when you write C++ code
    within your project (or a specific module of your project or plugin), you will
    need to ensure that you add the right dependencies so that you have access to
    the AI systems, otherwise you will end up with compilation errors. We will look
    at this in more detail in the next chapter when we create a project for inserting
    all the code we will produce in this book. However, here is the line of code to
    insert/modify code in the `.cs` project file (the part of code in bold is required
    for AI to work):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您作为 C++ 用户阅读此书，当您在项目（或项目的特定模块或插件）中编写 C++ 代码时，您需要确保添加正确的依赖项，以便您能够访问 AI 系统，否则您将遇到编译错误。我们将在下一章中更详细地探讨这一点，当时我们将创建一个项目来插入本书中我们将产生的所有代码。然而，以下是插入/修改
    `.cs` 项目文件的代码行（粗体部分是 AI 运作所必需的）：
- en: '[PRE0]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how wonderful the world of AI in video games is.
    We explored the history behind video games, both in Academia and in the industry.
    We have planned our journey in this book and explained what it will look like.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了视频游戏中的 AI 世界是多么奇妙。我们探索了视频游戏背后的历史，无论是在学术界还是在工业界。我们在本书中规划了我们的旅程，并解释了它将是什么样子。
- en: Now, it is time to prepare ourselves because, starting from the next chapter,
    we are going to get our hands dirty and jump straight into Unreal Engine.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是我们准备的时候了，因为从下一章开始，我们将深入实践，直接进入 Unreal Engine。
