- en: '*Chapter 4*: Learn by Doing: Building Two n8n Apps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 4 章*：通过实践学习：构建两个 n8n 应用'
- en: In this chapter, you will learn to combine concepts from the previous chapters
    and use them to build multiple projects. Some of these projects will reinforce
    the concepts you learned earlier and others will introduce some new ideas. This
    will help you understand the kinds of products that you can build using n8n. Finally,
    we will learn how to share and discover new workflows as well as participate in
    n8n's active community.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何将前几章的概念结合起来，并使用它们来构建多个项目。其中一些项目将加强你之前学到的概念，而其他项目将介绍一些新想法。这将帮助你了解你可以使用
    n8n 构建的产品类型。最后，我们将学习如何分享和发现新的工作流程，以及如何参与 n8n 的活跃社区。
- en: 'This chapter will cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Building products with n8n
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 n8n 构建产品
- en: Building a Telegram bot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Telegram 机器人
- en: Creating a metrics dashboard
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建指标仪表板
- en: Sharing and discovering workflows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享和发现工作流程
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This is a list of technical requirements that you''ll need to prepare before
    continuing with the chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在继续本章之前需要准备的技术要求列表：
- en: Install n8n.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 n8n。
- en: Ensure n8n is running and the Editor UI is open.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 n8n 正在运行，并且编辑器 UI 已打开。
- en: Get an account on Telegram.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Telegram 上获取一个账户。
- en: Get an account on GitHub.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GitHub 上获取一个账户。
- en: You can find the completed code examples for the chapter on GitHub at [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%204](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%204)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章的完整代码示例，地址为 [https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%204](https://github.com/PacktPublishing/Rapid-Product-Development-with-n8n/tree/main/Chapter%204)
- en: Building products with n8n
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 n8n 构建产品
- en: If you are anything like me, you have no shortage of ideas for building new
    and exciting online services or automating boring tasks that are the same every
    day. Historically, many of these ideas never got any further than that and I didn't
    know how to get to the next step of actually building the solutions or starting
    to work on a prototype.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和我一样，你有很多想法来构建新的和令人兴奋的在线服务或自动化每天重复的枯燥任务。从历史上看，许多这些想法从未进一步发展，我不知道如何进入实际构建解决方案或开始原型开发的下一步。
- en: No code tools provide a much simpler way of producing that early **minimum viable
    product** (**MVP**) or designing the next great web service.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无代码工具提供了一种更简单的方法来生产早期的 **最小可行产品**（**MVP**）或设计下一个伟大的网络服务。
- en: n8n shares this no code philosophy, allowing you to build applications and tools
    in a fraction of the time that it would take to build them with regular programming
    languages. Not only is it faster, but it is also easier since all you need to
    do is understand a bit of JavaScript for the more complicated applications, and
    maybe not even that, depending on what you want to build!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: n8n 与此无代码理念相同，允许你在比使用常规编程语言构建它们的时间少得多的时间内构建应用程序和工具。这不仅更快，而且更容易，因为你只需要了解一点 JavaScript（对于更复杂的应用程序），也许甚至不需要，这取决于你想要构建什么！
- en: To get you motivated to start building some applications with n8n, here are
    a couple of sample apps that perform some fun functions and demonstrate how quick
    and easy it is to get things up and running.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激发你使用 n8n 开始构建一些应用程序的动力，这里有一些执行有趣功能并展示如何快速轻松地启动的示例应用程序。
- en: Building a Telegram bot
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Telegram 机器人
- en: '*Pokémon* was one of my favorite shows when growing up. Even today, I enjoy
    playing *Pokémon Go*. At times, you will come across very tough opponents in the
    game and you have to do some research on what the weakness of the opposing Pokemon
    is. My search history is full of queries like, "How to defeat Tyranitar." Let''s
    create a Telegram bot that gives us information about a Pokemon''s abilities,
    moves, and types.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*宝可梦*是我成长过程中最喜欢的节目之一。即使今天，我也喜欢玩 *宝可梦 Go*。有时，你会在游戏中遇到非常强大的对手，你必须研究一下对方宝可梦的弱点。我的搜索历史充满了像“如何击败泰兰蒂拉”这样的查询。让我们创建一个提供宝可梦能力、招式和类型的信息的
    Telegram 机器人。'
- en: 'In [*Chapter 2*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029), *Using the
    Editor UI to Create Workflows*, we learned how to create Telegram bots, as well
    as how to query a REST API. We''ll be using a similar workflow but with some catches:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 2 章*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029) 中，*使用编辑器 UI 创建工作流程*，我们学习了如何创建
    Telegram 机器人，以及如何查询 REST API。我们将使用类似的流程，但也有一些需要注意的地方：
- en: We'll have to check whether the user of the bot has entered the name of a Pokemon
    along with the slash command.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要检查机器人用户是否输入了宝可梦的名字以及斜杠命令。
- en: We'll query the Pokemon API ([https://pokeapi.co](https://pokeapi.co)) to get
    the data. However, that API is very comprehensive and we'll need to massage the
    data so that it fits the format that we want to consume this information in.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将查询宝可梦 API ([https://pokeapi.co](https://pokeapi.co)) 来获取数据。然而，该 API 非常全面，我们需要对数据进行处理，以便它符合我们想要消费这些信息的格式。
- en: 'Let''s get started by creating a new Telegram bot by following the instructions
    provided in [*Chapter 2*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029)*, Using
    the Editor UI to Create Workflows*. I named my bot `/setcommands`. Choose the
    bot that you just created, and enter the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照 [*第 2 章*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029)*，使用编辑器 UI 创建工作流程*
    中提供的说明创建一个新的 Telegram 机器人。我给我的机器人命名为 `/setcommands`。选择你刚刚创建的机器人，并输入以下内容：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should be able to see something similar to the following screenshot after
    running the command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行命令后，你应该能看到以下截图类似的内容：
- en: '![Figure 4.1 – Setting a command for our Telegram bot'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – 为我们的 Telegram 机器人设置命令'
- en: '](img/Figure_4.01_B17493.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.01_B17493.jpg)'
- en: Figure 4.1 – Setting a command for our Telegram bot
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 为我们的 Telegram 机器人设置命令
- en: Congratulations, you have just created the first command for your bot.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你刚刚为你的机器人创建了一个命令。
- en: 'Let''s start building the backend for this bot in n8n. To do this, follow these
    steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 n8n 中开始构建这个机器人的后端。为此，请按照以下步骤操作：
- en: Open your n8n Editor UI and add a **Telegram Trigger** node.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的 n8n 编辑器 UI 并添加一个 **Telegram 触发** 节点。
- en: Enter the credentials for your new bot and select ***** from the drop-down list
    for the **Updates** field.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你新机器人的凭证，并在 **更新** 字段的下拉列表中选择 *****。
- en: Now, save and execute the workflow.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，保存并执行工作流程。
- en: '![Figure 4.2 – Settings for the Telegram Trigger node'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – Telegram 触发节点设置'
- en: '](img/Figure_4.02_B17493.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.02_B17493.jpg)'
- en: Figure 4.2 – Settings for the Telegram Trigger node
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – Telegram 触发节点设置
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are running n8n locally, make sure that you are running using tunnel
    mode.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是在本地运行 n8n，请确保你正在使用隧道模式运行。
- en: Now, go to your bot and enter `/pokemon ditto`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往你的机器人并输入 `/pokemon ditto`。
- en: '![Figure 4.3 – Sending a command to the Pokemon bot'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3 – 向宝可梦机器人发送命令'
- en: '](img/Figure_4.03_B17493.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.03_B17493.jpg)'
- en: Figure 4.3 – Sending a command to the Pokemon bot
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 向宝可梦机器人发送命令
- en: Go back to the Editor UI and you will see a response there. It is likely that
    the response is `/start`. If it is, press `/pokemon ditto` in the respons
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回编辑器 UI，你将看到那里有一个响应。很可能是响应是 `/start`。如果是这样，请在响应中按 `/pokemon ditto`。
- en: '![Figure 4.4 – Receiving /pokemon ditto as a command with the Telegram Trigger
    node'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 使用 Telegram 触发节点接收 /pokemon ditto 作为命令'
- en: '](img/Figure_4.04_B17493.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.04_B17493.jpg)'
- en: Figure 4.4 – Receiving /pokemon ditto as a command with the Telegram Trigger
    node
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 使用 Telegram 触发节点接收 /pokemon ditto 作为命令
- en: You will notice that it is quite likely that someone just clicks on the command
    without entering the name of the Pokemon. We will have to account for the fact
    that someone might make the same mistake while using this bot. To make sure that
    this does not happen, let's add an **IF** node to check whether the user provided
    the name of a Pokemon.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，有人可能只是点击了命令而没有输入宝可梦的名字。我们必须考虑到有人在使用这个机器人时可能会犯同样的错误。为了确保这种情况不会发生，让我们添加一个
    **IF** 节点来检查用户是否提供了宝可梦的名字。
- en: 'Add an **IF** node to the Editor UI and make sure that it is connected to the
    **Telegram Trigger** node. Enter the Node Editor view, click on the **Add Condition**
    button, and select **String**. Select **Is Empty** for **Operation**. Add an expression
    to the **Value 1** field and enter the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器 UI 中添加一个 **IF** 节点，并确保它与 **Telegram 触发** 节点连接。进入节点编辑视图，点击 **添加条件** 按钮，并选择
    **字符串**。将 **操作** 设置为 **为空**。在 **值 1** 字段中添加一个表达式，并输入以下内容：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This JavaScript snippet points to `''/pokemon ditto''` using `$json["message"]["text"]`.
    The `.split('' '')` method splits the string at the space and converts it into
    an array, which looks like this: `[''/pokemon'', ''ditto'']`. Then we select the
    item at position 1, which is `''ditto''`. Execute the node.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 JavaScript 片段使用 `$json["message"]["text"]` 指向 `'/pokemon ditto'`。`.split('
    ')` 方法在空格处拆分字符串并将其转换为数组，看起来像这样：`['/pokemon', 'ditto']`。然后我们选择位置 1 的项，即 `'ditto'`。执行节点。
- en: '![Figure 4.5 – Executed IF node with no output for true'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 执行的 IF 节点，对于真值没有输出'
- en: '](img/Figure_4.05_B17493.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.05_B17493.jpg)'
- en: Figure 4.5 – Executed IF node with no output for true
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – 执行的IF节点，true没有输出
- en: You will notice that the output for the **true** section is empty since the
    condition that we specified is false. If you select **false** instead of **true**
    for the **Output** field at the top, you will see one result. Let's now set a
    default message in case the name of the Pokemon has not been specified.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到**true**部分的输出为空，因为我们指定的条件是错误的。如果你在上面的**输出**字段中选择**false**而不是**true**，你会看到一个结果。现在让我们设置一个默认消息，以防没有指定宝可梦的名字。
- en: Add a **Telegram** node to the Editor UI and connect it to the true output of
    the **IF** node.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器UI中添加一个**Telegram**节点，并将其连接到**IF**节点的**true**输出。
- en: 'Configure the credentials for the node, and use the expressions to set the
    value for **Chat ID** (you can get it from the **Telegram Trigger** node). The
    expression should look something like this:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置节点的凭据，并使用表达式设置**Chat ID**的值（你可以从**Telegram触发**节点中获取）。表达式应该看起来像这样：
- en: '[PRE2]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: We used an expression here as compared to the **Telegram** node in [*Chapter
    2*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029)*, Using the Editor UI to Create
    Workflows,* since many people might be using the **Telegram** bot and we want
    to send the answer to the person who queried it.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里使用了一个表达式，而不是[*第2章*](B17493_02_Final_PD_ePub.xhtml#_idTextAnchor029)*，使用编辑器UI创建工作流程*中的**Telegram**节点，因为许多人可能在使用**Telegram**机器人，我们希望将答案发送给查询的人。
- en: Enter the following in the text field, ![](img/2.png) `Please enter the name
    of a Pokemon. For example, '/pokemon ditto' (without the quotes).` Feel free to
    customize the message.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本字段中输入以下内容，![](img/2.png) `请输入宝可梦的名字。例如，'/pokemon ditto'（不带引号）。` 随意自定义信息。
- en: Now let's execute the workflow and this time, let's just send `/pokemon` to
    the bot. The response should look something like this.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们执行工作流程，这次我们只向机器人发送 `/pokemon`。响应应该看起来像这样。
- en: '![Figure 4.6 – Response after sending /pokemon as the command to the bot'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.6 – 向机器人发送/pokemon作为命令后的响应'
- en: '](img/Figure_4.06_B17493.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.06_B17493.jpg)'
- en: Figure 4.6 – Response after sending /pokemon as the command to the bot
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – 向机器人发送/pokemon作为命令后的响应
- en: 'Now that we have cleared one of the challenges that we mentioned before, let''s
    focus on getting the data from the API and sending it back to the user. To do
    this, follow these steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解决了我们之前提到的一个挑战，让我们专注于从API获取数据并将其发送回用户。为此，请按照以下步骤操作：
- en: Add an **HTTP Request** node to the Editor UI and connect it with the **false**
    output of the **IF** node. The workflow should now look like this.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器UI中添加一个**HTTP请求**节点，并将其连接到**IF**节点的**false**输出。现在工作流程应该看起来像这样。
- en: '![Figure 4.7 – Your workflow should look like this after adding the HTTP Request
    node'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.7 – 添加HTTP请求节点后，你的工作流程应该看起来像这样'
- en: '](img/Figure_4.07_B17493.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.07_B17493.jpg)'
- en: Figure 4.7 – Your workflow should look like this after adding the HTTP Request
    node
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – 添加HTTP请求节点后，你的工作流程应该看起来像这样
- en: Before we move forward, execute the workflow again, and send `/pokemon ditto`
    to the bot. This will make the data in the workflow flow toward the false branch
    as we build that branch.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，再次执行工作流程，并向机器人发送`/pokemon ditto`。这将使工作流程中的数据流向我们正在构建的false分支。
- en: 'Open the **HTTP Request** node, add an expression to the **URL** field, and
    enter the following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**HTTP请求**节点，将表达式添加到**URL**字段，并输入以下内容：
- en: '[PRE3]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will ensure that the API returns details about the Pokemon that you asked
    for. Execute the node and you will notice that you get loads of data about Ditto.
    We are specifically interested in the abilities, moves, and types. However, these
    are arrays with objects in them. We'll have to massage the data so that it converts
    into a format that is useful for us. We will use the **Function** node to do that.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保API返回你请求的宝可梦的详细信息。执行节点，你会注意到你得到了关于Ditto的大量数据。我们特别关注的是能力、招式和类型。然而，这些是包含对象的数组。我们将不得不调整数据，使其转换为对我们有用的格式。我们将使用**函数**节点来完成这项工作。
- en: 'Add a **Function** node to the Editor UI and connect it to the **HTTP Request**
    node. Open the **JavaScript Code** field and enter the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器UI中添加一个**函数**节点，并将其连接到**HTTP请求**节点。打开**JavaScript代码**字段，并输入以下代码：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s understand what is happening here. We created three new arrays called
    `abilities`, `moves`, and `types`. We then created a loop that will push the name
    of each ability, move, and type into its respective array. Finally, we returned
    the data in a format expected by n8n. Execute the node and it should then look
    like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来理解这里发生了什么。我们创建了三个新的数组，分别命名为 `abilities`、`moves` 和 `types`。然后我们创建了一个循环，将每个能力、动作和类型的名称推入相应的数组。最后，我们以
    n8n 预期的格式返回数据。执行节点后，它应该看起来像这样：
- en: '![Figure 4.8 – Output of the Function node'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8 – 函数节点的输出'
- en: '](img/Figure_4.08_B17493.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.08_B17493.jpg)'
- en: Figure 4.8 – Output of the Function node
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 函数节点的输出
- en: Perfect, we now have just the data that we need. Now we need to send it to the
    Telegram bot.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 完美，我们现在只得到了我们需要的资料。现在我们需要将其发送到 Telegram 机器人。
- en: Add a new Telegram node and connect it with the **Function** node. Configure
    your credentials and **Chat ID** as discussed before. Now, add an expression to
    the **Text** field and format the data as you see fit.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的 Telegram 节点，并将其与 **函数** 节点连接起来。配置您的凭据和之前讨论过的 **聊天 ID**。现在，在 **文本** 字段中添加一个表达式，并按您认为合适的方式格式化数据。
- en: 'Here''s what my expression looks like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我的表达式的样子：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notes
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: When adding values to expressions that are an array, such as `abilities`, you
    can click on the gray dot next to the value in the expression editor, and click
    on **Values** as shown in the following screenshot.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当向表达式添加数组值时，例如 `abilities`，您可以在表达式编辑器中点击值旁边的灰色点，然后点击 **值**，如下面的截图所示。
- en: In the preceding example, I have used the bold HTML tags to bold some text.
    If you would like to include that as well, click on the **Add Field** button,
    select **Parse Mode**, and set it to **HTML**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我使用了粗体的 HTML 标签来加粗一些文本。如果您也想包含这些，请点击 **添加字段** 按钮，选择 **解析模式**，并将其设置为
    **HTML**。
- en: '![Figure 4.9 – Adding values from an array in the expression editor'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – 在表达式编辑器中添加数组值'
- en: '](img/Figure_4.09_B17493.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.09_B17493.jpg)'
- en: Figure 4.9 – Adding values from an array in the expression editor
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 在表达式编辑器中添加数组值
- en: 'Now, save and activate your workflow. Here''s what your workflow should look
    like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存并激活您的流程。您的流程应该看起来像这样：
- en: '![Figure 4.10 – Final workflow'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10 – 最终工作流程'
- en: '](img/Figure_4.10_B17493.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.10_B17493.jpg)'
- en: Figure 4.10 – Final workflow
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 最终工作流程
- en: 'Now, go ahead and enter `/pokemon ditto` in your Telegram bot. Here''s what
    the result looked like for me:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的 Telegram 机器人中输入 `/pokemon ditto`。这是我得到的结果：
- en: '![Figure 4.11 – Result of the /pokemon ditto command in the Telegram bot'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – Telegram 机器人中 /pokemon ditto 命令的结果'
- en: '](img/Figure_4.11_B17493.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B17493.jpg)'
- en: Figure 4.11 – Result of the /pokemon ditto command in the Telegram bot
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – Telegram 机器人中 /pokemon ditto 命令的结果
- en: 'Go ahead and try a few more. Here are some names of Pokemons: Meowth, Pikachu,
    Bulbasaur. Gotta catch them all.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更多。以下是一些宝可梦的名字：皮卡丘、小火龙、妙蛙种子。必须全部捕捉到。
- en: Let's use our knowledge of webhooks from [*Chapter 3*](B17493_03_Final_PD_ePub.xhtml#_idTextAnchor039)*,
    Diving into Core Nodes and Data in n8n*, to build a metrics dashboard with n8n.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用我们在 [*第 3 章*](B17493_03_Final_PD_ePub.xhtml#_idTextAnchor039)*，深入 n8n 的核心节点和数据*
    中对 webhooks 的了解，使用 n8n 构建一个指标仪表板。
- en: Building a metrics dashboard
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建指标仪表板
- en: 'Metrics are a key component of any business. It''s important to keep an eye
    on metrics to measure the health and growth of communities, products, revenue,
    and many other things. Let''s build a metrics dashboard that will show us the
    count for the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 指标是任何业务的关键组成部分。关注指标以衡量社区、产品、收入以及许多其他事物的健康和增长非常重要。让我们构建一个指标仪表板，它将显示以下内容的计数：
- en: GitHub stars
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 星标
- en: GitHub forks
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 分支
- en: Docker pulls
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 拉取
- en: 'It should be straightforward to add or redact any other numbers that you''d
    like to see in there. There are two main components to building this numbers dashboard:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 添加或删除您想在该仪表板中看到的任何其他数字应该很简单。构建这个数字仪表板有两个主要组件：
- en: Serving the web page for displaying the metrics in an easy-to-read format
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以易于阅读的格式提供显示指标的网络页面
- en: Getting the data from different services and inserting it into the web page
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从不同的服务获取数据并将其插入到网页中
- en: 'Let''s start off by learning how to serve a web page with n8n. The following
    are the steps for it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习如何使用 n8n 提供网页开始。以下是它的步骤：
- en: Open your Editor UI and add a **Webhook** node. Select **Last Node** from the
    drop-down list for the **Response Mode** field.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的编辑器 UI 并添加一个 **Webhook** 节点。对于 **响应模式** 字段，从下拉列表中选择 **上一个节点**。
- en: Click on the `html` into the **Property Name** field.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性名称**字段中点击`html`。
- en: Save the workflow and execute the workflow. Copy the test webhook URL and paste
    it into your web browser. The **Webhook** node should look something like this
    now.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存工作流程并执行工作流程。复制测试 Webhook URL 并将其粘贴到你的网络浏览器中。**Webhook**节点现在应该看起来像这样。
- en: '![Figure 4.12 – Configuring the Webhook node to serve web pages'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.12 – 配置 Webhook 节点以提供网页'
- en: '](img/Figure_4.12_B17493.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B17493.jpg)'
- en: Figure 4.12 – Configuring the Webhook node to serve web pages
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 配置 Webhook 节点以提供网页
- en: Add a **Set** node to the Editor UI and connect it to the **Webhook** node.
    Toggle the **Keep Only Set** button to true (green).
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器 UI 中添加一个**设置**节点，并将其连接到**Webhook**节点。将**仅保留设置**按钮切换到 true（绿色）。
- en: 'Click on the `html` in the **Name** field and enter the following expression
    in the **Value** field:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中点击`html`，并在**值**字段中输入以下表达式：
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we have added some HTML and used the expressions to point to the host
    and user-agent values that the **Webhook** node provided. Execute your workflow
    and open the test webhook URL again in your browser. You should see something
    like this.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一些 HTML 并使用表达式指向**Webhook**节点提供的宿主和用户代理值。执行你的工作流程，并在浏览器中再次打开测试 Webhook
    URL。你应该看到如下内容。
- en: '![Figure 4.13 – Web page served by the n8n workflow'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.13 – n8n 工作流程提供的网页'
- en: '](img/Figure_4.13_B17493.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.13_B17493.jpg)'
- en: Figure 4.13 – Web page served by the n8n workflow
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – n8n 工作流程提供的网页
- en: 'Now that we know how to serve web pages with n8n, let''s take a look at the
    next piece of the puzzle – getting the data from GitHub and Docker Hub. To do
    this, follow these steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何使用 n8n 提供网页，让我们看看拼图中的下一部分——从 GitHub 和 Docker Hub 获取数据。为此，请按照以下步骤操作：
- en: In your current workflow, delete the **Set** node. Add the **GitHub** node to
    the Editor UI and connect it with the **Webhook** node.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你当前的工作流程中，删除**设置**节点。将**GitHub**节点添加到编辑器 UI，并与**Webhook**节点连接。
- en: 'Configure your credentials for the **GitHub** node by following the steps given
    here: [https://docs.n8n.io/credentials/github](https://docs.n8n.io/credentials/github).'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤配置**GitHub**节点的凭据：[https://docs.n8n.io/credentials/github](https://docs.n8n.io/credentials/github)。
- en: Select `n8n-io` and `n8n` in the fields respectively.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分别在字段中选择`n8n-io`和`n8n`。
- en: 'Click on the **Execute Node** button and it should return details about the
    repository that you specified. It should look something like this:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行节点**按钮，它应该返回你指定的仓库的详细信息。它看起来应该像这样：
- en: '![Figure 4.14 – Output from the GitHub node'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.14 – GitHub 节点的输出'
- en: '](img/Figure_4.14_B17493.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.14_B17493.jpg)'
- en: Figure 4.14 – Output from the GitHub node
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – GitHub 节点的输出
- en: If you browse through the output from this node, you will notice that we get
    the star and fork counts as a result too. Next, we need to get the number of pulls
    from Docker Hub. We'll use the **HTTP Request** node to do that.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览此节点的输出，你会注意到我们还会得到星级和分支计数的结果。接下来，我们需要从 Docker Hub 获取拉取次数。我们将使用**HTTP 请求**节点来完成此操作。
- en: 'Add the **HTTP Request** node to the Editor UI and connect it to the **GitHub**
    node. Enter the following URL in the **HTTP Request** node: [https://hub.docker.com/v2/repositories/n8nio/n8n](https://hub.docker.com/v2/repositories/n8nio/n8n).
    Feel free to replace this with the URL of your repository. Execute the node and
    the output should look like this:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器 UI 中添加**HTTP 请求**节点，并将其连接到**GitHub**节点。在**HTTP 请求**节点中输入以下 URL：[https://hub.docker.com/v2/repositories/n8nio/n8n](https://hub.docker.com/v2/repositories/n8nio/n8n)。你可以自由地替换为你的仓库的
    URL。执行节点，输出应该看起来像这样：
- en: '![Figure 4.15 – Output of the HTTP Request node'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.15 – HTTP 请求节点的输出'
- en: '](img/Figure_4.15_B17493.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.15_B17493.jpg)'
- en: Figure 4.15 – Output of the HTTP Request node
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – HTTP 请求节点的输出
- en: Now that we have all the information that we need, we just need to create a
    nice HTML template to display all this information and we will be ready.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了所有需要的信息，我们只需要创建一个漂亮的 HTML 模板来显示所有这些信息，我们就可以准备就绪了。
- en: Add a **Set** node to the Editor UI and connect it to the **HTTP Request** node.
    Toggle the **Keep Only Set** field to true (green).
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器 UI 中添加一个**设置**节点，并将其连接到**HTTP 请求**节点。将**仅保留设置**字段切换到 true（绿色）。
- en: 'Click on the `html` in the **Name** field and add an expression to the **Value**
    field. Paste this HTML code in the expression editor:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中点击`html`，并将表达式添加到**值**字段中。将以下 HTML 代码粘贴到表达式编辑器中：
- en: '[PRE7]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have used some HTML and CSS to make the metrics dashboard presentable. You
    will notice that we have three different containers for the three different values
    that we are pulling from GitHub and Docker Hub.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一些 HTML 和 CSS 使指标仪表板更具可展示性。您会注意到，我们有三个不同的容器来展示我们从 GitHub 和 Docker Hub 拉取的三个不同值。
- en: 'Save and activate the workflow. Now grab the production webhook URL and open
    it in your browser. It should look something like this:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并激活工作流程。现在获取生产 webhook URL 并在浏览器中打开它。它应该看起来像这样：
- en: '![Figure 4.16 – Opening the dashboard using the production webhook URL'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.16 – 使用生产 webhook URL 打开仪表板](img/Figure_4.16_B17493.jpg)'
- en: '](img/Figure_4.16_B17493.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.16_B17493.jpg)'
- en: Figure 4.16 – Opening the dashboard using the production webhook URL
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 使用生产 webhook URL 打开仪表板
- en: Congratulations, you have built a metrics dashboard that pulls in data from
    two different sources and displays it using a web page that is served from your
    n8n workflow.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您，您已经构建了一个指标仪表板，它从两个不同的来源拉取数据，并使用从您的 n8n 工作流程提供的网页显示它。
- en: As we move forward, you'll be building a lot of different workflows. Let's take
    a look at how you can discover and share workflows with the n8n community.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，您将构建许多不同的工作流程。让我们看看您如何发现和与 n8n 社区分享工作流程。
- en: Sharing and discovering workflows
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享和发现工作流程
- en: Sometimes, it makes sense to share your workflows with the community to showcase
    what you have been building and inspire them. It is also useful to discover workflows
    submitted by the other community members to get inspiration for your next project.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，与社区分享您的工作流程来展示您所构建的内容并激发他人是有意义的。发现其他社区成员提交的工作流程以获取您下一个项目的灵感也是很有用的。
- en: 'The n8n.io website has a page dedicated to sharing and discovering workflows.
    You can access the page here: [https://n8n.io/workflows](https://n8n.io/workflows).
    You can submit workflows with a title, description, and JSON. This is what a submitted
    workflow looks like:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: n8n.io 网站有一个专门用于分享和发现工作流程的页面。您可以通过以下链接访问该页面：[https://n8n.io/workflows](https://n8n.io/workflows)。您可以使用标题、描述和
    JSON 提交工作流程。这是提交的工作流程的样子：
- en: '![Figure 4.17 – Example of a submitted workflow on n8n.io/workflows'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.17 – n8n.io/workflows 上提交的工作流程示例](img/Figure_4.17_B17493.jpg)'
- en: '](img/Figure_4.17_B17493.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.17_B17493.jpg)'
- en: Figure 4.17 – Example of a submitted workflow on n8n.io/workflows
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – n8n.io/workflows 上提交的工作流程示例
- en: 'The website automatically recognizes the nodes that you have included in the
    workflow and lists them on the right side. When submitting a workflow, make sure
    of the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 网站会自动识别您在工作流程中包含的节点，并在右侧列出它们。在提交工作流程时，请确保以下事项：
- en: The specific workflow doesn't already exist.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定的工作流程尚未存在。
- en: The title is descriptive.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题是描述性的。
- en: The description has an explanation of what the workflow does and a screenshot
    of it to aid the explanation.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述解释了工作流程的功能，并附有截图以帮助说明。
- en: 'This is also a great place to discover workflows submitted by other members
    of the community to gain inspiration. While building your workflows, if you run
    into any trouble, you can always post about your problem in the community forum:
    [https://community.n8n.io/](https://community.n8n.io/).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是一个发现社区其他成员提交的工作流程以获取灵感的好地方。在构建您的工作流程时，如果您遇到任何问题，您总是可以在社区论坛中发布您的问题：[https://community.n8n.io/](https://community.n8n.io/)。
- en: n8n has a very active community and the forum is very useful for getting timely
    help whenever you are stuck. We, ourselves, also spend a lot of time answering
    questions on the forum, so if you get stuck at any point during the book, tell
    us about it in the community forum and we'll be there to help you out. Our usernames
    in the forum are **@tanay** and **@tephlon**.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: n8n 拥有一个非常活跃的社区，论坛在您遇到问题时提供及时帮助非常有用。我们自己也在论坛上花费大量时间回答问题，所以如果您在阅读本书的任何地方遇到困难，请在社区论坛中告诉我们，我们会尽力帮助您。我们在论坛上的用户名是
    **@tanay** 和 **@tephlon**。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about why it makes sense to build products with
    n8n and translated two of our ideas for products into n8n workflows by building
    a Telegram bot and a **metrics dashboard**. Having a product mindset and an understanding
    of which nodes to use to move your project forward will be useful in the next
    chapters, where we will build our own project with n8n and Bubble.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了为什么使用 n8n 构建产品是有意义的，并通过构建一个 Telegram 机器人和一个 **指标仪表板** 将我们的两个产品想法翻译成
    n8n 工作流程。拥有产品思维并了解如何使用节点推动您的项目前进将在下一章中很有用，我们将使用 n8n 和 Bubble 构建自己的项目。
- en: 'In the next chapter, we will examine how to build a common way of communicating
    between modern systems: the **application programming interface**, or **API**,
    as it is more commonly known. We will learn how to use n8n to build APIs for both
    exposing and collecting data for systems that do not have this way of accessing
    information already.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何构建现代系统之间通用的通信方式：**应用程序编程接口**，或更常见的简称**API**。我们将学习如何使用n8n构建API，以便为那些尚未拥有这种信息访问方式系统的数据暴露和收集提供支持。
