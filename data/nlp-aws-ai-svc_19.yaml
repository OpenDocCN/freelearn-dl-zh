- en: '*Chapter 16*: Improving the Accuracy of PDF Batch Processing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第16章*：提高PDF批处理的准确性'
- en: Congratulations on getting so far in this book! At this point, you are an advanced
    builder of real-world applications that harness the power of NLP and AI to deliver
    tangible business benefits. You may not have realized it but the topics we've
    covered so far – and will continue to cover – address some of the most popular,
    in-demand business challenges that we have helped our customers with. **Intelligent
    Document Processing** (**IDP**) is a very hot requirement today and is something
    prevalent across almost every industry type. We started reading about advanced
    concepts from [*Chapter 13*](B17528_13_Final_SB_ePub.xhtml#_idTextAnchor151),
    *Improving the Accuracy of Document Processing Workflows* onward, and we saw how
    **Amazon A2I** ([https://aws.amazon.com/augmented-ai/](https://aws.amazon.com/augmented-ai/))
    plays a key role in making human reviews of your ML workflows easier and more
    accurate, enabling active learning in the process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你走到了这本书的这一阶段！此时，你已经是一个能够利用NLP和AI的力量，构建实际应用以带来实际业务效益的高级开发者。你可能没有意识到，但我们到目前为止讨论的主题——以及我们接下来要继续讨论的内容——解决了一些最受欢迎、最具需求的商业挑战，这是我们帮助客户解决的问题之一。**智能文档处理**（**IDP**）是目前非常热门的需求，几乎在每个行业中都有广泛应用。我们从[*第13章*](B17528_13_Final_SB_ePub.xhtml#_idTextAnchor151)《提高文档处理工作流的准确性》开始阅读，了解了**Amazon
    A2I**（[https://aws.amazon.com/augmented-ai/](https://aws.amazon.com/augmented-ai/)）在简化和提高ML工作流中人工审阅的准确性方面所发挥的关键作用，从而在过程中启用了主动学习。
- en: In this chapter, we will tackle an operational need that has been around for
    a while, is ubiquitous, and yet organizations struggle to address it efficiently.
    This is known as **PDF batch processing**. Think of this as setting up an automated
    document processing workflow (similar to what we built in the previous chapters)
    but with the added flexibility of bulk processing PDF documents, combined with
    the intelligence to automatically route specific text passages in the document
    for human reviews due to low - confidence detection caused by illegible or erroneous
    text.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解决一个已经存在了一段时间、普遍存在、但组织在高效处理上仍然面临困难的操作需求。这就是所谓的**PDF批处理**。可以将其视为设置一个自动化文档处理工作流（类似于我们在前几章中构建的工作流），但它增加了批量处理PDF文档的灵活性，并结合智能技术，能够自动将文档中某些文本段落路由给人工审阅，原因是由于低置信度检测引起的无法辨认或错误的文本。
- en: By now, due to your diligent efforts in implementing advanced AI solutions,
    **LiveRight Holdings** has seen its profitability go through the roof. This growth
    has resulted in LiveRight spinning up a couple of subsidiaries as independent
    organizations in their own right, and the board has decided that all three companies
    will go public in the mid-term. You have been promoted to Chief Architect of Operations
    at LiveRight, and the CIO has tasked you with building the necessary components
    to automate the registration process for the three companies with the **Securities
    and Exchanges Commission** (**SEC**) as publicly traded companies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，由于你在实施先进的AI解决方案方面的辛勤努力，**LiveRight Holdings**的盈利已经飙升。这个增长使得LiveRight开始将几个子公司独立出来，成为各自独立的组织，董事会决定这三家公司将在中期公开上市。你已经晋升为LiveRight的首席运营架构师，CIO将任务交给你，要求你构建必要的组件，以便将三家公司作为公开交易公司注册到**证券交易委员会**（**SEC**）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Introducing the PDF batch processing use case
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍PDF批处理使用案例
- en: Building the solution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建解决方案
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need access to an AWS account, which you can get
    by going to [https://aws.amazon.com/console/](https://aws.amazon.com/console/).
    Please refer to the *Signing up for an AWS account* subsection within the *Setting
    up your AWS environment* section of [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)*,
    Introducing Amazon Textract*, for detailed instructions on how to sign up for
    an AWS account and sign into the **AWS Management Console**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容需要你访问一个AWS账户，你可以通过访问[https://aws.amazon.com/console/](https://aws.amazon.com/console/)来获取。有关如何注册AWS账户并登录到**AWS管理控制台**的详细说明，请参考[*第2章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)《介绍Amazon
    Textract》中的*注册AWS账户*子章节。
- en: 'The Python code and sample datasets for the solution discussed in this chapter
    can be found in this book''s GitHub repository: [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2016](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2016).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节中讨论的解决方案的Python代码和示例数据集可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2016](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2016)。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3nobrCo](https://bit.ly/3nobrCo).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下视频，了解代码如何运行：[https://bit.ly/3nobrCo](https://bit.ly/3nobrCo)。
- en: Introducing the PDF batch processing use case
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入PDF批处理处理用例
- en: To determine what the architecture will look like, you talk to your accounting
    department to understand the process for registering companies with the SEC. As
    per the process, the accounting department will generate PDF documents using the
    SEC's template for registration, also known as *Form S20* ([https://www.sec.gov/files/forms-20.pdf](https://www.sec.gov/files/forms-20.pdf)).
    The process also involves creating all the supporting documentation, along with
    the registration, which will be sent together to the SEC using an API call. LiveRight's
    **Partner Integration** team has the handshake with SEC in place, and they need
    the form data to be available in an **Amazon DynamoDB** ([https://aws.amazon.com/dynamodb/](https://aws.amazon.com/dynamodb/))
    table that they will consume to create the message call to the SEC API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定架构的样子，你需要与财务部门沟通，了解如何将公司注册到美国证券交易委员会（SEC）的流程。根据该流程，财务部门将使用SEC的注册模板生成PDF文件，该模板也被称为*Form
    S20*（[https://www.sec.gov/files/forms-20.pdf](https://www.sec.gov/files/forms-20.pdf)）。该流程还包括创建所有支持文档，并将这些文档与注册信息一同通过API调用发送给SEC。LiveRight的**Partner
    Integration**团队已经与SEC达成了合作协议，他们需要将表单数据存储在**Amazon DynamoDB**（[https://aws.amazon.com/dynamodb/](https://aws.amazon.com/dynamodb/)）表中，供他们用于创建向SEC
    API发送消息的调用。
- en: However, before making the data available to the Partner Integration team, the
    accounting team mentioned that they need to review a collection of text lines
    that have been detected in the PDF document, specifically the ones that may not
    have been interpreted correctly due to document quality issues.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在将数据提供给Partner Integration团队之前，财务团队提到，他们需要审核一部分在PDF文档中检测到的文本行，特别是那些可能由于文档质量问题而未正确解析的文本。
- en: With this input, you realize that you need to add a batch component to your
    document processing solution. This will enable bulk detection of text from PDF
    documents and routing of those text lines that fall below a confidence threshold
    to a human review loop comprised of the accounting team members. You decide to
    use the asynchronous document text detection API from **Amazon Textract** to leverage
    its pre-trained ML model for text extraction from PDF documents, **Amazon A2I**,
    to set up a human workflow to review and modify text detected with a confidence
    of less than 95%, and Amazon DynamoDB to store the original detected text, along
    with the corrections for consumption by the Partner Integration team.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些信息，你意识到需要在文档处理解决方案中添加一个批处理组件。这将使得能够批量检测PDF文档中的文本，并将那些低于置信度阈值的文本行引导至人工审核环节，由财务团队成员进行审核。你决定使用**Amazon
    Textract**提供的异步文档文本检测API，借助其预训练的机器学习模型从PDF文档中提取文本，使用**Amazon A2I**设置人工工作流，审核和修改那些置信度低于95%的文本，同时利用Amazon
    DynamoDB存储原始检测到的文本以及修正后的内容，供Partner Integration团队使用。
- en: 'We will be building our solution using an Amazon SageMaker Jupyter notebook
    that will allow us to review the code and results as we execute it step by step.
    We will be performing the following tasks:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Amazon SageMaker Jupyter笔记本构建我们的解决方案，这将允许我们在逐步执行代码时查看代码和结果。我们将执行以下任务：
- en: As a first step, we will create a private labeling workforce for human review
    using the Amazon SageMaker Console. For more details, please refer to [https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，我们将使用Amazon SageMaker控制台创建一个私有标签工作队伍进行人工审核。更多详情，请参考[https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html)。
- en: We will start the solution workflow by inspecting the sample registration forms
    available to us when we clone the GitHub repository for this chapter. We will
    use Amazon Textract to start an asynchronous text detection job.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过检查从 GitHub 仓库克隆的本章示例注册表单来启动解决方案工作流。我们将使用 Amazon Textract 启动一个异步文本检测任务。
- en: Then, we will get the results for the text detection job, select specific lines
    from the document, and inspect the detection confidence scores.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将获取文本检测任务的结果，从文档中选择特定行，并检查检测置信度分数。
- en: We will set up an Amazon A2I human review loop using the tabular task UI template
    and send the text lines from each document for all the documents to the human
    loop.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用表格任务 UI 模板设置一个 Amazon A2I 人工审查循环，并将每个文档中的文本行发送到人工循环中。
- en: Logging in as a private worker, we will work on the allocated review task, making
    changes to the text lines with low - confidence detection scores for all the documents.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以私人工作者身份登录后，我们将处理分配的审查任务，对所有文档中检测置信度较低的文本行进行修改。
- en: We will upload the detected and corrected text lines to a DynamoDB table for
    downstream processing.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把检测到并修正的文本行上传到 DynamoDB 表中，以便进行后续处理。
- en: Now that we've got the context for the exercise and gone over our intended process,
    let's start building the solution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了本次练习的背景并过了一遍我们的流程，接下来让我们开始构建解决方案。
- en: Building the solution
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建解决方案
- en: In the previous section, we introduced our use case, which is to submit company
    registrations for public trading to the SEC, covered the architecture of the solution
    we will be building, and briefly walked through the solution components and workflow
    steps. In this section, we will get right down to business and start executing
    the tasks that will build our solution. But first, there are some prerequisites
    we have to take care of.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了我们的用例——将公司注册提交给 SEC 进行公开交易，涵盖了我们将要构建的解决方案的架构，并简要介绍了解决方案组件和工作流步骤。在这一节中，我们将直接进入正题，开始执行构建解决方案的任务。但首先，我们需要处理一些先决条件。
- en: Setting up for the solution build
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为解决方案构建做准备
- en: If you have not done so in the previous chapters, you will have to create an
    Amazon SageMaker Jupyter notebook, as well as setting up **Identity and Access
    Management** (**IAM**) permissions for that notebook role to access the AWS services
    we will use in this notebook. After that, you will need to clone this book's GitHub
    repository ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services)),
    create an Amazon S3 ([https://aws.amazon.com/s3/](https://aws.amazon.com/s3/))
    bucket, and provide the bucket's name in the notebook to start execution.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在之前的章节中没有做过，你需要创建一个 Amazon SageMaker Jupyter 笔记本，并设置**身份与访问管理**（**IAM**）权限，允许该笔记本角色访问我们将在本笔记本中使用的
    AWS 服务。之后，你还需要克隆本书的 GitHub 仓库（[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services)），创建一个
    Amazon S3（[https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)）存储桶，并在笔记本中提供存储桶的名称以开始执行。
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please ensure that you have completed the tasks mentioned in the *Technical
    requirements* section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保你已经完成了*技术要求*部分中提到的任务。
- en: 'Follow these steps to complete these tasks before we execute the cells from
    our notebook:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤完成这些任务，然后我们就可以执行笔记本中的单元格了：
- en: Follow the instructions documented in the *Creating an Amazon SageMaker Jupyter
    notebook instance* subsection in the *Setting up your AWS environment* section
    of [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027), *Introducing
    Amazon Textract*, to create your Jupyter notebook instance.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照[*第二章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中*设置 AWS 环境*部分的*创建
    Amazon SageMaker Jupyter 笔记本实例*子节中的说明，创建你的 Jupyter 笔记本实例。
- en: IAM role Permissions While Creating Amazon SageMaker Jupyter Notebooks
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建 Amazon SageMaker Jupyter 笔记本时的 IAM 角色权限
- en: Accept the default for the IAM role at notebook creation time to allow access
    for any S3 bucket.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建笔记本时接受默认的 IAM 角色，以允许访问任何 S3 存储桶。
- en: Once you have created the notebook instance and its status is **InService**,
    click on **Open Jupyter** in the **Actions** menu heading for the notebook instance.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你创建了笔记本实例并且其状态为**InService**，点击笔记本实例的**操作**菜单中的**打开 Jupyter**。
- en: This will take you to the **home** folder of your notebook instance.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带你到笔记本实例的**首页**文件夹。
- en: Click on **New** and select **Terminal**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **New** 并选择 **Terminal**。
- en: In the terminal window, type `cd SageMaker` and then `git clone https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，输入 `cd SageMaker` 然后 `git clone https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services`。
- en: Now, exit the terminal window, go back to the home folder, and you will see
    a folder called `Natural-Language-Processing-with-AWS-AI-Services`. Click this
    folder to bring up the chapter folders and click `Chapter 16`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，退出终端窗口，返回到主文件夹，您将看到一个名为 `Natural-Language-Processing-with-AWS-AI-Services`
    的文件夹。点击该文件夹以显示章节文件夹，并点击 `Chapter 16`。
- en: Open this folder by clicking on it. You should see a notebook called `Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击打开该文件夹，您应该看到一个名为 `Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb`
    的笔记本。
- en: Open this notebook by clicking on it.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击打开此笔记本。
- en: Follow the steps in this notebook that correspond to the next few subheadings
    in this section by executing one cell at a time. Please read the descriptions
    that were added to each notebook cell.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照本笔记本中与本节接下来的子标题相对应的步骤，逐个执行每个单元格。请阅读添加到每个笔记本单元格中的描述。
- en: Next, we'll cover some additional IAM prerequisites.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一些额外的 IAM 前提条件。
- en: Additional IAM prerequisites
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的 IAM 前提条件
- en: 'We have to enable additional policies for our SageMaker Notebook role. Please
    refer to the *Changing IAM permissions and trust relationships for the Amazon
    SageMaker Notebook execution role* subsection in the *Setting up your AWS environment*
    section in [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027), *Introducing
    Amazon Textract*, for detailed instructions on how to execute the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的 SageMaker Notebook 角色启用额外的策略。请参阅 [*第 2 章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)
    中的 *更改 IAM 权限和信任关系以执行 Amazon SageMaker Notebook 角色* 子章节，*介绍 Amazon Textract* 部分，了解如何执行以下步骤的详细说明：
- en: Please attach the `TextractFullAccess` and `AmazonAugmentedAIFullAccess` policies
    to your Amazon SageMaker Notebook IAM role if you've not already done so.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未执行，请将 `TextractFullAccess` 和 `AmazonAugmentedAIFullAccess` 策略附加到您的 Amazon
    SageMaker Notebook IAM 角色。
- en: 'Add an `iam:PassRole` permission as an inline policy to your SageMaker Notebook
    execution role:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `iam:PassRole` 权限作为内联策略添加到您的 SageMaker Notebook 执行角色中：
- en: '[PRE0]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we have set up our notebook and set up an IAM role to run the walkthrough
    notebook, we will create the private labeling workforce.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经设置好了笔记本并配置了运行演练笔记本的 IAM 角色，接下来我们将创建私有标注工作队。
- en: Creating a private team for the human loop
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为人工循环创建一个私有团队
- en: 'Refer to *Step 0* in the notebook ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb))
    for the instructions we will execute now. In this section, we will create a private
    team using the Amazon SageMaker labeling workforce console, and we will add ourselves
    to the private team as a worker. This is required so that we can log in to the
    labeling task UI when we reach the Amazon A2I step in this solution. Please execute
    the following steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考笔记本中的 *Step 0*（[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb)），以了解我们现在将执行的指令。在本节中，我们将使用
    Amazon SageMaker 标注工作队控制台创建一个私有团队，并将我们自己作为工人添加到私有团队中。这是为了确保在此解决方案中的 Amazon A2I
    步骤时，我们能够登录到标注任务 UI。请执行以下步骤：
- en: Log in to the AWS Management Console if you've not already done so (please refer
    to the *Technical requirements* section at the beginning of this chapter for more
    details), type Amazon SageMaker in the **Services** search bar, and go to the
    Amazon SageMaker console. Once there, on the left of the UI, click on **Ground
    Truth** and then **Labelling workforces**. On the screen, select the **Private**
    tab at the top and click on **Create private team**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未登录 AWS 管理控制台（请参阅本章开头的 *技术要求* 部分以了解更多详细信息），请在 **Services** 搜索栏中输入 Amazon
    SageMaker 并进入 Amazon SageMaker 控制台。进入控制台后，在 UI 左侧，点击 **Ground Truth**，然后选择 **Labelling
    workforces**。在屏幕上，选择顶部的 **Private** 标签并点击 **Create private team**。
- en: Enter a name for your private team in the **Team Name** field and leave the
    default selection of **Create a new Amazon Cognito user group** as-is in the **Add
    Workers** section. Scroll down and click **Create private team**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**团队名称**字段中输入您的私人团队名称，并保持**创建一个新的 Amazon Cognito 用户组**为默认选择，保持在**添加工作人员**部分。向下滚动并点击**创建私人团队**。
- en: 'You will be returned to the `nlp-doc-team` team should be visible under `arn:aws:sagemaker:region-name-123456:workteam/private-crowd/team-name`.
    Please copy this ARN and provide it in the notebook in **Step 1 – Cell 1**:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将返回到`nlp-doc-team`团队，并应在`arn:aws:sagemaker:region-name-123456:workteam/private-crowd/team-name`下可见。请复制此
    ARN 并在笔记本的**步骤 1 – 单元格 1**中提供它：
- en: '[PRE1]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, scroll down the previous screen, go to the `no-reply@verificationemail.com`.
    Follow the instructions provided to complete the signup process.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向下滚动到前一个屏幕，进入 `no-reply@verificationemail.com`。按照提供的说明完成注册过程。
- en: Now, add yourself to the private team by clicking on **nlp-doc-team** and then
    **Add workers to team**. Select your email address from the list and click on
    **Add workers to team**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**nlp-doc-team**，然后点击**向团队添加工作人员**，将自己添加到私人团队中。从列表中选择您的电子邮件地址并点击**向团队添加工作人员**。
- en: Now that we have added the private team, let's create an Amazon S3 bucket.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了私人团队，接下来创建一个 Amazon S3 存储桶。
- en: Creating an Amazon S3 bucket
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 Amazon S3 存储桶
- en: 'Follow the instructions documented in the *Creating an Amazon S3 bucket, a
    folder, and uploading objects* subsection in the *Setting up your AWS environment*
    section of [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027), *Introducing
    Amazon Textract*, to create your Amazon S3 bucket. If you created an S3 bucket
    in the previous sections, please reuse that bucket. For this chapter, you just
    need to create the S3 bucket. We will create the folders and upload the objects
    directly from the notebook:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照 [*第二章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中*设置您的 AWS 环境*部分的*创建一个
    Amazon S3 存储桶、文件夹并上传对象*小节中的说明，创建您的 Amazon S3 存储桶。如果您在前面的章节中创建了 S3 存储桶，请重复使用该存储桶。本章仅需创建
    S3 存储桶。我们将在笔记本中直接创建文件夹并上传对象：
- en: 'Once you have the bucket''s name, please type it in **Step 1 – Cell 1** of
    the notebook:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取存储桶名称后，请在笔记本中的**步骤 1 – 单元格 1**中输入它：
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute **Step 1 – Cell 1** of the notebook by clicking the **Run** button in
    the top menu of the notebook UI. This will import the libraries we need, initialize
    the variables, and get our kernel ready for the next set of steps.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击笔记本 UI 顶部菜单中的**步骤 1 – 单元格 1**的**运行**按钮来执行。这样将导入我们需要的库，初始化变量，并为下一组步骤准备好内核。
- en: 'Finally, execute **Step 1 – Cell 2** in the notebook to upload the registration
    documents to our S3 bucket:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在笔记本中执行**步骤 1 – 单元格 2**，将注册文档上传到我们的 S3 存储桶：
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have created the S3 bucket, imported the libraries we need, and
    uploaded the documents to our S3 bucket, let's extract the contents using **Amazon
    Textract**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了 S3 存储桶，导入了所需的库，并将文档上传到 S3 存储桶，接下来使用**Amazon Textract**提取内容。
- en: Extracting the registration document's contents using Amazon Textract
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Amazon Textract 提取注册文档的内容
- en: 'This section corresponds to *Steps 2* and *3* in the notebook ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb)).
    In this section, we will submit an asynchronous text detection job using Amazon
    Textract. Once the job completes, we will get the results of the text detection
    and load them into a **pandas DataFrame** ([https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)),
    select the text lines we need, and review the results. Follow these steps using
    the aforementioned notebook and execute the cells to perform the tasks required:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本节对应于笔记本中的*步骤 2*和*步骤 3*（[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb)）。在本节中，我们将使用
    Amazon Textract 提交一个异步文本检测作业。作业完成后，我们将获得文本检测的结果，并将其加载到**pandas DataFrame**中（[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)），选择我们需要的文本行并审查结果。请使用上述笔记本按照这些步骤执行单元格，以完成所需的任务：
- en: 'Execute **Step 2 – Cell 1** to define the bucket handle and declare a dictionary
    for storing Textract Job IDs for each of our documents:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 2 – 单元格 1**来定义存储桶句柄，并声明一个字典，用于存储每个文档的 Textract 作业 ID：
- en: '[PRE4]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute `NotificationChannel` attribute as input to the Textract `StartDocumentTextDetection`
    API ([https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html](https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html))
    to indicate the Amazon SNS ([https://aws.amazon.com/sns](https://aws.amazon.com/sns))
    topic that the message will be sent to when the job completes. You can set up
    AWS Lambda to subscribe to the topic, and on receipt of the message, you can call
    the Textract `GetDocumentTextDetection` API ([https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentTextDetection.html](https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentTextDetection.html))
    to retrieve the extracted text. We will execute this API in the notebook in **Step
    3 – Cell 1** here.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`NotificationChannel`属性作为 Textract `StartDocumentTextDetection` API 的输入（[https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html](https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html)），以指示作业完成时，消息将发送到的
    Amazon SNS（[https://aws.amazon.com/sns](https://aws.amazon.com/sns)）主题。您可以设置 AWS
    Lambda 来订阅该主题，并在收到消息后调用 Textract `GetDocumentTextDetection` API（[https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentTextDetection.html](https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentTextDetection.html)）以检索提取的文本。我们将在笔记本中执行该
    API，在**步骤 3 – 单元格 1**中。
- en: 'Finally, execute **Step 2 – Cell 3** to print the Job IDs for each of the documents:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，执行**步骤 2 – 单元格 3**来打印每个文档的作业 ID：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we must go to *Step 3* in the notebook. Here, we will define the helper
    classes to parse the JSON response from Textract. Then, we will load the text
    lines we need into a dictionary that we will use in the subsequent steps. Click
    **Run** in the notebook to execute **Step 3 – Cell 1**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须进入笔记本中的*步骤 3*。在这里，我们将定义帮助类来解析来自 Textract 的 JSON 响应。然后，我们将需要的文本行加载到字典中，在后续步骤中使用。点击笔记本中的**运行**以执行**步骤
    3 – 单元格 1**。
- en: 'Execute `df_indoc`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`df_indoc`：
- en: '[PRE6]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Execute **Step 3 – Cell 3** in the notebook to define the filter criteria for
    what text lines are important to us when reviewing the registration documents.
    Finally, execute **Step 3 – Cell 4** to create a new DataFrame that only contains
    the text lines we are interested in:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 3 – 单元格 3**以定义筛选条件，指定在审查注册文件时哪些文本行对我们重要。最后，执行**步骤 3 – 单元格 4**以创建一个新的
    DataFrame，其中只包含我们感兴趣的文本行：
- en: '[PRE7]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The DataFrame''s results are shown in the following screenshot. Some of the
    low - confidence entries are highlighted here:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DataFrame 的结果显示在下面的屏幕截图中。这里高亮显示了一些低置信度条目：
- en: '![Figure 16.1 – Text lines from the SEC registration documents'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.1 – 来自 SEC 注册文件的文本行'
- en: '](img/B17528_16_01.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_16_01.jpg)'
- en: Figure 16.1 – Text lines from the SEC registration documents
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1 – 来自 SEC 注册文件的文本行
- en: Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The text entries appear garbled because these were intentionally introduced
    in the PDF documents for our use case to trigger low - confidence predictions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些文本条目是故意在PDF文档中引入的，以触发低置信度的预测，因此它们显示为乱码。
- en: Now that we have digitized the text we need from the registration documents,
    let's cover setting up our human review workflow using Amazon A2I.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将注册文件中需要的文本数字化，让我们开始设置使用Amazon A2I的人工审核工作流。
- en: Setting up an Amazon A2I human workflow loop
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置一个Amazon A2I人工工作流循环
- en: 'For the code blocks discussed here, please refer to *Steps 4*, *5*, and *6*
    in the notebook ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb)).
    It is time to set up a human workflow using the Private Team we created in *Step
    0* and send the results to the **Amazon A2I** human loop for review and modifications,
    as required:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这里讨论的代码块，请参考笔记本中的*步骤 4*、*步骤 5*和*步骤 6*（[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2016/Improve-accuracy-of-pdf-processing-with-Amazon-Textract-and-Amazon-A2I-forGitHub.ipynb)）。现在是时候使用我们在*步骤
    0*中创建的私人团队设置一个人工工作流，并将结果发送到**Amazon A2I**人工循环进行审核和修改，如有必要：
- en: Let's start by initializing some variables we will need for the next few tasks.
    Please execute **Step 4 – Cell 1** in the notebook.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从初始化一些我们在接下来任务中需要的变量开始。请执行笔记本中的**步骤 4 – 单元格 1**。
- en: Execute **Step 4 – Cell 2** in the notebook to define the human task UI template
    that we will use for the human review activity. We selected the task template
    for tabular data from the Amazon A2I Sample task UI GitHub repository ([https://github.com/aws-samples/amazon-a2i-sample-task-uis](https://github.com/aws-samples/amazon-a2i-sample-task-uis))
    and customized it for our needs.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 4 – 单元格 2**，在笔记本中定义我们将用于人工审核活动的任务UI模板。我们从Amazon A2I样本任务UI的GitHub仓库中选择了适用于表格数据的任务模板（[https://github.com/aws-samples/amazon-a2i-sample-task-uis](https://github.com/aws-samples/amazon-a2i-sample-task-uis)），并根据我们的需求进行了定制。
- en: 'Execute **Step 4 – Cell 3** to create the task UI based on the template:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 4 – 单元格 3**，根据模板创建任务UI：
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will get the following output:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将获得以下输出：
- en: '[PRE9]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, execute **Step 5 – Cell 1** in the notebook to create an **Amazon A2I
    Flow Definition** that orchestrates tasks to workforces and collects output data:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，执行笔记本中的**步骤 5 – 单元格 1**，创建一个**Amazon A2I流定义**，以协调任务与工作队伍，并收集输出数据：
- en: '[PRE10]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Execute **Step 5 – Cell 2** to start the human workflow loop:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 5 – 单元格 2**，启动人工工作流循环：
- en: '[PRE11]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will get the following results:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将获得以下结果：
- en: '[PRE12]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Execute **Step 6 – Cell 1** to upload the scanned images for the first page
    of the registration documents to our S3 bucket. We will refer to these images
    from within the Amazon A2I task UI:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 6 – 单元格 1**，将注册文件第一页的扫描图像上传到我们的S3存储桶。我们将在Amazon A2I任务UI中引用这些图像：
- en: '[PRE13]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Execute **Step 6 – Cell 2** to start the human loop for all three registration
    documents in our use case. In this cell, we will create a random name for each
    human loop, select specific lines from each document that fall below the confidence
    threshold of 95%, and send those inputs to an Amazon A2I **StartHumanLoop** API
    call ([https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/API_StartHumanLoop.html](https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/API_StartHumanLoop.html)):'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 6 – 单元格 2**，为我们用例中的所有三份注册文件启动人工循环。在此单元格中，我们将为每个人工循环创建一个随机名称，选择每份文件中低于95%置信度阈值的特定行，并将这些输入发送到Amazon
    A2I的**StartHumanLoop** API调用（[https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/API_StartHumanLoop.html](https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/API_StartHumanLoop.html)）：
- en: '[PRE14]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Execute **Step 6 – Cell 3** to check the status of our human loops; the status
    should be **InProgress**:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 6 – 单元格 3**，检查我们人工循环的状态；状态应为**进行中**：
- en: '[PRE15]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we will log in to the Amazon A2I task UI to review and modify the text
    lines. Let''s log in to the worker portal to review the predictions and modify
    them as required. Execute **Step 6 – Cell 4** to get the URL to our Task UI:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将登录到Amazon A2I任务UI，审查并修改文本行。让我们登录到工作人员门户，审查预测并根据需要进行修改。执行**步骤 6 – 单元格 4**，获取我们的任务UI的URL：
- en: '[PRE16]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Use the credentials you set up in *Step 0* when creating the labeling workforce
    to log in to the task UI. You will see a task called **SEC Registration Form Review**.
    Select it and click on **Start working**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你在*步骤 0*中设置的凭据登录任务 UI，凭据是在创建标注工作队时设置的。你会看到一个名为**SEC 注册表单审核**的任务。选择它并点击**开始工作**。
- en: The first page of the original registration form will be displayed:![Figure
    16.2 – Task UI displaying an image of the registration form with illegible text
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始注册表单的第一页将显示：![图 16.2 – 任务 UI 显示带有难以辨认文本的注册表单图像
- en: '](img/B17528_16_02.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_16_02.jpg)'
- en: Figure 16.2 – Task UI displaying an image of the registration form with illegible
    text
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.2 – 任务 UI 显示带有难以辨认文本的注册表单图像
- en: Scroll down the page to find a table that displays what Textract detected, the
    confidence score of the text line, a radio button to check if we think the detected
    text is correct or incorrect, an input area for us to modify the detected text,
    and a comments field. Make changes to the table and click the **Submit** button
    at the lower left of the page:![Figure 16.3 – The document modifications page
    in Amazon A2I
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动页面，找到一个表格，显示 Textract 检测到的内容、文本行的置信度分数、一个单选按钮用于检查我们是否认为检测到的文本是正确还是错误、一个输入区域用于修改检测到的文本，还有一个评论字段。修改表格后，点击页面左下角的**提交**按钮：![图
    16.3 – Amazon A2I 中的文档修改页面
- en: '](img/B17528_16_03.jpg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_16_03.jpg)'
- en: Figure 16.3 – The document modifications page in Amazon A2I
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.3 – Amazon A2I 中的文档修改页面
- en: Now, the task UI will be refreshed to show the next document from the three
    we sent to Amazon A2I for human review. Repeat the preceding two steps to review
    the image, scroll down to make changes in the table, and click **Submit**. You
    will have to repeat this for the last document as well.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，任务 UI 将刷新，显示我们提交给 Amazon A2I 进行人工审核的三个文档中的下一个文档。重复前述两步，审查图像，滚动表格以进行修改，并点击**提交**。你还需要为最后一个文档重复此过程。
- en: Once you have made your changes and submitted the task for all three documents,
    go back to the notebook and execute **Step 6 – Cell 5** to check the status of
    the human loops. All three human loops will have a status of **Completed**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有三个文档的更改并提交任务后，返回笔记本，执行**步骤 6 – 单元格 5**以检查人工审核环节的状态。所有三个人工审核环节的状态将为**已完成**。
- en: 'Finally, execute **Step 6 – Cell 7** in the notebook to retrieve the changes
    that were made by the human reviewers and add this to our DataFrame. When inspecting
    the DataFrame, we will see the following result:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，执行笔记本中的**步骤 6 – 单元格 7**，以获取人工审核员所做的更改，并将其添加到我们的 DataFrame 中。检查 DataFrame
    时，我们将看到以下结果：
- en: '![Figure 16.4 – A2I human review results updated'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.4 – A2I 人工审核结果已更新'
- en: '](img/B17528_16_04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_16_04.jpg)'
- en: Figure 16.4 – A2I human review results updated
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4 – A2I 人工审核结果已更新
- en: In this section, we covered the majority of the processing needs for this solution
    by using Amazon Textract asynchronous APIs to extract text from multiple PDF documents.
    After that, we used Amazon A2I to set up a human loop to review and correct low
    - confidence text detections. As the final step in our solution, we will persist
    the results of our activity.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过使用 Amazon Textract 异步 API 从多个 PDF 文档中提取文本，涵盖了此解决方案的大部分处理需求。之后，我们使用
    Amazon A2I 设置了一个人工审核环节，审查并修正低置信度的文本检测结果。作为我们解决方案的最后一步，我们将保存我们的活动结果。
- en: Storing results for downstream processing
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为下游处理存储结果
- en: 'Now that we understand how to set up a review workflow, let''s persist the
    results for consumption by downstream applications. We will be executing the cells
    in *Step 7* of the notebook for this section:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解如何设置审核工作流，接下来让我们将结果持久化，以便下游应用程序使用。我们将在本节中执行笔记本中的*步骤 7*：
- en: Execute **Step 7 – Cell 1** to create an **Amazon DynamoDB** table, a managed
    database service for storing and accessing key-value pairs with very low latency.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 7 – 单元格 1**来创建一个**Amazon DynamoDB**表，这是一个用于存储和访问键值对的托管数据库服务，具有非常低的延迟。
- en: 'Execute **Step 7 – Cell 2** to upload the contents of our DataFrame to the
    DynamoDB table:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤 7 – 单元格 2**来将我们的 DataFrame 内容上传到 DynamoDB 表：
- en: '[PRE17]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The values will be inserted into the DynamoDB table, as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 值将被插入到 DynamoDB 表中，如下所示：
- en: '![Figure 16.5 – Corrected registration document entries in DynamoDB'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.5 – 在 DynamoDB 中纠正的注册文档条目'
- en: '](img/B17528_16_05.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_16_05.jpg)'
- en: Figure 16.5 – Corrected registration document entries in DynamoDB
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.5 – 在 DynamoDB 中纠正的注册文档条目
- en: That concludes the solution build. Please refer to the *Further reading* section
    for a code sample for building a similar solution using AWS Lambda and CloudFormation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案构建到此结束。请参考 *进一步阅读* 部分，以获取使用 AWS Lambda 和 CloudFormation 构建类似解决方案的代码示例。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we continued building advanced NLP solutions to address real-world
    requirements. We focused on asynchronously processing PDF documents and improving
    their accuracy by reviewing and modifying low - confidence detections using Amazon
    Textract and Amazon A2I.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续构建先进的 NLP 解决方案，以应对现实世界的需求。我们重点讨论了异步处理 PDF 文档，并通过使用 Amazon Textract
    和 Amazon A2I 审查和修改低置信度检测结果来提高其准确性。
- en: We learned how to register companies to the SEC use case with a need to extract
    text, and then validate and modify specific text lines in the documents before
    they could be passed to the Partner Integration team for submission to SEC. We
    considered an architecture built for scale and ease of setup. We assumed that
    you are the chief architect overseeing this project, and we then proceeded to
    provide an overview of the solution components in the *Introducing the PDF batch
    processing use case* section.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了如何为需要提取文本的公司注册到 SEC 使用案例，然后验证并修改文档中的特定文本行，以便在提交给合作伙伴集成团队进行提交到 SEC 之前进行处理。我们考虑了一个为扩展性和易于设置而构建的架构。我们假设你是负责监督该项目的首席架构师，然后我们在
    *介绍 PDF 批处理使用案例* 部分概述了解决方案组件。
- en: We then went through the prerequisites for the solution build, set up an Amazon
    SageMaker Notebook instance, cloned our GitHub repository, and started executing
    the code in the notebook based on the instructions provided in this chapter. We
    covered setting up our private work team using Amazon SageMaker labeling workforces,
    extracting the relevant content from the PDF documents in batch mode using Amazon
    Textract, forwarding the detection results to an Amazon A2I human review loop,
    completing the human task steps using the UI, reviewing the results, and storing
    the document's contents, along with the corrections, in an Amazon DynamoDB table
    for downstream processing.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了解决方案构建的先决条件，设置了一个 Amazon SageMaker Notebook 实例，克隆了我们的 GitHub 仓库，并根据本章提供的说明开始执行
    Notebook 中的代码。我们涉及了使用 Amazon SageMaker 标注工作队伍设置私有工作团队，使用 Amazon Textract 以批处理模式从
    PDF 文档中提取相关内容，将检测结果转发到 Amazon A2I 人工审核循环，使用 UI 完成人工任务步骤，审查结果，并将文档内容及其修改存储到 Amazon
    DynamoDB 表中，以便后续处理。
- en: In the next chapter, we will be addressing one more interesting feature in Amazon
    Textract, namely handwriting detection, and how to set up a solution to detect
    handwritten content for review, modification, and consumption.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 Amazon Textract 的另一个有趣功能——手写检测，以及如何设置解决方案来检测手写内容，以供审查、修改和使用。
- en: Further reading
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please refer to the following resources for more information:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源以获取更多信息：
- en: '*Deriving conversational insights from invoices with Amazon Textract, Amazon
    Comprehend and Amazon Lex*, by Mona Mona, Prem Ranga, and Saida Chanda ([https://aws.amazon.com/blogs/machine-learning/deriving-conversational-insights-from-invoices-with-amazon-textract-amazon-comprehend-and-amazon-lex/](https://aws.amazon.com/blogs/machine-learning/deriving-conversational-insights-from-invoices-with-amazon-textract-amazon-comprehend-and-amazon-lex/)).'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过 Amazon Textract、Amazon Comprehend 和 Amazon Lex 从发票中提取对话性见解*，作者：Mona Mona、Prem
    Ranga 和 Saida Chanda（[https://aws.amazon.com/blogs/machine-learning/deriving-conversational-insights-from-invoices-with-amazon-textract-amazon-comprehend-and-amazon-lex/](https://aws.amazon.com/blogs/machine-learning/deriving-conversational-insights-from-invoices-with-amazon-textract-amazon-comprehend-and-amazon-lex/)）。'
- en: '*Amazon Textract documentation for asynchronous operations* ([https://docs.aws.amazon.com/textract/latest/dg/async.html](https://docs.aws.amazon.com/textract/latest/dg/async.html)).'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Amazon Textract 异步操作文档*（[https://docs.aws.amazon.com/textract/latest/dg/async.html](https://docs.aws.amazon.com/textract/latest/dg/async.html)）。'
