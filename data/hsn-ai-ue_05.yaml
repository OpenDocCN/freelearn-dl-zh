- en: Environment Querying System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境查询系统
- en: '*A good leader knows which place is good, and EQS knows better!*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*一位优秀的领导者知道哪里是好的，而EQS知道得更好！*'
- en: Welcome to [Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml),* Environment
    Querying System*. In this chapter, we are going to use a specific, yet very powerful,
    system within the Unreal AI Framework. I'm talking about the **Environment Querying
    System** (**EQS)**. We will explore the system and will understand not only how
    it works, but how to use it effectively in our games.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第4章，*环境查询系统*。[Chapter 4](1773b819-a79b-4339-ab07-6833fd9bc3a0.xhtml)。在本章中，我们将使用虚幻AI框架中的一个特定且非常强大的系统。我指的是
    **环境查询系统**（**EQS**）。我们将探索这个系统，并不仅了解其工作原理，还将了解如何在我们的游戏中有效地使用它。
- en: Once again, **EQS** falls into the realm of *Decision-Making*, and, in particular,
    evaluating which is the best place (or actor, in the context of Unreal) to satisfy
    certain conditions. We will see how it works in detail through this chapter, but
    as an anticipation of what we will cover, know that the system filters offer different
    possibilities, and the remaining ones assign a score. The choice that has the
    highest score is selected.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，**EQS** 属于 *决策制定* 的领域，特别是评估哪个位置（或虚幻中的演员）最适合满足某些条件。我们将通过本章详细了解其工作原理，但作为对我们将要涵盖内容的预览，请记住，系统过滤器提供不同的可能性，剩余的则分配一个分数。得分最高的选择将被选中。
- en: 'In particular, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是我们将涵盖以下主题：
- en: How to enable the ***Environment Querying System (EQS)***
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启用 ***环境查询系统 (EQS)***？
- en: Understanding ***how EQS works***
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 ***EQS的工作原理***
- en: Learning about ***Generators***, ***Tests***, and ***Contexts***
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 ***Generators***、***Tests*** 和 ***Contexts***
- en: Exploring the ***built-in*** ***Generators***, ***Tests***, and ***Contexts*** of
    *EQS*
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 *EQS* 内置的 ***Generators***、***Tests*** 和 ***Contexts***
- en: '***Extending EQS*** with custom ***Generators***, ***Tests***, and ***Contexts***'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义的 ***Generators***、***Tests*** 和 ***Contexts*** 来扩展 ***EQS***
- en: So, let's dive in!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们深入探讨吧！
- en: Enabling the Environment Querying System
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用环境查询系统
- en: EQS is a feature that was introduced way back to Unreal 4.7, and improved a
    lot in 4.9\. However, in version 4.22, EQS is listed as an experimental feature,
    despite it being successfully used in many games, thus revealing that EQS is robust.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: EQS 是一个在 Unreal 4.7 中引入的功能，在 4.9 中得到了很大的改进。然而，在版本 4.22 中，EQS 被列为实验性功能，尽管它在许多游戏中得到了成功应用，这表明
    EQS 是稳健的。
- en: 'As a result, we need to enable it from the ***Experimental*** features settings.
    From the top menu, go to **Edit | Editor Preferences…**, as shown in the following
    screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要从 ***实验性功能设置*** 中启用它。从顶部菜单，转到 **编辑 | 编辑器首选项…**，如下面的截图所示：
- en: '![](img/d334f93a-4611-4928-a184-4d699ff1980e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d334f93a-4611-4928-a184-4d699ff1980e.png)'
- en: Be careful that you don't get confused with the ***Project Settings***. From
    the top menu, above the *Viewport*, you only have access to the ***Project Settings***.
    However, from the top menu of the whole editor, you will be able to find ***Editor
    Preferences***. The preceding screenshot should help you locate the right menu
    (that is, the ***Edit*** drop-down menu).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，不要与 ***项目设置*** 混淆。从顶部菜单，在 *视口* 之上，您只能访问 ***项目设置***。然而，从整个编辑器的顶部菜单中，您将能够找到
    ***编辑器首选项***。前面的截图应有助于您找到正确的菜单（即 ***编辑*** 下拉菜单）。
- en: 'From the lateral menu, you will be able to see a section named **Experimental**
    (under the **General** category), as highlighted in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从侧边菜单中，您将能够看到一个名为 **Experimental**（在 **General** 类别下）的部分，如下面的截图所示：
- en: '![](img/0b61d381-c4a3-4774-8cee-36df15cc7742.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b61d381-c4a3-4774-8cee-36df15cc7742.png)'
- en: 'If you scroll down through the settings, you will find the AI category, in
    which you are able to enable the **Environment Querying System**:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您滚动浏览设置，您将找到 AI 类别，其中您可以启用 **环境查询系统**：
- en: '![](img/9fb7d9b6-2cbe-4fed-936b-16a679f72e08.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fb7d9b6-2cbe-4fed-936b-16a679f72e08.png)'
- en: Check the box next to this option and, as a result, the ***Environment Querying System***
    will be activated in the whole project. Now, you will be able to create assets
    for it (as well as extend it) and call it from a *Behavior Tree*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选此选项旁边的框，结果，整个项目中的 ***环境查询系统*** 将被激活。现在，您将能够为其创建资产（以及扩展它），并从 *行为树* 中调用它。
- en: In case you are unable to see the ***Environment Querying System*** checkbox
    within the ***AI category***, it's likely you are using a recent version of the
    engine in which (finally) ***EQS*** is not experimental anymore, and so it is
    always enabled within your project. If this is your situation, then skip this
    section and move on to the next one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在**AI类别**中看不到***环境查询系统***复选框，那么你很可能正在使用一个较新的引擎版本，其中（终于）***EQS***不再是实验性的，因此在你的项目中始终是启用的。如果这是你的情况，那么请跳过这一部分，继续下一部分。
- en: Understanding the Environment Querying System
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解环境查询系统
- en: When people face EQS for the first time, it might seem overwhelming, especially
    because it is unclear how the different parts of the system work and why. The
    aim of this section is to improve your understanding of the system by getting
    you familiar with the underlying workflow of EQS, which will help you with the
    actual workflow when you create a query.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们第一次面对EQS时，可能会感到不知所措，尤其是因为它不清楚系统的不同部分是如何工作的以及为什么。本节的目标是通过让你熟悉EQS的底层工作流程来提高你对系统的理解，这将有助于你在创建查询时的实际工作流程。
- en: The general mechanism of EQS
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EQS的一般机制
- en: Imagine that, at a certain point, our AI agent is under fire, and it needs to
    evaluate different places for cover. One place might be far but well protected,
    whereas another one might be very close but not well protected. What should we
    do?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，在某个时刻，我们的AI代理正在遭受火力攻击，并且需要评估不同的掩护地点。一个地方可能很远但保护得很好，而另一个地方可能很近但保护得不好。我们应该怎么办？
- en: 'One way to solve this problem is by using ***Utility Functions*** and solving
    equations in time (we will discuss them in more detail in [Chapter 14](d9a581ce-adca-46fe-8f95-a78b762ebc46.xhtml), *Going
    Beyond*). Actually, this produces very good results, and it is successfully implemented
    in many games. However, Unreal offers another possibility: EQS. This being said,
    it''s not mandatory to use EQS instead of utility functions, but EQS as part of
    the AI framework makes it easy to evaluate such decisions since it is a built-in
    system.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法之一是使用***效用函数***并在时间上解决方程（我们将在[第14章](d9a581ce-adca-46fe-8f95-a78b762ebc46.xhtml)，*超越*)中详细讨论）。实际上，这会产生非常好的结果，并且已经在许多游戏中成功实施。然而，Unreal提供了另一种可能性：EQS。也就是说，使用EQS而不是效用函数不是强制性的，但作为AI框架的一部分，EQS使得评估此类决策变得容易，因为它是一个内置的系统。
- en: So, coming back to our agent in need of a cover, a *Behavior Tree* will run
    an EQS query, which will give the final result of the place where the agent should
    get cover. Now, how does an Environment Query work?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，回到我们那个需要掩护的代理，一个*行为树*将运行一个EQS查询，这将给出代理应该获得掩护的最终位置。现在，环境查询是如何工作的呢？
- en: First of all, a component (called a Generator, which we will look at in a moment) will
    generate a series of locations (or agents, which we will look at later in this
    chapter) according to some criteria specified in the Tests (we will get to them
    in a moment). For instance, we can take different positions on a uniform grid,
    which is very handy when we don't know which kind of locations we are searching
    for in advance (before evaluation).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个组件（称为生成器，我们稍后将讨论）将根据在测试中指定的某些标准生成一系列位置（或代理，我们将在本章稍后讨论）。例如，我们可以在一个均匀的网格上取不同的位置，这在不知道预先（在评估之前）要寻找哪种位置时非常有用。
- en: Then, there is a filtering process for possible locations (or actors), in which
    it eliminates all that do not satisfy a certain criteria. In our cover example,
    any place that is still exposed to direct fire should be discarded.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有一个过滤过程用于可能的地点（或演员），其中它会消除所有不符合特定标准的。在我们的掩护示例中，任何仍然暴露在直接火力下的地方都应该被丢弃。
- en: The remaining places are evaluated (the system assigns them a score), based
    on other criteria. Again, in our cover example, this might be the distance from
    the agent, how much cover they offer, or how close to the enemy the place is.
    The system assigns a score by taking into consideration all of these factors (and,
    of course, some will be weighted more than others; e.g. protection from fire might
    be more important than the distance from the enemy's location).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的地方将根据其他标准进行评估（系统会为它们分配一个分数）。再次，在我们的掩护示例中，这可能是代理的距离、它们提供的掩护程度，或者地点离敌人的距离。系统通过考虑所有这些因素（当然，其中一些因素可能比其他因素更重要；例如，从火力的保护可能比从敌人位置的距离更重要）来分配分数。
- en: Finally, the location (or actor) with the highest score is given from the query
    to the *Behavior Tree*, which will decide what to do with it (e.g. flee quickly
    to that place to take cover).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从查询中给出得分最高的位置（或演员）到 *行为树*，这将决定如何处理它（例如，快速逃离到那个地方以躲避）。
- en: The components of an Environment Query
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境查询的组件
- en: Based on the mechanism we described in the previous section, let's dig deeper
    into how the actual implementation of the EQS in Unreal works.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 基于我们在上一节中描述的机制，让我们深入了解 Unreal 中 EQS 的实际实现方式。
- en: At a high level, we have *Environment Queries*, *Contexts*, *Generators*, and
    *Tests*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，我们有 *环境查询*、*上下文*、*生成器* 和 *测试*。
- en: Environment Queries
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境查询
- en: As the name suggests, an ***Environment Query*** is a data structure (similar
    to a *Behavior Tree*) that holds information regarding how the query should be
    performed. In fact, it is an asset that you can create and find within your *Content
    Browser*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，***环境查询*** 是一种数据结构（类似于 *行为树*），它包含有关如何执行查询的信息。实际上，它是一个您可以在您的 *内容浏览器* 中创建和找到的资产。
- en: 'You can create a new **Environment Query** by right-clicking on your *Content
    Browser* and then **Artificial Intelligence** | **Environment Queries**, as shown
    in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在您的 *内容浏览器* 上右键单击，然后选择 **人工智能** | **环境查询** 来创建一个新的 **环境查询**，如下面的截图所示：
- en: '![](img/d7e443b8-9e49-4002-8511-5102cdc30e9f.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7e443b8-9e49-4002-8511-5102cdc30e9f.png)'
- en: Keep in mind that this option will not appear if EQS is not enabled.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果 EQS 未启用，此选项将不会出现。
- en: 'This is what it looks like in the *Content Browser*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 *内容浏览器* 中的样子：
- en: '![](img/a6a37b70-daed-4aab-9fe2-3267aad501f9.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a6a37b70-daed-4aab-9fe2-3267aad501f9.png)'
- en: 'If we double-click on it to open it, Unreal opens a specific and **dedicated
    editor** for ***Environmental Queries***. This is what the Editor looks like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们双击它以打开它，Unreal 将打开一个特定且 **专用** 的编辑器用于 ***环境查询***。这就是编辑器的样子：
- en: '![](img/2cbf0931-5fd1-43c4-bc34-f1dc9329ae7a.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2cbf0931-5fd1-43c4-bc34-f1dc9329ae7a.png)'
- en: Editor view
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器视图
- en: 'As you can see, it is very similar to a *Behavior Tree*, but you can only attach
    a Generator node to the ***Root*** node (only one), which results to be a leaf
    as well. Therefore, the whole "*tree*" will be just the ***Root*** node with a
    ***Generator***. In fact, by using a *Behavior Tree*-like editor, you can easily
    set up an ***Environmental Query***. On the (unique) *Generator* node, you can
    attach one or more ***Tests****—*either the Generator itself, or Contexts. Here
    is an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它与 *行为树* 非常相似，但您只能将一个生成器节点附加到 ***根节点***（只有一个），这将使其也成为叶子节点。因此，整个 "*树*" 将只是
    ***根节点*** 和一个 ***生成器***。实际上，通过使用类似 *行为树* 的编辑器，您可以轻松设置一个 ***环境查询***。在（唯一的）*生成器*
    节点上，您可以附加一个或多个 ***测试节点****——无论是生成器本身还是上下文。以下是一个示例：
- en: '![](img/3d258634-8313-4eec-862d-2092550e4dfb.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3d258634-8313-4eec-862d-2092550e4dfb.png)'
- en: Editor view
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器视图
- en: We will understand what this means in the next section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中了解这意味着什么。
- en: Contexts
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文
- en: Contexts are children of a particular and handy class that retrieves information.
    You can create/extend a ***Context*** either through Blueprint or by using C++.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文是特定且方便的类，用于检索信息。您可以通过蓝图或使用 C++ 来创建/扩展一个 ***上下文***。
- en: The reason why they are called contexts is because they provide a context to
    either a Generator or to a Test. By having a context, the Generator (or the Test)
    is able to perform all the calculations, starting from that point. If you prefer,
    a context can be thought of as a special (and very articulated) variable that
    is able to procedurally pass a set of interesting Actors and/or locations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被称为上下文的原因是，它们为生成器或测试提供了一个上下文。通过拥有上下文，生成器（或测试）能够从那个点开始执行所有计算。如果您愿意，可以将上下文视为一个特殊（并且非常详细的）变量，能够程序化地传递一组有趣的演员和/或位置。
- en: 'Let''s look at an example so that we''re clear about what ***Contexts*** are.
    While performing a *Test*, you usually know where the ***Querier*** (e.g. the
    agent who needs the cover) is located (under the hood, even if the *Querier* is
    a default context). However, our test might need the location of our enemies (e.g.
    to check whether a cover spot is under fire or not, since it depends on the position
    of the enemies of our agent). ***Contexts*** can provide all of this information,
    and can do so in a procedural way: for instance, the agent might not be aware
    of every enemy of the map, so the ***Context*** might return only the enemies
    that the agent is currently aware of, so it only finds cover from those. Therefore,
    if there is a hidden enemy where it''s chose to take cover, then it''s tough luck
    for our agent!'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来看看**上下文**是什么。在进行**测试**时，您通常知道**查询者**（例如，需要掩护的智能体）的位置（在引擎盖下，即使**查询者**是默认上下文）。然而，我们的测试可能需要我们敌人的位置（例如，检查掩护点是否受到攻击，因为这取决于我们智能体的敌人的位置）。**上下文**可以提供所有这些信息，并且可以以程序化的方式做到这一点：例如，智能体可能不知道地图上的每个敌人，因此**上下文**可能只返回智能体当前意识到的敌人，因此它只从那些地方找到掩护。因此，如果有一个隐藏的敌人被选为掩护的地方，那么对我们智能体来说就是不幸的事情！
- en: Understanding ***Contexts*** is not easy, so stick through this chapter, and
    maybe re-read the previous paragraph at the end, when you have a better idea of
    what Generators and Tests are, as well as how to build an ***EQS*** in our project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 理解**上下文**并不容易，所以请坚持这一章，也许在您对生成器和测试以及如何在我们的项目中构建**EQS**有更好的了解之后，再重新阅读上一段。
- en: Generators
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器
- en: '***Generators***, as the name suggests, generate an initial set (or array)
    of locations (or actors). This set will be filtered and evaluated by Tests.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如同其名，**生成器**生成一个初始位置集（或数组）或演员。这个集合将由测试进行过滤和评估。
- en: The way to generate the initial set is completely free. If you have some important
    information regarding the place you are looking for before the evaluation stage,
    then you can create a custom ***Generator*** (for example, don't check places
    with water if the agent is unable to swim, or don't consider flying enemies if
    the only available attack is melee).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 生成初始集的方法完全自由。如果您在评估阶段之前有关您正在寻找的地方的重要信息，那么您可以创建一个自定义的**生成器**（例如，如果智能体不能游泳，则不要检查有水的地方；如果唯一可用的攻击是近战，则不考虑飞行敌人）。
- en: Like *Contexts*, ***Generators*** are children of a specific class. You can
    create Generators in Blueprint as well as in C++.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与**上下文**一样，**生成器**是特定类别的子类。您可以在蓝图以及C++中创建生成器。
- en: Usually, the most used generator is the grid one, which will generate a uniform
    grid around a context (e.g. around the agent). By doing this, the agent will check
    more or less all of its surroundings.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最常用的生成器是网格生成器，它会在一个上下文周围（例如，在智能体周围）生成一个均匀的网格。通过这样做，智能体将检查其周围的大部分区域。
- en: Tests
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: '***Tests*** are responsible to both ***Filtering*** and ***Assigning a Score**
    (Evaluating)* to the different locations (or actors) that are generated by the
    *Generator*. A single ***Test*** can filter and score on the same criteria, as
    well as just one of the two.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试**负责对由**生成器**生成的不同位置（或演员）进行**过滤**和**评分**（评估）。单个**测试**可以在同一标准上过滤和评分，也可以只进行其中之一。'
- en: In the case of *Tests* that use ***Filtering***, they try to identify which
    locations (or Actors) are not suitable for our criteria. EQS is optimized, so
    it performs the *Tests* in a specific order to try and detect unsuitable places
    early on. It does this so that it doesn't assign a score that won't be used.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**过滤**的**测试**的情况下，它们试图确定哪些位置（或演员）不符合我们的标准。EQS进行了优化，因此它以特定的顺序执行测试，以尽早检测不合适的地方。这样做是为了避免分配不会使用的分数。
- en: Once all of the locations (or Actors) have been filtered out, the remaining
    ones are evaluated. Thus, ***each Test*** that ***is able to assign a score***
    is called (*executed*) on the location (or Actor) to report the evaluation in
    the form of a score (which can be positive or negative).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有位置（或演员）都被过滤掉，剩下的位置将被评估。因此，**每个能够分配分数的测试**都会在位置（或演员）上执行（执行），以报告评估结果，形式为分数（可以是正数或负数）。
- en: As a side note, *Tests* need (at least) a *Context* to properly *filter* and
    *evaluate*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁注，**测试**需要（至少）一个**上下文**来正确地进行**过滤**和**评估**。
- en: Let's look at an easy example of a Test to understand how they work. One of
    the most common Tests is ***Distance***, that is, how far is this place (the generated
    we are evaluating) from a ***Context***? The *Context* can be the *Querier*, or
    the enemy that it is attacking, or anything else. Thus, we can (for instance)
    filter places above or below a certain distance threshold (e.g. we might not want
    perfect cover places if they are too far from the Player). The **same** ***Distance Test***
    can assign a score, depending on the distance, which can be positive (or negative)
    if the context is far (or close).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的测试例子来了解它们是如何工作的。最常见的测试之一是***距离***，即这个地点（我们正在评估的生成地点）距离***上下文***有多远？上下文可以是*查询者*，或它正在攻击的敌人，或任何其他东西。因此，我们可以（例如）过滤距离高于或低于某个距离阈值的地点（例如，如果它们离玩家太远，我们可能不想有完美的掩护地点）。相同的***距离测试***可以根据距离分配得分，如果上下文远离（或接近），得分可以是正的（或负的）。
- en: 'Moreover, a **Test** has a **Scoring Factor** that represents **the weight**
    of the ***Test***: how important the Test is, and much influence this ***Test***
    needs to have when calculating the final score of the currently evaluated location
    (or actor). In fact, you will run many different ***Tests*** on the locations
    that are generated by the *Generator*. The ***Scoring Factor*** allows you to
    easily weigh them to determine which Test has a higher impact on the final score
    of the location (or actor).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一个**测试**有一个**得分因子**，它代表***测试***的**权重**：测试的重要性以及此***测试***在计算当前评估位置（或演员）的最终得分时需要产生的影响。实际上，您将在由*生成器*生成的位置上运行许多不同的***测试***。得分因子允许您轻松权衡它们，以确定哪个测试对位置的最终得分（或演员）有更高的影响。
- en: 'Each *Test* has the following structure for its options in the *Details* panel:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每个*测试*在其*详细信息*面板中的选项具有以下结构：
- en: '![](img/e599ab6f-505a-4846-9744-bf41714e4613.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e599ab6f-505a-4846-9744-bf41714e4613.png)'
- en: '***Test***: Here, you can select whether the ***Test Purpose*** is to ***Filter
    and Score***, or just one of the two, and add a description (has no impact on
    the Test, but you can see it as a comment to recall what this test was about).
    Additionally, there might be other options, such as *Projection Data* that you
    can use with the *Navigation System* (for those tests that rely on the *Navigation
    System*).'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***测试***：在这里，您可以选择***测试目的***是要***过滤和得分***，还是仅其中之一，并添加描述（对测试没有影响，但您可以将其视为注释来回忆这个测试的内容）。此外，可能还有其他选项，例如可以与*导航系统*一起使用的*投影数据*（对于依赖于*导航系统*的测试）。'
- en: '***Specific Test***: This is the place where the specific options for the Test
    are held. This varies from test to test.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***特定测试***：这是存放测试特定选项的地方。这因测试而异。'
- en: '***Filter***: Here, you can select how the *Filter* behaves. This varies from
    test to test, but usually you are able to select a ***Filter Type***, which can
    be a *range* (or *minimum* or *maximum*) in case the tests valuate a float as
    a return value; otherwise, it can be a *boolean* in the case of conditional *Tests*.
    This tab doesn''t appear if the ***Test Purpose*** is set to ***Score Only***.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***过滤***：在这里，您可以选择如何设置*过滤*的行为。这因测试而异，但通常您可以选择一个***过滤类型***，如果测试将返回值评估为浮点数，则可以是*范围*（或*最小值*或*最大值*）；否则，在条件*测试*的情况下，可以是*布尔值*。如果***测试目的***设置为***仅得分***，则此选项卡不会显示。'
- en: '***Score***: Here, you can select how the *Scoring* behaves. This varies from
    test to test. For float return types from tests, you can select an equation for
    scoring, along with a normalization. Moreover, there is ***Scoring Factor***,
    which is the weight of this test compared to the others. For boolean return values,
    there is just the Scoring Factor. This tab doesn''t appear if the ***Test Purpose*** is
    set to ***Filter Only***.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***得分***：在这里，您可以选择如何设置*得分*的行为。这因测试而异。对于测试的浮点返回类型，您可以选择一个得分方程，以及一个归一化。此外，还有***得分因子***，这是与其他测试相比此测试的权重。对于布尔返回值，只有得分因子。如果***测试目的***设置为***仅过滤***，则此选项卡不会显示。'
- en: '***Preview***: This gives you a preview of what the filter and scoring function
    look like.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***预览***：这为您提供了过滤和得分函数的预览。'
- en: As you can see, these options are very easy to grasp, and you will understand
    them even better if you practice with EQS.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这些选项非常容易理解，如果您使用EQS进行练习，您将更好地理解它们。
- en: Visual representation of the components
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件的视觉表示
- en: These components might not be super intuitive at the beginning, but once you
    get used to EQS, you will realize how they make sense, and why the system has
    been designed in this way.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件一开始可能不太直观，但一旦你习惯了EQS，你就会意识到它们是如何有意义的，以及为什么系统会以这种方式设计。
- en: 'To summarize the components and their importance, as well as to give you a
    visual representation, here is a diagram that you can reference:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结组件及其重要性，以及提供一个视觉表示，这里有一个你可以参考的图表：
- en: '![](img/fc428801-f5bd-46f6-9137-56b3409f4f24.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc428801-f5bd-46f6-9137-56b3409f4f24.png)'
- en: Running an Environmental Query within a Behavior Tree
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在行为树中运行环境查询
- en: Finally, the last step to fully understanding how an ***Environmental Query***
    works is to see how it can be run within a *Behavior Tree*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要完全理解环境查询是如何工作的，最后一步是看看它如何在行为树中运行。
- en: 'Thankfully, we have a node named run EQS, which is a built-in Behavior Tree
    Task. In looks as follows in a hypothetical *Behavior Tree Editor*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有一个名为“运行EQS”的节点，这是一个内置的行为树任务。在假设的行为树编辑器中看起来如下：
- en: '![](img/ce511ffd-e992-4020-b55c-c093cd4f23d0.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce511ffd-e992-4020-b55c-c093cd4f23d0.png)'
- en: 'The possible settings, which can be found in the Details panel, are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可能在详细信息面板中找到的可能设置如下：
- en: '![](img/0d46b7e4-59f3-44cb-9ffa-a194307f9806.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d46b7e4-59f3-44cb-9ffa-a194307f9806.png)'
- en: 'As you can see, many are deprecated (so just ignore them), but I have highlighted
    the ones that are the most important. Here''s an explanation of them:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，许多已经过时（所以只需忽略它们），但我已经突出显示了最重要的那些。以下是对它们的解释：
- en: '***Blackboard Key***: This is the Blackboard Key Selector that references a
    *Blackboard Variable*, in which the result of the EQS will be stored.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***黑板键***：这是引用包含EQS结果的*黑板变量*的黑板键选择器。'
- en: '***Query Template***: A specific reference to the EQS we want to run. Otherwise,
    we can deactivate this option to activate an *EQSQuery Blackboard Key*.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***查询模板***：对我们要运行的特定EQS的引用。否则，我们可以取消激活此选项以激活一个*EQSQuery黑板键*。'
- en: '***Query Config***: These are optional parameters for the query (unfortunately,
    we won''t be looking at them in detail in this book).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***查询配置***：这是查询的可选参数（不幸的是，我们在这本书中不会详细讨论它们）。'
- en: '***EQSQuery Blackboard Key***: A *Blackboard Key Selector* that references
    a *Blackboard Variable* containing an *EQS*. If activated, the *EQSQuery* contained
    in the *Blackboard Variable* will be executed, and not the *Query Template* one.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***EQSQuery黑板键***：一个*黑板键选择器*，它引用包含*EQS*的黑板变量。如果激活，包含在*黑板变量*中的*EQSQuery*将被执行，而不是*查询模板*。'
- en: '***Run Mode***: This shows results of the query we are going to retrieve. The
    possible options are as follows:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***运行模式***：这显示了我们将要检索的查询结果。可能的选项如下：'
- en: '***Single Best Item***: This retrieves the point (or actor) that scored the
    best'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***最佳单个项目***：这会检索得分最高的点（或演员）'
- en: '***Single Random Item from Best 5%***: This retrieves a random point among
    the best 5% scoring locations (or actors)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***从最佳5%中随机选择单个项目***：这会从得分最高的5%的位置（或演员）中随机检索一个点'
- en: '***Single Random Item from Best 25%***: This retrieves a random point among
    the best 25% scoring locations (or actors)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***从最佳25%中随机选择单个项目***：这会从得分最高的25%的位置（或演员）中随机检索一个点'
- en: '***All Matching***: This retrieves all the locations (or actors) that match
    the query (they haven''t been filtered out)'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***所有匹配项***：这会检索所有与查询匹配的位置（或演员）（它们尚未被过滤掉）'
- en: This concludes how we can run an EQS and retrieve its result so that it can
    be used within a *Behavior Tree*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们如何运行EQS以及如何检索其结果，以便在行为树中使用。
- en: Of course, there are other ways to trigger an EQSQuery, which are not necessarily
    done within a *Behavior Tree*, even though this is the most common use of the
    EQS. Unfortunately, we will not cover other methods to run an EQSQuery in this
    book.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有其他触发EQSQuery的方法，这些方法不一定是在行为树中完成的，尽管这是EQS最常见的使用方式。不幸的是，我们在这本书中不会涵盖运行EQSQuery的其他方法。
- en: Not only Locations, but also Actors!
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不仅位置，还包括演员！
- en: I emphasised a lot when I said "…evaluating a location **(or Actor)…** ".
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说“……评估一个位置**（或演员）……”时，我强调了这一点。
- en: In fact, one of the coolest features of EQS is the possibility to evaluate not
    only locations, but actors as well!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，EQS最酷的功能之一是能够评估不仅位置，还可以评估演员！
- en: Once again, you can use EQS as a decision-making process. Imagine that you need
    to choose an enemy to attack first. You might want to take into consideration
    various parameters, such as the remaining life of that enemy, how strong it is,
    and how much it is considered a threat in the immediate future.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，您可以将EQS用作决策过程。想象一下，您需要先选择一个敌人进行攻击。您可能需要考虑各种参数，例如该敌人的剩余生命值、它的强度以及它在未来立即被视为威胁的程度。
- en: By carefully setting an EQS, you are able to assign a score to each of the enemies,
    depending on which one is the most convenient to attack. Of course, in this situation,
    you might need to put in a little bit of work to create the proper Generator,
    along with Contexts and the proper Tests, but in the long run, it makes EQS a
    very good choice when the agent needs to make these kinds of decisions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细设置EQS，您可以为每个敌人分配一个分数，取决于哪个敌人最方便攻击。当然，在这种情况下，您可能需要做一些工作来创建适当的生成器，以及上下文和适当的测试，但从长远来看，这使得EQS在代理需要做出这类决策时成为一个非常好的选择。
- en: Exploring the built-in nodes
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索内置节点
- en: Before we create our own Generators, Contexts, and Tests, let's talk about built-in
    nodes. Unreal comes with a handful of useful built-in, general-purpose nodes.
    We are going to explore them in this section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建自己的生成器、上下文和测试之前，让我们先谈谈内置节点。虚幻引擎自带了一些有用的通用内置节点。我们将在本节中探讨它们。
- en: Keep in mind that this section is going to analytically explain how each of
    the built-in nodes of EQS works, like documentation would. So, please use this
    section as a reference manual if you wish, and skip sections if you are not interested
    in them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，本节将分析性地解释EQS中每个内置节点的工作原理，就像文档一样。因此，如果您愿意，请将本节用作参考手册，如果您不感兴趣，请跳过这些部分。
- en: Built-in Contexts
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置上下文
- en: Since we started explaining EQS by looking at ***Contexts***, let's start from
    ***built-in Contexts***. Of course, making general-purpose ***Contexts*** is almost
    a paradox, since a Context is very specific to the "*context*" (situation).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们是通过查看*上下文*来解释EQS的，所以让我们从*内置上下文*开始。当然，制作通用的*上下文*几乎是一个悖论，因为上下文非常具体于"*上下文*"（情境）。
- en: 'However, Unreal comes with two built-in Contexts:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，虚幻引擎自带了两个内置上下文：
- en: '***EnvQueryContext_Querier***: This represents the Pawn that is asking the
    query (to be precise, it isn''t the Pawn asking the Query, but the Controller
    that is running the *Behavior Tree* that is asking the query, and this context
    returns the controlled Pawn). Therefore, by using this *Context*, everything will
    be relative to the ***Querier***.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***EnvQueryContext_Querier***：这代表发起查询的Pawn（精确地说，这并不是发起查询的Pawn，而是运行*行为树*并发起查询的控制器，并且这个上下文返回受控Pawn）。因此，通过使用这个*上下文*，所有内容都将相对于***查询器***。'
- en: As I mentioned previously, under the hood, the *Querier* is indeed a *Context*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所述，在底层，*查询器*确实是一个*上下文*。
- en: '***EnvQueryContext_Item***: This returns all the locations that are generated
    by the *Generator*.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***EnvQueryContext_Item***：这返回由*生成器*生成的所有位置。'
- en: Built-in Generators
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置生成器
- en: There are many built-in ***Generators***, and most of the time, these will be
    more than enough so that you can do most of the EQS you want. You would use *custom
    Generators* only when you have a specific need, or when you want to optimize the
    EQS.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多内置的***生成器***，大多数情况下，这些将足够您完成大多数所需的EQS。您只有在有特定需求或希望优化EQS时才会使用*自定义生成器*。
- en: Most of these Generators are intuitive, so I'm going to explain them in brief,
    and provide (when necessary) a screenshot showing the kinds of points they are
    generating.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些生成器都很直观，所以我将简要解释它们，并在必要时提供截图，以展示它们生成点的方式。
- en: The following screenshots use a special Pawn that is able to visualize an Environment
    Query. We will learn how to use it later in this chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图使用了一个能够可视化环境查询的特殊Pawn。我们将在本章的后面学习如何使用它。
- en: This is the list of available built-in *Generators*, as you find them in the
    *Environmental Query Editor:*
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可用的内置*生成器*列表，正如您在*环境查询编辑器*中找到的那样：
- en: '![](img/edb9da7a-0421-4960-8348-5aa622a5ad9a.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/edb9da7a-0421-4960-8348-5aa622a5ad9a.png)'
- en: To organize this information, I'm going to split each Generator into a subsection,
    and I'm going to order them as they are listed in the preceding screenshot (alphabetically).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了组织这些信息，我将每个生成器分成一个子节，并将它们按先前的截图中的顺序（按字母顺序）排列。
- en: When I refer to the Settings of a Generator, I mean, once a specific Generator
    has been selected, the available options for it in the *Details Panel*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我提到Generator的设置时，我的意思是，一旦选择了特定的Generator，在*Details Panel*中就会显示它的可用选项。
- en: Actors Of Class
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别演员
- en: This Generator takes all of the actors of a specific class and returns all their
    locations as generated points (if these actors are within a certain radius from
    the Context).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Generator会获取特定类别的所有演员，并将它们的所有位置作为生成的点返回（如果这些演员在Context的一定半径内）。
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在*Environmental Query Editor*中的样子：
- en: '![](img/a5f859a7-56cb-4651-96ff-1a040c6f90c9.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5f859a7-56cb-4651-96ff-1a040c6f90c9.png)'
- en: 'The possible options are the ***Searched Actor Class*** (obviously) and the
    ***Search Radius*** from the ***Search Center*** (which is expressed as a *Context*).
    Optionally, we can retrieve all the actors of a certain class and ignore whether
    they are within the *Searched Radius*:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的选项包括***Searched Actor Class***（显然）和从***Search Center***来的***Search Radius***（这被表达为*Context*）。可选地，我们可以检索特定类别的所有演员，并忽略它们是否在*Search
    Radius*内：
- en: '![](img/faecc901-8ef1-44bb-91c9-5692d6029691.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faecc901-8ef1-44bb-91c9-5692d6029691.png)'
- en: In the preceding screenshot, I used the ***Querier*** as the ***Search Center***,
    a ***Search Radius*** of ***50000***, and the ***ThirdPersonCharacter*** as the ***Searched
    Actor Class***, since it is already available in the project.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我使用了***Querier***作为***Search Center***，***Search Radius***为***50000***，以及***ThirdPersonCharacter***作为***Searched
    Actor Class***，因为它们已经在项目中可用。
- en: 'By using these settings (and placing a couple of ***ThirdPersonCharacter***
    actors), we have the following situation:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些设置（并放置几个***ThirdPersonCharacter***演员），我们得到以下情况：
- en: '![](img/155643e4-46c9-446e-b401-da15ae3a69b0.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/155643e4-46c9-446e-b401-da15ae3a69b0.png)'
- en: Note the (blue) sphere around the three ***ThirdPersonCharacter*** actors.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意围绕三个***ThirdPersonCharacter***演员的（蓝色）球体。
- en: Current Location
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前位置
- en: The ***Current Location Generator*** simply retrieve the location(s) from the
    *Context* and uses it (or them) to generate the points.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '***Current Location Generator***简单地从*Context*中检索位置（或它们），并使用它（或它们）来生成点。'
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在*Environmental Query Editor*中的样子：
- en: '![](img/c9cdc1ae-401f-4d74-8e9e-e90d526f9702.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9cdc1ae-401f-4d74-8e9e-e90d526f9702.png)'
- en: 'The only setting that''s available for this *Generator* is ***Query Context***:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个*Generator*，唯一可用的设置是***Query Context***：
- en: '![](img/c4794baa-73a6-4354-96b1-b98a86200d66.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4794baa-73a6-4354-96b1-b98a86200d66.png)'
- en: 'Thus, if we use the ***Querier*** as the ***Query Context***, then we just
    have the location of the ***Querier*** itself, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们使用***Querier***作为***Query Context***，那么我们只有***Querier***自己的位置，如下面的截图所示：
- en: '![](img/c4c4a73f-e0e4-43fa-abf4-d89b7c99e9cd.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4c4a73f-e0e4-43fa-abf4-d89b7c99e9cd.png)'
- en: Composite
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复合
- en: The ***Composite Generator*** allows you to mix multiple Generators so that
    you have a vaster selection of points.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '***Composite Generator***允许你混合多个Generator，以便有更广泛的选择点。'
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在*Environmental Query Editor*中的样子：
- en: '![](img/73623a4d-508f-463a-929a-732047b0bd0a.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73623a4d-508f-463a-929a-732047b0bd0a.png)'
- en: 'In the *Settings*, you can set an array of ***Generators***:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Settings*中，你可以设置一个***Generators***数组：
- en: '![](img/b8bf8b82-c8d0-41b7-b04a-2400395aa65f.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8bf8b82-c8d0-41b7-b04a-2400395aa65f.png)'
- en: Since we don't have the time to go through everything in detail, I won't cover
    this Generator further.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有时间详细地查看所有内容，所以不会进一步介绍这个Generator。
- en: 'Points: Circle'
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点：圆形
- en: As the name suggests, the ***Circle Generator*** generates the points around
    a circle of a specified radius. Moreover, options for interacting with the *Navmesh*
    are available (so that you don't generate points outside the *Navmesh*).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，***Circle Generator***会在指定半径的圆周上生成点。此外，还提供了与*Navmesh*交互的选项（这样就不会在*Navmesh*之外生成点）。
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在*Environmental Query Editor*中的样子：
- en: '![](img/084d82ed-9cae-4b91-9422-395d41ed1065.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/084d82ed-9cae-4b91-9422-395d41ed1065.png)'
- en: 'This is a very complex generator, and so there are various settings for this
    generator. Let''s check them out:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常复杂的Generator，因此这个Generator有各种设置。让我们来看看它们：
- en: '![](img/0c4924b3-3dbc-4821-84c4-b3dccc5964bf.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c4924b3-3dbc-4821-84c4-b3dccc5964bf.png)'
- en: 'Ideally, it would be great to have a screenshot for each setting so that we
    can get a better feeling of how each setting affects the generation of the points.
    Unfortunately, this book already has many screenshots, and dedicating a chapter
    just to the different settings of these complex generators would take a lot of
    time and a lot of "*book space*". However, there is a better way for you to get
    the same feeling: ***Experiment yourself!*** Yes – once you know how to set up
    the ***EQSTestingPawn***, you can try them out yourself and see how each setting
    affects the generation process. This is the best way you can learn and really
    understand all of these settings.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，为每个设置提供一张截图会很好，这样我们可以更好地了解每个设置如何影响点的生成。不幸的是，这本书已经有了很多截图，仅为了这些复杂的生成器的不同设置而专门写一章将花费很多时间和空间。“书空间*”。然而，有一种更好的方法让你获得同样的感觉：***自己尝试！***是的——一旦你学会了如何设置***EQSTestingPawn***，你就可以自己尝试，看看每个设置如何影响生成过程。这是你学习和真正理解所有这些设置的最佳方式。
- en: '***Circ******le Radius***: As the name suggests, it is the radius of the Circle.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***圆半径***：正如其名所示，它是圆的半径。'
- en: '***Space Between***: How much space there should be between each point; if the *Point
    On Circle Spacing Method* is set to *By Space Between*.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***空间间隔***：每个点之间应该有多少空间；如果将*圆上点间隔方法*设置为*按空间间隔*。'
- en: '***Number of Points***: How many points should be generated; if the *Point
    On Circle Spacing Method* is set to *By Number of Points*.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***点数数量***：应该生成多少个点；如果将*圆上点间隔方法*设置为*按点数*。'
- en: '***Point On Circle Spacing Method***: Determines if the number of points to
    be generated should be calculated based on a constant number of points (***By
    Number of Points***), or by how many points fits the current circle if the space
    between the points is fixed (***By Space Between***).'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***圆上点间隔方法***：确定要生成的点数是否应根据固定数量的点（***按点数***）计算，还是根据固定间隔的点数来计算，如果点之间的空间是固定的（***按空间间隔***）。'
- en: '***Arc Direction***: If we are generating only an arc of the circle, this setting
    determines the direction this should be in. The method to calculate the direction
    can be either ***Two Points*** (it takes two *Contexts* and calculate the direction
    between the two) or ***Rotation*** (which takes a *Context* and retrieve its rotation,
    and based on that rotation, decides the direction of the Arc).'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***弧方向***：如果我们只生成圆的弧，此设置确定这个方向应该是怎样的。计算方向的方法可以是***两点***（它需要两个*上下文*并计算两点之间的方向）或***旋转***（它需要一个*上下文*并检索其旋转，然后根据该旋转决定弧的方向）。'
- en: '***Arc Angle***: If this is different from *360*, it defines the angle of cut
    where the points stop being generated, thus creating an *Arc* instead of a circle.
    The direction (or rotation) of such an *Arc* is controlled by the *Arc Direction*
    parameter.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***弧角度***：如果这与*360*不同，它定义了点停止生成的地方的切割角度，从而创建一个*弧*而不是圆。这种*弧*的方向（或旋转）由*弧方向*参数控制。'
- en: '***Circle Center***: As the name suggests, it is the center of the circle,
    expressed as a *Context*.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***圆心***：正如其名所示，它是圆的中心，表示为*上下文*。'
- en: '***Ignore Any Context Actor when Generating Circle***: If checked, it will
    not consider the actors that are used as Contexts for the circle, thus skipping
    to generate points in those locations.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***生成圆时忽略任何上下文演员***：如果选中，它将不会考虑用作圆的上下文的演员，从而跳过在这些位置生成点。'
- en: '***Circle Center Z Offset***: As the name suggests, it is an offset along the
    z-axis for the *Circle Center*.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***圆心Z偏移***：正如其名所示，它是*圆心*沿z轴的偏移。'
- en: '***Trace Data***: When generating the circle, if there is an obstacle, often,
    we don''t want to generate the points behind the obstacle. This parameter determines
    the rules for doing "*horizontal*" tracing. These options are as follows:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***追踪数据***：在生成圆时，如果有障碍物，通常我们不想在障碍物后面生成点。此参数确定进行"*水平*"追踪的规则。这些选项如下：'
- en: '***None***: There will be no trace, and all the generated points will be on
    the circle (or arc).'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***无***：将没有痕迹，所有生成的点都将位于圆上（或弧上）。'
- en: '***Navigation***: This is the default option. Where the *NavMesh* ends is where
    the point is generated, even if the distance from the center is less then the
    Radius (in some way, the circle assumes the shape of the *NavMesh* if its boarder
    is encountered).'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***导航***：这是默认选项。*NavMesh*结束的地方就是生成点的地方，即使中心距离小于半径（在某种程度上，如果遇到边界，圆会假设*NavMesh*的形状）。'
- en: '***Geometry***: The same as Navigation, but instead of using the *NavMesh*
    as a boarder, the tracing will use the Geometry of the level (this might be really
    useful if you don''t have a *NavMesh*).'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**几何形状**：与导航相同，但使用几何形状而不是*NavMesh*作为边界，追踪将使用级别的几何形状（如果你没有*NavMesh*，这可能非常有用）。'
- en: '***Navigation Over Ledges***: The same as Navigation, but now the trace is
    "*over ledges*".'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航过边缘**：与导航相同，但现在追踪是“过边缘”。'
- en: '***Projection Data***: This works similarly to Trace Data, but does a "*vertical*"
    trace by projecting the points from above. For the rest, the concept is exactly
    the same as *Trace Data*. The options are ***None***, ***Navigation***, and ***Geometry***,
    with the same meaning these assume in *Trace Data*. "*Navigation Over Ledges*"
    isn''t present because it wouldn''t make any sense.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投影数据**：这与Trace Data类似，但通过从上方投影点进行“垂直”追踪。其余部分，概念与*Trace Data*完全相同。选项是***无***，***导航***，和***几何形状***，它们在*Trace
    Data*中的含义相同。“Navigation Over Ledges”不存在，因为它没有意义。'
- en: 'By using the same settings that are shown in the preceding screenshot (I''m
    using *Trace Data* with *Navigation*, and I have a *NavMesh* in the Level), this
    is what it looks like (I activated the NavMesh with the *P* key so you can see
    that as well):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用前一个屏幕截图中显示的相同设置（我在使用*Trace Data*与*Navigation*，并且在级别中有*NavMesh*），这就是它的样子（我使用*P*键激活了NavMesh，所以你也能看到它）：
- en: '![](img/fe7378b5-f5e7-4d35-a7fa-4436dcbb8882.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe7378b5-f5e7-4d35-a7fa-4436dcbb8882.png)'
- en: 'By using *Geometry* for *Trace Data* instead, we obtain a very similar, but
    slightly different, shape:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用*几何形状*代替*Trace Data*，我们得到一个非常相似，但略有不同的形状：
- en: '![](img/55aa2a78-a5ad-4d86-96c2-b4d818e63cdd.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55aa2a78-a5ad-4d86-96c2-b4d818e63cdd.png)'
- en: If you have a NavMesh that ends, but not the Geometry of the level, the effect
    is even clearer.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个结束的NavMesh，但没有级别的几何形状，效果会更加明显。
- en: 'Points: Cone'
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点：圆锥
- en: As the name suggests, the ***Cone Generator*** generates the points in a cone
    of a specific Context (like a spotlight). Moreover, options to interact with the *Navmesh* are
    available (so that you can project points onto the *Navmesh*).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，**圆锥生成器**在特定上下文（如聚光灯）的圆锥内生成点。此外，还有与*Navmesh*交互的选项（这样你就可以将点投影到*Navmesh*上）。
- en: It is important to understand that its shape is generated from many circles,
    from which we always take the same arc. So, if we take the whole circle, we are
    basically generating the points in the area of a single slice.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，其形状是由许多圆生成的，我们总是取相同的弧。所以，如果我们取整个圆，我们基本上是在生成单个切片的区域中的点。
- en: This Generator can also be used to generate points to cover the area of an entire
    circle.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成器也可以用来生成覆盖整个圆区域的点。
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在*环境查询编辑器*中的样子：
- en: '![](img/cf81d358-66fc-410e-9bbd-898cf0a4240f.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf81d358-66fc-410e-9bbd-898cf0a4240f.png)'
- en: 'Its settings are mostly related to the shape of the cone, so let''s explore
    them all:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 其设置主要与圆锥的形状有关，所以让我们来探索它们：
- en: '![](img/f25a26ed-5022-43df-96f6-2b70981a2948.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f25a26ed-5022-43df-96f6-2b70981a2948.png)'
- en: Once again, it would be ideal to have a screenshot for each combination of settings
    so that you have a feeling of how each setting affects the generation of points.
    Because we don't have the space to do so in this book, I encourage you to experiment
    with an ***EQSTestingPawn*** so that you get a clearer understanding.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，最好为每种设置组合都有一张截图，这样你就能感受到每个设置如何影响点的生成。由于我们在这本书中没有足够的空间这样做，我鼓励你使用***EQSTestingPawn***进行实验，以便你有一个更清晰的理解。
- en: '***Aligned Points Distance***: This is the distance between each arc of the
    generated points (the distance between points of the same angle from the center).
    A smaller value generates more points, and the area that''s taken into consideration
    will be more dense.'
  id: totrans-179
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对齐点距离**：这是生成点之间的弧距离（从中心相同角度的点之间的距离）。较小的值生成更多的点，考虑到的区域将更加密集。'
- en: '***Cone Degrees***: This dictates how big the arc of each circle is (we are
    taking into consideration how wide the slice is). A value of 360 takes the whole
    area of the circle into account.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圆锥度数**：这决定了每个圆的弧度大小（我们考虑切片的宽度）。360的值考虑了整个圆的面积。'
- en: '***Angle Step***: This is the distance, expressed in degrees, between the points
    of the same arc. Smaller values mean more points, and the area taken into consideration
    will be more dense.'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角度步长**：这是相同弧线点之间的距离，以度为单位。较小的值意味着更多的点，考虑到的区域将更加密集。'
- en: '***Range***: This determines how far away the cone can be (by using a spotlight
    as an example, how far it can illuminate).'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***范围***：这决定了圆锥可以延伸多远（以聚光灯为例，它可以照亮多远）。'
- en: '***Center Actor***: This is the center of the generated circles and is used
    to determine the cone. It is the center, and is expressed as a *Context*.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***中心演员***：这是生成的圆的中心，用于确定圆锥。它是中心，并以*上下文*的形式表示。'
- en: '***Include Context Location***: As the name suggests, if checked, a point will
    also be generated in the center of the cone/circles.'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***包含上下文位置***：正如其名所示，如果选中，还会在圆锥/圆的中心生成一个点。'
- en: '***Projection Data***: This performs a "*vertical*" trace, by projecting the
    points from above by taking into consideration either the Geometry or the *Navigation
    Mesh*. In fact, the possible options are ***None***, ***Navigation***, and ***Geometry***.'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***投影数据***：通过从上方投影点（考虑几何形状或 *导航网格*）执行 "*垂直*" 追踪。实际上，可能的选择是 ***无***， ***导航***，和 ***几何***。'
- en: 'By using the default settings, this is what the cone might look in the level:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认设置，圆锥在关卡中可能看起来是这样的：
- en: '![](img/95f7be1a-6cd2-46dd-bb31-cded301870c7.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/95f7be1a-6cd2-46dd-bb31-cded301870c7.png)'
- en: 'Points: Donut'
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点：甜甜圈
- en: As the name suggests, the ***Donut Generator*** generates the points in a donut
    shape (or "*Annulus*", for those of you who are Math lovers), starting from a
    specific center that's given as a Context. Moreover, various options so that you
    can interact with the *Navmesh* are available (so that you can project points
    onto the *Navmesh*).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示， ***甜甜圈生成器*** 以甜甜圈形状（或对那些喜欢数学的人来说是"*圆环*"）生成点，从一个特定的中心开始，该中心作为一个上下文给出。此外，还有各种选项，以便你可以与 *导航网格* 交互（这样你就可以将点投影到 *导航网格* 上）。
- en: This generator can be used to generate spiral shapes as well. Just like the
    cone shape, this generator can be used to generate points to cover the area of
    a whole circle. You can do this by setting its *Inner Radius* to zero.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此生成器还可以用于生成螺旋形状。就像圆锥形状一样，此生成器可以用于生成点来覆盖整个圆的面积。你可以通过将其*内半径*设置为零来实现这一点。
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 *环境查询编辑器* 中的样子：
- en: '![](img/c1f37474-a43d-4211-abf8-3b52efcd0244.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c1f37474-a43d-4211-abf8-3b52efcd0244.png)'
- en: 'The following settings are available:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的以下设置：
- en: '![](img/71132786-3332-4f02-a2c5-a6dc68a0c654.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/71132786-3332-4f02-a2c5-a6dc68a0c654.png)'
- en: '***Inner Radius***: This is the radius of the "*hole*" of the donuts; no points
    will be generated within this radius (thus it''s no closer to this value from
    the *Center*).'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***内半径***：这是甜甜圈的"*洞"*的半径；在此半径内不会生成任何点（因此它离*中心*的距离更远）。'
- en: '***Outer Radius***: This is the radius of the whole donut; points will be generated
    in rings between the *Inner Radius* and the *Outer Radius*. This also means that
    no points will be generated beyond this radius (thus, it''s further to this value
    from the *Center*).'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***外半径***：这是整个甜甜圈的半径；点将在*内半径*和 *外半径*之间生成环。这也意味着在此半径之外不会生成任何点（因此，它离*中心*的距离更远）。'
- en: '***Number of Rings***: How many rings of points should be generated in-between
    the *Inner Radius* and the *Outer Radius*. These rings are always evenly spaced,
    which means that their distance is controlled by this variable, along with the
    *Inner Radius* and the *Outer Radius*.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***环数***：在*内半径*和*外半径*之间应生成多少个点环。这些环总是均匀分布的，这意味着它们的距离由这个变量控制，以及*内半径*和*外半径*。'
- en: '***Points per Ring***: This dictates how many points each generated ring should
    have. The points are evenly spaced along the ring.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***每环点数***：这决定了每个生成的环应该有多少个点。点沿环均匀分布。'
- en: '***Arc Direction***: If we are generating only an arc of the donut (to be precise,
    only an arc of the circles that will generate the donut), this setting determines
    the direction this should be in. The method to calculate the direction can be
    either ***Two Points*** (it takes two *Contexts* and calculates the direction
    between the two) or ***Rotation*** (which takes a *Context* and retrieves its
    rotation, and based on that rotation, decides on the direction of the Arc).'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***弧方向***：如果我们只生成甜甜圈的弧（精确地说，只生成将生成甜甜圈的圆的弧），此设置确定这个方向。计算方向的方法可以是 ***两点***（它需要两个 *上下文*并计算两点之间的方向）或 ***旋转***（它需要一个 *上下文*并检索其旋转，然后根据该旋转决定弧的方向）。'
- en: '***Arc Angle***: If this isn''t *360*, it defines the angle of cut where the
    points stop being generated, thus creating an *Arc* instead of a circle. The direction
    (or rotation) of such an *Arc* is controlled by the *Arc Direction* parameter.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***弧度角***：如果这不是*360*，它定义了点停止生成的地方的切割角度，从而创建一个*弧*而不是圆。这种*弧*的方向（或旋转）由*弧方向*参数控制。'
- en: '***Use Spiral Pattern***: If checked, the points in each ring are slightly
    offset to generate a spiral pattern.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***使用螺旋模式***：如果选中，每个环中的点略有偏移以生成螺旋图案。'
- en: '***Center***: This is the center of the generated rings (as well as the minimum and
    maximum extensions of the donut specified with *Inner Radius* and *Outer Radius*,
    respectively). It is expressed as a *Context*.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***中心***：这是生成的环的中心（以及用*内半径*和*外半径*指定的甜甜圈的最小和最大延伸）。它被表示为*上下文*。'
- en: '***Projection Data***: This performs a "*vertical*" trace by projecting the
    points from above by taking into consideration either the Geometry or the *Navigation
    Mesh*. The possible options are ***None***, ***Navigation***, and ***Geometry***.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***投影数据***：这通过从上方投影点来执行一个"*垂直*"追踪，考虑了几何形状或*导航网格*。可能的选项是***无***，***导航***，和***几何***。'
- en: 'To understand these settings, take a look at the following screenshot:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这些设置，请看以下截图：
- en: '![](img/fe4cd6af-ed12-474d-9dd0-c3d53ec0f964.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe4cd6af-ed12-474d-9dd0-c3d53ec0f964.png)'
- en: 'By using these slightly modified settings (please note how I increased the
    *Inner Radius*, bumped up the *Number of Rings* and *Points per Ring*, and also
    used *Navigation* for the Projection Data), it is possible to easily visualize
    the donut. Here are the settings I used:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些略微修改的设置（请注意我如何增加了*内半径*，提高了*环数*和*每环点数*，并且还使用了*导航*来投影数据），可以轻松地可视化甜甜圈。以下是使用的设置：
- en: '![](img/f3ceb081-525b-4431-a8e5-e8f9b3657b25.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f3ceb081-525b-4431-a8e5-e8f9b3657b25.png)'
- en: 'This is the result they produced:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它们产生的结果：
- en: '![](img/137cd92e-b644-428a-b134-d3dfa19e6202.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/137cd92e-b644-428a-b134-d3dfa19e6202.png)'
- en: 'By using the same settings, and checking ***Use Spiral Pattern***, you can
    see how the points in the different rings are slightly offset, creating a spiral
    pattern:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用相同的设置，并检查***使用螺旋模式***，你可以看到不同环中的点略有偏移，从而创建一个螺旋图案：
- en: '![](img/fe410a5b-80a1-4188-8afb-358a1b8b2d48.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe410a5b-80a1-4188-8afb-358a1b8b2d48.png)'
- en: 'Points: Grid'
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点：网格
- en: As the name suggests, the ***Grid Generator*** generates the points within a
    Grid. Moreover, options to interact with the *Navmesh* are available (so that
    you don't generate points outside the *Navmesh*).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，***网格生成器***在网格内生成点。此外，还有与*导航网格*交互的选项（这样你就不必在*导航网格*外生成点）。
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在*环境查询编辑器*中的样子：
- en: '![](img/99e82896-89ce-411a-aece-bbc0a5ccb177.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/99e82896-89ce-411a-aece-bbc0a5ccb177.png)'
- en: 'The settings for this generator are quite straightforward:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成器的设置相当简单：
- en: '![](img/27e2040f-c1e2-4e34-a45f-b54c2b50808f.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27e2040f-c1e2-4e34-a45f-b54c2b50808f.png)'
- en: '***GridHalfSize***: How much the grid should extend from its center (which
    means it is half the size of the full grid). The dimensions of the grid are fully
    determined by this parameter, along with*Space Between*.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***网格半尺寸***：网格应从其中心延伸多远（这意味着它是完整网格大小的一半）。网格的尺寸完全由这个参数以及*行间距*决定。'
- en: '***Space Between***: How much space there is between each row and column of
    the grid. The dimensions of the grid are fully determined by this parameter, along
    with*GridHalfSize*.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***行间距***：网格的每一行和每一列之间的空间大小。网格的尺寸完全由这个参数以及*网格半尺寸*决定。'
- en: '***Generate Around***: This is the center of the grid (where it starts being
    generated), and it is expressed as a *Context*.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***生成区域***：这是网格的中心（生成开始的地方），它被表示为*上下文*。'
- en: '***Projection Data***: This performs a "*vertical*" trace by projecting the
    points from above. It does this by taking into consideration either the Geometry
    or the *Navigation Mesh*. The possible options are ***None***, ***Navigation***,
    and ***Geometry***.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***投影数据***：这通过从上方投影点来执行一个"*垂直*"追踪。它是通过考虑几何形状或*导航网格*来做到这一点的。可能的选项是***无***，***导航***，和***几何***。'
- en: 'By looking at the settings, you can see that this generator is quite simple,
    yet powerful and very commonly used. With the default settings, this is what it
    looks like in the level (the projection is enabled at Navmesh, and is present
    in the map):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看设置，你可以看到这个生成器相当简单，但功能强大且非常常用。使用默认设置，在关卡中的样子如下（在Navmesh中启用了投影，并在地图中存在）：
- en: '![](img/4f4cdf46-d051-403a-9ecf-94b8e3486fc3.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f4cdf46-d051-403a-9ecf-94b8e3486fc3.png)'
- en: 'Points: Pathing Grid'
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点：路径网格
- en: As the name suggests, the ***Pathing ******Grid Generator*** generates the points
    within a Grid, just like the *Grid Generator*. However, the difference in this
    generator lies in the fact that the ***Pathing Grid Generator*** check whether
    the points are reachable by the context specified in the ***Generate Around***
    setting (usually the Querier), within a specified distance.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，***路径网格生成器***在网格内生成点，就像***网格生成器***一样。然而，这个生成器的不同之处在于，***路径网格生成器***会检查点是否可以通过在***生成周围***设置（通常为查询者）中指定的上下文（通常为查询者），在指定距离内到达。
- en: 'This is what it looks like in the *Environmental Query Editor*:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在***环境查询编辑器***中的样子：
- en: '![](img/8ebb49ae-79ed-4f02-887f-758274929a5b.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ebb49ae-79ed-4f02-887f-758274929a5b.png)'
- en: 'The settings for this generator are almost identical to the *Points: Grid*
    Generator:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成器的设置几乎与***点：网格***生成器相同：
- en: '![](img/23039003-01ac-4b91-a8ad-10153d183b5c.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23039003-01ac-4b91-a8ad-10153d183b5c.png)'
- en: '***Path to Item***: If checked, this excludes all the points that are not reachable
    from the Context, in the settings of the Querier.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***项目路径***：如果选中，则在查询者的设置中排除所有从上下文不可达的点。'
- en: '***Navigation Filter***: As the name suggests, it is the navigation filter
    that''s used to perform pathfinding.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***导航过滤器***：正如其名所示，它是用于执行路径查找的导航过滤器。'
- en: '***GridHalfSize***: This indicates how much the grid should extend from its
    center (which means it is half of the size of the full grid). The dimensions of
    the grid are fully determined by this parameter, along with*Space Between*.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***网格半尺寸***：这表示网格应从其中心延伸多远（这意味着它是完整网格大小的一半）。网格的尺寸完全由这个参数确定，以及*空间间隔*。'
- en: '***Space Between***: This indicates how much space there is between each row
    and column of the grid. The dimensions of the grid are fully determined by this
    parameter, along with*GridHalfSize*.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***空间间隔***：这表示网格的每一行和每一列之间的空间大小。网格的尺寸完全由这个参数确定，以及*网格半尺寸*。'
- en: '***Generate Around***: This is the center of the grid (where it starts being
    generated), and is expressed as a *Context*.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***生成周围***：这是网格的中心（它是开始生成的地方），并以***上下文***的形式表示。'
- en: '***Projection Data***: This performs a "*vertical*" trace by projecting the
    points from above. It does this by taking into consideration either the Geometry
    or the *Navigation Mesh*. The possible options are ***None***, ***Navigation***,
    and ***Geometry***.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***投影数据***：通过从上方投影点来执行一个“***垂直***”追踪。它通过考虑几何形状或***导航网格***来完成此操作。可能的选项是***无***、***导航***和***几何***。'
- en: 'This is what it looks like in the environment (I changed the level slightly
    to block the path upstairs. This makes it clear that those points after the stairs
    that aren''t reachable aren''t even generated by this Generator):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它在环境中的样子（我稍微调整了级别以阻断楼上的路径。这清楚地表明，那些在楼梯之后的不可达的点甚至不是由这个生成器生成的）：
- en: '![](img/0242db3e-035d-498e-880a-7f9ba85910f3.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0242db3e-035d-498e-880a-7f9ba85910f3.png)'
- en: Built-in Tests
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置测试
- en: Now that we have explored all the generators, it's time to explore the different
    *Tests* that are available within the engine. Usually, the return can be either
    a boolean or a float value.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了所有生成器，是时候探索引擎内可用的不同***测试***了。通常，返回值可以是布尔值或浮点值。
- en: The Tests that return a float value are most commonly used for *Scoring*, whereas
    the ones that return a boolean are more commonly used for *Filtering*. However,
    each Test might have different return values, depending on whether the Test is
    being used for filtering or scoring.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 返回浮点值的测试通常用于***评分***，而返回布尔值的测试则更常用于***过滤***。然而，每个测试可能都有不同的返回值，这取决于测试是用于过滤还是评分。
- en: 'This is the list of the possible *Built-In Tests*; let''s explore them:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的***内置测试***列表；让我们来探索它们：
- en: '![](img/bc324308-87be-4f52-a13d-e0583977208f.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc324308-87be-4f52-a13d-e0583977208f.png)'
- en: '***Distance***: Calculates the distance between the item (the point generated)
    and a specific *Context* (e.g. the *Querier*). It can be calculated in ***3D***,
    ***2D***, ***along z-axis***, or ***along*** ***z-axis (absolute)***. The return
    value is a float.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***距离***：计算项目（生成的点）与特定*上下文*（例如*查询者*）之间的距离。它可以在***3D***、***2D***、沿z轴或***沿***
    z轴（绝对）计算。返回值是一个浮点数。'
- en: '***Dot***: Calculates the dot product between ***Line A*** and ***Line B***.
    Both lines can be expressed as either the ***line between two Contexts*** or as
    the ***rotation of a specific Context*** (by taking the forward direction of the
    rotation). The calculation can be done both in ***3D*** or ***2D***.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***点积***：计算***线A***和***线B***之间的点积。这两条线都可以表示为两个上下文之间的***线***或作为特定上下文的***旋转***（通过取旋转的前向方向）。计算可以在***3D***或***2D***中进行。'
- en: '***Gameplay Tags***: Performs a *Query* on the *Gameplay Tags*.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***游戏标签***：在*游戏标签*上执行一个*查询*。'
- en: '***Overlap***: Performs an overlapping test with a Box; it is possible to specify
    some options, such as the offset or the extend, or the overlapping channel.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***重叠***：与一个盒子执行重叠测试；可以指定一些选项，例如偏移量或扩展，或重叠通道。'
- en: '***Pathfinding***: Performs a *Pathfind* between the generated point that is
    being evaluated and a Context. In particular, we can specify whether the return
    value is a boolean (if the *Path exists*) or a float (*Path Cost* or even *Path
    Length*). Moreover, it is possible to specify whether the path goes from the *Context* to
    the *Point* or vice-versa, and it is possible to use a *Navigation Filter*.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***路径查找***：在正在评估的生成点和上下文之间执行*路径查找*。特别是，我们可以指定返回值是一个布尔值（如果*路径存在*）或一个浮点数（*路径成本*或甚至*路径长度*）。此外，我们可以指定路径是否从*上下文*到*点*或相反，并且可以使用*导航过滤器*。'
- en: '***Pathfinding Batch***: Same as ***Pathfinding***, but in a batch.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***路径查找批量处理***：与***路径查找***相同，但以批量的形式。'
- en: '***Project***: Performs a *projection*, which is customizable through the different
    parameters.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***项目***：执行一个*投影*，可以通过不同的参数进行自定义。'
- en: '***Trace***: Performs a *Trace Test*, with all the possible options available
    to perform a Trace elsewhere in the engine. This means that it can trace a *Line*,
    a *Box*, a *Sphere*, or a *Capsule*; either on the *Visibility* or *Camera* *Trace
    Channel*; either complex or simple; either from the Context to the point, or vice-versa.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***追踪***：执行一个*追踪测试*，提供所有可能的选项以在引擎的其他地方执行追踪。这意味着它可以追踪一条*线*、一个*盒子*、一个*球体*或一个*胶囊*；无论是在*可见性*或*相机*追踪通道上；无论是复杂还是简单；无论是从上下文到点，还是相反。'
- en: This concludes our exploration of the built-in nodes.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对内置节点的探索。
- en: Visualizing Environment Queries
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化环境查询
- en: As we mentioned previously, there is a simple built-in way to visualize ***Environment
    Queries*** within the Game World, directly from the Viewport; the game doesn't
    even have to be running. In fact, there is a special Pawn that it is able to do
    this. However, this Pawn cannot be brought directly into the level, because to
    ensure that it is not misused, it has been declared virtual within the code base.
    This means that to use it, we need to create our own *Blueprint Pawn* that inherits
    directly from this special Pawn.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，有一个简单内置的方法可以在游戏世界中可视化***环境查询***，直接从视口进行；游戏甚至不需要运行。事实上，有一个特殊的Pawn能够做到这一点。然而，这个Pawn不能直接带入关卡，因为它已被在代码库中声明为虚拟，以确保它不会被误用。这意味着要使用它，我们需要创建自己的*蓝图Pawn*，该Pawn直接从这个特殊的Pawn继承。
- en: Thankfully, after this step, the Pawn is fully featured, and it doesn't need
    any more code, just the parameters to work with (i.e. the *Environmental Query*
    you want to visualize).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，经过这一步，Pawn就完全功能化了，不再需要任何更多的代码，只需要与参数一起工作（即你想要可视化的*环境查询*）。
- en: 'To start, create a new Blueprint. The class to inherit from is ***EQSTestingPawn***,
    as shown in the following screenshot:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，创建一个新的蓝图。要继承的类是***EQSTestingPawn***，如下面的截图所示：
- en: '![](img/06e89c58-aefe-42f2-a80c-9fc4d9bb9fd3.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06e89c58-aefe-42f2-a80c-9fc4d9bb9fd3.png)'
- en: Then, you can rename it ***MyEQSTestingPawn***.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以将其重命名为***MyEQSTestingPawn***。
- en: 'If you drag it into the map, from the *Details Panel*, you can change the ***EQS***
    settings, as shown in the following screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将其拖入地图，从*详细信息面板*，你可以更改***EQS***设置，如下面的截图所示：
- en: '![](img/ca33dccd-a3ba-4881-924e-34def53a0ac1.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca33dccd-a3ba-4881-924e-34def53a0ac1.png)'
- en: The most important parameter is the ***Query Template***, in which you specify
    the query you want to visualize. If you want an in-depth break down of the parameter,
    check out [Chapter 12](a60155c1-2bb0-403f-bdcf-dbd6a9c67824.xhtml)*, Debugging
    methods for AI – Navigation, EQS, and Profiling*.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的参数是 **查询模板**，在其中你指定要可视化的查询。如果你想要深入了解参数，请查看 [第 12 章](a60155c1-2bb0-403f-bdcf-dbd6a9c67824.xhtml)*，调试
    AI 的方法——导航、EQS 和性能分析*。
- en: Creating components for the Environment Querying System
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为环境查询系统创建组件
- en: In this section, we will learn which class we need to expand to create our custom
    components within the *Environment Querying System*.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习需要扩展哪个类来在 *环境查询系统* 中创建我们的自定义组件。
- en: Creating Contexts
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建上下文
- en: Creating custom *Contexts* is key in order to have the right references when
    you need them during an Environmental Query. In particular, we will create a simple
    Context to retrieve a single reference to the Player.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义 **上下文** 对于在环境查询过程中需要正确引用时至关重要。特别是，我们将创建一个简单的上下文来检索单个玩家的引用。
- en: Let's explore how to create this ***Context***, both in *C++ and Blueprint*.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何在 *C++ 和蓝图* 中创建这个 **上下文**。
- en: Creating the Player Context in Blueprint
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在蓝图中创建玩家上下文
- en: 'To create a context, we need to inherit from the ***EnvQueryContext_BlueprintBase***
    class. In the case of Blueprint, at its creation, just select the highlighted
    class, as shown in the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建上下文，我们需要从 ***EnvQueryContext_BlueprintBase*** 类继承。在蓝图的情况下，在其创建时，只需选择突出显示的类，如下截图所示：
- en: '![](img/83d991a2-7719-4ad8-bf86-7d9242c6bd4b.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/83d991a2-7719-4ad8-bf86-7d9242c6bd4b.png)'
- en: As for the name, the convention is to keep the prefix "*EnvQueryContext_*".
    We can call our Context something like "***EnvQueryContext_BPPlayer***".
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 至于名称，惯例是保留前缀 "*EnvQueryContext_*"。我们可以将我们的上下文命名为 "***EnvQueryContext_BPPlayer***"。
- en: 'For a Blueprint Context, you can choose to implement one of the following functions:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于蓝图上下文，你可以选择实现以下函数之一：
- en: '![](img/1fcad80b-d9ef-40dd-a524-39c9a366f895.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1fcad80b-d9ef-40dd-a524-39c9a366f895.png)'
- en: Each will provide a *Context* for the *Environmental Query.*
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 每个生成器都将为 *环境查询* 提供一个上下文。
- en: 'We can override the ***Provide Single Actor*** function and then return the
    Player Pawn, simple as that:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重写“**提供单个演员**”函数，然后返回玩家 Pawn，就这么简单：
- en: '![](img/d8f49673-9c1d-4277-bc9f-422675387e6e.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d8f49673-9c1d-4277-bc9f-422675387e6e.png)'
- en: As a result, we now have a Context that is able to get a Player reference.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在有一个能够获取玩家引用的上下文。
- en: Creating the Player Context in C++
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 C++ 中创建玩家上下文
- en: 'In the case of creating a C++ Context, inherit from the ***EnvQueryContext*** class,
    as shown in the following screenshot:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 C++ 上下文的情况下，从 ***EnvQueryContext*** 类继承，如下截图所示：
- en: '![](img/37440b05-6538-4586-8aa1-cffb60df8743.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/37440b05-6538-4586-8aa1-cffb60df8743.png)'
- en: 'The convention is the same, that is, to prefix the Context with "*EnvQueryContext_*".
    We will call our class "***EnvQueryContext_Player***":'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 惯例相同，即用 "*EnvQueryContext_" 前缀来命名上下文。我们将把我们的类命名为 "***EnvQueryContext_Player***"。
- en: '![](img/4783c2af-4ece-4cc4-9989-1d043158c85f.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4783c2af-4ece-4cc4-9989-1d043158c85f.png)'
- en: 'In C++, there is only one function to override: `ProvideContext()`. Hence,
    we just need to override it in the `.h` file, as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C++ 中，只有一个函数需要重写：`ProvideContext()`。因此，我们只需在 `.h` 文件中重写它，如下所示：
- en: '[PRE0]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the implementation file, we can provide the Context. I''m not going to go
    into the details of how – you can read the code of the other Contexts to help
    you understand this. In any case, we can have something like the following for
    our `.cpp` file (I could have implemented this differently, but I chose this way
    because I thought it was easy to understand):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现文件中，我们可以提供上下文。我不会深入讲解如何实现——你可以阅读其他上下文的代码来帮助你理解这一点。无论如何，我们的 `.cpp` 文件可以像下面这样（我可以选择不同的实现方式，但我选择了这种方式，因为它更容易理解）：
- en: '[PRE1]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As a result, we are able to retrieve the Player Context in C++.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们能够在 C++ 中检索玩家上下文。
- en: Creating Generators
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建生成器
- en: Similar to how we created Contexts, we can create custom Generators. However,
    we will not go through this in detail, since they are outside the scope of this
    book.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建上下文的方式类似，我们可以创建自定义生成器。然而，我们不会详细介绍这一点，因为它们超出了本书的范围。
- en: 'In the case of Blueprint, inherit from the ***EnvQueryGenerator_BlueprintBase*** class,
    as shown in the following screenshot:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝图的情况下，从 ***EnvQueryGenerator_BlueprintBase*** 类继承，如下截图所示：
- en: '![](img/36f2d84f-1e92-4920-aa97-02ace5030020.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/36f2d84f-1e92-4920-aa97-02ace5030020.png)'
- en: 'In C++, you need to inherit from ***EnvQueryGenerator***:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，您需要从**EnvQueryGenerator**类继承：
- en: '![](img/dc06c5f4-cba3-4396-b020-dc61879d71ee.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc06c5f4-cba3-4396-b020-dc61879d71ee.png)'
- en: You may want to start directly from ***EnvQueryGenerator_ProjectedPoints*** since
    you already have all the projections in place. By doing this, you only need to
    focus on its generation.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经拥有了所有投影，您可能希望直接从**EnvQueryGenerator_ProjectedPoints**开始。通过这样做，您只需关注其生成。
- en: Creating Tests
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试
- en: 'In the current version of Unreal Engine, it isn''t possible to create a Test
    in Blueprint – we can only do so with C++. You can do this by extending the ***EnvQueryTest***
    class:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的虚幻引擎中，您无法在蓝图（Blueprint）中创建测试——我们只能用C++来实现。您可以通过扩展**EnvQueryTest**类来完成这项工作：
- en: '![](img/a76bd630-21c2-4463-8588-aacabe3309e2.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a76bd630-21c2-4463-8588-aacabe3309e2.png)'
- en: Unfortunately, this is also outside the scope of this book. Exploring the Unreal
    Engine Source code, however, will give you a great amount of information and an
    almost infinite source of learning.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这也不在本书的范围之内。然而，探索虚幻引擎的源代码将为您提供大量的信息和几乎无穷无尽的学习资源。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how the ***Environment Querying System*** can make
    spatial reasoning in the Decision-Making domain.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了**环境查询系统**如何使决策领域的空间推理成为可能。
- en: In particular, we have understood how the whole system works in general, and
    then we went through the built-in nodes of the system. We also saw how it is possible
    to visualize a Query by using a special Pawn. Finally, we explored how it is possible
    to extend the system.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们了解了整个系统的一般工作原理，然后我们逐一了解了系统的内置节点。我们还看到了如何通过一个特殊的棋子来可视化查询。最后，我们探讨了如何扩展系统。
- en: In the next chapter, we will explore Agent Awareness, and the built-in Sensing
    system.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨代理意识以及内置的感知系统。
