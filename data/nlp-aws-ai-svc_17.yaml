- en: '*Chapter 14*: Auditing Named Entity Recognition Workflows'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：审计命名实体识别工作流'
- en: In the previous chapter, we were introduced to an approach for improving the
    accuracy of the results we wanted to extract from documents using **Amazon** **Augmented
    AI** (**Amazon** **A2I**). We saw that Amazon A2I can be added to a document processing
    workflow to review model prediction accuracy. This enabled us to include human
    reviews in LiveRight's check processing system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们介绍了使用**Amazon** **Augmented AI**（**Amazon** **A2I**）来提高从文档中提取结果准确性的方案。我们看到，Amazon
    A2I 可以添加到文档处理工作流中，以审核模型预测的准确性。这使我们能够在 LiveRight 的检查处理系统中包含人工审核。
- en: In this chapter, we will walk through an extension of the previous approach
    by including **Amazon** **Comprehend** for text-based insights thereby demonstrating
    an end-to-end process for setting up an auditing workflow for your custom named
    entity recognition use cases. We put together this solution based on our collective
    experience and the usage trends we have observed in our careers. We expect to
    be hands-on throughout the course of this chapter, but we have all the code samples
    we need to get going.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将通过将**Amazon** **Comprehend** 用于基于文本的洞察扩展前述方法，从而演示如何为您的自定义命名实体识别用例设置审计工作流的端到端过程。我们根据集体经验和在职业生涯中观察到的使用趋势，整理了这个解决方案。我们预计在本章过程中将进行实际操作，但我们已经准备好了所有需要的代码示例。
- en: With **machine learning** (**ML**), companies can set up automated document
    processing solutions that can be trained to recognize and extract custom entities
    from your documents. This helps you derive unique insights from your text corpus.
    These insights can help drive strategic decisions. However, there are certain
    challenges that need to be navigated first. Typically, companies receive large
    volumes of incoming documents of different templates, with varying contents, in
    multiple languages. Also, as businesses grow, the type and volume of documents
    evolve, and very soon you get into a maintenance overhead situation trying to
    keep the various templates, formats, and rules synchronized with how you are trying
    to use these documents for your operational needs. Furthermore, you will have
    to ensure your infrastructure is able to scale to support your processing needs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**机器学习**（**ML**），企业可以建立自动化文档处理解决方案，经过训练后能够识别并提取文档中的自定义实体。这有助于从文本语料库中获得独特的洞察力，从而推动战略决策。然而，首先需要应对一些挑战。通常，企业会接收到大量格式不同、内容各异的文档，且文档可能是多语言的。而且，随着企业的发展，文档的类型和数量也在不断变化，很快就会进入一种维护负担的状态，需要不断调整各种模板、格式和规则，以确保它们与操作需求的使用方式同步。此外，还必须确保基础设施能够扩展以支持处理需求。
- en: 'To solve these challenges, we will show you how you can use the ready-made
    ML capabilities of **Amazon** **Textract**, leveraging transfer learning to create
    a custom entity recognition model with **Amazon** **Comprehend**, and auditing
    the predictions with a human reviewer loop using A2I. We introduced Amazon A2I
    in detail in [*Chapter 13*](B17528_13_Final_SB_ePub.xhtml#_idTextAnchor151), *Improving
    the Accuracy of Document Processing Workflows*. In this chapter, we will navigate
    through the following sections:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些挑战，我们将展示如何利用**Amazon** **Textract**的现成机器学习功能，借助迁移学习创建一个自定义实体识别模型，并通过使用
    A2I 审核预测结果，结合人工审核循环。我们在[*第13章*](B17528_13_Final_SB_ePub.xhtml#_idTextAnchor151)《提高文档处理工作流准确性》中详细介绍了
    Amazon A2I。在本章中，我们将按照以下几个部分展开：
- en: Authenticating loan applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贷款申请认证
- en: Building the loan authentication solution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建贷款认证解决方案
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need access to an **AWS** **account** at [https://aws.amazon.com/console/](https://aws.amazon.com/console/).
    Please refer to the *Signing up for an AWS account* subsection within the *Setting
    up your AWS environment* section in [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027),
    *Introducing Amazon Textract,* for detailed instructions on how you can sign up
    for an AWS account and sign in to the **AWS** **Management Console**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要访问**AWS** **账户**，可以通过[https://aws.amazon.com/console/](https://aws.amazon.com/console/)进行访问。有关如何注册
    AWS 账户并登录到**AWS** **Management Console**的详细说明，请参考[*第2章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)《介绍
    Amazon Textract》中的*注册 AWS 账户*子部分。
- en: 'The **Python** code and sample datasets for the solution discussed in this
    chapter can be found at the following link: [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2014](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2014).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的解决方案的**Python**代码和示例数据集可以在以下链接找到：[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2014](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/tree/main/Chapter%2014)。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3GoBh1B](https://bit.ly/3GoBh1B).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码在[https://bit.ly/3GoBh1B](https://bit.ly/3GoBh1B)中的运行情况。
- en: Authenticating loan applications
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证贷款申请
- en: 'Financial organizations receive significant volumes of loan applications every
    day. While the major organizations have switched to fully digital processing,
    there are still many banks and institutions across the world that rely on paper
    documents. To illustrate our example, let''s go back to our fictitious banking
    corporation, *LiveRight Holdings Private Limited*, and review the requirements
    for this use case:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每天，金融机构收到大量的贷款申请。虽然主要的机构已经转向完全数字化处理，但世界各地仍有许多银行和机构依赖纸质文档。为了说明我们的例子，让我们回到我们的虚构银行公司*LiveRight
    Holdings Private Limited*，并审查此用例的要求：
- en: LiveRight offers a number of lending products to its customers, which are primarily
    small-to-medium businesses and individual consumers. To apply for a loan, consumers
    fill out a paper-based loan/mortgage application form that is validated by a team
    of experts to determine the authenticity of the application (called the *authenticity-check*
    process). If found to be a valid applicant, LiveRight's loan processors will request
    supporting documentation from the consumers for pre-approval qualification.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LiveRight向其主要是中小型企业和个人消费者的客户提供多种借贷产品。为了申请贷款，消费者填写基于纸张的贷款/抵押贷款申请表格，由专家团队验证申请的真实性（称为*真实性检查*过程）。如果被确认为有效申请人，LiveRight的贷款处理人员将要求消费者提交支持文件以进行预批准资格。
- en: LiveRight receives anywhere from 8,000 to 10,000 loan applications a day from
    potential customers. These applications are forwarded nightly from its various
    branches to the document inlet center at the company's **headquarters (HQ)**.
    Today, their authenticity-check process takes approximately 2 to 4 weeks for the
    team to scan all the applications and determine whether they are good enough to
    be forwarded to the loan processors, causing significant delays even at the pre-approval
    stage. This has irked many customers who are taking their business elsewhere.
    LiveRight has hired you to automate the authenticity-check process with a target
    to reduce the processing time to 24 hours within the first 3 months of the solution
    being implemented.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LiveRight每天从潜在客户处收到8,000至10,000份贷款申请。这些申请每晚从公司各分支机构转发至总部的文档入口中心。今天，他们的真实性检查过程需要团队大约2到4周的时间扫描所有申请，并确定是否足够好以转发给贷款处理人员，甚至在预批准阶段也造成了显著的延迟。这引起了许多客户的不满，他们正在将业务转移到其他地方。LiveRight已经聘请您自动化真实性检查流程，并希望在解决方案实施的头三个月内将处理时间缩短至24小时以内。
- en: As the enterprise architect for the project, you decide to use Amazon Textract
    to leverage its pre-trained ML model for text extraction, the **Custom Entity
    Recognizer** feature of Amazon Comprehend to incrementally create your own entity
    recognizer for loan application checks without the need to build complex **natural
    language processing** (**NLP**) algorithms, and A2I to set up a human review workflow
    to monitor predictions from your entity recognizer and send feedback to the recognizer
    to improve its detection capabilities for entities unique to the use case.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为项目的企业架构师，您决定使用Amazon Textract来利用其预训练的ML模型进行文本提取，使用Amazon Comprehend的**自定义实体识别器**功能逐步创建自己的实体识别器，用于贷款申请检查，无需构建复杂的**自然语言处理**（**NLP**）算法，以及使用A2I设置人工审查工作流程，监视实体识别器的预测，并向识别器发送反馈，以改善其检测独特用例的实体能力。
- en: 'You plan to have the private human workflow available for the first 2 to 3
    months and subsequently disable it, at which point the document processing workflow
    will become fully automated. As the human team checks and updates the entity labels,
    you need to determine the authenticity check decision to be either *APPROVE*,
    *SUMMARY APPROVE*, or *REJECT*. This decision, along with the relevant content
    from the loan application, should be stored in an **Amazon** **DynamoDB** (a fully
    managed, low-latency **NoSQL** database service) table for loan processors to
    access the content and enable pre-approval qualification. The components of the
    solution we will build are shown in the following figure:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您计划在前 2 到 3 个月内提供私有人工工作流，然后禁用它，此时文档处理工作流将完全自动化。当人工团队检查并更新实体标签时，您需要确定真实性检查决策，决策结果为*批准*、*总结批准*或*拒绝*。该决策以及贷款申请中的相关内容应存储在**Amazon**
    **DynamoDB**（一项完全托管的低延迟**NoSQL**数据库服务）表中，以供贷款处理人员访问内容并启用预审批资格。我们将构建的解决方案组件如下图所示：
- en: '![Figure 14.1 – Loan approval document processing solution architecture'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.1 – 贷款审批文档处理解决方案架构'
- en: '](img/B17528_14_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_14_01.jpg)'
- en: Figure 14.1 – Loan approval document processing solution architecture
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – 贷款审批文档处理解决方案架构
- en: 'We will be walking through our solution using an **Amazon** **SageMaker** **Jupyter**
    **notebook** that will allow us to review the code and results as we execute it
    step by step. The solution build includes the following tasks:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**Amazon** **SageMaker** **Jupyter** **notebook**来逐步执行代码并查看结果，从而引导我们走完整个解决方案流程。该解决方案的构建包括以下任务：
- en: As a first step, we will create an Amazon Comprehend custom entity recognizer
    based on the training dataset provided in our GitHub repository.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，我们将根据 GitHub 仓库中提供的训练数据集创建 Amazon Comprehend 自定义实体识别器。
- en: 'We will then create a private labeling workforce and add a team member who
    will be responsible for reviewing predictions from the Amazon Comprehend custom
    entity recognizer, using the Amazon A2I service. We will create the private workforce
    using the *labeling* workforces feature available in the Amazon SageMaker console.
    For more details, please refer to this link: [https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html).'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个私有标签团队，并添加一名团队成员，负责使用 Amazon A2I 服务来审查 Amazon Comprehend 自定义实体识别器的预测结果。我们将使用
    Amazon SageMaker 控制台中的*标签*团队功能来创建私有团队。有关详细信息，请参考此链接：[https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-private.html)。
- en: We start the solution workflow by inspecting our sample input loan application
    available in our GitHub repository. We display the image of the loan application
    in our notebook and look at the contents.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过检查在 GitHub 仓库中提供的示例贷款申请来开始解决方案工作流程。我们在笔记本中展示贷款申请的图片并查看其内容。
- en: Next, we use Amazon Textract to extract the key-value pairs from our input document.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用 Amazon Textract 从输入文档中提取键值对。
- en: We then create an inference request string from the key-value pairs and prepare
    it to send to Amazon Comprehend custom entity detection.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们从键值对创建一个推理请求字符串，并准备将其发送到 Amazon Comprehend 自定义实体检测。
- en: Next, we set up an Amazon Comprehend real-time endpoint and invoke it to detect
    entities from our inference request string.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置一个 Amazon Comprehend 实时终端节点，并调用它来检测我们的推理请求字符串中的实体。
- en: We will set up an Amazon A2I human review loop using the entity recognition
    task UI template and send the results of the custom entity detection to an Amazon
    A2I human loop.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用实体识别任务 UI 模板设置 Amazon A2I 人工审查循环，并将自定义实体检测的结果发送到 Amazon A2I 人工循环。
- en: Logging in as a private worker, we will review the detected entities and modify
    the labels as required.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以私有工作者身份登录后，我们将审查检测到的实体，并根据需要修改标签。
- en: We will then check whether a new entity detection event occurred or whether
    an existing entity detection was modified, update the entity list, and send it
    back to Amazon Comprehend for retraining our entity detection model.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将检查是否发生了新的实体检测事件，或者是否修改了现有的实体检测，更新实体列表，并将其发送回 Amazon Comprehend 进行实体检测模型的再训练。
- en: Based on the output from the human loop review, we will also determine a decision
    for the loan application and upload this to a **DynamoDB** table for downstream
    processing.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于人工审查循环的输出，我们还将为贷款申请做出决定，并将此信息上传到**DynamoDB** 表中，以便后续处理。
- en: Now that we've got the context for the exercise and gone over our intended process,
    let's start building the solution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了练习的背景并讨论了预定的流程，让我们开始构建解决方案。
- en: Building the loan authentication solution
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建贷款认证解决方案
- en: In the previous section, we introduced the loan application approval use case,
    covered the architecture of the solution we will be building, and briefly walked
    through the solution components and workflow steps. In this section, we will get
    right down to action and start executing the tasks to build our solution. But
    first, there are pre-requisites we will have to take care of.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们介绍了贷款申请审批的用例，讲解了我们将要构建的解决方案架构，并简要地介绍了解决方案组件和工作流程步骤。在本节中，我们将直接开始执行任务，构建我们的解决方案。但首先，我们需要处理一些先决条件。
- en: Setting up to solve the use case
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置以解决用例
- en: 'If you have not done so in the previous chapters, you will first have to create
    a Jupyter notebook and set up **Identity and Access Management** (**IAM**) permissions
    for that notebook role to access the AWS services we will use in this notebook.
    After that, you will need to clone the GitHub repository ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services)),
    create an **Amazon** **S3** bucket ([https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)),
    and provide the bucket name in the notebook to start execution. Please follow
    the next steps to complete these tasks before we can execute the cells from our
    notebook:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在之前的章节中尚未完成，您首先需要创建一个 Jupyter notebook，并为该 notebook 角色设置**身份与访问管理**（**IAM**）权限，以便访问我们将在本笔记本中使用的
    AWS 服务。之后，您需要克隆 GitHub 仓库（[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services)），创建一个**Amazon**
    **S3** 存储桶（[https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)），并在笔记本中提供存储桶名称以开始执行。在我们可以执行笔记本单元格之前，请按照以下步骤完成这些任务：
- en: 'Note:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: Please ensure you have completed the tasks mentioned in the *Technical requirements*
    section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您已完成*技术要求*部分提到的任务。
- en: To create your Jupyter Notebook instance, follow the instructions in the *Create
    an Amazon SageMaker Jupyter Notebook instance* section in the *Setting up your
    AWS environment* section in [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027),
    *Introducing Amazon Textract*.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建您的 Jupyter Notebook 实例，请按照[*第2章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中*设置您的
    AWS 环境*部分的**创建 Amazon SageMaker Jupyter Notebook 实例**一节的说明操作，*介绍 Amazon Textract*。
- en: IAM role permissions while creating Amazon SageMaker Jupyter notebooks
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建 Amazon SageMaker Jupyter 笔记本时的 IAM 角色权限
- en: Accept the default for the IAM role at the notebook creation time to allow access
    to any S3 bucket.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建笔记本时接受默认的 IAM 角色，以便访问任何 S3 存储桶。
- en: Once you create the notebook instance and its status is **InService**, click
    on **Open Jupyter** in the **Actions** menu, heading for the notebook instance.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您创建了笔记本实例并且其状态为**服务中**，点击**操作**菜单中的**打开 Jupyter**，进入笔记本实例。
- en: This will take you to the **home** folder of your notebook instance.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您进入笔记本实例的**主页**文件夹。
- en: Click on **New** and select **Terminal**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建**，并选择**终端**。
- en: In the `cd SageMaker`, and then, type `git clone` [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`cd SageMaker`中输入，然后输入`git clone` [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services)。
- en: Now, exit the Terminal window and go back to the `Natural-Language-Processing-with-AWS-AI-Services`.
    Click this folder to bring up the chapter folders and click `Chapter 14`. Open
    this folder by clicking. You should see a notebook called `chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，退出终端窗口，返回到`Natural-Language-Processing-with-AWS-AI-Services`。点击该文件夹以显示章节文件夹，再点击`Chapter
    14`。点击该文件夹打开。您应该能看到名为`chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb`的笔记本。
- en: Open this notebook by clicking it.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击打开该笔记本。
- en: Follow through the steps in this notebook that correspond to the next few subheadings
    in this section by executing one cell at a time. Please do read the descriptions
    provided preceding each notebook cell.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本笔记本中本节下几小节对应的步骤，逐一执行每个单元格。请阅读每个笔记本单元格前提供的描述。
- en: Additional IAM pre-requisites
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的 IAM 先决条件
- en: 'To train the Comprehend custom entity recognizer, to set up real-time endpoints,
    we have to enable additional policies and also update the trust relationships
    for our SageMaker notebook role. Please refer to *Changing IAM permissions and
    trust relationships for the Amazon SageMaker Notebook execution role* in the *Setting
    up your AWS environment* section in [*Chapter 2*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027),
    *Introducing Amazon Textract,* for more detailed instructions on how to execute
    the following steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了训练Comprehend自定义实体识别器，设置实时端点，我们必须启用额外的策略，并更新我们的SageMaker笔记本角色的信任关系。请参考[*第2章*](B17528_02_Final_SB_ePub.xhtml#_idTextAnchor027)中《*设置AWS环境*》章节里的*更改IAM权限和信任关系以支持Amazon
    SageMaker Notebook执行角色*部分，了解如何执行以下步骤的详细说明：
- en: Please attach `TextractFullAccess`, `ComprehendFullAccess`, and `AmazonAugmentedAIFullAccess`
    policies to your Amazon SageMaker Notebook IAM role.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请将`TextractFullAccess`、`ComprehendFullAccess`和`AmazonAugmentedAIFullAccess`策略附加到你的Amazon
    SageMaker Notebook IAM角色。
- en: 'Add an `IAM:PassRole` permission as an inline policy to your SageMaker Notebook
    execution role:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的SageMaker笔记本执行角色添加`IAM:PassRole`权限作为内联策略：
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Finally, update the trust relationships:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，更新信任关系：
- en: '[PRE1]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we have set up our notebook and set up the IAM role to run the walkthrough
    notebook, in the next section, we will train an Amazon Comprehend entity recognizer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了笔记本并配置了IAM角色来运行示范笔记本，在接下来的部分，我们将训练一个Amazon Comprehend实体识别器。
- en: Training an Amazon Comprehend custom entity recognizer
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练Amazon Comprehend自定义实体识别器
- en: 'Let''s begin by training a custom entity recognizer to detect entities unique
    to this solution. Amazon Comprehend offers pre-trained entity recognition features
    that we learned about in the previous chapter. For this solution, we will use
    the **Custom Entity Recognition** feature of Amazon Comprehend that allows you
    to train a recognizer for custom needs using incremental training. All we have
    to do is provide a list of entities we want it to recognize, and a raw dataset
    containing the lines of text comprising the context that will be detected as entities.
    Open the notebook and execute the steps as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始训练一个自定义实体识别器，检测本解决方案特有的实体。Amazon Comprehend提供了我们在上一章学习过的预训练实体识别功能。对于本解决方案，我们将使用Amazon
    Comprehend的**自定义实体识别**功能，它允许你使用增量训练训练一个适应自定义需求的识别器。我们所需要做的就是提供一个我们希望它识别的实体列表，以及包含文本行的原始数据集，这些文本行构成了将被识别为实体的上下文。打开笔记本并按照以下步骤执行：
- en: 'Execute the cell under **Step 0 – Import Libraries** to ensure we have the
    libraries we need for the notebook. Note that in this cell you are getting the
    Amazon SageMaker execution role for the notebook, along with the SageMaker session.
    Please ensure you create an Amazon S3 bucket ([https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html))
    and provide the bucket name in the following line:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**步骤0 - 导入库**下的单元，确保我们为笔记本准备好了所需的库。请注意，在此单元中，你将获取到用于笔记本的Amazon SageMaker执行角色，以及SageMaker会话。请确保你创建了一个Amazon
    S3存储桶（[https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html)），并在下面的行中提供存储桶名称：
- en: '[PRE2]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Execute the cells under `boto3` handle for Amazon Comprehend:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`boto3`处理的单元，以便在Amazon Comprehend下运行：
- en: '[PRE3]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'b) Then, define the variables for the S3 prefixes and upload the training dataset
    and the entity list to the S3 bucket:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 然后，定义S3前缀的变量并将训练数据集和实体列表上传到S3存储桶：
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'c) Continue executing the rest of the cells in the notebook to declare the
    variables with the full S3 **URIs** for our input documents, define the input
    object for the entity recognizer, and finally, call the Comprehend API to create
    the custom entity recognizer. This will start the training job:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 继续执行笔记本中的其余单元，声明包含我们输入文档的完整S3 **URI**的变量，定义实体识别器的输入对象，最后调用Comprehend API来创建自定义实体识别器。这将启动训练任务：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'd) Print the results of the custom entity recognizer training job:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 打印自定义实体识别器训练任务的结果：
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Check the status of the training job periodically by visiting the Amazon Comprehend
    AWS console ([https://console.aws.amazon.com/comprehend/v2/home?region=us-east-1#entity-recognition](https://console.aws.amazon.com/comprehend/v2/home?region=us-east-1#entity-recognition)).
    The training should take approximately 15 to 30 minutes. Time for a coffee/snack
    break.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定期访问 Amazon Comprehend AWS 控制台 ([https://console.aws.amazon.com/comprehend/v2/home?region=us-east-1#entity-recognition](https://console.aws.amazon.com/comprehend/v2/home?region=us-east-1#entity-recognition))
    检查训练作业的状态。训练过程大约需要 15 到 30 分钟。可以趁此时间喝杯咖啡或小吃一下。
- en: Creating a private team for the human loop
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用于人工环节的私有团队
- en: Refer to *Step 2* in the notebook ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb))
    for the instructions we will execute now.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅笔记本中的 *第 2 步* ([https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb))，以获取我们现在要执行的指令。
- en: 'In this step, we will create a private team using the Amazon SageMaker labeling
    workforce console, and we will add ourselves to the private team as a worker.
    This is required so we can log in to the labeling task UI when we reach the Amazon
    A2I step in this solution. Please execute the following tasks:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将使用 Amazon SageMaker 标注工作团队控制台创建一个私有团队，并将自己添加为该私有团队的工作人员。这样做是为了在我们进入此解决方案中的
    Amazon A2I 步骤时，能够登录到标注任务的用户界面。请执行以下任务：
- en: Log in to the AWS Management Console if not already done (please refer to the
    *Technical requirements* section at the start of this chapter for more details),
    type `amazon sagemaker` in the **Services** search bar, and go to the Amazon SageMaker
    console. Once there, on the left of the UI, click on **Ground Truth** and then
    **Labeling workforces**. On this screen, select **Private** from the tab at the
    top and click on **Create private team**.![Figure 14.2 – SageMaker labeling workforces
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未登录 AWS 管理控制台，请登录（更多详细信息，请参考本章开头的 *技术要求* 部分），在 **服务** 搜索栏中输入 `amazon sagemaker`，然后进入
    Amazon SageMaker 控制台。进入后，在 UI 左侧点击 **Ground Truth**，再点击 **Labeling workforces**。在此页面，选择顶部标签中的
    **Private**，然后点击 **Create private team**。![图 14.2 – SageMaker 标注工作团队
- en: '](img/B17528_14_02.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_14_02.jpg)'
- en: Figure 14.2 – SageMaker labeling workforces
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.2 – SageMaker 标注工作团队
- en: Enter a name for your private team in the **Team name** field and leave the
    default selection of **Create a new Amazon Cognito user group** in the **Add workers**
    section. Scroll down and click **Create private team**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Team name** 字段中输入您的私有团队名称，并在 **Add workers** 部分保持默认选择 **Create a new Amazon
    Cognito user group**。向下滚动并点击 **Create private team**。
- en: 'You will now be returned to the `nlp-doc-team`, should be visible under `arn:aws:sagemaker:region-name-123456:workteam/private-crowd/team-name`.
    Please copy the ARN from the screen and provide this in the notebook cell:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您将返回到 `nlp-doc-team`，应该可以在 `arn:aws:sagemaker:region-name-123456:workteam/private-crowd/team-name`
    下看到它。请从屏幕上复制 ARN 并在笔记本单元格中提供：
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, scroll down in the previous screen, go to the `no-reply@verificationemail.com`.
    Follow the instructions to complete the sign-up process.![Figure 14.3 – Inviting
    new workers
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向下滚动到前一页面，进入 `no-reply@verificationemail.com`。按照指示完成注册过程。![图 14.3 – 邀请新工作人员
- en: '](img/B17528_14_03.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_14_03.jpg)'
- en: Figure 14.3 – Inviting new workers
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.3 – 邀请新工作人员
- en: Now, add yourself to the private team by clicking on **nlp-doc-team** and then
    clicking on **Add workers to team**. Select your email address from the list and
    click on **Add workers to team**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过点击 **nlp-doc-team**，再点击 **Add workers to team**，将自己添加到私有团队中。从列表中选择您的电子邮件地址，然后点击
    **Add workers to team**。
- en: '![Figure 14.4 – Adding workers to team'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.4 – 向团队添加工作人员'
- en: '](img/B17528_14_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_14_04.jpg)'
- en: Figure 14.4 – Adding workers to team
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4 – 向团队添加工作人员
- en: Now that we have added the private team, let's review our loan application by
    extracting the contents using Amazon Textract.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了私有团队，让我们通过使用 Amazon Textract 提取内容来审阅我们的贷款申请。
- en: Extracting sample document contents using Amazon Textract
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Amazon Textract 提取样本文档内容
- en: 'This section corresponds to *Step 3* in the notebook: [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本节对应于笔记本中的*步骤3*：[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb)。
- en: 'In this step, we will review the sample loan application, and then use Amazon
    Textract to extract the key-value pairs or form data that is of interest to our
    solution, creating an inference request CSV file to pass as an input to our Comprehend
    custom entity recognizer for detecting entities. Please follow through using the
    notebook and execute the cells to perform the tasks required for this step:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将回顾示例贷款申请，然后使用Amazon Textract提取我们解决方案所关注的关键值对或表单数据，创建推理请求CSV文件，并将其作为输入传递给我们的Comprehend自定义实体识别器以检测实体。请通过笔记本逐步执行，并运行单元格以完成此步骤所需的任务：
- en: 'Review the input document by executing the code in the notebook cell, as shown
    here:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行笔记本单元格中的代码来查看输入文档，如下所示：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s now load this image into our S3 bucket:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们将此图像加载到我们的S3存储桶中：
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will extract the key-value pair data from this document to transform and
    create a request string for inference using the Amazon Textract **AnalyzeDocument**
    API. This accepts image files (PNG or JPEG) as an input. To use this example with
    a PDF file, or for processing multiple documents together, you can use the **StartDocumentAnalysis**
    API: [https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html](https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html).'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从此文档中提取关键值对数据，转换并创建一个用于推理的请求字符串，使用Amazon Textract的**AnalyzeDocument** API。此API接受图像文件（PNG或JPEG）作为输入。如果要使用PDF文件或处理多个文档，可以使用**StartDocumentAnalysis**
    API：[https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html](https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html)。
- en: 'We will use the `amazon-textract-response-parser` library to help with the
    JSON response from Textract. Install it by typing the following:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`amazon-textract-response-parser`库来处理来自Textract的JSON响应。通过输入以下命令进行安装：
- en: '[PRE10]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let''s use the Textract `boto3` Python SDK to retrieve the contents of
    the document, as shown here:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用Textract的`boto3` Python SDK来检索文档内容，如下所示：
- en: '[PRE11]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will now extract the key-value pairs we need for our solution. We will not
    use the checkbox fields but only those fields with values in them. Also, we will
    filter out the fields that we actually need in the next few steps:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将提取我们解决方案所需的关键值对。我们将不使用复选框字段，仅使用那些有值的字段。同时，我们将在接下来的步骤中筛选出我们实际需要的字段：
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we have loaded the results from Textract into a **p****andas** **DataFrame**
    ([https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)),
    we will run a series of operations to filter the columns we are interested in
    from the loan application. Execute all the cells under the *Extract contents for
    sending to Comprehend CER* section in the notebook. We should see the final filtered
    list of fields as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经将Textract的结果加载到**p****andas** **DataFrame**中（[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)），接下来我们将运行一系列操作，从贷款申请中筛选出我们感兴趣的列。请执行笔记本中*Extract
    contents for sending to Comprehend CER*部分下的所有单元格。最终，我们应该会看到如下所示的过滤字段列表：
- en: '![Figure 14.5 – Finalized list of fields we will use for Comprehend entity
    recognition'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.5 – 我们将用于Comprehend实体识别的最终字段列表'
- en: '](img/B17528_14_05.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_14_05.jpg)'
- en: Figure 14.5 – Finalized list of fields we will use for Comprehend entity recognition
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 – 我们将用于Comprehend实体识别的最终字段列表
- en: Now, let's cover detecting entities using the Amazon Comprehend custom entity
    recognizer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论如何使用Amazon Comprehend自定义实体识别器来检测实体。
- en: Detecting entities using the Amazon Comprehend custom entity recognizer
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Amazon Comprehend自定义实体识别器检测实体
- en: 'Now that we have what we need from the loan application, let''s construct a
    string that will become our inference request to the Comprehend custom entity
    recognizer we trained at the beginning of this walkthrough (*Step 1* in the notebook).
    Before we can detect the entities, we need to create a real-time endpoint and
    associate that with our entity recognizer. When you deploy this solution in batch
    mode or use it for processing multiple documents, you will use the Amazon Comprehend
    **StartEntitiesDetection** API: [https://docs.aws.amazon.com/comprehend/latest/dg/API_StartEntitiesDetectionJob.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_StartEntitiesDetectionJob.html).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从贷款申请中获得所需的内容，让我们构造一个字符串，该字符串将成为我们向最初训练的 Comprehend 自定义实体识别器发送的推理请求（笔记本中的*第
    1 步*）。在检测实体之前，我们需要创建一个实时端点，并将其与我们的实体识别器关联。当你以批处理模式部署此解决方案或用于处理多个文档时，将使用 Amazon
    Comprehend **StartEntitiesDetection** API：[https://docs.aws.amazon.com/comprehend/latest/dg/API_StartEntitiesDetectionJob.html](https://docs.aws.amazon.com/comprehend/latest/dg/API_StartEntitiesDetectionJob.html)。
- en: 'Please follow the instructions in this section by executing the cells in *Step
    4* in the notebook: [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照本节中的说明执行笔记本中的*第 4 步*单元：[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb)：
- en: 'We will now create a request string that will be sent to the Amazon Comprehend
    custom entity recognizer model to detect the entities we trained it on. This string
    comprises data that we extracted from our loan application document using Amazon
    Textract in the previous step. We will transpose our pandas DataFrame, add a document
    number column, and use it to prepare the inference request string:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个请求字符串，该字符串将发送到 Amazon Comprehend 自定义实体识别器模型，用于检测我们训练过的实体。这一字符串包含了我们在上一步骤中使用
    Amazon Textract 从贷款申请文档中提取的数据。我们将转置 pandas DataFrame，添加一个文档编号列，并用它来准备推理请求字符串：
- en: '[PRE13]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, let''s create a real-time endpoint for Comprehend:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们为 Comprehend 创建一个实时端点：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We see the endpoint Arn printed as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到端点 Arn 如下所示：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Check the status of the endpoint by navigating to the **Amazon Comprehend**
    console, go to **custom entity recognition** in the left menu, click on your recognizer,
    and scroll down to verify your real-time endpoint has been created successfully.
    If the endpoint is not active, the code in the next cell in the notebook will
    fail. It may take about *15 minutes* for the endpoint to be ready:![Figure 14.6
    – Waiting for an endpoint to be ready
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **Amazon Comprehend** 控制台，进入左侧菜单中的 **自定义实体识别**，点击你的识别器，然后向下滚动验证实时端点是否成功创建来检查端点的状态。如果端点未激活，笔记本中下一个单元的代码将失败。端点准备好可能需要约*15分钟*：[图
    14.6 – 等待端点准备就绪
- en: '](img/B17528_14_06.jpg)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_14_06.jpg)'
- en: Figure 14.6 – Waiting for an endpoint to be ready
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.6 – 等待端点准备就绪
- en: 'When the endpoint is **Ready**, execute the code in the notebook cell to send
    the inference request to the custom entity recognizer, as shown here:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当端点**准备就绪**时，执行笔记本单元中的代码，将推理请求发送到自定义实体识别器，如下所示：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We see the output as shown in the following code block. This display shows
    that our Comprehend entity recognition has identified all these attributes that
    represent a valid person:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到的输出如下所示。此显示表明我们的 Comprehend 实体识别已识别出所有代表有效人的属性：
- en: '[PRE17]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The last task in *Step 4* is to prepare a `human_loop_input` list to be used
    with the Amazon A2I human workflow that we will create in the next step:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*第 4 步*中的最后一个任务是准备一个 `human_loop_input` 列表，以便与我们将在下一步中创建的 Amazon A2I 人工工作流一起使用：'
- en: '[PRE18]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this section, we were able to detect entities with the Amazon Comprehend
    entity recognizer. In the next section, we will walk through how you can use Amazon
    A2I to review the predictions and make changes to the predicted versus actual
    entity.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们能够使用 Amazon Comprehend 实体识别器检测实体。在下一节中，我们将介绍如何使用 Amazon A2I 审查预测并对预测实体与实际实体之间的差异进行修改。
- en: Setting up an Amazon A2I human workflow loop
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Amazon A2I 人工工作流循环
- en: 'For the code blocks discussed here, refer to *Step 5* in the notebook: [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这里讨论的代码块，请参阅笔记本中的*步骤 5*：[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb)。
- en: 'Now that we have the detected entities from our Comprehend custom entity recognizer,
    it''s time to set up a human workflow using the *private team* we created in *Step
    2* and send the results to the Amazon A2I human loop for review, and any modifications/augmentation
    as required. Subsequently, we will update the `entitylist.csv` file that we originally
    used to train our Comprehend custom entity recognizer so we can prepare it for
    retraining based on the human feedback:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经从 Comprehend 自定义实体识别器中获取了检测到的实体，是时候使用我们在*步骤 2*中创建的*私人团队*设置人工工作流，并将结果发送到亚马逊
    A2I 人工循环进行审查，以及根据需要进行修改/增强。随后，我们将更新最初用于训练 Comprehend 自定义实体识别器的`entitylist.csv`文件，以便根据人工反馈准备重新训练：
- en: 'Let''s start by initializing some variables we will need for the next few tasks:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先初始化一些接下来任务所需的变量：
- en: '[PRE19]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, we will create the human task UI by executing the next cell in the notebook
    (refer to *Step 5* in the notebook). We selected the task template for named entity
    recognition from the Amazon A2I Sample Task UI GitHub repository ([https://github.com/aws-samples/amazon-a2i-sample-task-uis](https://github.com/aws-samples/amazon-a2i-sample-task-uis))
    and customized it for our needs.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过执行笔记本中的下一个单元格来创建人工任务的用户界面（参见笔记本中的*步骤 5*）。我们从亚马逊 A2I 示例任务 UI GitHub 仓库（[https://github.com/aws-samples/amazon-a2i-sample-task-uis](https://github.com/aws-samples/amazon-a2i-sample-task-uis)）选择了命名实体识别任务模板，并根据我们的需求进行了自定义。
- en: 'Create the task UI based on the template:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于模板创建任务 UI：
- en: '[PRE20]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We get the output as shown:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到如下所示的输出：
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Execute the next couple of cells in the notebook to create the **Amazon A2I
    flow definition** that manages the orchestration of tasks to workforces and the
    collection of the output data. We are now ready to start the human workflow loop.
    Execute the next code block in the notebook to start the human loop.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行笔记本中的接下来几个单元格，以创建**亚马逊 A2I 流程定义**，该定义管理任务分配给工作团队的编排以及输出数据的收集。我们现在准备启动人工工作流循环。执行笔记本中的下一个代码块以启动人工循环。
- en: 'Check the status of your human loop by executing the code block in the next
    cell in the notebook – it should be `InProgress`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行笔记本中下一个单元格的代码来检查您的人工循环状态——它应该是`InProgress`：
- en: '[PRE22]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We get the output as shown:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到如下所示的输出：
- en: '[PRE23]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the next section, we will walk through how your private reviewers can log
    in to the console and review the entities detected by Amazon Comprehend.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将演示您的私人审查员如何登录到控制台并审查亚马逊 Comprehend 检测到的实体。
- en: Reviewing and modifying detected entities
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查和修改检测到的实体
- en: Now, we will log in to the **Amazon** **A2I** **Task UI** to review, change,
    and re-label the detected entities from our Comprehend custom entity recognizer.
    Execute the cells in the notebook based on the instructions discussed in this
    sectio:.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将登录到**亚马逊 A2I 任务 UI**，审查、修改并重新标注从 Comprehend 自定义实体识别器中检测到的实体。根据本节讨论的指示执行笔记本中的单元格：
- en: 'Let''s log in to the worker portal to review the predictions and modify them
    as required. Execute the following code to get the URL to our Task UI:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们登录到工作门户以审查预测并根据需要修改它们。执行以下代码以获取我们的任务 UI 的 URL：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Once you log in you will see a **LOAN APPLICATION REVIEW** task. Select it and
    click on **Start working**:![Figure 14.7 – Amazon A2I task list
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，您将看到一个**贷款申请审核**任务。选择它并点击**开始工作**：![图 14.7 – 亚马逊 A2I 任务列表
- en: '](img/B17528_14_07.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B17528_14_07.jpg)'
- en: Figure 14.7 – Amazon A2I task list
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.7 – 亚马逊 A2I 任务列表
- en: You should see the Amazon A2I labeling UI with the list of entities detected
    by Comprehend custom entity recognition highlighted along with the labels, as
    shown in the following screenshot:![Figure 14.8 – Amazon A2I labeling UI ready
    for human review](img/B17528_14_08.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该能够看到亚马逊 A2I 标签 UI，其中显示了由 Comprehend 自定义实体识别高亮的实体列表及其标签，如下图所示：![图 14.8 – 亚马逊
    A2I 标签 UI 准备好供人工审核](img/B17528_14_08.jpg)
- en: Figure 14.8 – Amazon A2I labeling UI ready for human review
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图14.8 – Amazon A2I标签界面准备好进行人工审核
- en: Now, select the **GHOST** label from the labels on the right then assign this
    to the unlabeled **Country:US** entry in the UI and click **Submit**.![Figure
    14.9 – Adding/modifying labels to the detected entities and clicking Submit](img/B17528_14_09.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从右侧的标签中选择**GHOST**标签，然后将其分配给UI中未标记的**Country:US**条目，并点击**提交**。[图14.9 – 向检测到的实体添加/修改标签并点击提交](img/B17528_14_09.jpg)
- en: Figure 14.9 – Adding/modifying labels to the detected entities and clicking
    Submit
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图14.9 – 向检测到的实体添加/修改标签并点击提交
- en: 'Continue executing the cells in the notebook to check the status of the human
    loop again (this should show a status of `entitylist.csv` file and trigger a retraining
    of our Comprehend custom entity recognizer. Let''s verify whether new entities
    are present:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续执行笔记本中的单元格，再次检查人工环路的状态（这应该显示`entitylist.csv`文件的状态，并触发我们Comprehend自定义实体识别器的再训练。让我们验证是否存在新实体：
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We see the output as shown in the following code block. Though Comprehend detected
    `Years` and `Cell Phone` to be a `PERSON` entity, it was not present in the original
    `entitylist.csv` file, and so it will be updated with these values and the Comprehend
    entity recognition will be re-trained:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到如下代码块显示的输出。尽管Comprehend将`Years`和`Cell Phone`识别为`PERSON`实体，但它并未出现在原始的`entitylist.csv`文件中，因此它将与这些值一起更新，并且Comprehend实体识别将重新训练：
- en: '[PRE26]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This response is saved automatically in the Amazon S3 bucket JSON file in the
    form of labels. In the next section, we will use these modified or reviewed labels
    to retrain our custom entity recognizer model.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此响应会自动保存为Amazon S3存储桶中的JSON文件，格式为标签。在下一部分，我们将使用这些修改或审核过的标签来重新训练我们的自定义实体识别器模型。
- en: Retraining Comprehend custom entity recognizer
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新训练Comprehend自定义实体识别器
- en: 'We will now retrain our Comprehend custom entity recognizer. The cells to be
    executed are similar to what we did when we originally trained our recognizer:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将重新训练我们的Comprehend自定义实体识别器。要执行的单元格与我们最初训练识别器时所做的类似：
- en: 'Execute the cells in *Step 7* of the notebook: [https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb).'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行笔记本中的*步骤7*单元格：[https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb](https://github.com/PacktPublishing/Natural-Language-Processing-with-AWS-AI-Services/blob/main/Chapter%2014/chapter14-auditing-workflows-named-entity-detection-forGitHub.ipynb)。
- en: 'After declaring variables, we execute the following code block to start the
    training:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明变量后，我们执行以下代码块以启动训练：
- en: '[PRE27]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We see the output shown that indicates the retraining job has been submitted.
    The metadata has been removed from the response for clarity:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到输出显示，表示重新训练任务已经提交。为了清晰起见，响应中的元数据已被移除：
- en: '[PRE28]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As before, go to the Amazon Comprehend console to check the status of the entity
    recognizer, and verify that the status has changed to **Trained**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与之前一样，转到Amazon Comprehend控制台，检查实体识别器的状态，并验证状态是否已更改为**已训练**。
- en: Please repeat *Steps 3* to *5* from the notebook to test the newly retrained
    recognizer.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请重复笔记本中的*步骤3*到*步骤5*，测试重新训练后的识别器。
- en: Let's now execute the steps to store the results of the authentication check
    for access by applications downstream.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行步骤，将认证检查的结果存储，以便下游应用程序访问。
- en: Storing decisions for downstream processing
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储下游处理的决策
- en: Now we understand how to set up an auditing workflow, let's execute the steps
    needed to persist the results from our entity detection so we can send them to
    a downstream application. If the majority or all of the entities are of the `GHOST`
    type, we will send a *rejection* decision, if the majority is of the `PERSON`
    type, we will send a *summary approval*, if all of them are `PERSON`, we will
    send *approval*, and if they are evenly distributed, we will send a *rejection*
    decisio:.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何设置审计工作流，让我们执行必要的步骤，将实体检测的结果持久化，以便将其发送到下游应用程序。如果大多数或所有实体都是`GHOST`类型，我们将发送*拒绝*决策；如果大多数是`PERSON`类型，我们将发送*总结批准*；如果全部都是`PERSON`，我们将发送*批准*；如果它们分布均匀，我们将发送*拒绝*决策：
- en: 'First, let''s check how many entities were detected to be of the `PERSON` or
    `GHOST` type from A2I. Execute the first cell in *Step 8* from the notebook. We
    get the output as shown:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们检查从 A2I 中检测到的`PERSON`或`GHOST`类型的实体数量。执行笔记本中*步骤 8*的第一个单元格。我们得到的输出如下：
- en: '[PRE29]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s apply the preceding rules to determine the decision for this loan application:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们应用之前的规则来决定该贷款申请的结果：
- en: '[PRE30]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We get the output `APPROVE`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到的输出是 `APPROVE`。
- en: 'Store the decision in an Amazon DynamoDB table (reminder: a managed database
    service for storing and accessing key-value pairs with very low latency). Loan
    processors can use this data to start the pre-qualification process. Execute the
    next cell in the notebook to create the DynamoDB table.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将决策存储在 Amazon DynamoDB 表中（提醒：这是一个托管的数据库服务，用于存储和访问具有极低延迟的键值对）。贷款处理器可以使用这些数据开始预资格审查过程。在笔记本中执行下一个单元格来创建
    DynamoDB 表。
- en: 'Now, execute the next cell in the notebook to insert the contents of the loan
    application and the decision into the table. We see the values inserted into the
    DynamoDB table as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，执行笔记本中的下一个单元格，将贷款申请的内容和决策插入到表中。我们看到插入到 DynamoDB 表中的值如下：
- en: '![Figure 14.10 – Loan authenticity check status in DynamoDB'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.10 – DynamoDB 中的贷款真实性检查状态'
- en: '](img/B17528_14_10.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17528_14_10.jpg)'
- en: Figure 14.10 – Loan authenticity check status in DynamoDB
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.10 – DynamoDB 中的贷款真实性检查状态
- en: That concludes the solution build. Please refer to the *Further reading* section
    for more examples of approaches for this use case, as well as the code sample
    for building a similar solution using **AWS** **Lambda** and **CloudFormation**.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了解决方案构建。请参考*进一步阅读*部分，获取更多关于此用例的解决方法示例，以及使用 **AWS** **Lambda** 和 **CloudFormation**
    构建类似解决方案的代码示例。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to build an auditing workflow for named entity
    recognition to solve real-world challenges that many organizations face today
    with document processing, using Amazon Textract, Amazon Comprehend, and Amazon
    A2I. We reviewed the loan authentication use case to validate the documents before
    they can be passed to a loan processor. We considered an architecture based on
    conditions such as reducing the validation time from 2 to 4 weeks to 24 hours
    within the first 3 months of solution implementation. We assumed that you, the
    reader, are the solution architect assigned to this project, and we reviewed an
    overview of the solution components along with an architectural illustration in
    *Figure 4.1*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何构建一个用于命名实体识别的审计工作流，以解决许多组织在文档处理方面面临的现实挑战，使用的工具包括 Amazon Textract、Amazon
    Comprehend 和 Amazon A2I。我们回顾了贷款认证的用例，以验证文档在传递给贷款处理器之前的有效性。我们考虑了一种架构，依据的条件包括将验证时间从
    2 到 4 周减少到 24 小时，这个过程将在解决方案实施后的前三个月内完成。我们假设你是这项项目的解决方案架构师，并回顾了解决方案组件的概述以及*图 4.1*中的架构图示。
- en: We then went through the pre-requisites for the solution build, set up an Amazon
    SageMaker Notebook instance, cloned our GitHub repository, and started executing
    the code in the notebook based on instructions from this chapter. We covered training
    an Amazon Comprehend custom entity recognizer, setting up our private work team
    using Amazon SageMaker labeling workforces, extracting the relevant content from
    the loan application using Amazon Textract, sending it to the Comprehend custom
    entity recognizer for detecting entities, forwarding the detection results to
    an Amazon A2I human review loop, completing the human task steps using the UI,
    reviewing the results of the review, updating the entities list to retrain the
    custom entity recognizer, and finally, storing the document contents and the loan
    validation decision to an Amazon DynamoDB table for downstream processing.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们逐步讲解了解决方案构建的先决条件，设置了一个 Amazon SageMaker Notebook 实例，克隆了我们的 GitHub 仓库，并根据本章的说明开始执行笔记本中的代码。我们涵盖了如何训练
    Amazon Comprehend 的自定义实体识别器，如何使用 Amazon SageMaker 标注工作队伍建立我们的私人工作团队，如何使用 Amazon
    Textract 提取贷款申请中的相关内容，将其发送到 Comprehend 自定义实体识别器进行实体检测，将检测结果转发到 Amazon A2I 人工审核循环，使用
    UI 完成人工任务步骤，审查审核结果，更新实体列表以重新训练自定义实体识别器，最后将文档内容和贷款验证决策存储到 Amazon DynamoDB 表中以供后续处理。
- en: In the next chapter, we will be building a classical use case that's tailor-made
    for NLP – namely, the active learning workflow for text classification. We will
    be training a text classification model using Amazon Comprehend custom for labeling
    documents into classes, review predictions using Amazon A2I, and retrain the classifier
    based on feedback from the Amazon A2I human review loop. We will demonstrate how
    the solution evolves in intelligence in being able to improve classification accuracy
    because of the feedback loop.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个为NLP量身定制的经典用例——即文本分类的主动学习工作流。我们将使用Amazon Comprehend custom训练一个文本分类模型，用于将文档标记为不同类别，利用Amazon
    A2I审查预测结果，并根据Amazon A2I人工审阅反馈重新训练分类器。我们将展示该解决方案如何通过反馈循环在提高分类准确性方面不断发展智能化。
- en: Further reading
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '*Building an end-to-end intelligent document processing solution using AWS*
    by Purnesh Tripathi: [https://aws.amazon.com/blogs/machine-learning/building-an-end-to-end-intelligent-document-processing-solution-using-aws/](https://aws.amazon.com/blogs/machine-learning/building-an-end-to-end-intelligent-document-processing-solution-using-aws/)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用AWS构建端到端智能文档处理解决方案*，作者：Purnesh Tripathi: [https://aws.amazon.com/blogs/machine-learning/building-an-end-to-end-intelligent-document-processing-solution-using-aws/](https://aws.amazon.com/blogs/machine-learning/building-an-end-to-end-intelligent-document-processing-solution-using-aws/)'
- en: '*Setting up human review of your NLP-based entity recognition models with Amazon
    SageMaker Ground Truth, Amazon Comprehend, and Amazon A2I* by Mona Mona and Prem
    Ranga: [https://aws.amazon.com/blogs/machine-learning/setting-up-human-review-of-your-nlp-based-entity-recognition-models-with-amazon-sagemaker-ground-truth-amazon-comprehend-and-amazon-a2i/](https://aws.amazon.com/blogs/machine-learning/setting-up-human-review-of-your-nlp-based-entity-recognition-models-with-amazon-sagemaker-ground-truth-amazon-comprehend-and-amazon-a2i/)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Amazon SageMaker Ground Truth、Amazon Comprehend和Amazon A2I设置NLP基础的实体识别模型的人工审阅*，作者：Mona
    Mona 和 Prem Ranga: [https://aws.amazon.com/blogs/machine-learning/setting-up-human-review-of-your-nlp-based-entity-recognition-models-with-amazon-sagemaker-ground-truth-amazon-comprehend-and-amazon-a2i/](https://aws.amazon.com/blogs/machine-learning/setting-up-human-review-of-your-nlp-based-entity-recognition-models-with-amazon-sagemaker-ground-truth-amazon-comprehend-and-amazon-a2i/)'
- en: '*Announcing model improvements and lower annotation limits for Amazon Comprehend
    custom entity recognition* by Prem Ranga, Chethan Krishna, and Mona Mona: [https://aws.amazon.com/blogs/machine-learning/announcing-model-improvements-and-lower-annotation-limits-for-amazon-comprehend-custom-entity-recognition/](https://aws.amazon.com/blogs/machine-learning/announcing-model-improvements-and-lower-annotation-limits-for-amazon-comprehend-custom-entity-recognition/)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*宣布Amazon Comprehend custom实体识别模型改进和更低的标注限制*，作者：Prem Ranga、Chethan Krishna
    和 Mona Mona: [https://aws.amazon.com/blogs/machine-learning/announcing-model-improvements-and-lower-annotation-limits-for-amazon-comprehend-custom-entity-recognition/](https://aws.amazon.com/blogs/machine-learning/announcing-model-improvements-and-lower-annotation-limits-for-amazon-comprehend-custom-entity-recognition/)'
